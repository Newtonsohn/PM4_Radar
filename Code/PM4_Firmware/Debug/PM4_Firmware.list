
PM4_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022134  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b54  080222e4  080222e4  000232e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000002c4  08023e38  08023e38  00024e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080240fc  080240fc  000250fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00003840  08024114  08024114  00025114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000050  08027954  08027954  00028954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080279a4  080279a4  0004eb00  2**0
                  CONTENTS, READONLY
  8 .ARM          00000008  080279a4  080279a4  000289a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080279ac  080279ac  0004eb00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080279ac  080279ac  000289ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000008  080279c0  080279c0  000289c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         000000f8  20000000  080279c8  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 00025800  200000f8  08027ac0  000290f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferA 00000100  20025900  0804d2c0  0004e900  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferB 00000100  20025a00  0804d3c0  0004ea00  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 .ccmram       00000000  10000000  10000000  0004eb00  2**0
                  CONTENTS
 17 .bss          00006264  20025b00  20025b00  0004eb00  2**2
                  ALLOC
 18 ._user_heap_stack 00000604  2002bd64  2002bd64  0004eb00  2**0
                  ALLOC
 19 .ARM.attributes 00000030  00000000  00000000  0004eb00  2**0
                  CONTENTS, READONLY
 20 .debug_info   00079dde  00000000  00000000  0004eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 0000f674  00000000  00000000  000c890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00003168  00000000  00000000  000d7f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000024e2  00000000  00000000  000db0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0000cb93  00000000  00000000  000dd5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   00038553  00000000  00000000  000ea165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    00113442  00000000  00000000  001226b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000c2  00000000  00000000  00235afa  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000d96c  00000000  00000000  00235bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006a  00000000  00000000  00243528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20025b00 	.word	0x20025b00
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080222cc 	.word	0x080222cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20025b04 	.word	0x20025b04
 80001ec:	080222cc 	.word	0x080222cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f8f0 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f82e 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fb44 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 fad2 	bl	8000b74 <MX_DMA_Init>
  MX_ADC1_Init();
 80005d0:	f000 f894 	bl	80006fc <MX_ADC1_Init>
  MX_ADC2_Init();
 80005d4:	f000 f908 	bl	80007e8 <MX_ADC2_Init>
  MX_TIM2_Init();
 80005d8:	f000 fa4c 	bl	8000a74 <MX_TIM2_Init>
  MX_SPI4_Init();
 80005dc:	f000 fa14 	bl	8000a08 <MX_SPI4_Init>
  MX_TIM6_Init();
 80005e0:	f000 fa94 	bl	8000b0c <MX_TIM6_Init>
  MX_CRC_Init();
 80005e4:	f000 f94a 	bl	800087c <MX_CRC_Init>
  MX_DMA2D_Init();
 80005e8:	f000 f95c 	bl	80008a4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ec:	f000 fae2 	bl	8000bb4 <MX_FMC_Init>
  MX_LTDC_Init();
 80005f0:	f000 f98a 	bl	8000908 <MX_LTDC_Init>
  MX_TouchGFX_Init();
 80005f4:	f007 fd7f 	bl	80080f6 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80005f8:	f007 fd76 	bl	80080e8 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 f9a6 	bl	800494c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <main+0x5c>)
 8000602:	2100      	movs	r1, #0
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x60>)
 8000606:	f004 f9eb 	bl	80049e0 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <main+0x64>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 f9c0 	bl	8004994 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x58>
 8000618:	08022d58 	.word	0x08022d58
 800061c:	08000d69 	.word	0x08000d69
 8000620:	20025e2c 	.word	0x20025e2c

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f020 ffd5 	bl	80215e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800069c:	23c0      	movs	r3, #192	@ 0xc0
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fca3 	bl	8002ff8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fb70 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2103      	movs	r1, #3
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ff04 	bl	80034e8 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 fb59 	bl	8000d9c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800071c:	4a31      	ldr	r2, [pc, #196]	@ (80007e4 <MX_ADC1_Init+0xe8>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000722:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000730:	2201      	movs	r2, #1
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000736:	2201      	movs	r2, #1
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000742:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800074a:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800074c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000750:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800075a:	2202      	movs	r2, #2
 800075c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000768:	2201      	movs	r2, #1
 800076a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 800076e:	f001 f85b 	bl	8001828 <HAL_ADC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000778:	f000 fb10 	bl	8000d9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800077c:	2306      	movs	r3, #6
 800077e:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 8000792:	f001 fabb 	bl	8001d0c <HAL_ADCEx_MultiModeConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800079c:	f000 fafe 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007a0:	230e      	movs	r3, #14
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 80007b2:	f001 f87d 	bl	80018b0 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007bc:	f000 faee 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_ADC1_Init+0xe4>)
 80007ca:	f001 f871 	bl	80018b0 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007d4:	f000 fae2 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20025b1c 	.word	0x20025b1c
 80007e4:	40012000 	.word	0x40012000

080007e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_ADC2_Init+0x8c>)
 80007fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <MX_ADC2_Init+0x90>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000802:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000806:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_ADC2_Init+0x8c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000816:	2201      	movs	r2, #1
 8000818:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_ADC2_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_ADC2_Init+0x8c>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_ADC2_Init+0x8c>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_ADC2_Init+0x8c>)
 800083e:	f000 fff3 	bl	8001828 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8000848:	f000 faa8 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800084c:	230f      	movs	r3, #15
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000854:	2301      	movs	r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_ADC2_Init+0x8c>)
 800085e:	f001 f827 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000868:	f000 fa98 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20025b64 	.word	0x20025b64
 8000878:	40012100 	.word	0x40012100

0800087c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_CRC_Init+0x20>)
 8000882:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <MX_CRC_Init+0x24>)
 8000884:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_CRC_Init+0x20>)
 8000888:	f001 fb68 	bl	8001f5c <HAL_CRC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000892:	f000 fa83 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20025c0c 	.word	0x20025c0c
 80008a0:	40023000 	.word	0x40023000

080008a4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <MX_DMA2D_Init+0x60>)
 80008ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008da:	f001 fe45 	bl	8002568 <HAL_DMA2D_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e4:	f000 fa5a 	bl	8000d9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008e8:	2101      	movs	r1, #1
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_DMA2D_Init+0x5c>)
 80008ec:	f001 fe86 	bl	80025fc <HAL_DMA2D_ConfigLayer>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008f6:	f000 fa51 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20025c14 	.word	0x20025c14
 8000904:	4002b000 	.word	0x4002b000

08000908 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2234      	movs	r2, #52	@ 0x34
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f020 fe64 	bl	80215e2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800091a:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 800091c:	4a39      	ldr	r2, [pc, #228]	@ (8000a04 <MX_LTDC_Init+0xfc>)
 800091e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000920:	4b37      	ldr	r3, [pc, #220]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000926:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800092c:	4b34      	ldr	r3, [pc, #208]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 800093a:	2207      	movs	r2, #7
 800093c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000940:	2203      	movs	r2, #3
 8000942:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000944:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000946:	220e      	movs	r2, #14
 8000948:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 800094c:	2205      	movs	r2, #5
 800094e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000952:	22fe      	movs	r2, #254	@ 0xfe
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000956:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000958:	f240 1245 	movw	r2, #325	@ 0x145
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 260;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000960:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000968:	f240 1247 	movw	r2, #327	@ 0x147
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800096e:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000986:	481e      	ldr	r0, [pc, #120]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 8000988:	f002 f890 	bl	8002aac <HAL_LTDC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8000992:	f000 fa03 	bl	8000d9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800099a:	23f0      	movs	r3, #240	@ 0xf0
 800099c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80009a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009a6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009ac:	23ff      	movs	r3, #255	@ 0xff
 80009ae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xc0000000;
 80009be:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80009c4:	23f0      	movs	r3, #240	@ 0xf0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80009c8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009cc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_LTDC_Init+0xf8>)
 80009e8:	f002 f930 	bl	8002c4c <HAL_LTDC_ConfigLayer>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80009f2:	f000 f9d3 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3738      	adds	r7, #56	@ 0x38
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20025c54 	.word	0x20025c54
 8000a04:	40016800 	.word	0x40016800

08000a08 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a0e:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <MX_SPI4_Init+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a18:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a38:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a54:	220a      	movs	r2, #10
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_SPI4_Init+0x64>)
 8000a5a:	f003 f96f 	bl	8003d3c <HAL_SPI_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000a64:	f000 f99a 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20025cfc 	.word	0x20025cfc
 8000a70:	40013400 	.word	0x40013400

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000a92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000a9a:	2253      	movs	r2, #83	@ 0x53
 8000a9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000aa6:	2263      	movs	r2, #99	@ 0x63
 8000aa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab6:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000ab8:	f003 f9c9 	bl	8003e4e <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f96b 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000ad4:	f003 fb6a 	bl	80041ac <HAL_TIM_ConfigClockSource>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 f95d 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <MX_TIM2_Init+0x94>)
 8000af0:	f003 fd92 	bl	8004618 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000afa:	f000 f94f 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20025d54 	.word	0x20025d54

08000b0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b1c:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <MX_TIM6_Init+0x64>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b22:	2253      	movs	r2, #83	@ 0x53
 8000b24:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b3a:	f003 f988 	bl	8003e4e <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000b44:	f000 f92a 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_TIM6_Init+0x60>)
 8000b56:	f003 fd5f 	bl	8004618 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f91c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20025d9c 	.word	0x20025d9c
 8000b70:	40001000 	.word	0x40001000

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_DMA_Init+0x3c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <MX_DMA_Init+0x3c>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_DMA_Init+0x3c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2105      	movs	r1, #5
 8000b9a:	2038      	movs	r0, #56	@ 0x38
 8000b9c:	f001 f9b4 	bl	8001f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ba0:	2038      	movs	r0, #56	@ 0x38
 8000ba2:	f001 f9cd 	bl	8001f40 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bce:	4a20      	ldr	r2, [pc, #128]	@ (8000c50 <MX_FMC_Init+0x9c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000be6:	2210      	movs	r2, #16
 8000be8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bf2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000bf6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000c06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000c12:	2310      	movs	r3, #16
 8000c14:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000c16:	2310      	movs	r3, #16
 8000c18:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000c22:	2310      	movs	r3, #16
 8000c24:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000c26:	2310      	movs	r3, #16
 8000c28:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <MX_FMC_Init+0x98>)
 8000c34:	f003 f816 	bl	8003c64 <HAL_SDRAM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000c3e:	f000 f8ad 	bl	8000d9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20025de4 	.word	0x20025de4
 8000c50:	a0000140 	.word	0xa0000140

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a3b      	ldr	r2, [pc, #236]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b39      	ldr	r3, [pc, #228]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b35      	ldr	r3, [pc, #212]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a34      	ldr	r2, [pc, #208]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b32      	ldr	r3, [pc, #200]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_GPIO_Init+0x10c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_GPIO_Init+0x110>)
 8000d36:	f001 fe9f 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d44:	2302      	movs	r3, #2
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_GPIO_Init+0x110>)
 8000d54:	f001 fce4 	bl	8002720 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3730      	adds	r7, #48	@ 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f003 fec7 	bl	8004b04 <osDelay>
 8000d76:	e7fb      	b.n	8000d70 <StartDefaultTask+0x8>

08000d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d8a:	f000 fd2d 	bl	80017e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010000 	.word	0x40010000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <Error_Handler+0x8>

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_MspInit+0x54>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <HAL_MspInit+0x54>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <HAL_MspInit+0x54>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <HAL_MspInit+0x54>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_MspInit+0x54>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_MspInit+0x54>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	210f      	movs	r1, #15
 8000dea:	f06f 0001 	mvn.w	r0, #1
 8000dee:	f001 f88b 	bl	8001f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a46      	ldr	r2, [pc, #280]	@ (8000f38 <HAL_ADC_MspInit+0x138>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d159      	bne.n	8000ed6 <HAL_ADC_MspInit+0xd6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b45      	ldr	r3, [pc, #276]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a44      	ldr	r2, [pc, #272]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a3d      	ldr	r2, [pc, #244]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <HAL_ADC_MspInit+0x140>)
 8000e6e:	f001 fc57 	bl	8002720 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e72:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e74:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <HAL_ADC_MspInit+0x148>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000e9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ea0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000eac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000eb0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb8:	4822      	ldr	r0, [pc, #136]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000eba:	f001 f86b 	bl	8001f94 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000ec4:	f7ff ff6a 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ece:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <HAL_ADC_MspInit+0x144>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ed4:	e02c      	b.n	8000f30 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <HAL_ADC_MspInit+0x14c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d127      	bne.n	8000f30 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_ADC_MspInit+0x13c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_ADC_MspInit+0x140>)
 8000f2c:	f001 fbf8 	bl	8002720 <HAL_GPIO_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	@ 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020800 	.word	0x40020800
 8000f44:	20025bac 	.word	0x20025bac
 8000f48:	40026410 	.word	0x40026410
 8000f4c:	40012100 	.word	0x40012100

08000f50 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <HAL_CRC_MspInit+0x3c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10d      	bne.n	8000f7e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_CRC_MspInit+0x40>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <HAL_CRC_MspInit+0x40>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <HAL_CRC_MspInit+0x40>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023000 	.word	0x40023000
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <HAL_DMA2D_MspInit+0x3c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10d      	bne.n	8000fc2 <HAL_DMA2D_MspInit+0x2e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_DMA2D_MspInit+0x40>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_DMA2D_MspInit+0x40>)
 8000fb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_DMA2D_MspInit+0x40>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	4002b000 	.word	0x4002b000
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09a      	sub	sp, #104	@ 0x68
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff4:	2230      	movs	r2, #48	@ 0x30
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f020 faf2 	bl	80215e2 <memset>
  if(hltdc->Instance==LTDC)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a80      	ldr	r2, [pc, #512]	@ (8001204 <HAL_LTDC_MspInit+0x22c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	f040 80f9 	bne.w	80011fc <HAL_LTDC_MspInit+0x224>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800100a:	2308      	movs	r3, #8
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800100e:	23c0      	movs	r3, #192	@ 0xc0
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001016:	2300      	movs	r3, #0
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fc60 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800102a:	f7ff feb7 	bl	8000d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	4b75      	ldr	r3, [pc, #468]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a74      	ldr	r2, [pc, #464]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001038:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b72      	ldr	r3, [pc, #456]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001046:	623b      	str	r3, [r7, #32]
 8001048:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	4b6e      	ldr	r3, [pc, #440]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a6d      	ldr	r2, [pc, #436]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b6b      	ldr	r3, [pc, #428]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	4b67      	ldr	r3, [pc, #412]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b64      	ldr	r3, [pc, #400]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	4b60      	ldr	r3, [pc, #384]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a5f      	ldr	r2, [pc, #380]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b5d      	ldr	r3, [pc, #372]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b59      	ldr	r3, [pc, #356]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a58      	ldr	r2, [pc, #352]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b56      	ldr	r3, [pc, #344]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a51      	ldr	r2, [pc, #324]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a4a      	ldr	r2, [pc, #296]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b48      	ldr	r3, [pc, #288]	@ (8001208 <HAL_LTDC_MspInit+0x230>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001104:	230e      	movs	r3, #14
 8001106:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001108:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110c:	4619      	mov	r1, r3
 800110e:	483f      	ldr	r0, [pc, #252]	@ (800120c <HAL_LTDC_MspInit+0x234>)
 8001110:	f001 fb06 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001114:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001126:	230e      	movs	r3, #14
 8001128:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800112e:	4619      	mov	r1, r3
 8001130:	4837      	ldr	r0, [pc, #220]	@ (8001210 <HAL_LTDC_MspInit+0x238>)
 8001132:	f001 faf5 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001136:	2303      	movs	r3, #3
 8001138:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001146:	2309      	movs	r3, #9
 8001148:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114e:	4619      	mov	r1, r3
 8001150:	4830      	ldr	r0, [pc, #192]	@ (8001214 <HAL_LTDC_MspInit+0x23c>)
 8001152:	f001 fae5 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001156:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800115a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001168:	230e      	movs	r3, #14
 800116a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001170:	4619      	mov	r1, r3
 8001172:	4828      	ldr	r0, [pc, #160]	@ (8001214 <HAL_LTDC_MspInit+0x23c>)
 8001174:	f001 fad4 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001178:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800117c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118a:	230e      	movs	r3, #14
 800118c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001192:	4619      	mov	r1, r3
 8001194:	4820      	ldr	r0, [pc, #128]	@ (8001218 <HAL_LTDC_MspInit+0x240>)
 8001196:	f001 fac3 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119a:	23c0      	movs	r3, #192	@ 0xc0
 800119c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011aa:	230e      	movs	r3, #14
 80011ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b2:	4619      	mov	r1, r3
 80011b4:	4819      	ldr	r0, [pc, #100]	@ (800121c <HAL_LTDC_MspInit+0x244>)
 80011b6:	f001 fab3 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ba:	2308      	movs	r3, #8
 80011bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ca:	230e      	movs	r3, #14
 80011cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d2:	4619      	mov	r1, r3
 80011d4:	4812      	ldr	r0, [pc, #72]	@ (8001220 <HAL_LTDC_MspInit+0x248>)
 80011d6:	f001 faa3 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80011da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ec:	2309      	movs	r3, #9
 80011ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f4:	4619      	mov	r1, r3
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <HAL_LTDC_MspInit+0x240>)
 80011f8:	f001 fa92 	bl	8002720 <HAL_GPIO_Init>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011fc:	bf00      	nop
 80011fe:	3768      	adds	r7, #104	@ 0x68
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40016800 	.word	0x40016800
 8001208:	40023800 	.word	0x40023800
 800120c:	40021400 	.word	0x40021400
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40021800 	.word	0x40021800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00

08001224 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_SPI_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12b      	bne.n	800129e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800127e:	2364      	movs	r3, #100	@ 0x64
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_SPI_MspInit+0x8c>)
 800129a:	f001 fa41 	bl	8002720 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013400 	.word	0x40013400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c4:	d10e      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012e2:	e012      	b.n	800130a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <HAL_TIM_Base_MspInit+0x68>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10d      	bne.n	800130a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_TIM_Base_MspInit+0x64>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40001000 	.word	0x40001000

08001320 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001334:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_FMC_MspInit+0x104>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d16f      	bne.n	800141c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800133c:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <HAL_FMC_MspInit+0x104>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <HAL_FMC_MspInit+0x108>)
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	4a37      	ldr	r2, [pc, #220]	@ (8001428 <HAL_FMC_MspInit+0x108>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6393      	str	r3, [r2, #56]	@ 0x38
 8001352:	4b35      	ldr	r3, [pc, #212]	@ (8001428 <HAL_FMC_MspInit+0x108>)
 8001354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800135e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001362:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001370:	230c      	movs	r3, #12
 8001372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	482c      	ldr	r0, [pc, #176]	@ (800142c <HAL_FMC_MspInit+0x10c>)
 800137a:	f001 f9d1 	bl	8002720 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137e:	2301      	movs	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4826      	ldr	r0, [pc, #152]	@ (8001430 <HAL_FMC_MspInit+0x110>)
 8001398:	f001 f9c2 	bl	8002720 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800139c:	f248 1311 	movw	r3, #33041	@ 0x8111
 80013a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ae:	230c      	movs	r3, #12
 80013b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	481f      	ldr	r0, [pc, #124]	@ (8001434 <HAL_FMC_MspInit+0x114>)
 80013b8:	f001 f9b2 	bl	8002720 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013bc:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80013c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4818      	ldr	r0, [pc, #96]	@ (8001438 <HAL_FMC_MspInit+0x118>)
 80013d8:	f001 f9a2 	bl	8002720 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013dc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <HAL_FMC_MspInit+0x11c>)
 80013f8:	f001 f992 	bl	8002720 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013fc:	2360      	movs	r3, #96	@ 0x60
 80013fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140c:	230c      	movs	r3, #12
 800140e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	480a      	ldr	r0, [pc, #40]	@ (8001440 <HAL_FMC_MspInit+0x120>)
 8001416:	f001 f983 	bl	8002720 <HAL_GPIO_Init>
 800141a:	e000      	b.n	800141e <HAL_FMC_MspInit+0xfe>
    return;
 800141c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20025e30 	.word	0x20025e30
 8001428:	40023800 	.word	0x40023800
 800142c:	40021400 	.word	0x40021400
 8001430:	40020800 	.word	0x40020800
 8001434:	40021800 	.word	0x40021800
 8001438:	40021000 	.word	0x40021000
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40020400 	.word	0x40020400

08001444 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800144c:	f7ff ff68 	bl	8001320 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <HAL_InitTick+0xd4>)
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	4a2e      	ldr	r2, [pc, #184]	@ (800152c <HAL_InitTick+0xd4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6453      	str	r3, [r2, #68]	@ 0x44
 8001478:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <HAL_InitTick+0xd4>)
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f9f6 	bl	8003880 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001494:	f002 f9e0 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 8001498:	4603      	mov	r3, r0
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <HAL_InitTick+0xd8>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	0c9b      	lsrs	r3, r3, #18
 80014a8:	3b01      	subs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_InitTick+0xdc>)
 80014ae:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <HAL_InitTick+0xe0>)
 80014b0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_InitTick+0xdc>)
 80014b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <HAL_InitTick+0xdc>)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_InitTick+0xdc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_InitTick+0xdc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_InitTick+0xdc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014d2:	4818      	ldr	r0, [pc, #96]	@ (8001534 <HAL_InitTick+0xdc>)
 80014d4:	f002 fcbb 	bl	8003e4e <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d11b      	bne.n	800151e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014e6:	4813      	ldr	r0, [pc, #76]	@ (8001534 <HAL_InitTick+0xdc>)
 80014e8:	f002 fd00 	bl	8003eec <HAL_TIM_Base_Start_IT>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d111      	bne.n	800151e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014fa:	2019      	movs	r0, #25
 80014fc:	f000 fd20 	bl	8001f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d808      	bhi.n	8001518 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	2019      	movs	r0, #25
 800150c:	f000 fcfc 	bl	8001f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001510:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_InitTick+0xe4>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e002      	b.n	800151e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800151e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001522:	4618      	mov	r0, r3
 8001524:	3730      	adds	r7, #48	@ 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	431bde83 	.word	0x431bde83
 8001534:	20025e34 	.word	0x20025e34
 8001538:	40010000 	.word	0x40010000
 800153c:	20000008 	.word	0x20000008

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800157e:	f002 fd25 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20025e34 	.word	0x20025e34

0800158c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA2_Stream0_IRQHandler+0x10>)
 8001592:	f000 fdad 	bl	80020f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20025bac 	.word	0x20025bac

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ba:	f020 f913 	bl	80217e4 <__errno>
 80015be:	4603      	mov	r3, r0
 80015c0:	2216      	movs	r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
  return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_exit>:

void _exit (int status)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <_exit+0x12>

080015e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e00a      	b.n	800160e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f8:	f3af 8000 	nop.w
 80015fc:	4601      	mov	r1, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	b2ca      	uxtb	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf0      	blt.n	80015f8 <_read+0x12>
  }

  return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e009      	b.n	8001646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf1      	blt.n	8001632 <_write+0x12>
  }
  return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_close>:

int _close(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001680:	605a      	str	r2, [r3, #4]
  return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_isatty>:

int _isatty(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f020 f878 	bl	80217e4 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20030000 	.word	0x20030000
 8001720:	00000400 	.word	0x00000400
 8001724:	20025e7c 	.word	0x20025e7c
 8001728:	2002bd68 	.word	0x2002bd68

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001754:	f7ff ffea 	bl	800172c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800177e:	f020 f837 	bl	80217f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7fe ff1b 	bl	80005bc <main>
  bx  lr    
 8001786:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001794:	080279c8 	.word	0x080279c8
  ldr r2, =_sbss
 8001798:	20025b00 	.word	0x20025b00
  ldr r4, =_ebss
 800179c:	2002bd64 	.word	0x2002bd64

080017a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <HAL_Init+0x40>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_Init+0x40>)
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <HAL_Init+0x40>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 fb90 	bl	8001ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f7ff fe40 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fae6 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023c00 	.word	0x40023c00

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20025e80 	.word	0x20025e80

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20025e80 	.word	0x20025e80

08001828 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e033      	b.n	80018a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fada 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800186e:	f023 0302 	bic.w	r3, r3, #2
 8001872:	f043 0202 	orr.w	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f94a 	bl	8001b14 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40
 8001896:	e001      	b.n	800189c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1c>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e113      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x244>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d925      	bls.n	8001928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	3b1e      	subs	r3, #30
 800191c:	409a      	lsls	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	e022      	b.n	800196e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	4603      	mov	r3, r0
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b06      	cmp	r3, #6
 8001974:	d824      	bhi.n	80019c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019be:	e04c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d824      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b23      	subs	r3, #35	@ 0x23
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b23      	subs	r3, #35	@ 0x23
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a10:	e023      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b41      	subs	r3, #65	@ 0x41
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b41      	subs	r3, #65	@ 0x41
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <HAL_ADC_ConfigChannel+0x250>)
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <HAL_ADC_ConfigChannel+0x254>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10f      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d8>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d10b      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_ADC_ConfigChannel+0x254>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x23a>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <HAL_ADC_ConfigChannel+0x258>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0x1f4>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b11      	cmp	r3, #17
 8001aa2:	d122      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <HAL_ADC_ConfigChannel+0x258>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_ADC_ConfigChannel+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <HAL_ADC_ConfigChannel+0x260>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	40012000 	.word	0x40012000
 8001b08:	10000012 	.word	0x10000012
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	431bde83 	.word	0x431bde83

08001b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1c:	4b79      	ldr	r3, [pc, #484]	@ (8001d04 <ADC_Init+0x1f0>)
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	021a      	lsls	r2, r3, #8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6899      	ldr	r1, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	4a58      	ldr	r2, [pc, #352]	@ (8001d08 <ADC_Init+0x1f4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d022      	beq.n	8001bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6899      	ldr	r1, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	e00f      	b.n	8001c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0202 	bic.w	r2, r2, #2
 8001c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	005a      	lsls	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01b      	beq.n	8001c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	035a      	lsls	r2, r3, #13
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e007      	b.n	8001c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	051a      	lsls	r2, r3, #20
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cca:	025a      	lsls	r2, r3, #9
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	029a      	lsls	r2, r3, #10
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40012300 	.word	0x40012300
 8001d08:	0f000001 	.word	0x0f000001

08001d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e031      	b.n	8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 021f 	bic.w	r2, r3, #31
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40012300 	.word	0x40012300

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	@ (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff4c 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1a:	f7ff ff61 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f7ff ffb1 	bl	8001e8c <NVIC_EncodePriority>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff80 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff54 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	795b      	ldrb	r3, [r3, #5]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe ffe6 	bl	8000f50 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fc36 	bl	8001810 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e099      	b.n	80020e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd0:	e00f      	b.n	8001ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd2:	f7ff fc1d 	bl	8001810 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d908      	bls.n	8001ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e078      	b.n	80020e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e8      	bne.n	8001fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_DMA_Init+0x158>)
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4313      	orrs	r3, r2
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f023 0307 	bic.w	r3, r3, #7
 8002072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2b04      	cmp	r3, #4
 8002084:	d117      	bne.n	80020b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9e9 	bl	8002470 <DMA_CheckFifoParam>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020b2:	2301      	movs	r3, #1
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f9a0 	bl	8002404 <DMA_CalcBaseAndBitshift>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	223f      	movs	r2, #63	@ 0x3f
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	f010803f 	.word	0xf010803f

080020f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002338 <HAL_DMA_IRQHandler+0x248>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a8e      	ldr	r2, [pc, #568]	@ (800233c <HAL_DMA_IRQHandler+0x24c>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0a9b      	lsrs	r3, r3, #10
 8002108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	2208      	movs	r2, #8
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01a      	beq.n	800215c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	2208      	movs	r2, #8
 800214a:	409a      	lsls	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d012      	beq.n	8002192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	2201      	movs	r2, #1
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	2204      	movs	r2, #4
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	2204      	movs	r2, #4
 80021b6:	409a      	lsls	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f043 0204 	orr.w	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	2210      	movs	r2, #16
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d043      	beq.n	8002260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d03c      	beq.n	8002260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	2210      	movs	r2, #16
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d018      	beq.n	8002232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d108      	bne.n	8002220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d024      	beq.n	8002260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e01f      	b.n	8002260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e016      	b.n	8002260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0208 	bic.w	r2, r2, #8
 800224e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2220      	movs	r2, #32
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 808f 	beq.w	8002390 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8087 	beq.w	8002390 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2220      	movs	r2, #32
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b05      	cmp	r3, #5
 8002298:	d136      	bne.n	8002308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0216 	bic.w	r2, r2, #22
 80022a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_DMA_IRQHandler+0x1da>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	223f      	movs	r2, #63	@ 0x3f
 80022e0:	409a      	lsls	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d07e      	beq.n	80023fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
        }
        return;
 8002306:	e079      	b.n	80023fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01d      	beq.n	8002352 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	2b00      	cmp	r3, #0
 800232a:	d031      	beq.n	8002390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e02c      	b.n	8002390 <HAL_DMA_IRQHandler+0x2a0>
 8002336:	bf00      	nop
 8002338:	20000004 	.word	0x20000004
 800233c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d023      	beq.n	8002390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
 8002350:	e01e      	b.n	8002390 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0210 	bic.w	r2, r2, #16
 800236e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d022      	beq.n	80023ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2205      	movs	r2, #5
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3301      	adds	r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d307      	bcc.n	80023d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f2      	bne.n	80023bc <HAL_DMA_IRQHandler+0x2cc>
 80023d6:	e000      	b.n	80023da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e000      	b.n	80023fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80023fc:	bf00      	nop
    }
  }
}
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3b10      	subs	r3, #16
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <DMA_CalcBaseAndBitshift+0x64>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800241e:	4a13      	ldr	r2, [pc, #76]	@ (800246c <DMA_CalcBaseAndBitshift+0x68>)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d909      	bls.n	8002446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	@ 0x58
 8002444:	e007      	b.n	8002456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	aaaaaaab 	.word	0xaaaaaaab
 800246c:	08022d94 	.word	0x08022d94

08002470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11f      	bne.n	80024ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d856      	bhi.n	800253e <DMA_CheckFifoParam+0xce>
 8002490:	a201      	add	r2, pc, #4	@ (adr r2, 8002498 <DMA_CheckFifoParam+0x28>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024bb 	.word	0x080024bb
 80024a0:	080024a9 	.word	0x080024a9
 80024a4:	0800253f 	.word	0x0800253f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d046      	beq.n	8002542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e043      	b.n	8002542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024c2:	d140      	bne.n	8002546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c8:	e03d      	b.n	8002546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024d2:	d121      	bne.n	8002518 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d837      	bhi.n	800254a <DMA_CheckFifoParam+0xda>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <DMA_CheckFifoParam+0x70>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024f7 	.word	0x080024f7
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002509 	.word	0x08002509
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      break;
 80024f4:	e030      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d025      	beq.n	800254e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002506:	e022      	b.n	800254e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002510:	d11f      	bne.n	8002552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002516:	e01c      	b.n	8002552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d903      	bls.n	8002526 <DMA_CheckFifoParam+0xb6>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d003      	beq.n	800252c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002524:	e018      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
      break;
 800252a:	e015      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e00b      	b.n	8002556 <DMA_CheckFifoParam+0xe6>
      break;
 800253e:	bf00      	nop
 8002540:	e00a      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
 8002544:	e008      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e006      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e004      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;   
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
    }
  } 
  
  return status; 
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e03b      	b.n	80025f2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fd00 	bl	8000f94 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	f023 0107 	bic.w	r1, r3, #7
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d1      	ldr	r1, [r2, #12]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	430b      	orrs	r3, r1
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_DMA2D_ConfigLayer+0x20>
 8002618:	2302      	movs	r3, #2
 800261a:	e079      	b.n	8002710 <HAL_DMA2D_ConfigLayer+0x114>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	3318      	adds	r3, #24
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002646:	4b35      	ldr	r3, [pc, #212]	@ (800271c <HAL_DMA2D_ConfigLayer+0x120>)
 8002648:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b0a      	cmp	r3, #10
 8002650:	d003      	beq.n	800265a <HAL_DMA2D_ConfigLayer+0x5e>
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b09      	cmp	r3, #9
 8002658:	d107      	bne.n	800266a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e005      	b.n	8002676 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d120      	bne.n	80026be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	ea02 0103 	and.w	r1, r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	430a      	orrs	r2, r1
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b0a      	cmp	r3, #10
 80026a4:	d003      	beq.n	80026ae <HAL_DMA2D_ConfigLayer+0xb2>
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	d127      	bne.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80026bc:	e01f      	b.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	ea02 0103 	and.w	r1, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d106      	bne.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026fc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	ff03000f 	.word	0xff03000f

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e177      	b.n	8002a2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8166 	bne.w	8002a26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80c0 	beq.w	8002a26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a61      	ldr	r2, [pc, #388]	@ (8002a48 <HAL_GPIO_Init+0x328>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d037      	beq.n	800295e <HAL_GPIO_Init+0x23e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	@ (8002a50 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_GPIO_Init+0x23a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_GPIO_Init+0x334>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x236>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_GPIO_Init+0x338>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x232>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	@ (8002a5c <HAL_GPIO_Init+0x33c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x22e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	@ (8002a60 <HAL_GPIO_Init+0x340>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x22a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_GPIO_Init+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	@ (8002a68 <HAL_GPIO_Init+0x348>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	@ (8002a6c <HAL_GPIO_Init+0x34c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	@ (8002a70 <HAL_GPIO_Init+0x350>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x21a>
 8002936:	2309      	movs	r3, #9
 8002938:	e012      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293a:	230a      	movs	r3, #10
 800293c:	e010      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293e:	2308      	movs	r3, #8
 8002940:	e00e      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002942:	2307      	movs	r3, #7
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002946:	2306      	movs	r3, #6
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	@ (8002a48 <HAL_GPIO_Init+0x328>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a34      	ldr	r2, [pc, #208]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d2:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a20:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae84 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40021c00 	.word	0x40021c00
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022400 	.word	0x40022400
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0bf      	b.n	8002c3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe fa80 	bl	8000fd8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002aee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b20:	400b      	ands	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6959      	ldr	r1, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_LTDC_Init+0x19c>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6959      	ldr	r1, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0206 	orr.w	r2, r2, #6
 8002c1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	f000f800 	.word	0xf000f800

08002c4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_LTDC_ConfigLayer+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e02c      	b.n	8002cc0 <HAL_LTDC_ConfigLayer+0x74>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2134      	movs	r1, #52	@ 0x34
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f811 	bl	8002cc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdb0      	pop	{r4, r5, r7, pc}

08002cc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	4413      	add	r3, r2
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	01db      	lsls	r3, r3, #7
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3384      	adds	r3, #132	@ 0x84
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	01d2      	lsls	r2, r2, #7
 8002d04:	440a      	add	r2, r1
 8002d06:	3284      	adds	r2, #132	@ 0x84
 8002d08:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d1e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d20:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	01db      	lsls	r3, r3, #7
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3384      	adds	r3, #132	@ 0x84
 8002d30:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d46:	4413      	add	r3, r2
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	4413      	add	r3, r2
 8002d58:	3384      	adds	r3, #132	@ 0x84
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4611      	mov	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	01d2      	lsls	r2, r2, #7
 8002d66:	440a      	add	r2, r1
 8002d68:	3284      	adds	r2, #132	@ 0x84
 8002d6a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	4413      	add	r3, r2
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3384      	adds	r3, #132	@ 0x84
 8002d90:	4619      	mov	r1, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	01db      	lsls	r3, r3, #7
 8002da2:	4413      	add	r3, r2
 8002da4:	3384      	adds	r3, #132	@ 0x84
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4611      	mov	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	01d2      	lsls	r2, r2, #7
 8002db2:	440a      	add	r2, r1
 8002db4:	3284      	adds	r2, #132	@ 0x84
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	01db      	lsls	r3, r3, #7
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3384      	adds	r3, #132	@ 0x84
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	01db      	lsls	r3, r3, #7
 8002df8:	4413      	add	r3, r2
 8002dfa:	3384      	adds	r3, #132	@ 0x84
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	01db      	lsls	r3, r3, #7
 8002e08:	4413      	add	r3, r2
 8002e0a:	3384      	adds	r3, #132	@ 0x84
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2300      	movs	r3, #0
 8002e10:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e18:	461a      	mov	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3384      	adds	r3, #132	@ 0x84
 8002e30:	4619      	mov	r1, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	01db      	lsls	r3, r3, #7
 8002e42:	4413      	add	r3, r2
 8002e44:	3384      	adds	r3, #132	@ 0x84
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	01d2      	lsls	r2, r2, #7
 8002e52:	440a      	add	r2, r1
 8002e54:	3284      	adds	r2, #132	@ 0x84
 8002e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	01db      	lsls	r3, r3, #7
 8002e66:	4413      	add	r3, r2
 8002e68:	3384      	adds	r3, #132	@ 0x84
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	01db      	lsls	r3, r3, #7
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3384      	adds	r3, #132	@ 0x84
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	4611      	mov	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	01d2      	lsls	r2, r2, #7
 8002e8c:	440a      	add	r2, r1
 8002e8e:	3284      	adds	r2, #132	@ 0x84
 8002e90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e94:	f023 0307 	bic.w	r3, r3, #7
 8002e98:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	6809      	ldr	r1, [r1, #0]
 8002ea6:	4608      	mov	r0, r1
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	01c9      	lsls	r1, r1, #7
 8002eac:	4401      	add	r1, r0
 8002eae:	3184      	adds	r1, #132	@ 0x84
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	01db      	lsls	r3, r3, #7
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3384      	adds	r3, #132	@ 0x84
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	3384      	adds	r3, #132	@ 0x84
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	01db      	lsls	r3, r3, #7
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3384      	adds	r3, #132	@ 0x84
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e01b      	b.n	8002f34 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002f04:	2303      	movs	r3, #3
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	e014      	b.n	8002f34 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d00b      	beq.n	8002f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d007      	beq.n	8002f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d003      	beq.n	8002f2a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d102      	bne.n	8002f30 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e001      	b.n	8002f34 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002f30:	2301      	movs	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	01db      	lsls	r3, r3, #7
 8002f3e:	4413      	add	r3, r2
 8002f40:	3384      	adds	r3, #132	@ 0x84
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	01d2      	lsls	r2, r2, #7
 8002f4e:	440a      	add	r2, r1
 8002f50:	3284      	adds	r2, #132	@ 0x84
 8002f52:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1acb      	subs	r3, r1, r3
 8002f6e:	69f9      	ldr	r1, [r7, #28]
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	6809      	ldr	r1, [r1, #0]
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	01c9      	lsls	r1, r1, #7
 8002f80:	4401      	add	r1, r0
 8002f82:	3184      	adds	r1, #132	@ 0x84
 8002f84:	4313      	orrs	r3, r2
 8002f86:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	3384      	adds	r3, #132	@ 0x84
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	01d2      	lsls	r2, r2, #7
 8002fa2:	440a      	add	r2, r1
 8002fa4:	3284      	adds	r2, #132	@ 0x84
 8002fa6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4413      	add	r3, r2
 8002fbc:	3384      	adds	r3, #132	@ 0x84
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	01db      	lsls	r3, r3, #7
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3384      	adds	r3, #132	@ 0x84
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	01d2      	lsls	r2, r2, #7
 8002fe0:	440a      	add	r2, r1
 8002fe2:	3284      	adds	r2, #132	@ 0x84
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]
}
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e267      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d075      	beq.n	8003102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003016:	4b88      	ldr	r3, [pc, #544]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b04      	cmp	r3, #4
 8003020:	d00c      	beq.n	800303c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4b85      	ldr	r3, [pc, #532]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800302a:	2b08      	cmp	r3, #8
 800302c:	d112      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302e:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800303a:	d10b      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	4b7e      	ldr	r3, [pc, #504]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05b      	beq.n	8003100 <HAL_RCC_OscConfig+0x108>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d157      	bne.n	8003100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e242      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800305c:	d106      	bne.n	800306c <HAL_RCC_OscConfig+0x74>
 800305e:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b70      	ldr	r3, [pc, #448]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6f      	ldr	r2, [pc, #444]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b6d      	ldr	r3, [pc, #436]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6c      	ldr	r2, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 8003090:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a68      	ldr	r2, [pc, #416]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b66      	ldr	r3, [pc, #408]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a65      	ldr	r2, [pc, #404]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fbae 	bl	8001810 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe fbaa 	bl	8001810 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	@ 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e207      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc0>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fb9a 	bl	8001810 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe fb96 	bl	8001810 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	@ 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1f3      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	4b51      	ldr	r3, [pc, #324]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0xe8>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d063      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800310e:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003126:	4b44      	ldr	r3, [pc, #272]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1c7      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4937      	ldr	r1, [pc, #220]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b34      	ldr	r3, [pc, #208]	@ (800323c <HAL_RCC_OscConfig+0x244>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe fb4f 	bl	8001810 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe fb4b 	bl	8001810 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1a8      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4925      	ldr	r1, [pc, #148]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_RCC_OscConfig+0x244>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fb2e 	bl	8001810 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b8:	f7fe fb2a 	bl	8001810 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e187      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d036      	beq.n	8003250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_RCC_OscConfig+0x248>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe fb0e 	bl	8001810 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe fb0a 	bl	8001810 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e167      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCC_OscConfig+0x240>)
 800320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x200>
 8003216:	e01b      	b.n	8003250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_OscConfig+0x248>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe faf7 	bl	8001810 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e00e      	b.n	8003244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe faf3 	bl	8001810 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d907      	bls.n	8003244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e150      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b88      	ldr	r3, [pc, #544]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ea      	bne.n	8003226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8097 	beq.w	800338c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b81      	ldr	r3, [pc, #516]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b7d      	ldr	r3, [pc, #500]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	4a7c      	ldr	r2, [pc, #496]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	@ 0x40
 800327e:	4b7a      	ldr	r3, [pc, #488]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b77      	ldr	r3, [pc, #476]	@ (800346c <HAL_RCC_OscConfig+0x474>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b74      	ldr	r3, [pc, #464]	@ (800346c <HAL_RCC_OscConfig+0x474>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a73      	ldr	r2, [pc, #460]	@ (800346c <HAL_RCC_OscConfig+0x474>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fab3 	bl	8001810 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe faaf 	bl	8001810 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e10c      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_RCC_OscConfig+0x474>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2ea>
 80032d4:	4b64      	ldr	r3, [pc, #400]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	4a63      	ldr	r2, [pc, #396]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e0:	e01c      	b.n	800331c <HAL_RCC_OscConfig+0x324>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x30c>
 80032ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	@ 0x70
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x324>
 8003304:	4b58      	ldr	r3, [pc, #352]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a57      	ldr	r2, [pc, #348]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	4b55      	ldr	r3, [pc, #340]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a54      	ldr	r2, [pc, #336]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fa74 	bl	8001810 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fa70 	bl	8001810 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0cb      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	4b49      	ldr	r3, [pc, #292]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCC_OscConfig+0x334>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fe fa5e 	bl	8001810 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe fa5a 	bl	8001810 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0b5      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	4b3e      	ldr	r3, [pc, #248]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b39      	ldr	r3, [pc, #228]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	4a38      	ldr	r2, [pc, #224]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800338a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80a1 	beq.w	80034d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003396:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d05c      	beq.n	800345c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d141      	bne.n	800342e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b31      	ldr	r3, [pc, #196]	@ (8003470 <HAL_RCC_OscConfig+0x478>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fa2e 	bl	8001810 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fa2a 	bl	8001810 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e087      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	491b      	ldr	r1, [pc, #108]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_RCC_OscConfig+0x478>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fa03 	bl	8001810 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe f9ff 	bl	8001810 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e05c      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x416>
 800342c:	e054      	b.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_RCC_OscConfig+0x478>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe f9ec 	bl	8001810 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe f9e8 	bl	8001810 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e045      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_OscConfig+0x470>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x444>
 800345a:	e03d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e038      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000
 8003470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_RCC_OscConfig+0x4ec>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d121      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d11a      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d111      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	3b01      	subs	r3, #1
 80034be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cc      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b68      	ldr	r3, [pc, #416]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d90c      	bls.n	8003524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b65      	ldr	r3, [pc, #404]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b63      	ldr	r3, [pc, #396]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b8      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800353c:	4b59      	ldr	r3, [pc, #356]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a58      	ldr	r2, [pc, #352]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003554:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800355e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b50      	ldr	r3, [pc, #320]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	494d      	ldr	r1, [pc, #308]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d044      	beq.n	8003608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d119      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e06f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e067      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b37      	ldr	r3, [pc, #220]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4934      	ldr	r1, [pc, #208]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d8:	f7fe f91a 	bl	8001810 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe f916 	bl	8001810 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e04f      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d20c      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e032      	b.n	8003696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4916      	ldr	r1, [pc, #88]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365a:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490e      	ldr	r1, [pc, #56]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366e:	f000 f821 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490a      	ldr	r1, [pc, #40]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800368a:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fee2 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08022d7c 	.word	0x08022d7c
 80036ac:	20000004 	.word	0x20000004
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b090      	sub	sp, #64	@ 0x40
 80036ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d00d      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x40>
 80036d8:	2b08      	cmp	r3, #8
 80036da:	f200 80a1 	bhi.w	8003820 <HAL_RCC_GetSysClockFreq+0x16c>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x3a>
 80036e6:	e09b      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ec:	e09b      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ee:	4b53      	ldr	r3, [pc, #332]	@ (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036f2:	e098      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d028      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370a:	4b4a      	ldr	r3, [pc, #296]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	2200      	movs	r2, #0
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	627a      	str	r2, [r7, #36]	@ 0x24
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800371c:	2100      	movs	r1, #0
 800371e:	4b47      	ldr	r3, [pc, #284]	@ (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 8003720:	fb03 f201 	mul.w	r2, r3, r1
 8003724:	2300      	movs	r3, #0
 8003726:	fb00 f303 	mul.w	r3, r0, r3
 800372a:	4413      	add	r3, r2
 800372c:	4a43      	ldr	r2, [pc, #268]	@ (800383c <HAL_RCC_GetSysClockFreq+0x188>)
 800372e:	fba0 1202 	umull	r1, r2, r0, r2
 8003732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003734:	460a      	mov	r2, r1
 8003736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373a:	4413      	add	r3, r2
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003740:	2200      	movs	r2, #0
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	61fa      	str	r2, [r7, #28]
 8003746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800374e:	f7fc fd9f 	bl	8000290 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4613      	mov	r3, r2
 8003758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800375a:	e053      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375c:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	2200      	movs	r2, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	617a      	str	r2, [r7, #20]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800376e:	f04f 0b00 	mov.w	fp, #0
 8003772:	4652      	mov	r2, sl
 8003774:	465b      	mov	r3, fp
 8003776:	f04f 0000 	mov.w	r0, #0
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	0159      	lsls	r1, r3, #5
 8003780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003784:	0150      	lsls	r0, r2, #5
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ebb2 080a 	subs.w	r8, r2, sl
 800378e:	eb63 090b 	sbc.w	r9, r3, fp
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800379e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037a6:	ebb2 0408 	subs.w	r4, r2, r8
 80037aa:	eb63 0509 	sbc.w	r5, r3, r9
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	00eb      	lsls	r3, r5, #3
 80037b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037bc:	00e2      	lsls	r2, r4, #3
 80037be:	4614      	mov	r4, r2
 80037c0:	461d      	mov	r5, r3
 80037c2:	eb14 030a 	adds.w	r3, r4, sl
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	eb45 030b 	adc.w	r3, r5, fp
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ee:	2200      	movs	r2, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	60fa      	str	r2, [r7, #12]
 80037f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f8:	f7fc fd4a 	bl	8000290 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800381e:	e002      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x184>)
 8003822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003828:	4618      	mov	r0, r3
 800382a:	3740      	adds	r7, #64	@ 0x40
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	017d7840 	.word	0x017d7840

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0b5b      	lsrs	r3, r3, #13
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	@ (800387c <HAL_RCC_GetPCLK2Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08022d8c 	.word	0x08022d8c

08003880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	220f      	movs	r2, #15
 800388e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003890:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_GetClockConfig+0x5c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <HAL_RCC_GetClockConfig+0x5c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038a8:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <HAL_RCC_GetClockConfig+0x5c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_GetClockConfig+0x5c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038c2:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <HAL_RCC_GetClockConfig+0x60>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	601a      	str	r2, [r3, #0]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40023c00 	.word	0x40023c00

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003914:	2b00      	cmp	r3, #0
 8003916:	d075      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003918:	4b91      	ldr	r3, [pc, #580]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800391e:	f7fd ff77 	bl	8001810 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003926:	f7fd ff73 	bl	8001810 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e189      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003938:	4b8a      	ldr	r3, [pc, #552]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	019a      	lsls	r2, r3, #6
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	071b      	lsls	r3, r3, #28
 800395c:	4981      	ldr	r1, [pc, #516]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003970:	4b7c      	ldr	r3, [pc, #496]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	071b      	lsls	r3, r3, #28
 8003990:	4974      	ldr	r1, [pc, #464]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003998:	4b72      	ldr	r3, [pc, #456]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800399e:	f023 021f 	bic.w	r2, r3, #31
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	496e      	ldr	r1, [pc, #440]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	019a      	lsls	r2, r3, #6
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	071b      	lsls	r3, r3, #28
 80039d0:	4964      	ldr	r1, [pc, #400]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039de:	f7fd ff17 	bl	8001810 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e6:	f7fd ff13 	bl	8001810 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e129      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d079      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a1c:	4b52      	ldr	r3, [pc, #328]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a22:	f7fd fef5 	bl	8001810 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a2a:	f7fd fef1 	bl	8001810 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e107      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a3c:	4b49      	ldr	r3, [pc, #292]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a48:	d0ef      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5c:	0f1b      	lsrs	r3, r3, #28
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	019a      	lsls	r2, r3, #6
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	493b      	ldr	r1, [pc, #236]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7e:	4b39      	ldr	r3, [pc, #228]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01e      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	0e1b      	lsrs	r3, r3, #24
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	019a      	lsls	r2, r3, #6
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	4927      	ldr	r1, [pc, #156]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003acc:	4b25      	ldr	r3, [pc, #148]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	4922      	ldr	r1, [pc, #136]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ae2:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fe92 	bl	8001810 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003af0:	f7fd fe8e 	bl	8001810 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0a4      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b02:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0e:	d1ef      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808b 	beq.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b46:	f7fd fe63 	bl	8001810 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b4c:	e010      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fd fe5f 	bl	8001810 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d909      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e075      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003b60:	42470068 	.word	0x42470068
 8003b64:	40023800 	.word	0x40023800
 8003b68:	42470070 	.word	0x42470070
 8003b6c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b70:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0e8      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7c:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02f      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d028      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003baa:	4b2c      	ldr	r3, [pc, #176]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bb0:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb6:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d114      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fe25 	bl	8001810 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fd fe21 	bl	8001810 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e035      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003bfa:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0e:	4912      	ldr	r1, [pc, #72]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c20:	6093      	str	r3, [r2, #8]
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	490a      	ldr	r1, [pc, #40]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003c48:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40007000 	.word	0x40007000
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470e40 	.word	0x42470e40
 8003c60:	424711e0 	.word	0x424711e0

08003c64 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e036      	b.n	8003ce6 <HAL_SDRAM_Init+0x82>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d117      	bne.n	8003cb4 <HAL_SDRAM_Init+0x50>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    if (hsdram->MspInitCallback == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_SDRAM_Init+0x36>
    {
      hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <HAL_SDRAM_Init+0x8c>)
 8003c98:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <HAL_SDRAM_Init+0x90>)
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	@ (8003cf8 <HAL_SDRAM_Init+0x94>)
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <HAL_SDRAM_Init+0x98>)
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fd36 	bl	8004738 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	f000 fd8b 	bl	80047f2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	08001445 	.word	0x08001445
 8003cf4:	08003d01 	.word	0x08003d01
 8003cf8:	08003d15 	.word	0x08003d15
 8003cfc:	08003d29 	.word	0x08003d29

08003d00 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_SDRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferCpltCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_SDRAM_DMA_XferErrorCallback>:
  * @brief  DMA transfer complete error callback.
  * @param  hdma DMA handle
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07b      	b.n	8003e46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd fa48 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0104 	and.w	r1, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0210 	and.w	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e041      	b.n	8003ee4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fd fa1d 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 fa7d 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04e      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	@ (8003fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2e:	d01d      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d010      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	e007      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f999 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f98b 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f99c 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0204 	mvn.w	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f973 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f965 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f976 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0208 	mvn.w	r2, #8
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f94d 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f93f 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f950 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0210 	mvn.w	r2, #16
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2208      	movs	r2, #8
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f927 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f919 	bl	800433a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f92a 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0201 	mvn.w	r2, #1
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fc fe20 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fae4 	bl	8004724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8fb 	bl	8004376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0220 	mvn.w	r2, #32
 800419c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fab6 	bl	8004710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIM_ConfigClockSource+0x1c>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0b4      	b.n	8004332 <HAL_TIM_ConfigClockSource+0x186>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004200:	d03e      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0xd4>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004206:	f200 8087 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420e:	f000 8086 	beq.w	800431e <HAL_TIM_ConfigClockSource+0x172>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004216:	d87f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b70      	cmp	r3, #112	@ 0x70
 800421a:	d01a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0xa6>
 800421c:	2b70      	cmp	r3, #112	@ 0x70
 800421e:	d87b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b60      	cmp	r3, #96	@ 0x60
 8004222:	d050      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004224:	2b60      	cmp	r3, #96	@ 0x60
 8004226:	d877      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b50      	cmp	r3, #80	@ 0x50
 800422a:	d03c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xfa>
 800422c:	2b50      	cmp	r3, #80	@ 0x50
 800422e:	d873      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d058      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004234:	2b40      	cmp	r3, #64	@ 0x40
 8004236:	d86f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b30      	cmp	r3, #48	@ 0x30
 800423a:	d064      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 800423c:	2b30      	cmp	r3, #48	@ 0x30
 800423e:	d86b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d060      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d867      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d05a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 8004250:	e062      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	f000 f9b9 	bl	80045d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	609a      	str	r2, [r3, #8]
      break;
 800427e:	e04f      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	f000 f9a2 	bl	80045d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a2:	609a      	str	r2, [r3, #8]
      break;
 80042a4:	e03c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 f916 	bl	80044e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2150      	movs	r1, #80	@ 0x50
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f96f 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 80042c4:	e02c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 f935 	bl	8004542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2160      	movs	r1, #96	@ 0x60
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f95f 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 80042e4:	e01c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 f8f6 	bl	80044e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	@ 0x40
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f94f 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8004304:	e00c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 f946 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8004316:	e003      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      break;
 800431c:	e000      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800431e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a46      	ldr	r2, [pc, #280]	@ (80044b8 <TIM_Base_SetConfig+0x12c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a43      	ldr	r2, [pc, #268]	@ (80044bc <TIM_Base_SetConfig+0x130>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a42      	ldr	r2, [pc, #264]	@ (80044c0 <TIM_Base_SetConfig+0x134>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a41      	ldr	r2, [pc, #260]	@ (80044c4 <TIM_Base_SetConfig+0x138>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a40      	ldr	r2, [pc, #256]	@ (80044c8 <TIM_Base_SetConfig+0x13c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a35      	ldr	r2, [pc, #212]	@ (80044b8 <TIM_Base_SetConfig+0x12c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ec:	d027      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a32      	ldr	r2, [pc, #200]	@ (80044bc <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d023      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a31      	ldr	r2, [pc, #196]	@ (80044c0 <TIM_Base_SetConfig+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a30      	ldr	r2, [pc, #192]	@ (80044c4 <TIM_Base_SetConfig+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2f      	ldr	r2, [pc, #188]	@ (80044c8 <TIM_Base_SetConfig+0x13c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2e      	ldr	r2, [pc, #184]	@ (80044cc <TIM_Base_SetConfig+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2d      	ldr	r2, [pc, #180]	@ (80044d0 <TIM_Base_SetConfig+0x144>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2c      	ldr	r2, [pc, #176]	@ (80044d4 <TIM_Base_SetConfig+0x148>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <TIM_Base_SetConfig+0x14c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2a      	ldr	r2, [pc, #168]	@ (80044dc <TIM_Base_SetConfig+0x150>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a29      	ldr	r2, [pc, #164]	@ (80044e0 <TIM_Base_SetConfig+0x154>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <TIM_Base_SetConfig+0x12c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a12      	ldr	r2, [pc, #72]	@ (80044c8 <TIM_Base_SetConfig+0x13c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	611a      	str	r2, [r3, #16]
  }
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800
 80044d8:	40001800 	.word	0x40001800
 80044dc:	40001c00 	.word	0x40001c00
 80044e0:	40002000 	.word	0x40002000

080044e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800450e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 030a 	bic.w	r3, r3, #10
 8004520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	621a      	str	r2, [r3, #32]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004542:	b480      	push	{r7}
 8004544:	b087      	sub	sp, #28
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0210 	bic.w	r2, r3, #16
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800456c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	031b      	lsls	r3, r3, #12
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800457e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	f043 0307 	orr.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	021a      	lsls	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e05a      	b.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a21      	ldr	r2, [pc, #132]	@ (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467c:	d01d      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1d      	ldr	r2, [pc, #116]	@ (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d018      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1a      	ldr	r2, [pc, #104]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a15      	ldr	r2, [pc, #84]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10c      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40000c00 	.word	0x40000c00
 8004704:	40010400 	.word	0x40010400
 8004708:	40014000 	.word	0x40014000
 800470c:	40001800 	.word	0x40001800

08004710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004752:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6851      	ldr	r1, [r2, #4]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	6892      	ldr	r2, [r2, #8]
 800475e:	4311      	orrs	r1, r2
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	68d2      	ldr	r2, [r2, #12]
 8004764:	4311      	orrs	r1, r2
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	6912      	ldr	r2, [r2, #16]
 800476a:	4311      	orrs	r1, r2
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	6952      	ldr	r2, [r2, #20]
 8004770:	4311      	orrs	r1, r2
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6992      	ldr	r2, [r2, #24]
 8004776:	4311      	orrs	r1, r2
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	69d2      	ldr	r2, [r2, #28]
 800477c:	4311      	orrs	r1, r2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	6a12      	ldr	r2, [r2, #32]
 8004782:	4311      	orrs	r1, r2
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004788:	430a      	orrs	r2, r1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e028      	b.n	80047e4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	69d9      	ldr	r1, [r3, #28]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4319      	orrs	r1, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	430b      	orrs	r3, r1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	6851      	ldr	r1, [r2, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	4311      	orrs	r1, r2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	4311      	orrs	r1, r2
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	6912      	ldr	r2, [r2, #16]
 80047d0:	4311      	orrs	r1, r2
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6952      	ldr	r2, [r2, #20]
 80047d6:	4311      	orrs	r1, r2
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	6992      	ldr	r2, [r2, #24]
 80047dc:	430a      	orrs	r2, r1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d128      	bne.n	8004856 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1e59      	subs	r1, r3, #1
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	4319      	orrs	r1, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	3b01      	subs	r3, #1
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	4319      	orrs	r1, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	031b      	lsls	r3, r3, #12
 800482e:	4319      	orrs	r1, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	4319      	orrs	r1, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	3b01      	subs	r3, #1
 8004840:	051b      	lsls	r3, r3, #20
 8004842:	4319      	orrs	r1, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	3b01      	subs	r3, #1
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	430b      	orrs	r3, r1
 800484e:	431a      	orrs	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	e02f      	b.n	80048b6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800485e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	3a01      	subs	r2, #1
 8004868:	0311      	lsls	r1, r2, #12
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	6952      	ldr	r2, [r2, #20]
 800486e:	3a01      	subs	r2, #1
 8004870:	0512      	lsls	r2, r2, #20
 8004872:	430a      	orrs	r2, r1
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1e59      	subs	r1, r3, #1
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	3b01      	subs	r3, #1
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	4319      	orrs	r1, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	4319      	orrs	r1, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	4319      	orrs	r1, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	430b      	orrs	r3, r1
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <__NVIC_SetPriority>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db0a      	blt.n	80048ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	490c      	ldr	r1, [pc, #48]	@ (8004910 <__NVIC_SetPriority+0x4c>)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	0112      	lsls	r2, r2, #4
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	440b      	add	r3, r1
 80048e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048ec:	e00a      	b.n	8004904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4908      	ldr	r1, [pc, #32]	@ (8004914 <__NVIC_SetPriority+0x50>)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3b04      	subs	r3, #4
 80048fc:	0112      	lsls	r2, r2, #4
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	440b      	add	r3, r1
 8004902:	761a      	strb	r2, [r3, #24]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000e100 	.word	0xe000e100
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <SysTick_Handler+0x1c>)
 800491e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004920:	f002 fa68 	bl	8006df4 <xTaskGetSchedulerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d001      	beq.n	800492e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800492a:	f003 f95d 	bl	8007be8 <xPortSysTickHandler>
  }
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	e000e010 	.word	0xe000e010

08004938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800493c:	2100      	movs	r1, #0
 800493e:	f06f 0004 	mvn.w	r0, #4
 8004942:	f7ff ffbf 	bl	80048c4 <__NVIC_SetPriority>
#endif
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004952:	f3ef 8305 	mrs	r3, IPSR
 8004956:	603b      	str	r3, [r7, #0]
  return(result);
 8004958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800495e:	f06f 0305 	mvn.w	r3, #5
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	e00c      	b.n	8004980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004966:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <osKernelInitialize+0x44>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <osKernelInitialize+0x44>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	e002      	b.n	8004980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004980:	687b      	ldr	r3, [r7, #4]
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20025e84 	.word	0x20025e84

08004994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800499a:	f3ef 8305 	mrs	r3, IPSR
 800499e:	603b      	str	r3, [r7, #0]
  return(result);
 80049a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80049a6:	f06f 0305 	mvn.w	r3, #5
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e010      	b.n	80049d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <osKernelStart+0x48>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d109      	bne.n	80049ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049b6:	f7ff ffbf 	bl	8004938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <osKernelStart+0x48>)
 80049bc:	2202      	movs	r2, #2
 80049be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049c0:	f001 fdb4 	bl	800652c <vTaskStartScheduler>
      stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	e002      	b.n	80049d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20025e84 	.word	0x20025e84

080049e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	@ 0x38
 80049e4:	af04      	add	r7, sp, #16
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f0:	f3ef 8305 	mrs	r3, IPSR
 80049f4:	617b      	str	r3, [r7, #20]
  return(result);
 80049f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d17e      	bne.n	8004afa <osThreadNew+0x11a>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d07b      	beq.n	8004afa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a06:	2318      	movs	r3, #24
 8004a08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d045      	beq.n	8004aa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <osThreadNew+0x48>
        name = attr->name;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <osThreadNew+0x6e>
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b38      	cmp	r3, #56	@ 0x38
 8004a40:	d805      	bhi.n	8004a4e <osThreadNew+0x6e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <osThreadNew+0x72>
        return (NULL);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e054      	b.n	8004afc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <osThreadNew+0xa8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a70:	d90a      	bls.n	8004a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <osThreadNew+0xa8>
        mem = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e010      	b.n	8004aaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10c      	bne.n	8004aaa <osThreadNew+0xca>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d108      	bne.n	8004aaa <osThreadNew+0xca>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <osThreadNew+0xca>
          mem = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e001      	b.n	8004aaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d110      	bne.n	8004ad2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab8:	9202      	str	r2, [sp, #8]
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f001 fb3c 	bl	8006144 <xTaskCreateStatic>
 8004acc:	4603      	mov	r3, r0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e013      	b.n	8004afa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d110      	bne.n	8004afa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	f107 0310 	add.w	r3, r7, #16
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f001 fb8a 	bl	8006204 <xTaskCreate>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d001      	beq.n	8004afa <osThreadNew+0x11a>
            hTask = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004afa:	693b      	ldr	r3, [r7, #16]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3728      	adds	r7, #40	@ 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0c:	f3ef 8305 	mrs	r3, IPSR
 8004b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <osDelay+0x1c>
    stat = osErrorISR;
 8004b18:	f06f 0305 	mvn.w	r3, #5
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e007      	b.n	8004b30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 fcc8 	bl	80064c0 <vTaskDelay>
    }
  }

  return (stat);
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08a      	sub	sp, #40	@ 0x28
 8004b3e:	af02      	add	r7, sp, #8
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b4a:	f3ef 8305 	mrs	r3, IPSR
 8004b4e:	613b      	str	r3, [r7, #16]
  return(result);
 8004b50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d175      	bne.n	8004c42 <osSemaphoreNew+0x108>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d072      	beq.n	8004c42 <osSemaphoreNew+0x108>
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d86e      	bhi.n	8004c42 <osSemaphoreNew+0x108>
    mem = -1;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
 8004b68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <osSemaphoreNew+0x4c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b7e:	d902      	bls.n	8004b86 <osSemaphoreNew+0x4c>
        mem = 1;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e00c      	b.n	8004ba0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <osSemaphoreNew+0x66>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <osSemaphoreNew+0x66>
          mem = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e001      	b.n	8004ba0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d04c      	beq.n	8004c42 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d128      	bne.n	8004c00 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10a      	bne.n	8004bca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	9200      	str	r2, [sp, #0]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f000 fafd 	bl	80051c0 <xQueueGenericCreateStatic>
 8004bc6:	61f8      	str	r0, [r7, #28]
 8004bc8:	e005      	b.n	8004bd6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004bca:	2203      	movs	r2, #3
 8004bcc:	2100      	movs	r1, #0
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f000 fb73 	bl	80052ba <xQueueGenericCreate>
 8004bd4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <osSemaphoreNew+0xe8>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004be2:	2300      	movs	r3, #0
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	69f8      	ldr	r0, [r7, #28]
 8004bea:	f000 fc33 	bl	8005454 <xQueueGenericSend>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d016      	beq.n	8004c22 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004bf4:	69f8      	ldr	r0, [r7, #28]
 8004bf6:	f001 f8d1 	bl	8005d9c <vQueueDelete>
            hSemaphore = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	e010      	b.n	8004c22 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d108      	bne.n	8004c18 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fbb1 	bl	8005376 <xQueueCreateCountingSemaphoreStatic>
 8004c14:	61f8      	str	r0, [r7, #28]
 8004c16:	e004      	b.n	8004c22 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fbe4 	bl	80053e8 <xQueueCreateCountingSemaphore>
 8004c20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e001      	b.n	8004c3a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c3a:	6979      	ldr	r1, [r7, #20]
 8004c3c:	69f8      	ldr	r0, [r7, #28]
 8004c3e:	f001 f9f9 	bl	8006034 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c42:	69fb      	ldr	r3, [r7, #28]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004c64:	f06f 0303 	mvn.w	r3, #3
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e039      	b.n	8004ce0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6c:	f3ef 8305 	mrs	r3, IPSR
 8004c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004c7e:	f06f 0303 	mvn.w	r3, #3
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e02c      	b.n	8004ce0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2100      	movs	r1, #0
 8004c92:	6938      	ldr	r0, [r7, #16]
 8004c94:	f001 f800 	bl	8005c98 <xQueueReceiveFromISR>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d003      	beq.n	8004ca6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004c9e:	f06f 0302 	mvn.w	r3, #2
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e01c      	b.n	8004ce0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d019      	beq.n	8004ce0 <osSemaphoreAcquire+0x94>
 8004cac:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <osSemaphoreAcquire+0xa0>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	e010      	b.n	8004ce0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6938      	ldr	r0, [r7, #16]
 8004cc2:	f000 fed9 	bl	8005a78 <xQueueSemaphoreTake>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d009      	beq.n	8004ce0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004cd2:	f06f 0301 	mvn.w	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e002      	b.n	8004ce0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004cda:	f06f 0302 	mvn.w	r3, #2
 8004cde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004d06:	f06f 0303 	mvn.w	r3, #3
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e02c      	b.n	8004d68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0e:	f3ef 8305 	mrs	r3, IPSR
 8004d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	4619      	mov	r1, r3
 8004d24:	6938      	ldr	r0, [r7, #16]
 8004d26:	f000 fd35 	bl	8005794 <xQueueGiveFromISR>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d003      	beq.n	8004d38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004d30:	f06f 0302 	mvn.w	r3, #2
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e017      	b.n	8004d68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d014      	beq.n	8004d68 <osSemaphoreRelease+0x78>
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <osSemaphoreRelease+0x84>)
 8004d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	e00b      	b.n	8004d68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d50:	2300      	movs	r3, #0
 8004d52:	2200      	movs	r2, #0
 8004d54:	2100      	movs	r1, #0
 8004d56:	6938      	ldr	r0, [r7, #16]
 8004d58:	f000 fb7c 	bl	8005454 <xQueueGenericSend>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d002      	beq.n	8004d68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004d62:	f06f 0302 	mvn.w	r3, #2
 8004d66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	@ 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d88:	f3ef 8305 	mrs	r3, IPSR
 8004d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004d8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d15f      	bne.n	8004e54 <osMessageQueueNew+0xdc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05c      	beq.n	8004e54 <osMessageQueueNew+0xdc>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d059      	beq.n	8004e54 <osMessageQueueNew+0xdc>
    mem = -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
 8004da4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d029      	beq.n	8004e00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <osMessageQueueNew+0x62>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b4f      	cmp	r3, #79	@ 0x4f
 8004dba:	d90e      	bls.n	8004dda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <osMessageQueueNew+0x62>
        mem = 1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e014      	b.n	8004e04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d110      	bne.n	8004e04 <osMessageQueueNew+0x8c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <osMessageQueueNew+0x8c>
          mem = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e001      	b.n	8004e04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10b      	bne.n	8004e22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2100      	movs	r1, #0
 8004e14:	9100      	str	r1, [sp, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f9d1 	bl	80051c0 <xQueueGenericCreateStatic>
 8004e1e:	61f8      	str	r0, [r7, #28]
 8004e20:	e008      	b.n	8004e34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fa44 	bl	80052ba <xQueueGenericCreate>
 8004e32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e001      	b.n	8004e4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	69f8      	ldr	r0, [r7, #28]
 8004e50:	f001 f8f0 	bl	8006034 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004e54:	69fb      	ldr	r3, [r7, #28]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d028      	beq.n	8004ed4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <osMessageQueueGet+0x34>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <osMessageQueueGet+0x34>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e94:	f06f 0303 	mvn.w	r3, #3
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e037      	b.n	8004f0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	69b8      	ldr	r0, [r7, #24]
 8004eaa:	f000 fef5 	bl	8005c98 <xQueueReceiveFromISR>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d003      	beq.n	8004ebc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004eb4:	f06f 0302 	mvn.w	r3, #2
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e027      	b.n	8004f0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d024      	beq.n	8004f0c <osMessageQueueGet+0xac>
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <osMessageQueueGet+0xb8>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	e01b      	b.n	8004f0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <osMessageQueueGet+0x80>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004ee0:	f06f 0303 	mvn.w	r3, #3
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e011      	b.n	8004f0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	69b8      	ldr	r0, [r7, #24]
 8004eee:	f000 fce1 	bl	80058b4 <xQueueReceive>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d009      	beq.n	8004f0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004efe:	f06f 0301 	mvn.w	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e002      	b.n	8004f0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004f06:	f06f 0302 	mvn.w	r3, #2
 8004f0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a07      	ldr	r2, [pc, #28]	@ (8004f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4a06      	ldr	r2, [pc, #24]	@ (8004f4c <vApplicationGetIdleTaskMemory+0x30>)
 8004f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2280      	movs	r2, #128	@ 0x80
 8004f38:	601a      	str	r2, [r3, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20025e88 	.word	0x20025e88
 8004f4c:	20025f30 	.word	0x20025f30

08004f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a07      	ldr	r2, [pc, #28]	@ (8004f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a06      	ldr	r2, [pc, #24]	@ (8004f80 <vApplicationGetTimerTaskMemory+0x30>)
 8004f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20026130 	.word	0x20026130
 8004f80:	200261d8 	.word	0x200261d8

08004f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f103 0208 	add.w	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0208 	add.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e00c      	b.n	8005060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3308      	adds	r3, #8
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e002      	b.n	8005054 <vListInsert+0x2e>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d2f6      	bcs.n	800504e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6852      	ldr	r2, [r2, #4]
 80050b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d103      	bne.n	80050cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005118:	f002 fcd6 	bl	8007ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	3b01      	subs	r3, #1
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	@ 0xff
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d114      	bne.n	8005198 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f001 fc74 	bl	8006a68 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <xQueueGenericReset+0xd0>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	e009      	b.n	80051ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fef1 	bl	8004f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3324      	adds	r3, #36	@ 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff feec 	bl	8004f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f002 fcbe 	bl	8007b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	@ 0x38
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x56>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x5a>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x5c>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <xQueueGenericCreateStatic+0x84>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <xQueueGenericCreateStatic+0x88>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <xQueueGenericCreateStatic+0x8a>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	61fb      	str	r3, [r7, #28]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005266:	2350      	movs	r3, #80	@ 0x50
 8005268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b50      	cmp	r3, #80	@ 0x50
 800526e:	d00b      	beq.n	8005288 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005288:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800529c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f840 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	@ 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	@ 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	613b      	str	r3, [r7, #16]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3350      	adds	r3, #80	@ 0x50
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fd09 	bl	8007d0c <pvPortMalloc>
 80052fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3350      	adds	r3, #80	@ 0x50
 800530a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005314:	79fa      	ldrb	r2, [r7, #7]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f805 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005326:	69bb      	ldr	r3, [r7, #24]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e002      	b.n	8005352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800535e:	2101      	movs	r1, #1
 8005360:	69b8      	ldr	r0, [r7, #24]
 8005362:	f7ff fec3 	bl	80050ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08a      	sub	sp, #40	@ 0x28
 800537a:	af02      	add	r7, sp, #8
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61bb      	str	r3, [r7, #24]
}
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d90b      	bls.n	80053c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	617b      	str	r3, [r7, #20]
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053c0:	2302      	movs	r3, #2
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fef8 	bl	80051c0 <xQueueGenericCreateStatic>
 80053d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053de:	69fb      	ldr	r3, [r7, #28]
	}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	613b      	str	r3, [r7, #16]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d90b      	bls.n	8005430 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60fb      	str	r3, [r7, #12]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005430:	2202      	movs	r2, #2
 8005432:	2100      	movs	r1, #0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff40 	bl	80052ba <xQueueGenericCreate>
 800543a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005448:	697b      	ldr	r3, [r7, #20]
	}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	@ 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xQueueGenericSend+0x34>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <xQueueGenericSend+0x42>
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <xQueueGenericSend+0x46>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <xQueueGenericSend+0x48>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <xQueueGenericSend+0x64>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d103      	bne.n	80054c6 <xQueueGenericSend+0x72>
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <xQueueGenericSend+0x76>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xQueueGenericSend+0x78>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueGenericSend+0x94>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	623b      	str	r3, [r7, #32]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e8:	f001 fc84 	bl	8006df4 <xTaskGetSchedulerState>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <xQueueGenericSend+0xa4>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xQueueGenericSend+0xa8>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <xQueueGenericSend+0xaa>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <xQueueGenericSend+0xc6>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fb      	str	r3, [r7, #28]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800551a:	f002 fad5 	bl	8007ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <xQueueGenericSend+0xdc>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d129      	bne.n	8005584 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005536:	f000 fc6d 	bl	8005e14 <prvCopyDataToQueue>
 800553a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	3324      	adds	r3, #36	@ 0x24
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fa8d 	bl	8006a68 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b3f      	ldr	r3, [pc, #252]	@ (8005654 <xQueueGenericSend+0x200>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e00a      	b.n	800557c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800556c:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <xQueueGenericSend+0x200>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800557c:	f002 fad6 	bl	8007b2c <vPortExitCritical>
				return pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	e063      	b.n	800564c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800558a:	f002 facf 	bl	8007b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800558e:	2300      	movs	r3, #0
 8005590:	e05c      	b.n	800564c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fac7 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a6:	f002 fac1 	bl	8007b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055aa:	f001 f82f 	bl	800660c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ae:	f002 fa8b 	bl	8007ac8 <vPortEnterCritical>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <xQueueGenericSend+0x174>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x18a>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055de:	f002 faa5 	bl	8007b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e2:	1d3a      	adds	r2, r7, #4
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fab6 	bl	8006b5c <xTaskCheckForTimeOut>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d124      	bne.n	8005640 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f8:	f000 fd04 	bl	8006004 <prvIsQueueFull>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	3310      	adds	r3, #16
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f9da 	bl	80069c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005612:	f000 fc8f 	bl	8005f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005616:	f001 f807 	bl	8006628 <xTaskResumeAll>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f47f af7c 	bne.w	800551a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <xQueueGenericSend+0x200>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e772      	b.n	800551a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005636:	f000 fc7d 	bl	8005f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563a:	f000 fff5 	bl	8006628 <xTaskResumeAll>
 800563e:	e76c      	b.n	800551a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005642:	f000 fc77 	bl	8005f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005646:	f000 ffef 	bl	8006628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800564a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800564c:	4618      	mov	r0, r3
 800564e:	3738      	adds	r7, #56	@ 0x38
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b090      	sub	sp, #64	@ 0x40
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <xQueueGenericSendFromISR+0x3e>
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGenericSendFromISR+0x42>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSendFromISR+0x44>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d103      	bne.n	80056c6 <xQueueGenericSendFromISR+0x6e>
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <xQueueGenericSendFromISR+0x72>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <xQueueGenericSendFromISR+0x74>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	623b      	str	r3, [r7, #32]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056e8:	f002 face 	bl	8007c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056ec:	f3ef 8211 	mrs	r2, BASEPRI
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61fa      	str	r2, [r7, #28]
 8005702:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005704:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <xQueueGenericSendFromISR+0xc2>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d12f      	bne.n	800577a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005730:	f000 fb70 	bl	8005e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005734:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d112      	bne.n	8005764 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	3324      	adds	r3, #36	@ 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f98c 	bl	8006a68 <xTaskRemoveFromEventList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e007      	b.n	8005774 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005764:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005768:	3301      	adds	r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	b25a      	sxtb	r2, r3
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005778:	e001      	b.n	800577e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800577a:	2300      	movs	r3, #0
 800577c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005788:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800578a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800578c:	4618      	mov	r0, r3
 800578e:	3740      	adds	r7, #64	@ 0x40
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	@ 0x38
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	623b      	str	r3, [r7, #32]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	61fb      	str	r3, [r7, #28]
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d103      	bne.n	80057f0 <xQueueGiveFromISR+0x5c>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <xQueueGiveFromISR+0x60>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <xQueueGiveFromISR+0x62>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	61bb      	str	r3, [r7, #24]
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005812:	f002 fa39 	bl	8007c88 <vPortValidateInterruptPriority>
	__asm volatile
 8005816:	f3ef 8211 	mrs	r2, BASEPRI
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	617a      	str	r2, [r7, #20]
 800582c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800582e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005830:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800583e:	429a      	cmp	r2, r3
 8005840:	d22b      	bcs.n	800589a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005854:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d112      	bne.n	8005884 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	3324      	adds	r3, #36	@ 0x24
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f8fc 	bl	8006a68 <xTaskRemoveFromEventList>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00e      	beq.n	8005894 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e007      	b.n	8005894 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005888:	3301      	adds	r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	b25a      	sxtb	r2, r3
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005894:	2301      	movs	r3, #1
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	e001      	b.n	800589e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800589a:	2300      	movs	r3, #0
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
 800589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f383 8811 	msr	BASEPRI, r3
}
 80058a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3738      	adds	r7, #56	@ 0x38
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08c      	sub	sp, #48	@ 0x30
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <xQueueReceive+0x32>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	623b      	str	r3, [r7, #32]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <xQueueReceive+0x40>
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <xQueueReceive+0x44>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <xQueueReceive+0x46>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <xQueueReceive+0x62>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	61fb      	str	r3, [r7, #28]
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005916:	f001 fa6d 	bl	8006df4 <xTaskGetSchedulerState>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <xQueueReceive+0x72>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <xQueueReceive+0x76>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <xQueueReceive+0x78>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <xQueueReceive+0x94>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	61bb      	str	r3, [r7, #24]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005948:	f002 f8be 	bl	8007ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01f      	beq.n	8005998 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800595c:	f000 fac4 	bl	8005ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00f      	beq.n	8005990 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	3310      	adds	r3, #16
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f877 	bl	8006a68 <xTaskRemoveFromEventList>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005980:	4b3c      	ldr	r3, [pc, #240]	@ (8005a74 <xQueueReceive+0x1c0>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005990:	f002 f8cc 	bl	8007b2c <vPortExitCritical>
				return pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	e069      	b.n	8005a6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800599e:	f002 f8c5 	bl	8007b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e062      	b.n	8005a6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059ac:	f107 0310 	add.w	r3, r7, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f8bd 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ba:	f002 f8b7 	bl	8007b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059be:	f000 fe25 	bl	800660c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059c2:	f002 f881 	bl	8007ac8 <vPortEnterCritical>
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d103      	bne.n	80059dc <xQueueReceive+0x128>
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d103      	bne.n	80059f2 <xQueueReceive+0x13e>
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059f2:	f002 f89b 	bl	8007b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f6:	1d3a      	adds	r2, r7, #4
 80059f8:	f107 0310 	add.w	r3, r7, #16
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f8ac 	bl	8006b5c <xTaskCheckForTimeOut>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d123      	bne.n	8005a52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a0c:	f000 fae4 	bl	8005fd8 <prvIsQueueEmpty>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d017      	beq.n	8005a46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	3324      	adds	r3, #36	@ 0x24
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 ffd0 	bl	80069c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a26:	f000 fa85 	bl	8005f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a2a:	f000 fdfd 	bl	8006628 <xTaskResumeAll>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d189      	bne.n	8005948 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a34:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <xQueueReceive+0x1c0>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e780      	b.n	8005948 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a48:	f000 fa74 	bl	8005f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4c:	f000 fdec 	bl	8006628 <xTaskResumeAll>
 8005a50:	e77a      	b.n	8005948 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a54:	f000 fa6e 	bl	8005f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a58:	f000 fde6 	bl	8006628 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5e:	f000 fabb 	bl	8005fd8 <prvIsQueueEmpty>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f af6f 	beq.w	8005948 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3730      	adds	r7, #48	@ 0x30
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	@ 0x38
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005acc:	f001 f992 	bl	8006df4 <xTaskGetSchedulerState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <xQueueSemaphoreTake+0x64>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <xQueueSemaphoreTake+0x68>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <xQueueSemaphoreTake+0x6a>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61bb      	str	r3, [r7, #24]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afe:	f001 ffe3 	bl	8007ac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d024      	beq.n	8005b58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	1e5a      	subs	r2, r3, #1
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b1e:	f001 fae3 	bl	80070e8 <pvTaskIncrementMutexHeldCount>
 8005b22:	4602      	mov	r2, r0
 8005b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00f      	beq.n	8005b50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 ff97 	bl	8006a68 <xTaskRemoveFromEventList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b40:	4b54      	ldr	r3, [pc, #336]	@ (8005c94 <xQueueSemaphoreTake+0x21c>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b50:	f001 ffec 	bl	8007b2c <vPortExitCritical>
				return pdPASS;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e098      	b.n	8005c8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d112      	bne.n	8005b84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	617b      	str	r3, [r7, #20]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b7c:	f001 ffd6 	bl	8007b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e082      	b.n	8005c8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 ffce 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b98:	f001 ffc8 	bl	8007b2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b9c:	f000 fd36 	bl	800660c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba0:	f001 ff92 	bl	8007ac8 <vPortEnterCritical>
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d103      	bne.n	8005bba <xQueueSemaphoreTake+0x142>
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d103      	bne.n	8005bd0 <xQueueSemaphoreTake+0x158>
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bd0:	f001 ffac 	bl	8007b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	f107 030c 	add.w	r3, r7, #12
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 ffbd 	bl	8006b5c <xTaskCheckForTimeOut>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d132      	bne.n	8005c4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bea:	f000 f9f5 	bl	8005fd8 <prvIsQueueEmpty>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d026      	beq.n	8005c42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005bfc:	f001 ff64 	bl	8007ac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f913 	bl	8006e30 <xTaskPriorityInherit>
 8005c0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c0c:	f001 ff8e 	bl	8007b2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	3324      	adds	r3, #36	@ 0x24
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fed3 	bl	80069c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c20:	f000 f988 	bl	8005f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c24:	f000 fd00 	bl	8006628 <xTaskResumeAll>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f47f af67 	bne.w	8005afe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c30:	4b18      	ldr	r3, [pc, #96]	@ (8005c94 <xQueueSemaphoreTake+0x21c>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	e75d      	b.n	8005afe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c44:	f000 f976 	bl	8005f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c48:	f000 fcee 	bl	8006628 <xTaskResumeAll>
 8005c4c:	e757      	b.n	8005afe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c50:	f000 f970 	bl	8005f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c54:	f000 fce8 	bl	8006628 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5a:	f000 f9bd 	bl	8005fd8 <prvIsQueueEmpty>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f43f af4c 	beq.w	8005afe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c6c:	f001 ff2c 	bl	8007ac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c72:	f000 f8b7 	bl	8005de4 <prvGetDisinheritPriorityAfterTimeout>
 8005c76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 f9ae 	bl	8006fe0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c84:	f001 ff52 	bl	8007b2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3738      	adds	r7, #56	@ 0x38
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	@ 0x38
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	623b      	str	r3, [r7, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceiveFromISR+0x3c>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueReceiveFromISR+0x40>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueReceiveFromISR+0x42>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61fb      	str	r3, [r7, #28]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf6:	f001 ffc7 	bl	8007c88 <vPortValidateInterruptPriority>
	__asm volatile
 8005cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	61ba      	str	r2, [r7, #24]
 8005d10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d02f      	beq.n	8005d82 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d30:	f000 f8da 	bl	8005ee8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	1e5a      	subs	r2, r3, #1
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d112      	bne.n	8005d6c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	3310      	adds	r3, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fe88 	bl	8006a68 <xTaskRemoveFromEventList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e007      	b.n	8005d7c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d70:	3301      	adds	r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	b25a      	sxtb	r2, r3
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d80:	e001      	b.n	8005d86 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f383 8811 	msr	BASEPRI, r3
}
 8005d90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3738      	adds	r7, #56	@ 0x38
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <vQueueDelete+0x2a>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60bb      	str	r3, [r7, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f95e 	bl	8006088 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f002 f866 	bl	8007ea8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e001      	b.n	8005e06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e06:	68fb      	ldr	r3, [r7, #12]
	}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10d      	bne.n	8005e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d14d      	bne.n	8005ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f85e 	bl	8006f00 <xTaskPriorityDisinherit>
 8005e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	e043      	b.n	8005ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d119      	bne.n	8005e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6858      	ldr	r0, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	f01b fced 	bl	802183e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d32b      	bcc.n	8005ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	e026      	b.n	8005ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68d8      	ldr	r0, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	461a      	mov	r2, r3
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	f01b fcd3 	bl	802183e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	425b      	negs	r3, r3
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d207      	bcs.n	8005ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	425b      	negs	r3, r3
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d105      	bne.n	8005ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ede:	697b      	ldr	r3, [r7, #20]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d018      	beq.n	8005f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	441a      	add	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d303      	bcc.n	8005f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68d9      	ldr	r1, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	461a      	mov	r2, r3
 8005f26:	6838      	ldr	r0, [r7, #0]
 8005f28:	f01b fc89 	bl	802183e <memcpy>
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f3c:	f001 fdc4 	bl	8007ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f48:	e011      	b.n	8005f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d012      	beq.n	8005f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3324      	adds	r3, #36	@ 0x24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fd86 	bl	8006a68 <xTaskRemoveFromEventList>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f62:	f000 fe5f 	bl	8006c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dce9      	bgt.n	8005f4a <prvUnlockQueue+0x16>
 8005f76:	e000      	b.n	8005f7a <prvUnlockQueue+0x46>
					break;
 8005f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	22ff      	movs	r2, #255	@ 0xff
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f82:	f001 fdd3 	bl	8007b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f86:	f001 fd9f 	bl	8007ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f92:	e011      	b.n	8005fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d012      	beq.n	8005fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3310      	adds	r3, #16
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fd61 	bl	8006a68 <xTaskRemoveFromEventList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fac:	f000 fe3a 	bl	8006c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dce9      	bgt.n	8005f94 <prvUnlockQueue+0x60>
 8005fc0:	e000      	b.n	8005fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22ff      	movs	r2, #255	@ 0xff
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005fcc:	f001 fdae 	bl	8007b2c <vPortExitCritical>
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe0:	f001 fd72 	bl	8007ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e001      	b.n	8005ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ff6:	f001 fd99 	bl	8007b2c <vPortExitCritical>

	return xReturn;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800600c:	f001 fd5c 	bl	8007ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006018:	429a      	cmp	r2, r3
 800601a:	d102      	bne.n	8006022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e001      	b.n	8006026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006026:	f001 fd81 	bl	8007b2c <vPortExitCritical>

	return xReturn;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e014      	b.n	800606e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006044:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <vQueueAddToRegistry+0x50>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006050:	490c      	ldr	r1, [pc, #48]	@ (8006084 <vQueueAddToRegistry+0x50>)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800605a:	4a0a      	ldr	r2, [pc, #40]	@ (8006084 <vQueueAddToRegistry+0x50>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4413      	add	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006066:	e006      	b.n	8006076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b07      	cmp	r3, #7
 8006072:	d9e7      	bls.n	8006044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	200265d8 	.word	0x200265d8

08006088 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e016      	b.n	80060c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006096:	4a10      	ldr	r2, [pc, #64]	@ (80060d8 <vQueueUnregisterQueue+0x50>)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d10b      	bne.n	80060be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80060a6:	4a0c      	ldr	r2, [pc, #48]	@ (80060d8 <vQueueUnregisterQueue+0x50>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2100      	movs	r1, #0
 80060ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80060b0:	4a09      	ldr	r2, [pc, #36]	@ (80060d8 <vQueueUnregisterQueue+0x50>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	2200      	movs	r2, #0
 80060ba:	605a      	str	r2, [r3, #4]
				break;
 80060bc:	e006      	b.n	80060cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b07      	cmp	r3, #7
 80060c8:	d9e5      	bls.n	8006096 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	200265d8 	.word	0x200265d8

080060dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060ec:	f001 fcec 	bl	8007ac8 <vPortEnterCritical>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <vQueueWaitForMessageRestricted+0x2a>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800610c:	b25b      	sxtb	r3, r3
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d103      	bne.n	800611c <vQueueWaitForMessageRestricted+0x40>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800611c:	f001 fd06 	bl	8007b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3324      	adds	r3, #36	@ 0x24
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fc6d 	bl	8006a10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	f7ff fefc 	bl	8005f34 <prvUnlockQueue>
	}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	@ 0x38
 8006148:	af04      	add	r7, sp, #16
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	623b      	str	r3, [r7, #32]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	61fb      	str	r3, [r7, #28]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800618e:	23a8      	movs	r3, #168	@ 0xa8
 8006190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2ba8      	cmp	r3, #168	@ 0xa8
 8006196:	d00b      	beq.n	80061b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	61bb      	str	r3, [r7, #24]
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01e      	beq.n	80061f6 <xTaskCreateStatic+0xb2>
 80061b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061d0:	2300      	movs	r3, #0
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f851 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061f0:	f000 f8f6 	bl	80063e0 <prvAddNewTaskToReadyList>
 80061f4:	e001      	b.n	80061fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061fa:	697b      	ldr	r3, [r7, #20]
	}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	@ 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	@ 0x30
 8006208:	af04      	add	r7, sp, #16
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fd77 	bl	8007d0c <pvPortMalloc>
 800621e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00e      	beq.n	8006244 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006226:	20a8      	movs	r0, #168	@ 0xa8
 8006228:	f001 fd70 	bl	8007d0c <pvPortMalloc>
 800622c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30
 800623a:	e005      	b.n	8006248 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800623c:	6978      	ldr	r0, [r7, #20]
 800623e:	f001 fe33 	bl	8007ea8 <vPortFree>
 8006242:	e001      	b.n	8006248 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d017      	beq.n	800627e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	2300      	movs	r3, #0
 800625a:	9303      	str	r3, [sp, #12]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	9302      	str	r3, [sp, #8]
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f80f 	bl	8006290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006272:	69f8      	ldr	r0, [r7, #28]
 8006274:	f000 f8b4 	bl	80063e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006278:	2301      	movs	r3, #1
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	e002      	b.n	8006284 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006284:	69bb      	ldr	r3, [r7, #24]
	}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	461a      	mov	r2, r3
 80062a8:	21a5      	movs	r1, #165	@ 0xa5
 80062aa:	f01b f99a 	bl	80215e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062b8:	3b01      	subs	r3, #1
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	617b      	str	r3, [r7, #20]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01f      	beq.n	8006330 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e012      	b.n	800631c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	7819      	ldrb	r1, [r3, #0]
 80062fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	3334      	adds	r3, #52	@ 0x34
 8006306:	460a      	mov	r2, r1
 8006308:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d9e9      	bls.n	80062f6 <prvInitialiseNewTask+0x66>
 8006322:	e000      	b.n	8006326 <prvInitialiseNewTask+0x96>
			{
				break;
 8006324:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800632e:	e003      	b.n	8006338 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633a:	2b37      	cmp	r3, #55	@ 0x37
 800633c:	d901      	bls.n	8006342 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800633e:	2337      	movs	r3, #55	@ 0x37
 8006340:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006346:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800634c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	2200      	movs	r2, #0
 8006352:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fe33 	bl	8004fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	3318      	adds	r3, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fe2e 	bl	8004fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800636c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	3354      	adds	r3, #84	@ 0x54
 8006392:	224c      	movs	r2, #76	@ 0x4c
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f01b f923 	bl	80215e2 <memset>
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	4a0d      	ldr	r2, [pc, #52]	@ (80063d4 <prvInitialiseNewTask+0x144>)
 80063a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	4a0c      	ldr	r2, [pc, #48]	@ (80063d8 <prvInitialiseNewTask+0x148>)
 80063a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	4a0c      	ldr	r2, [pc, #48]	@ (80063dc <prvInitialiseNewTask+0x14c>)
 80063ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	68f9      	ldr	r1, [r7, #12]
 80063b2:	69b8      	ldr	r0, [r7, #24]
 80063b4:	f001 fa5a 	bl	800786c <pxPortInitialiseStack>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ca:	bf00      	nop
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2002ba88 	.word	0x2002ba88
 80063d8:	2002baf0 	.word	0x2002baf0
 80063dc:	2002bb58 	.word	0x2002bb58

080063e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063e8:	f001 fb6e 	bl	8007ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063ec:	4b2d      	ldr	r3, [pc, #180]	@ (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a2c      	ldr	r2, [pc, #176]	@ (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 80063f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063f6:	4b2c      	ldr	r3, [pc, #176]	@ (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063fe:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006404:	4b27      	ldr	r3, [pc, #156]	@ (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d110      	bne.n	800642e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800640c:	f000 fc2e 	bl	8006c6c <prvInitialiseTaskLists>
 8006410:	e00d      	b.n	800642e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006412:	4b26      	ldr	r3, [pc, #152]	@ (80064ac <prvAddNewTaskToReadyList+0xcc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800641a:	4b23      	ldr	r3, [pc, #140]	@ (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	429a      	cmp	r2, r3
 8006426:	d802      	bhi.n	800642e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006428:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800642e:	4b20      	ldr	r3, [pc, #128]	@ (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a1e      	ldr	r2, [pc, #120]	@ (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 8006436:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006438:	4b1d      	ldr	r3, [pc, #116]	@ (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006444:	4b1b      	ldr	r3, [pc, #108]	@ (80064b4 <prvAddNewTaskToReadyList+0xd4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d903      	bls.n	8006454 <prvAddNewTaskToReadyList+0x74>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <prvAddNewTaskToReadyList+0xd4>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a15      	ldr	r2, [pc, #84]	@ (80064b8 <prvAddNewTaskToReadyList+0xd8>)
 8006462:	441a      	add	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7fe fdb7 	bl	8004fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006470:	f001 fb5c 	bl	8007b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006474:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <prvAddNewTaskToReadyList+0xcc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00e      	beq.n	800649a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	429a      	cmp	r2, r3
 8006488:	d207      	bcs.n	800649a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <prvAddNewTaskToReadyList+0xdc>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20026aec 	.word	0x20026aec
 80064a8:	20026618 	.word	0x20026618
 80064ac:	20026af8 	.word	0x20026af8
 80064b0:	20026b08 	.word	0x20026b08
 80064b4:	20026af4 	.word	0x20026af4
 80064b8:	2002661c 	.word	0x2002661c
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064d2:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <vTaskDelay+0x64>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <vTaskDelay+0x32>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60bb      	str	r3, [r7, #8]
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	e7fd      	b.n	80064ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064f2:	f000 f88b 	bl	800660c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064f6:	2100      	movs	r1, #0
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fe09 	bl	8007110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064fe:	f000 f893 	bl	8006628 <xTaskResumeAll>
 8006502:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800650a:	4b07      	ldr	r3, [pc, #28]	@ (8006528 <vTaskDelay+0x68>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20026b14 	.word	0x20026b14
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	@ 0x28
 8006530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800653a:	463a      	mov	r2, r7
 800653c:	1d39      	adds	r1, r7, #4
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fcea 	bl	8004f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	460a      	mov	r2, r1
 800655a:	4924      	ldr	r1, [pc, #144]	@ (80065ec <vTaskStartScheduler+0xc0>)
 800655c:	4824      	ldr	r0, [pc, #144]	@ (80065f0 <vTaskStartScheduler+0xc4>)
 800655e:	f7ff fdf1 	bl	8006144 <xTaskCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	4a23      	ldr	r2, [pc, #140]	@ (80065f4 <vTaskStartScheduler+0xc8>)
 8006566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006568:	4b22      	ldr	r3, [pc, #136]	@ (80065f4 <vTaskStartScheduler+0xc8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e001      	b.n	800657a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006580:	f000 fe1a 	bl	80071b8 <xTimerCreateTimerTask>
 8006584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d11b      	bne.n	80065c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	613b      	str	r3, [r7, #16]
}
 800659e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a0:	4b15      	ldr	r3, [pc, #84]	@ (80065f8 <vTaskStartScheduler+0xcc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3354      	adds	r3, #84	@ 0x54
 80065a6:	4a15      	ldr	r2, [pc, #84]	@ (80065fc <vTaskStartScheduler+0xd0>)
 80065a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065aa:	4b15      	ldr	r3, [pc, #84]	@ (8006600 <vTaskStartScheduler+0xd4>)
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <vTaskStartScheduler+0xd8>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065b8:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <vTaskStartScheduler+0xdc>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065be:	f001 f9df 	bl	8007980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065c2:	e00f      	b.n	80065e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d10b      	bne.n	80065e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60fb      	str	r3, [r7, #12]
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <vTaskStartScheduler+0xb4>
}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	080222f0 	.word	0x080222f0
 80065f0:	08006c3d 	.word	0x08006c3d
 80065f4:	20026b10 	.word	0x20026b10
 80065f8:	20026618 	.word	0x20026618
 80065fc:	200000a4 	.word	0x200000a4
 8006600:	20026b0c 	.word	0x20026b0c
 8006604:	20026af8 	.word	0x20026af8
 8006608:	20026af0 	.word	0x20026af0

0800660c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006610:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <vTaskSuspendAll+0x18>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	4a03      	ldr	r2, [pc, #12]	@ (8006624 <vTaskSuspendAll+0x18>)
 8006618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800661a:	bf00      	nop
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20026b14 	.word	0x20026b14

08006628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006636:	4b42      	ldr	r3, [pc, #264]	@ (8006740 <xTaskResumeAll+0x118>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <xTaskResumeAll+0x2e>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	603b      	str	r3, [r7, #0]
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	e7fd      	b.n	8006652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006656:	f001 fa37 	bl	8007ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800665a:	4b39      	ldr	r3, [pc, #228]	@ (8006740 <xTaskResumeAll+0x118>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3b01      	subs	r3, #1
 8006660:	4a37      	ldr	r2, [pc, #220]	@ (8006740 <xTaskResumeAll+0x118>)
 8006662:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006664:	4b36      	ldr	r3, [pc, #216]	@ (8006740 <xTaskResumeAll+0x118>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d162      	bne.n	8006732 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800666c:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <xTaskResumeAll+0x11c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05e      	beq.n	8006732 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006674:	e02f      	b.n	80066d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006676:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <xTaskResumeAll+0x120>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3318      	adds	r3, #24
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fd08 	bl	8005098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe fd03 	bl	8005098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006696:	4b2d      	ldr	r3, [pc, #180]	@ (800674c <xTaskResumeAll+0x124>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d903      	bls.n	80066a6 <xTaskResumeAll+0x7e>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	4a2a      	ldr	r2, [pc, #168]	@ (800674c <xTaskResumeAll+0x124>)
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a27      	ldr	r2, [pc, #156]	@ (8006750 <xTaskResumeAll+0x128>)
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fe fc8e 	bl	8004fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4b23      	ldr	r3, [pc, #140]	@ (8006754 <xTaskResumeAll+0x12c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80066d0:	4b21      	ldr	r3, [pc, #132]	@ (8006758 <xTaskResumeAll+0x130>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <xTaskResumeAll+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1cb      	bne.n	8006676 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066e4:	f000 fb66 	bl	8006db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066e8:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <xTaskResumeAll+0x134>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d010      	beq.n	8006716 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066f4:	f000 f846 	bl	8006784 <xTaskIncrementTick>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066fe:	4b16      	ldr	r3, [pc, #88]	@ (8006758 <xTaskResumeAll+0x130>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3b01      	subs	r3, #1
 8006708:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f1      	bne.n	80066f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006710:	4b12      	ldr	r3, [pc, #72]	@ (800675c <xTaskResumeAll+0x134>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006716:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <xTaskResumeAll+0x130>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800671e:	2301      	movs	r3, #1
 8006720:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006722:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <xTaskResumeAll+0x138>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006732:	f001 f9fb 	bl	8007b2c <vPortExitCritical>

	return xAlreadyYielded;
 8006736:	68bb      	ldr	r3, [r7, #8]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20026b14 	.word	0x20026b14
 8006744:	20026aec 	.word	0x20026aec
 8006748:	20026aac 	.word	0x20026aac
 800674c:	20026af4 	.word	0x20026af4
 8006750:	2002661c 	.word	0x2002661c
 8006754:	20026618 	.word	0x20026618
 8006758:	20026b00 	.word	0x20026b00
 800675c:	20026afc 	.word	0x20026afc
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800676a:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <xTaskGetTickCount+0x1c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006770:	687b      	ldr	r3, [r7, #4]
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20026af0 	.word	0x20026af0

08006784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678e:	4b4f      	ldr	r3, [pc, #316]	@ (80068cc <xTaskIncrementTick+0x148>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 8090 	bne.w	80068b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006798:	4b4d      	ldr	r3, [pc, #308]	@ (80068d0 <xTaskIncrementTick+0x14c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a0:	4a4b      	ldr	r2, [pc, #300]	@ (80068d0 <xTaskIncrementTick+0x14c>)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d121      	bne.n	80067f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067ac:	4b49      	ldr	r3, [pc, #292]	@ (80068d4 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	603b      	str	r3, [r7, #0]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xTaskIncrementTick+0x46>
 80067ce:	4b41      	ldr	r3, [pc, #260]	@ (80068d4 <xTaskIncrementTick+0x150>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	4b40      	ldr	r3, [pc, #256]	@ (80068d8 <xTaskIncrementTick+0x154>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3e      	ldr	r2, [pc, #248]	@ (80068d4 <xTaskIncrementTick+0x150>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4a3e      	ldr	r2, [pc, #248]	@ (80068d8 <xTaskIncrementTick+0x154>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b3e      	ldr	r3, [pc, #248]	@ (80068dc <xTaskIncrementTick+0x158>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a3c      	ldr	r2, [pc, #240]	@ (80068dc <xTaskIncrementTick+0x158>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	f000 fae2 	bl	8006db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067f0:	4b3b      	ldr	r3, [pc, #236]	@ (80068e0 <xTaskIncrementTick+0x15c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d349      	bcc.n	800688e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fa:	4b36      	ldr	r3, [pc, #216]	@ (80068d4 <xTaskIncrementTick+0x150>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	4b36      	ldr	r3, [pc, #216]	@ (80068e0 <xTaskIncrementTick+0x15c>)
 8006806:	f04f 32ff 	mov.w	r2, #4294967295
 800680a:	601a      	str	r2, [r3, #0]
					break;
 800680c:	e03f      	b.n	800688e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680e:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <xTaskIncrementTick+0x150>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d203      	bcs.n	800682e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006826:	4a2e      	ldr	r2, [pc, #184]	@ (80068e0 <xTaskIncrementTick+0x15c>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800682c:	e02f      	b.n	800688e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	3304      	adds	r3, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fc30 	bl	8005098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fc27 	bl	8005098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684e:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <xTaskIncrementTick+0x160>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d903      	bls.n	800685e <xTaskIncrementTick+0xda>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	4a22      	ldr	r2, [pc, #136]	@ (80068e4 <xTaskIncrementTick+0x160>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <xTaskIncrementTick+0x164>)
 800686c:	441a      	add	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fe fbb2 	bl	8004fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <xTaskIncrementTick+0x168>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d3b8      	bcc.n	80067fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688c:	e7b5      	b.n	80067fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800688e:	4b17      	ldr	r3, [pc, #92]	@ (80068ec <xTaskIncrementTick+0x168>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006894:	4914      	ldr	r1, [pc, #80]	@ (80068e8 <xTaskIncrementTick+0x164>)
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d901      	bls.n	80068aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068aa:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <xTaskIncrementTick+0x16c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e004      	b.n	80068c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068b8:	4b0e      	ldr	r3, [pc, #56]	@ (80068f4 <xTaskIncrementTick+0x170>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <xTaskIncrementTick+0x170>)
 80068c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20026b14 	.word	0x20026b14
 80068d0:	20026af0 	.word	0x20026af0
 80068d4:	20026aa4 	.word	0x20026aa4
 80068d8:	20026aa8 	.word	0x20026aa8
 80068dc:	20026b04 	.word	0x20026b04
 80068e0:	20026b0c 	.word	0x20026b0c
 80068e4:	20026af4 	.word	0x20026af4
 80068e8:	2002661c 	.word	0x2002661c
 80068ec:	20026618 	.word	0x20026618
 80068f0:	20026b00 	.word	0x20026b00
 80068f4:	20026afc 	.word	0x20026afc

080068f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068fe:	4b2b      	ldr	r3, [pc, #172]	@ (80069ac <vTaskSwitchContext+0xb4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006906:	4b2a      	ldr	r3, [pc, #168]	@ (80069b0 <vTaskSwitchContext+0xb8>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800690c:	e047      	b.n	800699e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800690e:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <vTaskSwitchContext+0xb8>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	4b27      	ldr	r3, [pc, #156]	@ (80069b4 <vTaskSwitchContext+0xbc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e011      	b.n	8006940 <vTaskSwitchContext+0x48>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <vTaskSwitchContext+0x42>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <vTaskSwitchContext+0x3e>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b01      	subs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	491d      	ldr	r1, [pc, #116]	@ (80069b8 <vTaskSwitchContext+0xc0>)
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0e3      	beq.n	800691c <vTaskSwitchContext+0x24>
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4a16      	ldr	r2, [pc, #88]	@ (80069b8 <vTaskSwitchContext+0xc0>)
 8006960:	4413      	add	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	3308      	adds	r3, #8
 8006976:	429a      	cmp	r2, r3
 8006978:	d104      	bne.n	8006984 <vTaskSwitchContext+0x8c>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	605a      	str	r2, [r3, #4]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <vTaskSwitchContext+0xc4>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4a09      	ldr	r2, [pc, #36]	@ (80069b4 <vTaskSwitchContext+0xbc>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <vTaskSwitchContext+0xc4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3354      	adds	r3, #84	@ 0x54
 800699a:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <vTaskSwitchContext+0xc8>)
 800699c:	6013      	str	r3, [r2, #0]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20026b14 	.word	0x20026b14
 80069b0:	20026b00 	.word	0x20026b00
 80069b4:	20026af4 	.word	0x20026af4
 80069b8:	2002661c 	.word	0x2002661c
 80069bc:	20026618 	.word	0x20026618
 80069c0:	200000a4 	.word	0x200000a4

080069c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ec:	4b07      	ldr	r3, [pc, #28]	@ (8006a0c <vTaskPlaceOnEventList+0x48>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3318      	adds	r3, #24
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fe fb16 	bl	8005026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069fa:	2101      	movs	r1, #1
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	f000 fb87 	bl	8007110 <prvAddCurrentTaskToDelayedList>
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20026618 	.word	0x20026618

08006a10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	617b      	str	r3, [r7, #20]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3318      	adds	r3, #24
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7fe facb 	bl	8004fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	68b8      	ldr	r0, [r7, #8]
 8006a58:	f000 fb5a 	bl	8007110 <prvAddCurrentTaskToDelayedList>
	}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20026618 	.word	0x20026618

08006a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10b      	bne.n	8006a96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	e7fd      	b.n	8006a92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3318      	adds	r3, #24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fafc 	bl	8005098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <xTaskRemoveFromEventList+0xb0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11d      	bne.n	8006ae4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe faf3 	bl	8005098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <xTaskRemoveFromEventList+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <xTaskRemoveFromEventList+0x5e>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a16      	ldr	r2, [pc, #88]	@ (8006b1c <xTaskRemoveFromEventList+0xb4>)
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4a13      	ldr	r2, [pc, #76]	@ (8006b20 <xTaskRemoveFromEventList+0xb8>)
 8006ad4:	441a      	add	r2, r3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7fe fa7e 	bl	8004fde <vListInsertEnd>
 8006ae2:	e005      	b.n	8006af0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4619      	mov	r1, r3
 8006aea:	480e      	ldr	r0, [pc, #56]	@ (8006b24 <xTaskRemoveFromEventList+0xbc>)
 8006aec:	f7fe fa77 	bl	8004fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <xTaskRemoveFromEventList+0xc0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d905      	bls.n	8006b0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006afe:	2301      	movs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <xTaskRemoveFromEventList+0xc4>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e001      	b.n	8006b0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b0e:	697b      	ldr	r3, [r7, #20]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20026b14 	.word	0x20026b14
 8006b1c:	20026af4 	.word	0x20026af4
 8006b20:	2002661c 	.word	0x2002661c
 8006b24:	20026aac 	.word	0x20026aac
 8006b28:	20026618 	.word	0x20026618
 8006b2c:	20026b00 	.word	0x20026b00

08006b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <vTaskInternalSetTimeOutState+0x24>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b40:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <vTaskInternalSetTimeOutState+0x28>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	20026b04 	.word	0x20026b04
 8006b58:	20026af0 	.word	0x20026af0

08006b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	613b      	str	r3, [r7, #16]
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60fb      	str	r3, [r7, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ba2:	f000 ff91 	bl	8007ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <xTaskCheckForTimeOut+0xc0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d102      	bne.n	8006bc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e023      	b.n	8006c0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b15      	ldr	r3, [pc, #84]	@ (8006c20 <xTaskCheckForTimeOut+0xc4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d007      	beq.n	8006be2 <xTaskCheckForTimeOut+0x86>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	e015      	b.n	8006c0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d20b      	bcs.n	8006c04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff99 	bl	8006b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	e004      	b.n	8006c0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c0e:	f000 ff8d 	bl	8007b2c <vPortExitCritical>

	return xReturn;
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20026af0 	.word	0x20026af0
 8006c20:	20026b04 	.word	0x20026b04

08006c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c28:	4b03      	ldr	r3, [pc, #12]	@ (8006c38 <vTaskMissedYield+0x14>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	20026b00 	.word	0x20026b00

08006c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c44:	f000 f852 	bl	8006cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <prvIdleTask+0x28>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d9f9      	bls.n	8006c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c50:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <prvIdleTask+0x2c>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c60:	e7f0      	b.n	8006c44 <prvIdleTask+0x8>
 8006c62:	bf00      	nop
 8006c64:	2002661c 	.word	0x2002661c
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c72:	2300      	movs	r3, #0
 8006c74:	607b      	str	r3, [r7, #4]
 8006c76:	e00c      	b.n	8006c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a12      	ldr	r2, [pc, #72]	@ (8006ccc <prvInitialiseTaskLists+0x60>)
 8006c84:	4413      	add	r3, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe f97c 	bl	8004f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b37      	cmp	r3, #55	@ 0x37
 8006c96:	d9ef      	bls.n	8006c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c98:	480d      	ldr	r0, [pc, #52]	@ (8006cd0 <prvInitialiseTaskLists+0x64>)
 8006c9a:	f7fe f973 	bl	8004f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c9e:	480d      	ldr	r0, [pc, #52]	@ (8006cd4 <prvInitialiseTaskLists+0x68>)
 8006ca0:	f7fe f970 	bl	8004f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ca4:	480c      	ldr	r0, [pc, #48]	@ (8006cd8 <prvInitialiseTaskLists+0x6c>)
 8006ca6:	f7fe f96d 	bl	8004f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006caa:	480c      	ldr	r0, [pc, #48]	@ (8006cdc <prvInitialiseTaskLists+0x70>)
 8006cac:	f7fe f96a 	bl	8004f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cb0:	480b      	ldr	r0, [pc, #44]	@ (8006ce0 <prvInitialiseTaskLists+0x74>)
 8006cb2:	f7fe f967 	bl	8004f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <prvInitialiseTaskLists+0x78>)
 8006cb8:	4a05      	ldr	r2, [pc, #20]	@ (8006cd0 <prvInitialiseTaskLists+0x64>)
 8006cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <prvInitialiseTaskLists+0x7c>)
 8006cbe:	4a05      	ldr	r2, [pc, #20]	@ (8006cd4 <prvInitialiseTaskLists+0x68>)
 8006cc0:	601a      	str	r2, [r3, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	2002661c 	.word	0x2002661c
 8006cd0:	20026a7c 	.word	0x20026a7c
 8006cd4:	20026a90 	.word	0x20026a90
 8006cd8:	20026aac 	.word	0x20026aac
 8006cdc:	20026ac0 	.word	0x20026ac0
 8006ce0:	20026ad8 	.word	0x20026ad8
 8006ce4:	20026aa4 	.word	0x20026aa4
 8006ce8:	20026aa8 	.word	0x20026aa8

08006cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cf2:	e019      	b.n	8006d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cf4:	f000 fee8 	bl	8007ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf8:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <prvCheckTasksWaitingTermination+0x50>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe f9c7 	bl	8005098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <prvCheckTasksWaitingTermination+0x54>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	4a0b      	ldr	r2, [pc, #44]	@ (8006d40 <prvCheckTasksWaitingTermination+0x54>)
 8006d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d14:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <prvCheckTasksWaitingTermination+0x58>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d44 <prvCheckTasksWaitingTermination+0x58>)
 8006d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d1e:	f000 ff05 	bl	8007b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f810 	bl	8006d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d28:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <prvCheckTasksWaitingTermination+0x58>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e1      	bne.n	8006cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20026ac0 	.word	0x20026ac0
 8006d40:	20026aec 	.word	0x20026aec
 8006d44:	20026ad4 	.word	0x20026ad4

08006d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3354      	adds	r3, #84	@ 0x54
 8006d54:	4618      	mov	r0, r3
 8006d56:	f01a fc8d 	bl	8021674 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 f89d 	bl	8007ea8 <vPortFree>
				vPortFree( pxTCB );
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f89a 	bl	8007ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d74:	e019      	b.n	8006daa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d103      	bne.n	8006d88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f891 	bl	8007ea8 <vPortFree>
	}
 8006d86:	e010      	b.n	8006daa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d00b      	beq.n	8006daa <prvDeleteTCB+0x62>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60fb      	str	r3, [r7, #12]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <prvDeleteTCB+0x5e>
	}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dba:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <prvResetNextTaskUnblockTime+0x38>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dcc:	e008      	b.n	8006de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dce:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <prvResetNextTaskUnblockTime+0x38>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	4a04      	ldr	r2, [pc, #16]	@ (8006df0 <prvResetNextTaskUnblockTime+0x3c>)
 8006dde:	6013      	str	r3, [r2, #0]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	20026aa4 	.word	0x20026aa4
 8006df0:	20026b0c 	.word	0x20026b0c

08006df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <xTaskGetSchedulerState+0x34>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e02:	2301      	movs	r3, #1
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	e008      	b.n	8006e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e08:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <xTaskGetSchedulerState+0x38>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e10:	2302      	movs	r3, #2
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	e001      	b.n	8006e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e1a:	687b      	ldr	r3, [r7, #4]
	}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	20026af8 	.word	0x20026af8
 8006e2c:	20026b14 	.word	0x20026b14

08006e30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d051      	beq.n	8006eea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef4 <xTaskPriorityInherit+0xc4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d241      	bcs.n	8006ed8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db06      	blt.n	8006e6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ef4 <xTaskPriorityInherit+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	6959      	ldr	r1, [r3, #20]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef8 <xTaskPriorityInherit+0xc8>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	4299      	cmp	r1, r3
 8006e80:	d122      	bne.n	8006ec8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe f906 	bl	8005098 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e8c:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <xTaskPriorityInherit+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9a:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <xTaskPriorityInherit+0xcc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d903      	bls.n	8006eaa <xTaskPriorityInherit+0x7a>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <xTaskPriorityInherit+0xcc>)
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4a10      	ldr	r2, [pc, #64]	@ (8006ef8 <xTaskPriorityInherit+0xc8>)
 8006eb8:	441a      	add	r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f7fe f88c 	bl	8004fde <vListInsertEnd>
 8006ec6:	e004      	b.n	8006ed2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef4 <xTaskPriorityInherit+0xc4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	e008      	b.n	8006eea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006edc:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <xTaskPriorityInherit+0xc4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d201      	bcs.n	8006eea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eea:	68fb      	ldr	r3, [r7, #12]
	}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20026618 	.word	0x20026618
 8006ef8:	2002661c 	.word	0x2002661c
 8006efc:	20026af4 	.word	0x20026af4

08006f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d058      	beq.n	8006fc8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f16:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd4 <xTaskPriorityDisinherit+0xd4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d00b      	beq.n	8006f38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60bb      	str	r3, [r7, #8]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5c:	1e5a      	subs	r2, r3, #1
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d02c      	beq.n	8006fc8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d128      	bne.n	8006fc8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f88c 	bl	8005098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd8 <xTaskPriorityDisinherit+0xd8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d903      	bls.n	8006fa8 <xTaskPriorityDisinherit+0xa8>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd8 <xTaskPriorityDisinherit+0xd8>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4a09      	ldr	r2, [pc, #36]	@ (8006fdc <xTaskPriorityDisinherit+0xdc>)
 8006fb6:	441a      	add	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe f80d 	bl	8004fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fc8:	697b      	ldr	r3, [r7, #20]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20026618 	.word	0x20026618
 8006fd8:	20026af4 	.word	0x20026af4
 8006fdc:	2002661c 	.word	0x2002661c

08006fe0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d06c      	beq.n	80070d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d902      	bls.n	8007028 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	e002      	b.n	800702e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	429a      	cmp	r2, r3
 8007036:	d04c      	beq.n	80070d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	429a      	cmp	r2, r3
 8007040:	d147      	bne.n	80070d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007042:	4b26      	ldr	r3, [pc, #152]	@ (80070dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d10b      	bne.n	8007064 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60bb      	str	r3, [r7, #8]
}
 800705e:	bf00      	nop
 8007060:	bf00      	nop
 8007062:	e7fd      	b.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	db04      	blt.n	8007082 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	6959      	ldr	r1, [r3, #20]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4a13      	ldr	r2, [pc, #76]	@ (80070e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007092:	4413      	add	r3, r2
 8007094:	4299      	cmp	r1, r3
 8007096:	d11c      	bne.n	80070d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fffb 	bl	8005098 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a6:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d903      	bls.n	80070b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a0c      	ldr	r2, [pc, #48]	@ (80070e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4a07      	ldr	r2, [pc, #28]	@ (80070e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80070c4:	441a      	add	r2, r3
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fd ff86 	bl	8004fde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070d2:	bf00      	nop
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20026618 	.word	0x20026618
 80070e0:	2002661c 	.word	0x2002661c
 80070e4:	20026af4 	.word	0x20026af4

080070e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070ec:	4b07      	ldr	r3, [pc, #28]	@ (800710c <pvTaskIncrementMutexHeldCount+0x24>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070f4:	4b05      	ldr	r3, [pc, #20]	@ (800710c <pvTaskIncrementMutexHeldCount+0x24>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070fa:	3201      	adds	r2, #1
 80070fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80070fe:	4b03      	ldr	r3, [pc, #12]	@ (800710c <pvTaskIncrementMutexHeldCount+0x24>)
 8007100:	681b      	ldr	r3, [r3, #0]
	}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20026618 	.word	0x20026618

08007110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800711a:	4b21      	ldr	r3, [pc, #132]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007120:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3304      	adds	r3, #4
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd ffb6 	bl	8005098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d10a      	bne.n	800714a <prvAddCurrentTaskToDelayedList+0x3a>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800713a:	4b1a      	ldr	r3, [pc, #104]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	4819      	ldr	r0, [pc, #100]	@ (80071a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007144:	f7fd ff4b 	bl	8004fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007148:	e026      	b.n	8007198 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4413      	add	r3, r2
 8007150:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007152:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d209      	bcs.n	8007176 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007162:	4b12      	ldr	r3, [pc, #72]	@ (80071ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b0f      	ldr	r3, [pc, #60]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fd ff59 	bl	8005026 <vListInsert>
}
 8007174:	e010      	b.n	8007198 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007176:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b0a      	ldr	r3, [pc, #40]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3304      	adds	r3, #4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fd ff4f 	bl	8005026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007188:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	d202      	bcs.n	8007198 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007192:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6013      	str	r3, [r2, #0]
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20026af0 	.word	0x20026af0
 80071a4:	20026618 	.word	0x20026618
 80071a8:	20026ad8 	.word	0x20026ad8
 80071ac:	20026aa8 	.word	0x20026aa8
 80071b0:	20026aa4 	.word	0x20026aa4
 80071b4:	20026b0c 	.word	0x20026b0c

080071b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071c2:	f000 fb13 	bl	80077ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071c6:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <xTimerCreateTimerTask+0x84>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d021      	beq.n	8007212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071d6:	1d3a      	adds	r2, r7, #4
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fd feb5 	bl	8004f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	9202      	str	r2, [sp, #8]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	2302      	movs	r3, #2
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	460a      	mov	r2, r1
 80071f8:	4911      	ldr	r1, [pc, #68]	@ (8007240 <xTimerCreateTimerTask+0x88>)
 80071fa:	4812      	ldr	r0, [pc, #72]	@ (8007244 <xTimerCreateTimerTask+0x8c>)
 80071fc:	f7fe ffa2 	bl	8006144 <xTaskCreateStatic>
 8007200:	4603      	mov	r3, r0
 8007202:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <xTimerCreateTimerTask+0x90>)
 8007204:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007206:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <xTimerCreateTimerTask+0x90>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	613b      	str	r3, [r7, #16]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20026b48 	.word	0x20026b48
 8007240:	080222f8 	.word	0x080222f8
 8007244:	08007385 	.word	0x08007385
 8007248:	20026b4c 	.word	0x20026b4c

0800724c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <xTimerGenericCommand+0x30>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800727c:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <xTimerGenericCommand+0x98>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02a      	beq.n	80072da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b05      	cmp	r3, #5
 8007294:	dc18      	bgt.n	80072c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007296:	f7ff fdad 	bl	8006df4 <xTaskGetSchedulerState>
 800729a:	4603      	mov	r3, r0
 800729c:	2b02      	cmp	r3, #2
 800729e:	d109      	bne.n	80072b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072a0:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	f107 0110 	add.w	r1, r7, #16
 80072a8:	2300      	movs	r3, #0
 80072aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ac:	f7fe f8d2 	bl	8005454 <xQueueGenericSend>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80072b2:	e012      	b.n	80072da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072b4:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	f107 0110 	add.w	r1, r7, #16
 80072bc:	2300      	movs	r3, #0
 80072be:	2200      	movs	r2, #0
 80072c0:	f7fe f8c8 	bl	8005454 <xQueueGenericSend>
 80072c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80072c6:	e008      	b.n	80072da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	f107 0110 	add.w	r1, r7, #16
 80072d0:	2300      	movs	r3, #0
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f7fe f9c0 	bl	8005658 <xQueueGenericSendFromISR>
 80072d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3728      	adds	r7, #40	@ 0x28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20026b48 	.word	0x20026b48

080072e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f2:	4b23      	ldr	r3, [pc, #140]	@ (8007380 <prvProcessExpiredTimer+0x98>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3304      	adds	r3, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f7fd fec9 	bl	8005098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d023      	beq.n	800735c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	18d1      	adds	r1, r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	f000 f8d5 	bl	80074d0 <prvInsertTimerInActiveList>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d020      	beq.n	800736e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800732c:	2300      	movs	r3, #0
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	2100      	movs	r1, #0
 8007336:	6978      	ldr	r0, [r7, #20]
 8007338:	f7ff ff88 	bl	800724c <xTimerGenericCommand>
 800733c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d114      	bne.n	800736e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	b2da      	uxtb	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	4798      	blx	r3
}
 8007376:	bf00      	nop
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20026b40 	.word	0x20026b40

08007384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800738c:	f107 0308 	add.w	r3, r7, #8
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f859 	bl	8007448 <prvGetNextExpireTime>
 8007396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f805 	bl	80073ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073a2:	f000 f8d7 	bl	8007554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073a6:	bf00      	nop
 80073a8:	e7f0      	b.n	800738c <prvTimerTask+0x8>
	...

080073ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073b6:	f7ff f929 	bl	800660c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f866 	bl	8007490 <prvSampleTimeNow>
 80073c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d130      	bne.n	800742e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <prvProcessTimerOrBlockTask+0x3c>
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d806      	bhi.n	80073e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073da:	f7ff f925 	bl	8006628 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ff81 	bl	80072e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073e6:	e024      	b.n	8007432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <prvProcessTimerOrBlockTask+0x90>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <prvProcessTimerOrBlockTask+0x50>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <prvProcessTimerOrBlockTask+0x52>
 80073fc:	2300      	movs	r3, #0
 80073fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007400:	4b0f      	ldr	r3, [pc, #60]	@ (8007440 <prvProcessTimerOrBlockTask+0x94>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	f7fe fe65 	bl	80060dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f7ff f909 	bl	8006628 <xTaskResumeAll>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800741c:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <prvProcessTimerOrBlockTask+0x98>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
}
 800742c:	e001      	b.n	8007432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800742e:	f7ff f8fb 	bl	8006628 <xTaskResumeAll>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20026b44 	.word	0x20026b44
 8007440:	20026b48 	.word	0x20026b48
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <prvGetNextExpireTime+0x44>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <prvGetNextExpireTime+0x16>
 800745a:	2201      	movs	r2, #1
 800745c:	e000      	b.n	8007460 <prvGetNextExpireTime+0x18>
 800745e:	2200      	movs	r2, #0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800746c:	4b07      	ldr	r3, [pc, #28]	@ (800748c <prvGetNextExpireTime+0x44>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e001      	b.n	800747c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20026b40 	.word	0x20026b40

08007490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007498:	f7ff f964 	bl	8006764 <xTaskGetTickCount>
 800749c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800749e:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <prvSampleTimeNow+0x3c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d205      	bcs.n	80074b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074a8:	f000 f93a 	bl	8007720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074ba:	4a04      	ldr	r2, [pc, #16]	@ (80074cc <prvSampleTimeNow+0x3c>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074c0:	68fb      	ldr	r3, [r7, #12]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20026b50 	.word	0x20026b50

080074d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d812      	bhi.n	800751c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	429a      	cmp	r2, r3
 8007502:	d302      	bcc.n	800750a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	e01b      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800750a:	4b10      	ldr	r3, [pc, #64]	@ (800754c <prvInsertTimerInActiveList+0x7c>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7fd fd86 	bl	8005026 <vListInsert>
 800751a:	e012      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d206      	bcs.n	8007532 <prvInsertTimerInActiveList+0x62>
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d302      	bcc.n	8007532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e007      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007532:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <prvInsertTimerInActiveList+0x80>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3304      	adds	r3, #4
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7fd fd72 	bl	8005026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007542:	697b      	ldr	r3, [r7, #20]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20026b44 	.word	0x20026b44
 8007550:	20026b40 	.word	0x20026b40

08007554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08e      	sub	sp, #56	@ 0x38
 8007558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800755a:	e0ce      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da19      	bge.n	8007596 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	3304      	adds	r3, #4
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61fb      	str	r3, [r7, #28]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758c:	6850      	ldr	r0, [r2, #4]
 800758e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007590:	6892      	ldr	r2, [r2, #8]
 8007592:	4611      	mov	r1, r2
 8007594:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f2c0 80ae 	blt.w	80076fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	3304      	adds	r3, #4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fd fd72 	bl	8005098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075b4:	463b      	mov	r3, r7
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff ff6a 	bl	8007490 <prvSampleTimeNow>
 80075bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	f200 8097 	bhi.w	80076f4 <prvProcessReceivedCommands+0x1a0>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <prvProcessReceivedCommands+0x78>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075f5 	.word	0x080075f5
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	080075f5 	.word	0x080075f5
 80075d8:	0800766b 	.word	0x0800766b
 80075dc:	0800767f 	.word	0x0800767f
 80075e0:	080076cb 	.word	0x080076cb
 80075e4:	080075f5 	.word	0x080075f5
 80075e8:	080075f5 	.word	0x080075f5
 80075ec:	0800766b 	.word	0x0800766b
 80075f0:	0800767f 	.word	0x0800767f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	18d1      	adds	r1, r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007614:	f7ff ff5c 	bl	80074d0 <prvInsertTimerInActiveList>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d06c      	beq.n	80076f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007624:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d061      	beq.n	80076f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	441a      	add	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	2300      	movs	r3, #0
 8007642:	2100      	movs	r1, #0
 8007644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007646:	f7ff fe01 	bl	800724c <xTimerGenericCommand>
 800764a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d152      	bne.n	80076f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	61bb      	str	r3, [r7, #24]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007670:	f023 0301 	bic.w	r3, r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800767c:	e03d      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007684:	f043 0301 	orr.w	r3, r3, #1
 8007688:	b2da      	uxtb	r2, r3
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	617b      	str	r3, [r7, #20]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	18d1      	adds	r1, r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c4:	f7ff ff04 	bl	80074d0 <prvInsertTimerInActiveList>
					break;
 80076c8:	e017      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80076d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076da:	f000 fbe5 	bl	8007ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076de:	e00c      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076f2:	e002      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <prvProcessReceivedCommands+0x1a6>
					break;
 80076f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076fa:	4b08      	ldr	r3, [pc, #32]	@ (800771c <prvProcessReceivedCommands+0x1c8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	1d39      	adds	r1, r7, #4
 8007700:	2200      	movs	r2, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe f8d6 	bl	80058b4 <xQueueReceive>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	f47f af26 	bne.w	800755c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	3730      	adds	r7, #48	@ 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20026b48 	.word	0x20026b48

08007720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007726:	e049      	b.n	80077bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007728:	4b2e      	ldr	r3, [pc, #184]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007732:	4b2c      	ldr	r3, [pc, #176]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fca9 	bl	8005098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d02f      	beq.n	80077bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4413      	add	r3, r2
 8007764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	429a      	cmp	r2, r3
 800776c:	d90e      	bls.n	800778c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800777a:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f7fd fc4e 	bl	8005026 <vListInsert>
 800778a:	e017      	b.n	80077bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800778c:	2300      	movs	r3, #0
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	2100      	movs	r1, #0
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fd58 	bl	800724c <xTimerGenericCommand>
 800779c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	603b      	str	r3, [r7, #0]
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077bc:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1b0      	bne.n	8007728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077c6:	4b07      	ldr	r3, [pc, #28]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <prvSwitchTimerLists+0xc8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a04      	ldr	r2, [pc, #16]	@ (80077e4 <prvSwitchTimerLists+0xc4>)
 80077d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077d4:	4a04      	ldr	r2, [pc, #16]	@ (80077e8 <prvSwitchTimerLists+0xc8>)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6013      	str	r3, [r2, #0]
}
 80077da:	bf00      	nop
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20026b40 	.word	0x20026b40
 80077e8:	20026b44 	.word	0x20026b44

080077ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077f2:	f000 f969 	bl	8007ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077f6:	4b15      	ldr	r3, [pc, #84]	@ (800784c <prvCheckForValidListAndQueue+0x60>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d120      	bne.n	8007840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077fe:	4814      	ldr	r0, [pc, #80]	@ (8007850 <prvCheckForValidListAndQueue+0x64>)
 8007800:	f7fd fbc0 	bl	8004f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007804:	4813      	ldr	r0, [pc, #76]	@ (8007854 <prvCheckForValidListAndQueue+0x68>)
 8007806:	f7fd fbbd 	bl	8004f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800780a:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <prvCheckForValidListAndQueue+0x6c>)
 800780c:	4a10      	ldr	r2, [pc, #64]	@ (8007850 <prvCheckForValidListAndQueue+0x64>)
 800780e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007810:	4b12      	ldr	r3, [pc, #72]	@ (800785c <prvCheckForValidListAndQueue+0x70>)
 8007812:	4a10      	ldr	r2, [pc, #64]	@ (8007854 <prvCheckForValidListAndQueue+0x68>)
 8007814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <prvCheckForValidListAndQueue+0x74>)
 800781c:	4a11      	ldr	r2, [pc, #68]	@ (8007864 <prvCheckForValidListAndQueue+0x78>)
 800781e:	2110      	movs	r1, #16
 8007820:	200a      	movs	r0, #10
 8007822:	f7fd fccd 	bl	80051c0 <xQueueGenericCreateStatic>
 8007826:	4603      	mov	r3, r0
 8007828:	4a08      	ldr	r2, [pc, #32]	@ (800784c <prvCheckForValidListAndQueue+0x60>)
 800782a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <prvCheckForValidListAndQueue+0x60>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <prvCheckForValidListAndQueue+0x60>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	490b      	ldr	r1, [pc, #44]	@ (8007868 <prvCheckForValidListAndQueue+0x7c>)
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fbfa 	bl	8006034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007840:	f000 f974 	bl	8007b2c <vPortExitCritical>
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20026b48 	.word	0x20026b48
 8007850:	20026b18 	.word	0x20026b18
 8007854:	20026b2c 	.word	0x20026b2c
 8007858:	20026b40 	.word	0x20026b40
 800785c:	20026b44 	.word	0x20026b44
 8007860:	20026bf4 	.word	0x20026bf4
 8007864:	20026b54 	.word	0x20026b54
 8007868:	08022300 	.word	0x08022300

0800786c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3b04      	subs	r3, #4
 800787c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b04      	subs	r3, #4
 800788a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3b04      	subs	r3, #4
 800789a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800789c:	4a0c      	ldr	r2, [pc, #48]	@ (80078d0 <pxPortInitialiseStack+0x64>)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3b14      	subs	r3, #20
 80078a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f06f 0202 	mvn.w	r2, #2
 80078ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3b20      	subs	r3, #32
 80078c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	080078d5 	.word	0x080078d5

080078d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078de:	4b13      	ldr	r3, [pc, #76]	@ (800792c <prvTaskExitError+0x58>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d00b      	beq.n	8007900 <prvTaskExitError+0x2c>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60fb      	str	r3, [r7, #12]
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	e7fd      	b.n	80078fc <prvTaskExitError+0x28>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60bb      	str	r3, [r7, #8]
}
 8007912:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007914:	bf00      	nop
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0fc      	beq.n	8007916 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000010 	.word	0x20000010

08007930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007930:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <pxCurrentTCBConst2>)
 8007932:	6819      	ldr	r1, [r3, #0]
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f380 8809 	msr	PSP, r0
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	4770      	bx	lr
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst2>:
 8007950:	20026618 	.word	0x20026618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007958:	4808      	ldr	r0, [pc, #32]	@ (800797c <prvPortStartFirstTask+0x24>)
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	6800      	ldr	r0, [r0, #0]
 800795e:	f380 8808 	msr	MSP, r0
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8814 	msr	CONTROL, r0
 800796a:	b662      	cpsie	i
 800796c:	b661      	cpsie	f
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	df00      	svc	0
 8007978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800797a:	bf00      	nop
 800797c:	e000ed08 	.word	0xe000ed08

08007980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007986:	4b47      	ldr	r3, [pc, #284]	@ (8007aa4 <xPortStartScheduler+0x124>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a47      	ldr	r2, [pc, #284]	@ (8007aa8 <xPortStartScheduler+0x128>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10b      	bne.n	80079a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079a8:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa4 <xPortStartScheduler+0x124>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a3f      	ldr	r2, [pc, #252]	@ (8007aac <xPortStartScheduler+0x12c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10b      	bne.n	80079ca <xPortStartScheduler+0x4a>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	613b      	str	r3, [r7, #16]
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	e7fd      	b.n	80079c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079ca:	4b39      	ldr	r3, [pc, #228]	@ (8007ab0 <xPortStartScheduler+0x130>)
 80079cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	22ff      	movs	r2, #255	@ 0xff
 80079da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	4b31      	ldr	r3, [pc, #196]	@ (8007ab4 <xPortStartScheduler+0x134>)
 80079f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079f2:	4b31      	ldr	r3, [pc, #196]	@ (8007ab8 <xPortStartScheduler+0x138>)
 80079f4:	2207      	movs	r2, #7
 80079f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079f8:	e009      	b.n	8007a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079fa:	4b2f      	ldr	r3, [pc, #188]	@ (8007ab8 <xPortStartScheduler+0x138>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a16:	2b80      	cmp	r3, #128	@ 0x80
 8007a18:	d0ef      	beq.n	80079fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a1a:	4b27      	ldr	r3, [pc, #156]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1c3 0307 	rsb	r3, r3, #7
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d00b      	beq.n	8007a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60bb      	str	r3, [r7, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	e7fd      	b.n	8007a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a50:	4a19      	ldr	r2, [pc, #100]	@ (8007ab8 <xPortStartScheduler+0x138>)
 8007a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a5c:	4b17      	ldr	r3, [pc, #92]	@ (8007abc <xPortStartScheduler+0x13c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a16      	ldr	r2, [pc, #88]	@ (8007abc <xPortStartScheduler+0x13c>)
 8007a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a68:	4b14      	ldr	r3, [pc, #80]	@ (8007abc <xPortStartScheduler+0x13c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a13      	ldr	r2, [pc, #76]	@ (8007abc <xPortStartScheduler+0x13c>)
 8007a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a74:	f000 f8da 	bl	8007c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a78:	4b11      	ldr	r3, [pc, #68]	@ (8007ac0 <xPortStartScheduler+0x140>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a7e:	f000 f8f9 	bl	8007c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a82:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <xPortStartScheduler+0x144>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a0f      	ldr	r2, [pc, #60]	@ (8007ac4 <xPortStartScheduler+0x144>)
 8007a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a8e:	f7ff ff63 	bl	8007958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a92:	f7fe ff31 	bl	80068f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a96:	f7ff ff1d 	bl	80078d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	e000ed00 	.word	0xe000ed00
 8007aa8:	410fc271 	.word	0x410fc271
 8007aac:	410fc270 	.word	0x410fc270
 8007ab0:	e000e400 	.word	0xe000e400
 8007ab4:	20026c44 	.word	0x20026c44
 8007ab8:	20026c48 	.word	0x20026c48
 8007abc:	e000ed20 	.word	0xe000ed20
 8007ac0:	20000010 	.word	0x20000010
 8007ac4:	e000ef34 	.word	0xe000ef34

08007ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ae2:	4b10      	ldr	r3, [pc, #64]	@ (8007b24 <vPortEnterCritical+0x5c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8007b24 <vPortEnterCritical+0x5c>)
 8007aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aec:	4b0d      	ldr	r3, [pc, #52]	@ (8007b24 <vPortEnterCritical+0x5c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d110      	bne.n	8007b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007af4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <vPortEnterCritical+0x60>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	603b      	str	r3, [r7, #0]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <vPortEnterCritical+0x4a>
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000010 	.word	0x20000010
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b32:	4b12      	ldr	r3, [pc, #72]	@ (8007b7c <vPortExitCritical+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <vPortExitCritical+0x26>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b52:	4b0a      	ldr	r3, [pc, #40]	@ (8007b7c <vPortExitCritical+0x50>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4a08      	ldr	r2, [pc, #32]	@ (8007b7c <vPortExitCritical+0x50>)
 8007b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b5c:	4b07      	ldr	r3, [pc, #28]	@ (8007b7c <vPortExitCritical+0x50>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <vPortExitCritical+0x44>
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	f383 8811 	msr	BASEPRI, r3
}
 8007b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000010 	.word	0x20000010

08007b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b80:	f3ef 8009 	mrs	r0, PSP
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <pxCurrentTCBConst>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	f01e 0f10 	tst.w	lr, #16
 8007b90:	bf08      	it	eq
 8007b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	6010      	str	r0, [r2, #0]
 8007b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ba4:	f380 8811 	msr	BASEPRI, r0
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f7fe fea2 	bl	80068f8 <vTaskSwitchContext>
 8007bb4:	f04f 0000 	mov.w	r0, #0
 8007bb8:	f380 8811 	msr	BASEPRI, r0
 8007bbc:	bc09      	pop	{r0, r3}
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	6808      	ldr	r0, [r1, #0]
 8007bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc6:	f01e 0f10 	tst.w	lr, #16
 8007bca:	bf08      	it	eq
 8007bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bd0:	f380 8809 	msr	PSP, r0
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst>:
 8007be0:	20026618 	.word	0x20026618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	607b      	str	r3, [r7, #4]
}
 8007c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c02:	f7fe fdbf 	bl	8006784 <xTaskIncrementTick>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <xPortSysTickHandler+0x40>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
}
 8007c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c30:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <vPortSetupTimerInterrupt+0x34>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <vPortSetupTimerInterrupt+0x38>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c68 <vPortSetupTimerInterrupt+0x3c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0a      	ldr	r2, [pc, #40]	@ (8007c6c <vPortSetupTimerInterrupt+0x40>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	099b      	lsrs	r3, r3, #6
 8007c48:	4a09      	ldr	r2, [pc, #36]	@ (8007c70 <vPortSetupTimerInterrupt+0x44>)
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c4e:	4b04      	ldr	r3, [pc, #16]	@ (8007c60 <vPortSetupTimerInterrupt+0x34>)
 8007c50:	2207      	movs	r2, #7
 8007c52:	601a      	str	r2, [r3, #0]
}
 8007c54:	bf00      	nop
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	e000e010 	.word	0xe000e010
 8007c64:	e000e018 	.word	0xe000e018
 8007c68:	20000004 	.word	0x20000004
 8007c6c:	10624dd3 	.word	0x10624dd3
 8007c70:	e000e014 	.word	0xe000e014

08007c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c84 <vPortEnableVFP+0x10>
 8007c78:	6801      	ldr	r1, [r0, #0]
 8007c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c7e:	6001      	str	r1, [r0, #0]
 8007c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c82:	bf00      	nop
 8007c84:	e000ed88 	.word	0xe000ed88

08007c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c8e:	f3ef 8305 	mrs	r3, IPSR
 8007c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d915      	bls.n	8007cc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <vPortValidateInterruptPriority+0x74>)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ca4:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <vPortValidateInterruptPriority+0x78>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	7afa      	ldrb	r2, [r7, #11]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d20b      	bcs.n	8007cc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <vPortValidateInterruptPriority+0x7c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007cce:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <vPortValidateInterruptPriority+0x80>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90b      	bls.n	8007cee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	603b      	str	r3, [r7, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <vPortValidateInterruptPriority+0x62>
	}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	e000e3f0 	.word	0xe000e3f0
 8007d00:	20026c44 	.word	0x20026c44
 8007d04:	e000ed0c 	.word	0xe000ed0c
 8007d08:	20026c48 	.word	0x20026c48

08007d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	@ 0x28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d18:	f7fe fc78 	bl	800660c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8007e90 <pvPortMalloc+0x184>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d24:	f000 f924 	bl	8007f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d28:	4b5a      	ldr	r3, [pc, #360]	@ (8007e94 <pvPortMalloc+0x188>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 8095 	bne.w	8007e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01e      	beq.n	8007d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d015      	beq.n	8007d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f023 0307 	bic.w	r3, r3, #7
 8007d54:	3308      	adds	r3, #8
 8007d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <pvPortMalloc+0x6e>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	617b      	str	r3, [r7, #20]
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d06f      	beq.n	8007e60 <pvPortMalloc+0x154>
 8007d80:	4b45      	ldr	r3, [pc, #276]	@ (8007e98 <pvPortMalloc+0x18c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d86a      	bhi.n	8007e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d8a:	4b44      	ldr	r3, [pc, #272]	@ (8007e9c <pvPortMalloc+0x190>)
 8007d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d8e:	4b43      	ldr	r3, [pc, #268]	@ (8007e9c <pvPortMalloc+0x190>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d94:	e004      	b.n	8007da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d903      	bls.n	8007db2 <pvPortMalloc+0xa6>
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f1      	bne.n	8007d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007db2:	4b37      	ldr	r3, [pc, #220]	@ (8007e90 <pvPortMalloc+0x184>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d051      	beq.n	8007e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4413      	add	r3, r2
 8007dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d920      	bls.n	8007e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <pvPortMalloc+0xfc>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e1a:	69b8      	ldr	r0, [r7, #24]
 8007e1c:	f000 f90a 	bl	8008034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e20:	4b1d      	ldr	r3, [pc, #116]	@ (8007e98 <pvPortMalloc+0x18c>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e98 <pvPortMalloc+0x18c>)
 8007e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <pvPortMalloc+0x18c>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea0 <pvPortMalloc+0x194>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d203      	bcs.n	8007e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e3a:	4b17      	ldr	r3, [pc, #92]	@ (8007e98 <pvPortMalloc+0x18c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ea0 <pvPortMalloc+0x194>)
 8007e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	4b13      	ldr	r3, [pc, #76]	@ (8007e94 <pvPortMalloc+0x188>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e56:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <pvPortMalloc+0x198>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	4a11      	ldr	r2, [pc, #68]	@ (8007ea4 <pvPortMalloc+0x198>)
 8007e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e60:	f7fe fbe2 	bl	8006628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <pvPortMalloc+0x17a>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <pvPortMalloc+0x176>
	return pvReturn;
 8007e86:	69fb      	ldr	r3, [r7, #28]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	@ 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	2002a854 	.word	0x2002a854
 8007e94:	2002a868 	.word	0x2002a868
 8007e98:	2002a858 	.word	0x2002a858
 8007e9c:	2002a84c 	.word	0x2002a84c
 8007ea0:	2002a85c 	.word	0x2002a85c
 8007ea4:	2002a860 	.word	0x2002a860

08007ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d04f      	beq.n	8007f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eba:	2308      	movs	r3, #8
 8007ebc:	425b      	negs	r3, r3
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b25      	ldr	r3, [pc, #148]	@ (8007f64 <vPortFree+0xbc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10b      	bne.n	8007eee <vPortFree+0x46>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60fb      	str	r3, [r7, #12]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <vPortFree+0x66>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60bb      	str	r3, [r7, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	4b14      	ldr	r3, [pc, #80]	@ (8007f64 <vPortFree+0xbc>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01e      	beq.n	8007f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11a      	bne.n	8007f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <vPortFree+0xbc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	401a      	ands	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f34:	f7fe fb6a 	bl	800660c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f68 <vPortFree+0xc0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4413      	add	r3, r2
 8007f42:	4a09      	ldr	r2, [pc, #36]	@ (8007f68 <vPortFree+0xc0>)
 8007f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f000 f874 	bl	8008034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f4c:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <vPortFree+0xc4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	4a06      	ldr	r2, [pc, #24]	@ (8007f6c <vPortFree+0xc4>)
 8007f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f56:	f7fe fb67 	bl	8006628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f5a:	bf00      	nop
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	2002a868 	.word	0x2002a868
 8007f68:	2002a858 	.word	0x2002a858
 8007f6c:	2002a864 	.word	0x2002a864

08007f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f7c:	4b27      	ldr	r3, [pc, #156]	@ (800801c <prvHeapInit+0xac>)
 8007f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800801c <prvHeapInit+0xac>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8008020 <prvHeapInit+0xb0>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fae:	4b1c      	ldr	r3, [pc, #112]	@ (8008020 <prvHeapInit+0xb0>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	4413      	add	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a15      	ldr	r2, [pc, #84]	@ (8008024 <prvHeapInit+0xb4>)
 8007fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fd2:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <prvHeapInit+0xb4>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <prvHeapInit+0xb4>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	1ad2      	subs	r2, r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <prvHeapInit+0xb4>)
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8008028 <prvHeapInit+0xb8>)
 8007ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	4a09      	ldr	r2, [pc, #36]	@ (800802c <prvHeapInit+0xbc>)
 8008006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008008:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <prvHeapInit+0xc0>)
 800800a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20026c4c 	.word	0x20026c4c
 8008020:	2002a84c 	.word	0x2002a84c
 8008024:	2002a854 	.word	0x2002a854
 8008028:	2002a85c 	.word	0x2002a85c
 800802c:	2002a858 	.word	0x2002a858
 8008030:	2002a868 	.word	0x2002a868

08008034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800803c:	4b28      	ldr	r3, [pc, #160]	@ (80080e0 <prvInsertBlockIntoFreeList+0xac>)
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e002      	b.n	8008048 <prvInsertBlockIntoFreeList+0x14>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d8f7      	bhi.n	8008042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d108      	bne.n	8008076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	441a      	add	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	441a      	add	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d118      	bne.n	80080bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b15      	ldr	r3, [pc, #84]	@ (80080e4 <prvInsertBlockIntoFreeList+0xb0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d00d      	beq.n	80080b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	e008      	b.n	80080c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080b2:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <prvInsertBlockIntoFreeList+0xb0>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	e003      	b.n	80080c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d002      	beq.n	80080d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2002a84c 	.word	0x2002a84c
 80080e4:	2002a854 	.word	0x2002a854

080080e8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
}
 80080ec:	bf00      	nop
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80080fa:	f004 fa99 	bl	800c630 <touchgfx_components_init>
    touchgfx_init();
 80080fe:	f004 fa6d 	bl	800c5dc <touchgfx_init>
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
    {
 8008110:	4a04      	ldr	r2, [pc, #16]	@ (8008124 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
    }
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	08022db8 	.word	0x08022db8

08008128 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
    }
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ffe9 	bl	8008108 <_ZN8touchgfx12FontProviderD1Ev>
 8008136:	2104      	movs	r1, #4
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f019 f81c 	bl	8021176 <_ZdlPvj>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8008154:	887b      	ldrh	r3, [r7, #2]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d010      	beq.n	800817c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800815a:	2b02      	cmp	r3, #2
 800815c:	dc13      	bgt.n	8008186 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8008162:	2b01      	cmp	r3, #1
 8008164:	d005      	beq.n	8008172 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8008166:	e00e      	b.n	8008186 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8008168:	f003 f808 	bl	800b17c <_ZN17TypedTextDatabase8getFontsEv>
 800816c:	4603      	mov	r3, r0
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	e00a      	b.n	8008188 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8008172:	f003 f803 	bl	800b17c <_ZN17TypedTextDatabase8getFontsEv>
 8008176:	4603      	mov	r3, r0
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	e005      	b.n	8008188 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800817c:	f002 fffe 	bl	800b17c <_ZN17TypedTextDatabase8getFontsEv>
 8008180:	4603      	mov	r3, r0
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	e000      	b.n	8008188 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8008186:	2300      	movs	r3, #0
    }
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	4a05      	ldr	r2, [pc, #20]	@ (80081b0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ffb1 	bl	8008108 <_ZN8touchgfx12FontProviderD1Ev>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	08022da4 	.word	0x08022da4

080081b4 <_ZN23ApplicationFontProviderD0Ev>:
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffe7 	bl	8008190 <_ZN23ApplicationFontProviderD1Ev>
 80081c2:	2104      	movs	r1, #4
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f018 ffd6 	bl	8021176 <_ZdlPvj>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    {
 80081dc:	4a04      	ldr	r2, [pc, #16]	@ (80081f0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
    }
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	08023070 	.word	0x08023070

080081f4 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
    }
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff ffe9 	bl	80081d4 <_ZN8touchgfx4FontD1Ev>
 8008202:	2114      	movs	r1, #20
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f018 ffb6 	bl	8021176 <_ZdlPvj>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8008226:	2300      	movs	r3, #0
 8008228:	e010      	b.n	800824c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	681c      	ldr	r4, [r3, #0]
 800823a:	f107 030f 	add.w	r3, r7, #15
 800823e:	f107 0210 	add.w	r2, r7, #16
 8008242:	8879      	ldrh	r1, [r7, #2]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	47a0      	blx	r4
 8008248:	6178      	str	r0, [r7, #20]
        return glyph;
 800824a:	697b      	ldr	r3, [r7, #20]
    }
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}

08008254 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	89db      	ldrh	r3, [r3, #14]
    }
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8a1b      	ldrh	r3, [r3, #16]
    }
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	88db      	ldrh	r3, [r3, #6]
    }
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	889b      	ldrh	r3, [r3, #4]
    }
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7a9b      	ldrb	r3, [r3, #10]
 80082c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80082c4:	b2db      	uxtb	r3, r3
    }
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7a9b      	ldrb	r3, [r3, #10]
 80082de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80082e2:	b2db      	uxtb	r3, r3
    }
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
    {
        return false;
 80082f8:	2300      	movs	r3, #0
    }
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	ee07 3a90 	vmov	s15, r3
    }
 8008316:	eeb0 0a67 	vmov.f32	s0, s15
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	4a05      	ldr	r2, [pc, #20]	@ (8008344 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff ff4d 	bl	80081d4 <_ZN8touchgfx4FontD1Ev>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	08023a00 	.word	0x08023a00

08008348 <_ZN8touchgfx9ConstFontD0Ev>:
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ffe7 	bl	8008324 <_ZN8touchgfx9ConstFontD1Ev>
 8008356:	211c      	movs	r1, #28
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f018 ff0c 	bl	8021176 <_ZdlPvj>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	4a05      	ldr	r2, [pc, #20]	@ (8008388 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff ffd3 	bl	8008324 <_ZN8touchgfx9ConstFontD1Ev>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	08022ddc 	.word	0x08022ddc

0800838c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ffe7 	bl	8008368 <_ZN8touchgfx13GeneratedFontD1Ev>
 800839a:	212c      	movs	r1, #44	@ 0x2c
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f018 feea 	bl	8021176 <_ZdlPvj>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
    {
        return instance;
 80083b0:	4b03      	ldr	r3, [pc, #12]	@ (80083c0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80083b2:	681b      	ldr	r3, [r3, #0]
    }
 80083b4:	4618      	mov	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	2002b02c 	.word	0x2002b02c

080083c4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    {
 80083cc:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]
    }
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	08022dcc 	.word	0x08022dcc

080083e4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
    }
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ffe9 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
 80083f2:	2108      	movs	r1, #8
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f018 febe 	bl	8021176 <_ZdlPvj>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	@ 0x38
 8008438:	af0a      	add	r7, sp, #40	@ 0x28
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4611      	mov	r1, r2
 8008440:	461a      	mov	r2, r3
 8008442:	460b      	mov	r3, r1
 8008444:	80fb      	strh	r3, [r7, #6]
 8008446:	4613      	mov	r3, r2
 8008448:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	88b9      	ldrh	r1, [r7, #4]
 800844e:	88fa      	ldrh	r2, [r7, #6]
 8008450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008458:	9307      	str	r3, [sp, #28]
 800845a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800845e:	9306      	str	r3, [sp, #24]
 8008460:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008470:	9303      	str	r3, [sp, #12]
 8008472:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	7f3b      	ldrb	r3, [r7, #28]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	8b3b      	ldrh	r3, [r7, #24]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	460b      	mov	r3, r1
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	f008 ff8a 	bl	801139c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008488:	4a09      	ldr	r2, [pc, #36]	@ (80084b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008492:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008498:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800849e:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084a4:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	08022ddc 	.word	0x08022ddc

080084b4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	3302      	adds	r3, #2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	461a      	mov	r2, r3
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	0adb      	lsrs	r3, r3, #11
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008506:	b480      	push	{r7}
 8008508:	b089      	sub	sp, #36	@ 0x24
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	460b      	mov	r3, r1
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7b1b      	ldrb	r3, [r3, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008522:	2300      	movs	r3, #0
 8008524:	e032      	b.n	800858c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1a      	ldr	r2, [r3, #32]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	7b5b      	ldrb	r3, [r3, #13]
 8008532:	b21b      	sxth	r3, r3
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	b21b      	sxth	r3, r3
 8008538:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800853c:	b219      	sxth	r1, r3
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	7adb      	ldrb	r3, [r3, #11]
 8008542:	b21b      	sxth	r3, r3
 8008544:	430b      	orrs	r3, r1
 8008546:	b21b      	sxth	r3, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7b1b      	ldrb	r3, [r3, #12]
 8008554:	837b      	strh	r3, [r7, #26]
 8008556:	e013      	b.n	8008580 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	897a      	ldrh	r2, [r7, #10]
 800855e:	429a      	cmp	r2, r3
 8008560:	d103      	bne.n	800856a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008568:	e010      	b.n	800858c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	897a      	ldrh	r2, [r7, #10]
 8008570:	429a      	cmp	r2, r3
 8008572:	d309      	bcc.n	8008588 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008574:	8b7b      	ldrh	r3, [r7, #26]
 8008576:	3b01      	subs	r3, #1
 8008578:	837b      	strh	r3, [r7, #26]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	3304      	adds	r3, #4
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	8b7b      	ldrh	r3, [r7, #26]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e8      	bne.n	8008558 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 8008586:	e000      	b.n	800858a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 8008588:	bf00      	nop
        }
    }
    return 0;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3724      	adds	r7, #36	@ 0x24
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
 800859c:	4801      	ldr	r0, [pc, #4]	@ (80085a4 <__tcf_0+0xc>)
 800859e:	f7ff fee3 	bl	8008368 <_ZN8touchgfx13GeneratedFontD1Ev>
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	2002a86c 	.word	0x2002a86c

080085a8 <_Z23getFont_verdana_10_4bppv>:
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	@ 0x38
 80085ac:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80085ae:	4b21      	ldr	r3, [pc, #132]	@ (8008634 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f3bf 8f5b 	dmb	ish
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bf0c      	ite	eq
 80085be:	2301      	moveq	r3, #1
 80085c0:	2300      	movne	r3, #0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d030      	beq.n	800862a <_Z23getFont_verdana_10_4bppv+0x82>
 80085c8:	481a      	ldr	r0, [pc, #104]	@ (8008634 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80085ca:	f018 fdd6 	bl	802117a <__cxa_guard_acquire>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf14      	ite	ne
 80085d4:	2301      	movne	r3, #1
 80085d6:	2300      	moveq	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d025      	beq.n	800862a <_Z23getFont_verdana_10_4bppv+0x82>
 80085de:	2300      	movs	r3, #0
 80085e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80085e2:	2300      	movs	r3, #0
 80085e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085e6:	2300      	movs	r3, #0
 80085e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ea:	233f      	movs	r3, #63	@ 0x3f
 80085ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ee:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <_Z23getFont_verdana_10_4bppv+0x90>)
 80085f0:	9308      	str	r3, [sp, #32]
 80085f2:	4b12      	ldr	r3, [pc, #72]	@ (800863c <_Z23getFont_verdana_10_4bppv+0x94>)
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	2300      	movs	r3, #0
 80085f8:	9306      	str	r3, [sp, #24]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	2301      	movs	r3, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	2304      	movs	r3, #4
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	2300      	movs	r3, #0
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	2300      	movs	r3, #0
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	230a      	movs	r3, #10
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	230a      	movs	r3, #10
 8008614:	2201      	movs	r2, #1
 8008616:	490a      	ldr	r1, [pc, #40]	@ (8008640 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008618:	480a      	ldr	r0, [pc, #40]	@ (8008644 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800861a:	f7ff ff0b 	bl	8008434 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800861e:	480a      	ldr	r0, [pc, #40]	@ (8008648 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8008620:	f018 fdf6 	bl	8021210 <atexit>
 8008624:	4803      	ldr	r0, [pc, #12]	@ (8008634 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008626:	f018 fdb4 	bl	8021192 <__cxa_guard_release>
    return verdana_10_4bpp;
 800862a:	4b06      	ldr	r3, [pc, #24]	@ (8008644 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800862c:	4618      	mov	r0, r3
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	2002a898 	.word	0x2002a898
 8008638:	080240fc 	.word	0x080240fc
 800863c:	08024108 	.word	0x08024108
 8008640:	080240c0 	.word	0x080240c0
 8008644:	2002a86c 	.word	0x2002a86c
 8008648:	08008599 	.word	0x08008599

0800864c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
 8008650:	4801      	ldr	r0, [pc, #4]	@ (8008658 <__tcf_0+0xc>)
 8008652:	f7ff fe89 	bl	8008368 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008656:	bd80      	pop	{r7, pc}
 8008658:	2002a89c 	.word	0x2002a89c

0800865c <_Z23getFont_verdana_20_4bppv>:
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	@ 0x38
 8008660:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008662:	4b21      	ldr	r3, [pc, #132]	@ (80086e8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f3bf 8f5b 	dmb	ish
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d030      	beq.n	80086de <_Z23getFont_verdana_20_4bppv+0x82>
 800867c:	481a      	ldr	r0, [pc, #104]	@ (80086e8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800867e:	f018 fd7c 	bl	802117a <__cxa_guard_acquire>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <_Z23getFont_verdana_20_4bppv+0x82>
 8008692:	2300      	movs	r3, #0
 8008694:	930c      	str	r3, [sp, #48]	@ 0x30
 8008696:	2300      	movs	r3, #0
 8008698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800869a:	2300      	movs	r3, #0
 800869c:	930a      	str	r3, [sp, #40]	@ 0x28
 800869e:	233f      	movs	r3, #63	@ 0x3f
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <_Z23getFont_verdana_20_4bppv+0x90>)
 80086a4:	9308      	str	r3, [sp, #32]
 80086a6:	4b12      	ldr	r3, [pc, #72]	@ (80086f0 <_Z23getFont_verdana_20_4bppv+0x94>)
 80086a8:	9307      	str	r3, [sp, #28]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9306      	str	r3, [sp, #24]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	2301      	movs	r3, #1
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	2304      	movs	r3, #4
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9302      	str	r3, [sp, #8]
 80086be:	2300      	movs	r3, #0
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	2314      	movs	r3, #20
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	2314      	movs	r3, #20
 80086c8:	2201      	movs	r2, #1
 80086ca:	490a      	ldr	r1, [pc, #40]	@ (80086f4 <_Z23getFont_verdana_20_4bppv+0x98>)
 80086cc:	480a      	ldr	r0, [pc, #40]	@ (80086f8 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80086ce:	f7ff feb1 	bl	8008434 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80086d2:	480a      	ldr	r0, [pc, #40]	@ (80086fc <_Z23getFont_verdana_20_4bppv+0xa0>)
 80086d4:	f018 fd9c 	bl	8021210 <atexit>
 80086d8:	4803      	ldr	r0, [pc, #12]	@ (80086e8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80086da:	f018 fd5a 	bl	8021192 <__cxa_guard_release>
    return verdana_20_4bpp;
 80086de:	4b06      	ldr	r3, [pc, #24]	@ (80086f8 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2002a8c8 	.word	0x2002a8c8
 80086ec:	08024100 	.word	0x08024100
 80086f0:	0802410c 	.word	0x0802410c
 80086f4:	080240d0 	.word	0x080240d0
 80086f8:	2002a89c 	.word	0x2002a89c
 80086fc:	0800864d 	.word	0x0800864d

08008700 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
 8008704:	4801      	ldr	r0, [pc, #4]	@ (800870c <__tcf_0+0xc>)
 8008706:	f7ff fe2f 	bl	8008368 <_ZN8touchgfx13GeneratedFontD1Ev>
 800870a:	bd80      	pop	{r7, pc}
 800870c:	2002a8cc 	.word	0x2002a8cc

08008710 <_Z23getFont_verdana_40_4bppv>:
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08e      	sub	sp, #56	@ 0x38
 8008714:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008716:	4b21      	ldr	r3, [pc, #132]	@ (800879c <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f3bf 8f5b 	dmb	ish
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	bf0c      	ite	eq
 8008726:	2301      	moveq	r3, #1
 8008728:	2300      	movne	r3, #0
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d030      	beq.n	8008792 <_Z23getFont_verdana_40_4bppv+0x82>
 8008730:	481a      	ldr	r0, [pc, #104]	@ (800879c <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008732:	f018 fd22 	bl	802117a <__cxa_guard_acquire>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	bf14      	ite	ne
 800873c:	2301      	movne	r3, #1
 800873e:	2300      	moveq	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d025      	beq.n	8008792 <_Z23getFont_verdana_40_4bppv+0x82>
 8008746:	2300      	movs	r3, #0
 8008748:	930c      	str	r3, [sp, #48]	@ 0x30
 800874a:	2300      	movs	r3, #0
 800874c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874e:	2300      	movs	r3, #0
 8008750:	930a      	str	r3, [sp, #40]	@ 0x28
 8008752:	233f      	movs	r3, #63	@ 0x3f
 8008754:	9309      	str	r3, [sp, #36]	@ 0x24
 8008756:	4b12      	ldr	r3, [pc, #72]	@ (80087a0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	2300      	movs	r3, #0
 8008760:	9306      	str	r3, [sp, #24]
 8008762:	2300      	movs	r3, #0
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	2301      	movs	r3, #1
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	2304      	movs	r3, #4
 800876c:	9303      	str	r3, [sp, #12]
 800876e:	2300      	movs	r3, #0
 8008770:	9302      	str	r3, [sp, #8]
 8008772:	2300      	movs	r3, #0
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	2328      	movs	r3, #40	@ 0x28
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2328      	movs	r3, #40	@ 0x28
 800877c:	2202      	movs	r2, #2
 800877e:	490a      	ldr	r1, [pc, #40]	@ (80087a8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008780:	480a      	ldr	r0, [pc, #40]	@ (80087ac <_Z23getFont_verdana_40_4bppv+0x9c>)
 8008782:	f7ff fe57 	bl	8008434 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008786:	480a      	ldr	r0, [pc, #40]	@ (80087b0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8008788:	f018 fd42 	bl	8021210 <atexit>
 800878c:	4803      	ldr	r0, [pc, #12]	@ (800879c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800878e:	f018 fd00 	bl	8021192 <__cxa_guard_release>
    return verdana_40_4bpp;
 8008792:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2002a8f8 	.word	0x2002a8f8
 80087a0:	08024104 	.word	0x08024104
 80087a4:	08024110 	.word	0x08024110
 80087a8:	080240e0 	.word	0x080240e0
 80087ac:	2002a8cc 	.word	0x2002a8cc
 80087b0:	08008701 	.word	0x08008701

080087b4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
    {
    }
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
    {
    }
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    {
 8008858:	4a04      	ldr	r2, [pc, #16]	@ (800886c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
    }
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	08022f64 	.word	0x08022f64

08008870 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
    }
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff ffe9 	bl	8008850 <_ZN8touchgfx15UIEventListenerD1Ev>
 800887e:	2104      	movs	r1, #4
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f018 fc78 	bl	8021176 <_ZdlPvj>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
    {
    }
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80088ce:	6810      	ldr	r0, [r2, #0]
 80088d0:	6851      	ldr	r1, [r2, #4]
 80088d2:	c303      	stmia	r3!, {r0, r1}
    }
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4618      	mov	r0, r3
 80088ee:	f007 fb1a 	bl	800ff26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
    {
 8008904:	4a04      	ldr	r2, [pc, #16]	@ (8008918 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
    }
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	08022f4c 	.word	0x08022f4c

0800891c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ffe9 	bl	80088fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800892a:	2104      	movs	r1, #4
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f018 fc22 	bl	8021176 <_ZdlPvj>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8008940:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800894c:	4b08      	ldr	r3, [pc, #32]	@ (8008970 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8008956:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895c:	e002      	b.n	8008964 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800895e:	4b04      	ldr	r3, [pc, #16]	@ (8008970 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
    }
 8008964:	4618      	mov	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	2002b02c 	.word	0x2002b02c

08008974 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800897c:	4a07      	ldr	r2, [pc, #28]	@ (800899c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	721a      	strb	r2, [r3, #8]
    {
    }
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	08022f28 	.word	0x08022f28

080089a0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
    {
 80089a8:	4a04      	ldr	r2, [pc, #16]	@ (80089bc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
    }
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	08022f28 	.word	0x08022f28

080089c0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
    }
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff ffe9 	bl	80089a0 <_ZN8touchgfx10TransitionD1Ev>
 80089ce:	210c      	movs	r1, #12
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f018 fbd0 	bl	8021176 <_ZdlPvj>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
    {
    }
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
    {
    }
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
    {
    }
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8008a24:	f007 fa5a 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	323c      	adds	r2, #60	@ 0x3c
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	4790      	blx	r2
    }
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	605a      	str	r2, [r3, #4]
    }
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	4a05      	ldr	r2, [pc, #20]	@ (8008a78 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff fef1 	bl	8008850 <_ZN8touchgfx15UIEventListenerD1Ev>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	08023944 	.word	0x08023944

08008a7c <_ZN8touchgfx11ApplicationD0Ev>:
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff ffe7 	bl	8008a58 <_ZN8touchgfx11ApplicationD1Ev>
 8008a8a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f018 fb71 	bl	8021176 <_ZdlPvj>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f007 fad8 	bl	8010060 <_ZN8touchgfx11ApplicationC1Ev>
 8008ab0:	4a09      	ldr	r2, [pc, #36]	@ (8008ad8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a04      	ldr	r2, [pc, #16]	@ (8008adc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8008aca:	6013      	str	r3, [r2, #0]
    }
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08022ed4 	.word	0x08022ed4
 8008adc:	2002b078 	.word	0x2002b078

08008ae0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f804 	bl	8008af6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00f      	beq.n	8008b28 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00e      	beq.n	8008b4c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
    }
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	4a05      	ldr	r2, [pc, #20]	@ (8008b90 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ff69 	bl	8008a58 <_ZN8touchgfx11ApplicationD1Ev>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	08022ed4 	.word	0x08022ed4

08008b94 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff ffe7 	bl	8008b70 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008ba2:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f018 fae5 	bl	8021176 <_ZdlPvj>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	4a05      	ldr	r2, [pc, #20]	@ (8008bd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fe97 	bl	80088fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	08022ebc 	.word	0x08022ebc

08008bdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ffe7 	bl	8008bb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008bea:	2110      	movs	r1, #16
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f018 fac2 	bl	8021176 <_ZdlPvj>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	4a08      	ldr	r2, [pc, #32]	@ (8008c28 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ffd1 	bl	8008bb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff ffa9 	bl	8008b70 <_ZN8touchgfx14MVPApplicationD1Ev>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	08022e68 	.word	0x08022e68

08008c2c <_ZN23FrontendApplicationBaseD0Ev>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ffe1 	bl	8008bfc <_ZN23FrontendApplicationBaseD1Ev>
 8008c3a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f018 fa99 	bl	8021176 <_ZdlPvj>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
    {
        gotologinScreenNoTransition();
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f888 	bl	8008d6c <_ZN23FrontendApplicationBase27gotologinScreenNoTransitionEv>
    }
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	721a      	strb	r2, [r3, #8]
    }
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	605a      	str	r2, [r3, #4]
    }
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/login_screen/loginView.hpp>
#include <gui/login_screen/loginPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fef8 	bl	8008aa0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8008cb0:	4a19      	ldr	r2, [pc, #100]	@ (8008d18 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f8ab 	bl	8008e18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8008cd2:	f7ff fb6b 	bl	80083ac <_ZN8touchgfx3HAL11getInstanceEv>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	3208      	adds	r2, #8
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f002 f9d1 	bl	800b08c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8008cea:	f7ff fe27 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f010 fea8 	bl	8019a46 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8008cf6:	f7ff fe21 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f010 ff1d 	bl	8019b3c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8008d02:	f7ff fe1b 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f010 ff23 	bl	8019b54 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	08022e68 	.word	0x08022e68

08008d1c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ffe9 	bl	8008d1c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	3208      	adds	r2, #8
 8008d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <_ZN23FrontendApplicationBase27gotologinScreenNoTransitionEv>:
 */

// login

void FrontendApplicationBase::gotologinScreenNoTransition()
{
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b089      	sub	sp, #36	@ 0x24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotologinScreenNoTransitionImpl);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8008d7a:	4b10      	ldr	r3, [pc, #64]	@ (8008dbc <_ZN23FrontendApplicationBase27gotologinScreenNoTransitionEv+0x50>)
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	f107 0008 	add.w	r0, r7, #8
 8008d86:	f107 0318 	add.w	r3, r7, #24
 8008d8a:	cb0c      	ldmia	r3, {r2, r3}
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	f000 f85f 	bl	8008e50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4619      	mov	r1, r3
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f7ff ffcb 	bl	8008d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff ff08 	bl	8008bb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8008db4:	bf00      	nop
 8008db6:	3724      	adds	r7, #36	@ 0x24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd90      	pop	{r4, r7, pc}
 8008dbc:	08008dc1 	.word	0x08008dc1

08008dc0 <_ZN23FrontendApplicationBase31gotologinScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotologinScreenNoTransitionImpl()
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<loginView, loginPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	4b04      	ldr	r3, [pc, #16]	@ (8008df0 <_ZN23FrontendApplicationBase31gotologinScreenNoTransitionImplEv+0x30>)
 8008de0:	4804      	ldr	r0, [pc, #16]	@ (8008df4 <_ZN23FrontendApplicationBase31gotologinScreenNoTransitionImplEv+0x34>)
 8008de2:	f000 f867 	bl	8008eb4 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	2002b06c 	.word	0x2002b06c
 8008df4:	2002b068 	.word	0x2002b068

08008df8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	4a04      	ldr	r2, [pc, #16]	@ (8008e14 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	08022f4c 	.word	0x08022f4c

08008e18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff ffe8 	bl	8008df8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008e28:	4a08      	ldr	r2, [pc, #32]	@ (8008e4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	609a      	str	r2, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	60da      	str	r2, [r3, #12]
    {
    }
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08022ebc 	.word	0x08022ebc

08008e50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff ffc8 	bl	8008df8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	605a      	str	r2, [r3, #4]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3308      	adds	r3, #8
 8008e78:	463a      	mov	r2, r7
 8008e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e7e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	08022ebc 	.word	0x08022ebc

08008e90 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fd6a 	bl	8008974 <_ZN8touchgfx10TransitionC1Ev>
 8008ea0:	4a03      	ldr	r2, [pc, #12]	@ (8008eb0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	08022e44 	.word	0x08022e44

08008eb4 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b08f      	sub	sp, #60	@ 0x3c
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3320      	adds	r3, #32
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f5b3 7f7e 	cmp.w	r3, #1016	@ 0x3f8
 8008eda:	d205      	bcs.n	8008ee8 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8008edc:	4b7d      	ldr	r3, [pc, #500]	@ (80090d4 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8008ede:	4a7e      	ldr	r2, [pc, #504]	@ (80090d8 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008ee0:	21a3      	movs	r1, #163	@ 0xa3
 8008ee2:	487e      	ldr	r0, [pc, #504]	@ (80090dc <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008ee4:	f018 f976 	bl	80211d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3320      	adds	r3, #32
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4798      	blx	r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b0f      	cmp	r3, #15
 8008efe:	d805      	bhi.n	8008f0c <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8008f00:	4b77      	ldr	r3, [pc, #476]	@ (80090e0 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008f02:	4a75      	ldr	r2, [pc, #468]	@ (80090d8 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008f04:	21a4      	movs	r1, #164	@ 0xa4
 8008f06:	4875      	ldr	r0, [pc, #468]	@ (80090dc <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008f08:	f018 f964 	bl	80211d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3320      	adds	r3, #32
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b0b      	cmp	r3, #11
 8008f22:	d805      	bhi.n	8008f30 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8008f24:	4b6f      	ldr	r3, [pc, #444]	@ (80090e4 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008f26:	4a6c      	ldr	r2, [pc, #432]	@ (80090d8 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008f28:	21a5      	movs	r1, #165	@ 0xa5
 8008f2a:	486c      	ldr	r0, [pc, #432]	@ (80090dc <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008f2c:	f018 f952 	bl	80211d4 <__assert_func>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008f3c:	f006 ffce 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 8008f40:	4603      	mov	r3, r0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fccc 	bl	80088e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	330c      	adds	r3, #12
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4798      	blx	r3
    if (*currentTrans)
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4610      	mov	r0, r2
 8008f78:	4798      	blx	r3
    if (*currentScreen)
 8008f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
    if (*currentPresenter)
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d008      	beq.n	8008fae <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4610      	mov	r0, r2
 8008fac:	4798      	blx	r3
    if (*currentScreen)
 8008fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8008fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4798      	blx	r3
    if (*currentPresenter)
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
}
 8008fe0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f87d 	bl	80090e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	200c      	movs	r0, #12
 8008ff4:	f7ff fbde 	bl	80087b4 <_ZnwjPv>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff ff48 	bl	8008e90 <_ZN8touchgfx12NoTransitionC1Ev>
 8009000:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2100      	movs	r1, #0
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f880 	bl	800910e <_ZN8touchgfx17AbstractPartition2atI9loginViewEERT_t>
 800900e:	4603      	mov	r3, r0
 8009010:	4619      	mov	r1, r3
 8009012:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 8009016:	f7ff fbcd 	bl	80087b4 <_ZnwjPv>
 800901a:	4604      	mov	r4, r0
 800901c:	4620      	mov	r0, r4
 800901e:	f002 fa23 	bl	800b468 <_ZN9loginViewC1Ev>
 8009022:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f882 	bl	8009134 <_ZN8touchgfx17AbstractPartition2atI14loginPresenterEERT_t>
 8009030:	4603      	mov	r3, r0
 8009032:	4619      	mov	r1, r3
 8009034:	2010      	movs	r0, #16
 8009036:	f7ff fbbd 	bl	80087b4 <_ZnwjPv>
 800903a:	4604      	mov	r4, r0
 800903c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800903e:	4620      	mov	r0, r4
 8009040:	f002 f9ba 	bl	800b3b8 <_ZN14loginPresenterC1ER9loginView>
 8009044:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800904a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009050:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009056:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8009058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	3304      	adds	r3, #4
 8009062:	e000      	b.n	8009066 <_ZN8touchgfx14makeTransitionI9loginView14loginPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8009064:	2300      	movs	r3, #0
 8009066:	4619      	mov	r1, r3
 8009068:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800906a:	f7ff fd73 	bl	8008b54 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009070:	3304      	adds	r3, #4
 8009072:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fe02 	bl	8008c7e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f86b 	bl	800915a <_ZN8touchgfx4ViewI14loginPresenterE4bindERS1_>
 8009084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908a:	61bb      	str	r3, [r7, #24]
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69f8      	ldr	r0, [r7, #28]
 800909a:	4798      	blx	r3
    newPresenter->activate();
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69b8      	ldr	r0, [r7, #24]
 80090a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80090a6:	6979      	ldr	r1, [r7, #20]
 80090a8:	69f8      	ldr	r0, [r7, #28]
 80090aa:	f008 fd15 	bl	8011ad8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3310      	adds	r3, #16
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	4798      	blx	r3
    newTransition->invalidate();
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3314      	adds	r3, #20
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	4798      	blx	r3
}
 80090c6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80090c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	373c      	adds	r7, #60	@ 0x3c
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd90      	pop	{r4, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	08022308 	.word	0x08022308
 80090d8:	08022398 	.word	0x08022398
 80090dc:	08022468 	.word	0x08022468
 80090e0:	080224ac 	.word	0x080224ac
 80090e4:	08022550 	.word	0x08022550

080090e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3324      	adds	r3, #36	@ 0x24
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	887a      	ldrh	r2, [r7, #2]
 80090fe:	4611      	mov	r1, r2
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
 8009104:	4603      	mov	r3, r0
    }
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <_ZN8touchgfx17AbstractPartition2atI9loginViewEERT_t>:
    T& at(const uint16_t index)
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3324      	adds	r3, #36	@ 0x24
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	887a      	ldrh	r2, [r7, #2]
 8009124:	4611      	mov	r1, r2
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
 800912a:	4603      	mov	r3, r0
    }
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZN8touchgfx17AbstractPartition2atI14loginPresenterEERT_t>:
    T& at(const uint16_t index)
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3324      	adds	r3, #36	@ 0x24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	887a      	ldrh	r2, [r7, #2]
 800914a:	4611      	mov	r1, r2
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
    }
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <_ZN8touchgfx4ViewI14loginPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
	...

08009178 <_ZN8touchgfx12NoTransitionD1Ev>:
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	4a05      	ldr	r2, [pc, #20]	@ (8009198 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fc09 	bl	80089a0 <_ZN8touchgfx10TransitionD1Ev>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	08022e44 	.word	0x08022e44

0800919c <_ZN8touchgfx12NoTransitionD0Ev>:
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff ffe7 	bl	8009178 <_ZN8touchgfx12NoTransitionD1Ev>
 80091aa:	210c      	movs	r1, #12
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f017 ffe2 	bl	8021176 <_ZdlPvj>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68d2      	ldr	r2, [r2, #12]
 80091cc:	1052      	asrs	r2, r2, #1
 80091ce:	1899      	adds	r1, r3, r2
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	e00a      	b.n	80091f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68d2      	ldr	r2, [r2, #12]
 80091ea:	1052      	asrs	r2, r2, #1
 80091ec:	4413      	add	r3, r2
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6892      	ldr	r2, [r2, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4608      	mov	r0, r1
 80091fa:	4798      	blx	r3
    }
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d010      	beq.n	8009236 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d107      	bne.n	800922c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800922c:	2300      	movs	r3, #0
 800922e:	2b01      	cmp	r3, #1
 8009230:	d001      	beq.n	8009236 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8009236:	2300      	movs	r3, #0
    }
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
        : color(col)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	601a      	str	r2, [r3, #0]
    {
    }
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	805a      	strh	r2, [r3, #2]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	809a      	strh	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	80da      	strh	r2, [r3, #6]
    {
    }
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	887a      	ldrh	r2, [r7, #2]
 80092a0:	801a      	strh	r2, [r3, #0]
    {
    }
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80092b8:	4a14      	ldr	r2, [pc, #80]	@ (800930c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
        : rect(),
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ffcd 	bl	8009262 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	330c      	adds	r3, #12
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff ffc8 	bl	8009262 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	08023998 	.word	0x08023998

08009310 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
    {
 8009318:	4a04      	ldr	r2, [pc, #16]	@ (800932c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	601a      	str	r2, [r3, #0]
    }
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	08023998 	.word	0x08023998

08009330 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
    }
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ffe9 	bl	8009310 <_ZN8touchgfx8DrawableD1Ev>
 800933e:	2128      	movs	r1, #40	@ 0x28
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f017 ff18 	bl	8021176 <_ZdlPvj>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3314      	adds	r3, #20
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
        }
    }
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800937e:	2300      	movs	r3, #0
    }
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	817b      	strh	r3, [r7, #10]
 800939e:	460b      	mov	r3, r1
 80093a0:	813b      	strh	r3, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80093a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80093aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80093ae:	4619      	mov	r1, r3
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f82a 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80093b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80093ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f87e 	bl	80094c2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	887a      	ldrh	r2, [r7, #2]
 80093de:	809a      	strh	r2, [r3, #4]
    }
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	887a      	ldrh	r2, [r7, #2]
 80093fc:	80da      	strh	r2, [r3, #6]
    }
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	807b      	strh	r3, [r7, #2]
 8009416:	4613      	mov	r3, r2
 8009418:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3330      	adds	r3, #48	@ 0x30
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009426:	4611      	mov	r1, r2
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
        setY(y);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3334      	adds	r3, #52	@ 0x34
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009438:	4611      	mov	r1, r2
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
    }
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	887a      	ldrh	r2, [r7, #2]
 8009456:	811a      	strh	r2, [r3, #8]
    }
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	887a      	ldrh	r2, [r7, #2]
 8009474:	815a      	strh	r2, [r3, #10]
    }
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
    {
    }
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	807b      	strh	r3, [r7, #2]
 80094ce:	4613      	mov	r3, r2
 80094d0:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3338      	adds	r3, #56	@ 0x38
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80094de:	4611      	mov	r1, r2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
        setHeight(height);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	333c      	adds	r3, #60	@ 0x3c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80094f0:	4611      	mov	r1, r2
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
    }
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    {
    }
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8009550:	4618      	mov	r0, r3
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	807b      	strh	r3, [r7, #2]
 8009568:	4613      	mov	r3, r2
 800956a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3354      	adds	r3, #84	@ 0x54
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	8879      	ldrh	r1, [r7, #2]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800957c:	b292      	uxth	r2, r2
 800957e:	1a8a      	subs	r2, r1, r2
 8009580:	b292      	uxth	r2, r2
 8009582:	b210      	sxth	r0, r2
 8009584:	8839      	ldrh	r1, [r7, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800958c:	b292      	uxth	r2, r2
 800958e:	1a8a      	subs	r2, r1, r2
 8009590:	b292      	uxth	r2, r2
 8009592:	b212      	sxth	r2, r2
 8009594:	4601      	mov	r1, r0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
    }
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095b0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095b8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095c0:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff ffe1 	bl	80095a2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	601a      	str	r2, [r3, #0]
    }
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	817b      	strh	r3, [r7, #10]
 8009604:	4613      	mov	r3, r2
 8009606:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff ff8c 	bl	8009528 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff ff92 	bl	8009542 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
        }
    }
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	4a05      	ldr	r2, [pc, #20]	@ (800965c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fe5f 	bl	8009310 <_ZN8touchgfx8DrawableD1Ev>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	08023530 	.word	0x08023530

08009660 <_ZN8touchgfx9ContainerD0Ev>:
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff ffe7 	bl	800963c <_ZN8touchgfx9ContainerD1Ev>
 800966e:	212c      	movs	r1, #44	@ 0x2c
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f017 fd80 	bl	8021176 <_ZdlPvj>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
    {
 8009688:	4a06      	ldr	r2, [pc, #24]	@ (80096a4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	601a      	str	r2, [r3, #0]
    }
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff ffd2 	bl	800963c <_ZN8touchgfx9ContainerD1Ev>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08023aa4 	.word	0x08023aa4

080096a8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
    }
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff ffe5 	bl	8009680 <_ZN8touchgfx6ScreenD1Ev>
 80096b6:	213c      	movs	r1, #60	@ 0x3c
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f017 fd5c 	bl	8021176 <_ZdlPvj>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
    {
    }
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
    {
    }
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
    {
    }
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
    {
    }
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3304      	adds	r3, #4
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f003 fb5f 	bl	800ce04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff fda8 	bl	80092b0 <_ZN8touchgfx8DrawableC1Ev>
 8009760:	4a03      	ldr	r2, [pc, #12]	@ (8009770 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	08022ff4 	.word	0x08022ff4

08009774 <_ZN8touchgfx6WidgetD1Ev>:
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	4a05      	ldr	r2, [pc, #20]	@ (8009794 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fdc3 	bl	8009310 <_ZN8touchgfx8DrawableD1Ev>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08022ff4 	.word	0x08022ff4

08009798 <_ZN8touchgfx6WidgetD0Ev>:
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff ffe7 	bl	8009774 <_ZN8touchgfx6WidgetD1Ev>
 80097a6:	2128      	movs	r1, #40	@ 0x28
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f017 fce4 	bl	8021176 <_ZdlPvj>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4618      	mov	r0, r3
 80097c4:	2326      	movs	r3, #38	@ 0x26
 80097c6:	461a      	mov	r2, r3
 80097c8:	2100      	movs	r1, #0
 80097ca:	f017 ff0a 	bl	80215e2 <memset>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ffbd 	bl	8009750 <_ZN8touchgfx6WidgetC1Ev>
 80097d6:	4a09      	ldr	r2, [pc, #36]	@ (80097fc <_ZN8touchgfx3BoxC1Ev+0x44>)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	22ff      	movs	r2, #255	@ 0xff
 80097e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3328      	adds	r3, #40	@ 0x28
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fd2a 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	0802379c 	.word	0x0802379c

08009800 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8009828:	4a06      	ldr	r2, [pc, #24]	@ (8009844 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	887a      	ldrh	r2, [r7, #2]
 8009832:	809a      	strh	r2, [r3, #4]
    }
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	08022dcc 	.word	0x08022dcc

08009848 <_ZN8touchgfx14AbstractButtonD1Ev>:
/**
 * This class defines an abstract interface for button-like elements. A button is a clickable
 * element that has two states: pressed and released. A button also has an action that
 * is executed when the button goes from state pressed to state released.
 */
class AbstractButton : public Widget
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	4a05      	ldr	r2, [pc, #20]	@ (8009868 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff ff8b 	bl	8009774 <_ZN8touchgfx6WidgetD1Ev>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	0802372c 	.word	0x0802372c

0800986c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff ffe7 	bl	8009848 <_ZN8touchgfx14AbstractButtonD1Ev>
 800987a:	2130      	movs	r1, #48	@ 0x30
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f017 fc7a 	bl	8021176 <_ZdlPvj>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889a      	ldrh	r2, [r3, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	809a      	strh	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3334      	adds	r3, #52	@ 0x34
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ffe5 	bl	800988c <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f820 	bl	8009908 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b08b      	sub	sp, #44	@ 0x2c
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3334      	adds	r3, #52	@ 0x34
 8009914:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId < numberOfTypedTexts;
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	889a      	ldrh	r2, [r3, #4]
 800991a:	4b46      	ldr	r3, [pc, #280]	@ (8009a34 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	bf34      	ite	cc
 8009922:	2301      	movcc	r3, #1
 8009924:	2300      	movcs	r3, #0
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d07a      	beq.n	8009a22 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11a>
        {
            const Font* f = typedText.getFont();
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3334      	adds	r3, #52	@ 0x34
 8009930:	613b      	str	r3, [r7, #16]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009932:	4b41      	ldr	r3, [pc, #260]	@ (8009a38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 800993a:	4b40      	ldr	r3, [pc, #256]	@ (8009a3c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800993c:	4a40      	ldr	r2, [pc, #256]	@ (8009a40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800993e:	216c      	movs	r1, #108	@ 0x6c
 8009940:	4840      	ldr	r0, [pc, #256]	@ (8009a44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 8009942:	f017 fc47 	bl	80211d4 <__assert_func>
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	889a      	ldrh	r2, [r3, #4]
 800994e:	4b39      	ldr	r3, [pc, #228]	@ (8009a34 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	bf34      	ite	cc
 8009956:	2301      	movcc	r3, #1
 8009958:	2300      	movcs	r3, #0
 800995a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 8009960:	4b39      	ldr	r3, [pc, #228]	@ (8009a48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 8009962:	4a37      	ldr	r2, [pc, #220]	@ (8009a40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8009964:	216d      	movs	r1, #109	@ 0x6d
 8009966:	4837      	ldr	r0, [pc, #220]	@ (8009a44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 8009968:	f017 fc34 	bl	80211d4 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800996c:	4b37      	ldr	r3, [pc, #220]	@ (8009a4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b31      	ldr	r3, [pc, #196]	@ (8009a38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	889b      	ldrh	r3, [r3, #4]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	440b      	add	r3, r1
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3334      	adds	r3, #52	@ 0x34
 800998a:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800998c:	4b2a      	ldr	r3, [pc, #168]	@ (8009a38 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>
 8009994:	4b29      	ldr	r3, [pc, #164]	@ (8009a3c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8009996:	4a2e      	ldr	r2, [pc, #184]	@ (8009a50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 8009998:	2160      	movs	r1, #96	@ 0x60
 800999a:	482a      	ldr	r0, [pc, #168]	@ (8009a44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800999c:	f017 fc1a 	bl	80211d4 <__assert_func>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	889a      	ldrh	r2, [r3, #4]
 80099a8:	4b22      	ldr	r3, [pc, #136]	@ (8009a34 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	bf34      	ite	cc
 80099b0:	2301      	movcc	r3, #1
 80099b2:	2300      	movcs	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xbe>
 80099ba:	4b23      	ldr	r3, [pc, #140]	@ (8009a48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 80099bc:	4a24      	ldr	r2, [pc, #144]	@ (8009a50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 80099be:	2161      	movs	r1, #97	@ 0x61
 80099c0:	4820      	ldr	r0, [pc, #128]	@ (8009a44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 80099c2:	f017 fc07 	bl	80211d4 <__assert_func>
        return texts->getText(typedTextId);
 80099c6:	4b23      	ldr	r3, [pc, #140]	@ (8009a54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	889b      	ldrh	r3, [r3, #4]
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f001 fbb1 	bl	800b138 <_ZNK8touchgfx5Texts7getTextEt>
 80099d6:	4603      	mov	r3, r0
 80099d8:	bf00      	nop
 80099da:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3338      	adds	r3, #56	@ 0x38
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099e6:	4798      	blx	r3
 80099e8:	4603      	mov	r3, r0
 80099ea:	461c      	mov	r4, r3
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3348      	adds	r3, #72	@ 0x48
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6a39      	ldr	r1, [r7, #32]
 80099f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099f8:	4798      	blx	r3
 80099fa:	4603      	mov	r3, r0
 80099fc:	fb14 f303 	smulbb	r3, r4, r3
 8009a00:	b29c      	uxth	r4, r3
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3324      	adds	r3, #36	@ 0x24
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6a39      	ldr	r1, [r7, #32]
 8009a0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a0e:	4798      	blx	r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4423      	add	r3, r4
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b21a      	sxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8009a20:	e003      	b.n	8009a2a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x122>
            textHeightIncludingSpacing = 0;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    }
 8009a2a:	bf00      	nop
 8009a2c:	372c      	adds	r7, #44	@ 0x2c
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd90      	pop	{r4, r7, pc}
 8009a32:	bf00      	nop
 8009a34:	2002b080 	.word	0x2002b080
 8009a38:	2002b07c 	.word	0x2002b07c
 8009a3c:	080225f4 	.word	0x080225f4
 8009a40:	08022638 	.word	0x08022638
 8009a44:	08022674 	.word	0x08022674
 8009a48:	080226b8 	.word	0x080226b8
 8009a4c:	2002b084 	.word	0x2002b084
 8009a50:	080226f8 	.word	0x080226f8
 8009a54:	2002b088 	.word	0x2002b088

08009a58 <_ZN8touchgfx4ViewI14loginPresenterED1Ev>:
class View : public Screen
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	4a05      	ldr	r2, [pc, #20]	@ (8009a78 <_ZN8touchgfx4ViewI14loginPresenterED1Ev+0x20>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fe09 	bl	8009680 <_ZN8touchgfx6ScreenD1Ev>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	08022fc0 	.word	0x08022fc0

08009a7c <_ZN8touchgfx4ViewI14loginPresenterED0Ev>:
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff ffe7 	bl	8009a58 <_ZN8touchgfx4ViewI14loginPresenterED1Ev>
 8009a8a:	2140      	movs	r1, #64	@ 0x40
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f017 fb72 	bl	8021176 <_ZdlPvj>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	4a05      	ldr	r2, [pc, #20]	@ (8009abc <_ZN8touchgfx3BoxD1Ev+0x20>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff fe61 	bl	8009774 <_ZN8touchgfx6WidgetD1Ev>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	0802379c 	.word	0x0802379c

08009ac0 <_ZN8touchgfx3BoxD0Ev>:
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ffe7 	bl	8009a9c <_ZN8touchgfx3BoxD1Ev>
 8009ace:	212c      	movs	r1, #44	@ 0x2c
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f017 fb50 	bl	8021176 <_ZdlPvj>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	4a05      	ldr	r2, [pc, #20]	@ (8009b00 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fea9 	bl	8009848 <_ZN8touchgfx14AbstractButtonD1Ev>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	08023804 	.word	0x08023804

08009b04 <_ZN8touchgfx6ButtonD0Ev>:
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff ffe7 	bl	8009ae0 <_ZN8touchgfx6ButtonD1Ev>
 8009b12:	2134      	movs	r1, #52	@ 0x34
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f017 fb2e 	bl	8021176 <_ZdlPvj>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	4a08      	ldr	r2, [pc, #32]	@ (8009b50 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3334      	adds	r3, #52	@ 0x34
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fc44 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff ffce 	bl	8009ae0 <_ZN8touchgfx6ButtonD1Ev>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	08023878 	.word	0x08023878

08009b54 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ffe1 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8009b62:	2148      	movs	r1, #72	@ 0x48
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f017 fb06 	bl	8021176 <_ZdlPvj>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZN13loginViewBaseC1Ev>:
#include <gui_generated/login_screen/loginViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

loginViewBase::loginViewBase()
 8009b74:	b590      	push	{r4, r7, lr}
 8009b76:	b0e3      	sub	sp, #396	@ 0x18c
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009b7e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009b82:	6018      	str	r0, [r3, #0]
 8009b84:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009b88:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f001 f918 	bl	800adc4 <_ZN8touchgfx4ViewI14loginPresenterEC1Ev>
 8009b94:	4aec      	ldr	r2, [pc, #944]	@ (8009f48 <_ZN13loginViewBaseC1Ev+0x3d4>)
 8009b96:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009b9a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009ba6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3340      	adds	r3, #64	@ 0x40
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fe02 	bl	80097b8 <_ZN8touchgfx3BoxC1Ev>
 8009bb4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009bb8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	336c      	adds	r3, #108	@ 0x6c
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fdf9 	bl	80097b8 <_ZN8touchgfx3BoxC1Ev>
 8009bc6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009bca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3398      	adds	r3, #152	@ 0x98
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f004 fca8 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009bd8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009bdc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	33e0      	adds	r3, #224	@ 0xe0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f004 fc9f 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009bea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009bee:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f004 fc95 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009bfe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c02:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f004 fc8b 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c12:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c16:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009c20:	4618      	mov	r0, r3
 8009c22:	f004 fc81 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c26:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c2a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009c34:	4618      	mov	r0, r3
 8009c36:	f004 fc77 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c3a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c3e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f004 fc6d 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c4e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f004 fc63 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c62:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c66:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f004 fc59 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c76:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c7a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8009c84:	4618      	mov	r0, r3
 8009c86:	f004 fc4f 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c8a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009c8e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f004 fc45 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8009c9e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009ca2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f004 fc3b 	bl	800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>
{
    __background.setPosition(0, 0, 240, 320);
 8009cb2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009cb6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009cc0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	23f0      	movs	r3, #240	@ 0xf0
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f7ff fb5e 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009cd0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009cd4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8009cea:	2300      	movs	r3, #0
 8009cec:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009cf0:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8009cf4:	041a      	lsls	r2, r3, #16
 8009cf6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009d08:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fa98 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 8009d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff fd70 	bl	8009800 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8009d20:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009d24:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009d2e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3340      	adds	r3, #64	@ 0x40
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7ff fcf9 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 8009d3e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009d42:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8009d4c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	23f0      	movs	r3, #240	@ 0xf0
 8009d54:	2200      	movs	r2, #0
 8009d56:	2100      	movs	r1, #0
 8009d58:	f7ff fb18 	bl	800938c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(245, 5, 5));
 8009d5c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009d60:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8009d6a:	23f5      	movs	r3, #245	@ 0xf5
 8009d6c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009d70:	2305      	movs	r3, #5
 8009d72:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8009d76:	2305      	movs	r3, #5
 8009d78:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
 8009d7c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009d80:	041a      	lsls	r2, r3, #16
 8009d82:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009d94:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff fa52 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 8009da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009da4:	4619      	mov	r1, r3
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7ff fd2a 	bl	8009800 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8009dac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009db0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009dba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	336c      	adds	r3, #108	@ 0x6c
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7ff fcb3 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_11.setXY(90, 253);
 8009dca:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009dce:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3398      	adds	r3, #152	@ 0x98
 8009dd6:	22fd      	movs	r2, #253	@ 0xfd
 8009dd8:	215a      	movs	r1, #90	@ 0x5a
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fb15 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 8009de0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009de4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff fa4b 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff fa45 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 8009e06:	f107 020c 	add.w	r2, r7, #12
 8009e0a:	f107 0308 	add.w	r3, r7, #8
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4620      	mov	r0, r4
 8009e12:	f004 fa19 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_11.setLabelText(touchgfx::TypedText(T___SINGLEUSE_QG4M));
 8009e16:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009e1a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009e24:	f107 0310 	add.w	r3, r7, #16
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff fcf6 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 8009e30:	f107 0310 	add.w	r3, r7, #16
 8009e34:	4619      	mov	r1, r3
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff fd38 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fabf 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_11.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009e46:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009e4a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009e54:	23ff      	movs	r3, #255	@ 0xff
 8009e56:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
 8009e5a:	23ff      	movs	r3, #255	@ 0xff
 8009e5c:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
 8009e60:	23ff      	movs	r3, #255	@ 0xff
 8009e62:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8009e66:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8009e6a:	041a      	lsls	r2, r3, #16
 8009e6c:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	431a      	orrs	r2, r3
 8009e74:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009e7e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8009e82:	4611      	mov	r1, r2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff f9dd 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 8009e8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff fd1d 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_11.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009e96:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009e9a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009ea4:	23ff      	movs	r3, #255	@ 0xff
 8009ea6:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
 8009eaa:	23ff      	movs	r3, #255	@ 0xff
 8009eac:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 8009eb0:	23ff      	movs	r3, #255	@ 0xff
 8009eb2:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8009eb6:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8009eba:	041a      	lsls	r2, r3, #16
 8009ebc:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009ece:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff f9b5 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 8009eda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f7ff fd03 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_11);
 8009ee6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009eea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009ef4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3398      	adds	r3, #152	@ 0x98
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7ff fc16 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_7.setXY(15, 186);
 8009f04:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009f08:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	33e0      	adds	r3, #224	@ 0xe0
 8009f10:	22ba      	movs	r2, #186	@ 0xba
 8009f12:	210f      	movs	r1, #15
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fa78 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 8009f1a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009f1e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 8009f28:	f107 0318 	add.w	r3, r7, #24
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff f9ae 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 8009f34:	f107 031c 	add.w	r3, r7, #28
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff f9a8 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 8009f40:	f107 021c 	add.w	r2, r7, #28
 8009f44:	e002      	b.n	8009f4c <_ZN13loginViewBaseC1Ev+0x3d8>
 8009f46:	bf00      	nop
 8009f48:	08022f8c 	.word	0x08022f8c
 8009f4c:	f107 0318 	add.w	r3, r7, #24
 8009f50:	4619      	mov	r1, r3
 8009f52:	4620      	mov	r0, r4
 8009f54:	f004 f978 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_7.setLabelText(touchgfx::TypedText(T___SINGLEUSE_FFS5));
 8009f58:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009f5c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 8009f66:	f107 0320 	add.w	r3, r7, #32
 8009f6a:	2104      	movs	r1, #4
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fc55 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 8009f72:	f107 0320 	add.w	r3, r7, #32
 8009f76:	4619      	mov	r1, r3
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7ff fc97 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8009f7e:	f107 0320 	add.w	r3, r7, #32
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fa1e 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_7.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009f88:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009f8c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 8009f96:	23ff      	movs	r3, #255	@ 0xff
 8009f98:	f887 3140 	strb.w	r3, [r7, #320]	@ 0x140
 8009f9c:	23ff      	movs	r3, #255	@ 0xff
 8009f9e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fa2:	23ff      	movs	r3, #255	@ 0xff
 8009fa4:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
 8009fa8:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8009fac:	041a      	lsls	r2, r3, #16
 8009fae:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009fc0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff f93c 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 8009fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7ff fc7c 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_7.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009fd8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009fdc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 8009fe6:	23ff      	movs	r3, #255	@ 0xff
 8009fe8:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8009fec:	23ff      	movs	r3, #255	@ 0xff
 8009fee:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 8009ff2:	23ff      	movs	r3, #255	@ 0xff
 8009ff4:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 8009ff8:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8009ffc:	041a      	lsls	r2, r3, #16
 8009ffe:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	431a      	orrs	r2, r3
 800a006:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 800a00a:	4313      	orrs	r3, r2
 800a00c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a010:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff f914 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a01c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a020:	4619      	mov	r1, r3
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff fc62 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_7);
 800a028:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a02c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a036:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	33e0      	adds	r3, #224	@ 0xe0
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7ff fb75 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_8.setXY(90, 186);
 800a046:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a04a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800a054:	22ba      	movs	r2, #186	@ 0xba
 800a056:	215a      	movs	r1, #90	@ 0x5a
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff f9d6 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a05e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a062:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 800a06c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff f90c 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff f906 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a084:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800a088:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a08c:	4619      	mov	r1, r3
 800a08e:	4620      	mov	r0, r4
 800a090:	f004 f8da 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_8.setLabelText(touchgfx::TypedText(T___SINGLEUSE_WBS1));
 800a094:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a098:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 800a0a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a0a6:	2103      	movs	r1, #3
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff fbb7 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a0ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7ff fbf9 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a0ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe f980 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_8.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a0c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a0c8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 800a0d2:	23ff      	movs	r3, #255	@ 0xff
 800a0d4:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 800a0d8:	23ff      	movs	r3, #255	@ 0xff
 800a0da:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
 800a0de:	23ff      	movs	r3, #255	@ 0xff
 800a0e0:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 800a0e4:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800a0e8:	041a      	lsls	r2, r3, #16
 800a0ea:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a0fc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff f89e 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10c:	4619      	mov	r1, r3
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff fbde 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_8.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a114:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a118:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 800a122:	23ff      	movs	r3, #255	@ 0xff
 800a124:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149
 800a128:	23ff      	movs	r3, #255	@ 0xff
 800a12a:	f887 3148 	strb.w	r3, [r7, #328]	@ 0x148
 800a12e:	23ff      	movs	r3, #255	@ 0xff
 800a130:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800a134:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 800a138:	041a      	lsls	r2, r3, #16
 800a13a:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	431a      	orrs	r2, r3
 800a142:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800a146:	4313      	orrs	r3, r2
 800a148:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a14c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff f876 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a158:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a15c:	4619      	mov	r1, r3
 800a15e:	4620      	mov	r0, r4
 800a160:	f7ff fbc4 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_8);
 800a164:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a168:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a172:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f7ff fad6 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_6.setXY(165, 119);
 800a184:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a188:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a192:	2277      	movs	r2, #119	@ 0x77
 800a194:	21a5      	movs	r1, #165	@ 0xa5
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff f937 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a19c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a1a0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f503 74b8 	add.w	r4, r3, #368	@ 0x170
 800a1aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff f86d 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a1b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff f867 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a1c2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a1c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f004 f83b 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_6.setLabelText(touchgfx::TypedText(T___SINGLEUSE_BMIE));
 800a1d2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a1d6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f503 74b8 	add.w	r4, r3, #368	@ 0x170
 800a1e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a1e4:	2105      	movs	r1, #5
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fb18 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a1ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f7ff fb5a 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a1f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe f8e1 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_6.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a202:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a206:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f503 74b8 	add.w	r4, r3, #368	@ 0x170
 800a210:	23ff      	movs	r3, #255	@ 0xff
 800a212:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
 800a216:	23ff      	movs	r3, #255	@ 0xff
 800a218:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
 800a21c:	23ff      	movs	r3, #255	@ 0xff
 800a21e:	f887 314a 	strb.w	r3, [r7, #330]	@ 0x14a
 800a222:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a226:	041a      	lsls	r2, r3, #16
 800a228:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	431a      	orrs	r2, r3
 800a230:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 800a234:	4313      	orrs	r3, r2
 800a236:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a23a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe ffff 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a24a:	4619      	mov	r1, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7ff fb3f 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_6.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a252:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a256:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f503 74b8 	add.w	r4, r3, #368	@ 0x170
 800a260:	23ff      	movs	r3, #255	@ 0xff
 800a262:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 800a266:	23ff      	movs	r3, #255	@ 0xff
 800a268:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
 800a26c:	23ff      	movs	r3, #255	@ 0xff
 800a26e:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
 800a272:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800a276:	041a      	lsls	r2, r3, #16
 800a278:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 800a27c:	021b      	lsls	r3, r3, #8
 800a27e:	431a      	orrs	r2, r3
 800a280:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 800a284:	4313      	orrs	r3, r2
 800a286:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28e:	4611      	mov	r1, r2
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe ffd7 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a296:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800a29a:	4619      	mov	r1, r3
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff fb25 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_6);
 800a2a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a2a6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a2b0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f7ff fa37 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel.setXY(165, 253);
 800a2c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a2c6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a2d0:	22fd      	movs	r2, #253	@ 0xfd
 800a2d2:	21a5      	movs	r1, #165	@ 0xa5
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff f898 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a2da:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a2de:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800a2e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe ffce 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a2f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe ffc8 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a300:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800a304:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a308:	4619      	mov	r1, r3
 800a30a:	4620      	mov	r0, r4
 800a30c:	f003 ff9c 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel.setLabelText(touchgfx::TypedText(T___SINGLEUSE_3TNO));
 800a310:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a314:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800a31e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a322:	210b      	movs	r1, #11
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fa79 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a32a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a32e:	4619      	mov	r1, r3
 800a330:	4620      	mov	r0, r4
 800a332:	f7ff fabb 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a336:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe f842 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a340:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a344:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800a34e:	23ff      	movs	r3, #255	@ 0xff
 800a350:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 800a354:	23ff      	movs	r3, #255	@ 0xff
 800a356:	f887 3151 	strb.w	r3, [r7, #337]	@ 0x151
 800a35a:	23ff      	movs	r3, #255	@ 0xff
 800a35c:	f887 3150 	strb.w	r3, [r7, #336]	@ 0x150
 800a360:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
 800a364:	041a      	lsls	r2, r3, #16
 800a366:	f897 3151 	ldrb.w	r3, [r7, #337]	@ 0x151
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	431a      	orrs	r2, r3
 800a36e:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 800a372:	4313      	orrs	r3, r2
 800a374:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a378:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe ff60 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a388:	4619      	mov	r1, r3
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff faa0 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a390:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a394:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800a39e:	23ff      	movs	r3, #255	@ 0xff
 800a3a0:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155
 800a3a4:	23ff      	movs	r3, #255	@ 0xff
 800a3a6:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 800a3aa:	23ff      	movs	r3, #255	@ 0xff
 800a3ac:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
 800a3b0:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800a3b4:	041a      	lsls	r2, r3, #16
 800a3b6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a3ba:	021b      	lsls	r3, r3, #8
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a3c8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe ff38 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a3d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7ff fa86 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel);
 800a3e0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a3e4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a3ee:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7ff f998 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_10.setXY(15, 253);
 800a400:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a404:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a40e:	22fd      	movs	r2, #253	@ 0xfd
 800a410:	210f      	movs	r1, #15
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fff9 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a418:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a41c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f503 7400 	add.w	r4, r3, #512	@ 0x200
 800a426:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe ff2f 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a432:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe ff29 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a43e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800a442:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a446:	4619      	mov	r1, r3
 800a448:	4620      	mov	r0, r4
 800a44a:	f003 fefd 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_10.setLabelText(touchgfx::TypedText(T___SINGLEUSE_QAAB));
 800a44e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a452:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f503 7400 	add.w	r4, r3, #512	@ 0x200
 800a45c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a460:	2101      	movs	r1, #1
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff f9da 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a468:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a46c:	4619      	mov	r1, r3
 800a46e:	4620      	mov	r0, r4
 800a470:	f7ff fa1c 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a474:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd ffa3 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_10.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a47e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a482:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f503 7400 	add.w	r4, r3, #512	@ 0x200
 800a48c:	23ff      	movs	r3, #255	@ 0xff
 800a48e:	f887 3158 	strb.w	r3, [r7, #344]	@ 0x158
 800a492:	23ff      	movs	r3, #255	@ 0xff
 800a494:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
 800a498:	23ff      	movs	r3, #255	@ 0xff
 800a49a:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
 800a49e:	f897 3158 	ldrb.w	r3, [r7, #344]	@ 0x158
 800a4a2:	041a      	lsls	r2, r3, #16
 800a4a4:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	f897 3156 	ldrb.w	r3, [r7, #342]	@ 0x156
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a4b6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fec1 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a4c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7ff fa01 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_10.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a4ce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a4d2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f503 7400 	add.w	r4, r3, #512	@ 0x200
 800a4dc:	23ff      	movs	r3, #255	@ 0xff
 800a4de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
 800a4e2:	23ff      	movs	r3, #255	@ 0xff
 800a4e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800a4e8:	23ff      	movs	r3, #255	@ 0xff
 800a4ea:	f887 3159 	strb.w	r3, [r7, #345]	@ 0x159
 800a4ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a4f2:	041a      	lsls	r2, r3, #16
 800a4f4:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800a4f8:	021b      	lsls	r3, r3, #8
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	f897 3159 	ldrb.w	r3, [r7, #345]	@ 0x159
 800a500:	4313      	orrs	r3, r2
 800a502:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a506:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800a50a:	4611      	mov	r1, r2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe fe99 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a516:	4619      	mov	r1, r3
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff f9e7 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_10);
 800a51e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a522:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a52c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7ff f8f9 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_9.setXY(165, 186);
 800a53e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a542:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800a54c:	22ba      	movs	r2, #186	@ 0xba
 800a54e:	21a5      	movs	r1, #165	@ 0xa5
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe ff5a 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a556:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a55a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f503 7412 	add.w	r4, r3, #584	@ 0x248
 800a564:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fe90 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a570:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a574:	2100      	movs	r1, #0
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fe8a 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a57c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800a580:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800a584:	4619      	mov	r1, r3
 800a586:	4620      	mov	r0, r4
 800a588:	f003 fe5e 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_9.setLabelText(touchgfx::TypedText(T___SINGLEUSE_YF1H));
 800a58c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a590:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f503 7412 	add.w	r4, r3, #584	@ 0x248
 800a59a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800a59e:	2102      	movs	r1, #2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff f93b 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a5a6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7ff f97d 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a5b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fd ff04 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_9.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a5bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a5c0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f503 7412 	add.w	r4, r3, #584	@ 0x248
 800a5ca:	23ff      	movs	r3, #255	@ 0xff
 800a5cc:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800a5d0:	23ff      	movs	r3, #255	@ 0xff
 800a5d2:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 800a5d6:	23ff      	movs	r3, #255	@ 0xff
 800a5d8:	f887 315c 	strb.w	r3, [r7, #348]	@ 0x15c
 800a5dc:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800a5e0:	041a      	lsls	r2, r3, #16
 800a5e2:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 800a5e6:	021b      	lsls	r3, r3, #8
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a5f4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fe22 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a604:	4619      	mov	r1, r3
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff f962 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_9.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a60c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a610:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f503 7412 	add.w	r4, r3, #584	@ 0x248
 800a61a:	23ff      	movs	r3, #255	@ 0xff
 800a61c:	f887 3161 	strb.w	r3, [r7, #353]	@ 0x161
 800a620:	23ff      	movs	r3, #255	@ 0xff
 800a622:	f887 3160 	strb.w	r3, [r7, #352]	@ 0x160
 800a626:	23ff      	movs	r3, #255	@ 0xff
 800a628:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 800a62c:	f897 3161 	ldrb.w	r3, [r7, #353]	@ 0x161
 800a630:	041a      	lsls	r2, r3, #16
 800a632:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	431a      	orrs	r2, r3
 800a63a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800a63e:	4313      	orrs	r3, r2
 800a640:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a644:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fdfa 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a650:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a654:	4619      	mov	r1, r3
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff f948 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_9);
 800a65c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a660:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a66a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800a674:	4619      	mov	r1, r3
 800a676:	4610      	mov	r0, r2
 800a678:	f7ff f85a 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_5.setXY(90, 119);
 800a67c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a680:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800a68a:	2277      	movs	r2, #119	@ 0x77
 800a68c:	215a      	movs	r1, #90	@ 0x5a
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe febb 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a694:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a698:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f503 7424 	add.w	r4, r3, #656	@ 0x290
 800a6a2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fdf1 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a6ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fdeb 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a6ba:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800a6be:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f003 fdbf 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_5.setLabelText(touchgfx::TypedText(T___SINGLEUSE_YPHS));
 800a6ca:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a6ce:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f503 7424 	add.w	r4, r3, #656	@ 0x290
 800a6d8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a6dc:	2106      	movs	r1, #6
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff f89c 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a6e4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7ff f8de 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a6f0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fd fe65 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_5.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a6fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a6fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f503 7424 	add.w	r4, r3, #656	@ 0x290
 800a708:	23ff      	movs	r3, #255	@ 0xff
 800a70a:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 800a70e:	23ff      	movs	r3, #255	@ 0xff
 800a710:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 800a714:	23ff      	movs	r3, #255	@ 0xff
 800a716:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
 800a71a:	f897 3164 	ldrb.w	r3, [r7, #356]	@ 0x164
 800a71e:	041a      	lsls	r2, r3, #16
 800a720:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800a724:	021b      	lsls	r3, r3, #8
 800a726:	431a      	orrs	r2, r3
 800a728:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a732:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fd83 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a73e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a742:	4619      	mov	r1, r3
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff f8c3 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_5.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a74a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a74e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f503 7424 	add.w	r4, r3, #656	@ 0x290
 800a758:	23ff      	movs	r3, #255	@ 0xff
 800a75a:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 800a75e:	23ff      	movs	r3, #255	@ 0xff
 800a760:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
 800a764:	23ff      	movs	r3, #255	@ 0xff
 800a766:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
 800a76a:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 800a76e:	041a      	lsls	r2, r3, #16
 800a770:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	431a      	orrs	r2, r3
 800a778:	f897 3165 	ldrb.w	r3, [r7, #357]	@ 0x165
 800a77c:	4313      	orrs	r3, r2
 800a77e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a782:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fd5b 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a78e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a792:	4619      	mov	r1, r3
 800a794:	4620      	mov	r0, r4
 800a796:	f7ff f8a9 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_5);
 800a79a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a79e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a7a8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7fe ffbb 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_1.setXY(15, 52);
 800a7ba:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a7be:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800a7c8:	2234      	movs	r2, #52	@ 0x34
 800a7ca:	210f      	movs	r1, #15
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fe1c 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a7d2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a7d6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f503 7436 	add.w	r4, r3, #728	@ 0x2d8
 800a7e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fd52 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a7ec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fd4c 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a7f8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800a7fc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800a800:	4619      	mov	r1, r3
 800a802:	4620      	mov	r0, r4
 800a804:	f003 fd20 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_L58N));
 800a808:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a80c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f503 7436 	add.w	r4, r3, #728	@ 0x2d8
 800a816:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a81a:	210a      	movs	r1, #10
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fffd 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a822:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a826:	4619      	mov	r1, r3
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff f83f 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a82e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800a832:	4618      	mov	r0, r3
 800a834:	f7fd fdc6 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a838:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a83c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f503 7436 	add.w	r4, r3, #728	@ 0x2d8
 800a846:	23ff      	movs	r3, #255	@ 0xff
 800a848:	f887 316a 	strb.w	r3, [r7, #362]	@ 0x16a
 800a84c:	23ff      	movs	r3, #255	@ 0xff
 800a84e:	f887 3169 	strb.w	r3, [r7, #361]	@ 0x169
 800a852:	23ff      	movs	r3, #255	@ 0xff
 800a854:	f887 3168 	strb.w	r3, [r7, #360]	@ 0x168
 800a858:	f897 316a 	ldrb.w	r3, [r7, #362]	@ 0x16a
 800a85c:	041a      	lsls	r2, r3, #16
 800a85e:	f897 3169 	ldrb.w	r3, [r7, #361]	@ 0x169
 800a862:	021b      	lsls	r3, r3, #8
 800a864:	431a      	orrs	r2, r3
 800a866:	f897 3168 	ldrb.w	r3, [r7, #360]	@ 0x168
 800a86a:	4313      	orrs	r3, r2
 800a86c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a870:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe fce4 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a880:	4619      	mov	r1, r3
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff f824 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a888:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a88c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f503 7436 	add.w	r4, r3, #728	@ 0x2d8
 800a896:	23ff      	movs	r3, #255	@ 0xff
 800a898:	f887 316d 	strb.w	r3, [r7, #365]	@ 0x16d
 800a89c:	23ff      	movs	r3, #255	@ 0xff
 800a89e:	f887 316c 	strb.w	r3, [r7, #364]	@ 0x16c
 800a8a2:	23ff      	movs	r3, #255	@ 0xff
 800a8a4:	f887 316b 	strb.w	r3, [r7, #363]	@ 0x16b
 800a8a8:	f897 316d 	ldrb.w	r3, [r7, #365]	@ 0x16d
 800a8ac:	041a      	lsls	r2, r3, #16
 800a8ae:	f897 316c 	ldrb.w	r3, [r7, #364]	@ 0x16c
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	f897 316b 	ldrb.w	r3, [r7, #363]	@ 0x16b
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a8c0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fcbc 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f7ff f80a 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_1);
 800a8d8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a8dc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a8e6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f7fe ff1c 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_2.setXY(90, 52);
 800a8f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a8fc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800a906:	2234      	movs	r2, #52	@ 0x34
 800a908:	215a      	movs	r1, #90	@ 0x5a
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fd7d 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800a910:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a914:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f503 7448 	add.w	r4, r3, #800	@ 0x320
 800a91e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f7fe fcb3 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a92a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe fcad 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800a936:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800a93a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a93e:	4619      	mov	r1, r3
 800a940:	4620      	mov	r0, r4
 800a942:	f003 fc81 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_2.setLabelText(touchgfx::TypedText(T___SINGLEUSE_3IXB));
 800a946:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a94a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f503 7448 	add.w	r4, r3, #800	@ 0x320
 800a954:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a958:	2109      	movs	r1, #9
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe ff5e 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800a960:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a964:	4619      	mov	r1, r3
 800a966:	4620      	mov	r0, r4
 800a968:	f7fe ffa0 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800a96c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a970:	4618      	mov	r0, r3
 800a972:	f7fd fd27 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_2.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a976:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a97a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f503 7448 	add.w	r4, r3, #800	@ 0x320
 800a984:	23ff      	movs	r3, #255	@ 0xff
 800a986:	f887 3170 	strb.w	r3, [r7, #368]	@ 0x170
 800a98a:	23ff      	movs	r3, #255	@ 0xff
 800a98c:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
 800a990:	23ff      	movs	r3, #255	@ 0xff
 800a992:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
 800a996:	f897 3170 	ldrb.w	r3, [r7, #368]	@ 0x170
 800a99a:	041a      	lsls	r2, r3, #16
 800a99c:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 800a9a0:	021b      	lsls	r3, r3, #8
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a9ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fc45 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800a9ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7fe ff85 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_2.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800a9c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a9ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f503 7448 	add.w	r4, r3, #800	@ 0x320
 800a9d4:	23ff      	movs	r3, #255	@ 0xff
 800a9d6:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
 800a9da:	23ff      	movs	r3, #255	@ 0xff
 800a9dc:	f887 3172 	strb.w	r3, [r7, #370]	@ 0x172
 800a9e0:	23ff      	movs	r3, #255	@ 0xff
 800a9e2:	f887 3171 	strb.w	r3, [r7, #369]	@ 0x171
 800a9e6:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 800a9ea:	041a      	lsls	r2, r3, #16
 800a9ec:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	f897 3171 	ldrb.w	r3, [r7, #369]	@ 0x171
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800a9fe:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fc1d 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800aa0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4620      	mov	r0, r4
 800aa12:	f7fe ff6b 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_2);
 800aa16:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aa1a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aa24:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f7fe fe7d 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_3.setXY(165, 52);
 800aa36:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aa3a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800aa44:	2234      	movs	r2, #52	@ 0x34
 800aa46:	21a5      	movs	r1, #165	@ 0xa5
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fcde 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800aa4e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aa52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f503 745a 	add.w	r4, r3, #872	@ 0x368
 800aa5c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fc14 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800aa68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fc0e 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800aa74:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800aa78:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f003 fbe2 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_3.setLabelText(touchgfx::TypedText(T___SINGLEUSE_PUZ0));
 800aa84:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aa88:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f503 745a 	add.w	r4, r3, #872	@ 0x368
 800aa92:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800aa96:	2108      	movs	r1, #8
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe febf 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800aa9e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7fe ff01 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800aaaa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fd fc88 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_3.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800aab4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aab8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f503 745a 	add.w	r4, r3, #872	@ 0x368
 800aac2:	23ff      	movs	r3, #255	@ 0xff
 800aac4:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176
 800aac8:	23ff      	movs	r3, #255	@ 0xff
 800aaca:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
 800aace:	23ff      	movs	r3, #255	@ 0xff
 800aad0:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 800aad4:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 800aad8:	041a      	lsls	r2, r3, #16
 800aada:	f897 3175 	ldrb.w	r3, [r7, #373]	@ 0x175
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	431a      	orrs	r2, r3
 800aae2:	f897 3174 	ldrb.w	r3, [r7, #372]	@ 0x174
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800aaec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fba6 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800aaf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aafc:	4619      	mov	r1, r3
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7fe fee6 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_3.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ab04:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ab08:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f503 745a 	add.w	r4, r3, #872	@ 0x368
 800ab12:	23ff      	movs	r3, #255	@ 0xff
 800ab14:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
 800ab18:	23ff      	movs	r3, #255	@ 0xff
 800ab1a:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
 800ab1e:	23ff      	movs	r3, #255	@ 0xff
 800ab20:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
 800ab24:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 800ab28:	041a      	lsls	r2, r3, #16
 800ab2a:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 800ab2e:	021b      	lsls	r3, r3, #8
 800ab30:	431a      	orrs	r2, r3
 800ab32:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800ab36:	4313      	orrs	r3, r2
 800ab38:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ab3c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fe fb7e 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800ab48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f7fe fecc 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_3);
 800ab54:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ab58:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ab62:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7fe fdde 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel_4.setXY(15, 119);
 800ab74:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ab78:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800ab82:	2277      	movs	r2, #119	@ 0x77
 800ab84:	210f      	movs	r1, #15
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fc3f 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_DISABLED_ID));
 800ab8c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ab90:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f503 746c 	add.w	r4, r3, #944	@ 0x3b0
 800ab9a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ab9e:	2100      	movs	r1, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fb75 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800aba6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe fb6f 	bl	8009290 <_ZN8touchgfx6BitmapC1Et>
 800abb2:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800abb6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800abba:	4619      	mov	r1, r3
 800abbc:	4620      	mov	r0, r4
 800abbe:	f003 fb43 	bl	800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel_4.setLabelText(touchgfx::TypedText(T___SINGLEUSE_OZV6));
 800abc2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800abc6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f503 746c 	add.w	r4, r3, #944	@ 0x3b0
 800abd0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800abd4:	2107      	movs	r1, #7
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fe20 	bl	800981c <_ZN8touchgfx9TypedTextC1Et>
 800abdc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800abe0:	4619      	mov	r1, r3
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7fe fe62 	bl	80098ac <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800abe8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800abec:	4618      	mov	r0, r3
 800abee:	f7fd fbe9 	bl	80083c4 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel_4.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800abf2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800abf6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f503 746c 	add.w	r4, r3, #944	@ 0x3b0
 800ac00:	23ff      	movs	r3, #255	@ 0xff
 800ac02:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 800ac06:	23ff      	movs	r3, #255	@ 0xff
 800ac08:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 800ac0c:	23ff      	movs	r3, #255	@ 0xff
 800ac0e:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
 800ac12:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 800ac16:	041a      	lsls	r2, r3, #16
 800ac18:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ac2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe fb07 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800ac36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7fe fe47 	bl	80098d0 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel_4.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ac42:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ac46:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f503 746c 	add.w	r4, r3, #944	@ 0x3b0
 800ac50:	23ff      	movs	r3, #255	@ 0xff
 800ac52:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 800ac56:	23ff      	movs	r3, #255	@ 0xff
 800ac58:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 800ac5c:	23ff      	movs	r3, #255	@ 0xff
 800ac5e:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 800ac62:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 800ac66:	041a      	lsls	r2, r3, #16
 800ac68:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ac7a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fadf 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800ac86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7fe fe2d 	bl	80098ec <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel_4);
 800ac92:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800ac96:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800aca0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7fe fd3f 	bl	8009730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800acb2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800acb6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd90      	pop	{r4, r7, pc}
 800acc6:	bf00      	nop

0800acc8 <_ZN13loginViewBaseD1Ev>:

loginViewBase::~loginViewBase()
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	4a2d      	ldr	r2, [pc, #180]	@ (800ad88 <_ZN13loginViewBaseD1Ev+0xc0>)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
{

}
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe ff21 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe ff1b 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe ff15 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe ff0f 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fe ff09 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe ff03 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe fefd 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fef7 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fef1 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe feeb 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	33e0      	adds	r3, #224	@ 0xe0
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fee6 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3398      	adds	r3, #152	@ 0x98
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe fee1 	bl	8009b24 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	336c      	adds	r3, #108	@ 0x6c
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fe98 	bl	8009a9c <_ZN8touchgfx3BoxD1Ev>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3340      	adds	r3, #64	@ 0x40
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fe93 	bl	8009a9c <_ZN8touchgfx3BoxD1Ev>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fe6d 	bl	8009a58 <_ZN8touchgfx4ViewI14loginPresenterED1Ev>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	08022f8c 	.word	0x08022f8c

0800ad8c <_ZN13loginViewBaseD0Ev>:
loginViewBase::~loginViewBase()
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
}
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff ff97 	bl	800acc8 <_ZN13loginViewBaseD1Ev>
 800ad9a:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f016 f9e9 	bl	8021176 <_ZdlPvj>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <_ZN13loginViewBase11setupScreenEv>:

void loginViewBase::setupScreen()
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]

}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <_ZN8touchgfx4ViewI14loginPresenterEC1Ev>:
    View()
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4618      	mov	r0, r3
 800add0:	f006 fcd6 	bl	8011780 <_ZN8touchgfx6ScreenC1Ev>
 800add4:	4a05      	ldr	r2, [pc, #20]	@ (800adec <_ZN8touchgfx4ViewI14loginPresenterEC1Ev+0x28>)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	08022fc0 	.word	0x08022fc0

0800adf0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
    return bitmap_database;
 800adf4:	4b02      	ldr	r3, [pc, #8]	@ (800ae00 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	08023054 	.word	0x08023054

0800ae04 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800ae04:	b480      	push	{r7}
 800ae06:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800ae08:	2301      	movs	r3, #1
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	817b      	strh	r3, [r7, #10]
        return 0;
 800ae22:	2300      	movs	r3, #0
    }
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
        return 0;
 800ae38:	2300      	movs	r3, #0
    }
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
        return 0;
 800ae4e:	2300      	movs	r3, #0
    }
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800ae6a:	4a07      	ldr	r2, [pc, #28]	@ (800ae88 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800ae70:	4a06      	ldr	r2, [pc, #24]	@ (800ae8c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800ae76:	4a06      	ldr	r2, [pc, #24]	@ (800ae90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800ae78:	88fb      	ldrh	r3, [r7, #6]
 800ae7a:	8013      	strh	r3, [r2, #0]
    }
 800ae7c:	bf00      	nop
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	2002b07c 	.word	0x2002b07c
 800ae8c:	2002b084 	.word	0x2002b084
 800ae90:	2002b080 	.word	0x2002b080

0800ae94 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ae94:	b40e      	push	{r1, r2, r3}
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800ae9e:	f107 0320 	add.w	r3, r7, #32
 800aea2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f006 f89e 	bl	8010fec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aec0:	b003      	add	sp, #12
 800aec2:	4770      	bx	lr

0800aec4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800aec4:	b40c      	push	{r2, r3}
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800aed2:	f107 031c 	add.w	r3, r7, #28
 800aed6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800aed8:	78f9      	ldrb	r1, [r7, #3]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f006 f884 	bl	8010fec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800aee4:	4603      	mov	r3, r0
 800aee6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800aee8:	89fb      	ldrh	r3, [r7, #14]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aef4:	b002      	add	sp, #8
 800aef6:	4770      	bx	lr

0800aef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	@ 0x28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d016      	beq.n	800af3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3322      	adds	r3, #34	@ 0x22
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	8adb      	ldrh	r3, [r3, #22]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d105      	bne.n	800af26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800af1a:	4b43      	ldr	r3, [pc, #268]	@ (800b028 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800af1c:	4a43      	ldr	r2, [pc, #268]	@ (800b02c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800af1e:	21c5      	movs	r1, #197	@ 0xc5
 800af20:	4843      	ldr	r0, [pc, #268]	@ (800b030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800af22:	f016 f957 	bl	80211d4 <__assert_func>
            return buffer[pos];
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	8a9b      	ldrh	r3, [r3, #20]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800af36:	2301      	movs	r3, #1
 800af38:	e000      	b.n	800af3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800af3a:	2300      	movs	r3, #0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d06a      	beq.n	800b016 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f007 fb08 	bl	8012556 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3322      	adds	r3, #34	@ 0x22
 800af4a:	623b      	str	r3, [r7, #32]
 800af4c:	2301      	movs	r3, #1
 800af4e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	8adb      	ldrh	r3, [r3, #22]
 800af54:	8bfa      	ldrh	r2, [r7, #30]
 800af56:	429a      	cmp	r2, r3
 800af58:	d305      	bcc.n	800af66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800af5a:	4b36      	ldr	r3, [pc, #216]	@ (800b034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800af5c:	4a36      	ldr	r2, [pc, #216]	@ (800b038 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800af5e:	21cb      	movs	r1, #203	@ 0xcb
 800af60:	4833      	ldr	r0, [pc, #204]	@ (800b030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800af62:	f016 f937 	bl	80211d4 <__assert_func>
            const uint16_t index = pos + offset;
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	8a9a      	ldrh	r2, [r3, #20]
 800af6a:	8bfb      	ldrh	r3, [r7, #30]
 800af6c:	4413      	add	r3, r2
 800af6e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800af70:	8bbb      	ldrh	r3, [r7, #28]
 800af72:	2b09      	cmp	r3, #9
 800af74:	d801      	bhi.n	800af7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800af76:	8bbb      	ldrh	r3, [r7, #28]
 800af78:	e001      	b.n	800af7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800af7a:	8bbb      	ldrh	r3, [r7, #28]
 800af7c:	3b0a      	subs	r3, #10
 800af7e:	6a3a      	ldr	r2, [r7, #32]
 800af80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af84:	f640 123f 	movw	r2, #2367	@ 0x93f
 800af88:	4293      	cmp	r3, r2
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d03f      	beq.n	800b016 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3322      	adds	r3, #34	@ 0x22
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	3222      	adds	r2, #34	@ 0x22
 800af9e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	8ad2      	ldrh	r2, [r2, #22]
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d105      	bne.n	800afb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800afa8:	4b1f      	ldr	r3, [pc, #124]	@ (800b028 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800afaa:	4a20      	ldr	r2, [pc, #128]	@ (800b02c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800afac:	21c5      	movs	r1, #197	@ 0xc5
 800afae:	4820      	ldr	r0, [pc, #128]	@ (800b030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800afb0:	f016 f910 	bl	80211d4 <__assert_func>
            return buffer[pos];
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	8a92      	ldrh	r2, [r2, #20]
 800afb8:	4611      	mov	r1, r2
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	4613      	mov	r3, r2
 800afc4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	8adb      	ldrh	r3, [r3, #22]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d806      	bhi.n	800afdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800afce:	4b1b      	ldr	r3, [pc, #108]	@ (800b03c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800afd0:	4a1b      	ldr	r2, [pc, #108]	@ (800b040 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800afd2:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800afd6:	4816      	ldr	r0, [pc, #88]	@ (800b030 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800afd8:	f016 f8fc 	bl	80211d4 <__assert_func>
            const uint16_t index = pos + 1;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	8a9b      	ldrh	r3, [r3, #20]
 800afe0:	3301      	adds	r3, #1
 800afe2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800afe4:	89bb      	ldrh	r3, [r7, #12]
 800afe6:	2b09      	cmp	r3, #9
 800afe8:	d801      	bhi.n	800afee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800afea:	89bb      	ldrh	r3, [r7, #12]
 800afec:	e000      	b.n	800aff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800afee:	2300      	movs	r3, #0
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	89f9      	ldrh	r1, [r7, #14]
 800aff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800aff8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3322      	adds	r3, #34	@ 0x22
 800affe:	61bb      	str	r3, [r7, #24]
 800b000:	f640 133f 	movw	r3, #2367	@ 0x93f
 800b004:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	8a9b      	ldrh	r3, [r3, #20]
 800b00a:	4619      	mov	r1, r3
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	8afa      	ldrh	r2, [r7, #22]
 800b010:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800b014:	bf00      	nop
        }
    }
    return getNextChar();
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f007 f9a0 	bl	801235c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b01c:	4603      	mov	r3, r0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3728      	adds	r7, #40	@ 0x28
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	08022744 	.word	0x08022744
 800b02c:	08022750 	.word	0x08022750
 800b030:	080227fc 	.word	0x080227fc
 800b034:	08022844 	.word	0x08022844
 800b038:	08022854 	.word	0x08022854
 800b03c:	08022928 	.word	0x08022928
 800b040:	08022934 	.word	0x08022934

0800b044 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f007 f94c 	bl	80122ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b088      	sub	sp, #32
 800b05e:	af02      	add	r7, sp, #8
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	1d38      	adds	r0, r7, #4
 800b064:	e880 0006 	stmia.w	r0, {r1, r2}
 800b068:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800b06a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b06e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800b070:	1d39      	adds	r1, r7, #4
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f004 fad4 	bl	800f62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800b084:	bf00      	nop
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800b08c:	b590      	push	{r4, r7, lr}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800b09a:	88fb      	ldrh	r3, [r7, #6]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d127      	bne.n	800b0f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b11c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d016      	beq.n	800b0da <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800b0ac:	88fb      	ldrh	r3, [r7, #6]
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b11c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0b4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	4413      	add	r3, r2
 800b0be:	4a18      	ldr	r2, [pc, #96]	@ (800b120 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b0c0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	4a16      	ldr	r2, [pc, #88]	@ (800b124 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b0cc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e00a      	b.n	800b0f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800b0da:	4b11      	ldr	r3, [pc, #68]	@ (800b120 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b0dc:	4a12      	ldr	r2, [pc, #72]	@ (800b128 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800b0de:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800b0e0:	4a12      	ldr	r2, [pc, #72]	@ (800b12c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b0e2:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b0e4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	4a11      	ldr	r2, [pc, #68]	@ (800b130 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00d      	beq.n	800b112 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b0f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b134 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b0fc:	f000 f83e 	bl	800b17c <_ZN17TypedTextDatabase8getFontsEv>
 800b100:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800b102:	f000 f833 	bl	800b16c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800b106:	4603      	mov	r3, r0
 800b108:	461a      	mov	r2, r3
 800b10a:	4621      	mov	r1, r4
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7ff fea5 	bl	800ae5c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800b112:	bf00      	nop
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}
 800b11a:	bf00      	nop
 800b11c:	2002a8fc 	.word	0x2002a8fc
 800b120:	2002a904 	.word	0x2002a904
 800b124:	2002a908 	.word	0x2002a908
 800b128:	08027984 	.word	0x08027984
 800b12c:	08027954 	.word	0x08027954
 800b130:	080279a0 	.word	0x080279a0
 800b134:	2002a900 	.word	0x2002a900

0800b138 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800b144:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	4b07      	ldr	r3, [pc, #28]	@ (800b168 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800b14a:	6819      	ldr	r1, [r3, #0]
 800b14c:	887b      	ldrh	r3, [r7, #2]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	4413      	add	r3, r2
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	2002a904 	.word	0x2002a904
 800b168:	2002a908 	.word	0x2002a908

0800b16c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800b170:	230c      	movs	r3, #12
}
 800b172:	4618      	mov	r0, r3
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800b17c:	b480      	push	{r7}
 800b17e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800b180:	4b02      	ldr	r3, [pc, #8]	@ (800b18c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800b182:	4618      	mov	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	2002a90c 	.word	0x2002a90c

0800b190 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 800b194:	f7fd fa62 	bl	800865c <_Z23getFont_verdana_20_4bppv>
 800b198:	4603      	mov	r3, r0
};
 800b19a:	4a07      	ldr	r2, [pc, #28]	@ (800b1b8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 800b19c:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800b19e:	f7fd fab7 	bl	8008710 <_Z23getFont_verdana_40_4bppv>
 800b1a2:	4603      	mov	r3, r0
};
 800b1a4:	4a04      	ldr	r2, [pc, #16]	@ (800b1b8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 800b1a6:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800b1a8:	f7fd f9fe 	bl	80085a8 <_Z23getFont_verdana_10_4bppv>
 800b1ac:	4603      	mov	r3, r0
};
 800b1ae:	4a02      	ldr	r2, [pc, #8]	@ (800b1b8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 800b1b0:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800b1b2:	bf00      	nop
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2002a90c 	.word	0x2002a90c

0800b1bc <_GLOBAL__sub_I_touchgfx_fonts>:
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	f7ff ffe6 	bl	800b190 <_Z41__static_initialization_and_destruction_0v>
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	4a05      	ldr	r2, [pc, #20]	@ (800b1e8 <_ZN19FrontendApplicationD1Ev+0x20>)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fd fd0f 	bl	8008bfc <_ZN23FrontendApplicationBaseD1Ev>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	080230d4 	.word	0x080230d4

0800b1ec <_ZN19FrontendApplicationD0Ev>:
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff ffe7 	bl	800b1c8 <_ZN19FrontendApplicationD1Ev>
 800b1fa:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f015 ffb9 	bl	8021176 <_ZdlPvj>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 f95b 	bl	800b4d8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4618      	mov	r0, r3
 800b226:	f004 fedb 	bl	800ffe0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f7fd fd28 	bl	8008c9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800b24c:	4a03      	ldr	r2, [pc, #12]	@ (800b25c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]
{

}
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	080230d4 	.word	0x080230d4

0800b260 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
    {
    }
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
    {
    }
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
    {
 800b290:	4a04      	ldr	r2, [pc, #16]	@ (800b2a4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	601a      	str	r2, [r3, #0]
    }
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	08023160 	.word	0x08023160

0800b2a8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
    }
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ffe9 	bl	800b288 <_ZN8touchgfx9PresenterD1Ev>
 800b2b6:	2104      	movs	r1, #4
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f015 ff5c 	bl	8021176 <_ZdlPvj>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
    {
 800b2d0:	4a04      	ldr	r2, [pc, #16]	@ (800b2e4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
    }
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	08023160 	.word	0x08023160

0800b2e8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	4a06      	ldr	r2, [pc, #24]	@ (800b30c <_ZN13ModelListenerC1Ev+0x24>)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	605a      	str	r2, [r3, #4]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	08023150 	.word	0x08023150

0800b310 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	4a04      	ldr	r2, [pc, #16]	@ (800b32c <_ZN13ModelListenerD1Ev+0x1c>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	08023150 	.word	0x08023150

0800b330 <_ZN13ModelListenerD0Ev>:
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ffe9 	bl	800b310 <_ZN13ModelListenerD1Ev>
 800b33e:	2108      	movs	r1, #8
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f015 ff18 	bl	8021176 <_ZdlPvj>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <_ZN14loginPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~loginPresenter() {}
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	4a09      	ldr	r2, [pc, #36]	@ (800b380 <_ZN14loginPresenterD1Ev+0x30>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	4a09      	ldr	r2, [pc, #36]	@ (800b384 <_ZN14loginPresenterD1Ev+0x34>)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	605a      	str	r2, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff ffd1 	bl	800b310 <_ZN13ModelListenerD1Ev>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff ff89 	bl	800b288 <_ZN8touchgfx9PresenterD1Ev>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	08023128 	.word	0x08023128
 800b384:	08023140 	.word	0x08023140

0800b388 <_ZThn4_N14loginPresenterD1Ev>:
 800b388:	f1a0 0004 	sub.w	r0, r0, #4
 800b38c:	e7e0      	b.n	800b350 <_ZN14loginPresenterD1Ev>
 800b38e:	bf00      	nop

0800b390 <_ZN14loginPresenterD0Ev>:
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff ffd9 	bl	800b350 <_ZN14loginPresenterD1Ev>
 800b39e:	2110      	movs	r1, #16
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f015 fee8 	bl	8021176 <_ZdlPvj>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <_ZThn4_N14loginPresenterD0Ev>:
 800b3b0:	f1a0 0004 	sub.w	r0, r0, #4
 800b3b4:	e7ec      	b.n	800b390 <_ZN14loginPresenterD0Ev>
	...

0800b3b8 <_ZN14loginPresenterC1ER9loginView>:
#include <gui/login_screen/loginView.hpp>
#include <gui/login_screen/loginPresenter.hpp>

loginPresenter::loginPresenter(loginView& v)
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
    : view(v)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff ff7f 	bl	800b2c8 <_ZN8touchgfx9PresenterC1Ev>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff ff8a 	bl	800b2e8 <_ZN13ModelListenerC1Ev>
 800b3d4:	4a06      	ldr	r2, [pc, #24]	@ (800b3f0 <_ZN14loginPresenterC1ER9loginView+0x38>)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	4a06      	ldr	r2, [pc, #24]	@ (800b3f4 <_ZN14loginPresenterC1ER9loginView+0x3c>)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	605a      	str	r2, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	60da      	str	r2, [r3, #12]
{

}
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	08023128 	.word	0x08023128
 800b3f4:	08023140 	.word	0x08023140

0800b3f8 <_ZN14loginPresenter8activateEv>:

void loginPresenter::activate()
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <_ZN14loginPresenter10deactivateEv>:

void loginPresenter::deactivate()
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]

}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <_ZN9loginViewD1Ev>:

class loginView : public loginViewBase
{
public:
    loginView();
    virtual ~loginView() {}
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	4a05      	ldr	r2, [pc, #20]	@ (800b440 <_ZN9loginViewD1Ev+0x20>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff fc49 	bl	800acc8 <_ZN13loginViewBaseD1Ev>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	08023178 	.word	0x08023178

0800b444 <_ZN9loginViewD0Ev>:
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ffe7 	bl	800b420 <_ZN9loginViewD1Ev>
 800b452:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f015 fe8d 	bl	8021176 <_ZdlPvj>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <_ZN9loginViewC1Ev>:
#include <gui/login_screen/loginView.hpp>

loginView::loginView()
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe fb7e 	bl	8009b74 <_ZN13loginViewBaseC1Ev>
 800b478:	4a03      	ldr	r2, [pc, #12]	@ (800b488 <_ZN9loginViewC1Ev+0x20>)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
{

}
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08023178 	.word	0x08023178

0800b48c <_ZN9loginView11setupScreenEv>:

void loginView::setupScreen()
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
    loginViewBase::setupScreen();
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fc89 	bl	800adae <_ZN13loginViewBase11setupScreenEv>
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <_ZN9loginView14tearDownScreenEv>:

void loginView::tearDownScreen()
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
    loginViewBase::tearDownScreen();
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe f91e 	bl	80096f0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
{

}
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <_ZN5Model4tickEv>:

void Model::tick()
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]

}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
    {
 800b4f4:	4a04      	ldr	r2, [pc, #16]	@ (800b508 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	601a      	str	r2, [r3, #0]
    }
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	080231c4 	.word	0x080231c4

0800b50c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
    }
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ffe9 	bl	800b4ec <_ZN8touchgfx15TouchControllerD1Ev>
 800b51a:	2104      	movs	r1, #4
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f015 fe2a 	bl	8021176 <_ZdlPvj>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
	...

0800b55c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	4a05      	ldr	r2, [pc, #20]	@ (800b57c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7ff ffbd 	bl	800b4ec <_ZN8touchgfx15TouchControllerD1Ev>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	080231ac 	.word	0x080231ac

0800b580 <_ZN20STM32TouchControllerD0Ev>:
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff ffe7 	bl	800b55c <_ZN20STM32TouchControllerD1Ev>
 800b58e:	2104      	movs	r1, #4
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f015 fdf0 	bl	8021176 <_ZdlPvj>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0

}
 800b5a4:	bf00      	nop
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
	...

0800b5b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d80c      	bhi.n	800b5da <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800b5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b5d9 	.word	0x0800b5d9
 800b5cc:	0800b5d9 	.word	0x0800b5d9
 800b5d0:	0800b5d9 	.word	0x0800b5d9
 800b5d4:	0800b5d9 	.word	0x0800b5d9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800b5d8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800b5da:	bf00      	nop
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop

0800b5e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d80c      	bhi.n	800b612 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800b5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b600 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b611 	.word	0x0800b611
 800b608:	0800b611 	.word	0x0800b611
 800b60c:	0800b611 	.word	0x0800b611
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800b610:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop

0800b620 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d80c      	bhi.n	800b64a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800b630:	a201      	add	r2, pc, #4	@ (adr r2, 800b638 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800b632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b636:	bf00      	nop
 800b638:	0800b649 	.word	0x0800b649
 800b63c:	0800b649 	.word	0x0800b649
 800b640:	0800b649 	.word	0x0800b649
 800b644:	0800b649 	.word	0x0800b649
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800b648:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop

0800b658 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
    {
 800b660:	4a04      	ldr	r2, [pc, #16]	@ (800b674 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
    }
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	080235cc 	.word	0x080235cc

0800b678 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
    }
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff ffe9 	bl	800b658 <_ZN8touchgfx3HALD1Ev>
 800b686:	2184      	movs	r1, #132	@ 0x84
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f015 fd74 	bl	8021176 <_ZdlPvj>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	78fa      	ldrb	r2, [r7, #3]
 800b6a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	807b      	strh	r3, [r7, #2]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	887a      	ldrh	r2, [r7, #2]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d304      	bcc.n	800b6e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800b6da:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	883a      	ldrh	r2, [r7, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d205      	bcs.n	800b6f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800b6e4:	4b09      	ldr	r3, [pc, #36]	@ (800b70c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800b6e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b710 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800b6e8:	21a3      	movs	r1, #163	@ 0xa3
 800b6ea:	480a      	ldr	r0, [pc, #40]	@ (800b714 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800b6ec:	f015 fd72 	bl	80211d4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800b6f0:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800b6f2:	887b      	ldrh	r3, [r7, #2]
 800b6f4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800b6f6:	4a09      	ldr	r2, [pc, #36]	@ (800b71c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800b6f8:	883b      	ldrh	r3, [r7, #0]
 800b6fa:	8013      	strh	r3, [r2, #0]
    }
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	2002b020 	.word	0x2002b020
 800b708:	2002b022 	.word	0x2002b022
 800b70c:	080229e8 	.word	0x080229e8
 800b710:	08022a4c 	.word	0x08022a4c
 800b714:	08022a90 	.word	0x08022a90
 800b718:	2002b026 	.word	0x2002b026
 800b71c:	2002b028 	.word	0x2002b028

0800b720 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
    }
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4610      	mov	r0, r2
 800b754:	4798      	blx	r3
 800b756:	4603      	mov	r3, r0
 800b758:	e000      	b.n	800b75c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800b75a:	2300      	movs	r3, #0
    }
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f002 fbbb 	bl	800dee8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	33bc      	adds	r3, #188	@ 0xbc
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	4798      	blx	r3
    }
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800b790:	2300      	movs	r3, #0
    }
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
	...

0800b7a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800b7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800b7b6:	4a10      	ldr	r2, [pc, #64]	@ (800b7f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800b7b8:	f240 21ff 	movw	r1, #767	@ 0x2ff
 800b7bc:	480f      	ldr	r0, [pc, #60]	@ (800b7fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800b7be:	f015 fd09 	bl	80211d4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bf14      	ite	ne
 800b7d4:	2301      	movne	r3, #1
 800b7d6:	2300      	moveq	r3, #0
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800b7dc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3390      	adds	r3, #144	@ 0x90
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	4798      	blx	r3
    }
 800b7ec:	bf00      	nop
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	08022ad4 	.word	0x08022ad4
 800b7f8:	08022b0c 	.word	0x08022b0c
 800b7fc:	08022a90 	.word	0x08022a90
 800b800:	2002b02a 	.word	0x2002b02a

0800b804 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	bf14      	ite	ne
 800b81a:	2301      	movne	r3, #1
 800b81c:	2300      	moveq	r3, #0
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	4b03      	ldr	r3, [pc, #12]	@ (800b830 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800b822:	701a      	strb	r2, [r3, #0]
    }
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	2002b02b 	.word	0x2002b02b

0800b834 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	807b      	strh	r3, [r7, #2]
    {
    }
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b854:	2300      	movs	r3, #0
    }
 800b856:	4618      	mov	r0, r3
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800b862:	b580      	push	{r7, lr}
 800b864:	b082      	sub	sp, #8
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b87a:	887a      	ldrh	r2, [r7, #2]
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
        }
    }
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800b890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3318      	adds	r3, #24
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4798      	blx	r3
 800b8ba:	4603      	mov	r3, r0
    }
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
    {
    }
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d011      	beq.n	800b914 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800b8f0:	4b14      	ldr	r3, [pc, #80]	@ (800b944 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11e      	bne.n	800b936 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800b8f8:	4b13      	ldr	r3, [pc, #76]	@ (800b948 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b8fe:	4b13      	ldr	r3, [pc, #76]	@ (800b94c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b900:	881a      	ldrh	r2, [r3, #0]
 800b902:	4b11      	ldr	r3, [pc, #68]	@ (800b948 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b904:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800b906:	4a11      	ldr	r2, [pc, #68]	@ (800b94c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b908:	89bb      	ldrh	r3, [r7, #12]
 800b90a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800b90c:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b90e:	2201      	movs	r2, #1
 800b910:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800b912:	e010      	b.n	800b936 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800b914:	4b0b      	ldr	r3, [pc, #44]	@ (800b944 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00c      	beq.n	800b936 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	@ (800b948 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800b922:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b924:	881a      	ldrh	r2, [r3, #0]
 800b926:	4b08      	ldr	r3, [pc, #32]	@ (800b948 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800b928:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800b92a:	4a08      	ldr	r2, [pc, #32]	@ (800b94c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800b92c:	89fb      	ldrh	r3, [r7, #14]
 800b92e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800b930:	4b04      	ldr	r3, [pc, #16]	@ (800b944 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
    }
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	2002b024 	.word	0x2002b024
 800b948:	2002b022 	.word	0x2002b022
 800b94c:	2002b020 	.word	0x2002b020

0800b950 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
    {
    }
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
    {
    }
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
    {
    }
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4618      	mov	r0, r3
 800b998:	f001 fcc2 	bl	800d320 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	4a05      	ldr	r2, [pc, #20]	@ (800b9c4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff fe4f 	bl	800b658 <_ZN8touchgfx3HALD1Ev>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08023410 	.word	0x08023410

0800b9c8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ffe7 	bl	800b9a4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800b9d6:	2184      	movs	r1, #132	@ 0x84
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f015 fbcc 	bl	8021176 <_ZdlPvj>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff ffca 	bl	800b98c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of initialize().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.
    TouchGFXGeneratedHAL::initialize();
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 f924 	bl	800cc58 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 f97c 	bl	800cd20 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800ba28:	4603      	mov	r3, r0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f001 f97b 	bl	800cd3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f001 f978 	bl	800cd52 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	60f8      	str	r0, [r7, #12]
 800ba72:	60b9      	str	r1, [r7, #8]
 800ba74:	607a      	str	r2, [r7, #4]
 800ba76:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	f001 f975 	bl	800cd6e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800ba84:	4603      	mov	r3, r0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b082      	sub	sp, #8
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 f8ff 	bl	800cc9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800ba9e:	bf00      	nop
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 f8fd 	bl	800ccb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 f8fb 	bl	800ccc4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f8f9 	bl	800ccd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800bae6:	bf00      	nop
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 f8f7 	bl	800ccec <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800bafe:	4603      	mov	r3, r0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 f8f7 	bl	800cd06 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	4a05      	ldr	r2, [pc, #20]	@ (800bb40 <_ZN11TouchGFXHALD1Ev+0x20>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff ff37 	bl	800b9a4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	080231dc 	.word	0x080231dc

0800bb44 <_ZN11TouchGFXHALD0Ev>:
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff ffe7 	bl	800bb20 <_ZN11TouchGFXHALD1Ev>
 800bb52:	2184      	movs	r1, #132	@ 0x84
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f015 fb0e 	bl	8021176 <_ZdlPvj>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	f7f8 ffe4 	bl	8004b3a <osSemaphoreNew>
 800bb72:	4603      	mov	r3, r0
 800bb74:	4a0f      	ldr	r2, [pc, #60]	@ (800bbb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800bb76:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800bb78:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800bb80:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800bb82:	4a0e      	ldr	r2, [pc, #56]	@ (800bbbc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800bb84:	2128      	movs	r1, #40	@ 0x28
 800bb86:	480e      	ldr	r0, [pc, #56]	@ (800bbc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800bb88:	f015 fb24 	bl	80211d4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2104      	movs	r1, #4
 800bb90:	2001      	movs	r0, #1
 800bb92:	f7f9 f8f1 	bl	8004d78 <osMessageQueueNew>
 800bb96:	4603      	mov	r3, r0
 800bb98:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800bb9a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800bb9c:	4b09      	ldr	r3, [pc, #36]	@ (800bbc4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800bba4:	4b08      	ldr	r3, [pc, #32]	@ (800bbc8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800bba6:	4a05      	ldr	r2, [pc, #20]	@ (800bbbc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800bba8:	212c      	movs	r1, #44	@ 0x2c
 800bbaa:	4805      	ldr	r0, [pc, #20]	@ (800bbc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800bbac:	f015 fb12 	bl	80211d4 <__assert_func>
}
 800bbb0:	bf00      	nop
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	2002a918 	.word	0x2002a918
 800bbb8:	08022b5c 	.word	0x08022b5c
 800bbbc:	08022ba8 	.word	0x08022ba8
 800bbc0:	08022bd8 	.word	0x08022bd8
 800bbc4:	2002a91c 	.word	0x2002a91c
 800bbc8:	08022c04 	.word	0x08022c04

0800bbcc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f04f 31ff 	mov.w	r1, #4294967295
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f9 f837 	bl	8004c4c <osSemaphoreAcquire>
}
 800bbde:	bf00      	nop
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	2002a918 	.word	0x2002a918

0800bbe8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800bbec:	4b03      	ldr	r3, [pc, #12]	@ (800bbfc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f9 f87d 	bl	8004cf0 <osSemaphoreRelease>
}
 800bbf6:	bf00      	nop
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	2002a918 	.word	0x2002a918

0800bc00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800bc04:	4b03      	ldr	r3, [pc, #12]	@ (800bc14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f9 f81e 	bl	8004c4c <osSemaphoreAcquire>
}
 800bc10:	bf00      	nop
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	2002a918 	.word	0x2002a918

0800bc18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800bc1c:	4b03      	ldr	r3, [pc, #12]	@ (800bc2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7f9 f865 	bl	8004cf0 <osSemaphoreRelease>
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	2002a918 	.word	0x2002a918

0800bc30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800bc36:	4b09      	ldr	r3, [pc, #36]	@ (800bc5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	1d39      	adds	r1, r7, #4
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f7f9 f90e 	bl	8004e60 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	1d39      	adds	r1, r7, #4
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f7f9 f906 	bl	8004e60 <osMessageQueueGet>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	2002a91c 	.word	0x2002a91c

0800bc60 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
        : color(0)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]
    }
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
    {
 800bc84:	4a04      	ldr	r2, [pc, #16]	@ (800bc98 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	601a      	str	r2, [r3, #0]
    }
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	08023318 	.word	0x08023318

0800bc9c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
    }
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff ffe9 	bl	800bc7c <_ZN8touchgfx9DMA_QueueD1Ev>
 800bcaa:	2104      	movs	r1, #4
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f015 fa62 	bl	8021176 <_ZdlPvj>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
    {
    }
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800bcd8:	2300      	movs	r3, #0
    }
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
    {
 800bcf0:	4a04      	ldr	r2, [pc, #16]	@ (800bd04 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
    }
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	080236b8 	.word	0x080236b8

0800bd08 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
    }
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff ffe9 	bl	800bce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800bd16:	210c      	movs	r1, #12
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f015 fa2c 	bl	8021176 <_ZdlPvj>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800bd32:	4a09      	ldr	r2, [pc, #36]	@ (800bd58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	605a      	str	r2, [r3, #4]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	721a      	strb	r2, [r3, #8]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	725a      	strb	r2, [r3, #9]
    {
    }
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	080236b8 	.word	0x080236b8

0800bd5c <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    {
    }
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    {
    }
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	4a05      	ldr	r2, [pc, #20]	@ (800bda4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff ff71 	bl	800bc7c <_ZN8touchgfx9DMA_QueueD1Ev>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	08023708 	.word	0x08023708

0800bda8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff ffe7 	bl	800bd84 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800bdb6:	2114      	movs	r1, #20
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f015 f9dc 	bl	8021176 <_ZdlPvj>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff ff43 	bl	800bc60 <_ZN8touchgfx9colortypeC1Ev>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	330c      	adds	r3, #12
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7ff ff97 	bl	800bd28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800bdfa:	4a0b      	ldr	r2, [pc, #44]	@ (800be28 <_ZN8STM32DMAC1Ev+0x44>)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f103 000c 	add.w	r0, r3, #12
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3320      	adds	r3, #32
 800be0a:	2201      	movs	r2, #1
 800be0c:	4619      	mov	r1, r3
 800be0e:	f002 f9a3 	bl	800e158 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3320      	adds	r3, #32
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff ffd6 	bl	800bdc8 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	080232c8 	.word	0x080232c8

0800be2c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800be4e:	4b03      	ldr	r3, [pc, #12]	@ (800be5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800be50:	4a03      	ldr	r2, [pc, #12]	@ (800be60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800be52:	2122      	movs	r1, #34	@ 0x22
 800be54:	4803      	ldr	r0, [pc, #12]	@ (800be64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800be56:	f015 f9bd 	bl	80211d4 <__assert_func>
 800be5a:	bf00      	nop
 800be5c:	08022c48 	.word	0x08022c48
 800be60:	08022c6c 	.word	0x08022c6c
 800be64:	08022cac 	.word	0x08022cac

0800be68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800be72:	4b03      	ldr	r3, [pc, #12]	@ (800be80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800be74:	4a03      	ldr	r2, [pc, #12]	@ (800be84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800be76:	2127      	movs	r1, #39	@ 0x27
 800be78:	4803      	ldr	r0, [pc, #12]	@ (800be88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800be7a:	f015 f9ab 	bl	80211d4 <__assert_func>
 800be7e:	bf00      	nop
 800be80:	08022c48 	.word	0x08022c48
 800be84:	08022cd8 	.word	0x08022cd8
 800be88:	08022cac 	.word	0x08022cac

0800be8c <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	4a08      	ldr	r2, [pc, #32]	@ (800beb8 <_ZN8STM32DMAD1Ev+0x2c>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	330c      	adds	r3, #12
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7ff ff70 	bl	800bd84 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff ff1e 	bl	800bce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4618      	mov	r0, r3
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	080232c8 	.word	0x080232c8

0800bebc <_ZN8STM32DMAD0Ev>:
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ffe1 	bl	800be8c <_ZN8STM32DMAD1Ev>
 800beca:	2144      	movs	r1, #68	@ 0x44
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f015 f952 	bl	8021176 <_ZdlPvj>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800bee4:	4a04      	ldr	r2, [pc, #16]	@ (800bef8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6013      	str	r3, [r2, #0]
    }
 800beea:	bf00      	nop
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	2002b088 	.word	0x2002b088

0800befc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800bf0a:	4a0b      	ldr	r2, [pc, #44]	@ (800bf38 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	611a      	str	r2, [r3, #16]
    {
    }
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	08023400 	.word	0x08023400

0800bf3c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    {
 800bf44:	4a04      	ldr	r2, [pc, #16]	@ (800bf58 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
    }
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	08023400 	.word	0x08023400

0800bf5c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
    }
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ffe9 	bl	800bf3c <_ZN8touchgfx7MVPHeapD1Ev>
 800bf6a:	2114      	movs	r1, #20
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f015 f902 	bl	8021176 <_ZdlPvj>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
    {
 800bf84:	4a04      	ldr	r2, [pc, #16]	@ (800bf98 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	601a      	str	r2, [r3, #0]
    }
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	080238ec 	.word	0x080238ec

0800bf9c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
    }
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7ff ffe9 	bl	800bf7c <_ZN8touchgfx3LCDD1Ev>
 800bfaa:	210c      	movs	r1, #12
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f015 f8e2 	bl	8021176 <_ZdlPvj>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
            : startX(0),
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	801a      	strh	r2, [r3, #0]
              startY(0),
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	805a      	strh	r2, [r3, #2]
              downX(0),
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	809a      	strh	r2, [r3, #4]
              downY(0),
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	739a      	strb	r2, [r3, #14]
        {
        }
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff ffd5 	bl	800bfbc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	611a      	str	r2, [r3, #16]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	829a      	strh	r2, [r3, #20]
    {
    }
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 800c036:	4a65      	ldr	r2, [pc, #404]	@ (800c1cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	619a      	str	r2, [r3, #24]
          gestures(),
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	331c      	adds	r3, #28
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff ffcc 	bl	800c002 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3350      	adds	r3, #80	@ 0x50
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fd f8d4 	bl	8009262 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2204      	movs	r2, #4
 800c14e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 800c152:	8bbb      	ldrh	r3, [r7, #28]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 800c15a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c15e:	b29a      	uxth	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800c16c:	4a18      	ldr	r2, [pc, #96]	@ (800c1d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 800c16e:	fba2 2303 	umull	r2, r3, r2, r3
 800c172:	085b      	lsrs	r3, r3, #1
 800c174:	b29a      	uxth	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2214      	movs	r2, #20
 800c180:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 800c184:	4a13      	ldr	r2, [pc, #76]	@ (800c1d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800c18a:	4a13      	ldr	r2, [pc, #76]	@ (800c1d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 800c18c:	8b3b      	ldrh	r3, [r7, #24]
 800c18e:	8013      	strh	r3, [r2, #0]
 800c190:	4b11      	ldr	r3, [pc, #68]	@ (800c1d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 800c192:	881a      	ldrh	r2, [r3, #0]
 800c194:	4b11      	ldr	r3, [pc, #68]	@ (800c1dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 800c196:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800c198:	4a11      	ldr	r2, [pc, #68]	@ (800c1e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 800c19a:	8bbb      	ldrh	r3, [r7, #28]
 800c19c:	8013      	strh	r3, [r2, #0]
 800c19e:	4b10      	ldr	r3, [pc, #64]	@ (800c1e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 800c1a0:	881a      	ldrh	r2, [r3, #0]
 800c1a2:	4b10      	ldr	r3, [pc, #64]	@ (800c1e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 800c1a4:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800c1a6:	4b10      	ldr	r3, [pc, #64]	@ (800c1e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800c1ac:	8b3a      	ldrh	r2, [r7, #24]
 800c1ae:	8bbb      	ldrh	r3, [r7, #28]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	bf34      	ite	cc
 800c1b4:	2301      	movcc	r3, #1
 800c1b6:	2300      	movcs	r3, #0
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	080235cc 	.word	0x080235cc
 800c1d0:	aaaaaaab 	.word	0xaaaaaaab
 800c1d4:	2002b02c 	.word	0x2002b02c
 800c1d8:	2002b020 	.word	0x2002b020
 800c1dc:	2002b026 	.word	0x2002b026
 800c1e0:	2002b022 	.word	0x2002b022
 800c1e4:	2002b028 	.word	0x2002b028
 800c1e8:	2002b024 	.word	0x2002b024

0800c1ec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
    {
        app.gotologinScreenNoTransition();
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fc fdb7 	bl	8008d6c <_ZN23FrontendApplicationBase27gotologinScreenNoTransitionEv>
    }
 800c1fe:	bf00      	nop
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	f7ff fe6b 	bl	800befc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800c226:	4a04      	ldr	r2, [pc, #16]	@ (800c238 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	601a      	str	r2, [r3, #0]
    {

    }
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	080233ec 	.word	0x080233ec

0800c23c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	4a05      	ldr	r2, [pc, #20]	@ (800c25c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff fe75 	bl	800bf3c <_ZN8touchgfx7MVPHeapD1Ev>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	080233ec 	.word	0x080233ec

0800c260 <_ZN16FrontendHeapBaseD0Ev>:
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff ffe7 	bl	800c23c <_ZN16FrontendHeapBaseD1Ev>
 800c26e:	2114      	movs	r1, #20
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f014 ff80 	bl	8021176 <_ZdlPvj>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4618      	mov	r0, r3
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	4a05      	ldr	r2, [pc, #20]	@ (800c2a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fda1 	bl	800cdd8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	080233b8 	.word	0x080233b8

0800c2a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff ffe7 	bl	800c280 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c2b2:	2118      	movs	r1, #24
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f014 ff5e 	bl	8021176 <_ZdlPvj>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	4a05      	ldr	r2, [pc, #20]	@ (800c2e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fd7f 	bl	800cdd8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08023384 	.word	0x08023384

0800c2e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff ffe7 	bl	800c2c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c2f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f014 ff3b 	bl	8021176 <_ZdlPvj>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	4a05      	ldr	r2, [pc, #20]	@ (800c32c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fd5b 	bl	800cdd8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	08023350 	.word	0x08023350

0800c330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff ffe7 	bl	800c30c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c33e:	2114      	movs	r1, #20
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f014 ff18 	bl	8021176 <_ZdlPvj>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4618      	mov	r0, r3
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	4a10      	ldr	r2, [pc, #64]	@ (800c39c <_ZN12FrontendHeapD1Ev+0x4c>)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe ff2f 	bl	800b1c8 <_ZN19FrontendApplicationD1Ev>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff ffcb 	bl	800c30c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	332c      	adds	r3, #44	@ 0x2c
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff ffa2 	bl	800c2c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	3314      	adds	r3, #20
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff ff7b 	bl	800c280 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ff55 	bl	800c23c <_ZN16FrontendHeapBaseD1Ev>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	0802333c 	.word	0x0802333c

0800c3a0 <_ZN12FrontendHeapD0Ev>:
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff ffd1 	bl	800c350 <_ZN12FrontendHeapD1Ev>
 800c3ae:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f014 fedf 	bl	8021176 <_ZdlPvj>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	4801      	ldr	r0, [pc, #4]	@ (800c3d0 <__tcf_0+0xc>)
 800c3ca:	f7ff ffc1 	bl	800c350 <_ZN12FrontendHeapD1Ev>
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	2002a920 	.word	0x2002a920

0800c3d4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800c3d8:	4b11      	ldr	r3, [pc, #68]	@ (800c420 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f3bf 8f5b 	dmb	ish
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bf0c      	ite	eq
 800c3e8:	2301      	moveq	r3, #1
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d013      	beq.n	800c41a <_ZN12FrontendHeap11getInstanceEv+0x46>
 800c3f2:	480b      	ldr	r0, [pc, #44]	@ (800c420 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c3f4:	f014 fec1 	bl	802117a <__cxa_guard_acquire>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bf14      	ite	ne
 800c3fe:	2301      	movne	r3, #1
 800c400:	2300      	moveq	r3, #0
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d008      	beq.n	800c41a <_ZN12FrontendHeap11getInstanceEv+0x46>
 800c408:	4806      	ldr	r0, [pc, #24]	@ (800c424 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800c40a:	f000 f845 	bl	800c498 <_ZN12FrontendHeapC1Ev>
 800c40e:	4806      	ldr	r0, [pc, #24]	@ (800c428 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800c410:	f014 fefe 	bl	8021210 <atexit>
 800c414:	4802      	ldr	r0, [pc, #8]	@ (800c420 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800c416:	f014 febc 	bl	8021192 <__cxa_guard_release>
        return instance;
 800c41a:	4b02      	ldr	r3, [pc, #8]	@ (800c424 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800c41c:	4618      	mov	r0, r3
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	2002aec0 	.word	0x2002aec0
 800c424:	2002a920 	.word	0x2002a920
 800c428:	0800c3c5 	.word	0x0800c3c5

0800c42c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fcd0 	bl	800cddc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c43c:	4a03      	ldr	r2, [pc, #12]	@ (800c44c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	080233b8 	.word	0x080233b8

0800c450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fcbe 	bl	800cddc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c460:	4a03      	ldr	r2, [pc, #12]	@ (800c470 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	08023384 	.word	0x08023384

0800c474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 fcac 	bl	800cddc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800c484:	4a03      	ldr	r2, [pc, #12]	@ (800c494 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	08023350 	.word	0x08023350

0800c498 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c498:	b590      	push	{r4, r7, lr}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af02      	add	r7, sp, #8
 800c49e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f103 0114 	add.w	r1, r3, #20
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f203 442c 	addw	r4, r3, #1068	@ 0x42c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f203 4344 	addw	r3, r3, #1092	@ 0x444
                     app(model, *this)
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	4623      	mov	r3, r4
 800c4be:	f7ff fea3 	bl	800c208 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800c4c2:	4a18      	ldr	r2, [pc, #96]	@ (800c524 <_ZN12FrontendHeapC1Ev+0x8c>)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3314      	adds	r3, #20
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff ffad 	bl	800c42c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	332c      	adds	r3, #44	@ 0x2c
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff ffba 	bl	800c450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff ffc6 	bl	800c474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fe ffe4 	bl	800b4bc <_ZN5ModelC1Ev>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f203 4044 	addw	r0, r3, #1092	@ 0x444
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4619      	mov	r1, r3
 800c504:	f7fe fe96 	bl	800b234 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7ff fe6a 	bl	800c1ec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd90      	pop	{r4, r7, pc}
 800c522:	bf00      	nop
 800c524:	0802333c 	.word	0x0802333c

0800c528 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af02      	add	r7, sp, #8
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
 800c534:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	8bbb      	ldrh	r3, [r7, #28]
 800c53a:	9301      	str	r3, [sp, #4]
 800c53c:	8b3b      	ldrh	r3, [r7, #24]
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	f7ff fd6f 	bl	800c028 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800c54a:	4a04      	ldr	r2, [pc, #16]	@ (800c55c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	601a      	str	r2, [r3, #0]
    }
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	08023410 	.word	0x08023410

0800c560 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af02      	add	r7, sp, #8
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	603b      	str	r3, [r7, #0]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	8bbb      	ldrh	r3, [r7, #28]
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	8b3b      	ldrh	r3, [r7, #24]
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	f7ff ffd3 	bl	800c528 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c582:	4a04      	ldr	r2, [pc, #16]	@ (800c594 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	601a      	str	r2, [r3, #0]
    }
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	080231dc 	.word	0x080231dc

0800c598 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	4a04      	ldr	r2, [pc, #16]	@ (800c5b4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	601a      	str	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	080231c4 	.word	0x080231c4

0800c5b8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff ffe8 	bl	800c598 <_ZN8touchgfx15TouchControllerC1Ev>
 800c5c8:	4a03      	ldr	r2, [pc, #12]	@ (800c5d8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	080231ac 	.word	0x080231ac

0800c5dc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800c5e2:	f7fe fc05 	bl	800adf0 <_ZN14BitmapDatabase11getInstanceEv>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	f7fe fc0c 	bl	800ae04 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f006 fa7f 	bl	8012afc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800c5fe:	4809      	ldr	r0, [pc, #36]	@ (800c624 <touchgfx_init+0x48>)
 800c600:	f7ff fc6c 	bl	800bedc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800c604:	2000      	movs	r0, #0
 800c606:	f7fe fd41 	bl	800b08c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800c60a:	4807      	ldr	r0, [pc, #28]	@ (800c628 <touchgfx_init+0x4c>)
 800c60c:	f006 f9de 	bl	80129cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800c610:	f7ff fee0 	bl	800c3d4 <_ZN12FrontendHeap11getInstanceEv>
 800c614:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800c616:	4805      	ldr	r0, [pc, #20]	@ (800c62c <touchgfx_init+0x50>)
 800c618:	f7ff f9f2 	bl	800ba00 <_ZN11TouchGFXHAL10initializeEv>
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	bd90      	pop	{r4, r7, pc}
 800c624:	2002af98 	.word	0x2002af98
 800c628:	20000014 	.word	0x20000014
 800c62c:	2002af9c 	.word	0x2002af9c

0800c630 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800c630:	b480      	push	{r7}
 800c632:	af00      	add	r7, sp, #0
}
 800c634:	bf00      	nop
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
	...

0800c640 <_Z41__static_initialization_and_destruction_0v>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 800c646:	480b      	ldr	r0, [pc, #44]	@ (800c674 <_Z41__static_initialization_and_destruction_0v+0x34>)
 800c648:	f7ff ffb6 	bl	800c5b8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800c64c:	480a      	ldr	r0, [pc, #40]	@ (800c678 <_Z41__static_initialization_and_destruction_0v+0x38>)
 800c64e:	f7ff fbc9 	bl	800bde4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800c652:	480a      	ldr	r0, [pc, #40]	@ (800c67c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800c654:	f00b fb4e 	bl	8017cf4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800c658:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	23f0      	movs	r3, #240	@ 0xf0
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <_Z41__static_initialization_and_destruction_0v+0x34>)
 800c664:	4a05      	ldr	r2, [pc, #20]	@ (800c67c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800c666:	4904      	ldr	r1, [pc, #16]	@ (800c678 <_Z41__static_initialization_and_destruction_0v+0x38>)
 800c668:	4805      	ldr	r0, [pc, #20]	@ (800c680 <_Z41__static_initialization_and_destruction_0v+0x40>)
 800c66a:	f7ff ff79 	bl	800c560 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800c66e:	bf00      	nop
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2002aec4 	.word	0x2002aec4
 800c678:	2002aec8 	.word	0x2002aec8
 800c67c:	2002af0c 	.word	0x2002af0c
 800c680:	2002af9c 	.word	0x2002af9c

0800c684 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	4a05      	ldr	r2, [pc, #20]	@ (800c6a4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff fc71 	bl	800bf7c <_ZN8touchgfx3LCDD1Ev>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	08023d74 	.word	0x08023d74

0800c6a8 <_ZN8touchgfx8LCD16bppD0Ev>:
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff ffe7 	bl	800c684 <_ZN8touchgfx8LCD16bppD1Ev>
 800c6b6:	218c      	movs	r1, #140	@ 0x8c
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f014 fd5c 	bl	8021176 <_ZdlPvj>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <_Z41__static_initialization_and_destruction_1v>:
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800c6cc:	4808      	ldr	r0, [pc, #32]	@ (800c6f0 <_Z41__static_initialization_and_destruction_1v+0x28>)
 800c6ce:	f7ff fa27 	bl	800bb20 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800c6d2:	4808      	ldr	r0, [pc, #32]	@ (800c6f4 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 800c6d4:	f7fb fd5c 	bl	8008190 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800c6d8:	4807      	ldr	r0, [pc, #28]	@ (800c6f8 <_Z41__static_initialization_and_destruction_1v+0x30>)
 800c6da:	f7ff ffd3 	bl	800c684 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800c6de:	4807      	ldr	r0, [pc, #28]	@ (800c6fc <_Z41__static_initialization_and_destruction_1v+0x34>)
 800c6e0:	f7ff fbd4 	bl	800be8c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800c6e4:	4806      	ldr	r0, [pc, #24]	@ (800c700 <_Z41__static_initialization_and_destruction_1v+0x38>)
 800c6e6:	f7fe ff39 	bl	800b55c <_ZN20STM32TouchControllerD1Ev>
}
 800c6ea:	bf00      	nop
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	2002af9c 	.word	0x2002af9c
 800c6f4:	20000014 	.word	0x20000014
 800c6f8:	2002af0c 	.word	0x2002af0c
 800c6fc:	2002aec8 	.word	0x2002aec8
 800c700:	2002aec4 	.word	0x2002aec4

0800c704 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800c70c:	2301      	movs	r3, #1
    }
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800c722:	230c      	movs	r3, #12
    }
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c73c:	887a      	ldrh	r2, [r7, #2]
 800c73e:	4613      	mov	r3, r2
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	3308      	adds	r3, #8
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	4413      	add	r3, r2
    }
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c764:	887a      	ldrh	r2, [r7, #2]
 800c766:	4613      	mov	r3, r2
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	3308      	adds	r3, #8
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	4413      	add	r3, r2
    }
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c788:	2301      	movs	r3, #1
    }
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800c79e:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
    }
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c7ba:	887a      	ldrh	r2, [r7, #2]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	01db      	lsls	r3, r3, #7
 800c7c0:	1a9b      	subs	r3, r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	4413      	add	r3, r2
    }
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI9loginViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c7e2:	887a      	ldrh	r2, [r7, #2]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	01db      	lsls	r3, r3, #7
 800c7e8:	1a9b      	subs	r3, r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
    }
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c806:	2301      	movs	r3, #1
    }
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800c81c:	2310      	movs	r3, #16
    }
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <_ZN8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	460b      	mov	r3, r1
 800c834:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	3308      	adds	r3, #8
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	4413      	add	r3, r2
    }
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14loginPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c858:	887b      	ldrh	r3, [r7, #2]
 800c85a:	011b      	lsls	r3, r3, #4
 800c85c:	3308      	adds	r3, #8
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4413      	add	r3, r2
    }
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <_GLOBAL__sub_I_touchgfx_init>:
 800c86e:	b580      	push	{r7, lr}
 800c870:	af00      	add	r7, sp, #0
 800c872:	f7ff fee5 	bl	800c640 <_Z41__static_initialization_and_destruction_0v>
 800c876:	bd80      	pop	{r7, pc}

0800c878 <_GLOBAL__sub_D_touchgfx_init>:
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	f7ff ff24 	bl	800c6c8 <_Z41__static_initialization_and_destruction_1v>
 800c880:	bd80      	pop	{r7, pc}

0800c882 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
        return color;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
    }
 800c88e:	4618      	mov	r0, r3
 800c890:	370c      	adds	r7, #12
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <_ZN8touchgfx5paint8tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown()
{
 800c89a:	b480      	push	{r7}
 800c89c:	af00      	add	r7, sp, #0
}
 800c89e:	bf00      	nop
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>:

void flushLine(uint32_t* addr, int sizebytes)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:
        } while (++framebuffer < lineEnd);
    }
}

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b08d      	sub	sp, #52	@ 0x34
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint16_t* bitmapPointer = data;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint16_t* const chunkend = framebuffer + count;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8dc:	4413      	add	r3, r2
 800c8de:	627b      	str	r3, [r7, #36]	@ 0x24

    if (alpha == 0xFF)
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	2bff      	cmp	r3, #255	@ 0xff
 800c8e4:	d112      	bne.n	800c90c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
    {
        do
        {
            *framebuffer = *bitmapPointer++;
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	1c9a      	adds	r2, r3, #2
 800c8ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 800c8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f4:	3302      	adds	r3, #2
 800c8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	bf34      	ite	cc
 800c900:	2301      	movcc	r3, #1
 800c902:	2300      	movcs	r3, #0
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1ed      	bne.n	800c8e6 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x26>
        do
        {
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
        } while (++framebuffer < chunkend);
    }
}
 800c90a:	e079      	b.n	800ca00 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x140>
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 800c90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90e:	1c9a      	adds	r2, r3, #2
 800c910:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c912:	881a      	ldrh	r2, [r3, #0]
 800c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	847a      	strh	r2, [r7, #34]	@ 0x22
 800c91a:	843b      	strh	r3, [r7, #32]
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	77fb      	strb	r3, [r7, #31]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 800c920:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c922:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c926:	f023 0307 	bic.w	r3, r3, #7
 800c92a:	b299      	uxth	r1, r3
 800c92c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c92e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800c932:	b29a      	uxth	r2, r3
 800c934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c936:	f003 031f 	and.w	r3, r3, #31
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	83b9      	strh	r1, [r7, #28]
 800c93e:	837a      	strh	r2, [r7, #26]
 800c940:	833b      	strh	r3, [r7, #24]
 800c942:	8c3b      	ldrh	r3, [r7, #32]
 800c944:	82fb      	strh	r3, [r7, #22]
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	757b      	strb	r3, [r7, #21]
    const uint8_t ialpha = 0xFF - alpha;
 800c94a:	7d7b      	ldrb	r3, [r7, #21]
 800c94c:	43db      	mvns	r3, r3
 800c94e:	753b      	strb	r3, [r7, #20]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 800c950:	8bbb      	ldrh	r3, [r7, #28]
 800c952:	7d7a      	ldrb	r2, [r7, #21]
 800c954:	fb03 f202 	mul.w	r2, r3, r2
 800c958:	8afb      	ldrh	r3, [r7, #22]
 800c95a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 800c95e:	7d39      	ldrb	r1, [r7, #20]
 800c960:	fb01 f303 	mul.w	r3, r1, r3
 800c964:	4413      	add	r3, r2
 800c966:	4a29      	ldr	r2, [pc, #164]	@ (800ca0c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 800c968:	fb82 1203 	smull	r1, r2, r2, r3
 800c96c:	441a      	add	r2, r3
 800c96e:	11d2      	asrs	r2, r2, #7
 800c970:	17db      	asrs	r3, r3, #31
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	b21b      	sxth	r3, r3
 800c976:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c97a:	f023 0307 	bic.w	r3, r3, #7
 800c97e:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 800c980:	8b7b      	ldrh	r3, [r7, #26]
 800c982:	7d79      	ldrb	r1, [r7, #21]
 800c984:	fb03 f101 	mul.w	r1, r3, r1
 800c988:	8afb      	ldrh	r3, [r7, #22]
 800c98a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800c98e:	7d38      	ldrb	r0, [r7, #20]
 800c990:	fb00 f303 	mul.w	r3, r0, r3
 800c994:	440b      	add	r3, r1
 800c996:	491d      	ldr	r1, [pc, #116]	@ (800ca0c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 800c998:	fb81 0103 	smull	r0, r1, r1, r3
 800c99c:	4419      	add	r1, r3
 800c99e:	11c9      	asrs	r1, r1, #7
 800c9a0:	17db      	asrs	r3, r3, #31
 800c9a2:	1acb      	subs	r3, r1, r3
 800c9a4:	b21b      	sxth	r3, r3
 800c9a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800c9aa:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 800c9b0:	8b3b      	ldrh	r3, [r7, #24]
 800c9b2:	7d79      	ldrb	r1, [r7, #21]
 800c9b4:	fb03 f101 	mul.w	r1, r3, r1
 800c9b8:	8afb      	ldrh	r3, [r7, #22]
 800c9ba:	f003 031f 	and.w	r3, r3, #31
 800c9be:	7d38      	ldrb	r0, [r7, #20]
 800c9c0:	fb00 f303 	mul.w	r3, r0, r3
 800c9c4:	440b      	add	r3, r1
 800c9c6:	4911      	ldr	r1, [pc, #68]	@ (800ca0c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 800c9c8:	fb81 0103 	smull	r0, r1, r1, r3
 800c9cc:	4419      	add	r1, r3
 800c9ce:	11c9      	asrs	r1, r1, #7
 800c9d0:	17db      	asrs	r3, r3, #31
 800c9d2:	1acb      	subs	r3, r1, r3
 800c9d4:	b21b      	sxth	r3, r3
 800c9d6:	f003 031f 	and.w	r3, r3, #31
 800c9da:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 800c9e0:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 800c9e2:	bf00      	nop
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e6:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	3302      	adds	r3, #2
 800c9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	bf34      	ite	cc
 800c9f6:	2301      	movcc	r3, #1
 800c9f8:	2300      	movcs	r3, #0
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d185      	bne.n	800c90c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
}
 800ca00:	bf00      	nop
 800ca02:	3734      	adds	r7, #52	@ 0x34
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	80808081 	.word	0x80808081

0800ca10 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 800ca10:	b590      	push	{r4, r7, lr}
 800ca12:	b093      	sub	sp, #76	@ 0x4c
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t* bitmapPointer = data;
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	643b      	str	r3, [r7, #64]	@ 0x40
    const uint16_t* const chunkend = framebuffer + count;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2c:	4413      	add	r3, r2
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    do
    {
        const uint8_t srcAlpha = (*bitmapPointer) >> 24;
 800ca30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	0e1b      	lsrs	r3, r3, #24
 800ca36:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        const uint8_t a = LCD::div255(alpha * srcAlpha);
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	fb12 f303 	smulbb	r3, r2, r3
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	867b      	strh	r3, [r7, #50]	@ 0x32
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 800ca4c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ca4e:	3301      	adds	r3, #1
 800ca50:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ca52:	0a12      	lsrs	r2, r2, #8
 800ca54:	b292      	uxth	r2, r2
 800ca56:	4413      	add	r3, r2
 800ca58:	121b      	asrs	r3, r3, #8
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        if (a == 0xFF)
 800ca60:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ca64:	2bff      	cmp	r3, #255	@ 0xff
 800ca66:	d133      	bne.n	800cad0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0xc0>
        {
            *framebuffer = getNativeColor(*bitmapPointer);
 800ca68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f107 0318 	add.w	r3, r7, #24
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fc fbe6 	bl	8009244 <_ZN8touchgfx9colortypeC1Em>
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	617b      	str	r3, [r7, #20]
    return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800ca7c:	f107 0314 	add.w	r3, r7, #20
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fefe 	bl	800c882 <_ZNK8touchgfx9colortypecvmEv>
 800ca86:	4603      	mov	r3, r0
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ca90:	f023 0307 	bic.w	r3, r3, #7
 800ca94:	b29c      	uxth	r4, r3
 800ca96:	f107 0314 	add.w	r3, r7, #20
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff fef1 	bl	800c882 <_ZNK8touchgfx9colortypecvmEv>
 800caa0:	4603      	mov	r3, r0
 800caa2:	095b      	lsrs	r3, r3, #5
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800caaa:	b29b      	uxth	r3, r3
 800caac:	4323      	orrs	r3, r4
 800caae:	b29c      	uxth	r4, r3
 800cab0:	f107 0314 	add.w	r3, r7, #20
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff fee4 	bl	800c882 <_ZNK8touchgfx9colortypecvmEv>
 800caba:	4603      	mov	r3, r0
 800cabc:	08db      	lsrs	r3, r3, #3
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	f003 031f 	and.w	r3, r3, #31
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	4323      	orrs	r3, r4
 800cac8:	b29a      	uxth	r2, r3
            *framebuffer = getNativeColor(*bitmapPointer);
 800caca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cacc:	801a      	strh	r2, [r3, #0]
 800cace:	e0ab      	b.n	800cc28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x218>
        }
        else if (a)
 800cad0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 80a7 	beq.w	800cc28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x218>
        {
            const uint32_t newpix = *bitmapPointer;
 800cada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	637b      	str	r3, [r7, #52]	@ 0x34
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 800cae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae2:	0c1b      	lsrs	r3, r3, #16
 800cae4:	b2d8      	uxtb	r0, r3
 800cae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae8:	0a1b      	lsrs	r3, r3, #8
 800caea:	b2d9      	uxtb	r1, r3
 800caec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	f887 0031 	strb.w	r0, [r7, #49]	@ 0x31
 800caf8:	f887 1030 	strb.w	r1, [r7, #48]	@ 0x30
 800cafc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800cb00:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cb02:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800cb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t ialpha = 0xFF - alpha;
 800cb0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cb0e:	43db      	mvns	r3, r3
 800cb10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cb14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb16:	853b      	strh	r3, [r7, #40]	@ 0x28
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedFromRGB565(uint16_t color)
    {
        const uint8_t red = (color >> 8) & 0xF8;
 800cb18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f023 0307 	bic.w	r3, r3, #7
 800cb24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        return red | (red >> 5);
 800cb28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb2c:	095b      	lsrs	r3, r3, #5
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb34:	4313      	orrs	r3, r2
 800cb36:	b2db      	uxtb	r3, r3
    const uint8_t fbred = Color::getRedFromRGB565(bufpix);
 800cb38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb3c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenFromRGB565(uint16_t color)
    {
        const uint8_t green = (color >> 3) & 0xFC;
 800cb40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f023 0303 	bic.w	r3, r3, #3
 800cb4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        return green | (green >> 6);
 800cb50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb54:	099b      	lsrs	r3, r3, #6
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	b2db      	uxtb	r3, r3
    const uint8_t fbgreen = Color::getGreenFromRGB565(bufpix);
 800cb60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cb64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb66:	843b      	strh	r3, [r7, #32]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueFromRGB565(uint16_t color)
    {
        const uint8_t blue = color << 3;
 800cb68:	8c3b      	ldrh	r3, [r7, #32]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	77fb      	strb	r3, [r7, #31]
        return blue | (blue >> 5);
 800cb70:	7ffb      	ldrb	r3, [r7, #31]
 800cb72:	095b      	lsrs	r3, r3, #5
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	7ffb      	ldrb	r3, [r7, #31]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	b2db      	uxtb	r3, r3
    const uint8_t fbblue = Color::getBlueFromRGB565(bufpix);
 800cb7c:	77bb      	strb	r3, [r7, #30]
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 800cb7e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800cb82:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800cb86:	fb03 f202 	mul.w	r2, r3, r2
 800cb8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb8e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800cb92:	fb01 f303 	mul.w	r3, r1, r3
 800cb96:	4413      	add	r3, r2
 800cb98:	4a2e      	ldr	r2, [pc, #184]	@ (800cc54 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x244>)
 800cb9a:	fb82 1203 	smull	r1, r2, r2, r3
 800cb9e:	441a      	add	r2, r3
 800cba0:	11d2      	asrs	r2, r2, #7
 800cba2:	17db      	asrs	r3, r3, #31
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	b21b      	sxth	r3, r3
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	b21b      	sxth	r3, r3
 800cbac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800cbb0:	f023 0307 	bic.w	r3, r3, #7
 800cbb4:	b21a      	sxth	r2, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 800cbb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800cbba:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800cbbe:	fb03 f101 	mul.w	r1, r3, r1
 800cbc2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cbc6:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 800cbca:	fb00 f303 	mul.w	r3, r0, r3
 800cbce:	440b      	add	r3, r1
 800cbd0:	4920      	ldr	r1, [pc, #128]	@ (800cc54 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x244>)
 800cbd2:	fb81 0103 	smull	r0, r1, r1, r3
 800cbd6:	4419      	add	r1, r3
 800cbd8:	11c9      	asrs	r1, r1, #7
 800cbda:	17db      	asrs	r3, r3, #31
 800cbdc:	1acb      	subs	r3, r1, r3
 800cbde:	b21b      	sxth	r3, r3
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	b21b      	sxth	r3, r3
 800cbe4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800cbe8:	b21b      	sxth	r3, r3
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 800cbea:	4313      	orrs	r3, r2
 800cbec:	b21a      	sxth	r2, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 800cbee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbf2:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800cbf6:	fb03 f101 	mul.w	r1, r3, r1
 800cbfa:	7fbb      	ldrb	r3, [r7, #30]
 800cbfc:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 800cc00:	fb00 f303 	mul.w	r3, r0, r3
 800cc04:	440b      	add	r3, r1
 800cc06:	4913      	ldr	r1, [pc, #76]	@ (800cc54 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x244>)
 800cc08:	fb81 0103 	smull	r0, r1, r1, r3
 800cc0c:	4419      	add	r1, r3
 800cc0e:	11c9      	asrs	r1, r1, #7
 800cc10:	17db      	asrs	r3, r3, #31
 800cc12:	1acb      	subs	r3, r1, r3
 800cc14:	10db      	asrs	r3, r3, #3
 800cc16:	b21b      	sxth	r3, r3
 800cc18:	f003 031f 	and.w	r3, r3, #31
 800cc1c:	b21b      	sxth	r3, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	b21b      	sxth	r3, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 800cc22:	b29a      	uxth	r2, r3
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 800cc24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc26:	801a      	strh	r2, [r3, #0]
        }
        bitmapPointer++;
 800cc28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (++framebuffer < chunkend);
 800cc2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc30:	3302      	adds	r3, #2
 800cc32:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	bf34      	ite	cc
 800cc3c:	2301      	movcc	r3, #1
 800cc3e:	2300      	movcs	r3, #0
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f47f aef4 	bne.w	800ca30 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x20>
}
 800cc48:	bf00      	nop
 800cc4a:	bf00      	nop
 800cc4c:	374c      	adds	r7, #76	@ 0x4c
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd90      	pop	{r4, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	80808081 	.word	0x80808081

0800cc58 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 800cc58:	b5b0      	push	{r4, r5, r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fbb1 	bl	800d3ca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800cc68:	687d      	ldr	r5, [r7, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3368      	adds	r3, #104	@ 0x68
 800cc70:	681c      	ldr	r4, [r3, #0]
 800cc72:	f003 f933 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 800cc76:	4603      	mov	r3, r0
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	338c      	adds	r3, #140	@ 0x8c
 800cc86:	681c      	ldr	r4, [r3, #0]
 800cc88:	2300      	movs	r3, #0
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	4902      	ldr	r1, [pc, #8]	@ (800cc98 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800cc8e:	47a0      	blx	r4
}
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bdb0      	pop	{r4, r5, r7, pc}
 800cc98:	200000f8 	.word	0x200000f8

0800cc9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 fb4e 	bl	800d398 <_ZN8touchgfx3HAL10beginFrameEv>
 800ccfc:	4603      	mov	r3, r0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fb4d 	bl	800d3b0 <_ZN8touchgfx3HAL8endFrameEv>
}
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 800cd28:	4b03      	ldr	r3, [pc, #12]	@ (800cd38 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	200000f8 	.word	0x200000f8

0800cd3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b082      	sub	sp, #8
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fae3 	bl	800d32c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	607a      	str	r2, [r7, #4]
 800cd7a:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	f000 fc55 	bl	800d632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800cd88:	4603      	mov	r3, r0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800cd92:	8880      	ldrh	r0, [r0, #4]
 800cd94:	4770      	bx	lr

0800cd96 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800cd96:	b570      	push	{r4, r5, r6, lr}
 800cd98:	6803      	ldr	r3, [r0, #0]
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda0:	2100      	movs	r1, #0
 800cda2:	4798      	blx	r3
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	4606      	mov	r6, r0
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	4628      	mov	r0, r5
 800cdac:	4798      	blx	r3
 800cdae:	1ba4      	subs	r4, r4, r6
 800cdb0:	b2a4      	uxth	r4, r4
 800cdb2:	fbb4 f0f0 	udiv	r0, r4, r0
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}

0800cdb8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800cdb8:	2300      	movs	r3, #0
 800cdba:	8083      	strh	r3, [r0, #4]
 800cdbc:	4770      	bx	lr

0800cdbe <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	6803      	ldr	r3, [r0, #0]
 800cdc2:	8881      	ldrh	r1, [r0, #4]
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	4798      	blx	r3
 800cdca:	88a3      	ldrh	r3, [r4, #4]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	80a3      	strh	r3, [r4, #4]
 800cdd0:	bd10      	pop	{r4, pc}

0800cdd2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800cdd2:	6803      	ldr	r3, [r0, #0]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	4718      	bx	r3

0800cdd8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800cdd8:	4770      	bx	lr
	...

0800cddc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800cddc:	4a02      	ldr	r2, [pc, #8]	@ (800cde8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800cdde:	6002      	str	r2, [r0, #0]
 800cde0:	2200      	movs	r2, #0
 800cde2:	8082      	strh	r2, [r0, #4]
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	080234fc 	.word	0x080234fc

0800cdec <_ZN8touchgfx9Container13getFirstChildEv>:
 800cdec:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800cdee:	4770      	bx	lr

0800cdf0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800cdf0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	b12b      	cbz	r3, 800ce02 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800cdf6:	b920      	cbnz	r0, 800ce02 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800cdf8:	1a5a      	subs	r2, r3, r1
 800cdfa:	4250      	negs	r0, r2
 800cdfc:	4150      	adcs	r0, r2
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	e7f8      	b.n	800cdf4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ce02:	4770      	bx	lr

0800ce04 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ce04:	2300      	movs	r3, #0
 800ce06:	6148      	str	r0, [r1, #20]
 800ce08:	618b      	str	r3, [r1, #24]
 800ce0a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ce0c:	b913      	cbnz	r3, 800ce14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ce0e:	6281      	str	r1, [r0, #40]	@ 0x28
 800ce10:	4770      	bx	lr
 800ce12:	4613      	mov	r3, r2
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d1fb      	bne.n	800ce12 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ce1a:	6199      	str	r1, [r3, #24]
 800ce1c:	4770      	bx	lr

0800ce1e <_ZN8touchgfx9Container9removeAllEv>:
 800ce1e:	2200      	movs	r2, #0
 800ce20:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ce22:	b123      	cbz	r3, 800ce2e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ce24:	6999      	ldr	r1, [r3, #24]
 800ce26:	6281      	str	r1, [r0, #40]	@ 0x28
 800ce28:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ce2c:	e7f8      	b.n	800ce20 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ce2e:	4770      	bx	lr

0800ce30 <_ZN8touchgfx9Container6unlinkEv>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	6283      	str	r3, [r0, #40]	@ 0x28
 800ce34:	4770      	bx	lr

0800ce36 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ce36:	2200      	movs	r2, #0
 800ce38:	8002      	strh	r2, [r0, #0]
 800ce3a:	8042      	strh	r2, [r0, #2]
 800ce3c:	8082      	strh	r2, [r0, #4]
 800ce3e:	80c2      	strh	r2, [r0, #6]
 800ce40:	4770      	bx	lr

0800ce42 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ce42:	b570      	push	{r4, r5, r6, lr}
 800ce44:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ce46:	460d      	mov	r5, r1
 800ce48:	4616      	mov	r6, r2
 800ce4a:	b13c      	cbz	r4, 800ce5c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce52:	4632      	mov	r2, r6
 800ce54:	4629      	mov	r1, r5
 800ce56:	4798      	blx	r3
 800ce58:	69a4      	ldr	r4, [r4, #24]
 800ce5a:	e7f6      	b.n	800ce4a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}

0800ce5e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ce5e:	b538      	push	{r3, r4, r5, lr}
 800ce60:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ce62:	460d      	mov	r5, r1
 800ce64:	b134      	cbz	r4, 800ce74 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ce66:	682b      	ldr	r3, [r5, #0]
 800ce68:	4621      	mov	r1, r4
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	4798      	blx	r3
 800ce70:	69a4      	ldr	r4, [r4, #24]
 800ce72:	e7f7      	b.n	800ce64 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ce74:	bd38      	pop	{r3, r4, r5, pc}

0800ce76 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ce76:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ce78:	b19b      	cbz	r3, 800cea2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ce7a:	428b      	cmp	r3, r1
 800ce7c:	d109      	bne.n	800ce92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ce7e:	699a      	ldr	r2, [r3, #24]
 800ce80:	2100      	movs	r1, #0
 800ce82:	6159      	str	r1, [r3, #20]
 800ce84:	6282      	str	r2, [r0, #40]	@ 0x28
 800ce86:	b902      	cbnz	r2, 800ce8a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ce88:	4770      	bx	lr
 800ce8a:	6199      	str	r1, [r3, #24]
 800ce8c:	4770      	bx	lr
 800ce8e:	4613      	mov	r3, r2
 800ce90:	b13a      	cbz	r2, 800cea2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ce92:	699a      	ldr	r2, [r3, #24]
 800ce94:	428a      	cmp	r2, r1
 800ce96:	d1fa      	bne.n	800ce8e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ce98:	698a      	ldr	r2, [r1, #24]
 800ce9a:	619a      	str	r2, [r3, #24]
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800cea2:	4770      	bx	lr

0800cea4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800cea4:	b410      	push	{r4}
 800cea6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cea8:	4604      	mov	r4, r0
 800ceaa:	b92b      	cbnz	r3, 800ceb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ceac:	6803      	ldr	r3, [r0, #0]
 800ceae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4718      	bx	r3
 800ceb8:	b941      	cbnz	r1, 800cecc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ceba:	6193      	str	r3, [r2, #24]
 800cebc:	6282      	str	r2, [r0, #40]	@ 0x28
 800cebe:	6154      	str	r4, [r2, #20]
 800cec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	4603      	mov	r3, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d0f9      	beq.n	800cec0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800cecc:	4299      	cmp	r1, r3
 800cece:	6998      	ldr	r0, [r3, #24]
 800ced0:	d1f9      	bne.n	800cec6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ced2:	6190      	str	r0, [r2, #24]
 800ced4:	618a      	str	r2, [r1, #24]
 800ced6:	e7f2      	b.n	800cebe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ced8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cedc:	461f      	mov	r7, r3
 800cede:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cee2:	460d      	mov	r5, r1
 800cee4:	4616      	mov	r6, r2
 800cee6:	b103      	cbz	r3, 800ceea <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800cee8:	6038      	str	r0, [r7, #0]
 800ceea:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ceec:	b314      	cbz	r4, 800cf34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ceee:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800cef2:	b1eb      	cbz	r3, 800cf30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cef4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800cef8:	428d      	cmp	r5, r1
 800cefa:	db19      	blt.n	800cf30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cefc:	8923      	ldrh	r3, [r4, #8]
 800cefe:	b289      	uxth	r1, r1
 800cf00:	440b      	add	r3, r1
 800cf02:	b21b      	sxth	r3, r3
 800cf04:	429d      	cmp	r5, r3
 800cf06:	da13      	bge.n	800cf30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cf08:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800cf0c:	4296      	cmp	r6, r2
 800cf0e:	db0f      	blt.n	800cf30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cf10:	8963      	ldrh	r3, [r4, #10]
 800cf12:	b292      	uxth	r2, r2
 800cf14:	4413      	add	r3, r2
 800cf16:	b21b      	sxth	r3, r3
 800cf18:	429e      	cmp	r6, r3
 800cf1a:	da09      	bge.n	800cf30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	1ab2      	subs	r2, r6, r2
 800cf20:	1a69      	subs	r1, r5, r1
 800cf22:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800cf26:	b212      	sxth	r2, r2
 800cf28:	463b      	mov	r3, r7
 800cf2a:	b209      	sxth	r1, r1
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	47c0      	blx	r8
 800cf30:	69a4      	ldr	r4, [r4, #24]
 800cf32:	e7db      	b.n	800ceec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	4c6e      	ldr	r4, [pc, #440]	@ (800d0f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800cf3e:	b0a1      	sub	sp, #132	@ 0x84
 800cf40:	6824      	ldr	r4, [r4, #0]
 800cf42:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800cf44:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800cf48:	9303      	str	r3, [sp, #12]
 800cf4a:	2400      	movs	r4, #0
 800cf4c:	802c      	strh	r4, [r5, #0]
 800cf4e:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800cf50:	802c      	strh	r4, [r5, #0]
 800cf52:	601c      	str	r4, [r3, #0]
 800cf54:	4606      	mov	r6, r0
 800cf56:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800cf5a:	f7ff ffbd 	bl	800ced8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800cf5e:	f1b9 0f03 	cmp.w	r9, #3
 800cf62:	f340 80c2 	ble.w	800d0ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 800cf66:	4631      	mov	r1, r6
 800cf68:	a80c      	add	r0, sp, #48	@ 0x30
 800cf6a:	f004 fa05 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cf6e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800cf72:	9306      	str	r3, [sp, #24]
 800cf74:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800cf78:	9307      	str	r3, [sp, #28]
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	f8d3 a000 	ldr.w	sl, [r3]
 800cf80:	f1ba 0f00 	cmp.w	sl, #0
 800cf84:	f000 80b4 	beq.w	800d0f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 800cf88:	4651      	mov	r1, sl
 800cf8a:	a810      	add	r0, sp, #64	@ 0x40
 800cf8c:	f004 f9f4 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cf90:	9b01      	ldr	r3, [sp, #4]
 800cf92:	9a06      	ldr	r2, [sp, #24]
 800cf94:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800cf98:	189d      	adds	r5, r3, r2
 800cf9a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800cf9e:	9a07      	ldr	r2, [sp, #28]
 800cfa0:	2002      	movs	r0, #2
 800cfa2:	fb91 f1f0 	sdiv	r1, r1, r0
 800cfa6:	4419      	add	r1, r3
 800cfa8:	1a6d      	subs	r5, r5, r1
 800cfaa:	9b02      	ldr	r3, [sp, #8]
 800cfac:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800cfb6:	fb92 f2f0 	sdiv	r2, r2, r0
 800cfba:	440a      	add	r2, r1
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	435b      	muls	r3, r3
 800cfc0:	fb05 3505 	mla	r5, r5, r5, r3
 800cfc4:	4f4d      	ldr	r7, [pc, #308]	@ (800d0fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800cfc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfc8:	ac10      	add	r4, sp, #64	@ 0x40
 800cfca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfcc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfd4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800cfd8:	f1b9 0f0c 	cmp.w	r9, #12
 800cfdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cfe0:	f04f 0303 	mov.w	r3, #3
 800cfe4:	bfc8      	it	gt
 800cfe6:	4698      	movgt	r8, r3
 800cfe8:	f8cd 9000 	str.w	r9, [sp]
 800cfec:	f04f 0400 	mov.w	r4, #0
 800cff0:	bfdc      	itt	le
 800cff2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800cff6:	fb92 f8f3 	sdivle	r8, r2, r3
 800cffa:	1c63      	adds	r3, r4, #1
 800cffc:	aa10      	add	r2, sp, #64	@ 0x40
 800cffe:	f004 0401 	and.w	r4, r4, #1
 800d002:	9308      	str	r3, [sp, #32]
 800d004:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d008:	9b00      	ldr	r3, [sp, #0]
 800d00a:	fb93 f3f8 	sdiv	r3, r3, r8
 800d00e:	b29b      	uxth	r3, r3
 800d010:	3404      	adds	r4, #4
 800d012:	f04f 0b00 	mov.w	fp, #0
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	9a04      	ldr	r2, [sp, #16]
 800d01a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d01e:	fb13 f302 	smulbb	r3, r3, r2
 800d022:	9a01      	ldr	r2, [sp, #4]
 800d024:	b29b      	uxth	r3, r3
 800d026:	1899      	adds	r1, r3, r2
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d02e:	b209      	sxth	r1, r1
 800d030:	4299      	cmp	r1, r3
 800d032:	db4d      	blt.n	800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d034:	8932      	ldrh	r2, [r6, #8]
 800d036:	4413      	add	r3, r2
 800d038:	b21b      	sxth	r3, r3
 800d03a:	4299      	cmp	r1, r3
 800d03c:	da48      	bge.n	800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	6827      	ldr	r7, [r4, #0]
 800d042:	fb17 f703 	smulbb	r7, r7, r3
 800d046:	9b02      	ldr	r3, [sp, #8]
 800d048:	b2bf      	uxth	r7, r7
 800d04a:	18fa      	adds	r2, r7, r3
 800d04c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d050:	b212      	sxth	r2, r2
 800d052:	429a      	cmp	r2, r3
 800d054:	db3c      	blt.n	800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d056:	8970      	ldrh	r0, [r6, #10]
 800d058:	4403      	add	r3, r0
 800d05a:	b21b      	sxth	r3, r3
 800d05c:	429a      	cmp	r2, r3
 800d05e:	da37      	bge.n	800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d060:	2300      	movs	r3, #0
 800d062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d064:	4630      	mov	r0, r6
 800d066:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d068:	f7ff ff36 	bl	800ced8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d06c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d06e:	b37a      	cbz	r2, 800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d070:	4552      	cmp	r2, sl
 800d072:	d02d      	beq.n	800d0d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d074:	4611      	mov	r1, r2
 800d076:	a80e      	add	r0, sp, #56	@ 0x38
 800d078:	9209      	str	r2, [sp, #36]	@ 0x24
 800d07a:	f004 f97d 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d07e:	9a06      	ldr	r2, [sp, #24]
 800d080:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d084:	9b01      	ldr	r3, [sp, #4]
 800d086:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d08a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d08e:	4413      	add	r3, r2
 800d090:	f04f 0e02 	mov.w	lr, #2
 800d094:	fb91 f1fe 	sdiv	r1, r1, lr
 800d098:	4401      	add	r1, r0
 800d09a:	1a58      	subs	r0, r3, r1
 800d09c:	9a07      	ldr	r2, [sp, #28]
 800d09e:	9b02      	ldr	r3, [sp, #8]
 800d0a0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d0a4:	fb9c fcfe 	sdiv	ip, ip, lr
 800d0a8:	4413      	add	r3, r2
 800d0aa:	448c      	add	ip, r1
 800d0ac:	eba3 030c 	sub.w	r3, r3, ip
 800d0b0:	435b      	muls	r3, r3
 800d0b2:	fb00 3300 	mla	r3, r0, r0, r3
 800d0b6:	42ab      	cmp	r3, r5
 800d0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0ba:	d208      	bcs.n	800d0ce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d0bc:	9803      	ldr	r0, [sp, #12]
 800d0be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0c0:	6001      	str	r1, [r0, #0]
 800d0c2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d0c4:	9805      	ldr	r0, [sp, #20]
 800d0c6:	8008      	strh	r0, [r1, #0]
 800d0c8:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d0ca:	461d      	mov	r5, r3
 800d0cc:	800f      	strh	r7, [r1, #0]
 800d0ce:	4692      	mov	sl, r2
 800d0d0:	f10b 0b01 	add.w	fp, fp, #1
 800d0d4:	f1bb 0f04 	cmp.w	fp, #4
 800d0d8:	f104 0408 	add.w	r4, r4, #8
 800d0dc:	d19c      	bne.n	800d018 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d0de:	9b00      	ldr	r3, [sp, #0]
 800d0e0:	9c08      	ldr	r4, [sp, #32]
 800d0e2:	444b      	add	r3, r9
 800d0e4:	4544      	cmp	r4, r8
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	d187      	bne.n	800cffa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d0ea:	b021      	add	sp, #132	@ 0x84
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	f04f 35ff 	mov.w	r5, #4294967295
 800d0f4:	e766      	b.n	800cfc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d0f6:	bf00      	nop
 800d0f8:	2002b02c 	.word	0x2002b02c
 800d0fc:	08022d18 	.word	0x08022d18

0800d100 <_ZN8touchgfx4RectaNERKS0_>:
 800d100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d104:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d108:	888c      	ldrh	r4, [r1, #4]
 800d10a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d10e:	443c      	add	r4, r7
 800d110:	b2a4      	uxth	r4, r4
 800d112:	fa0f f884 	sxth.w	r8, r4
 800d116:	45c1      	cmp	r9, r8
 800d118:	da2f      	bge.n	800d17a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d11a:	8882      	ldrh	r2, [r0, #4]
 800d11c:	444a      	add	r2, r9
 800d11e:	b292      	uxth	r2, r2
 800d120:	fa0f fe82 	sxth.w	lr, r2
 800d124:	4577      	cmp	r7, lr
 800d126:	da28      	bge.n	800d17a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d128:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d12c:	88cb      	ldrh	r3, [r1, #6]
 800d12e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d132:	442b      	add	r3, r5
 800d134:	b21b      	sxth	r3, r3
 800d136:	429e      	cmp	r6, r3
 800d138:	da1f      	bge.n	800d17a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d13a:	88c3      	ldrh	r3, [r0, #6]
 800d13c:	4433      	add	r3, r6
 800d13e:	b29b      	uxth	r3, r3
 800d140:	fa0f fc83 	sxth.w	ip, r3
 800d144:	4565      	cmp	r5, ip
 800d146:	da18      	bge.n	800d17a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d148:	454f      	cmp	r7, r9
 800d14a:	bfb8      	it	lt
 800d14c:	464f      	movlt	r7, r9
 800d14e:	42b5      	cmp	r5, r6
 800d150:	bfb8      	it	lt
 800d152:	4635      	movlt	r5, r6
 800d154:	45f0      	cmp	r8, lr
 800d156:	bfd8      	it	le
 800d158:	4622      	movle	r2, r4
 800d15a:	1bd2      	subs	r2, r2, r7
 800d15c:	8082      	strh	r2, [r0, #4]
 800d15e:	884a      	ldrh	r2, [r1, #2]
 800d160:	88c9      	ldrh	r1, [r1, #6]
 800d162:	8007      	strh	r7, [r0, #0]
 800d164:	440a      	add	r2, r1
 800d166:	b292      	uxth	r2, r2
 800d168:	b211      	sxth	r1, r2
 800d16a:	458c      	cmp	ip, r1
 800d16c:	bfa8      	it	ge
 800d16e:	4613      	movge	r3, r2
 800d170:	1b5b      	subs	r3, r3, r5
 800d172:	80c3      	strh	r3, [r0, #6]
 800d174:	8045      	strh	r5, [r0, #2]
 800d176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d17a:	2300      	movs	r3, #0
 800d17c:	8003      	strh	r3, [r0, #0]
 800d17e:	8043      	strh	r3, [r0, #2]
 800d180:	8083      	strh	r3, [r0, #4]
 800d182:	80c3      	strh	r3, [r0, #6]
 800d184:	e7f7      	b.n	800d176 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d186 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d186:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	dd06      	ble.n	800d19c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d18e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d192:	2800      	cmp	r0, #0
 800d194:	bfcc      	ite	gt
 800d196:	2000      	movgt	r0, #0
 800d198:	2001      	movle	r0, #1
 800d19a:	4770      	bx	lr
 800d19c:	2001      	movs	r0, #1
 800d19e:	4770      	bx	lr

0800d1a0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d1a8:	8003      	strh	r3, [r0, #0]
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	8043      	strh	r3, [r0, #2]
 800d1ae:	8083      	strh	r3, [r0, #4]
 800d1b0:	80c3      	strh	r3, [r0, #6]
 800d1b2:	2d00      	cmp	r5, #0
 800d1b4:	d040      	beq.n	800d238 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d1b6:	1d28      	adds	r0, r5, #4
 800d1b8:	f7ff ffe5 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d1bc:	b988      	cbnz	r0, 800d1e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f7ff ffe1 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d1c4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d1c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d1cc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d1d0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d1d4:	b138      	cbz	r0, 800d1e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d1d6:	8022      	strh	r2, [r4, #0]
 800d1d8:	8063      	strh	r3, [r4, #2]
 800d1da:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d1de:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d1e2:	69ad      	ldr	r5, [r5, #24]
 800d1e4:	e7e5      	b.n	800d1b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d1e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d1ea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d1ee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d1f2:	4290      	cmp	r0, r2
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	bfa8      	it	ge
 800d1f8:	4617      	movge	r7, r2
 800d1fa:	4472      	add	r2, lr
 800d1fc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d200:	8027      	strh	r7, [r4, #0]
 800d202:	4299      	cmp	r1, r3
 800d204:	460e      	mov	r6, r1
 800d206:	4440      	add	r0, r8
 800d208:	bfa8      	it	ge
 800d20a:	461e      	movge	r6, r3
 800d20c:	4471      	add	r1, lr
 800d20e:	4463      	add	r3, ip
 800d210:	b200      	sxth	r0, r0
 800d212:	b212      	sxth	r2, r2
 800d214:	b209      	sxth	r1, r1
 800d216:	b21b      	sxth	r3, r3
 800d218:	4290      	cmp	r0, r2
 800d21a:	bfac      	ite	ge
 800d21c:	ebc7 0200 	rsbge	r2, r7, r0
 800d220:	ebc7 0202 	rsblt	r2, r7, r2
 800d224:	4299      	cmp	r1, r3
 800d226:	bfac      	ite	ge
 800d228:	ebc6 0301 	rsbge	r3, r6, r1
 800d22c:	ebc6 0303 	rsblt	r3, r6, r3
 800d230:	8066      	strh	r6, [r4, #2]
 800d232:	80a2      	strh	r2, [r4, #4]
 800d234:	80e3      	strh	r3, [r4, #6]
 800d236:	e7d4      	b.n	800d1e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d238:	4620      	mov	r0, r4
 800d23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d23e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d23e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d242:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d246:	b383      	cbz	r3, 800d2aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d248:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d24a:	b374      	cbz	r4, 800d2aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d24c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d250:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d254:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d258:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d25c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d260:	b303      	cbz	r3, 800d2a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d262:	4668      	mov	r0, sp
 800d264:	1d21      	adds	r1, r4, #4
 800d266:	f8ad 5000 	strh.w	r5, [sp]
 800d26a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d26e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d272:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d276:	f7ff ff43 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 800d27a:	4668      	mov	r0, sp
 800d27c:	f7ff ff83 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d280:	b980      	cbnz	r0, 800d2a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d282:	f8bd 3000 	ldrh.w	r3, [sp]
 800d286:	88a2      	ldrh	r2, [r4, #4]
 800d288:	1a9b      	subs	r3, r3, r2
 800d28a:	f8ad 3000 	strh.w	r3, [sp]
 800d28e:	88e2      	ldrh	r2, [r4, #6]
 800d290:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d294:	1a9b      	subs	r3, r3, r2
 800d296:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	4669      	mov	r1, sp
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	4798      	blx	r3
 800d2a4:	69a4      	ldr	r4, [r4, #24]
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d1d8      	bne.n	800d25c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d2aa:	b002      	add	sp, #8
 800d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2b2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d2b6:	460d      	mov	r5, r1
 800d2b8:	4616      	mov	r6, r2
 800d2ba:	b323      	cbz	r3, 800d306 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d2bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d2be:	b314      	cbz	r4, 800d306 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d2c0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d2c4:	b1eb      	cbz	r3, 800d302 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d2c6:	6828      	ldr	r0, [r5, #0]
 800d2c8:	6869      	ldr	r1, [r5, #4]
 800d2ca:	466b      	mov	r3, sp
 800d2cc:	c303      	stmia	r3!, {r0, r1}
 800d2ce:	4668      	mov	r0, sp
 800d2d0:	1d21      	adds	r1, r4, #4
 800d2d2:	f7ff ff15 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 800d2d6:	4668      	mov	r0, sp
 800d2d8:	f7ff ff55 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d2dc:	b988      	cbnz	r0, 800d302 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d2de:	f8bd 3000 	ldrh.w	r3, [sp]
 800d2e2:	88a2      	ldrh	r2, [r4, #4]
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	f8ad 3000 	strh.w	r3, [sp]
 800d2ea:	88e2      	ldrh	r2, [r4, #6]
 800d2ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	4632      	mov	r2, r6
 800d2fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2fc:	4669      	mov	r1, sp
 800d2fe:	4620      	mov	r0, r4
 800d300:	4798      	blx	r3
 800d302:	69a4      	ldr	r4, [r4, #24]
 800d304:	e7db      	b.n	800d2be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d306:	b002      	add	sp, #8
 800d308:	bd70      	pop	{r4, r5, r6, pc}

0800d30a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d30a:	b513      	push	{r0, r1, r4, lr}
 800d30c:	6803      	ldr	r3, [r0, #0]
 800d30e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800d312:	2300      	movs	r3, #0
 800d314:	e9cd 3300 	strd	r3, r3, [sp]
 800d318:	466b      	mov	r3, sp
 800d31a:	47a0      	blx	r4
 800d31c:	b002      	add	sp, #8
 800d31e:	bd10      	pop	{r4, pc}

0800d320 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d320:	2301      	movs	r3, #1
 800d322:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d326:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d32a:	4770      	bx	lr

0800d32c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d32c:	2301      	movs	r3, #1
 800d32e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d332:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d336:	4770      	bx	lr

0800d338 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d338:	6843      	ldr	r3, [r0, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	725a      	strb	r2, [r3, #9]
 800d33e:	6840      	ldr	r0, [r0, #4]
 800d340:	6803      	ldr	r3, [r0, #0]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	4718      	bx	r3

0800d346 <_ZN8touchgfx3HAL8flushDMAEv>:
 800d346:	6840      	ldr	r0, [r0, #4]
 800d348:	6803      	ldr	r3, [r0, #0]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	4718      	bx	r3

0800d34e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d34e:	b530      	push	{r4, r5, lr}
 800d350:	b08b      	sub	sp, #44	@ 0x2c
 800d352:	6804      	ldr	r4, [r0, #0]
 800d354:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800d358:	9509      	str	r5, [sp, #36]	@ 0x24
 800d35a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800d35e:	9508      	str	r5, [sp, #32]
 800d360:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800d364:	9507      	str	r5, [sp, #28]
 800d366:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800d36a:	9506      	str	r5, [sp, #24]
 800d36c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800d370:	9505      	str	r5, [sp, #20]
 800d372:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800d376:	9504      	str	r5, [sp, #16]
 800d378:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800d37c:	9503      	str	r5, [sp, #12]
 800d37e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800d382:	9502      	str	r5, [sp, #8]
 800d384:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800d388:	e9cd 3500 	strd	r3, r5, [sp]
 800d38c:	4613      	mov	r3, r2
 800d38e:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800d390:	2200      	movs	r2, #0
 800d392:	47a0      	blx	r4
 800d394:	b00b      	add	sp, #44	@ 0x2c
 800d396:	bd30      	pop	{r4, r5, pc}

0800d398 <_ZN8touchgfx3HAL10beginFrameEv>:
 800d398:	4b04      	ldr	r3, [pc, #16]	@ (800d3ac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	b123      	cbz	r3, 800d3a8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d39e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800d3a2:	f080 0001 	eor.w	r0, r0, #1
 800d3a6:	4770      	bx	lr
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	4770      	bx	lr
 800d3ac:	2002b02a 	.word	0x2002b02a

0800d3b0 <_ZN8touchgfx3HAL8endFrameEv>:
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	6840      	ldr	r0, [r0, #4]
 800d3b6:	6803      	ldr	r3, [r0, #0]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	4798      	blx	r3
 800d3bc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d3c0:	b113      	cbz	r3, 800d3c8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800d3c8:	bd10      	pop	{r4, pc}

0800d3ca <_ZN8touchgfx3HAL10initializeEv>:
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	f7fe fbc9 	bl	800bb64 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d3d2:	f7fe f8e5 	bl	800b5a0 <_ZN8touchgfx4GPIO4initEv>
 800d3d6:	6860      	ldr	r0, [r4, #4]
 800d3d8:	6803      	ldr	r3, [r0, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	4798      	blx	r3
 800d3de:	68e0      	ldr	r0, [r4, #12]
 800d3e0:	6803      	ldr	r3, [r0, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	4798      	blx	r3
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f0:	4718      	bx	r3

0800d3f2 <_ZN8touchgfx3HAL9taskEntryEv>:
 800d3f2:	b508      	push	{r3, lr}
 800d3f4:	6803      	ldr	r3, [r0, #0]
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3fc:	4798      	blx	r3
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d402:	4620      	mov	r0, r4
 800d404:	4798      	blx	r3
 800d406:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d001      	beq.n	800d412 <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 800d40e:	f7fe fc0f 	bl	800bc30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d416:	e7f4      	b.n	800d402 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800d418 <_ZN8touchgfx3HAL4tickEv>:
 800d418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d41a:	6803      	ldr	r3, [r0, #0]
 800d41c:	4d62      	ldr	r5, [pc, #392]	@ (800d5a8 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800d41e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d422:	4604      	mov	r4, r0
 800d424:	4798      	blx	r3
 800d426:	2800      	cmp	r0, #0
 800d428:	f000 809e 	beq.w	800d568 <_ZN8touchgfx3HAL4tickEv+0x150>
 800d42c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d430:	2b02      	cmp	r3, #2
 800d432:	d002      	beq.n	800d43a <_ZN8touchgfx3HAL4tickEv+0x22>
 800d434:	2001      	movs	r0, #1
 800d436:	f7fe f8bb 	bl	800b5b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d43a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800d43e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d442:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800d446:	2600      	movs	r6, #0
 800d448:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800d44c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800d450:	b133      	cbz	r3, 800d460 <_ZN8touchgfx3HAL4tickEv+0x48>
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	4620      	mov	r0, r4
 800d456:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d45a:	4798      	blx	r3
 800d45c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800d460:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800d464:	6862      	ldr	r2, [r4, #4]
 800d466:	f083 0301 	eor.w	r3, r3, #1
 800d46a:	7253      	strb	r3, [r2, #9]
 800d46c:	2601      	movs	r6, #1
 800d46e:	702e      	strb	r6, [r5, #0]
 800d470:	f002 fd34 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 800d474:	6803      	ldr	r3, [r0, #0]
 800d476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d478:	4798      	blx	r3
 800d47a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d47e:	b90b      	cbnz	r3, 800d484 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800d480:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800d484:	f002 fd2a 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 800d488:	6803      	ldr	r3, [r0, #0]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	4798      	blx	r3
 800d48e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d490:	6803      	ldr	r3, [r0, #0]
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	4798      	blx	r3
 800d496:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d49a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d4a6:	b10a      	cbz	r2, 800d4ac <_ZN8touchgfx3HAL4tickEv+0x94>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1eb      	bne.n	800d484 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800d4ac:	4a3f      	ldr	r2, [pc, #252]	@ (800d5ac <_ZN8touchgfx3HAL4tickEv+0x194>)
 800d4ae:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800d4b2:	7813      	ldrb	r3, [r2, #0]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	7013      	strb	r3, [r2, #0]
 800d4bc:	dc10      	bgt.n	800d4e0 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800d4be:	68e0      	ldr	r0, [r4, #12]
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	7013      	strb	r3, [r2, #0]
 800d4c4:	6803      	ldr	r3, [r0, #0]
 800d4c6:	aa03      	add	r2, sp, #12
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	a902      	add	r1, sp, #8
 800d4cc:	4798      	blx	r3
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d059      	beq.n	800d588 <_ZN8touchgfx3HAL4tickEv+0x170>
 800d4d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800d4d8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d4dc:	4620      	mov	r0, r4
 800d4de:	4798      	blx	r3
 800d4e0:	6960      	ldr	r0, [r4, #20]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f88d 3007 	strb.w	r3, [sp, #7]
 800d4e8:	b158      	cbz	r0, 800d502 <_ZN8touchgfx3HAL4tickEv+0xea>
 800d4ea:	6803      	ldr	r3, [r0, #0]
 800d4ec:	f10d 0107 	add.w	r1, sp, #7
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	4798      	blx	r3
 800d4f4:	b128      	cbz	r0, 800d502 <_ZN8touchgfx3HAL4tickEv+0xea>
 800d4f6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d4f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d4fc:	6803      	ldr	r3, [r0, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	4798      	blx	r3
 800d502:	f104 001c 	add.w	r0, r4, #28
 800d506:	f013 fd81 	bl	802100c <_ZN8touchgfx8Gestures4tickEv>
 800d50a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800d50e:	b30b      	cbz	r3, 800d554 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800d510:	6920      	ldr	r0, [r4, #16]
 800d512:	6803      	ldr	r3, [r0, #0]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	4798      	blx	r3
 800d518:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d51a:	4606      	mov	r6, r0
 800d51c:	b903      	cbnz	r3, 800d520 <_ZN8touchgfx3HAL4tickEv+0x108>
 800d51e:	6760      	str	r0, [r4, #116]	@ 0x74
 800d520:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d522:	4a23      	ldr	r2, [pc, #140]	@ (800d5b0 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800d524:	1af3      	subs	r3, r6, r3
 800d526:	4293      	cmp	r3, r2
 800d528:	d914      	bls.n	800d554 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800d52a:	6920      	ldr	r0, [r4, #16]
 800d52c:	6803      	ldr	r3, [r0, #0]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	4798      	blx	r3
 800d532:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d534:	2264      	movs	r2, #100	@ 0x64
 800d536:	1af3      	subs	r3, r6, r3
 800d538:	fbb3 f3f2 	udiv	r3, r3, r2
 800d53c:	fbb0 f0f3 	udiv	r0, r0, r3
 800d540:	2800      	cmp	r0, #0
 800d542:	dc26      	bgt.n	800d592 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800d544:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800d548:	6920      	ldr	r0, [r4, #16]
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	2100      	movs	r1, #0
 800d54e:	69db      	ldr	r3, [r3, #28]
 800d550:	4798      	blx	r3
 800d552:	6766      	str	r6, [r4, #116]	@ 0x74
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	4620      	mov	r0, r4
 800d558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d55c:	4798      	blx	r3
 800d55e:	f002 fcbd 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 800d562:	6803      	ldr	r3, [r0, #0]
 800d564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d566:	4798      	blx	r3
 800d568:	6823      	ldr	r3, [r4, #0]
 800d56a:	4620      	mov	r0, r4
 800d56c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d570:	4798      	blx	r3
 800d572:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d576:	2b02      	cmp	r3, #2
 800d578:	d002      	beq.n	800d580 <_ZN8touchgfx3HAL4tickEv+0x168>
 800d57a:	2001      	movs	r0, #1
 800d57c:	f7fe f834 	bl	800b5e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d580:	2300      	movs	r3, #0
 800d582:	702b      	strb	r3, [r5, #0]
 800d584:	b004      	add	sp, #16
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800d58c:	4620      	mov	r0, r4
 800d58e:	4798      	blx	r3
 800d590:	e7a6      	b.n	800d4e0 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800d592:	2863      	cmp	r0, #99	@ 0x63
 800d594:	bfcb      	itete	gt
 800d596:	2300      	movgt	r3, #0
 800d598:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800d59c:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800d5a0:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800d5a4:	e7d0      	b.n	800d548 <_ZN8touchgfx3HAL4tickEv+0x130>
 800d5a6:	bf00      	nop
 800d5a8:	2002b030 	.word	0x2002b030
 800d5ac:	2002b031 	.word	0x2002b031
 800d5b0:	05f5e100 	.word	0x05f5e100

0800d5b4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	f7fe fb16 	bl	800bbe8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	729a      	strb	r2, [r3, #10]
 800d5c2:	bd10      	pop	{r4, pc}

0800d5c4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d5c4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800d5c6:	301c      	adds	r0, #28
 800d5c8:	f013 bd1e 	b.w	8021008 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d5cc <_ZN8touchgfx3HAL5touchEll>:
 800d5cc:	b530      	push	{r4, r5, lr}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	a804      	add	r0, sp, #16
 800d5d4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d5d8:	f002 fa72 	bl	800fac0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d5e2:	a906      	add	r1, sp, #24
 800d5e4:	9b05      	ldr	r3, [sp, #20]
 800d5e6:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d5ea:	a803      	add	r0, sp, #12
 800d5ec:	f002 faba 	bl	800fb64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d5f0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800d5f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d5f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d5fc:	f104 001c 	add.w	r0, r4, #28
 800d600:	b189      	cbz	r1, 800d626 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d602:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800d60c:	4613      	mov	r3, r2
 800d60e:	462a      	mov	r2, r5
 800d610:	f013 fd0a 	bl	8021028 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d614:	b128      	cbz	r0, 800d622 <_ZN8touchgfx3HAL5touchEll+0x56>
 800d616:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d61a:	6623      	str	r3, [r4, #96]	@ 0x60
 800d61c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d620:	6663      	str	r3, [r4, #100]	@ 0x64
 800d622:	b007      	add	sp, #28
 800d624:	bd30      	pop	{r4, r5, pc}
 800d626:	f013 fd3f 	bl	80210a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d62a:	2301      	movs	r3, #1
 800d62c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800d630:	e7f1      	b.n	800d616 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d632:	b510      	push	{r4, lr}
 800d634:	2b00      	cmp	r3, #0
 800d636:	d046      	beq.n	800d6c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d638:	ea81 0002 	eor.w	r0, r1, r2
 800d63c:	07c4      	lsls	r4, r0, #31
 800d63e:	d508      	bpl.n	800d652 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d640:	440b      	add	r3, r1
 800d642:	3a01      	subs	r2, #1
 800d644:	428b      	cmp	r3, r1
 800d646:	d93e      	bls.n	800d6c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d648:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d64c:	f801 0b01 	strb.w	r0, [r1], #1
 800d650:	e7f8      	b.n	800d644 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d652:	07d0      	lsls	r0, r2, #31
 800d654:	bf42      	ittt	mi
 800d656:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d65a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d65e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d662:	2b01      	cmp	r3, #1
 800d664:	d911      	bls.n	800d68a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d666:	ea81 0402 	eor.w	r4, r1, r2
 800d66a:	07a4      	lsls	r4, r4, #30
 800d66c:	4610      	mov	r0, r2
 800d66e:	d022      	beq.n	800d6b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d670:	f023 0401 	bic.w	r4, r3, #1
 800d674:	440c      	add	r4, r1
 800d676:	428c      	cmp	r4, r1
 800d678:	4602      	mov	r2, r0
 800d67a:	d904      	bls.n	800d686 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d67c:	8812      	ldrh	r2, [r2, #0]
 800d67e:	f821 2b02 	strh.w	r2, [r1], #2
 800d682:	3002      	adds	r0, #2
 800d684:	e7f7      	b.n	800d676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	f023 0003 	bic.w	r0, r3, #3
 800d68e:	4408      	add	r0, r1
 800d690:	4288      	cmp	r0, r1
 800d692:	4614      	mov	r4, r2
 800d694:	d904      	bls.n	800d6a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d696:	6824      	ldr	r4, [r4, #0]
 800d698:	f841 4b04 	str.w	r4, [r1], #4
 800d69c:	3204      	adds	r2, #4
 800d69e:	e7f7      	b.n	800d690 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d6a0:	f003 0303 	and.w	r3, r3, #3
 800d6a4:	440b      	add	r3, r1
 800d6a6:	3a01      	subs	r2, #1
 800d6a8:	428b      	cmp	r3, r1
 800d6aa:	d90c      	bls.n	800d6c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d6ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d6b0:	f801 0b01 	strb.w	r0, [r1], #1
 800d6b4:	e7f8      	b.n	800d6a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d6b6:	0790      	lsls	r0, r2, #30
 800d6b8:	d0e7      	beq.n	800d68a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d6ba:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d6be:	f821 0b02 	strh.w	r0, [r1], #2
 800d6c2:	3b02      	subs	r3, #2
 800d6c4:	e7e1      	b.n	800d68a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	bd10      	pop	{r4, pc}

0800d6ca <_ZN8touchgfx3HAL7noTouchEv>:
 800d6ca:	b510      	push	{r4, lr}
 800d6cc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	b153      	cbz	r3, 800d6ea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d6d4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800d6d8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800d6dc:	2101      	movs	r1, #1
 800d6de:	301c      	adds	r0, #28
 800d6e0:	f013 fce2 	bl	80210a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800d6ea:	bd10      	pop	{r4, pc}

0800d6ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6f0:	b085      	sub	sp, #20
 800d6f2:	ad04      	add	r5, sp, #16
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d6fc:	69a0      	ldr	r0, [r4, #24]
 800d6fe:	6806      	ldr	r6, [r0, #0]
 800d700:	9501      	str	r5, [sp, #4]
 800d702:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800d706:	9500      	str	r5, [sp, #0]
 800d708:	6835      	ldr	r5, [r6, #0]
 800d70a:	4699      	mov	r9, r3
 800d70c:	460f      	mov	r7, r1
 800d70e:	4690      	mov	r8, r2
 800d710:	47a8      	blx	r5
 800d712:	4d10      	ldr	r5, [pc, #64]	@ (800d754 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800d714:	4606      	mov	r6, r0
 800d716:	f8a5 9000 	strh.w	r9, [r5]
 800d71a:	f7fb f90f 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800d71e:	6803      	ldr	r3, [r0, #0]
 800d720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d722:	4798      	blx	r3
 800d724:	b128      	cbz	r0, 800d732 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800d726:	2801      	cmp	r0, #1
 800d728:	d00b      	beq.n	800d742 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800d72a:	4630      	mov	r0, r6
 800d72c:	b005      	add	sp, #20
 800d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d732:	882b      	ldrh	r3, [r5, #0]
 800d734:	fb08 7203 	mla	r2, r8, r3, r7
 800d738:	9b03      	ldr	r3, [sp, #12]
 800d73a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d73e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d740:	e7f3      	b.n	800d72a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d742:	882a      	ldrh	r2, [r5, #0]
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	fb08 7202 	mla	r2, r8, r2, r7
 800d74a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d74e:	1a9a      	subs	r2, r3, r2
 800d750:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800d752:	e7ea      	b.n	800d72a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d754:	2002b026 	.word	0x2002b026

0800d758 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	4b15      	ldr	r3, [pc, #84]	@ (800d7b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800d75c:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800d764:	fb93 f4f4 	sdiv	r4, r3, r4
 800d768:	460f      	mov	r7, r1
 800d76a:	4606      	mov	r6, r0
 800d76c:	f7fb f8e6 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800d770:	6803      	ldr	r3, [r0, #0]
 800d772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d774:	4798      	blx	r3
 800d776:	2801      	cmp	r0, #1
 800d778:	d00b      	beq.n	800d792 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800d77a:	d303      	bcc.n	800d784 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800d77c:	2802      	cmp	r0, #2
 800d77e:	d010      	beq.n	800d7a2 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800d780:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800d782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d784:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800d786:	8819      	ldrh	r1, [r3, #0]
 800d788:	437c      	muls	r4, r7
 800d78a:	434c      	muls	r4, r1
 800d78c:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800d790:	e7f6      	b.n	800d780 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800d792:	4b08      	ldr	r3, [pc, #32]	@ (800d7b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800d794:	8819      	ldrh	r1, [r3, #0]
 800d796:	437c      	muls	r4, r7
 800d798:	434c      	muls	r4, r1
 800d79a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d79e:	1b2d      	subs	r5, r5, r4
 800d7a0:	e7ee      	b.n	800d780 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800d7a2:	4b04      	ldr	r3, [pc, #16]	@ (800d7b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800d7a4:	8819      	ldrh	r1, [r3, #0]
 800d7a6:	437c      	muls	r4, r7
 800d7a8:	434c      	muls	r4, r1
 800d7aa:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800d7ae:	e7e7      	b.n	800d780 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800d7b0:	2002b028 	.word	0x2002b028
 800d7b4:	2002b026 	.word	0x2002b026

0800d7b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	b08b      	sub	sp, #44	@ 0x2c
 800d7bc:	4617      	mov	r7, r2
 800d7be:	4604      	mov	r4, r0
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	461d      	mov	r5, r3
 800d7c4:	f7fb f8ba 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800d7c8:	6803      	ldr	r3, [r0, #0]
 800d7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7cc:	4798      	blx	r3
 800d7ce:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800d7d2:	9007      	str	r0, [sp, #28]
 800d7d4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	9306      	str	r3, [sp, #24]
 800d7e0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800d7e4:	9305      	str	r3, [sp, #20]
 800d7e6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800d7f0:	9303      	str	r3, [sp, #12]
 800d7f2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800d7f6:	9302      	str	r3, [sp, #8]
 800d7f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800d7fc:	e9cd 5300 	strd	r5, r3, [sp]
 800d800:	4631      	mov	r1, r6
 800d802:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800d804:	463b      	mov	r3, r7
 800d806:	2200      	movs	r2, #0
 800d808:	4620      	mov	r0, r4
 800d80a:	47a8      	blx	r5
 800d80c:	b00b      	add	sp, #44	@ 0x2c
 800d80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d810:	2002b026 	.word	0x2002b026

0800d814 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d818:	4698      	mov	r8, r3
 800d81a:	6803      	ldr	r3, [r0, #0]
 800d81c:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800d81e:	4b15      	ldr	r3, [pc, #84]	@ (800d874 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d820:	b08b      	sub	sp, #44	@ 0x2c
 800d822:	4617      	mov	r7, r2
 800d824:	f8b3 9000 	ldrh.w	r9, [r3]
 800d828:	460e      	mov	r6, r1
 800d82a:	4604      	mov	r4, r0
 800d82c:	f7fb f886 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800d830:	6803      	ldr	r3, [r0, #0]
 800d832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d834:	4798      	blx	r3
 800d836:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800d83a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d83e:	2302      	movs	r3, #2
 800d840:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d844:	2301      	movs	r3, #1
 800d846:	9305      	str	r3, [sp, #20]
 800d848:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800d852:	9303      	str	r3, [sp, #12]
 800d854:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800d858:	9302      	str	r3, [sp, #8]
 800d85a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800d85e:	2200      	movs	r2, #0
 800d860:	e9cd 8300 	strd	r8, r3, [sp]
 800d864:	4631      	mov	r1, r6
 800d866:	463b      	mov	r3, r7
 800d868:	4620      	mov	r0, r4
 800d86a:	47a8      	blx	r5
 800d86c:	b00b      	add	sp, #44	@ 0x2c
 800d86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d872:	bf00      	nop
 800d874:	2002b026 	.word	0x2002b026

0800d878 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d87c:	4698      	mov	r8, r3
 800d87e:	6803      	ldr	r3, [r0, #0]
 800d880:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800d882:	4b11      	ldr	r3, [pc, #68]	@ (800d8c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d884:	b087      	sub	sp, #28
 800d886:	f8b3 9000 	ldrh.w	r9, [r3]
 800d88a:	460e      	mov	r6, r1
 800d88c:	4617      	mov	r7, r2
 800d88e:	4604      	mov	r4, r0
 800d890:	f7fb f854 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800d894:	6803      	ldr	r3, [r0, #0]
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	4798      	blx	r3
 800d89a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800d89e:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8a2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d8a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800d8aa:	9302      	str	r3, [sp, #8]
 800d8ac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800d8b0:	9301      	str	r3, [sp, #4]
 800d8b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	463a      	mov	r2, r7
 800d8ba:	4643      	mov	r3, r8
 800d8bc:	4631      	mov	r1, r6
 800d8be:	4620      	mov	r0, r4
 800d8c0:	47a8      	blx	r5
 800d8c2:	b007      	add	sp, #28
 800d8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8c8:	2002b026 	.word	0x2002b026

0800d8cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	b08f      	sub	sp, #60	@ 0x3c
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	4691      	mov	r9, r2
 800d8da:	461e      	mov	r6, r3
 800d8dc:	f005 f88e 	bl	80129fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f000 809d 	beq.w	800da20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800da84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ee:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800da88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800d8f2:	4f61      	ldr	r7, [pc, #388]	@ (800da78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4798      	blx	r3
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8fe:	4798      	blx	r3
 800d900:	f8bb 3000 	ldrh.w	r3, [fp]
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800d90a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d90e:	9302      	str	r3, [sp, #8]
 800d910:	883b      	ldrh	r3, [r7, #0]
 800d912:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d916:	9303      	str	r3, [sp, #12]
 800d918:	4b58      	ldr	r3, [pc, #352]	@ (800da7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d91a:	9305      	str	r3, [sp, #20]
 800d91c:	881a      	ldrh	r2, [r3, #0]
 800d91e:	9204      	str	r2, [sp, #16]
 800d920:	4640      	mov	r0, r8
 800d922:	f005 f8ff 	bl	8012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d926:	8038      	strh	r0, [r7, #0]
 800d928:	4640      	mov	r0, r8
 800d92a:	f005 f92f 	bl	8012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d92e:	9b05      	ldr	r3, [sp, #20]
 800d930:	b280      	uxth	r0, r0
 800d932:	8018      	strh	r0, [r3, #0]
 800d934:	4b52      	ldr	r3, [pc, #328]	@ (800da80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d174      	bne.n	800da26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800d93c:	883b      	ldrh	r3, [r7, #0]
 800d93e:	f8ab 3000 	strh.w	r3, [fp]
 800d942:	f8aa 0000 	strh.w	r0, [sl]
 800d946:	4648      	mov	r0, r9
 800d948:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800d94c:	f005 f856 	bl	80129fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d950:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800d954:	2200      	movs	r2, #0
 800d956:	4611      	mov	r1, r2
 800d958:	4628      	mov	r0, r5
 800d95a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d95e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d962:	f7fb fd52 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
 800d966:	2301      	movs	r3, #1
 800d968:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800d96c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d970:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dd5c      	ble.n	800da32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800d978:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dd58      	ble.n	800da32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800d980:	462a      	mov	r2, r5
 800d982:	ab0a      	add	r3, sp, #40	@ 0x28
 800d984:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d988:	6851      	ldr	r1, [r2, #4]
 800d98a:	c303      	stmia	r3!, {r0, r1}
 800d98c:	4631      	mov	r1, r6
 800d98e:	a80a      	add	r0, sp, #40	@ 0x28
 800d990:	f7ff fbb6 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 800d994:	4b38      	ldr	r3, [pc, #224]	@ (800da78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d996:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d99a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800d99e:	2100      	movs	r1, #0
 800d9a0:	aa0a      	add	r2, sp, #40	@ 0x28
 800d9a2:	4b36      	ldr	r3, [pc, #216]	@ (800da7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d9a4:	910c      	str	r1, [sp, #48]	@ 0x30
 800d9a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9ae:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800d9b2:	ab08      	add	r3, sp, #32
 800d9b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	a90c      	add	r1, sp, #48	@ 0x30
 800d9bc:	f7ff fba0 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 800d9c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d13c      	bne.n	800da40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800d9cc:	2600      	movs	r6, #0
 800d9ce:	682a      	ldr	r2, [r5, #0]
 800d9d0:	696b      	ldr	r3, [r5, #20]
 800d9d2:	616e      	str	r6, [r5, #20]
 800d9d4:	9305      	str	r3, [sp, #20]
 800d9d6:	6892      	ldr	r2, [r2, #8]
 800d9d8:	a908      	add	r1, sp, #32
 800d9da:	4628      	mov	r0, r5
 800d9dc:	4790      	blx	r2
 800d9de:	9b05      	ldr	r3, [sp, #20]
 800d9e0:	616b      	str	r3, [r5, #20]
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800d9f0:	f7fb fd0b 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
 800d9f4:	4b23      	ldr	r3, [pc, #140]	@ (800da84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d9f6:	9a01      	ldr	r2, [sp, #4]
 800d9f8:	801a      	strh	r2, [r3, #0]
 800d9fa:	4b23      	ldr	r3, [pc, #140]	@ (800da88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800d9fc:	9a02      	ldr	r2, [sp, #8]
 800d9fe:	801a      	strh	r2, [r3, #0]
 800da00:	4b1d      	ldr	r3, [pc, #116]	@ (800da78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800da02:	9a03      	ldr	r2, [sp, #12]
 800da04:	801a      	strh	r2, [r3, #0]
 800da06:	4b1d      	ldr	r3, [pc, #116]	@ (800da7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800da08:	9a04      	ldr	r2, [sp, #16]
 800da0a:	801a      	strh	r2, [r3, #0]
 800da0c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	4620      	mov	r0, r4
 800da14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da16:	4798      	blx	r3
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	4620      	mov	r0, r4
 800da1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da1e:	4798      	blx	r3
 800da20:	b00f      	add	sp, #60	@ 0x3c
 800da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da26:	883b      	ldrh	r3, [r7, #0]
 800da28:	f8ab 0000 	strh.w	r0, [fp]
 800da2c:	f8aa 3000 	strh.w	r3, [sl]
 800da30:	e789      	b.n	800d946 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800da32:	462a      	mov	r2, r5
 800da34:	ab0a      	add	r3, sp, #40	@ 0x28
 800da36:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800da3a:	6851      	ldr	r1, [r2, #4]
 800da3c:	c303      	stmia	r3!, {r0, r1}
 800da3e:	e7a9      	b.n	800d994 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800da40:	a807      	add	r0, sp, #28
 800da42:	f005 f9e5 	bl	8012e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800da46:	4606      	mov	r6, r0
 800da48:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800da4a:	6803      	ldr	r3, [r0, #0]
 800da4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da4e:	4798      	blx	r3
 800da50:	4286      	cmp	r6, r0
 800da52:	d1b8      	bne.n	800d9c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800da54:	f7fa ff72 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	4606      	mov	r6, r0
 800da5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da5e:	9305      	str	r3, [sp, #20]
 800da60:	a807      	add	r0, sp, #28
 800da62:	f005 f9d5 	bl	8012e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800da66:	9b05      	ldr	r3, [sp, #20]
 800da68:	4601      	mov	r1, r0
 800da6a:	4630      	mov	r0, r6
 800da6c:	4798      	blx	r3
 800da6e:	f080 0001 	eor.w	r0, r0, #1
 800da72:	b2c0      	uxtb	r0, r0
 800da74:	e7a8      	b.n	800d9c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800da76:	bf00      	nop
 800da78:	2002b020 	.word	0x2002b020
 800da7c:	2002b022 	.word	0x2002b022
 800da80:	2002b024 	.word	0x2002b024
 800da84:	2002b026 	.word	0x2002b026
 800da88:	2002b028 	.word	0x2002b028

0800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800da8c:	b510      	push	{r4, lr}
 800da8e:	4b07      	ldr	r3, [pc, #28]	@ (800daac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	4604      	mov	r4, r0
 800da94:	b13b      	cbz	r3, 800daa6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800da96:	6803      	ldr	r3, [r0, #0]
 800da98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da9a:	4798      	blx	r3
 800da9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da9e:	4283      	cmp	r3, r0
 800daa0:	d101      	bne.n	800daa6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800daa2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800daa8:	e7fc      	b.n	800daa4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800daaa:	bf00      	nop
 800daac:	2002b02a 	.word	0x2002b02a

0800dab0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab4:	b08a      	sub	sp, #40	@ 0x28
 800dab6:	461d      	mov	r5, r3
 800dab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dabc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dac0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800dac4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dac8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dacc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dad0:	2400      	movs	r4, #0
 800dad2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dad6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800dada:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dade:	4690      	mov	r8, r2
 800dae0:	4607      	mov	r7, r0
 800dae2:	9404      	str	r4, [sp, #16]
 800dae4:	f88d 4020 	strb.w	r4, [sp, #32]
 800dae8:	f7ff ffd0 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800daec:	fb06 8505 	mla	r5, r6, r5, r8
 800daf0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	9505      	str	r5, [sp, #20]
 800daf8:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dafc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800db00:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800db04:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800db08:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800db0c:	6803      	ldr	r3, [r0, #0]
 800db0e:	a901      	add	r1, sp, #4
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	4798      	blx	r3
 800db14:	b00a      	add	sp, #40	@ 0x28
 800db16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db1a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800db1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1e:	b08b      	sub	sp, #44	@ 0x2c
 800db20:	2400      	movs	r4, #0
 800db22:	461d      	mov	r5, r3
 800db24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db28:	4688      	mov	r8, r1
 800db2a:	4691      	mov	r9, r2
 800db2c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800db30:	9404      	str	r4, [sp, #16]
 800db32:	4607      	mov	r7, r0
 800db34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db38:	f7ff ffa8 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800db3c:	fb06 9505 	mla	r5, r6, r5, r9
 800db40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800db44:	f8ad 3018 	strh.w	r3, [sp, #24]
 800db48:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800db4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	9505      	str	r5, [sp, #20]
 800db54:	f8ad 301a 	strh.w	r3, [sp, #26]
 800db58:	f8ad 401c 	strh.w	r4, [sp, #28]
 800db5c:	f8ad 601e 	strh.w	r6, [sp, #30]
 800db60:	f8cd 8010 	str.w	r8, [sp, #16]
 800db64:	f8ad 4020 	strh.w	r4, [sp, #32]
 800db68:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800db6c:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800db70:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800db74:	6803      	ldr	r3, [r0, #0]
 800db76:	a901      	add	r1, sp, #4
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	4798      	blx	r3
 800db7c:	b00b      	add	sp, #44	@ 0x2c
 800db7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800db84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800db84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db88:	b08a      	sub	sp, #40	@ 0x28
 800db8a:	4698      	mov	r8, r3
 800db8c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800db90:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800db94:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800db98:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800db9c:	2300      	movs	r3, #0
 800db9e:	2d0b      	cmp	r5, #11
 800dba0:	4606      	mov	r6, r0
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800dba8:	d138      	bne.n	800dc1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800dbaa:	2380      	movs	r3, #128	@ 0x80
 800dbac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dbb0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dbb4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dbb8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dbbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dbc0:	f88d 0020 	strb.w	r0, [sp, #32]
 800dbc4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800dbc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dbcc:	4630      	mov	r0, r6
 800dbce:	9203      	str	r2, [sp, #12]
 800dbd0:	f7ff ff5c 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dbd4:	2c0b      	cmp	r4, #11
 800dbd6:	bf98      	it	ls
 800dbd8:	4b1b      	ldrls	r3, [pc, #108]	@ (800dc48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800dbda:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800dbde:	bf98      	it	ls
 800dbe0:	5d19      	ldrbls	r1, [r3, r4]
 800dbe2:	f8ad 701e 	strh.w	r7, [sp, #30]
 800dbe6:	bf88      	it	hi
 800dbe8:	2100      	movhi	r1, #0
 800dbea:	fb02 8307 	mla	r3, r2, r7, r8
 800dbee:	10c9      	asrs	r1, r1, #3
 800dbf0:	fb01 0003 	mla	r0, r1, r3, r0
 800dbf4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800dbf8:	9005      	str	r0, [sp, #20]
 800dbfa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800dbfe:	6870      	ldr	r0, [r6, #4]
 800dc00:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800dc04:	2300      	movs	r3, #0
 800dc06:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800dc0a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800dc0e:	6803      	ldr	r3, [r0, #0]
 800dc10:	a901      	add	r1, sp, #4
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	4798      	blx	r3
 800dc16:	b00a      	add	sp, #40	@ 0x28
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	2d02      	cmp	r5, #2
 800dc1e:	d109      	bne.n	800dc34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800dc20:	28ff      	cmp	r0, #255	@ 0xff
 800dc22:	d105      	bne.n	800dc30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800dc24:	f1bc 0f00 	cmp.w	ip, #0
 800dc28:	bf14      	ite	ne
 800dc2a:	2340      	movne	r3, #64	@ 0x40
 800dc2c:	2320      	moveq	r3, #32
 800dc2e:	e7bd      	b.n	800dbac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dc30:	2340      	movs	r3, #64	@ 0x40
 800dc32:	e7bb      	b.n	800dbac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dc34:	28ff      	cmp	r0, #255	@ 0xff
 800dc36:	d105      	bne.n	800dc44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800dc38:	f1bc 0f00 	cmp.w	ip, #0
 800dc3c:	bf14      	ite	ne
 800dc3e:	2304      	movne	r3, #4
 800dc40:	2301      	moveq	r3, #1
 800dc42:	e7b3      	b.n	800dbac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dc44:	2304      	movs	r3, #4
 800dc46:	e7b1      	b.n	800dbac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800dc48:	080235b8 	.word	0x080235b8

0800dc4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800dc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc50:	b08b      	sub	sp, #44	@ 0x2c
 800dc52:	461d      	mov	r5, r3
 800dc54:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800dc58:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800dc5c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800dc60:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800dc64:	bf14      	ite	ne
 800dc66:	2308      	movne	r3, #8
 800dc68:	2302      	moveq	r3, #2
 800dc6a:	2400      	movs	r4, #0
 800dc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc70:	4688      	mov	r8, r1
 800dc72:	4693      	mov	fp, r2
 800dc74:	9404      	str	r4, [sp, #16]
 800dc76:	4607      	mov	r7, r0
 800dc78:	f7ff ff08 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dc7c:	2e0b      	cmp	r6, #11
 800dc7e:	bf98      	it	ls
 800dc80:	4b15      	ldrls	r3, [pc, #84]	@ (800dcd8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800dc82:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800dc86:	bf98      	it	ls
 800dc88:	5d9c      	ldrbls	r4, [r3, r6]
 800dc8a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800dc8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dc92:	fb05 b50a 	mla	r5, r5, sl, fp
 800dc96:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800dc9a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dc9e:	10e4      	asrs	r4, r4, #3
 800dca0:	fb04 0405 	mla	r4, r4, r5, r0
 800dca4:	2300      	movs	r3, #0
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	9405      	str	r4, [sp, #20]
 800dcaa:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dcae:	f8ad a01e 	strh.w	sl, [sp, #30]
 800dcb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800dcb6:	f88d 9020 	strb.w	r9, [sp, #32]
 800dcba:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800dcbe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800dcc2:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800dcc6:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800dcca:	6803      	ldr	r3, [r0, #0]
 800dccc:	a901      	add	r1, sp, #4
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	4798      	blx	r3
 800dcd2:	b00b      	add	sp, #44	@ 0x2c
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	080235b8 	.word	0x080235b8

0800dcdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800dcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce0:	461e      	mov	r6, r3
 800dce2:	4b0a      	ldr	r3, [pc, #40]	@ (800dd0c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800dce4:	460f      	mov	r7, r1
 800dce6:	881d      	ldrh	r5, [r3, #0]
 800dce8:	4690      	mov	r8, r2
 800dcea:	f7fa fe27 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800dcee:	6803      	ldr	r3, [r0, #0]
 800dcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf2:	4798      	blx	r3
 800dcf4:	280b      	cmp	r0, #11
 800dcf6:	bf9a      	itte	ls
 800dcf8:	4b05      	ldrls	r3, [pc, #20]	@ (800dd10 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800dcfa:	5c1c      	ldrbls	r4, [r3, r0]
 800dcfc:	2400      	movhi	r4, #0
 800dcfe:	fb08 7005 	mla	r0, r8, r5, r7
 800dd02:	10e4      	asrs	r4, r4, #3
 800dd04:	fb04 6000 	mla	r0, r4, r0, r6
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	2002b026 	.word	0x2002b026
 800dd10:	080235b8 	.word	0x080235b8

0800dd14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800dd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd16:	b08b      	sub	sp, #44	@ 0x2c
 800dd18:	461f      	mov	r7, r3
 800dd1a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800dd1e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dd22:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800dd26:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dd2a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dd2e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dd32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dd36:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dd3a:	2500      	movs	r5, #0
 800dd3c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800dd40:	f88d 3020 	strb.w	r3, [sp, #32]
 800dd44:	4604      	mov	r4, r0
 800dd46:	4616      	mov	r6, r2
 800dd48:	9504      	str	r5, [sp, #16]
 800dd4a:	f7ff fe9f 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dd4e:	463a      	mov	r2, r7
 800dd50:	4631      	mov	r1, r6
 800dd52:	4603      	mov	r3, r0
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7ff ffc1 	bl	800dcdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dd5a:	4b0e      	ldr	r3, [pc, #56]	@ (800dd94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800dd5c:	9005      	str	r0, [sp, #20]
 800dd5e:	881b      	ldrh	r3, [r3, #0]
 800dd60:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dd64:	f7fa fdea 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800dd68:	6803      	ldr	r3, [r0, #0]
 800dd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6c:	4798      	blx	r3
 800dd6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd70:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800dd74:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800dd78:	9304      	str	r3, [sp, #16]
 800dd7a:	6860      	ldr	r0, [r4, #4]
 800dd7c:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800dd80:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800dd84:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800dd88:	6803      	ldr	r3, [r0, #0]
 800dd8a:	a901      	add	r1, sp, #4
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	4798      	blx	r3
 800dd90:	b00b      	add	sp, #44	@ 0x2c
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd94:	2002b026 	.word	0x2002b026

0800dd98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800dd98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd9a:	b08d      	sub	sp, #52	@ 0x34
 800dd9c:	466b      	mov	r3, sp
 800dd9e:	e883 0006 	stmia.w	r3, {r1, r2}
 800dda2:	2300      	movs	r3, #0
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	6803      	ldr	r3, [r0, #0]
 800dda8:	f8bd 6000 	ldrh.w	r6, [sp]
 800ddac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddae:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ddb2:	2501      	movs	r5, #1
 800ddb4:	9503      	str	r5, [sp, #12]
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4798      	blx	r3
 800ddba:	463a      	mov	r2, r7
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f7ff ff8b 	bl	800dcdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ddc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ddce:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ddd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ddd6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800ddda:	4b0f      	ldr	r3, [pc, #60]	@ (800de18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800dddc:	9004      	str	r0, [sp, #16]
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800dde4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800dde8:	f7fa fda8 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800ddec:	6803      	ldr	r3, [r0, #0]
 800ddee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf0:	4798      	blx	r3
 800ddf2:	23ff      	movs	r3, #255	@ 0xff
 800ddf4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800ddf8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800ddfc:	6860      	ldr	r0, [r4, #4]
 800ddfe:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800de02:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800de06:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	a903      	add	r1, sp, #12
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	4798      	blx	r3
 800de12:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800de14:	b00d      	add	sp, #52	@ 0x34
 800de16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de18:	2002b026 	.word	0x2002b026

0800de1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	b08c      	sub	sp, #48	@ 0x30
 800de22:	461e      	mov	r6, r3
 800de24:	466d      	mov	r5, sp
 800de26:	2300      	movs	r3, #0
 800de28:	e885 0006 	stmia.w	r5, {r1, r2}
 800de2c:	9306      	str	r3, [sp, #24]
 800de2e:	6803      	ldr	r3, [r0, #0]
 800de30:	f8bd 7000 	ldrh.w	r7, [sp]
 800de34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de36:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800de3a:	2501      	movs	r5, #1
 800de3c:	9503      	str	r5, [sp, #12]
 800de3e:	4604      	mov	r4, r0
 800de40:	4798      	blx	r3
 800de42:	4642      	mov	r2, r8
 800de44:	4639      	mov	r1, r7
 800de46:	4603      	mov	r3, r0
 800de48:	4620      	mov	r0, r4
 800de4a:	f7ff ff47 	bl	800dcdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800de4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800de52:	f8ad 3020 	strh.w	r3, [sp, #32]
 800de56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de5a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800de5e:	4b11      	ldr	r3, [pc, #68]	@ (800dea4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800de60:	9004      	str	r0, [sp, #16]
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800de68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de6a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800de6e:	9607      	str	r6, [sp, #28]
 800de70:	f7fa fd64 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 800de74:	6803      	ldr	r3, [r0, #0]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	4798      	blx	r3
 800de7a:	23ff      	movs	r3, #255	@ 0xff
 800de7c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800de80:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800de84:	6860      	ldr	r0, [r4, #4]
 800de86:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800de8a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800de8e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800de92:	6803      	ldr	r3, [r0, #0]
 800de94:	a903      	add	r1, sp, #12
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	4798      	blx	r3
 800de9a:	4630      	mov	r0, r6
 800de9c:	b00c      	add	sp, #48	@ 0x30
 800de9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea2:	bf00      	nop
 800dea4:	2002b026 	.word	0x2002b026

0800dea8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deaa:	b085      	sub	sp, #20
 800deac:	ac02      	add	r4, sp, #8
 800deae:	e884 0006 	stmia.w	r4, {r1, r2}
 800deb2:	4605      	mov	r5, r0
 800deb4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800deb8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800debc:	f7ff fde6 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dec0:	463a      	mov	r2, r7
 800dec2:	4603      	mov	r3, r0
 800dec4:	4631      	mov	r1, r6
 800dec6:	4628      	mov	r0, r5
 800dec8:	f7ff ff08 	bl	800dcdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800decc:	4a05      	ldr	r2, [pc, #20]	@ (800dee4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800dece:	682b      	ldr	r3, [r5, #0]
 800ded0:	8812      	ldrh	r2, [r2, #0]
 800ded2:	9200      	str	r2, [sp, #0]
 800ded4:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800ded6:	e894 0006 	ldmia.w	r4, {r1, r2}
 800deda:	4603      	mov	r3, r0
 800dedc:	4628      	mov	r0, r5
 800dede:	47b0      	blx	r6
 800dee0:	b005      	add	sp, #20
 800dee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee4:	2002b026 	.word	0x2002b026

0800dee8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800deee:	4604      	mov	r4, r0
 800def0:	b19b      	cbz	r3, 800df1a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800def2:	2002      	movs	r0, #2
 800def4:	f7fd fb94 	bl	800b620 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800def8:	2300      	movs	r3, #0
 800defa:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800defe:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	4620      	mov	r0, r4
 800df06:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800df0a:	f7ff fdbf 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df0e:	462b      	mov	r3, r5
 800df10:	4601      	mov	r1, r0
 800df12:	4620      	mov	r0, r4
 800df14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df18:	4718      	bx	r3
 800df1a:	bd70      	pop	{r4, r5, r6, pc}

0800df1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800df22:	428b      	cmp	r3, r1
 800df24:	4604      	mov	r4, r0
 800df26:	460d      	mov	r5, r1
 800df28:	d006      	beq.n	800df38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800df2a:	6803      	ldr	r3, [r0, #0]
 800df2c:	b929      	cbnz	r1, 800df3a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800df2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800df32:	4798      	blx	r3
 800df34:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800df38:	bd38      	pop	{r3, r4, r5, pc}
 800df3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800df3e:	e7f8      	b.n	800df32 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800df40 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800df40:	b510      	push	{r4, lr}
 800df42:	4b0c      	ldr	r3, [pc, #48]	@ (800df74 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	4604      	mov	r4, r0
 800df48:	b953      	cbnz	r3, 800df60 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800df4a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800df4e:	b93b      	cbnz	r3, 800df60 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800df50:	6840      	ldr	r0, [r0, #4]
 800df52:	f000 f90d 	bl	800e170 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800df56:	b118      	cbz	r0, 800df60 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800df58:	6862      	ldr	r2, [r4, #4]
 800df5a:	7a53      	ldrb	r3, [r2, #9]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0fc      	beq.n	800df5a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800df60:	f7fd fe34 	bl	800bbcc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800df64:	4620      	mov	r0, r4
 800df66:	2100      	movs	r1, #0
 800df68:	f7ff ffd8 	bl	800df1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800df6c:	4620      	mov	r0, r4
 800df6e:	f7ff fd8d 	bl	800da8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df72:	bd10      	pop	{r4, pc}
 800df74:	2002b02a 	.word	0x2002b02a

0800df78 <_ZN8touchgfx13DMA_Interface5flushEv>:
 800df78:	6803      	ldr	r3, [r0, #0]
 800df7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df7c:	4718      	bx	r3

0800df7e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800df7e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800df82:	1a13      	subs	r3, r2, r0
 800df84:	4258      	negs	r0, r3
 800df86:	4158      	adcs	r0, r3
 800df88:	4770      	bx	lr

0800df8a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800df8a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800df8e:	1a9b      	subs	r3, r3, r2
 800df90:	2b00      	cmp	r3, #0
 800df92:	bfdc      	itt	le
 800df94:	6882      	ldrle	r2, [r0, #8]
 800df96:	189b      	addle	r3, r3, r2
 800df98:	2b01      	cmp	r3, #1
 800df9a:	bfcc      	ite	gt
 800df9c:	2000      	movgt	r0, #0
 800df9e:	2001      	movle	r0, #1
 800dfa0:	4770      	bx	lr

0800dfa2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800dfa2:	6902      	ldr	r2, [r0, #16]
 800dfa4:	6843      	ldr	r3, [r0, #4]
 800dfa6:	2024      	movs	r0, #36	@ 0x24
 800dfa8:	fb00 3002 	mla	r0, r0, r2, r3
 800dfac:	4770      	bx	lr

0800dfae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800dfae:	6803      	ldr	r3, [r0, #0]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	4718      	bx	r3

0800dfb4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	7203      	strb	r3, [r0, #8]
 800dfba:	4604      	mov	r4, r0
 800dfbc:	6840      	ldr	r0, [r0, #4]
 800dfbe:	6803      	ldr	r3, [r0, #0]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	4798      	blx	r3
 800dfc4:	6803      	ldr	r3, [r0, #0]
 800dfc6:	2b40      	cmp	r3, #64	@ 0x40
 800dfc8:	4605      	mov	r5, r0
 800dfca:	d00c      	beq.n	800dfe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800dfcc:	d810      	bhi.n	800dff0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800dfce:	2b04      	cmp	r3, #4
 800dfd0:	d01d      	beq.n	800e00e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800dfd2:	d804      	bhi.n	800dfde <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d006      	beq.n	800dfe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d02c      	beq.n	800e036 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
 800dfde:	2b08      	cmp	r3, #8
 800dfe0:	d01d      	beq.n	800e01e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800dfe2:	2b20      	cmp	r3, #32
 800dfe4:	d1fa      	bne.n	800dfdc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	4620      	mov	r0, r4
 800dfea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfec:	4798      	blx	r3
 800dfee:	e013      	b.n	800e018 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800dff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dff4:	d0f7      	beq.n	800dfe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800dff6:	d804      	bhi.n	800e002 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800dff8:	2b80      	cmp	r3, #128	@ 0x80
 800dffa:	d0f4      	beq.n	800dfe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800dffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e000:	e7f0      	b.n	800dfe4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e006:	d0ee      	beq.n	800dfe6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e00c:	e7e5      	b.n	800dfda <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	7f01      	ldrb	r1, [r0, #28]
 800e012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e014:	4620      	mov	r0, r4
 800e016:	4798      	blx	r3
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e01c:	e006      	b.n	800e02c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	7f01      	ldrb	r1, [r0, #28]
 800e022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e024:	4620      	mov	r0, r4
 800e026:	4798      	blx	r3
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e02c:	4629      	mov	r1, r5
 800e02e:	4620      	mov	r0, r4
 800e030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e034:	4718      	bx	r3
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	4620      	mov	r0, r4
 800e03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e03c:	4798      	blx	r3
 800e03e:	e7f3      	b.n	800e028 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e040 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e040:	4770      	bx	lr

0800e042 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e042:	4770      	bx	lr

0800e044 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e044:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e048:	1ad2      	subs	r2, r2, r3
 800e04a:	2a00      	cmp	r2, #0
 800e04c:	b510      	push	{r4, lr}
 800e04e:	bfdc      	itt	le
 800e050:	6884      	ldrle	r4, [r0, #8]
 800e052:	1912      	addle	r2, r2, r4
 800e054:	2a01      	cmp	r2, #1
 800e056:	dd16      	ble.n	800e086 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e058:	6842      	ldr	r2, [r0, #4]
 800e05a:	2424      	movs	r4, #36	@ 0x24
 800e05c:	fb04 2303 	mla	r3, r4, r3, r2
 800e060:	f101 0220 	add.w	r2, r1, #32
 800e064:	f851 4b04 	ldr.w	r4, [r1], #4
 800e068:	f843 4b04 	str.w	r4, [r3], #4
 800e06c:	4291      	cmp	r1, r2
 800e06e:	d1f9      	bne.n	800e064 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e070:	780a      	ldrb	r2, [r1, #0]
 800e072:	701a      	strb	r2, [r3, #0]
 800e074:	68c3      	ldr	r3, [r0, #12]
 800e076:	6882      	ldr	r2, [r0, #8]
 800e078:	f3bf 8f5b 	dmb	ish
 800e07c:	3301      	adds	r3, #1
 800e07e:	429a      	cmp	r2, r3
 800e080:	bfd8      	it	le
 800e082:	1a9b      	suble	r3, r3, r2
 800e084:	60c3      	str	r3, [r0, #12]
 800e086:	bd10      	pop	{r4, pc}

0800e088 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e088:	6903      	ldr	r3, [r0, #16]
 800e08a:	6882      	ldr	r2, [r0, #8]
 800e08c:	f3bf 8f5b 	dmb	ish
 800e090:	3301      	adds	r3, #1
 800e092:	429a      	cmp	r2, r3
 800e094:	bfd8      	it	le
 800e096:	1a9b      	suble	r3, r3, r2
 800e098:	6103      	str	r3, [r0, #16]
 800e09a:	4770      	bx	lr

0800e09c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	4604      	mov	r4, r0
 800e0a0:	460e      	mov	r6, r1
 800e0a2:	6860      	ldr	r0, [r4, #4]
 800e0a4:	6803      	ldr	r3, [r0, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	4798      	blx	r3
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d1f9      	bne.n	800e0a2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e0e4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e0b0:	6828      	ldr	r0, [r5, #0]
 800e0b2:	6803      	ldr	r3, [r0, #0]
 800e0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0b8:	4798      	blx	r3
 800e0ba:	f7fd fda1 	bl	800bc00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e0be:	6828      	ldr	r0, [r5, #0]
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	f7ff ff2b 	bl	800df1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e0c6:	6860      	ldr	r0, [r4, #4]
 800e0c8:	6803      	ldr	r3, [r0, #0]
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	4798      	blx	r3
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d6:	4798      	blx	r3
 800e0d8:	6828      	ldr	r0, [r5, #0]
 800e0da:	6803      	ldr	r3, [r0, #0]
 800e0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0e2:	4718      	bx	r3
 800e0e4:	2002b02c 	.word	0x2002b02c

0800e0e8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e0e8:	b508      	push	{r3, lr}
 800e0ea:	f7fd fd6f 	bl	800bbcc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e0f2:	f7fd bd79 	b.w	800bbe8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e0f6 <_ZN8touchgfx13DMA_Interface5startEv>:
 800e0f6:	b510      	push	{r4, lr}
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	6840      	ldr	r0, [r0, #4]
 800e0fc:	6803      	ldr	r3, [r0, #0]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4798      	blx	r3
 800e102:	b948      	cbnz	r0, 800e118 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e104:	7a63      	ldrb	r3, [r4, #9]
 800e106:	b13b      	cbz	r3, 800e118 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e108:	7a23      	ldrb	r3, [r4, #8]
 800e10a:	b92b      	cbnz	r3, 800e118 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	4620      	mov	r0, r4
 800e110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e116:	4718      	bx	r3
 800e118:	bd10      	pop	{r4, pc}

0800e11a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e11a:	b570      	push	{r4, r5, r6, lr}
 800e11c:	4604      	mov	r4, r0
 800e11e:	6840      	ldr	r0, [r0, #4]
 800e120:	6803      	ldr	r3, [r0, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4798      	blx	r3
 800e126:	4605      	mov	r5, r0
 800e128:	b930      	cbnz	r0, 800e138 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e12a:	7a23      	ldrb	r3, [r4, #8]
 800e12c:	b123      	cbz	r3, 800e138 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e12e:	6860      	ldr	r0, [r4, #4]
 800e130:	6803      	ldr	r3, [r0, #0]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	4798      	blx	r3
 800e136:	7225      	strb	r5, [r4, #8]
 800e138:	6860      	ldr	r0, [r4, #4]
 800e13a:	6803      	ldr	r3, [r0, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4798      	blx	r3
 800e140:	b928      	cbnz	r0, 800e14e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	4620      	mov	r0, r4
 800e146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e14c:	4718      	bx	r3
 800e14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e152:	f7fd bd61 	b.w	800bc18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800e158 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e158:	b510      	push	{r4, lr}
 800e15a:	4c04      	ldr	r4, [pc, #16]	@ (800e16c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e15c:	6082      	str	r2, [r0, #8]
 800e15e:	2200      	movs	r2, #0
 800e160:	e9c0 4100 	strd	r4, r1, [r0]
 800e164:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e168:	bd10      	pop	{r4, pc}
 800e16a:	bf00      	nop
 800e16c:	08023708 	.word	0x08023708

0800e170 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e170:	6840      	ldr	r0, [r0, #4]
 800e172:	6803      	ldr	r3, [r0, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4718      	bx	r3

0800e178 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800e178:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800e17c:	4770      	bx	lr

0800e17e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800e17e:	b510      	push	{r4, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e184:	b150      	cbz	r0, 800e19c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800e186:	6803      	ldr	r3, [r0, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	4798      	blx	r3
 800e18c:	b130      	cbz	r0, 800e19c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800e18e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e190:	6803      	ldr	r3, [r0, #0]
 800e192:	4621      	mov	r1, r4
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e19a:	4718      	bx	r3
 800e19c:	bd10      	pop	{r4, pc}

0800e19e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800e19e:	b570      	push	{r4, r5, r6, lr}
 800e1a0:	790b      	ldrb	r3, [r1, #4]
 800e1a2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	bf0c      	ite	eq
 800e1aa:	2301      	moveq	r3, #1
 800e1ac:	2300      	movne	r3, #0
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	460e      	mov	r6, r1
 800e1b2:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800e1b6:	d109      	bne.n	800e1cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800e1b8:	b14d      	cbz	r5, 800e1ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800e1ba:	7933      	ldrb	r3, [r6, #4]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d10c      	bne.n	800e1da <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800e1c0:	6823      	ldr	r3, [r4, #0]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1ca:	4718      	bx	r3
 800e1cc:	b12d      	cbz	r5, 800e1da <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	695b      	ldr	r3, [r3, #20]
 800e1d4:	4798      	blx	r3
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	d1ef      	bne.n	800e1ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800e1da:	bd70      	pop	{r4, r5, r6, pc}

0800e1dc <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e1dc:	2300      	movs	r3, #0
 800e1de:	8083      	strh	r3, [r0, #4]
 800e1e0:	80c3      	strh	r3, [r0, #6]
 800e1e2:	8003      	strh	r3, [r0, #0]
 800e1e4:	8043      	strh	r3, [r0, #2]
 800e1e6:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800e1ea:	2bff      	cmp	r3, #255	@ 0xff
 800e1ec:	bf01      	itttt	eq
 800e1ee:	890b      	ldrheq	r3, [r1, #8]
 800e1f0:	8083      	strheq	r3, [r0, #4]
 800e1f2:	894b      	ldrheq	r3, [r1, #10]
 800e1f4:	80c3      	strheq	r3, [r0, #6]
 800e1f6:	4770      	bx	lr

0800e1f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	6808      	ldr	r0, [r1, #0]
 800e1fe:	6849      	ldr	r1, [r1, #4]
 800e200:	466b      	mov	r3, sp
 800e202:	c303      	stmia	r3!, {r0, r1}
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	4669      	mov	r1, sp
 800e208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e20a:	4620      	mov	r0, r4
 800e20c:	4798      	blx	r3
 800e20e:	4b08      	ldr	r3, [pc, #32]	@ (800e230 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800e216:	b10a      	cbz	r2, 800e21c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e218:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e21a:	b900      	cbnz	r0, 800e21e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e21c:	6898      	ldr	r0, [r3, #8]
 800e21e:	6803      	ldr	r3, [r0, #0]
 800e220:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e222:	6a1d      	ldr	r5, [r3, #32]
 800e224:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800e228:	4669      	mov	r1, sp
 800e22a:	47a8      	blx	r5
 800e22c:	b003      	add	sp, #12
 800e22e:	bd30      	pop	{r4, r5, pc}
 800e230:	2002b02c 	.word	0x2002b02c

0800e234 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800e234:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800e238:	b12a      	cbz	r2, 800e246 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800e23a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800e23e:	b112      	cbz	r2, 800e246 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800e240:	6803      	ldr	r3, [r0, #0]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	4718      	bx	r3
 800e246:	4770      	bx	lr

0800e248 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	880b      	ldrh	r3, [r1, #0]
 800e24c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800e24e:	4605      	mov	r5, r0
 800e250:	8813      	ldrh	r3, [r2, #0]
 800e252:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e256:	4604      	mov	r4, r0
 800e258:	4628      	mov	r0, r5
 800e25a:	f004 fc63 	bl	8012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e25e:	4606      	mov	r6, r0
 800e260:	4628      	mov	r0, r5
 800e262:	f004 fc93 	bl	8012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	4605      	mov	r5, r0
 800e26a:	4631      	mov	r1, r6
 800e26c:	4620      	mov	r0, r4
 800e26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e270:	4798      	blx	r3
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	4629      	mov	r1, r5
 800e276:	4620      	mov	r0, r4
 800e278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e27e:	4718      	bx	r3

0800e280 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e280:	b510      	push	{r4, lr}
 800e282:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800e286:	2bff      	cmp	r3, #255	@ 0xff
 800e288:	4604      	mov	r4, r0
 800e28a:	d006      	beq.n	800e29a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e28c:	2300      	movs	r3, #0
 800e28e:	8003      	strh	r3, [r0, #0]
 800e290:	8043      	strh	r3, [r0, #2]
 800e292:	8083      	strh	r3, [r0, #4]
 800e294:	80c3      	strh	r3, [r0, #6]
 800e296:	4620      	mov	r0, r4
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800e29e:	b11b      	cbz	r3, 800e2a8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e2a0:	3130      	adds	r1, #48	@ 0x30
 800e2a2:	f004 fca7 	bl	8012bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e2a6:	e7f6      	b.n	800e296 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e2a8:	312e      	adds	r1, #46	@ 0x2e
 800e2aa:	e7fa      	b.n	800e2a2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e2ac <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800e2b4:	b08a      	sub	sp, #40	@ 0x28
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4688      	mov	r8, r1
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d066      	beq.n	800e38c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e2be:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800e2c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e2c4:	a805      	add	r0, sp, #20
 800e2c6:	f004 fc2d 	bl	8012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	a805      	add	r0, sp, #20
 800e2ce:	f004 fc5d 	bl	8012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e2d2:	f9b8 6000 	ldrsh.w	r6, [r8]
 800e2d6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e2da:	4432      	add	r2, r6
 800e2dc:	b292      	uxth	r2, r2
 800e2de:	2300      	movs	r3, #0
 800e2e0:	fa0f fc82 	sxth.w	ip, r2
 800e2e4:	459c      	cmp	ip, r3
 800e2e6:	9306      	str	r3, [sp, #24]
 800e2e8:	dd52      	ble.n	800e390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e2ea:	42b7      	cmp	r7, r6
 800e2ec:	dd50      	ble.n	800e390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e2ee:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800e2f2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800e2f6:	442b      	add	r3, r5
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	b219      	sxth	r1, r3
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	dd47      	ble.n	800e390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e300:	42a8      	cmp	r0, r5
 800e302:	dd45      	ble.n	800e390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800e304:	4567      	cmp	r7, ip
 800e306:	bfb8      	it	lt
 800e308:	b2ba      	uxthlt	r2, r7
 800e30a:	4288      	cmp	r0, r1
 800e30c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800e310:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800e314:	bfb8      	it	lt
 800e316:	b283      	uxthlt	r3, r0
 800e318:	1b92      	subs	r2, r2, r6
 800e31a:	1b5b      	subs	r3, r3, r5
 800e31c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e320:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e324:	f8ad 6018 	strh.w	r6, [sp, #24]
 800e328:	f8ad 501a 	strh.w	r5, [sp, #26]
 800e32c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e334:	429a      	cmp	r2, r3
 800e336:	d026      	beq.n	800e386 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e338:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	dd22      	ble.n	800e386 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e340:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e344:	2b00      	cmp	r3, #0
 800e346:	dd1e      	ble.n	800e386 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800e348:	2300      	movs	r3, #0
 800e34a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	a908      	add	r1, sp, #32
 800e352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e354:	4620      	mov	r0, r4
 800e356:	4798      	blx	r3
 800e358:	4b0f      	ldr	r3, [pc, #60]	@ (800e398 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800e360:	b10a      	cbz	r2, 800e366 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800e362:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e364:	b900      	cbnz	r0, 800e368 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800e366:	6898      	ldr	r0, [r3, #8]
 800e368:	6801      	ldr	r1, [r0, #0]
 800e36a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800e36e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e372:	2501      	movs	r5, #1
 800e374:	9502      	str	r5, [sp, #8]
 800e376:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800e37a:	9401      	str	r4, [sp, #4]
 800e37c:	ac06      	add	r4, sp, #24
 800e37e:	9400      	str	r4, [sp, #0]
 800e380:	688c      	ldr	r4, [r1, #8]
 800e382:	a905      	add	r1, sp, #20
 800e384:	47a0      	blx	r4
 800e386:	b00a      	add	sp, #40	@ 0x28
 800e388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e38c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800e38e:	e797      	b.n	800e2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e390:	2300      	movs	r3, #0
 800e392:	9307      	str	r3, [sp, #28]
 800e394:	e7ca      	b.n	800e32c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800e396:	bf00      	nop
 800e398:	2002b02c 	.word	0x2002b02c

0800e39c <_ZNK8touchgfx6Button17invalidateContentEv>:
 800e39c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800e3a0:	b12a      	cbz	r2, 800e3ae <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800e3a2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800e3a6:	b112      	cbz	r2, 800e3ae <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800e3a8:	6803      	ldr	r3, [r0, #0]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	4718      	bx	r3
 800e3ae:	4770      	bx	lr

0800e3b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800e3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	b08d      	sub	sp, #52	@ 0x34
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	f7ff ff77 	bl	800e2ac <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800e3be:	4a55      	ldr	r2, [pc, #340]	@ (800e514 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 800e3c0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e3c2:	8812      	ldrh	r2, [r2, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	f240 8082 	bls.w	800e4ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 800e3ca:	4d53      	ldr	r5, [pc, #332]	@ (800e518 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 800e3cc:	682a      	ldr	r2, [r5, #0]
 800e3ce:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e3d2:	4b52      	ldr	r3, [pc, #328]	@ (800e51c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e3da:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 800e3de:	2200      	movs	r2, #0
 800e3e0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800e3e4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800e3e8:	2a03      	cmp	r2, #3
 800e3ea:	d811      	bhi.n	800e410 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 800e3ec:	e8df f002 	tbb	[pc, r2]
 800e3f0:	89727902 	.word	0x89727902
 800e3f4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800e3f8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e3fc:	1ad2      	subs	r2, r2, r3
 800e3fe:	2002      	movs	r0, #2
 800e400:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e404:	fb92 f2f0 	sdiv	r2, r2, r0
 800e408:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e40c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e410:	f10d 080c 	add.w	r8, sp, #12
 800e414:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e418:	f10d 0914 	add.w	r9, sp, #20
 800e41c:	e889 0003 	stmia.w	r9, {r0, r1}
 800e420:	4639      	mov	r1, r7
 800e422:	4648      	mov	r0, r9
 800e424:	f7fe fe6c 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 800e428:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd4e      	ble.n	800e4ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 800e430:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800e434:	2b00      	cmp	r3, #0
 800e436:	dd4a      	ble.n	800e4ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 800e438:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800e43c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e440:	1a9b      	subs	r3, r3, r2
 800e442:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e446:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800e44a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e454:	6823      	ldr	r3, [r4, #0]
 800e456:	4641      	mov	r1, r8
 800e458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45a:	4620      	mov	r0, r4
 800e45c:	4798      	blx	r3
 800e45e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d053      	beq.n	800e50e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 800e466:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e468:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 800e470:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 800e474:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800e478:	785b      	ldrb	r3, [r3, #1]
 800e47a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e47c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800e480:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e484:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 800e488:	2300      	movs	r3, #0
 800e48a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800e48e:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 800e492:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e496:	4b22      	ldr	r3, [pc, #136]	@ (800e520 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800e498:	9607      	str	r6, [sp, #28]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f88d 5020 	strb.w	r5, [sp, #32]
 800e4a0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800e4a4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e4a8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e4ac:	b10a      	cbz	r2, 800e4b2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 800e4ae:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e4b0:	b904      	cbnz	r4, 800e4b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 800e4b2:	689c      	ldr	r4, [r3, #8]
 800e4b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e524 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	f7fc fe3e 	bl	800b138 <_ZNK8touchgfx5Texts7getTextEt>
 800e4bc:	ab07      	add	r3, sp, #28
 800e4be:	9001      	str	r0, [sp, #4]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	e898 0006 	ldmia.w	r8, {r1, r2}
 800e4c6:	464b      	mov	r3, r9
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7fc fdc6 	bl	800b05a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e4ce:	b00d      	add	sp, #52	@ 0x34
 800e4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4d4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800e4d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e4dc:	1ad2      	subs	r2, r2, r3
 800e4de:	3201      	adds	r2, #1
 800e4e0:	e78d      	b.n	800e3fe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 800e4e2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e4e6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800e4ea:	1ad2      	subs	r2, r2, r3
 800e4ec:	3201      	adds	r2, #1
 800e4ee:	2002      	movs	r0, #2
 800e4f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 800e4f4:	fb92 f2f0 	sdiv	r2, r2, r0
 800e4f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e4fc:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e500:	e786      	b.n	800e410 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 800e502:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e506:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800e50a:	1ad2      	subs	r2, r2, r3
 800e50c:	e7ef      	b.n	800e4ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 800e50e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800e510:	e7aa      	b.n	800e468 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 800e512:	bf00      	nop
 800e514:	2002b080 	.word	0x2002b080
 800e518:	2002b07c 	.word	0x2002b07c
 800e51c:	2002b084 	.word	0x2002b084
 800e520:	2002b02c 	.word	0x2002b02c
 800e524:	2002b088 	.word	0x2002b088

0800e528 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	2101      	movs	r1, #1
 800e52c:	4c13      	ldr	r4, [pc, #76]	@ (800e57c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800e52e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800e532:	2200      	movs	r2, #0
 800e534:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e538:	6004      	str	r4, [r0, #0]
 800e53a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e53e:	4c10      	ldr	r4, [pc, #64]	@ (800e580 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800e540:	8082      	strh	r2, [r0, #4]
 800e542:	80c2      	strh	r2, [r0, #6]
 800e544:	8102      	strh	r2, [r0, #8]
 800e546:	8142      	strh	r2, [r0, #10]
 800e548:	8182      	strh	r2, [r0, #12]
 800e54a:	81c2      	strh	r2, [r0, #14]
 800e54c:	8202      	strh	r2, [r0, #16]
 800e54e:	8242      	strh	r2, [r0, #18]
 800e550:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e554:	61c2      	str	r2, [r0, #28]
 800e556:	8402      	strh	r2, [r0, #32]
 800e558:	8442      	strh	r2, [r0, #34]	@ 0x22
 800e55a:	6282      	str	r2, [r0, #40]	@ 0x28
 800e55c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 800e560:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 800e562:	8601      	strh	r1, [r0, #48]	@ 0x30
 800e564:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 800e568:	6344      	str	r4, [r0, #52]	@ 0x34
 800e56a:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e56c:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 800e570:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800e574:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 800e578:	bd10      	pop	{r4, pc}
 800e57a:	bf00      	nop
 800e57c:	08023878 	.word	0x08023878
 800e580:	08022dcc 	.word	0x08022dcc

0800e584 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800e584:	b510      	push	{r4, lr}
 800e586:	6803      	ldr	r3, [r0, #0]
 800e588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58a:	460c      	mov	r4, r1
 800e58c:	4798      	blx	r3
 800e58e:	1b03      	subs	r3, r0, r4
 800e590:	4258      	negs	r0, r3
 800e592:	4158      	adcs	r0, r3
 800e594:	bd10      	pop	{r4, pc}
	...

0800e598 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800e598:	4b01      	ldr	r3, [pc, #4]	@ (800e5a0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800e59a:	6019      	str	r1, [r3, #0]
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	2002b034 	.word	0x2002b034

0800e5a4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	4696      	mov	lr, r2
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	460e      	mov	r6, r1
 800e5b0:	461f      	mov	r7, r3
 800e5b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5b6:	b097      	sub	sp, #92	@ 0x5c
 800e5b8:	f10d 0c1c 	add.w	ip, sp, #28
 800e5bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5c0:	f8de 3000 	ldr.w	r3, [lr]
 800e5c4:	f8cc 3000 	str.w	r3, [ip]
 800e5c8:	f104 0e14 	add.w	lr, r4, #20
 800e5cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e5d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5d8:	f8de 3000 	ldr.w	r3, [lr]
 800e5dc:	f8cc 3000 	str.w	r3, [ip]
 800e5e0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800e5e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5e8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e5ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5f0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800e5f4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800e5f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800e5fc:	f8de 3000 	ldr.w	r3, [lr]
 800e600:	f8cc 3000 	str.w	r3, [ip]
 800e604:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e606:	682b      	ldr	r3, [r5, #0]
 800e608:	9201      	str	r2, [sp, #4]
 800e60a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e60e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e610:	9200      	str	r2, [sp, #0]
 800e612:	f8cd 8008 	str.w	r8, [sp, #8]
 800e616:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800e61a:	aa07      	add	r2, sp, #28
 800e61c:	463b      	mov	r3, r7
 800e61e:	4631      	mov	r1, r6
 800e620:	4628      	mov	r0, r5
 800e622:	47d8      	blx	fp
 800e624:	46a6      	mov	lr, r4
 800e626:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e62a:	f10d 0c1c 	add.w	ip, sp, #28
 800e62e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e632:	f8de 3000 	ldr.w	r3, [lr]
 800e636:	f8cc 3000 	str.w	r3, [ip]
 800e63a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800e63e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e642:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e646:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e64a:	343c      	adds	r4, #60	@ 0x3c
 800e64c:	f8de 3000 	ldr.w	r3, [lr]
 800e650:	f8cc 3000 	str.w	r3, [ip]
 800e654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e656:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e65a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	f8cc 3000 	str.w	r3, [ip]
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e66a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e66c:	9201      	str	r2, [sp, #4]
 800e66e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e670:	9200      	str	r2, [sp, #0]
 800e672:	f8cd 8008 	str.w	r8, [sp, #8]
 800e676:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800e678:	aa07      	add	r2, sp, #28
 800e67a:	463b      	mov	r3, r7
 800e67c:	4631      	mov	r1, r6
 800e67e:	4628      	mov	r0, r5
 800e680:	47a0      	blx	r4
 800e682:	b017      	add	sp, #92	@ 0x5c
 800e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e688 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800e688:	2000      	movs	r0, #0
 800e68a:	4770      	bx	lr

0800e68c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	b08d      	sub	sp, #52	@ 0x34
 800e692:	4688      	mov	r8, r1
 800e694:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800e696:	f8d3 c000 	ldr.w	ip, [r3]
 800e69a:	680f      	ldr	r7, [r1, #0]
 800e69c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800e6a0:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800e6a4:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800e6a8:	edd3 6a07 	vldr	s13, [r3, #28]
 800e6ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800e6ae:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800e6b2:	f9b1 9000 	ldrsh.w	r9, [r1]
 800e6b6:	f9ba 1000 	ldrsh.w	r1, [sl]
 800e6ba:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800e6be:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800e6c2:	eba7 070c 	sub.w	r7, r7, ip
 800e6c6:	42bc      	cmp	r4, r7
 800e6c8:	bfa8      	it	ge
 800e6ca:	463c      	movge	r4, r7
 800e6cc:	ee07 4a90 	vmov	s15, r4
 800e6d0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800e6d4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800e6d8:	ee25 4a04 	vmul.f32	s8, s10, s8
 800e6dc:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e6e0:	ee25 5a27 	vmul.f32	s10, s10, s15
 800e6e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e6e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e6ec:	eb09 0e0c 	add.w	lr, r9, ip
 800e6f0:	4571      	cmp	r1, lr
 800e6f2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800e6f6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800e6fa:	ee36 0a84 	vadd.f32	s0, s13, s8
 800e6fe:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e702:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e706:	f340 808d 	ble.w	800e824 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800e70a:	eba1 060e 	sub.w	r6, r1, lr
 800e70e:	fb96 f5f4 	sdiv	r5, r6, r4
 800e712:	ee07 5a10 	vmov	s14, r5
 800e716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e71a:	2d00      	cmp	r5, #0
 800e71c:	fb04 6615 	mls	r6, r4, r5, r6
 800e720:	eea7 0a04 	vfma.f32	s0, s14, s8
 800e724:	eee7 0a24 	vfma.f32	s1, s14, s9
 800e728:	eea7 1a05 	vfma.f32	s2, s14, s10
 800e72c:	dd13      	ble.n	800e756 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800e72e:	ee70 6a44 	vsub.f32	s13, s0, s8
 800e732:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800e736:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	bf18      	it	ne
 800e740:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800e744:	ee31 2a45 	vsub.f32	s4, s2, s10
 800e748:	bf08      	it	eq
 800e74a:	eeb0 7a67 	vmoveq.f32	s14, s15
 800e74e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e752:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e756:	fb05 f204 	mul.w	r2, r5, r4
 800e75a:	1abf      	subs	r7, r7, r2
 800e75c:	4494      	add	ip, r2
 800e75e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800e762:	4411      	add	r1, r2
 800e764:	eb09 020c 	add.w	r2, r9, ip
 800e768:	443a      	add	r2, r7
 800e76a:	b209      	sxth	r1, r1
 800e76c:	428a      	cmp	r2, r1
 800e76e:	bfc4      	itt	gt
 800e770:	eba1 0209 	subgt.w	r2, r1, r9
 800e774:	eba2 070c 	subgt.w	r7, r2, ip
 800e778:	2f00      	cmp	r7, #0
 800e77a:	dd50      	ble.n	800e81e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800e77c:	fb97 f1f4 	sdiv	r1, r7, r4
 800e780:	fb04 7211 	mls	r2, r4, r1, r7
 800e784:	b90a      	cbnz	r2, 800e78a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800e786:	3901      	subs	r1, #1
 800e788:	4622      	mov	r2, r4
 800e78a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800e78e:	6840      	ldr	r0, [r0, #4]
 800e790:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e792:	f8d0 a000 	ldr.w	sl, [r0]
 800e796:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800e798:	9008      	str	r0, [sp, #32]
 800e79a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800e79e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800e7a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800e7a4:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e7ac:	445b      	add	r3, fp
 800e7ae:	eef0 6a42 	vmov.f32	s13, s4
 800e7b2:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800e7b6:	ee21 3a23 	vmul.f32	s6, s2, s7
 800e7ba:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800e7be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800e7c2:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e7c6:	9307      	str	r3, [sp, #28]
 800e7c8:	ee17 7a90 	vmov	r7, s15
 800e7cc:	ee73 7a42 	vsub.f32	s15, s6, s4
 800e7d0:	eeb0 7a61 	vmov.f32	s14, s3
 800e7d4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e7d8:	ee16 3a90 	vmov	r3, s13
 800e7dc:	fb97 f7f4 	sdiv	r7, r7, r4
 800e7e0:	ee17 ca90 	vmov	ip, s15
 800e7e4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800e7e8:	fb9c fcf4 	sdiv	ip, ip, r4
 800e7ec:	fb0c 3306 	mla	r3, ip, r6, r3
 800e7f0:	9302      	str	r3, [sp, #8]
 800e7f2:	ee17 3a10 	vmov	r3, s14
 800e7f6:	44b6      	add	lr, r6
 800e7f8:	fb04 e505 	mla	r5, r4, r5, lr
 800e7fc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800e800:	fb07 3706 	mla	r7, r7, r6, r3
 800e804:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800e808:	e9cd 4700 	strd	r4, r7, [sp]
 800e80c:	2900      	cmp	r1, #0
 800e80e:	bfcc      	ite	gt
 800e810:	46a1      	movgt	r9, r4
 800e812:	4691      	movle	r9, r2
 800e814:	eba9 0306 	sub.w	r3, r9, r6
 800e818:	f8da 4008 	ldr.w	r4, [sl, #8]
 800e81c:	47a0      	blx	r4
 800e81e:	b00d      	add	sp, #52	@ 0x34
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	2500      	movs	r5, #0
 800e826:	462e      	mov	r6, r5
 800e828:	e799      	b.n	800e75e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800e82c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e830:	b0db      	sub	sp, #364	@ 0x16c
 800e832:	461d      	mov	r5, r3
 800e834:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800e838:	930a      	str	r3, [sp, #40]	@ 0x28
 800e83a:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800e83e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e840:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800e844:	9310      	str	r3, [sp, #64]	@ 0x40
 800e846:	6803      	ldr	r3, [r0, #0]
 800e848:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e84a:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800e84c:	9009      	str	r0, [sp, #36]	@ 0x24
 800e84e:	4614      	mov	r4, r2
 800e850:	4629      	mov	r1, r5
 800e852:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e856:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800e85a:	47b8      	blx	r7
 800e85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85e:	6058      	str	r0, [r3, #4]
 800e860:	2800      	cmp	r0, #0
 800e862:	f000 83a1 	beq.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e866:	682b      	ldr	r3, [r5, #0]
 800e868:	9314      	str	r3, [sp, #80]	@ 0x50
 800e86a:	686b      	ldr	r3, [r5, #4]
 800e86c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e86e:	4bc4      	ldr	r3, [pc, #784]	@ (800eb80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800e870:	ed94 7a02 	vldr	s14, [r4, #8]
 800e874:	7819      	ldrb	r1, [r3, #0]
 800e876:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800e87a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800e87e:	2900      	cmp	r1, #0
 800e880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e884:	bf16      	itet	ne
 800e886:	4619      	movne	r1, r3
 800e888:	4611      	moveq	r1, r2
 800e88a:	4613      	movne	r3, r2
 800e88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e890:	9116      	str	r1, [sp, #88]	@ 0x58
 800e892:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800e896:	f240 8387 	bls.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e89a:	ed94 7a07 	vldr	s14, [r4, #28]
 800e89e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a6:	f240 837f 	bls.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8aa:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800e8ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	f240 8377 	bls.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8ba:	6822      	ldr	r2, [r4, #0]
 800e8bc:	4bb1      	ldr	r3, [pc, #708]	@ (800eb84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	f2c0 8372 	blt.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8c4:	49b0      	ldr	r1, [pc, #704]	@ (800eb88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800e8c6:	6963      	ldr	r3, [r4, #20]
 800e8c8:	428a      	cmp	r2, r1
 800e8ca:	f300 836d 	bgt.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8ce:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800e8d2:	48ae      	ldr	r0, [pc, #696]	@ (800eb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800e8d4:	33ff      	adds	r3, #255	@ 0xff
 800e8d6:	4283      	cmp	r3, r0
 800e8d8:	f200 8366 	bhi.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e8de:	4dac      	ldr	r5, [pc, #688]	@ (800eb90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800e8e0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800e8e4:	33ff      	adds	r3, #255	@ 0xff
 800e8e6:	42ab      	cmp	r3, r5
 800e8e8:	f200 835e 	bhi.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8ec:	6862      	ldr	r2, [r4, #4]
 800e8ee:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800e8f2:	33ff      	adds	r3, #255	@ 0xff
 800e8f4:	4283      	cmp	r3, r0
 800e8f6:	f200 8357 	bhi.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e8fa:	69a1      	ldr	r1, [r4, #24]
 800e8fc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800e900:	33ff      	adds	r3, #255	@ 0xff
 800e902:	4283      	cmp	r3, r0
 800e904:	f200 8350 	bhi.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e908:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e90a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800e90e:	30ff      	adds	r0, #255	@ 0xff
 800e910:	42a8      	cmp	r0, r5
 800e912:	f200 8349 	bhi.w	800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e916:	428a      	cmp	r2, r1
 800e918:	f280 8110 	bge.w	800eb3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800e91c:	429a      	cmp	r2, r3
 800e91e:	f300 8119 	bgt.w	800eb54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800e922:	4299      	cmp	r1, r3
 800e924:	f280 811d 	bge.w	800eb62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800e928:	2502      	movs	r5, #2
 800e92a:	2701      	movs	r7, #1
 800e92c:	46a9      	mov	r9, r5
 800e92e:	46b8      	mov	r8, r7
 800e930:	f04f 0a00 	mov.w	sl, #0
 800e934:	4621      	mov	r1, r4
 800e936:	a849      	add	r0, sp, #292	@ 0x124
 800e938:	f003 fe2c 	bl	8012594 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800e93c:	4622      	mov	r2, r4
 800e93e:	4653      	mov	r3, sl
 800e940:	a949      	add	r1, sp, #292	@ 0x124
 800e942:	f8cd 9000 	str.w	r9, [sp]
 800e946:	a819      	add	r0, sp, #100	@ 0x64
 800e948:	f003 ff54 	bl	80127f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e94c:	4622      	mov	r2, r4
 800e94e:	4653      	mov	r3, sl
 800e950:	a949      	add	r1, sp, #292	@ 0x124
 800e952:	f8cd 8000 	str.w	r8, [sp]
 800e956:	a829      	add	r0, sp, #164	@ 0xa4
 800e958:	f003 ff4c 	bl	80127f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e95c:	4643      	mov	r3, r8
 800e95e:	4622      	mov	r2, r4
 800e960:	a949      	add	r1, sp, #292	@ 0x124
 800e962:	f8cd 9000 	str.w	r9, [sp]
 800e966:	a839      	add	r0, sp, #228	@ 0xe4
 800e968:	f003 ff44 	bl	80127f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800e96c:	42af      	cmp	r7, r5
 800e96e:	bfb5      	itete	lt
 800e970:	2300      	movlt	r3, #0
 800e972:	2301      	movge	r3, #1
 800e974:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800e976:	930e      	strge	r3, [sp, #56]	@ 0x38
 800e978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e97a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e97e:	af12      	add	r7, sp, #72	@ 0x48
 800e980:	bfb9      	ittee	lt
 800e982:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800e984:	ac19      	addlt	r4, sp, #100	@ 0x64
 800e986:	ad19      	addge	r5, sp, #100	@ 0x64
 800e988:	ac29      	addge	r4, sp, #164	@ 0xa4
 800e98a:	e887 0003 	stmia.w	r7, {r0, r1}
 800e98e:	b928      	cbnz	r0, 800e99c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800e990:	4b80      	ldr	r3, [pc, #512]	@ (800eb94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800e992:	6818      	ldr	r0, [r3, #0]
 800e994:	6803      	ldr	r3, [r0, #0]
 800e996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e998:	4798      	blx	r3
 800e99a:	6038      	str	r0, [r7, #0]
 800e99c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e99e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800e9a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e9a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e9aa:	6963      	ldr	r3, [r4, #20]
 800e9ac:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800e9ae:	440b      	add	r3, r1
 800e9b0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800e9b4:	4408      	add	r0, r1
 800e9b6:	b200      	sxth	r0, r0
 800e9b8:	4283      	cmp	r3, r0
 800e9ba:	900d      	str	r0, [sp, #52]	@ 0x34
 800e9bc:	f280 80dd 	bge.w	800eb7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800e9c0:	428b      	cmp	r3, r1
 800e9c2:	da08      	bge.n	800e9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e9c4:	2a00      	cmp	r2, #0
 800e9c6:	dd06      	ble.n	800e9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800e9c8:	1acb      	subs	r3, r1, r3
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	f2c0 80e4 	blt.w	800eb98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f300 80e2 	bgt.w	800eb9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800e9d6:	6967      	ldr	r7, [r4, #20]
 800e9d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9da:	443b      	add	r3, r7
 800e9dc:	461f      	mov	r7, r3
 800e9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9e0:	1bdf      	subs	r7, r3, r7
 800e9e2:	4297      	cmp	r7, r2
 800e9e4:	bfa8      	it	ge
 800e9e6:	4617      	movge	r7, r2
 800e9e8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800e9ec:	2f00      	cmp	r7, #0
 800e9ee:	f340 8166 	ble.w	800ecbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800e9f2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e9f4:	6829      	ldr	r1, [r5, #0]
 800e9f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9fa:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e9fe:	6820      	ldr	r0, [r4, #0]
 800ea00:	4411      	add	r1, r2
 800ea02:	4299      	cmp	r1, r3
 800ea04:	dd1a      	ble.n	800ea3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ea06:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ea0a:	440b      	add	r3, r1
 800ea0c:	4402      	add	r2, r0
 800ea0e:	b21b      	sxth	r3, r3
 800ea10:	429a      	cmp	r2, r3
 800ea12:	dc13      	bgt.n	800ea3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ea14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	9206      	str	r2, [sp, #24]
 800ea1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea1e:	9205      	str	r2, [sp, #20]
 800ea20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea22:	9500      	str	r5, [sp, #0]
 800ea24:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ea28:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800ea2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea2c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ea30:	a912      	add	r1, sp, #72	@ 0x48
 800ea32:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800ea36:	aa49      	add	r2, sp, #292	@ 0x124
 800ea38:	4623      	mov	r3, r4
 800ea3a:	47c8      	blx	r9
 800ea3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ea40:	441a      	add	r2, r3
 800ea42:	6963      	ldr	r3, [r4, #20]
 800ea44:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800ea48:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800ea4c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800ea50:	68a1      	ldr	r1, [r4, #8]
 800ea52:	ed94 6a08 	vldr	s12, [r4, #32]
 800ea56:	6022      	str	r2, [r4, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	6163      	str	r3, [r4, #20]
 800ea5c:	69a3      	ldr	r3, [r4, #24]
 800ea5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea62:	3b01      	subs	r3, #1
 800ea64:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800ea68:	61a3      	str	r3, [r4, #24]
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ea70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea74:	edd4 6a07 	vldr	s13, [r4, #28]
 800ea78:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ea7c:	440b      	add	r3, r1
 800ea7e:	68e1      	ldr	r1, [r4, #12]
 800ea80:	6123      	str	r3, [r4, #16]
 800ea82:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea86:	428b      	cmp	r3, r1
 800ea88:	edc4 6a07 	vstr	s13, [r4, #28]
 800ea8c:	db15      	blt.n	800eaba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800ea8e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800ea92:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ea96:	3201      	adds	r2, #1
 800ea98:	edc4 6a07 	vstr	s13, [r4, #28]
 800ea9c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800eaa0:	6022      	str	r2, [r4, #0]
 800eaa2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800eaa6:	1a5b      	subs	r3, r3, r1
 800eaa8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800eaac:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800eab0:	6123      	str	r3, [r4, #16]
 800eab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eab6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800eaba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eabe:	441a      	add	r2, r3
 800eac0:	696b      	ldr	r3, [r5, #20]
 800eac2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800eac6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800eaca:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800eace:	68a9      	ldr	r1, [r5, #8]
 800ead0:	ed95 6a08 	vldr	s12, [r5, #32]
 800ead4:	602a      	str	r2, [r5, #0]
 800ead6:	3301      	adds	r3, #1
 800ead8:	616b      	str	r3, [r5, #20]
 800eada:	69ab      	ldr	r3, [r5, #24]
 800eadc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eae0:	3b01      	subs	r3, #1
 800eae2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800eae6:	61ab      	str	r3, [r5, #24]
 800eae8:	692b      	ldr	r3, [r5, #16]
 800eaea:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800eaee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaf2:	edd5 6a07 	vldr	s13, [r5, #28]
 800eaf6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800eafa:	440b      	add	r3, r1
 800eafc:	68e9      	ldr	r1, [r5, #12]
 800eafe:	612b      	str	r3, [r5, #16]
 800eb00:	ee76 6a86 	vadd.f32	s13, s13, s12
 800eb04:	428b      	cmp	r3, r1
 800eb06:	edc5 6a07 	vstr	s13, [r5, #28]
 800eb0a:	db15      	blt.n	800eb38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800eb0c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800eb10:	ee76 6a26 	vadd.f32	s13, s12, s13
 800eb14:	3201      	adds	r2, #1
 800eb16:	edc5 6a07 	vstr	s13, [r5, #28]
 800eb1a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800eb1e:	602a      	str	r2, [r5, #0]
 800eb20:	ee36 7a87 	vadd.f32	s14, s13, s14
 800eb24:	1a5b      	subs	r3, r3, r1
 800eb26:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800eb2a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800eb2e:	612b      	str	r3, [r5, #16]
 800eb30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb34:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800eb38:	3f01      	subs	r7, #1
 800eb3a:	e757      	b.n	800e9ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800eb3c:	4299      	cmp	r1, r3
 800eb3e:	dc13      	bgt.n	800eb68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800eb40:	429a      	cmp	r2, r3
 800eb42:	da14      	bge.n	800eb6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800eb44:	2502      	movs	r5, #2
 800eb46:	2703      	movs	r7, #3
 800eb48:	46a9      	mov	r9, r5
 800eb4a:	f04f 0800 	mov.w	r8, #0
 800eb4e:	f04f 0a01 	mov.w	sl, #1
 800eb52:	e6ef      	b.n	800e934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800eb54:	2501      	movs	r5, #1
 800eb56:	2700      	movs	r7, #0
 800eb58:	46a9      	mov	r9, r5
 800eb5a:	46b8      	mov	r8, r7
 800eb5c:	f04f 0a02 	mov.w	sl, #2
 800eb60:	e6e8      	b.n	800e934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800eb62:	2501      	movs	r5, #1
 800eb64:	2702      	movs	r7, #2
 800eb66:	e6e1      	b.n	800e92c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800eb68:	2500      	movs	r5, #0
 800eb6a:	2701      	movs	r7, #1
 800eb6c:	e7f4      	b.n	800eb58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800eb6e:	2702      	movs	r7, #2
 800eb70:	2503      	movs	r5, #3
 800eb72:	f04f 0900 	mov.w	r9, #0
 800eb76:	46b8      	mov	r8, r7
 800eb78:	e7e9      	b.n	800eb4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	e728      	b.n	800e9d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800eb7e:	bf00      	nop
 800eb80:	2002b024 	.word	0x2002b024
 800eb84:	fffd8f01 	.word	0xfffd8f01
 800eb88:	00027100 	.word	0x00027100
 800eb8c:	0004e1ff 	.word	0x0004e1ff
 800eb90:	0004e1fe 	.word	0x0004e1fe
 800eb94:	2002b02c 	.word	0x2002b02c
 800eb98:	4613      	mov	r3, r2
 800eb9a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800eb9c:	9111      	str	r1, [sp, #68]	@ 0x44
 800eb9e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800eba2:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800eba6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800eba8:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800ebac:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800ebb0:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800ebb4:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800ebb8:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800ebbc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ebc0:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800ebc4:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800ebc8:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800ebcc:	469e      	mov	lr, r3
 800ebce:	469c      	mov	ip, r3
 800ebd0:	f04f 0900 	mov.w	r9, #0
 800ebd4:	f1bc 0f00 	cmp.w	ip, #0
 800ebd8:	d147      	bne.n	800ec6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800ebda:	eb03 0c07 	add.w	ip, r3, r7
 800ebde:	1ad7      	subs	r7, r2, r3
 800ebe0:	f1b9 0f00 	cmp.w	r9, #0
 800ebe4:	d009      	beq.n	800ebfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800ebe6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800ebea:	9029      	str	r0, [sp, #164]	@ 0xa4
 800ebec:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800ebf0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800ebf4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800ebf8:	912d      	str	r1, [sp, #180]	@ 0xb4
 800ebfa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ebfc:	9111      	str	r1, [sp, #68]	@ 0x44
 800ebfe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800ec02:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800ec06:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800ec0a:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800ec0e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800ec12:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800ec16:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800ec1a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800ec1e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800ec22:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800ec26:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800ec2a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800ec2e:	f04f 0800 	mov.w	r8, #0
 800ec32:	f1be 0f00 	cmp.w	lr, #0
 800ec36:	d031      	beq.n	800ec9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800ec38:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ec3a:	4431      	add	r1, r6
 800ec3c:	4549      	cmp	r1, r9
 800ec3e:	4450      	add	r0, sl
 800ec40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ec44:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ec48:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ec4c:	db08      	blt.n	800ec60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800ec4e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ec52:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ec56:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	eba1 0109 	sub.w	r1, r1, r9
 800ec60:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ec64:	f04f 0801 	mov.w	r8, #1
 800ec68:	e7e3      	b.n	800ec32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800ec6a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ec6c:	4431      	add	r1, r6
 800ec6e:	4541      	cmp	r1, r8
 800ec70:	4450      	add	r0, sl
 800ec72:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ec76:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ec7a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800ec7e:	db08      	blt.n	800ec92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800ec80:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ec84:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ec88:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	eba1 0108 	sub.w	r1, r1, r8
 800ec92:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec96:	f04f 0901 	mov.w	r9, #1
 800ec9a:	e79b      	b.n	800ebd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800ec9c:	449c      	add	ip, r3
 800ec9e:	1aff      	subs	r7, r7, r3
 800eca0:	f1b8 0f00 	cmp.w	r8, #0
 800eca4:	d009      	beq.n	800ecba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800eca6:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800ecaa:	9019      	str	r0, [sp, #100]	@ 0x64
 800ecac:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800ecb0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800ecb4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ecb8:	911d      	str	r1, [sp, #116]	@ 0x74
 800ecba:	1ad2      	subs	r2, r2, r3
 800ecbc:	e68b      	b.n	800e9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ecbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecc0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	f000 80d1 	beq.w	800ee6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800ecc8:	ad19      	add	r5, sp, #100	@ 0x64
 800ecca:	ac39      	add	r4, sp, #228	@ 0xe4
 800eccc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ecce:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ecd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecd6:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ecda:	6963      	ldr	r3, [r4, #20]
 800ecdc:	440b      	add	r3, r1
 800ecde:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ece2:	4408      	add	r0, r1
 800ece4:	b200      	sxth	r0, r0
 800ece6:	4283      	cmp	r3, r0
 800ece8:	900d      	str	r0, [sp, #52]	@ 0x34
 800ecea:	f280 80c1 	bge.w	800ee70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800ecee:	428b      	cmp	r3, r1
 800ecf0:	da08      	bge.n	800ed04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ecf2:	2a00      	cmp	r2, #0
 800ecf4:	dd06      	ble.n	800ed04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ecf6:	1acb      	subs	r3, r1, r3
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	f2c0 80bb 	blt.w	800ee74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f300 80b9 	bgt.w	800ee76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800ed04:	6967      	ldr	r7, [r4, #20]
 800ed06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed08:	443b      	add	r3, r7
 800ed0a:	461f      	mov	r7, r3
 800ed0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed0e:	1bdf      	subs	r7, r3, r7
 800ed10:	4297      	cmp	r7, r2
 800ed12:	bfa8      	it	ge
 800ed14:	4617      	movge	r7, r2
 800ed16:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800ed1a:	2f00      	cmp	r7, #0
 800ed1c:	f340 813c 	ble.w	800ef98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800ed20:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ed22:	6829      	ldr	r1, [r5, #0]
 800ed24:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ed28:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ed2c:	6820      	ldr	r0, [r4, #0]
 800ed2e:	4411      	add	r1, r2
 800ed30:	4299      	cmp	r1, r3
 800ed32:	dd1a      	ble.n	800ed6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ed34:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ed38:	440b      	add	r3, r1
 800ed3a:	4402      	add	r2, r0
 800ed3c:	b21b      	sxth	r3, r3
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	dc13      	bgt.n	800ed6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ed42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed44:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	9206      	str	r2, [sp, #24]
 800ed4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed4c:	9205      	str	r2, [sp, #20]
 800ed4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed50:	9500      	str	r5, [sp, #0]
 800ed52:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ed56:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800ed58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed5a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ed5e:	a912      	add	r1, sp, #72	@ 0x48
 800ed60:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800ed64:	aa49      	add	r2, sp, #292	@ 0x124
 800ed66:	4623      	mov	r3, r4
 800ed68:	47c8      	blx	r9
 800ed6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed6e:	441a      	add	r2, r3
 800ed70:	6963      	ldr	r3, [r4, #20]
 800ed72:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800ed76:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800ed7a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800ed7e:	68a1      	ldr	r1, [r4, #8]
 800ed80:	ed94 6a08 	vldr	s12, [r4, #32]
 800ed84:	6022      	str	r2, [r4, #0]
 800ed86:	3301      	adds	r3, #1
 800ed88:	6163      	str	r3, [r4, #20]
 800ed8a:	69a3      	ldr	r3, [r4, #24]
 800ed8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed90:	3b01      	subs	r3, #1
 800ed92:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800ed96:	61a3      	str	r3, [r4, #24]
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ed9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eda2:	edd4 6a07 	vldr	s13, [r4, #28]
 800eda6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800edaa:	440b      	add	r3, r1
 800edac:	68e1      	ldr	r1, [r4, #12]
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800edb4:	428b      	cmp	r3, r1
 800edb6:	edc4 6a07 	vstr	s13, [r4, #28]
 800edba:	db15      	blt.n	800ede8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800edbc:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800edc0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800edc4:	3201      	adds	r2, #1
 800edc6:	edc4 6a07 	vstr	s13, [r4, #28]
 800edca:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800edce:	6022      	str	r2, [r4, #0]
 800edd0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800edd4:	1a5b      	subs	r3, r3, r1
 800edd6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800edda:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800edde:	6123      	str	r3, [r4, #16]
 800ede0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ede4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ede8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edec:	441a      	add	r2, r3
 800edee:	696b      	ldr	r3, [r5, #20]
 800edf0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800edf4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800edf8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800edfc:	68a9      	ldr	r1, [r5, #8]
 800edfe:	ed95 6a08 	vldr	s12, [r5, #32]
 800ee02:	602a      	str	r2, [r5, #0]
 800ee04:	3301      	adds	r3, #1
 800ee06:	616b      	str	r3, [r5, #20]
 800ee08:	69ab      	ldr	r3, [r5, #24]
 800ee0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ee14:	61ab      	str	r3, [r5, #24]
 800ee16:	692b      	ldr	r3, [r5, #16]
 800ee18:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ee1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee20:	edd5 6a07 	vldr	s13, [r5, #28]
 800ee24:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ee28:	440b      	add	r3, r1
 800ee2a:	68e9      	ldr	r1, [r5, #12]
 800ee2c:	612b      	str	r3, [r5, #16]
 800ee2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ee32:	428b      	cmp	r3, r1
 800ee34:	edc5 6a07 	vstr	s13, [r5, #28]
 800ee38:	db15      	blt.n	800ee66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800ee3a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800ee3e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ee42:	3201      	adds	r2, #1
 800ee44:	edc5 6a07 	vstr	s13, [r5, #28]
 800ee48:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ee52:	1a5b      	subs	r3, r3, r1
 800ee54:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ee58:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800ee5c:	612b      	str	r3, [r5, #16]
 800ee5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee62:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ee66:	3f01      	subs	r7, #1
 800ee68:	e757      	b.n	800ed1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800ee6a:	ad39      	add	r5, sp, #228	@ 0xe4
 800ee6c:	ac19      	add	r4, sp, #100	@ 0x64
 800ee6e:	e72d      	b.n	800eccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800ee70:	4613      	mov	r3, r2
 800ee72:	e744      	b.n	800ecfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800ee74:	4613      	mov	r3, r2
 800ee76:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800ee7a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800ee7c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800ee80:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800ee84:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800ee88:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800ee8c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800ee90:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800ee94:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800ee98:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800ee9a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800ee9e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800eea2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800eea6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800eeaa:	960e      	str	r6, [sp, #56]	@ 0x38
 800eeac:	469e      	mov	lr, r3
 800eeae:	461f      	mov	r7, r3
 800eeb0:	f04f 0900 	mov.w	r9, #0
 800eeb4:	2f00      	cmp	r7, #0
 800eeb6:	d146      	bne.n	800ef46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800eeb8:	449c      	add	ip, r3
 800eeba:	1ad7      	subs	r7, r2, r3
 800eebc:	f1b9 0f00 	cmp.w	r9, #0
 800eec0:	d009      	beq.n	800eed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800eec2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800eec6:	9039      	str	r0, [sp, #228]	@ 0xe4
 800eec8:	913d      	str	r1, [sp, #244]	@ 0xf4
 800eeca:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800eece:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800eed2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800eed6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800eed8:	910e      	str	r1, [sp, #56]	@ 0x38
 800eeda:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800eede:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800eee2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800eee6:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800eeea:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800eeee:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800eef2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800eef6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800eefa:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800eefe:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800ef02:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800ef06:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800ef0a:	f04f 0800 	mov.w	r8, #0
 800ef0e:	f1be 0f00 	cmp.w	lr, #0
 800ef12:	d030      	beq.n	800ef76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800ef14:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ef16:	4431      	add	r1, r6
 800ef18:	4549      	cmp	r1, r9
 800ef1a:	4450      	add	r0, sl
 800ef1c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ef20:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ef24:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ef28:	db08      	blt.n	800ef3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800ef2a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ef2e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ef32:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ef36:	3001      	adds	r0, #1
 800ef38:	eba1 0109 	sub.w	r1, r1, r9
 800ef3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ef40:	f04f 0801 	mov.w	r8, #1
 800ef44:	e7e3      	b.n	800ef0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800ef46:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ef48:	4431      	add	r1, r6
 800ef4a:	4541      	cmp	r1, r8
 800ef4c:	4450      	add	r0, sl
 800ef4e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ef52:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ef56:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800ef5a:	db08      	blt.n	800ef6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800ef5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ef60:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ef64:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ef68:	3001      	adds	r0, #1
 800ef6a:	eba1 0108 	sub.w	r1, r1, r8
 800ef6e:	3f01      	subs	r7, #1
 800ef70:	f04f 0901 	mov.w	r9, #1
 800ef74:	e79e      	b.n	800eeb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800ef76:	449c      	add	ip, r3
 800ef78:	1aff      	subs	r7, r7, r3
 800ef7a:	f1b8 0f00 	cmp.w	r8, #0
 800ef7e:	d009      	beq.n	800ef94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800ef80:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800ef84:	9019      	str	r0, [sp, #100]	@ 0x64
 800ef86:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800ef8a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800ef8e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ef92:	911d      	str	r1, [sp, #116]	@ 0x74
 800ef94:	1ad2      	subs	r2, r2, r3
 800ef96:	e6b5      	b.n	800ed04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ef98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	b923      	cbnz	r3, 800efa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ef9e:	4b04      	ldr	r3, [pc, #16]	@ (800efb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800efa0:	6818      	ldr	r0, [r3, #0]
 800efa2:	6803      	ldr	r3, [r0, #0]
 800efa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efa6:	4798      	blx	r3
 800efa8:	b05b      	add	sp, #364	@ 0x16c
 800efaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efae:	bf00      	nop
 800efb0:	2002b02c 	.word	0x2002b02c

0800efb4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	4604      	mov	r4, r0
 800efb8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800efbc:	9805      	ldr	r0, [sp, #20]
 800efbe:	6061      	str	r1, [r4, #4]
 800efc0:	2500      	movs	r5, #0
 800efc2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800efc6:	8263      	strh	r3, [r4, #18]
 800efc8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800efcc:	8025      	strh	r5, [r4, #0]
 800efce:	7221      	strb	r1, [r4, #8]
 800efd0:	7266      	strb	r6, [r4, #9]
 800efd2:	60e0      	str	r0, [r4, #12]
 800efd4:	8222      	strh	r2, [r4, #16]
 800efd6:	82a3      	strh	r3, [r4, #20]
 800efd8:	82e5      	strh	r5, [r4, #22]
 800efda:	8325      	strh	r5, [r4, #24]
 800efdc:	8365      	strh	r5, [r4, #26]
 800efde:	83a5      	strh	r5, [r4, #28]
 800efe0:	83e5      	strh	r5, [r4, #30]
 800efe2:	8425      	strh	r5, [r4, #32]
 800efe4:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800efe8:	b32e      	cbz	r6, 800f036 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800efea:	6803      	ldr	r3, [r0, #0]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	4798      	blx	r3
 800eff0:	4606      	mov	r6, r0
 800eff2:	b300      	cbz	r0, 800f036 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800eff4:	68e0      	ldr	r0, [r4, #12]
 800eff6:	6803      	ldr	r3, [r0, #0]
 800eff8:	4631      	mov	r1, r6
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	4798      	blx	r3
 800effe:	4605      	mov	r5, r0
 800f000:	b1c8      	cbz	r0, 800f036 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800f002:	7b43      	ldrb	r3, [r0, #13]
 800f004:	7a82      	ldrb	r2, [r0, #10]
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f00c:	4313      	orrs	r3, r2
 800f00e:	8423      	strh	r3, [r4, #32]
 800f010:	7a63      	ldrb	r3, [r4, #9]
 800f012:	2b06      	cmp	r3, #6
 800f014:	d10f      	bne.n	800f036 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800f016:	68e0      	ldr	r0, [r4, #12]
 800f018:	6803      	ldr	r3, [r0, #0]
 800f01a:	462a      	mov	r2, r5
 800f01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f01e:	4631      	mov	r1, r6
 800f020:	4798      	blx	r3
 800f022:	7b6b      	ldrb	r3, [r5, #13]
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f02a:	7aab      	ldrb	r3, [r5, #10]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	4418      	add	r0, r3
 800f030:	8c23      	ldrh	r3, [r4, #32]
 800f032:	4418      	add	r0, r3
 800f034:	8420      	strh	r0, [r4, #32]
 800f036:	4620      	mov	r0, r4
 800f038:	bd70      	pop	{r4, r5, r6, pc}

0800f03a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f03a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03e:	2400      	movs	r4, #0
 800f040:	b085      	sub	sp, #20
 800f042:	4681      	mov	r9, r0
 800f044:	4688      	mov	r8, r1
 800f046:	4692      	mov	sl, r2
 800f048:	469b      	mov	fp, r3
 800f04a:	4627      	mov	r7, r4
 800f04c:	4625      	mov	r5, r4
 800f04e:	4626      	mov	r6, r4
 800f050:	4554      	cmp	r4, sl
 800f052:	da2a      	bge.n	800f0aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f054:	2300      	movs	r3, #0
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800f05c:	429d      	cmp	r5, r3
 800f05e:	d004      	beq.n	800f06a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f060:	f242 030b 	movw	r3, #8203	@ 0x200b
 800f064:	429d      	cmp	r5, r3
 800f066:	bf18      	it	ne
 800f068:	462f      	movne	r7, r5
 800f06a:	ab03      	add	r3, sp, #12
 800f06c:	4642      	mov	r2, r8
 800f06e:	4659      	mov	r1, fp
 800f070:	4648      	mov	r0, r9
 800f072:	f003 f8a5 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f076:	4605      	mov	r5, r0
 800f078:	b1b8      	cbz	r0, 800f0aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f07a:	280a      	cmp	r0, #10
 800f07c:	d015      	beq.n	800f0aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f07e:	9a03      	ldr	r2, [sp, #12]
 800f080:	b18a      	cbz	r2, 800f0a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f082:	7b50      	ldrb	r0, [r2, #13]
 800f084:	7a93      	ldrb	r3, [r2, #10]
 800f086:	8895      	ldrh	r5, [r2, #4]
 800f088:	0040      	lsls	r0, r0, #1
 800f08a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800f08e:	4303      	orrs	r3, r0
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	f8d8 3000 	ldr.w	r3, [r8]
 800f096:	4639      	mov	r1, r7
 800f098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f09a:	4640      	mov	r0, r8
 800f09c:	4798      	blx	r3
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	4418      	add	r0, r3
 800f0a2:	4406      	add	r6, r0
 800f0a4:	b2b6      	uxth	r6, r6
 800f0a6:	3401      	adds	r4, #1
 800f0a8:	e7d2      	b.n	800f050 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	b005      	add	sp, #20
 800f0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f0b2:	2a02      	cmp	r2, #2
 800f0b4:	b530      	push	{r4, r5, lr}
 800f0b6:	d011      	beq.n	800f0dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f0b8:	2a03      	cmp	r2, #3
 800f0ba:	d01c      	beq.n	800f0f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f0bc:	2a01      	cmp	r2, #1
 800f0be:	d10c      	bne.n	800f0da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f0c0:	888b      	ldrh	r3, [r1, #4]
 800f0c2:	8801      	ldrh	r1, [r0, #0]
 800f0c4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f0c8:	8844      	ldrh	r4, [r0, #2]
 800f0ca:	8004      	strh	r4, [r0, #0]
 800f0cc:	1a5b      	subs	r3, r3, r1
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f0d4:	8043      	strh	r3, [r0, #2]
 800f0d6:	8081      	strh	r1, [r0, #4]
 800f0d8:	80c2      	strh	r2, [r0, #6]
 800f0da:	bd30      	pop	{r4, r5, pc}
 800f0dc:	88cb      	ldrh	r3, [r1, #6]
 800f0de:	8842      	ldrh	r2, [r0, #2]
 800f0e0:	1a9b      	subs	r3, r3, r2
 800f0e2:	88c2      	ldrh	r2, [r0, #6]
 800f0e4:	1a9b      	subs	r3, r3, r2
 800f0e6:	888a      	ldrh	r2, [r1, #4]
 800f0e8:	8801      	ldrh	r1, [r0, #0]
 800f0ea:	8043      	strh	r3, [r0, #2]
 800f0ec:	1a52      	subs	r2, r2, r1
 800f0ee:	8881      	ldrh	r1, [r0, #4]
 800f0f0:	1a52      	subs	r2, r2, r1
 800f0f2:	8002      	strh	r2, [r0, #0]
 800f0f4:	e7f1      	b.n	800f0da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f0f6:	88cb      	ldrh	r3, [r1, #6]
 800f0f8:	8841      	ldrh	r1, [r0, #2]
 800f0fa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f0fe:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f102:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f106:	8045      	strh	r5, [r0, #2]
 800f108:	1a5b      	subs	r3, r3, r1
 800f10a:	1a9b      	subs	r3, r3, r2
 800f10c:	8003      	strh	r3, [r0, #0]
 800f10e:	8082      	strh	r2, [r0, #4]
 800f110:	80c4      	strh	r4, [r0, #6]
 800f112:	e7e2      	b.n	800f0da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f114 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f118:	b09f      	sub	sp, #124	@ 0x7c
 800f11a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f11c:	9312      	str	r3, [sp, #72]	@ 0x48
 800f11e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800f120:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f122:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800f124:	8812      	ldrh	r2, [r2, #0]
 800f126:	889b      	ldrh	r3, [r3, #4]
 800f128:	900e      	str	r0, [sp, #56]	@ 0x38
 800f12a:	4413      	add	r3, r2
 800f12c:	6828      	ldr	r0, [r5, #0]
 800f12e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800f130:	b21b      	sxth	r3, r3
 800f132:	9311      	str	r3, [sp, #68]	@ 0x44
 800f134:	6803      	ldr	r3, [r0, #0]
 800f136:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800f13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f13c:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800f140:	4798      	blx	r3
 800f142:	682b      	ldr	r3, [r5, #0]
 800f144:	9013      	str	r0, [sp, #76]	@ 0x4c
 800f146:	7b1a      	ldrb	r2, [r3, #12]
 800f148:	7adb      	ldrb	r3, [r3, #11]
 800f14a:	9215      	str	r2, [sp, #84]	@ 0x54
 800f14c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f14e:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800f152:	2c00      	cmp	r4, #0
 800f154:	d067      	beq.n	800f226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800f156:	7c2b      	ldrb	r3, [r5, #16]
 800f158:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	bf14      	ite	ne
 800f15e:	2301      	movne	r3, #1
 800f160:	2302      	moveq	r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	f04f 0900 	mov.w	r9, #0
 800f168:	9310      	str	r3, [sp, #64]	@ 0x40
 800f16a:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800f16e:	464c      	mov	r4, r9
 800f170:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800f174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f176:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f178:	4293      	cmp	r3, r2
 800f17a:	f280 808b 	bge.w	800f294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f17e:	2300      	movs	r3, #0
 800f180:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800f184:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800f188:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800f18c:	429c      	cmp	r4, r3
 800f18e:	d006      	beq.n	800f19e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800f190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f192:	f242 020b 	movw	r2, #8203	@ 0x200b
 800f196:	4294      	cmp	r4, r2
 800f198:	bf18      	it	ne
 800f19a:	4623      	movne	r3, r4
 800f19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1a0:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800f1a2:	682a      	ldr	r2, [r5, #0]
 800f1a4:	428b      	cmp	r3, r1
 800f1a6:	db40      	blt.n	800f22a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800f1a8:	6813      	ldr	r3, [r2, #0]
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	695b      	ldr	r3, [r3, #20]
 800f1ae:	4798      	blx	r3
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	6828      	ldr	r0, [r5, #0]
 800f1b4:	6803      	ldr	r3, [r0, #0]
 800f1b6:	aa1d      	add	r2, sp, #116	@ 0x74
 800f1b8:	689f      	ldr	r7, [r3, #8]
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800f1c0:	47b8      	blx	r7
 800f1c2:	901c      	str	r0, [sp, #112]	@ 0x70
 800f1c4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800f1c8:	429c      	cmp	r4, r3
 800f1ca:	f000 80ea 	beq.w	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f1ce:	f242 030b 	movw	r3, #8203	@ 0x200b
 800f1d2:	429c      	cmp	r4, r3
 800f1d4:	f000 80e5 	beq.w	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f1d8:	2c00      	cmp	r4, #0
 800f1da:	f000 810c 	beq.w	800f3f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800f1de:	2c0a      	cmp	r4, #10
 800f1e0:	d05e      	beq.n	800f2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800f1e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f1e4:	b36a      	cbz	r2, 800f242 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800f1e6:	8894      	ldrh	r4, [r2, #4]
 800f1e8:	f1bb 0f00 	cmp.w	fp, #0
 800f1ec:	d03a      	beq.n	800f264 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800f1ee:	f892 900d 	ldrb.w	r9, [r2, #13]
 800f1f2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f1f6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800f1fa:	f892 900a 	ldrb.w	r9, [r2, #10]
 800f1fe:	f1bb 0f01 	cmp.w	fp, #1
 800f202:	ea49 0903 	orr.w	r9, r9, r3
 800f206:	d133      	bne.n	800f270 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800f208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f20a:	eba6 0609 	sub.w	r6, r6, r9
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d14d      	bne.n	800f2ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800f212:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f214:	eb09 0306 	add.w	r3, r9, r6
 800f218:	4413      	add	r3, r2
 800f21a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800f21c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f220:	4293      	cmp	r3, r2
 800f222:	da4e      	bge.n	800f2c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800f224:	e036      	b.n	800f294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f226:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800f228:	e79c      	b.n	800f164 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800f22a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	ab1d      	add	r3, sp, #116	@ 0x74
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	4659      	mov	r1, fp
 800f236:	ab1c      	add	r3, sp, #112	@ 0x70
 800f238:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800f23a:	f003 f80a 	bl	8012252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800f23e:	4604      	mov	r4, r0
 800f240:	e7c0      	b.n	800f1c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800f242:	6828      	ldr	r0, [r5, #0]
 800f244:	6803      	ldr	r3, [r0, #0]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	4798      	blx	r3
 800f24a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800f24e:	4298      	cmp	r0, r3
 800f250:	f000 80a7 	beq.w	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f254:	f242 030b 	movw	r3, #8203	@ 0x200b
 800f258:	4298      	cmp	r0, r3
 800f25a:	f000 80a2 	beq.w	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f25e:	f1bb 0f00 	cmp.w	fp, #0
 800f262:	d100      	bne.n	800f266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800f264:	444e      	add	r6, r9
 800f266:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f268:	2a00      	cmp	r2, #0
 800f26a:	d1c0      	bne.n	800f1ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800f26c:	4691      	mov	r9, r2
 800f26e:	e098      	b.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f272:	2b00      	cmp	r3, #0
 800f274:	f000 80c1 	beq.w	800f3fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800f278:	f1bb 0f00 	cmp.w	fp, #0
 800f27c:	d117      	bne.n	800f2ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800f27e:	6828      	ldr	r0, [r5, #0]
 800f280:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f282:	6803      	ldr	r3, [r0, #0]
 800f284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f286:	4798      	blx	r3
 800f288:	4406      	add	r6, r0
 800f28a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f28c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f28e:	1af3      	subs	r3, r6, r3
 800f290:	4293      	cmp	r3, r2
 800f292:	dd16      	ble.n	800f2c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800f294:	2c00      	cmp	r4, #0
 800f296:	f000 80ae 	beq.w	800f3f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800f29a:	2c0a      	cmp	r4, #10
 800f29c:	f040 809c 	bne.w	800f3d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800f2a0:	240a      	movs	r4, #10
 800f2a2:	fab4 f084 	clz	r0, r4
 800f2a6:	0940      	lsrs	r0, r0, #5
 800f2a8:	b01f      	add	sp, #124	@ 0x7c
 800f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ae:	6828      	ldr	r0, [r5, #0]
 800f2b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f2b2:	6803      	ldr	r3, [r0, #0]
 800f2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2b6:	4798      	blx	r3
 800f2b8:	f1bb 0f01 	cmp.w	fp, #1
 800f2bc:	eba6 0600 	sub.w	r6, r6, r0
 800f2c0:	d0a7      	beq.n	800f212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800f2c2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800f2c4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f2c6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800f2ca:	f9b3 8000 	ldrsh.w	r8, [r3]
 800f2ce:	7b43      	ldrb	r3, [r0, #13]
 800f2d0:	015b      	lsls	r3, r3, #5
 800f2d2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f2d6:	7983      	ldrb	r3, [r0, #6]
 800f2d8:	4431      	add	r1, r6
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	440b      	add	r3, r1
 800f2de:	4543      	cmp	r3, r8
 800f2e0:	db5f      	blt.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f2e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2e4:	4299      	cmp	r1, r3
 800f2e6:	da5c      	bge.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f2e8:	6828      	ldr	r0, [r5, #0]
 800f2ea:	6803      	ldr	r3, [r0, #0]
 800f2ec:	45b0      	cmp	r8, r6
 800f2ee:	bfc8      	it	gt
 800f2f0:	eba8 0806 	subgt.w	r8, r8, r6
 800f2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2f6:	bfcc      	ite	gt
 800f2f8:	fa1f f888 	uxthgt.w	r8, r8
 800f2fc:	f04f 0800 	movle.w	r8, #0
 800f300:	4798      	blx	r3
 800f302:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f304:	7b53      	ldrb	r3, [r2, #13]
 800f306:	00d9      	lsls	r1, r3, #3
 800f308:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800f30c:	7a11      	ldrb	r1, [r2, #8]
 800f30e:	4339      	orrs	r1, r7
 800f310:	065f      	lsls	r7, r3, #25
 800f312:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800f314:	bf44      	itt	mi
 800f316:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800f31a:	b209      	sxthmi	r1, r1
 800f31c:	19c7      	adds	r7, r0, r7
 800f31e:	1a7f      	subs	r7, r7, r1
 800f320:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800f322:	b2bf      	uxth	r7, r7
 800f324:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f328:	fa0f fa87 	sxth.w	sl, r7
 800f32c:	4551      	cmp	r1, sl
 800f32e:	dd3c      	ble.n	800f3aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800f330:	011b      	lsls	r3, r3, #4
 800f332:	79d0      	ldrb	r0, [r2, #7]
 800f334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f338:	4303      	orrs	r3, r0
 800f33a:	449a      	add	sl, r3
 800f33c:	4551      	cmp	r1, sl
 800f33e:	dc30      	bgt.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f340:	1bcf      	subs	r7, r1, r7
 800f342:	b23f      	sxth	r7, r7
 800f344:	468a      	mov	sl, r1
 800f346:	9219      	str	r2, [sp, #100]	@ 0x64
 800f348:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f34a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f34c:	6828      	ldr	r0, [r5, #0]
 800f34e:	2a00      	cmp	r2, #0
 800f350:	d12d      	bne.n	800f3ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800f352:	9318      	str	r3, [sp, #96]	@ 0x60
 800f354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f356:	6819      	ldr	r1, [r3, #0]
 800f358:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800f35a:	6801      	ldr	r1, [r0, #0]
 800f35c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f35e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f360:	4788      	blx	r1
 800f362:	79a9      	ldrb	r1, [r5, #6]
 800f364:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f366:	7ba9      	ldrb	r1, [r5, #14]
 800f368:	910a      	str	r1, [sp, #40]	@ 0x28
 800f36a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800f36e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f370:	68a9      	ldr	r1, [r5, #8]
 800f372:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f374:	9306      	str	r3, [sp, #24]
 800f376:	b2bf      	uxth	r7, r7
 800f378:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800f37c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f37e:	9304      	str	r3, [sp, #16]
 800f380:	44b0      	add	r8, r6
 800f382:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f386:	fa0f f388 	sxth.w	r3, r8
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f38e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f390:	9205      	str	r2, [sp, #20]
 800f392:	f8cd a004 	str.w	sl, [sp, #4]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f39e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800f3a0:	47b8      	blx	r7
 800f3a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3a8:	e6e4      	b.n	800f174 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800f3aa:	2700      	movs	r7, #0
 800f3ac:	e7cb      	b.n	800f346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800f3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3b0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800f3b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f3b6:	f8dc 1000 	ldr.w	r1, [ip]
 800f3ba:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800f3be:	79aa      	ldrb	r2, [r5, #6]
 800f3c0:	9203      	str	r2, [sp, #12]
 800f3c2:	7baa      	ldrb	r2, [r5, #14]
 800f3c4:	9202      	str	r2, [sp, #8]
 800f3c6:	68aa      	ldr	r2, [r5, #8]
 800f3c8:	e9cd 0200 	strd	r0, r2, [sp]
 800f3cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800f3ce:	688f      	ldr	r7, [r1, #8]
 800f3d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f3d2:	4660      	mov	r0, ip
 800f3d4:	47b8      	blx	r7
 800f3d6:	e7e4      	b.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800f3d8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f3da:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800f3dc:	3501      	adds	r5, #1
 800f3de:	429d      	cmp	r5, r3
 800f3e0:	f6bf af5f 	bge.w	800f2a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800f3e4:	4659      	mov	r1, fp
 800f3e6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800f3e8:	f7fb fd86 	bl	800aef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	b110      	cbz	r0, 800f3f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800f3f0:	280a      	cmp	r0, #10
 800f3f2:	d1f2      	bne.n	800f3da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800f3f4:	e754      	b.n	800f2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800f3f6:	2400      	movs	r4, #0
 800f3f8:	e753      	b.n	800f2a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800f3fa:	f1bb 0f00 	cmp.w	fp, #0
 800f3fe:	f43f af44 	beq.w	800f28a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800f402:	e75e      	b.n	800f2c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800f404 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800f404:	b530      	push	{r4, r5, lr}
 800f406:	8ac4      	ldrh	r4, [r0, #22]
 800f408:	8b45      	ldrh	r5, [r0, #26]
 800f40a:	8343      	strh	r3, [r0, #26]
 800f40c:	442c      	add	r4, r5
 800f40e:	1ae4      	subs	r4, r4, r3
 800f410:	82c4      	strh	r4, [r0, #22]
 800f412:	8b83      	ldrh	r3, [r0, #28]
 800f414:	8b04      	ldrh	r4, [r0, #24]
 800f416:	4422      	add	r2, r4
 800f418:	440c      	add	r4, r1
 800f41a:	1a59      	subs	r1, r3, r1
 800f41c:	83c2      	strh	r2, [r0, #30]
 800f41e:	8304      	strh	r4, [r0, #24]
 800f420:	8381      	strh	r1, [r0, #28]
 800f422:	bd30      	pop	{r4, r5, pc}

0800f424 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	4604      	mov	r4, r0
 800f42a:	8a47      	ldrh	r7, [r0, #18]
 800f42c:	68c0      	ldr	r0, [r0, #12]
 800f42e:	6803      	ldr	r3, [r0, #0]
 800f430:	b085      	sub	sp, #20
 800f432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f434:	4798      	blx	r3
 800f436:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800f43a:	7a63      	ldrb	r3, [r4, #9]
 800f43c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800f440:	42b7      	cmp	r7, r6
 800f442:	f103 33ff 	add.w	r3, r3, #4294967295
 800f446:	bfac      	ite	ge
 800f448:	f04f 0900 	movge.w	r9, #0
 800f44c:	f04f 0901 	movlt.w	r9, #1
 800f450:	2b05      	cmp	r3, #5
 800f452:	d804      	bhi.n	800f45e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800f454:	e8df f003 	tbb	[pc, r3]
 800f458:	470e0854 	.word	0x470e0854
 800f45c:	4c4c      	.short	0x4c4c
 800f45e:	2500      	movs	r5, #0
 800f460:	46a9      	mov	r9, r5
 800f462:	462e      	mov	r6, r5
 800f464:	462f      	mov	r7, r5
 800f466:	e00d      	b.n	800f484 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800f468:	42b7      	cmp	r7, r6
 800f46a:	bfb4      	ite	lt
 800f46c:	2600      	movlt	r6, #0
 800f46e:	2601      	movge	r6, #1
 800f470:	2500      	movs	r5, #0
 800f472:	e7f7      	b.n	800f464 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800f474:	42b7      	cmp	r7, r6
 800f476:	464d      	mov	r5, r9
 800f478:	f04f 0900 	mov.w	r9, #0
 800f47c:	bfb4      	ite	lt
 800f47e:	2600      	movlt	r6, #0
 800f480:	2601      	movge	r6, #1
 800f482:	464f      	mov	r7, r9
 800f484:	f04f 0800 	mov.w	r8, #0
 800f488:	f8a4 8016 	strh.w	r8, [r4, #22]
 800f48c:	f8a4 8018 	strh.w	r8, [r4, #24]
 800f490:	f8cd 8004 	str.w	r8, [sp, #4]
 800f494:	2300      	movs	r3, #0
 800f496:	9303      	str	r3, [sp, #12]
 800f498:	8823      	ldrh	r3, [r4, #0]
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d034      	beq.n	800f508 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800f49e:	f242 010b 	movw	r1, #8203	@ 0x200b
 800f4a2:	1a5a      	subs	r2, r3, r1
 800f4a4:	f1d2 0a00 	rsbs	sl, r2, #0
 800f4a8:	eb4a 0a02 	adc.w	sl, sl, r2
 800f4ac:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d009      	beq.n	800f4c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800f4b4:	428b      	cmp	r3, r1
 800f4b6:	9a01      	ldr	r2, [sp, #4]
 800f4b8:	bf18      	it	ne
 800f4ba:	461a      	movne	r2, r3
 800f4bc:	9201      	str	r2, [sp, #4]
 800f4be:	bf0c      	ite	eq
 800f4c0:	f04f 0a01 	moveq.w	sl, #1
 800f4c4:	f04f 0a00 	movne.w	sl, #0
 800f4c8:	ab03      	add	r3, sp, #12
 800f4ca:	68e2      	ldr	r2, [r4, #12]
 800f4cc:	7a21      	ldrb	r1, [r4, #8]
 800f4ce:	6860      	ldr	r0, [r4, #4]
 800f4d0:	f002 fe76 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f4d4:	8020      	strh	r0, [r4, #0]
 800f4d6:	b9d8      	cbnz	r0, 800f510 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800f4d8:	8ba2      	ldrh	r2, [r4, #28]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f7ff ff90 	bl	800f404 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800f4e4:	e06e      	b.n	800f5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800f4e6:	2500      	movs	r5, #0
 800f4e8:	46a9      	mov	r9, r5
 800f4ea:	462e      	mov	r6, r5
 800f4ec:	2701      	movs	r7, #1
 800f4ee:	e7c9      	b.n	800f484 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800f4f0:	42b7      	cmp	r7, r6
 800f4f2:	f04f 0500 	mov.w	r5, #0
 800f4f6:	bfb4      	ite	lt
 800f4f8:	2700      	movlt	r7, #0
 800f4fa:	2701      	movge	r7, #1
 800f4fc:	462e      	mov	r6, r5
 800f4fe:	e7c1      	b.n	800f484 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800f500:	2500      	movs	r5, #0
 800f502:	46a9      	mov	r9, r5
 800f504:	2601      	movs	r6, #1
 800f506:	e7ad      	b.n	800f464 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	f04f 0a01 	mov.w	sl, #1
 800f50e:	e7db      	b.n	800f4c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800f510:	8b63      	ldrh	r3, [r4, #26]
 800f512:	280a      	cmp	r0, #10
 800f514:	f103 0301 	add.w	r3, r3, #1
 800f518:	8363      	strh	r3, [r4, #26]
 800f51a:	d0dd      	beq.n	800f4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800f51c:	9a03      	ldr	r2, [sp, #12]
 800f51e:	bb62      	cbnz	r2, 800f57a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800f520:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800f524:	4298      	cmp	r0, r3
 800f526:	d003      	beq.n	800f530 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800f528:	f242 030b 	movw	r3, #8203	@ 0x200b
 800f52c:	4298      	cmp	r0, r3
 800f52e:	d1b1      	bne.n	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f530:	8823      	ldrh	r3, [r4, #0]
 800f532:	8ba1      	ldrh	r1, [r4, #28]
 800f534:	2b20      	cmp	r3, #32
 800f536:	d003      	beq.n	800f540 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800f538:	f242 000b 	movw	r0, #8203	@ 0x200b
 800f53c:	4283      	cmp	r3, r0
 800f53e:	d131      	bne.n	800f5a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	bf0a      	itet	eq
 800f546:	4688      	moveq	r8, r1
 800f548:	4650      	movne	r0, sl
 800f54a:	2001      	moveq	r0, #1
 800f54c:	440a      	add	r2, r1
 800f54e:	8b23      	ldrh	r3, [r4, #24]
 800f550:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800f554:	b292      	uxth	r2, r2
 800f556:	83a2      	strh	r2, [r4, #28]
 800f558:	4413      	add	r3, r2
 800f55a:	f1b9 0f00 	cmp.w	r9, #0
 800f55e:	d102      	bne.n	800f566 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800f560:	2d00      	cmp	r5, #0
 800f562:	d042      	beq.n	800f5ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800f564:	b300      	cbz	r0, 800f5a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800f566:	8c21      	ldrh	r1, [r4, #32]
 800f568:	4419      	add	r1, r3
 800f56a:	458c      	cmp	ip, r1
 800f56c:	da37      	bge.n	800f5de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800f56e:	8ae1      	ldrh	r1, [r4, #22]
 800f570:	2900      	cmp	r1, #0
 800f572:	d034      	beq.n	800f5de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800f574:	4563      	cmp	r3, ip
 800f576:	dd8d      	ble.n	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f578:	e01d      	b.n	800f5b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800f57a:	8893      	ldrh	r3, [r2, #4]
 800f57c:	8023      	strh	r3, [r4, #0]
 800f57e:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800f582:	9901      	ldr	r1, [sp, #4]
 800f584:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800f588:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800f58c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800f590:	ea4b 0b00 	orr.w	fp, fp, r0
 800f594:	68e0      	ldr	r0, [r4, #12]
 800f596:	6803      	ldr	r3, [r0, #0]
 800f598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f59a:	4798      	blx	r3
 800f59c:	eb0b 0200 	add.w	r2, fp, r0
 800f5a0:	b292      	uxth	r2, r2
 800f5a2:	e7c5      	b.n	800f530 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	e7d1      	b.n	800f54c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800f5a8:	4563      	cmp	r3, ip
 800f5aa:	f77f af73 	ble.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f5ae:	8ae3      	ldrh	r3, [r4, #22]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f43f af6f 	beq.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800f5bc:	8c22      	ldrh	r2, [r4, #32]
 800f5be:	8be3      	ldrh	r3, [r4, #30]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	83e3      	strh	r3, [r4, #30]
 800f5c4:	68e0      	ldr	r0, [r4, #12]
 800f5c6:	6803      	ldr	r3, [r0, #0]
 800f5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5ca:	4798      	blx	r3
 800f5cc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800f5d0:	4418      	add	r0, r3
 800f5d2:	8a63      	ldrh	r3, [r4, #18]
 800f5d4:	1a18      	subs	r0, r3, r0
 800f5d6:	8260      	strh	r0, [r4, #18]
 800f5d8:	b005      	add	sp, #20
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	2300      	movs	r3, #0
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7ff ff0e 	bl	800f404 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800f5e8:	e754      	b.n	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f5ea:	4563      	cmp	r3, ip
 800f5ec:	dd14      	ble.n	800f618 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800f5ee:	b117      	cbz	r7, 800f5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	460a      	mov	r2, r1
 800f5f4:	e772      	b.n	800f4dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800f5f6:	2e00      	cmp	r6, #0
 800f5f8:	f43f af4c 	beq.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	f47f af49 	bne.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f602:	f1ba 0f00 	cmp.w	sl, #0
 800f606:	d002      	beq.n	800f60e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800f608:	2301      	movs	r3, #1
 800f60a:	4642      	mov	r2, r8
 800f60c:	e767      	b.n	800f4de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800f60e:	8ae3      	ldrh	r3, [r4, #22]
 800f610:	2b00      	cmp	r3, #0
 800f612:	f43f af3f 	beq.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f616:	e7d5      	b.n	800f5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800f618:	2800      	cmp	r0, #0
 800f61a:	f47f af3b 	bne.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f61e:	f1ba 0f00 	cmp.w	sl, #0
 800f622:	f43f af37 	beq.w	800f494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800f626:	2301      	movs	r3, #1
 800f628:	4642      	mov	r2, r8
 800f62a:	e7da      	b.n	800f5e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800f62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800f62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f630:	b0e3      	sub	sp, #396	@ 0x18c
 800f632:	461c      	mov	r4, r3
 800f634:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800f636:	4683      	mov	fp, r0
 800f638:	4688      	mov	r8, r1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 8112 	beq.w	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 810e 	beq.w	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f648:	7ba3      	ldrb	r3, [r4, #14]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	f000 810a 	beq.w	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f650:	6810      	ldr	r0, [r2, #0]
 800f652:	6851      	ldr	r1, [r2, #4]
 800f654:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800f658:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800f65c:	ad0a      	add	r5, sp, #40	@ 0x28
 800f65e:	462b      	mov	r3, r5
 800f660:	c303      	stmia	r3!, {r0, r1}
 800f662:	2100      	movs	r1, #0
 800f664:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800f668:	910c      	str	r1, [sp, #48]	@ 0x30
 800f66a:	79a2      	ldrb	r2, [r4, #6]
 800f66c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f670:	a90c      	add	r1, sp, #48	@ 0x30
 800f672:	4628      	mov	r0, r5
 800f674:	f7ff fd1d 	bl	800f0b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800f678:	a90c      	add	r1, sp, #48	@ 0x30
 800f67a:	4608      	mov	r0, r1
 800f67c:	79a2      	ldrb	r2, [r4, #6]
 800f67e:	f7ff fd18 	bl	800f0b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800f682:	a817      	add	r0, sp, #92	@ 0x5c
 800f684:	f002 fa2e 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 800f688:	6820      	ldr	r0, [r4, #0]
 800f68a:	6803      	ldr	r3, [r0, #0]
 800f68c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f68e:	4798      	blx	r3
 800f690:	4606      	mov	r6, r0
 800f692:	6820      	ldr	r0, [r4, #0]
 800f694:	6803      	ldr	r3, [r0, #0]
 800f696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f698:	4798      	blx	r3
 800f69a:	4633      	mov	r3, r6
 800f69c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800f69e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800f6a0:	9000      	str	r0, [sp, #0]
 800f6a2:	a817      	add	r0, sp, #92	@ 0x5c
 800f6a4:	f002 fa71 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f6a8:	6820      	ldr	r0, [r4, #0]
 800f6aa:	f894 a004 	ldrb.w	sl, [r4, #4]
 800f6ae:	6803      	ldr	r3, [r0, #0]
 800f6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6b2:	4798      	blx	r3
 800f6b4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	4607      	mov	r7, r0
 800f6bc:	4406      	add	r6, r0
 800f6be:	a830      	add	r0, sp, #192	@ 0xc0
 800f6c0:	f893 9009 	ldrb.w	r9, [r3, #9]
 800f6c4:	f002 fa0e 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 800f6c8:	7c23      	ldrb	r3, [r4, #16]
 800f6ca:	b17b      	cbz	r3, 800f6ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800f6cc:	6820      	ldr	r0, [r4, #0]
 800f6ce:	6803      	ldr	r3, [r0, #0]
 800f6d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6d2:	4798      	blx	r3
 800f6d4:	9009      	str	r0, [sp, #36]	@ 0x24
 800f6d6:	6820      	ldr	r0, [r4, #0]
 800f6d8:	6802      	ldr	r2, [r0, #0]
 800f6da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f6dc:	4790      	blx	r2
 800f6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e0:	9000      	str	r0, [sp, #0]
 800f6e2:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800f6e4:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800f6e6:	a830      	add	r0, sp, #192	@ 0xc0
 800f6e8:	f002 fa4f 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f6ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800f6f0:	7be2      	ldrb	r2, [r4, #15]
 800f6f2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800f6f6:	1a8a      	subs	r2, r1, r2
 800f6f8:	7c21      	ldrb	r1, [r4, #16]
 800f6fa:	9103      	str	r1, [sp, #12]
 800f6fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800f700:	9102      	str	r1, [sp, #8]
 800f702:	6821      	ldr	r1, [r4, #0]
 800f704:	9101      	str	r1, [sp, #4]
 800f706:	7961      	ldrb	r1, [r4, #5]
 800f708:	9100      	str	r1, [sp, #0]
 800f70a:	b292      	uxth	r2, r2
 800f70c:	a930      	add	r1, sp, #192	@ 0xc0
 800f70e:	a80e      	add	r0, sp, #56	@ 0x38
 800f710:	f7ff fc50 	bl	800efb4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800f714:	2e00      	cmp	r6, #0
 800f716:	dc5b      	bgt.n	800f7d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800f718:	af17      	add	r7, sp, #92	@ 0x5c
 800f71a:	f04f 0900 	mov.w	r9, #0
 800f71e:	7c23      	ldrb	r3, [r4, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80b1 	beq.w	800f888 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800f726:	a80e      	add	r0, sp, #56	@ 0x38
 800f728:	f7ff fe7c 	bl	800f424 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	f000 80a5 	beq.w	800f87e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800f734:	7c23      	ldrb	r3, [r4, #16]
 800f736:	9309      	str	r3, [sp, #36]	@ 0x24
 800f738:	2264      	movs	r2, #100	@ 0x64
 800f73a:	4639      	mov	r1, r7
 800f73c:	a849      	add	r0, sp, #292	@ 0x124
 800f73e:	f012 f87e 	bl	802183e <memcpy>
 800f742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 80a7 	beq.w	800f898 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800f74a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800f74e:	7922      	ldrb	r2, [r4, #4]
 800f750:	2a01      	cmp	r2, #1
 800f752:	f040 808a 	bne.w	800f86a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800f756:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800f75a:	1ac0      	subs	r0, r0, r3
 800f75c:	2302      	movs	r3, #2
 800f75e:	fb90 f0f3 	sdiv	r0, r0, r3
 800f762:	b200      	sxth	r0, r0
 800f764:	7c23      	ldrb	r3, [r4, #16]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 808b 	beq.w	800f882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800f76c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800f770:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800f774:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f778:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800f77c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800f780:	4410      	add	r0, r2
 800f782:	b200      	sxth	r0, r0
 800f784:	9000      	str	r0, [sp, #0]
 800f786:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800f78a:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800f78e:	4642      	mov	r2, r8
 800f790:	2100      	movs	r1, #0
 800f792:	4658      	mov	r0, fp
 800f794:	f7ff fcbe 	bl	800f114 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d163      	bne.n	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f79c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800f7a0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800f7a4:	b2b2      	uxth	r2, r6
 800f7a6:	4413      	add	r3, r2
 800f7a8:	1a8a      	subs	r2, r1, r2
 800f7aa:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800f7ae:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800f7b2:	b21b      	sxth	r3, r3
 800f7b4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f7b8:	2a00      	cmp	r2, #0
 800f7ba:	d153      	bne.n	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f7bc:	6822      	ldr	r2, [r4, #0]
 800f7be:	8869      	ldrh	r1, [r5, #2]
 800f7c0:	7a12      	ldrb	r2, [r2, #8]
 800f7c2:	1a9b      	subs	r3, r3, r2
 800f7c4:	88ea      	ldrh	r2, [r5, #6]
 800f7c6:	440a      	add	r2, r1
 800f7c8:	b212      	sxth	r2, r2
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	dda7      	ble.n	800f71e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800f7ce:	e049      	b.n	800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f7d0:	7c23      	ldrb	r3, [r4, #16]
 800f7d2:	444f      	add	r7, r9
 800f7d4:	b1c3      	cbz	r3, 800f808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800f7d6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800f7da:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f7de:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f7e2:	443b      	add	r3, r7
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	da97      	bge.n	800f718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800f7e8:	a80e      	add	r0, sp, #56	@ 0x38
 800f7ea:	f7ff fe1b 	bl	800f424 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800f7ee:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	454b      	cmp	r3, r9
 800f7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7fa:	d021      	beq.n	800f840 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800f7fc:	7961      	ldrb	r1, [r4, #5]
 800f7fe:	a817      	add	r0, sp, #92	@ 0x5c
 800f800:	f7fb fb7a 	bl	800aef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f806:	e7f4      	b.n	800f7f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800f808:	fa1f f986 	uxth.w	r9, r6
 800f80c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f810:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f814:	443b      	add	r3, r7
 800f816:	4293      	cmp	r3, r2
 800f818:	f6bf af7e 	bge.w	800f718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800f81c:	a817      	add	r0, sp, #92	@ 0x5c
 800f81e:	f002 fd9d 	bl	801235c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f822:	b1f8      	cbz	r0, 800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f824:	280a      	cmp	r0, #10
 800f826:	d1f1      	bne.n	800f80c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800f828:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800f82c:	444b      	add	r3, r9
 800f82e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f832:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800f836:	eba3 0309 	sub.w	r3, r3, r9
 800f83a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f83e:	e7e5      	b.n	800f80c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800f840:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800f844:	b2b3      	uxth	r3, r6
 800f846:	441a      	add	r2, r3
 800f848:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800f84c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f856:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800f85a:	b11b      	cbz	r3, 800f864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800f85c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0ba      	beq.n	800f7da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800f864:	b063      	add	sp, #396	@ 0x18c
 800f866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f86a:	2a02      	cmp	r2, #2
 800f86c:	d105      	bne.n	800f87a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800f86e:	7be2      	ldrb	r2, [r4, #15]
 800f870:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800f874:	1a80      	subs	r0, r0, r2
 800f876:	1ac0      	subs	r0, r0, r3
 800f878:	e773      	b.n	800f762 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800f87a:	2000      	movs	r0, #0
 800f87c:	e772      	b.n	800f764 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800f87e:	7be0      	ldrb	r0, [r4, #15]
 800f880:	e770      	b.n	800f764 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800f882:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f886:	e773      	b.n	800f770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800f888:	f1ba 0f00 	cmp.w	sl, #0
 800f88c:	d0f7      	beq.n	800f87e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800f88e:	2264      	movs	r2, #100	@ 0x64
 800f890:	4639      	mov	r1, r7
 800f892:	a849      	add	r0, sp, #292	@ 0x124
 800f894:	f011 ffd3 	bl	802183e <memcpy>
 800f898:	2300      	movs	r3, #0
 800f89a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f89e:	6821      	ldr	r1, [r4, #0]
 800f8a0:	a849      	add	r0, sp, #292	@ 0x124
 800f8a2:	f7ff fbca 	bl	800f03a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800f8a6:	b203      	sxth	r3, r0
 800f8a8:	e751      	b.n	800f74e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800f8aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800f8aa:	2b03      	cmp	r3, #3
 800f8ac:	d818      	bhi.n	800f8e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800f8ae:	e8df f003 	tbb	[pc, r3]
 800f8b2:	0602      	.short	0x0602
 800f8b4:	130d      	.short	0x130d
 800f8b6:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f8ba:	1850      	adds	r0, r2, r1
 800f8bc:	4770      	bx	lr
 800f8be:	8803      	ldrh	r3, [r0, #0]
 800f8c0:	8880      	ldrh	r0, [r0, #4]
 800f8c2:	4418      	add	r0, r3
 800f8c4:	b200      	sxth	r0, r0
 800f8c6:	1a80      	subs	r0, r0, r2
 800f8c8:	3801      	subs	r0, #1
 800f8ca:	4770      	bx	lr
 800f8cc:	8803      	ldrh	r3, [r0, #0]
 800f8ce:	8880      	ldrh	r0, [r0, #4]
 800f8d0:	4418      	add	r0, r3
 800f8d2:	b200      	sxth	r0, r0
 800f8d4:	1a40      	subs	r0, r0, r1
 800f8d6:	e7f7      	b.n	800f8c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800f8d8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f8dc:	4410      	add	r0, r2
 800f8de:	4770      	bx	lr
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	4770      	bx	lr

0800f8e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d817      	bhi.n	800f918 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800f8e8:	e8df f003 	tbb	[pc, r3]
 800f8ec:	10090602 	.word	0x10090602
 800f8f0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800f8f4:	1850      	adds	r0, r2, r1
 800f8f6:	4770      	bx	lr
 800f8f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f8fc:	e7fa      	b.n	800f8f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800f8fe:	8843      	ldrh	r3, [r0, #2]
 800f900:	88c0      	ldrh	r0, [r0, #6]
 800f902:	4418      	add	r0, r3
 800f904:	b200      	sxth	r0, r0
 800f906:	1a80      	subs	r0, r0, r2
 800f908:	3801      	subs	r0, #1
 800f90a:	4770      	bx	lr
 800f90c:	8843      	ldrh	r3, [r0, #2]
 800f90e:	88c0      	ldrh	r0, [r0, #6]
 800f910:	4418      	add	r0, r3
 800f912:	b200      	sxth	r0, r0
 800f914:	1a40      	subs	r0, r0, r1
 800f916:	e7f7      	b.n	800f908 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800f918:	2000      	movs	r0, #0
 800f91a:	4770      	bx	lr

0800f91c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800f91c:	4b01      	ldr	r3, [pc, #4]	@ (800f924 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	4770      	bx	lr
 800f924:	2002b034 	.word	0x2002b034

0800f928 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800f928:	4603      	mov	r3, r0
 800f92a:	b1c8      	cbz	r0, 800f960 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800f92c:	0c02      	lsrs	r2, r0, #16
 800f92e:	0412      	lsls	r2, r2, #16
 800f930:	b9a2      	cbnz	r2, 800f95c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800f932:	0403      	lsls	r3, r0, #16
 800f934:	2010      	movs	r0, #16
 800f936:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800f93a:	bf04      	itt	eq
 800f93c:	021b      	lsleq	r3, r3, #8
 800f93e:	3008      	addeq	r0, #8
 800f940:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800f944:	bf04      	itt	eq
 800f946:	011b      	lsleq	r3, r3, #4
 800f948:	3004      	addeq	r0, #4
 800f94a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800f94e:	bf04      	itt	eq
 800f950:	009b      	lsleq	r3, r3, #2
 800f952:	3002      	addeq	r0, #2
 800f954:	2b00      	cmp	r3, #0
 800f956:	db04      	blt.n	800f962 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800f958:	3001      	adds	r0, #1
 800f95a:	4770      	bx	lr
 800f95c:	2000      	movs	r0, #0
 800f95e:	e7ea      	b.n	800f936 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800f960:	2020      	movs	r0, #32
 800f962:	4770      	bx	lr

0800f964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800f964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f968:	b087      	sub	sp, #28
 800f96a:	460d      	mov	r5, r1
 800f96c:	4616      	mov	r6, r2
 800f96e:	4698      	mov	r8, r3
 800f970:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800f974:	4601      	mov	r1, r0
 800f976:	b120      	cbz	r0, 800f982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f978:	b11a      	cbz	r2, 800f982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f97a:	2d1f      	cmp	r5, #31
 800f97c:	d801      	bhi.n	800f982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f97e:	2b1f      	cmp	r3, #31
 800f980:	d904      	bls.n	800f98c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800f982:	2000      	movs	r0, #0
 800f984:	6038      	str	r0, [r7, #0]
 800f986:	b007      	add	sp, #28
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	b97d      	cbnz	r5, 800f9ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800f98e:	b143      	cbz	r3, 800f9a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800f990:	4602      	mov	r2, r0
 800f992:	e9cd 4700 	strd	r4, r7, [sp]
 800f996:	462b      	mov	r3, r5
 800f998:	4641      	mov	r1, r8
 800f99a:	4630      	mov	r0, r6
 800f99c:	f7ff ffe2 	bl	800f964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f9a0:	e7f1      	b.n	800f986 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a6:	603b      	str	r3, [r7, #0]
 800f9a8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800f9ac:	e7eb      	b.n	800f986 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f9ae:	fa32 fa05 	lsrs.w	sl, r2, r5
 800f9b2:	d106      	bne.n	800f9c2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800f9b4:	4346      	muls	r6, r0
 800f9b6:	fbb6 f0f4 	udiv	r0, r6, r4
 800f9ba:	fb04 6610 	mls	r6, r4, r0, r6
 800f9be:	603e      	str	r6, [r7, #0]
 800f9c0:	e7e1      	b.n	800f986 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	40aa      	lsls	r2, r5
 800f9c6:	3a01      	subs	r2, #1
 800f9c8:	4016      	ands	r6, r2
 800f9ca:	fa00 fb05 	lsl.w	fp, r0, r5
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	fbbb f9f4 	udiv	r9, fp, r4
 800f9d4:	fb0a f309 	mul.w	r3, sl, r9
 800f9d8:	9303      	str	r3, [sp, #12]
 800f9da:	f7ff ffa5 	bl	800f928 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f9de:	462b      	mov	r3, r5
 800f9e0:	460a      	mov	r2, r1
 800f9e2:	e9cd 4700 	strd	r4, r7, [sp]
 800f9e6:	4601      	mov	r1, r0
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ffbb 	bl	800f964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f9ee:	fb04 b919 	mls	r9, r4, r9, fp
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	4648      	mov	r0, r9
 800f9f6:	eb05 0108 	add.w	r1, r5, r8
 800f9fa:	f7ff ff95 	bl	800f928 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f9fe:	ab05      	add	r3, sp, #20
 800fa00:	e9cd 4300 	strd	r4, r3, [sp]
 800fa04:	464a      	mov	r2, r9
 800fa06:	4603      	mov	r3, r0
 800fa08:	4650      	mov	r0, sl
 800fa0a:	f7ff ffab 	bl	800f964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fa0e:	6839      	ldr	r1, [r7, #0]
 800fa10:	9a05      	ldr	r2, [sp, #20]
 800fa12:	9b03      	ldr	r3, [sp, #12]
 800fa14:	4411      	add	r1, r2
 800fa16:	fbb1 f2f4 	udiv	r2, r1, r4
 800fa1a:	18d3      	adds	r3, r2, r3
 800fa1c:	441e      	add	r6, r3
 800fa1e:	fb04 1412 	mls	r4, r4, r2, r1
 800fa22:	4430      	add	r0, r6
 800fa24:	603c      	str	r4, [r7, #0]
 800fa26:	e7ae      	b.n	800f986 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800fa28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800fa28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa2c:	b085      	sub	sp, #20
 800fa2e:	f1b0 0900 	subs.w	r9, r0, #0
 800fa32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800fa34:	461d      	mov	r5, r3
 800fa36:	bfbf      	itttt	lt
 800fa38:	6823      	ldrlt	r3, [r4, #0]
 800fa3a:	425b      	neglt	r3, r3
 800fa3c:	f1c9 0900 	rsblt	r9, r9, #0
 800fa40:	6023      	strlt	r3, [r4, #0]
 800fa42:	bfb4      	ite	lt
 800fa44:	f04f 36ff 	movlt.w	r6, #4294967295
 800fa48:	2601      	movge	r6, #1
 800fa4a:	2a00      	cmp	r2, #0
 800fa4c:	4617      	mov	r7, r2
 800fa4e:	da04      	bge.n	800fa5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	425b      	negs	r3, r3
 800fa54:	4257      	negs	r7, r2
 800fa56:	4276      	negs	r6, r6
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	2d00      	cmp	r5, #0
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	bfba      	itte	lt
 800fa60:	426d      	neglt	r5, r5
 800fa62:	f04f 38ff 	movlt.w	r8, #4294967295
 800fa66:	f04f 0801 	movge.w	r8, #1
 800fa6a:	f7ff ff5d 	bl	800f928 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800fa6e:	ab03      	add	r3, sp, #12
 800fa70:	e9cd 5300 	strd	r5, r3, [sp]
 800fa74:	463a      	mov	r2, r7
 800fa76:	4603      	mov	r3, r0
 800fa78:	4648      	mov	r0, r9
 800fa7a:	f7ff ff73 	bl	800f964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fa7e:	6823      	ldr	r3, [r4, #0]
 800fa80:	9a03      	ldr	r2, [sp, #12]
 800fa82:	4546      	cmp	r6, r8
 800fa84:	441a      	add	r2, r3
 800fa86:	fb92 f3f5 	sdiv	r3, r2, r5
 800fa8a:	4418      	add	r0, r3
 800fa8c:	bf18      	it	ne
 800fa8e:	4240      	negne	r0, r0
 800fa90:	fb05 2313 	mls	r3, r5, r3, r2
 800fa94:	1c72      	adds	r2, r6, #1
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	d105      	bne.n	800faa6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f1c3 0200 	rsb	r2, r3, #0
 800faa0:	db0b      	blt.n	800faba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800faa2:	6022      	str	r2, [r4, #0]
 800faa4:	e006      	b.n	800fab4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800faa6:	2e01      	cmp	r6, #1
 800faa8:	d104      	bne.n	800fab4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800faaa:	2b00      	cmp	r3, #0
 800faac:	da02      	bge.n	800fab4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800faae:	442b      	add	r3, r5
 800fab0:	3801      	subs	r0, #1
 800fab2:	6023      	str	r3, [r4, #0]
 800fab4:	b005      	add	sp, #20
 800fab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faba:	3801      	subs	r0, #1
 800fabc:	1b52      	subs	r2, r2, r5
 800fabe:	e7f0      	b.n	800faa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800fac0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800fac0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fac4:	4c1c      	ldr	r4, [pc, #112]	@ (800fb38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800fac6:	6807      	ldr	r7, [r0, #0]
 800fac8:	69a3      	ldr	r3, [r4, #24]
 800faca:	4605      	mov	r5, r0
 800facc:	b92b      	cbnz	r3, 800fada <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800face:	6840      	ldr	r0, [r0, #4]
 800fad0:	e9c5 7000 	strd	r7, r0, [r5]
 800fad4:	b004      	add	sp, #16
 800fad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fada:	68a2      	ldr	r2, [r4, #8]
 800fadc:	6820      	ldr	r0, [r4, #0]
 800fade:	ae04      	add	r6, sp, #16
 800fae0:	f04f 0802 	mov.w	r8, #2
 800fae4:	fb93 f1f8 	sdiv	r1, r3, r8
 800fae8:	440a      	add	r2, r1
 800faea:	f846 2d04 	str.w	r2, [r6, #-4]!
 800faee:	69e1      	ldr	r1, [r4, #28]
 800faf0:	9600      	str	r6, [sp, #0]
 800faf2:	463a      	mov	r2, r7
 800faf4:	f7ff ff98 	bl	800fa28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800faf8:	69a3      	ldr	r3, [r4, #24]
 800fafa:	686a      	ldr	r2, [r5, #4]
 800fafc:	6a21      	ldr	r1, [r4, #32]
 800fafe:	9600      	str	r6, [sp, #0]
 800fb00:	4607      	mov	r7, r0
 800fb02:	6860      	ldr	r0, [r4, #4]
 800fb04:	f7ff ff90 	bl	800fa28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fb08:	6962      	ldr	r2, [r4, #20]
 800fb0a:	69a3      	ldr	r3, [r4, #24]
 800fb0c:	fb93 f8f8 	sdiv	r8, r3, r8
 800fb10:	4442      	add	r2, r8
 800fb12:	9203      	str	r2, [sp, #12]
 800fb14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fb16:	682a      	ldr	r2, [r5, #0]
 800fb18:	9600      	str	r6, [sp, #0]
 800fb1a:	4407      	add	r7, r0
 800fb1c:	68e0      	ldr	r0, [r4, #12]
 800fb1e:	f7ff ff83 	bl	800fa28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fb22:	9600      	str	r6, [sp, #0]
 800fb24:	4680      	mov	r8, r0
 800fb26:	69a3      	ldr	r3, [r4, #24]
 800fb28:	686a      	ldr	r2, [r5, #4]
 800fb2a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fb2c:	6920      	ldr	r0, [r4, #16]
 800fb2e:	f7ff ff7b 	bl	800fa28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fb32:	4440      	add	r0, r8
 800fb34:	e7cc      	b.n	800fad0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800fb36:	bf00      	nop
 800fb38:	2002b038 	.word	0x2002b038

0800fb3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800fb3c:	4b07      	ldr	r3, [pc, #28]	@ (800fb5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d109      	bne.n	800fb58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800fb44:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fb48:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fb4c:	8003      	strh	r3, [r0, #0]
 800fb4e:	4b04      	ldr	r3, [pc, #16]	@ (800fb60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800fb50:	881b      	ldrh	r3, [r3, #0]
 800fb52:	3b01      	subs	r3, #1
 800fb54:	1a9b      	subs	r3, r3, r2
 800fb56:	800b      	strh	r3, [r1, #0]
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	2002b024 	.word	0x2002b024
 800fb60:	2002b020 	.word	0x2002b020

0800fb64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800fb64:	b510      	push	{r4, lr}
 800fb66:	4b07      	ldr	r3, [pc, #28]	@ (800fb84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d108      	bne.n	800fb80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800fb6e:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800fb70:	880c      	ldrh	r4, [r1, #0]
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	1b1b      	subs	r3, r3, r4
 800fb7c:	8003      	strh	r3, [r0, #0]
 800fb7e:	800a      	strh	r2, [r1, #0]
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	bf00      	nop
 800fb84:	2002b024 	.word	0x2002b024
 800fb88:	2002b020 	.word	0x2002b020

0800fb8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800fb8c:	b510      	push	{r4, lr}
 800fb8e:	4b0a      	ldr	r3, [pc, #40]	@ (800fbb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d10e      	bne.n	800fbb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800fb96:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800fb9a:	8843      	ldrh	r3, [r0, #2]
 800fb9c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fba0:	8044      	strh	r4, [r0, #2]
 800fba2:	18ca      	adds	r2, r1, r3
 800fba4:	4b05      	ldr	r3, [pc, #20]	@ (800fbbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	1a9b      	subs	r3, r3, r2
 800fbaa:	8003      	strh	r3, [r0, #0]
 800fbac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fbb0:	80c3      	strh	r3, [r0, #6]
 800fbb2:	8081      	strh	r1, [r0, #4]
 800fbb4:	bd10      	pop	{r4, pc}
 800fbb6:	bf00      	nop
 800fbb8:	2002b024 	.word	0x2002b024
 800fbbc:	2002b020 	.word	0x2002b020

0800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800fbc0:	4b08      	ldr	r3, [pc, #32]	@ (800fbe4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d10c      	bne.n	800fbe2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800fbc8:	8803      	ldrh	r3, [r0, #0]
 800fbca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800fbce:	8842      	ldrh	r2, [r0, #2]
 800fbd0:	8002      	strh	r2, [r0, #0]
 800fbd2:	185a      	adds	r2, r3, r1
 800fbd4:	4b04      	ldr	r3, [pc, #16]	@ (800fbe8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	1a9b      	subs	r3, r3, r2
 800fbda:	8043      	strh	r3, [r0, #2]
 800fbdc:	88c3      	ldrh	r3, [r0, #6]
 800fbde:	8083      	strh	r3, [r0, #4]
 800fbe0:	80c1      	strh	r1, [r0, #6]
 800fbe2:	4770      	bx	lr
 800fbe4:	2002b024 	.word	0x2002b024
 800fbe8:	2002b020 	.word	0x2002b020

0800fbec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800fbec:	b510      	push	{r4, lr}
 800fbee:	4b07      	ldr	r3, [pc, #28]	@ (800fc0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d108      	bne.n	800fc08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800fbf6:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fbfa:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fbfe:	8003      	strh	r3, [r0, #0]
 800fc00:	8893      	ldrh	r3, [r2, #4]
 800fc02:	3b01      	subs	r3, #1
 800fc04:	1b1b      	subs	r3, r3, r4
 800fc06:	800b      	strh	r3, [r1, #0]
 800fc08:	bd10      	pop	{r4, pc}
 800fc0a:	bf00      	nop
 800fc0c:	2002b024 	.word	0x2002b024

0800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	4b0a      	ldr	r3, [pc, #40]	@ (800fc3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	460a      	mov	r2, r1
 800fc1a:	d10d      	bne.n	800fc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800fc1c:	8881      	ldrh	r1, [r0, #4]
 800fc1e:	8803      	ldrh	r3, [r0, #0]
 800fc20:	440b      	add	r3, r1
 800fc22:	4601      	mov	r1, r0
 800fc24:	3b01      	subs	r3, #1
 800fc26:	f821 3b02 	strh.w	r3, [r1], #2
 800fc2a:	f7ff ffdf 	bl	800fbec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800fc2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fc32:	88c2      	ldrh	r2, [r0, #6]
 800fc34:	8082      	strh	r2, [r0, #4]
 800fc36:	80c3      	strh	r3, [r0, #6]
 800fc38:	bd10      	pop	{r4, pc}
 800fc3a:	bf00      	nop
 800fc3c:	2002b024 	.word	0x2002b024

0800fc40 <_ZN8touchgfx11Application13requestRedrawEv>:
 800fc40:	4b06      	ldr	r3, [pc, #24]	@ (800fc5c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800fc42:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fc46:	4b06      	ldr	r3, [pc, #24]	@ (800fc60 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800fc48:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800fc4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc50:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800fc54:	2100      	movs	r1, #0
 800fc56:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800fc5a:	4770      	bx	lr
 800fc5c:	2002b020 	.word	0x2002b020
 800fc60:	2002b022 	.word	0x2002b022

0800fc64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800fc64:	4b03      	ldr	r3, [pc, #12]	@ (800fc74 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	b110      	cbz	r0, 800fc70 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800fc6a:	6803      	ldr	r3, [r0, #0]
 800fc6c:	699b      	ldr	r3, [r3, #24]
 800fc6e:	4718      	bx	r3
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	2002b068 	.word	0x2002b068

0800fc78 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800fc78:	4770      	bx	lr
	...

0800fc7c <_ZN8touchgfx11Application4drawEv>:
 800fc7c:	b507      	push	{r0, r1, r2, lr}
 800fc7e:	4b09      	ldr	r3, [pc, #36]	@ (800fca4 <_ZN8touchgfx11Application4drawEv+0x28>)
 800fc80:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fc84:	4b08      	ldr	r3, [pc, #32]	@ (800fca8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800fc86:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fc8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fc92:	6803      	ldr	r3, [r0, #0]
 800fc94:	2100      	movs	r1, #0
 800fc96:	9100      	str	r1, [sp, #0]
 800fc98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc9a:	4669      	mov	r1, sp
 800fc9c:	4798      	blx	r3
 800fc9e:	b003      	add	sp, #12
 800fca0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fca4:	2002b020 	.word	0x2002b020
 800fca8:	2002b022 	.word	0x2002b022

0800fcac <_ZN8touchgfx11Application10invalidateEv>:
 800fcac:	4b09      	ldr	r3, [pc, #36]	@ (800fcd4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800fcae:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fcb2:	4b09      	ldr	r3, [pc, #36]	@ (800fcd8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800fcb4:	b082      	sub	sp, #8
 800fcb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcba:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fcc4:	9100      	str	r1, [sp, #0]
 800fcc6:	6803      	ldr	r3, [r0, #0]
 800fcc8:	aa02      	add	r2, sp, #8
 800fcca:	e912 0006 	ldmdb	r2, {r1, r2}
 800fcce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcd0:	b002      	add	sp, #8
 800fcd2:	4718      	bx	r3
 800fcd4:	2002b020 	.word	0x2002b020
 800fcd8:	2002b022 	.word	0x2002b022

0800fcdc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800fcdc:	4b03      	ldr	r3, [pc, #12]	@ (800fcec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800fcde:	6818      	ldr	r0, [r3, #0]
 800fce0:	b110      	cbz	r0, 800fce8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800fce2:	6803      	ldr	r3, [r0, #0]
 800fce4:	69db      	ldr	r3, [r3, #28]
 800fce6:	4718      	bx	r3
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	2002b068 	.word	0x2002b068

0800fcf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800fcf0:	4b03      	ldr	r3, [pc, #12]	@ (800fd00 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	b110      	cbz	r0, 800fcfc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800fcf6:	6803      	ldr	r3, [r0, #0]
 800fcf8:	6a1b      	ldr	r3, [r3, #32]
 800fcfa:	4718      	bx	r3
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	2002b068 	.word	0x2002b068

0800fd04 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800fd04:	2300      	movs	r3, #0
 800fd06:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800fd0a:	4770      	bx	lr

0800fd0c <_ZN8touchgfx11Application14handleKeyEventEh>:
 800fd0c:	4b03      	ldr	r3, [pc, #12]	@ (800fd1c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800fd0e:	6818      	ldr	r0, [r3, #0]
 800fd10:	b110      	cbz	r0, 800fd18 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800fd12:	6803      	ldr	r3, [r0, #0]
 800fd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd16:	4718      	bx	r3
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	2002b068 	.word	0x2002b068

0800fd20 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800fd20:	b510      	push	{r4, lr}
 800fd22:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fd26:	888a      	ldrh	r2, [r1, #4]
 800fd28:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fd2c:	4422      	add	r2, r4
 800fd2e:	b212      	sxth	r2, r2
 800fd30:	4293      	cmp	r3, r2
 800fd32:	da15      	bge.n	800fd60 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fd34:	8882      	ldrh	r2, [r0, #4]
 800fd36:	4413      	add	r3, r2
 800fd38:	b21b      	sxth	r3, r3
 800fd3a:	429c      	cmp	r4, r3
 800fd3c:	da10      	bge.n	800fd60 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fd3e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fd42:	88c9      	ldrh	r1, [r1, #6]
 800fd44:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fd48:	4419      	add	r1, r3
 800fd4a:	b209      	sxth	r1, r1
 800fd4c:	428a      	cmp	r2, r1
 800fd4e:	da07      	bge.n	800fd60 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fd50:	88c0      	ldrh	r0, [r0, #6]
 800fd52:	4410      	add	r0, r2
 800fd54:	b200      	sxth	r0, r0
 800fd56:	4283      	cmp	r3, r0
 800fd58:	bfac      	ite	ge
 800fd5a:	2000      	movge	r0, #0
 800fd5c:	2001      	movlt	r0, #1
 800fd5e:	bd10      	pop	{r4, pc}
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7fc      	b.n	800fd5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800fd64 <_ZN8touchgfx4Rect10restrictToEss>:
 800fd64:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	b510      	push	{r4, lr}
 800fd6c:	da04      	bge.n	800fd78 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800fd6e:	8884      	ldrh	r4, [r0, #4]
 800fd70:	4423      	add	r3, r4
 800fd72:	8083      	strh	r3, [r0, #4]
 800fd74:	2300      	movs	r3, #0
 800fd76:	8003      	strh	r3, [r0, #0]
 800fd78:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fd7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fd80:	1b09      	subs	r1, r1, r4
 800fd82:	428b      	cmp	r3, r1
 800fd84:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800fd88:	bfc8      	it	gt
 800fd8a:	8081      	strhgt	r1, [r0, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	da04      	bge.n	800fd9a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800fd90:	88c1      	ldrh	r1, [r0, #6]
 800fd92:	440b      	add	r3, r1
 800fd94:	80c3      	strh	r3, [r0, #6]
 800fd96:	2300      	movs	r3, #0
 800fd98:	8043      	strh	r3, [r0, #2]
 800fd9a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800fd9e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800fda2:	1a52      	subs	r2, r2, r1
 800fda4:	4293      	cmp	r3, r2
 800fda6:	bfc8      	it	gt
 800fda8:	80c2      	strhgt	r2, [r0, #6]
 800fdaa:	bd10      	pop	{r4, pc}

0800fdac <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800fdac:	b510      	push	{r4, lr}
 800fdae:	4b10      	ldr	r3, [pc, #64]	@ (800fdf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800fdb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fdb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fdf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fdbe:	f7ff ffd1 	bl	800fd64 <_ZN8touchgfx4Rect10restrictToEss>
 800fdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	b190      	cbz	r0, 800fdee <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800fdc8:	6803      	ldr	r3, [r0, #0]
 800fdca:	4621      	mov	r1, r4
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	4798      	blx	r3
 800fdd0:	4b0a      	ldr	r3, [pc, #40]	@ (800fdfc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800fdd2:	6818      	ldr	r0, [r3, #0]
 800fdd4:	b118      	cbz	r0, 800fdde <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800fdd6:	6803      	ldr	r3, [r0, #0]
 800fdd8:	4621      	mov	r1, r4
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	4798      	blx	r3
 800fdde:	4b08      	ldr	r3, [pc, #32]	@ (800fe00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800fde0:	6818      	ldr	r0, [r3, #0]
 800fde2:	6803      	ldr	r3, [r0, #0]
 800fde4:	4621      	mov	r1, r4
 800fde6:	69db      	ldr	r3, [r3, #28]
 800fde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdec:	4718      	bx	r3
 800fdee:	bd10      	pop	{r4, pc}
 800fdf0:	2002b022 	.word	0x2002b022
 800fdf4:	2002b020 	.word	0x2002b020
 800fdf8:	2002b068 	.word	0x2002b068
 800fdfc:	2002b064 	.word	0x2002b064
 800fe00:	2002b02c 	.word	0x2002b02c

0800fe04 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe06:	4606      	mov	r6, r0
 800fe08:	4608      	mov	r0, r1
 800fe0a:	460f      	mov	r7, r1
 800fe0c:	f7fd f9bb 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe10:	b9e8      	cbnz	r0, 800fe4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fe12:	f9b7 5000 	ldrsh.w	r5, [r7]
 800fe16:	f9b6 4000 	ldrsh.w	r4, [r6]
 800fe1a:	42a5      	cmp	r5, r4
 800fe1c:	db17      	blt.n	800fe4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fe1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fe22:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	db11      	blt.n	800fe4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fe2a:	88b9      	ldrh	r1, [r7, #4]
 800fe2c:	440d      	add	r5, r1
 800fe2e:	88b1      	ldrh	r1, [r6, #4]
 800fe30:	440c      	add	r4, r1
 800fe32:	b22d      	sxth	r5, r5
 800fe34:	b224      	sxth	r4, r4
 800fe36:	42a5      	cmp	r5, r4
 800fe38:	dc09      	bgt.n	800fe4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fe3a:	88f8      	ldrh	r0, [r7, #6]
 800fe3c:	4410      	add	r0, r2
 800fe3e:	88f2      	ldrh	r2, [r6, #6]
 800fe40:	4413      	add	r3, r2
 800fe42:	b200      	sxth	r0, r0
 800fe44:	b21b      	sxth	r3, r3
 800fe46:	4298      	cmp	r0, r3
 800fe48:	bfcc      	ite	gt
 800fe4a:	2000      	movgt	r0, #0
 800fe4c:	2001      	movle	r0, #1
 800fe4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe50 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	4604      	mov	r4, r0
 800fe54:	4608      	mov	r0, r1
 800fe56:	460d      	mov	r5, r1
 800fe58:	f7fd f995 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe5c:	b978      	cbnz	r0, 800fe7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f7fd f991 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe64:	f9b5 6000 	ldrsh.w	r6, [r5]
 800fe68:	b150      	cbz	r0, 800fe80 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800fe6a:	8026      	strh	r6, [r4, #0]
 800fe6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fe70:	8063      	strh	r3, [r4, #2]
 800fe72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800fe76:	80a3      	strh	r3, [r4, #4]
 800fe78:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800fe7c:	80e3      	strh	r3, [r4, #6]
 800fe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe80:	f9b4 1000 	ldrsh.w	r1, [r4]
 800fe84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800fe88:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800fe8c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800fe90:	88ed      	ldrh	r5, [r5, #6]
 800fe92:	42b1      	cmp	r1, r6
 800fe94:	460f      	mov	r7, r1
 800fe96:	bfa8      	it	ge
 800fe98:	4637      	movge	r7, r6
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	4466      	add	r6, ip
 800fea0:	bfa8      	it	ge
 800fea2:	4610      	movge	r0, r2
 800fea4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800fea8:	8027      	strh	r7, [r4, #0]
 800feaa:	442a      	add	r2, r5
 800feac:	88e5      	ldrh	r5, [r4, #6]
 800feae:	8060      	strh	r0, [r4, #2]
 800feb0:	4461      	add	r1, ip
 800feb2:	442b      	add	r3, r5
 800feb4:	b236      	sxth	r6, r6
 800feb6:	b209      	sxth	r1, r1
 800feb8:	b212      	sxth	r2, r2
 800feba:	b21b      	sxth	r3, r3
 800febc:	428e      	cmp	r6, r1
 800febe:	bfac      	ite	ge
 800fec0:	ebc7 0106 	rsbge	r1, r7, r6
 800fec4:	ebc7 0101 	rsblt	r1, r7, r1
 800fec8:	429a      	cmp	r2, r3
 800feca:	bfac      	ite	ge
 800fecc:	ebc0 0202 	rsbge	r2, r0, r2
 800fed0:	ebc0 0203 	rsblt	r2, r0, r3
 800fed4:	80a1      	strh	r1, [r4, #4]
 800fed6:	80e2      	strh	r2, [r4, #6]
 800fed8:	e7d1      	b.n	800fe7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800fedc <_ZN8touchgfx11Application11getInstanceEv>:
 800fedc:	4b01      	ldr	r3, [pc, #4]	@ (800fee4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	2002b078 	.word	0x2002b078

0800fee8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800fee8:	b510      	push	{r4, lr}
 800feea:	2300      	movs	r3, #0
 800feec:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800fef0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800fef4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800fef8:	4604      	mov	r4, r0
 800fefa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800fefe:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d90e      	bls.n	800ff24 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ff06:	18e2      	adds	r2, r4, r3
 800ff08:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800ff0c:	b122      	cbz	r2, 800ff18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800ff0e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ff12:	6803      	ldr	r3, [r0, #0]
 800ff14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff16:	4798      	blx	r3
 800ff18:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800ff22:	e7ea      	b.n	800fefa <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800ff24:	bd10      	pop	{r4, pc}

0800ff26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800ff26:	2300      	movs	r3, #0
 800ff28:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ff2c:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800ff30:	30a4      	adds	r0, #164	@ 0xa4
 800ff32:	f802 3b01 	strb.w	r3, [r2], #1
 800ff36:	4282      	cmp	r2, r0
 800ff38:	d1fb      	bne.n	800ff32 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800ff3a:	4770      	bx	lr

0800ff3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	4c0b      	ldr	r4, [pc, #44]	@ (800ff6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800ff40:	4605      	mov	r5, r0
 800ff42:	6820      	ldr	r0, [r4, #0]
 800ff44:	460e      	mov	r6, r1
 800ff46:	b110      	cbz	r0, 800ff4e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800ff48:	6803      	ldr	r3, [r0, #0]
 800ff4a:	695b      	ldr	r3, [r3, #20]
 800ff4c:	4798      	blx	r3
 800ff4e:	1d28      	adds	r0, r5, #4
 800ff50:	f7ff ffe9 	bl	800ff26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ff54:	6026      	str	r6, [r4, #0]
 800ff56:	6833      	ldr	r3, [r6, #0]
 800ff58:	4630      	mov	r0, r6
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	4798      	blx	r3
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	4628      	mov	r0, r5
 800ff62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff68:	4718      	bx	r3
 800ff6a:	bf00      	nop
 800ff6c:	2002b068 	.word	0x2002b068

0800ff70 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800ff70:	2300      	movs	r3, #0
 800ff72:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800ff76:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800ff7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	461c      	mov	r4, r3
 800ff80:	461d      	mov	r5, r3
 800ff82:	459c      	cmp	ip, r3
 800ff84:	dd1a      	ble.n	800ffbc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800ff86:	18c6      	adds	r6, r0, r3
 800ff88:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800ff8c:	b16e      	cbz	r6, 800ffaa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d008      	beq.n	800ffa4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800ff92:	fa1f fe82 	uxth.w	lr, r2
 800ff96:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800ff9a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800ff9e:	1887      	adds	r7, r0, r2
 800ffa0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800ffa4:	3201      	adds	r2, #1
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	e7eb      	b.n	800ff82 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800ffaa:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800ffae:	4299      	cmp	r1, r3
 800ffb0:	bfa8      	it	ge
 800ffb2:	3501      	addge	r5, #1
 800ffb4:	429e      	cmp	r6, r3
 800ffb6:	bfc8      	it	gt
 800ffb8:	3401      	addgt	r4, #1
 800ffba:	e7f4      	b.n	800ffa6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800ffbc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800ffc0:	1b49      	subs	r1, r1, r5
 800ffc2:	1b1b      	subs	r3, r3, r4
 800ffc4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800ffc8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ffcc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	dd03      	ble.n	800ffdc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ffda:	e7f7      	b.n	800ffcc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800ffdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ffe0 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ffe0:	b570      	push	{r4, r5, r6, lr}
 800ffe2:	4d16      	ldr	r5, [pc, #88]	@ (801003c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	6828      	ldr	r0, [r5, #0]
 800ffe8:	b140      	cbz	r0, 800fffc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ffea:	7a03      	ldrb	r3, [r0, #8]
 800ffec:	b933      	cbnz	r3, 800fffc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ffee:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800fff2:	6803      	ldr	r3, [r0, #0]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fffa:	4718      	bx	r3
 800fffc:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8010000:	4e0f      	ldr	r6, [pc, #60]	@ (8010040 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8010002:	b973      	cbnz	r3, 8010022 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010004:	b168      	cbz	r0, 8010022 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010006:	7a03      	ldrb	r3, [r0, #8]
 8010008:	b15b      	cbz	r3, 8010022 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801000a:	6830      	ldr	r0, [r6, #0]
 801000c:	b110      	cbz	r0, 8010014 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801000e:	6803      	ldr	r3, [r0, #0]
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	4798      	blx	r3
 8010014:	6828      	ldr	r0, [r5, #0]
 8010016:	6803      	ldr	r3, [r0, #0]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	4798      	blx	r3
 801001c:	2301      	movs	r3, #1
 801001e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8010022:	3404      	adds	r4, #4
 8010024:	4620      	mov	r0, r4
 8010026:	f7ff ff5f 	bl	800fee8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801002a:	4620      	mov	r0, r4
 801002c:	f7ff ffa0 	bl	800ff70 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8010030:	6830      	ldr	r0, [r6, #0]
 8010032:	b110      	cbz	r0, 801003a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8010034:	6803      	ldr	r3, [r0, #0]
 8010036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010038:	e7dd      	b.n	800fff6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	2002b06c 	.word	0x2002b06c
 8010040:	2002b068 	.word	0x2002b068

08010044 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8010044:	4603      	mov	r3, r0
 8010046:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801004a:	2200      	movs	r2, #0
 801004c:	801a      	strh	r2, [r3, #0]
 801004e:	805a      	strh	r2, [r3, #2]
 8010050:	809a      	strh	r2, [r3, #4]
 8010052:	80da      	strh	r2, [r3, #6]
 8010054:	3308      	adds	r3, #8
 8010056:	428b      	cmp	r3, r1
 8010058:	d1f8      	bne.n	801004c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801005a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801005e:	4770      	bx	lr

08010060 <_ZN8touchgfx11ApplicationC1Ev>:
 8010060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010062:	4606      	mov	r6, r0
 8010064:	4b1c      	ldr	r3, [pc, #112]	@ (80100d8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8010066:	f846 3b04 	str.w	r3, [r6], #4
 801006a:	4604      	mov	r4, r0
 801006c:	2500      	movs	r5, #0
 801006e:	22a8      	movs	r2, #168	@ 0xa8
 8010070:	2100      	movs	r1, #0
 8010072:	4630      	mov	r0, r6
 8010074:	f011 fab5 	bl	80215e2 <memset>
 8010078:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801007c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8010080:	f7ff ffe0 	bl	8010044 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010084:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8010088:	f7ff ffdc 	bl	8010044 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801008c:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8010090:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8010094:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8010098:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801009c:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80100a0:	490e      	ldr	r1, [pc, #56]	@ (80100dc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80100a2:	480f      	ldr	r0, [pc, #60]	@ (80100e0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80100a4:	4f0f      	ldr	r7, [pc, #60]	@ (80100e4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80100a6:	f010 ff3d 	bl	8020f24 <CRC_Lock>
 80100aa:	4b0f      	ldr	r3, [pc, #60]	@ (80100e8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80100ac:	b158      	cbz	r0, 80100c6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80100ae:	801d      	strh	r5, [r3, #0]
 80100b0:	4a0e      	ldr	r2, [pc, #56]	@ (80100ec <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80100b2:	2300      	movs	r3, #0
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	4a0e      	ldr	r2, [pc, #56]	@ (80100f0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80100b8:	603b      	str	r3, [r7, #0]
 80100ba:	4630      	mov	r0, r6
 80100bc:	6013      	str	r3, [r2, #0]
 80100be:	f7ff ff32 	bl	800ff26 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80100c2:	4620      	mov	r0, r4
 80100c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80100ca:	2002      	movs	r0, #2
 80100cc:	801a      	strh	r2, [r3, #0]
 80100ce:	6038      	str	r0, [r7, #0]
 80100d0:	f001 fb8e 	bl	80117f0 <_ZN8touchgfx6Screen4drawEv>
 80100d4:	e7ec      	b.n	80100b0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80100d6:	bf00      	nop
 80100d8:	08023944 	.word	0x08023944
 80100dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80100e0:	f407a5c2 	.word	0xf407a5c2
 80100e4:	2002b068 	.word	0x2002b068
 80100e8:	20000018 	.word	0x20000018
 80100ec:	2002b078 	.word	0x2002b078
 80100f0:	2002b06c 	.word	0x2002b06c

080100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80100f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80100f8:	3b01      	subs	r3, #1
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	428b      	cmp	r3, r1
 80100fe:	b510      	push	{r4, lr}
 8010100:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8010104:	d908      	bls.n	8010118 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8010106:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801010a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8010114:	685a      	ldr	r2, [r3, #4]
 8010116:	6062      	str	r2, [r4, #4]
 8010118:	bd10      	pop	{r4, pc}
	...

0801011c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010120:	4b92      	ldr	r3, [pc, #584]	@ (801036c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 8010122:	b08f      	sub	sp, #60	@ 0x3c
 8010124:	ac0a      	add	r4, sp, #40	@ 0x28
 8010126:	e884 0006 	stmia.w	r4, {r1, r2}
 801012a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801012e:	4b90      	ldr	r3, [pc, #576]	@ (8010370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8010130:	4683      	mov	fp, r0
 8010132:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010136:	4620      	mov	r0, r4
 8010138:	f7ff fe14 	bl	800fd64 <_ZN8touchgfx4Rect10restrictToEss>
 801013c:	4620      	mov	r0, r4
 801013e:	f7fd f822 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010142:	2800      	cmp	r0, #0
 8010144:	d170      	bne.n	8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8010146:	4b8b      	ldr	r3, [pc, #556]	@ (8010374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801014e:	2b02      	cmp	r3, #2
 8010150:	d06a      	beq.n	8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8010152:	9403      	str	r4, [sp, #12]
 8010154:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8010158:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801015c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8010160:	35a4      	adds	r5, #164	@ 0xa4
 8010162:	9301      	str	r3, [sp, #4]
 8010164:	b15c      	cbz	r4, 801017e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8010166:	4629      	mov	r1, r5
 8010168:	9803      	ldr	r0, [sp, #12]
 801016a:	f7ff fe4b 	bl	800fe04 <_ZNK8touchgfx4Rect8includesERKS0_>
 801016e:	3c01      	subs	r4, #1
 8010170:	b118      	cbz	r0, 801017a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8010172:	b2a1      	uxth	r1, r4
 8010174:	9801      	ldr	r0, [sp, #4]
 8010176:	f7ff ffbd 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801017a:	3d08      	subs	r5, #8
 801017c:	e7f2      	b.n	8010164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801017e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8010182:	f8cd a010 	str.w	sl, [sp, #16]
 8010186:	f10a 33ff 	add.w	r3, sl, #4294967295
 801018a:	9302      	str	r3, [sp, #8]
 801018c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010190:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8010194:	9306      	str	r3, [sp, #24]
 8010196:	445c      	add	r4, fp
 8010198:	2500      	movs	r5, #0
 801019a:	4626      	mov	r6, r4
 801019c:	f8cd a014 	str.w	sl, [sp, #20]
 80101a0:	462f      	mov	r7, r5
 80101a2:	9b05      	ldr	r3, [sp, #20]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d073      	beq.n	8010290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 80101a8:	9903      	ldr	r1, [sp, #12]
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7ff fdb8 	bl	800fd20 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80101b0:	b350      	cbz	r0, 8010208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 80101b2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80101b6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80101ba:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80101be:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80101c2:	45e6      	cmp	lr, ip
 80101c4:	db33      	blt.n	801022e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80101c6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80101ca:	88b3      	ldrh	r3, [r6, #4]
 80101cc:	4472      	add	r2, lr
 80101ce:	4463      	add	r3, ip
 80101d0:	b212      	sxth	r2, r2
 80101d2:	b21b      	sxth	r3, r3
 80101d4:	429a      	cmp	r2, r3
 80101d6:	dc2a      	bgt.n	801022e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80101d8:	88f3      	ldrh	r3, [r6, #6]
 80101da:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80101de:	fa1f f289 	uxth.w	r2, r9
 80101e2:	4413      	add	r3, r2
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	45c8      	cmp	r8, r9
 80101e8:	fa1f fc88 	uxth.w	ip, r8
 80101ec:	fa0f fe83 	sxth.w	lr, r3
 80101f0:	db0f      	blt.n	8010212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 80101f2:	eba3 030c 	sub.w	r3, r3, ip
 80101f6:	1ac9      	subs	r1, r1, r3
 80101f8:	b209      	sxth	r1, r1
 80101fa:	2900      	cmp	r1, #0
 80101fc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8010200:	dd12      	ble.n	8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8010202:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8010206:	4605      	mov	r5, r0
 8010208:	9b05      	ldr	r3, [sp, #20]
 801020a:	3b01      	subs	r3, #1
 801020c:	9305      	str	r3, [sp, #20]
 801020e:	3e08      	subs	r6, #8
 8010210:	e7c7      	b.n	80101a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8010212:	4461      	add	r1, ip
 8010214:	b209      	sxth	r1, r1
 8010216:	4571      	cmp	r1, lr
 8010218:	dc38      	bgt.n	801028c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801021a:	eba2 020c 	sub.w	r2, r2, ip
 801021e:	b212      	sxth	r2, r2
 8010220:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8010224:	2a00      	cmp	r2, #0
 8010226:	dcee      	bgt.n	8010206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010228:	b00f      	add	sp, #60	@ 0x3c
 801022a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022e:	45c8      	cmp	r8, r9
 8010230:	db2c      	blt.n	801028c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8010232:	88f3      	ldrh	r3, [r6, #6]
 8010234:	4499      	add	r9, r3
 8010236:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801023a:	4498      	add	r8, r3
 801023c:	fa0f f989 	sxth.w	r9, r9
 8010240:	fa0f f888 	sxth.w	r8, r8
 8010244:	45c1      	cmp	r9, r8
 8010246:	db21      	blt.n	801028c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8010248:	88b3      	ldrh	r3, [r6, #4]
 801024a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801024e:	fa1f f28c 	uxth.w	r2, ip
 8010252:	4413      	add	r3, r2
 8010254:	b29b      	uxth	r3, r3
 8010256:	45e6      	cmp	lr, ip
 8010258:	fa1f f88e 	uxth.w	r8, lr
 801025c:	fa0f f983 	sxth.w	r9, r3
 8010260:	db0a      	blt.n	8010278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8010262:	eba3 0308 	sub.w	r3, r3, r8
 8010266:	1ac9      	subs	r1, r1, r3
 8010268:	b209      	sxth	r1, r1
 801026a:	2900      	cmp	r1, #0
 801026c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8010270:	ddda      	ble.n	8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8010272:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8010276:	e7c6      	b.n	8010206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010278:	4441      	add	r1, r8
 801027a:	b209      	sxth	r1, r1
 801027c:	4549      	cmp	r1, r9
 801027e:	dc05      	bgt.n	801028c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8010280:	eba2 0208 	sub.w	r2, r2, r8
 8010284:	b212      	sxth	r2, r2
 8010286:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801028a:	e7cb      	b.n	8010224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 801028c:	4607      	mov	r7, r0
 801028e:	e7bb      	b.n	8010208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8010290:	2d00      	cmp	r5, #0
 8010292:	d181      	bne.n	8010198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8010294:	2f00      	cmp	r7, #0
 8010296:	f000 81df 	beq.w	8010658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801029a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801029e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80102a2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80102a6:	b2b3      	uxth	r3, r6
 80102a8:	9305      	str	r3, [sp, #20]
 80102aa:	9a05      	ldr	r2, [sp, #20]
 80102ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80102b0:	4413      	add	r3, r2
 80102b2:	b2ba      	uxth	r2, r7
 80102b4:	4492      	add	sl, r2
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	fa1f fa8a 	uxth.w	sl, sl
 80102bc:	fa0f f883 	sxth.w	r8, r3
 80102c0:	fa0f f98a 	sxth.w	r9, sl
 80102c4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80102c8:	9b04      	ldr	r3, [sp, #16]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d054      	beq.n	8010378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 80102ce:	9903      	ldr	r1, [sp, #12]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f7ff fd25 	bl	800fd20 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80102d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80102da:	b1c0      	cbz	r0, 801030e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80102dc:	f9b4 e000 	ldrsh.w	lr, [r4]
 80102e0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80102e4:	4576      	cmp	r6, lr
 80102e6:	dc22      	bgt.n	801032e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80102e8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80102ec:	44f4      	add	ip, lr
 80102ee:	fa0f fc8c 	sxth.w	ip, ip
 80102f2:	45e0      	cmp	r8, ip
 80102f4:	db1b      	blt.n	801032e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80102f6:	428f      	cmp	r7, r1
 80102f8:	fa1f fc81 	uxth.w	ip, r1
 80102fc:	88e1      	ldrh	r1, [r4, #6]
 80102fe:	dc0d      	bgt.n	801031c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8010300:	ebaa 0c0c 	sub.w	ip, sl, ip
 8010304:	eba1 010c 	sub.w	r1, r1, ip
 8010308:	f8a4 9002 	strh.w	r9, [r4, #2]
 801030c:	80e1      	strh	r1, [r4, #6]
 801030e:	4628      	mov	r0, r5
 8010310:	9904      	ldr	r1, [sp, #16]
 8010312:	3901      	subs	r1, #1
 8010314:	9104      	str	r1, [sp, #16]
 8010316:	3c08      	subs	r4, #8
 8010318:	4605      	mov	r5, r0
 801031a:	e7d3      	b.n	80102c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 801031c:	4461      	add	r1, ip
 801031e:	b209      	sxth	r1, r1
 8010320:	4549      	cmp	r1, r9
 8010322:	dcf5      	bgt.n	8010310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8010324:	eba2 0c0c 	sub.w	ip, r2, ip
 8010328:	f8a4 c006 	strh.w	ip, [r4, #6]
 801032c:	e7ef      	b.n	801030e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801032e:	428f      	cmp	r7, r1
 8010330:	dcee      	bgt.n	8010310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8010332:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8010336:	4461      	add	r1, ip
 8010338:	b209      	sxth	r1, r1
 801033a:	4589      	cmp	r9, r1
 801033c:	dbe8      	blt.n	8010310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801033e:	4576      	cmp	r6, lr
 8010340:	fa1f fc8e 	uxth.w	ip, lr
 8010344:	88a1      	ldrh	r1, [r4, #4]
 8010346:	dc07      	bgt.n	8010358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8010348:	eba3 0c0c 	sub.w	ip, r3, ip
 801034c:	eba1 010c 	sub.w	r1, r1, ip
 8010350:	f8a4 8000 	strh.w	r8, [r4]
 8010354:	80a1      	strh	r1, [r4, #4]
 8010356:	e7da      	b.n	801030e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010358:	4461      	add	r1, ip
 801035a:	b209      	sxth	r1, r1
 801035c:	4588      	cmp	r8, r1
 801035e:	dbd7      	blt.n	8010310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8010360:	9905      	ldr	r1, [sp, #20]
 8010362:	eba1 0c0c 	sub.w	ip, r1, ip
 8010366:	f8a4 c004 	strh.w	ip, [r4, #4]
 801036a:	e7d0      	b.n	801030e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801036c:	2002b022 	.word	0x2002b022
 8010370:	2002b020 	.word	0x2002b020
 8010374:	2002b02c 	.word	0x2002b02c
 8010378:	2d00      	cmp	r5, #0
 801037a:	f000 816d 	beq.w	8010658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801037e:	9b06      	ldr	r3, [sp, #24]
 8010380:	445b      	add	r3, fp
 8010382:	461c      	mov	r4, r3
 8010384:	9b02      	ldr	r3, [sp, #8]
 8010386:	3301      	adds	r3, #1
 8010388:	f000 8166 	beq.w	8010658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801038c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8010390:	4629      	mov	r1, r5
 8010392:	9803      	ldr	r0, [sp, #12]
 8010394:	f7ff fd36 	bl	800fe04 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010398:	b120      	cbz	r0, 80103a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 801039a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801039e:	9801      	ldr	r0, [sp, #4]
 80103a0:	f7ff fea8 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80103a4:	9903      	ldr	r1, [sp, #12]
 80103a6:	4628      	mov	r0, r5
 80103a8:	f7ff fcba 	bl	800fd20 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f000 809c 	beq.w	80104ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80103b2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80103b6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80103ba:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80103be:	9309      	str	r3, [sp, #36]	@ 0x24
 80103c0:	fa1f f189 	uxth.w	r1, r9
 80103c4:	eb01 0c03 	add.w	ip, r1, r3
 80103c8:	fa1f fa8c 	uxth.w	sl, ip
 80103cc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80103d0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80103d4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80103d8:	b283      	uxth	r3, r0
 80103da:	eb03 050c 	add.w	r5, r3, ip
 80103de:	b2ad      	uxth	r5, r5
 80103e0:	9505      	str	r5, [sp, #20]
 80103e2:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80103e6:	9504      	str	r5, [sp, #16]
 80103e8:	4548      	cmp	r0, r9
 80103ea:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80103ee:	f340 8099 	ble.w	8010524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 80103f2:	1a5b      	subs	r3, r3, r1
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	4596      	cmp	lr, r2
 80103f8:	fa0f f08a 	sxth.w	r0, sl
 80103fc:	b21e      	sxth	r6, r3
 80103fe:	dd2e      	ble.n	801045e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8010400:	9f02      	ldr	r7, [sp, #8]
 8010402:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8010406:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801040a:	9f04      	ldr	r7, [sp, #16]
 801040c:	1a3f      	subs	r7, r7, r0
 801040e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8010412:	fa1f fe8e 	uxth.w	lr, lr
 8010416:	b292      	uxth	r2, r2
 8010418:	ebae 0102 	sub.w	r1, lr, r2
 801041c:	44a6      	add	lr, r4
 801041e:	4402      	add	r2, r0
 8010420:	b289      	uxth	r1, r1
 8010422:	fa0f fe8e 	sxth.w	lr, lr
 8010426:	b212      	sxth	r2, r2
 8010428:	b20d      	sxth	r5, r1
 801042a:	ebae 0202 	sub.w	r2, lr, r2
 801042e:	436f      	muls	r7, r5
 8010430:	4372      	muls	r2, r6
 8010432:	4297      	cmp	r7, r2
 8010434:	db09      	blt.n	801044a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8010436:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801043a:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801043e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010442:	449c      	add	ip, r3
 8010444:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8010448:	e684      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801044a:	4421      	add	r1, r4
 801044c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8010450:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8010454:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8010458:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801045c:	e67a      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801045e:	9f04      	ldr	r7, [sp, #16]
 8010460:	42b8      	cmp	r0, r7
 8010462:	da27      	bge.n	80104b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8010464:	9902      	ldr	r1, [sp, #8]
 8010466:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801046a:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801046e:	eb05 010e 	add.w	r1, r5, lr
 8010472:	fa1f f881 	uxth.w	r8, r1
 8010476:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801047a:	4411      	add	r1, r2
 801047c:	eba1 0108 	sub.w	r1, r1, r8
 8010480:	b289      	uxth	r1, r1
 8010482:	fa0f f988 	sxth.w	r9, r8
 8010486:	eba2 020e 	sub.w	r2, r2, lr
 801048a:	fa0f f881 	sxth.w	r8, r1
 801048e:	1a3f      	subs	r7, r7, r0
 8010490:	4372      	muls	r2, r6
 8010492:	fb08 f707 	mul.w	r7, r8, r7
 8010496:	42ba      	cmp	r2, r7
 8010498:	dc06      	bgt.n	80104a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 801049a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801049e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80104a2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80104a6:	e7ca      	b.n	801043e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80104a8:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80104ac:	4429      	add	r1, r5
 80104ae:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80104b2:	e64f      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80104b4:	9805      	ldr	r0, [sp, #20]
 80104b6:	ebaa 0000 	sub.w	r0, sl, r0
 80104ba:	b280      	uxth	r0, r0
 80104bc:	2d06      	cmp	r5, #6
 80104be:	fa0f fe80 	sxth.w	lr, r0
 80104c2:	d817      	bhi.n	80104f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 80104c4:	9b04      	ldr	r3, [sp, #16]
 80104c6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80104ca:	1c6b      	adds	r3, r5, #1
 80104cc:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80104d0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80104d4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80104d8:	9b01      	ldr	r3, [sp, #4]
 80104da:	9801      	ldr	r0, [sp, #4]
 80104dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80104e0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80104e4:	805a      	strh	r2, [r3, #2]
 80104e6:	809e      	strh	r6, [r3, #4]
 80104e8:	80d9      	strh	r1, [r3, #6]
 80104ea:	9b02      	ldr	r3, [sp, #8]
 80104ec:	3b01      	subs	r3, #1
 80104ee:	9302      	str	r3, [sp, #8]
 80104f0:	3c08      	subs	r4, #8
 80104f2:	e747      	b.n	8010384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 80104f4:	9a02      	ldr	r2, [sp, #8]
 80104f6:	45b6      	cmp	lr, r6
 80104f8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80104fc:	db0d      	blt.n	801051a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 80104fe:	449c      	add	ip, r3
 8010500:	fa1f fc8c 	uxth.w	ip, ip
 8010504:	445a      	add	r2, fp
 8010506:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801050a:	448c      	add	ip, r1
 801050c:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8010510:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8010514:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8010518:	e61c      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801051a:	445a      	add	r2, fp
 801051c:	4484      	add	ip, r0
 801051e:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8010522:	e78f      	b.n	8010444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8010524:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8010528:	fa1f f18e 	uxth.w	r1, lr
 801052c:	eb01 0806 	add.w	r8, r1, r6
 8010530:	b293      	uxth	r3, r2
 8010532:	fa1f f888 	uxth.w	r8, r8
 8010536:	9306      	str	r3, [sp, #24]
 8010538:	fa0f f388 	sxth.w	r3, r8
 801053c:	9307      	str	r3, [sp, #28]
 801053e:	9f06      	ldr	r7, [sp, #24]
 8010540:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8010544:	443b      	add	r3, r7
 8010546:	b29b      	uxth	r3, r3
 8010548:	4596      	cmp	lr, r2
 801054a:	9308      	str	r3, [sp, #32]
 801054c:	da24      	bge.n	8010598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801054e:	9905      	ldr	r1, [sp, #20]
 8010550:	eba3 0308 	sub.w	r3, r3, r8
 8010554:	ebaa 0401 	sub.w	r4, sl, r1
 8010558:	b2a4      	uxth	r4, r4
 801055a:	b29b      	uxth	r3, r3
 801055c:	b225      	sxth	r5, r4
 801055e:	b219      	sxth	r1, r3
 8010560:	eba2 020e 	sub.w	r2, r2, lr
 8010564:	eba9 0000 	sub.w	r0, r9, r0
 8010568:	436a      	muls	r2, r5
 801056a:	4348      	muls	r0, r1
 801056c:	4282      	cmp	r2, r0
 801056e:	9a02      	ldr	r2, [sp, #8]
 8010570:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010574:	445a      	add	r2, fp
 8010576:	dc06      	bgt.n	8010586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8010578:	9b07      	ldr	r3, [sp, #28]
 801057a:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801057e:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8010582:	44a4      	add	ip, r4
 8010584:	e75e      	b.n	8010444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8010586:	9904      	ldr	r1, [sp, #16]
 8010588:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801058c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8010590:	4433      	add	r3, r6
 8010592:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8010596:	e5dd      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8010598:	9f06      	ldr	r7, [sp, #24]
 801059a:	9b04      	ldr	r3, [sp, #16]
 801059c:	1bc9      	subs	r1, r1, r7
 801059e:	fa0f f78a 	sxth.w	r7, sl
 80105a2:	b289      	uxth	r1, r1
 80105a4:	429f      	cmp	r7, r3
 80105a6:	fa0f fe81 	sxth.w	lr, r1
 80105aa:	dd23      	ble.n	80105f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 80105ac:	9a05      	ldr	r2, [sp, #20]
 80105ae:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80105b2:	9d07      	ldr	r5, [sp, #28]
 80105b4:	ebaa 0202 	sub.w	r2, sl, r2
 80105b8:	b292      	uxth	r2, r2
 80105ba:	eba5 0a03 	sub.w	sl, r5, r3
 80105be:	b214      	sxth	r4, r2
 80105c0:	eba9 0000 	sub.w	r0, r9, r0
 80105c4:	9b02      	ldr	r3, [sp, #8]
 80105c6:	fb0e f000 	mul.w	r0, lr, r0
 80105ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	4550      	cmp	r0, sl
 80105d2:	445b      	add	r3, fp
 80105d4:	db03      	blt.n	80105de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 80105d6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80105da:	4494      	add	ip, r2
 80105dc:	e732      	b.n	8010444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80105de:	9a04      	ldr	r2, [sp, #16]
 80105e0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80105e4:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80105e8:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80105ec:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80105f0:	4431      	add	r1, r6
 80105f2:	e75c      	b.n	80104ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 80105f4:	9b08      	ldr	r3, [sp, #32]
 80105f6:	eba3 0308 	sub.w	r3, r3, r8
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	2d06      	cmp	r5, #6
 80105fe:	b218      	sxth	r0, r3
 8010600:	d813      	bhi.n	801062a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8010602:	9b07      	ldr	r3, [sp, #28]
 8010604:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8010608:	1c6b      	adds	r3, r5, #1
 801060a:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801060e:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8010612:	9b01      	ldr	r3, [sp, #4]
 8010614:	9901      	ldr	r1, [sp, #4]
 8010616:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801061a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801061e:	805a      	strh	r2, [r3, #2]
 8010620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010622:	809a      	strh	r2, [r3, #4]
 8010624:	f8a3 e006 	strh.w	lr, [r3, #6]
 8010628:	e75f      	b.n	80104ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801062a:	9c02      	ldr	r4, [sp, #8]
 801062c:	4570      	cmp	r0, lr
 801062e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010632:	db0d      	blt.n	8010650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8010634:	4431      	add	r1, r6
 8010636:	9b06      	ldr	r3, [sp, #24]
 8010638:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801063c:	b289      	uxth	r1, r1
 801063e:	445c      	add	r4, fp
 8010640:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8010644:	4419      	add	r1, r3
 8010646:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801064a:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801064e:	e581      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8010650:	445c      	add	r4, fp
 8010652:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8010656:	e79b      	b.n	8010590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8010658:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801065c:	1e65      	subs	r5, r4, #1
 801065e:	b2ad      	uxth	r5, r5
 8010660:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8010664:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8010668:	42b5      	cmp	r5, r6
 801066a:	d044      	beq.n	80106f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 801066c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010670:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8010674:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8010678:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801067c:	4282      	cmp	r2, r0
 801067e:	d11f      	bne.n	80106c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8010680:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8010684:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8010688:	459c      	cmp	ip, r3
 801068a:	d119      	bne.n	80106c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 801068c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8010690:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8010694:	19d8      	adds	r0, r3, r7
 8010696:	b200      	sxth	r0, r0
 8010698:	4288      	cmp	r0, r1
 801069a:	d109      	bne.n	80106b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801069c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80106a0:	4413      	add	r3, r2
 80106a2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80106a6:	4629      	mov	r1, r5
 80106a8:	9801      	ldr	r0, [sp, #4]
 80106aa:	f7ff fd23 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80106ae:	e003      	b.n	80106b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80106b0:	4411      	add	r1, r2
 80106b2:	b209      	sxth	r1, r1
 80106b4:	42b9      	cmp	r1, r7
 80106b6:	d0f3      	beq.n	80106a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80106b8:	3d01      	subs	r5, #1
 80106ba:	b2ad      	uxth	r5, r5
 80106bc:	3c08      	subs	r4, #8
 80106be:	e7d3      	b.n	8010668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80106c0:	42b9      	cmp	r1, r7
 80106c2:	d1f9      	bne.n	80106b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80106c4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80106c8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80106cc:	4299      	cmp	r1, r3
 80106ce:	d1f3      	bne.n	80106b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80106d0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80106d4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80106d8:	181f      	adds	r7, r3, r0
 80106da:	b23f      	sxth	r7, r7
 80106dc:	42ba      	cmp	r2, r7
 80106de:	d105      	bne.n	80106ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 80106e0:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80106e4:	440b      	add	r3, r1
 80106e6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80106ea:	e7dc      	b.n	80106a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 80106ec:	440a      	add	r2, r1
 80106ee:	b212      	sxth	r2, r2
 80106f0:	4290      	cmp	r0, r2
 80106f2:	d1e1      	bne.n	80106b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80106f4:	e7f6      	b.n	80106e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 80106f6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80106fa:	2e07      	cmp	r6, #7
 80106fc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8010700:	d812      	bhi.n	8010728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8010702:	1c75      	adds	r5, r6, #1
 8010704:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8010708:	9d01      	ldr	r5, [sp, #4]
 801070a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801070e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8010712:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010716:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801071a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801071e:	442c      	add	r4, r5
 8010720:	8061      	strh	r1, [r4, #2]
 8010722:	80a2      	strh	r2, [r4, #4]
 8010724:	80e3      	strh	r3, [r4, #6]
 8010726:	e57f      	b.n	8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8010728:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801072c:	3e01      	subs	r6, #1
 801072e:	445c      	add	r4, fp
 8010730:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8010734:	f04f 37ff 	mov.w	r7, #4294967295
 8010738:	2500      	movs	r5, #0
 801073a:	9305      	str	r3, [sp, #20]
 801073c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8010740:	9302      	str	r3, [sp, #8]
 8010742:	1e72      	subs	r2, r6, #1
 8010744:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	4691      	mov	r9, r2
 801074c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8010750:	f1b9 3fff 	cmp.w	r9, #4294967295
 8010754:	bf14      	ite	ne
 8010756:	9905      	ldrne	r1, [sp, #20]
 8010758:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	9207      	str	r2, [sp, #28]
 8010760:	bf18      	it	ne
 8010762:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8010766:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801076a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801076e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8010772:	9306      	str	r3, [sp, #24]
 8010774:	fb18 f801 	smulbb	r8, r8, r1
 8010778:	6859      	ldr	r1, [r3, #4]
 801077a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801077e:	4671      	mov	r1, lr
 8010780:	a80c      	add	r0, sp, #48	@ 0x30
 8010782:	f7ff fb65 	bl	800fe50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010786:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801078a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801078e:	9b04      	ldr	r3, [sp, #16]
 8010790:	9a02      	ldr	r2, [sp, #8]
 8010792:	fb10 f001 	smulbb	r0, r0, r1
 8010796:	fb02 8803 	mla	r8, r2, r3, r8
 801079a:	eba0 0108 	sub.w	r1, r0, r8
 801079e:	f04f 0c08 	mov.w	ip, #8
 80107a2:	fb90 f0fc 	sdiv	r0, r0, ip
 80107a6:	4288      	cmp	r0, r1
 80107a8:	dc20      	bgt.n	80107ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 80107aa:	4551      	cmp	r1, sl
 80107ac:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80107b0:	da03      	bge.n	80107ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 80107b2:	b1d9      	cbz	r1, 80107ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 80107b4:	468a      	mov	sl, r1
 80107b6:	464f      	mov	r7, r9
 80107b8:	4635      	mov	r5, r6
 80107ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80107be:	f119 0f02 	cmn.w	r9, #2
 80107c2:	d1c5      	bne.n	8010750 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80107c4:	4616      	mov	r6, r2
 80107c6:	3201      	adds	r2, #1
 80107c8:	f1a4 0408 	sub.w	r4, r4, #8
 80107cc:	d1b6      	bne.n	801073c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 80107ce:	9b01      	ldr	r3, [sp, #4]
 80107d0:	b2ac      	uxth	r4, r5
 80107d2:	00ed      	lsls	r5, r5, #3
 80107d4:	1958      	adds	r0, r3, r5
 80107d6:	1c7b      	adds	r3, r7, #1
 80107d8:	d10b      	bne.n	80107f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 80107da:	4601      	mov	r1, r0
 80107dc:	9803      	ldr	r0, [sp, #12]
 80107de:	f7ff fb37 	bl	800fe50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80107e2:	4621      	mov	r1, r4
 80107e4:	9801      	ldr	r0, [sp, #4]
 80107e6:	f7ff fc85 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80107ea:	e4b3      	b.n	8010154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80107ec:	464f      	mov	r7, r9
 80107ee:	4635      	mov	r5, r6
 80107f0:	e7ed      	b.n	80107ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 80107f2:	9b01      	ldr	r3, [sp, #4]
 80107f4:	00ff      	lsls	r7, r7, #3
 80107f6:	19d9      	adds	r1, r3, r7
 80107f8:	f7ff fb2a 	bl	800fe50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80107fc:	9b03      	ldr	r3, [sp, #12]
 80107fe:	cb03      	ldmia	r3!, {r0, r1}
 8010800:	445f      	add	r7, fp
 8010802:	445d      	add	r5, fp
 8010804:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8010808:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801080c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8010810:	9b03      	ldr	r3, [sp, #12]
 8010812:	6869      	ldr	r1, [r5, #4]
 8010814:	c303      	stmia	r3!, {r0, r1}
 8010816:	e7e4      	b.n	80107e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

08010818 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8010818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8010820:	b0a1      	sub	sp, #132	@ 0x84
 8010822:	4604      	mov	r4, r0
 8010824:	4630      	mov	r0, r6
 8010826:	f7fc fcae 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 801082a:	4605      	mov	r5, r0
 801082c:	b948      	cbnz	r0, 8010842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801082e:	6823      	ldr	r3, [r4, #0]
 8010830:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010836:	4620      	mov	r0, r4
 8010838:	4798      	blx	r3
 801083a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801083e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8010842:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8010846:	2b00      	cmp	r3, #0
 8010848:	d149      	bne.n	80108de <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801084a:	4bb1      	ldr	r3, [pc, #708]	@ (8010b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8010852:	1ebb      	subs	r3, r7, #2
 8010854:	425f      	negs	r7, r3
 8010856:	415f      	adcs	r7, r3
 8010858:	4bae      	ldr	r3, [pc, #696]	@ (8010b14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d040      	beq.n	80108e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8010860:	4dad      	ldr	r5, [pc, #692]	@ (8010b18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8010862:	4628      	mov	r0, r5
 8010864:	f7fc fc8f 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010868:	4606      	mov	r6, r0
 801086a:	2800      	cmp	r0, #0
 801086c:	d139      	bne.n	80108e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801086e:	4628      	mov	r0, r5
 8010870:	f7ff f98c 	bl	800fb8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	6829      	ldr	r1, [r5, #0]
 8010878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801087a:	686a      	ldr	r2, [r5, #4]
 801087c:	4620      	mov	r0, r4
 801087e:	4798      	blx	r3
 8010880:	802e      	strh	r6, [r5, #0]
 8010882:	806e      	strh	r6, [r5, #2]
 8010884:	80ae      	strh	r6, [r5, #4]
 8010886:	80ee      	strh	r6, [r5, #6]
 8010888:	af0f      	add	r7, sp, #60	@ 0x3c
 801088a:	4ea4      	ldr	r6, [pc, #656]	@ (8010b1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801088c:	4638      	mov	r0, r7
 801088e:	f7ff fbd9 	bl	8010044 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010892:	8835      	ldrh	r5, [r6, #0]
 8010894:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8010898:	462b      	mov	r3, r5
 801089a:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801089e:	4563      	cmp	r3, ip
 80108a0:	d224      	bcs.n	80108ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 80108a2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80108a6:	2907      	cmp	r1, #7
 80108a8:	d816      	bhi.n	80108d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80108aa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80108ae:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80108b2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80108b6:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 80108ba:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 80108be:	1c4a      	adds	r2, r1, #1
 80108c0:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 80108c4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 80108c8:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 80108cc:	f8a2 a002 	strh.w	sl, [r2, #2]
 80108d0:	f8a2 8004 	strh.w	r8, [r2, #4]
 80108d4:	f8a2 e006 	strh.w	lr, [r2, #6]
 80108d8:	3301      	adds	r3, #1
 80108da:	b29b      	uxth	r3, r3
 80108dc:	e7df      	b.n	801089e <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 80108de:	2701      	movs	r7, #1
 80108e0:	e7ba      	b.n	8010858 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 80108e2:	2f00      	cmp	r7, #0
 80108e4:	d1d0      	bne.n	8010888 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 80108e6:	b021      	add	sp, #132	@ 0x84
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80108f0:	42ab      	cmp	r3, r5
 80108f2:	d90c      	bls.n	801090e <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 80108f4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80108f8:	6822      	ldr	r2, [r4, #0]
 80108fa:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80108fe:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8010900:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8010904:	4620      	mov	r0, r4
 8010906:	3501      	adds	r5, #1
 8010908:	47b8      	blx	r7
 801090a:	b2ad      	uxth	r5, r5
 801090c:	e7ee      	b.n	80108ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801090e:	4d80      	ldr	r5, [pc, #512]	@ (8010b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 8010910:	6828      	ldr	r0, [r5, #0]
 8010912:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8010916:	2b01      	cmp	r3, #1
 8010918:	f040 813b 	bne.w	8010b92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37a>
 801091c:	4a80      	ldr	r2, [pc, #512]	@ (8010b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 801091e:	8833      	ldrh	r3, [r6, #0]
 8010920:	7812      	ldrb	r2, [r2, #0]
 8010922:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8010926:	2a01      	cmp	r2, #1
 8010928:	d014      	beq.n	8010954 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801092a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801092e:	32ae      	adds	r2, #174	@ 0xae
 8010930:	f04f 0900 	mov.w	r9, #0
 8010934:	4283      	cmp	r3, r0
 8010936:	f102 0208 	add.w	r2, r2, #8
 801093a:	f280 8082 	bge.w	8010a42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 801093e:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8010942:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8010946:	4439      	add	r1, r7
 8010948:	b209      	sxth	r1, r1
 801094a:	4589      	cmp	r9, r1
 801094c:	bfb8      	it	lt
 801094e:	4689      	movlt	r9, r1
 8010950:	3301      	adds	r3, #1
 8010952:	e7ef      	b.n	8010934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8010954:	4f73      	ldr	r7, [pc, #460]	@ (8010b24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8010956:	883a      	ldrh	r2, [r7, #0]
 8010958:	4693      	mov	fp, r2
 801095a:	4283      	cmp	r3, r0
 801095c:	da08      	bge.n	8010970 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801095e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8010962:	3301      	adds	r3, #1
 8010964:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8010968:	458b      	cmp	fp, r1
 801096a:	bfa8      	it	ge
 801096c:	468b      	movge	fp, r1
 801096e:	e7f4      	b.n	801095a <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8010970:	2300      	movs	r3, #0
 8010972:	2a0f      	cmp	r2, #15
 8010974:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8010b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8010978:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801097c:	bf8c      	ite	hi
 801097e:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8010982:	f04f 0801 	movls.w	r8, #1
 8010986:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801098a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801098e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010992:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8010996:	6828      	ldr	r0, [r5, #0]
 8010998:	455b      	cmp	r3, fp
 801099a:	f340 80c7 	ble.w	8010b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801099e:	6803      	ldr	r3, [r0, #0]
 80109a0:	f8b7 a000 	ldrh.w	sl, [r7]
 80109a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80109a8:	4798      	blx	r3
 80109aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80109ae:	682b      	ldr	r3, [r5, #0]
 80109b0:	ebaa 0000 	sub.w	r0, sl, r0
 80109b4:	b280      	uxth	r0, r0
 80109b6:	ebac 0e08 	sub.w	lr, ip, r8
 80109ba:	4570      	cmp	r0, lr
 80109bc:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 80109c0:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 80109c4:	dd05      	ble.n	80109d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 80109c6:	4558      	cmp	r0, fp
 80109c8:	dd03      	ble.n	80109d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 80109ca:	b901      	cbnz	r1, 80109ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 80109cc:	b392      	cbz	r2, 8010a34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21c>
 80109ce:	4658      	mov	r0, fp
 80109d0:	e006      	b.n	80109e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1c8>
 80109d2:	2900      	cmp	r1, #0
 80109d4:	d1fb      	bne.n	80109ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 80109d6:	2a00      	cmp	r2, #0
 80109d8:	d1f9      	bne.n	80109ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 80109da:	4558      	cmp	r0, fp
 80109dc:	bfb8      	it	lt
 80109de:	4658      	movlt	r0, fp
 80109e0:	f9b9 3000 	ldrsh.w	r3, [r9]
 80109e4:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 80109e8:	2200      	movs	r2, #0
 80109ea:	ebac 0000 	sub.w	r0, ip, r0
 80109ee:	f8b6 a000 	ldrh.w	sl, [r6]
 80109f2:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80109f6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80109fa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80109fe:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8010a02:	4553      	cmp	r3, sl
 8010a04:	ddc5      	ble.n	8010992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8010a06:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8010a0a:	ab0d      	add	r3, sp, #52	@ 0x34
 8010a0c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010a10:	6851      	ldr	r1, [r2, #4]
 8010a12:	c303      	stmia	r3!, {r0, r1}
 8010a14:	a80d      	add	r0, sp, #52	@ 0x34
 8010a16:	a90b      	add	r1, sp, #44	@ 0x2c
 8010a18:	f7fc fb72 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8010a1c:	a80d      	add	r0, sp, #52	@ 0x34
 8010a1e:	f7fc fbb2 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a22:	b920      	cbnz	r0, 8010a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x216>
 8010a24:	6823      	ldr	r3, [r4, #0]
 8010a26:	a90d      	add	r1, sp, #52	@ 0x34
 8010a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	4798      	blx	r3
 8010a2e:	f10a 0a01 	add.w	sl, sl, #1
 8010a32:	e7e4      	b.n	80109fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e6>
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	2101      	movs	r1, #1
 8010a38:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	4790      	blx	r2
 8010a40:	e7a7      	b.n	8010992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8010a42:	4b39      	ldr	r3, [pc, #228]	@ (8010b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8010a44:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8010b24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>
 8010a48:	881f      	ldrh	r7, [r3, #0]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8010a50:	2f0f      	cmp	r7, #15
 8010a52:	bf8c      	ite	hi
 8010a54:	08ff      	lsrhi	r7, r7, #3
 8010a56:	2701      	movls	r7, #1
 8010a58:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8010a5c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8010a60:	6828      	ldr	r0, [r5, #0]
 8010a62:	4413      	add	r3, r2
 8010a64:	b21b      	sxth	r3, r3
 8010a66:	454b      	cmp	r3, r9
 8010a68:	da60      	bge.n	8010b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8010a6a:	6803      	ldr	r3, [r0, #0]
 8010a6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010a70:	4798      	blx	r3
 8010a72:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8010a76:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8010a7a:	682a      	ldr	r2, [r5, #0]
 8010a7c:	4473      	add	r3, lr
 8010a7e:	b21b      	sxth	r3, r3
 8010a80:	eb03 0e07 	add.w	lr, r3, r7
 8010a84:	4570      	cmp	r0, lr
 8010a86:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8010a8a:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8010a8e:	da0d      	bge.n	8010aac <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 8010a90:	4548      	cmp	r0, r9
 8010a92:	da0b      	bge.n	8010aac <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 8010a94:	f1bc 0f00 	cmp.w	ip, #0
 8010a98:	d138      	bne.n	8010b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 8010a9a:	2900      	cmp	r1, #0
 8010a9c:	d136      	bne.n	8010b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 8010a9e:	6813      	ldr	r3, [r2, #0]
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	4798      	blx	r3
 8010aaa:	e7d5      	b.n	8010a58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8010aac:	f1bc 0f00 	cmp.w	ip, #0
 8010ab0:	d12c      	bne.n	8010b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 8010ab2:	bb59      	cbnz	r1, 8010b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 8010ab4:	4548      	cmp	r0, r9
 8010ab6:	bfa8      	it	ge
 8010ab8:	4648      	movge	r0, r9
 8010aba:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010abe:	f8b6 a000 	ldrh.w	sl, [r6]
 8010ac2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	1ac0      	subs	r0, r0, r3
 8010aca:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8010ace:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010ad2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010ad6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8010ada:	4553      	cmp	r3, sl
 8010adc:	ddbc      	ble.n	8010a58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8010ade:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8010ae2:	ab0d      	add	r3, sp, #52	@ 0x34
 8010ae4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010ae8:	6851      	ldr	r1, [r2, #4]
 8010aea:	c303      	stmia	r3!, {r0, r1}
 8010aec:	a80d      	add	r0, sp, #52	@ 0x34
 8010aee:	a90b      	add	r1, sp, #44	@ 0x2c
 8010af0:	f7fc fb06 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8010af4:	a80d      	add	r0, sp, #52	@ 0x34
 8010af6:	f7fc fb46 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010afa:	b920      	cbnz	r0, 8010b06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ee>
 8010afc:	6823      	ldr	r3, [r4, #0]
 8010afe:	a90d      	add	r1, sp, #52	@ 0x34
 8010b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010b02:	4620      	mov	r0, r4
 8010b04:	4798      	blx	r3
 8010b06:	f10a 0a01 	add.w	sl, sl, #1
 8010b0a:	e7e4      	b.n	8010ad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2be>
 8010b0c:	4648      	mov	r0, r9
 8010b0e:	e7d4      	b.n	8010aba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a2>
 8010b10:	2002b02c 	.word	0x2002b02c
 8010b14:	2002b064 	.word	0x2002b064
 8010b18:	2002b070 	.word	0x2002b070
 8010b1c:	20000018 	.word	0x20000018
 8010b20:	2002b024 	.word	0x2002b024
 8010b24:	2002b020 	.word	0x2002b020
 8010b28:	2002b022 	.word	0x2002b022
 8010b2c:	6828      	ldr	r0, [r5, #0]
 8010b2e:	6803      	ldr	r3, [r0, #0]
 8010b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b32:	4798      	blx	r3
 8010b34:	4ba5      	ldr	r3, [pc, #660]	@ (8010dcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f43f aed4 	beq.w	80108e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8010b44:	4ba2      	ldr	r3, [pc, #648]	@ (8010dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8010b46:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	a80f      	add	r0, sp, #60	@ 0x3c
 8010b4e:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8010b52:	42b3      	cmp	r3, r6
 8010b54:	f4bf aec7 	bcs.w	80108e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8010b58:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8010b5c:	2907      	cmp	r1, #7
 8010b5e:	d815      	bhi.n	8010b8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x374>
 8010b60:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8010b64:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8010b68:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8010b6c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8010b70:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8010b74:	1c4a      	adds	r2, r1, #1
 8010b76:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8010b7a:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8010b7e:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8010b82:	f8a2 e002 	strh.w	lr, [r2, #2]
 8010b86:	f8a2 c004 	strh.w	ip, [r2, #4]
 8010b8a:	80d7      	strh	r7, [r2, #6]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	e7df      	b.n	8010b52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	f040 80d1 	bne.w	8010d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 8010b98:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8010b9c:	9308      	str	r3, [sp, #32]
 8010b9e:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8010ba2:	9307      	str	r3, [sp, #28]
 8010ba4:	6803      	ldr	r3, [r0, #0]
 8010ba6:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8010baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010bae:	4798      	blx	r3
 8010bb0:	4b88      	ldr	r3, [pc, #544]	@ (8010dd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	9302      	str	r3, [sp, #8]
 8010bb6:	4b88      	ldr	r3, [pc, #544]	@ (8010dd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8010bb8:	881e      	ldrh	r6, [r3, #0]
 8010bba:	4b88      	ldr	r3, [pc, #544]	@ (8010ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	bf1c      	itt	ne
 8010bc6:	9b02      	ldrne	r3, [sp, #8]
 8010bc8:	9602      	strne	r6, [sp, #8]
 8010bca:	b2bf      	uxth	r7, r7
 8010bcc:	fa0f f887 	sxth.w	r8, r7
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	f04f 0000 	mov.w	r0, #0
 8010bd6:	bf18      	it	ne
 8010bd8:	461e      	movne	r6, r3
 8010bda:	f7fa fce9 	bl	800b5b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010bde:	fb96 fbfb 	sdiv	fp, r6, fp
 8010be2:	fb0b f808 	mul.w	r8, fp, r8
 8010be6:	45c2      	cmp	sl, r8
 8010be8:	da0c      	bge.n	8010c04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8010bea:	6828      	ldr	r0, [r5, #0]
 8010bec:	6803      	ldr	r3, [r0, #0]
 8010bee:	210a      	movs	r1, #10
 8010bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010bf4:	4798      	blx	r3
 8010bf6:	6828      	ldr	r0, [r5, #0]
 8010bf8:	6803      	ldr	r3, [r0, #0]
 8010bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010bfe:	4798      	blx	r3
 8010c00:	4682      	mov	sl, r0
 8010c02:	e7f0      	b.n	8010be6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8010c04:	2000      	movs	r0, #0
 8010c06:	f7fa fcef 	bl	800b5e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010c0a:	fa1f f38b 	uxth.w	r3, fp
 8010c0e:	fb17 f703 	smulbb	r7, r7, r3
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	b2bb      	uxth	r3, r7
 8010c16:	9305      	str	r3, [sp, #20]
 8010c18:	f04f 0800 	mov.w	r8, #0
 8010c1c:	0973      	lsrs	r3, r6, #5
 8010c1e:	4f70      	ldr	r7, [pc, #448]	@ (8010de0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8010c20:	9306      	str	r3, [sp, #24]
 8010c22:	4645      	mov	r5, r8
 8010c24:	42b5      	cmp	r5, r6
 8010c26:	d085      	beq.n	8010b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8010c28:	6838      	ldr	r0, [r7, #0]
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010c30:	4798      	blx	r3
 8010c32:	4582      	cmp	sl, r0
 8010c34:	4681      	mov	r9, r0
 8010c36:	d907      	bls.n	8010c48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8010c38:	f1b8 0f00 	cmp.w	r8, #0
 8010c3c:	d007      	beq.n	8010c4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8010c3e:	6838      	ldr	r0, [r7, #0]
 8010c40:	6803      	ldr	r3, [r0, #0]
 8010c42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010c46:	e774      	b.n	8010b32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8010c48:	f1b8 0f00 	cmp.w	r8, #0
 8010c4c:	d003      	beq.n	8010c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8010c4e:	454d      	cmp	r5, r9
 8010c50:	d3f5      	bcc.n	8010c3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8010c52:	f04f 0801 	mov.w	r8, #1
 8010c56:	9a04      	ldr	r2, [sp, #16]
 8010c58:	fb95 f3fb 	sdiv	r3, r5, fp
 8010c5c:	9303      	str	r3, [sp, #12]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	fb13 f302 	smulbb	r3, r3, r2
 8010c64:	b299      	uxth	r1, r3
 8010c66:	f1b8 0f00 	cmp.w	r8, #0
 8010c6a:	d04e      	beq.n	8010d0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 8010c6c:	eb09 030b 	add.w	r3, r9, fp
 8010c70:	42b3      	cmp	r3, r6
 8010c72:	bfa8      	it	ge
 8010c74:	4633      	movge	r3, r6
 8010c76:	9807      	ldr	r0, [sp, #28]
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	428b      	cmp	r3, r1
 8010c7c:	bf94      	ite	ls
 8010c7e:	ebc5 0203 	rsbls	r2, r5, r3
 8010c82:	ebc5 0201 	rsbhi	r2, r5, r1
 8010c86:	4282      	cmp	r2, r0
 8010c88:	bfa8      	it	ge
 8010c8a:	4602      	movge	r2, r0
 8010c8c:	9808      	ldr	r0, [sp, #32]
 8010c8e:	fa1f fa82 	uxth.w	sl, r2
 8010c92:	4582      	cmp	sl, r0
 8010c94:	d205      	bcs.n	8010ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8010c96:	fa15 f082 	uxtah	r0, r5, r2
 8010c9a:	4286      	cmp	r6, r0
 8010c9c:	d001      	beq.n	8010ca2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8010c9e:	4299      	cmp	r1, r3
 8010ca0:	d240      	bcs.n	8010d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 8010ca2:	2001      	movs	r0, #1
 8010ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ca6:	f7fa fc83 	bl	800b5b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010caa:	6838      	ldr	r0, [r7, #0]
 8010cac:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8010cb0:	6803      	ldr	r3, [r0, #0]
 8010cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010cb6:	4798      	blx	r3
 8010cb8:	4b48      	ldr	r3, [pc, #288]	@ (8010ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8010cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	b212      	sxth	r2, r2
 8010cc6:	f04f 0000 	mov.w	r0, #0
 8010cca:	d122      	bne.n	8010d12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 8010ccc:	1b73      	subs	r3, r6, r5
 8010cce:	eba3 030a 	sub.w	r3, r3, sl
 8010cd2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010cd6:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8010cda:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8010cde:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	a90d      	add	r1, sp, #52	@ 0x34
 8010ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4798      	blx	r3
 8010cec:	6838      	ldr	r0, [r7, #0]
 8010cee:	9b03      	ldr	r3, [sp, #12]
 8010cf0:	4259      	negs	r1, r3
 8010cf2:	6803      	ldr	r3, [r0, #0]
 8010cf4:	b209      	sxth	r1, r1
 8010cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010cfa:	4798      	blx	r3
 8010cfc:	4455      	add	r5, sl
 8010cfe:	2001      	movs	r0, #1
 8010d00:	b2ad      	uxth	r5, r5
 8010d02:	f7fa fc71 	bl	800b5e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010d06:	46ca      	mov	sl, r9
 8010d08:	e78c      	b.n	8010c24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8010d0a:	9b05      	ldr	r3, [sp, #20]
 8010d0c:	eba9 0303 	sub.w	r3, r9, r3
 8010d10:	e7b1      	b.n	8010c76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8010d12:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8010d16:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8010d1a:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8010d1e:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8010d22:	e7de      	b.n	8010ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 8010d24:	6838      	ldr	r0, [r7, #0]
 8010d26:	6803      	ldr	r3, [r0, #0]
 8010d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d2a:	4798      	blx	r3
 8010d2c:	6838      	ldr	r0, [r7, #0]
 8010d2e:	9906      	ldr	r1, [sp, #24]
 8010d30:	6803      	ldr	r3, [r0, #0]
 8010d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d36:	4798      	blx	r3
 8010d38:	e7e5      	b.n	8010d06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 8010d3a:	2b03      	cmp	r3, #3
 8010d3c:	f040 8130 	bne.w	8010fa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 8010d40:	4b26      	ldr	r3, [pc, #152]	@ (8010ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8010d42:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8010d4e:	f000 8093 	beq.w	8010e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 8010d52:	8832      	ldrh	r2, [r6, #0]
 8010d54:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8010d58:	3201      	adds	r2, #1
 8010d5a:	b292      	uxth	r2, r2
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	f43f aee9 	beq.w	8010b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8010d62:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8010d66:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8010d6a:	441d      	add	r5, r3
 8010d6c:	b22d      	sxth	r5, r5
 8010d6e:	4694      	mov	ip, r2
 8010d70:	f04f 0800 	mov.w	r8, #0
 8010d74:	fa1f f38c 	uxth.w	r3, ip
 8010d78:	4299      	cmp	r1, r3
 8010d7a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8010d7e:	f240 80ba 	bls.w	8010ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 8010d82:	4427      	add	r7, r4
 8010d84:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8010d88:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8010d8c:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8010d90:	4283      	cmp	r3, r0
 8010d92:	f340 809c 	ble.w	8010ece <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 8010d96:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8010d9a:	4405      	add	r5, r0
 8010d9c:	b22d      	sxth	r5, r5
 8010d9e:	429d      	cmp	r5, r3
 8010da0:	bfa8      	it	ge
 8010da2:	461d      	movge	r5, r3
 8010da4:	46e0      	mov	r8, ip
 8010da6:	f10c 0c01 	add.w	ip, ip, #1
 8010daa:	e7e3      	b.n	8010d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 8010dac:	d10a      	bne.n	8010dc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 8010dae:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8010db2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8010db6:	4562      	cmp	r2, ip
 8010db8:	bfb8      	it	lt
 8010dba:	4662      	movlt	r2, ip
 8010dbc:	4288      	cmp	r0, r1
 8010dbe:	bfb8      	it	lt
 8010dc0:	4698      	movlt	r8, r3
 8010dc2:	e082      	b.n	8010eca <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 8010dc4:	428a      	cmp	r2, r1
 8010dc6:	bfb8      	it	lt
 8010dc8:	460a      	movlt	r2, r1
 8010dca:	e07e      	b.n	8010eca <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 8010dcc:	2002b02a 	.word	0x2002b02a
 8010dd0:	20000018 	.word	0x20000018
 8010dd4:	2002b022 	.word	0x2002b022
 8010dd8:	2002b020 	.word	0x2002b020
 8010ddc:	2002b024 	.word	0x2002b024
 8010de0:	2002b02c 	.word	0x2002b02c
 8010de4:	19e1      	adds	r1, r4, r7
 8010de6:	ab0d      	add	r3, sp, #52	@ 0x34
 8010de8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8010dec:	6849      	ldr	r1, [r1, #4]
 8010dee:	c303      	stmia	r3!, {r0, r1}
 8010df0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8010df4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8010df8:	454b      	cmp	r3, r9
 8010dfa:	bfb8      	it	lt
 8010dfc:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8010e00:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8010e04:	440b      	add	r3, r1
 8010e06:	1a9b      	subs	r3, r3, r2
 8010e08:	a80d      	add	r0, sp, #52	@ 0x34
 8010e0a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8010e0e:	f7fe fed7 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010e12:	a80d      	add	r0, sp, #52	@ 0x34
 8010e14:	f7fc f9b7 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e18:	bb70      	cbnz	r0, 8010e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 8010e1a:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8010e1e:	6828      	ldr	r0, [r5, #0]
 8010e20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010e24:	f8d0 e000 	ldr.w	lr, [r0]
 8010e28:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8010e2c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8010e30:	45cc      	cmp	ip, r9
 8010e32:	bfd4      	ite	le
 8010e34:	fa1f fc8c 	uxthle.w	ip, ip
 8010e38:	fa1f fc89 	uxthgt.w	ip, r9
 8010e3c:	f8cd c000 	str.w	ip, [sp]
 8010e40:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8010e44:	47d8      	blx	fp
 8010e46:	4683      	mov	fp, r0
 8010e48:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010e4c:	a80d      	add	r0, sp, #52	@ 0x34
 8010e4e:	f7fe fe9d 	bl	800fb8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4427      	add	r7, r4
 8010e56:	4620      	mov	r0, r4
 8010e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e5a:	a90d      	add	r1, sp, #52	@ 0x34
 8010e5c:	4798      	blx	r3
 8010e5e:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8010e62:	eba0 000b 	sub.w	r0, r0, fp
 8010e66:	b200      	sxth	r0, r0
 8010e68:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8010e6c:	b920      	cbnz	r0, 8010e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 8010e6e:	fa1f f188 	uxth.w	r1, r8
 8010e72:	4650      	mov	r0, sl
 8010e74:	f7ff f93e 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010e78:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8010e7c:	f1bb 0f00 	cmp.w	fp, #0
 8010e80:	f43f ae58 	beq.w	8010b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8010e84:	8833      	ldrh	r3, [r6, #0]
 8010e86:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	f04f 0800 	mov.w	r8, #0
 8010e92:	b299      	uxth	r1, r3
 8010e94:	458b      	cmp	fp, r1
 8010e96:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8010e9a:	d9a3      	bls.n	8010de4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8010e9c:	4427      	add	r7, r4
 8010e9e:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8010ea2:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8010ea6:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8010eaa:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8010eae:	4408      	add	r0, r1
 8010eb0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8010eb4:	4461      	add	r1, ip
 8010eb6:	b200      	sxth	r0, r0
 8010eb8:	b209      	sxth	r1, r1
 8010eba:	4288      	cmp	r0, r1
 8010ebc:	f6bf af76 	bge.w	8010dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 8010ec0:	4584      	cmp	ip, r0
 8010ec2:	4662      	mov	r2, ip
 8010ec4:	4698      	mov	r8, r3
 8010ec6:	bfb8      	it	lt
 8010ec8:	4602      	movlt	r2, r0
 8010eca:	3301      	adds	r3, #1
 8010ecc:	e7e1      	b.n	8010e92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 8010ece:	d10e      	bne.n	8010eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 8010ed0:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8010ed4:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8010ed8:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8010edc:	4473      	add	r3, lr
 8010ede:	b21b      	sxth	r3, r3
 8010ee0:	429d      	cmp	r5, r3
 8010ee2:	bfa8      	it	ge
 8010ee4:	461d      	movge	r5, r3
 8010ee6:	4287      	cmp	r7, r0
 8010ee8:	bfb8      	it	lt
 8010eea:	46e0      	movlt	r8, ip
 8010eec:	e75b      	b.n	8010da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 8010eee:	4285      	cmp	r5, r0
 8010ef0:	bfa8      	it	ge
 8010ef2:	4605      	movge	r5, r0
 8010ef4:	e757      	b.n	8010da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 8010ef6:	eb0a 0007 	add.w	r0, sl, r7
 8010efa:	4427      	add	r7, r4
 8010efc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010f00:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8010f04:	45cb      	cmp	fp, r9
 8010f06:	bfbe      	ittt	lt
 8010f08:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8010f0c:	445d      	addlt	r5, fp
 8010f0e:	b22d      	sxthlt	r5, r5
 8010f10:	f7fc f939 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	f47f af1f 	bne.w	8010d5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 8010f1e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8010f22:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010f26:	482b      	ldr	r0, [pc, #172]	@ (8010fd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 8010f28:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8010f2c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8010f30:	6800      	ldr	r0, [r0, #0]
 8010f32:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 8010f36:	1aad      	subs	r5, r5, r2
 8010f38:	454d      	cmp	r5, r9
 8010f3a:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8010f3e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8010f42:	bfa8      	it	ge
 8010f44:	464d      	movge	r5, r9
 8010f46:	f8d0 c000 	ldr.w	ip, [r0]
 8010f4a:	b2ad      	uxth	r5, r5
 8010f4c:	fa1f fb8b 	uxth.w	fp, fp
 8010f50:	455d      	cmp	r5, fp
 8010f52:	bf94      	ite	ls
 8010f54:	9500      	strls	r5, [sp, #0]
 8010f56:	f8cd b000 	strhi.w	fp, [sp]
 8010f5a:	b292      	uxth	r2, r2
 8010f5c:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	b289      	uxth	r1, r1
 8010f64:	47a8      	blx	r5
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010f6e:	a90d      	add	r1, sp, #52	@ 0x34
 8010f70:	4620      	mov	r0, r4
 8010f72:	4798      	blx	r3
 8010f74:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8010f78:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8010f7c:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8010f80:	1a5b      	subs	r3, r3, r1
 8010f82:	440a      	add	r2, r1
 8010f84:	b21b      	sxth	r3, r3
 8010f86:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8010f8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f47f aedf 	bne.w	8010d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 8010f94:	fa1f f188 	uxth.w	r1, r8
 8010f98:	4650      	mov	r0, sl
 8010f9a:	f7ff f8ab 	bl	80100f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010f9e:	e6d8      	b.n	8010d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 8010fa0:	8835      	ldrh	r5, [r6, #0]
 8010fa2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8010fa6:	42ab      	cmp	r3, r5
 8010fa8:	f67f adc4 	bls.w	8010b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8010fac:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8010fb0:	ab0d      	add	r3, sp, #52	@ 0x34
 8010fb2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010fb6:	6851      	ldr	r1, [r2, #4]
 8010fb8:	c303      	stmia	r3!, {r0, r1}
 8010fba:	a80d      	add	r0, sp, #52	@ 0x34
 8010fbc:	f7fc f8e3 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010fc0:	b920      	cbnz	r0, 8010fcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	a90d      	add	r1, sp, #52	@ 0x34
 8010fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fc8:	4620      	mov	r0, r4
 8010fca:	4798      	blx	r3
 8010fcc:	3501      	adds	r5, #1
 8010fce:	b2ad      	uxth	r5, r5
 8010fd0:	e7e7      	b.n	8010fa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 8010fd2:	bf00      	nop
 8010fd4:	2002b02c 	.word	0x2002b02c

08010fd8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8010fd8:	4b03      	ldr	r3, [pc, #12]	@ (8010fe8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	801a      	strh	r2, [r3, #0]
 8010fde:	805a      	strh	r2, [r3, #2]
 8010fe0:	809a      	strh	r2, [r3, #4]
 8010fe2:	80da      	strh	r2, [r3, #6]
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	2002b070 	.word	0x2002b070

08010fec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8010fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	b09d      	sub	sp, #116	@ 0x74
 8010ff4:	a803      	add	r0, sp, #12
 8010ff6:	4614      	mov	r4, r2
 8010ff8:	468a      	mov	sl, r1
 8010ffa:	461d      	mov	r5, r3
 8010ffc:	f000 fd72 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 8011000:	6833      	ldr	r3, [r6, #0]
 8011002:	4630      	mov	r0, r6
 8011004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011006:	4798      	blx	r3
 8011008:	6833      	ldr	r3, [r6, #0]
 801100a:	4607      	mov	r7, r0
 801100c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801100e:	4630      	mov	r0, r6
 8011010:	4798      	blx	r3
 8011012:	462a      	mov	r2, r5
 8011014:	9000      	str	r0, [sp, #0]
 8011016:	4621      	mov	r1, r4
 8011018:	463b      	mov	r3, r7
 801101a:	a803      	add	r0, sp, #12
 801101c:	f000 fdb5 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011020:	2500      	movs	r5, #0
 8011022:	462c      	mov	r4, r5
 8011024:	46a9      	mov	r9, r5
 8011026:	46a8      	mov	r8, r5
 8011028:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801102c:	2300      	movs	r3, #0
 801102e:	9302      	str	r3, [sp, #8]
 8011030:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011034:	429c      	cmp	r4, r3
 8011036:	d002      	beq.n	801103e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011038:	455c      	cmp	r4, fp
 801103a:	bf18      	it	ne
 801103c:	4625      	movne	r5, r4
 801103e:	ab02      	add	r3, sp, #8
 8011040:	4632      	mov	r2, r6
 8011042:	4651      	mov	r1, sl
 8011044:	a803      	add	r0, sp, #12
 8011046:	f001 f8bb 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801104a:	4604      	mov	r4, r0
 801104c:	b108      	cbz	r0, 8011052 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801104e:	280a      	cmp	r0, #10
 8011050:	d10a      	bne.n	8011068 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8011052:	45c1      	cmp	r9, r8
 8011054:	bf38      	it	cc
 8011056:	46c1      	movcc	r9, r8
 8011058:	f04f 0800 	mov.w	r8, #0
 801105c:	2c00      	cmp	r4, #0
 801105e:	d1e5      	bne.n	801102c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8011060:	4648      	mov	r0, r9
 8011062:	b01d      	add	sp, #116	@ 0x74
 8011064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011068:	9a02      	ldr	r2, [sp, #8]
 801106a:	2a00      	cmp	r2, #0
 801106c:	d0de      	beq.n	801102c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801106e:	7b57      	ldrb	r7, [r2, #13]
 8011070:	6833      	ldr	r3, [r6, #0]
 8011072:	8894      	ldrh	r4, [r2, #4]
 8011074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011076:	007f      	lsls	r7, r7, #1
 8011078:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801107c:	7a97      	ldrb	r7, [r2, #10]
 801107e:	4629      	mov	r1, r5
 8011080:	4307      	orrs	r7, r0
 8011082:	4630      	mov	r0, r6
 8011084:	4798      	blx	r3
 8011086:	4438      	add	r0, r7
 8011088:	4480      	add	r8, r0
 801108a:	fa1f f888 	uxth.w	r8, r8
 801108e:	e7e5      	b.n	801105c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08011090 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8011090:	b508      	push	{r3, lr}
 8011092:	6803      	ldr	r3, [r0, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	4798      	blx	r3
 8011098:	b128      	cbz	r0, 80110a6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801109a:	7b43      	ldrb	r3, [r0, #13]
 801109c:	7a80      	ldrb	r0, [r0, #10]
 801109e:	005b      	lsls	r3, r3, #1
 80110a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110a4:	4318      	orrs	r0, r3
 80110a6:	bd08      	pop	{r3, pc}

080110a8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80110a8:	b40e      	push	{r1, r2, r3}
 80110aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ac:	b09e      	sub	sp, #120	@ 0x78
 80110ae:	ab23      	add	r3, sp, #140	@ 0x8c
 80110b0:	4605      	mov	r5, r0
 80110b2:	f853 4b04 	ldr.w	r4, [r3], #4
 80110b6:	9303      	str	r3, [sp, #12]
 80110b8:	a805      	add	r0, sp, #20
 80110ba:	f000 fd13 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 80110be:	682b      	ldr	r3, [r5, #0]
 80110c0:	4628      	mov	r0, r5
 80110c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80110c4:	4798      	blx	r3
 80110c6:	682b      	ldr	r3, [r5, #0]
 80110c8:	4606      	mov	r6, r0
 80110ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110cc:	4628      	mov	r0, r5
 80110ce:	4798      	blx	r3
 80110d0:	4633      	mov	r3, r6
 80110d2:	ae1e      	add	r6, sp, #120	@ 0x78
 80110d4:	4621      	mov	r1, r4
 80110d6:	9000      	str	r0, [sp, #0]
 80110d8:	9a03      	ldr	r2, [sp, #12]
 80110da:	2400      	movs	r4, #0
 80110dc:	a805      	add	r0, sp, #20
 80110de:	f000 fd54 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80110e2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80110e6:	462a      	mov	r2, r5
 80110e8:	4633      	mov	r3, r6
 80110ea:	4621      	mov	r1, r4
 80110ec:	a805      	add	r0, sp, #20
 80110ee:	f001 f867 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80110f2:	b1f0      	cbz	r0, 8011132 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 80110f4:	280a      	cmp	r0, #10
 80110f6:	d018      	beq.n	801112a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80110f8:	9f04      	ldr	r7, [sp, #16]
 80110fa:	b1b7      	cbz	r7, 801112a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80110fc:	7b78      	ldrb	r0, [r7, #13]
 80110fe:	7a3b      	ldrb	r3, [r7, #8]
 8011100:	88ea      	ldrh	r2, [r5, #6]
 8011102:	00c1      	lsls	r1, r0, #3
 8011104:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8011108:	4319      	orrs	r1, r3
 801110a:	0643      	lsls	r3, r0, #25
 801110c:	bf44      	itt	mi
 801110e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8011112:	b219      	sxthmi	r1, r3
 8011114:	0100      	lsls	r0, r0, #4
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801111c:	4303      	orrs	r3, r0
 801111e:	4413      	add	r3, r2
 8011120:	1a5b      	subs	r3, r3, r1
 8011122:	b21b      	sxth	r3, r3
 8011124:	429c      	cmp	r4, r3
 8011126:	bfb8      	it	lt
 8011128:	461c      	movlt	r4, r3
 801112a:	4633      	mov	r3, r6
 801112c:	462a      	mov	r2, r5
 801112e:	2100      	movs	r1, #0
 8011130:	e7dc      	b.n	80110ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8011132:	b2a0      	uxth	r0, r4
 8011134:	b01e      	add	sp, #120	@ 0x78
 8011136:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801113a:	b003      	add	sp, #12
 801113c:	4770      	bx	lr

0801113e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801113e:	7a43      	ldrb	r3, [r0, #9]
 8011140:	8880      	ldrh	r0, [r0, #4]
 8011142:	4418      	add	r0, r3
 8011144:	b280      	uxth	r0, r0
 8011146:	4770      	bx	lr

08011148 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8011148:	6803      	ldr	r3, [r0, #0]
 801114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801114c:	4718      	bx	r3

0801114e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801114e:	b40e      	push	{r1, r2, r3}
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	b09d      	sub	sp, #116	@ 0x74
 8011154:	ab21      	add	r3, sp, #132	@ 0x84
 8011156:	4604      	mov	r4, r0
 8011158:	f853 5b04 	ldr.w	r5, [r3], #4
 801115c:	9302      	str	r3, [sp, #8]
 801115e:	a803      	add	r0, sp, #12
 8011160:	f000 fcc0 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 8011164:	6823      	ldr	r3, [r4, #0]
 8011166:	4620      	mov	r0, r4
 8011168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801116a:	4798      	blx	r3
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	4606      	mov	r6, r0
 8011170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011172:	4620      	mov	r0, r4
 8011174:	4798      	blx	r3
 8011176:	4633      	mov	r3, r6
 8011178:	9000      	str	r0, [sp, #0]
 801117a:	9a02      	ldr	r2, [sp, #8]
 801117c:	4629      	mov	r1, r5
 801117e:	a803      	add	r0, sp, #12
 8011180:	f000 fd03 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011184:	a803      	add	r0, sp, #12
 8011186:	f001 f8e9 	bl	801235c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801118a:	2401      	movs	r4, #1
 801118c:	b2a3      	uxth	r3, r4
 801118e:	b140      	cbz	r0, 80111a2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8011190:	280a      	cmp	r0, #10
 8011192:	bf08      	it	eq
 8011194:	3301      	addeq	r3, #1
 8011196:	a803      	add	r0, sp, #12
 8011198:	bf08      	it	eq
 801119a:	b21c      	sxtheq	r4, r3
 801119c:	f001 f8de 	bl	801235c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80111a0:	e7f4      	b.n	801118c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80111a2:	4618      	mov	r0, r3
 80111a4:	b01d      	add	sp, #116	@ 0x74
 80111a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111aa:	b003      	add	sp, #12
 80111ac:	4770      	bx	lr

080111ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80111ae:	b40e      	push	{r1, r2, r3}
 80111b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111b2:	b09e      	sub	sp, #120	@ 0x78
 80111b4:	ab23      	add	r3, sp, #140	@ 0x8c
 80111b6:	4604      	mov	r4, r0
 80111b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80111bc:	9303      	str	r3, [sp, #12]
 80111be:	a805      	add	r0, sp, #20
 80111c0:	f000 fc90 	bl	8011ae4 <_ZN8touchgfx12TextProviderC1Ev>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	4620      	mov	r0, r4
 80111c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80111ca:	4798      	blx	r3
 80111cc:	6823      	ldr	r3, [r4, #0]
 80111ce:	4606      	mov	r6, r0
 80111d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111d2:	4620      	mov	r0, r4
 80111d4:	4798      	blx	r3
 80111d6:	4633      	mov	r3, r6
 80111d8:	4629      	mov	r1, r5
 80111da:	9000      	str	r0, [sp, #0]
 80111dc:	9a03      	ldr	r2, [sp, #12]
 80111de:	a805      	add	r0, sp, #20
 80111e0:	ad1e      	add	r5, sp, #120	@ 0x78
 80111e2:	f000 fcd2 	bl	8011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80111e6:	2100      	movs	r1, #0
 80111e8:	f845 1d68 	str.w	r1, [r5, #-104]!
 80111ec:	4622      	mov	r2, r4
 80111ee:	462b      	mov	r3, r5
 80111f0:	a805      	add	r0, sp, #20
 80111f2:	f000 ffe5 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80111f6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80111fa:	b1d8      	cbz	r0, 8011234 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80111fc:	280a      	cmp	r0, #10
 80111fe:	d012      	beq.n	8011226 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8011200:	9804      	ldr	r0, [sp, #16]
 8011202:	b180      	cbz	r0, 8011226 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8011204:	7b47      	ldrb	r7, [r0, #13]
 8011206:	88e2      	ldrh	r2, [r4, #6]
 8011208:	00fb      	lsls	r3, r7, #3
 801120a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801120e:	7a03      	ldrb	r3, [r0, #8]
 8011210:	430b      	orrs	r3, r1
 8011212:	0679      	lsls	r1, r7, #25
 8011214:	bf44      	itt	mi
 8011216:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801121a:	b21b      	sxthmi	r3, r3
 801121c:	1ad3      	subs	r3, r2, r3
 801121e:	b21b      	sxth	r3, r3
 8011220:	429e      	cmp	r6, r3
 8011222:	bfa8      	it	ge
 8011224:	461e      	movge	r6, r3
 8011226:	462b      	mov	r3, r5
 8011228:	4622      	mov	r2, r4
 801122a:	2100      	movs	r1, #0
 801122c:	a805      	add	r0, sp, #20
 801122e:	f000 ffc7 	bl	80121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011232:	e7e2      	b.n	80111fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8011234:	4630      	mov	r0, r6
 8011236:	b01e      	add	sp, #120	@ 0x78
 8011238:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801123c:	b003      	add	sp, #12
 801123e:	4770      	bx	lr

08011240 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8011240:	b513      	push	{r0, r1, r4, lr}
 8011242:	6803      	ldr	r3, [r0, #0]
 8011244:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011248:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801124c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011250:	2400      	movs	r4, #0
 8011252:	9400      	str	r4, [sp, #0]
 8011254:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011258:	691b      	ldr	r3, [r3, #16]
 801125a:	4669      	mov	r1, sp
 801125c:	4798      	blx	r3
 801125e:	b002      	add	sp, #8
 8011260:	bd10      	pop	{r4, pc}

08011262 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8011262:	b538      	push	{r3, r4, r5, lr}
 8011264:	680b      	ldr	r3, [r1, #0]
 8011266:	460c      	mov	r4, r1
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	4605      	mov	r5, r0
 801126c:	4798      	blx	r3
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	4620      	mov	r0, r4
 8011272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011274:	4629      	mov	r1, r5
 8011276:	4798      	blx	r3
 8011278:	4628      	mov	r0, r5
 801127a:	bd38      	pop	{r3, r4, r5, pc}

0801127c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801127c:	b410      	push	{r4}
 801127e:	880a      	ldrh	r2, [r1, #0]
 8011280:	8884      	ldrh	r4, [r0, #4]
 8011282:	4422      	add	r2, r4
 8011284:	800a      	strh	r2, [r1, #0]
 8011286:	88c4      	ldrh	r4, [r0, #6]
 8011288:	884a      	ldrh	r2, [r1, #2]
 801128a:	4422      	add	r2, r4
 801128c:	804a      	strh	r2, [r1, #2]
 801128e:	6940      	ldr	r0, [r0, #20]
 8011290:	b120      	cbz	r0, 801129c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8011292:	6803      	ldr	r3, [r0, #0]
 8011294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129a:	4718      	bx	r3
 801129c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80112a2:	b570      	push	{r4, r5, r6, lr}
 80112a4:	8882      	ldrh	r2, [r0, #4]
 80112a6:	880b      	ldrh	r3, [r1, #0]
 80112a8:	4413      	add	r3, r2
 80112aa:	800b      	strh	r3, [r1, #0]
 80112ac:	88c2      	ldrh	r2, [r0, #6]
 80112ae:	884b      	ldrh	r3, [r1, #2]
 80112b0:	460c      	mov	r4, r1
 80112b2:	4413      	add	r3, r2
 80112b4:	804b      	strh	r3, [r1, #2]
 80112b6:	4605      	mov	r5, r0
 80112b8:	1d01      	adds	r1, r0, #4
 80112ba:	4620      	mov	r0, r4
 80112bc:	f7fb ff20 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 80112c0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	dd0b      	ble.n	80112e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80112c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	dd07      	ble.n	80112e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80112d0:	6968      	ldr	r0, [r5, #20]
 80112d2:	b128      	cbz	r0, 80112e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80112d4:	6803      	ldr	r3, [r0, #0]
 80112d6:	4621      	mov	r1, r4
 80112d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112de:	4718      	bx	r3
 80112e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080112e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	8882      	ldrh	r2, [r0, #4]
 80112e8:	880b      	ldrh	r3, [r1, #0]
 80112ea:	4413      	add	r3, r2
 80112ec:	800b      	strh	r3, [r1, #0]
 80112ee:	88c2      	ldrh	r2, [r0, #6]
 80112f0:	884b      	ldrh	r3, [r1, #2]
 80112f2:	460c      	mov	r4, r1
 80112f4:	4413      	add	r3, r2
 80112f6:	804b      	strh	r3, [r1, #2]
 80112f8:	4605      	mov	r5, r0
 80112fa:	1d01      	adds	r1, r0, #4
 80112fc:	4620      	mov	r0, r4
 80112fe:	f7fb feff 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8011302:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	dd19      	ble.n	801133e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801130a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801130e:	2b00      	cmp	r3, #0
 8011310:	dd15      	ble.n	801133e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8011312:	6968      	ldr	r0, [r5, #20]
 8011314:	b128      	cbz	r0, 8011322 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8011316:	6803      	ldr	r3, [r0, #0]
 8011318:	4621      	mov	r1, r4
 801131a:	691b      	ldr	r3, [r3, #16]
 801131c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011320:	4718      	bx	r3
 8011322:	4b07      	ldr	r3, [pc, #28]	@ (8011340 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3304      	adds	r3, #4
 8011328:	429d      	cmp	r5, r3
 801132a:	d108      	bne.n	801133e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801132c:	f7fe fdd6 	bl	800fedc <_ZN8touchgfx11Application11getInstanceEv>
 8011330:	6803      	ldr	r3, [r0, #0]
 8011332:	6821      	ldr	r1, [r4, #0]
 8011334:	6862      	ldr	r2, [r4, #4]
 8011336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801133c:	4718      	bx	r3
 801133e:	bd70      	pop	{r4, r5, r6, pc}
 8011340:	2002b068 	.word	0x2002b068

08011344 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	4604      	mov	r4, r0
 8011348:	4616      	mov	r6, r2
 801134a:	460d      	mov	r5, r1
 801134c:	b901      	cbnz	r1, 8011350 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801134e:	b192      	cbz	r2, 8011376 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8011350:	6823      	ldr	r3, [r4, #0]
 8011352:	4620      	mov	r0, r4
 8011354:	699b      	ldr	r3, [r3, #24]
 8011356:	4798      	blx	r3
 8011358:	88e2      	ldrh	r2, [r4, #6]
 801135a:	88a1      	ldrh	r1, [r4, #4]
 801135c:	4432      	add	r2, r6
 801135e:	4429      	add	r1, r5
 8011360:	4620      	mov	r0, r4
 8011362:	b212      	sxth	r2, r2
 8011364:	b209      	sxth	r1, r1
 8011366:	f7f8 f850 	bl	800940a <_ZN8touchgfx8Drawable5setXYEss>
 801136a:	6823      	ldr	r3, [r4, #0]
 801136c:	4620      	mov	r0, r4
 801136e:	699b      	ldr	r3, [r3, #24]
 8011370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011374:	4718      	bx	r3
 8011376:	bd70      	pop	{r4, r5, r6, pc}

08011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8011378:	b510      	push	{r4, lr}
 801137a:	4604      	mov	r4, r0
 801137c:	4608      	mov	r0, r1
 801137e:	2300      	movs	r3, #0
 8011380:	8023      	strh	r3, [r4, #0]
 8011382:	8063      	strh	r3, [r4, #2]
 8011384:	6803      	ldr	r3, [r0, #0]
 8011386:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801138a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801138e:	80a1      	strh	r1, [r4, #4]
 8011390:	80e2      	strh	r2, [r4, #6]
 8011392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011394:	4621      	mov	r1, r4
 8011396:	4798      	blx	r3
 8011398:	4620      	mov	r0, r4
 801139a:	bd10      	pop	{r4, pc}

0801139c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801139c:	b530      	push	{r4, r5, lr}
 801139e:	8083      	strh	r3, [r0, #4]
 80113a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80113a4:	80c3      	strh	r3, [r0, #6]
 80113a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80113aa:	7203      	strb	r3, [r0, #8]
 80113ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80113b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80113b4:	7243      	strb	r3, [r0, #9]
 80113b6:	7a83      	ldrb	r3, [r0, #10]
 80113b8:	6141      	str	r1, [r0, #20]
 80113ba:	f365 0306 	bfi	r3, r5, #0, #7
 80113be:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80113c2:	8302      	strh	r2, [r0, #24]
 80113c4:	f365 13c7 	bfi	r3, r5, #7, #1
 80113c8:	7283      	strb	r3, [r0, #10]
 80113ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80113ce:	72c3      	strb	r3, [r0, #11]
 80113d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80113d4:	7303      	strb	r3, [r0, #12]
 80113d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80113da:	81c3      	strh	r3, [r0, #14]
 80113dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80113e0:	8203      	strh	r3, [r0, #16]
 80113e2:	4b01      	ldr	r3, [pc, #4]	@ (80113e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80113e4:	6003      	str	r3, [r0, #0]
 80113e6:	bd30      	pop	{r4, r5, pc}
 80113e8:	08023a00 	.word	0x08023a00

080113ec <_ZNK8touchgfx9ConstFont4findEt>:
 80113ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ee:	6944      	ldr	r4, [r0, #20]
 80113f0:	b3bc      	cbz	r4, 8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80113f2:	88a3      	ldrh	r3, [r4, #4]
 80113f4:	8b02      	ldrh	r2, [r0, #24]
 80113f6:	1acb      	subs	r3, r1, r3
 80113f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80113fc:	d431      	bmi.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80113fe:	4293      	cmp	r3, r2
 8011400:	dd0c      	ble.n	801141c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8011402:	230e      	movs	r3, #14
 8011404:	fb03 4302 	mla	r3, r3, r2, r4
 8011408:	889b      	ldrh	r3, [r3, #4]
 801140a:	1a5b      	subs	r3, r3, r1
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	429a      	cmp	r2, r3
 8011410:	db27      	blt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011412:	2b00      	cmp	r3, #0
 8011414:	bfbc      	itt	lt
 8011416:	2302      	movlt	r3, #2
 8011418:	fb92 f3f3 	sdivlt	r3, r2, r3
 801141c:	2500      	movs	r5, #0
 801141e:	260e      	movs	r6, #14
 8011420:	4295      	cmp	r5, r2
 8011422:	dc1e      	bgt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011424:	fb06 4003 	mla	r0, r6, r3, r4
 8011428:	8887      	ldrh	r7, [r0, #4]
 801142a:	42b9      	cmp	r1, r7
 801142c:	d01a      	beq.n	8011464 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801142e:	d20d      	bcs.n	801144c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011430:	1e5a      	subs	r2, r3, #1
 8011432:	4295      	cmp	r5, r2
 8011434:	dc15      	bgt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011436:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801143a:	1a5b      	subs	r3, r3, r1
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	429a      	cmp	r2, r3
 8011440:	db0f      	blt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011442:	429d      	cmp	r5, r3
 8011444:	ddec      	ble.n	8011420 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011446:	1953      	adds	r3, r2, r5
 8011448:	105b      	asrs	r3, r3, #1
 801144a:	e7e9      	b.n	8011420 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801144c:	1c5d      	adds	r5, r3, #1
 801144e:	42aa      	cmp	r2, r5
 8011450:	db07      	blt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011452:	8a43      	ldrh	r3, [r0, #18]
 8011454:	1acb      	subs	r3, r1, r3
 8011456:	442b      	add	r3, r5
 8011458:	429d      	cmp	r5, r3
 801145a:	dc02      	bgt.n	8011462 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801145c:	429a      	cmp	r2, r3
 801145e:	dadf      	bge.n	8011420 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011460:	e7f1      	b.n	8011446 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8011462:	2000      	movs	r0, #0
 8011464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011466 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011468:	4604      	mov	r4, r0
 801146a:	4617      	mov	r7, r2
 801146c:	461e      	mov	r6, r3
 801146e:	b911      	cbnz	r1, 8011476 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011470:	2500      	movs	r5, #0
 8011472:	4628      	mov	r0, r5
 8011474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011476:	290a      	cmp	r1, #10
 8011478:	d0fa      	beq.n	8011470 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801147a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801147e:	4291      	cmp	r1, r2
 8011480:	d0f6      	beq.n	8011470 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011482:	f242 020b 	movw	r2, #8203	@ 0x200b
 8011486:	4291      	cmp	r1, r2
 8011488:	d0f2      	beq.n	8011470 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801148a:	f7ff ffaf 	bl	80113ec <_ZNK8touchgfx9ConstFont4findEt>
 801148e:	4605      	mov	r5, r0
 8011490:	b950      	cbnz	r0, 80114a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	4620      	mov	r0, r4
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	4798      	blx	r3
 801149a:	4601      	mov	r1, r0
 801149c:	4620      	mov	r0, r4
 801149e:	f7ff ffa5 	bl	80113ec <_ZNK8touchgfx9ConstFont4findEt>
 80114a2:	4605      	mov	r5, r0
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d0e3      	beq.n	8011470 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	4629      	mov	r1, r5
 80114ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114ae:	4620      	mov	r0, r4
 80114b0:	4798      	blx	r3
 80114b2:	6038      	str	r0, [r7, #0]
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	4620      	mov	r0, r4
 80114b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114ba:	4798      	blx	r3
 80114bc:	7030      	strb	r0, [r6, #0]
 80114be:	e7d8      	b.n	8011472 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080114c0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80114c0:	2000      	movs	r0, #0
 80114c2:	4770      	bx	lr

080114c4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80114c4:	2001      	movs	r0, #1
 80114c6:	4770      	bx	lr

080114c8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80114c8:	2002      	movs	r0, #2
 80114ca:	4770      	bx	lr

080114cc <_ZN8touchgfx12GestureEventD1Ev>:
 80114cc:	4770      	bx	lr

080114ce <_ZN8touchgfx9DragEventD1Ev>:
 80114ce:	4770      	bx	lr

080114d0 <_ZN8touchgfx10ClickEventD1Ev>:
 80114d0:	4770      	bx	lr

080114d2 <_ZN8touchgfx10ClickEventD0Ev>:
 80114d2:	b510      	push	{r4, lr}
 80114d4:	210c      	movs	r1, #12
 80114d6:	4604      	mov	r4, r0
 80114d8:	f00f fe4d 	bl	8021176 <_ZdlPvj>
 80114dc:	4620      	mov	r0, r4
 80114de:	bd10      	pop	{r4, pc}

080114e0 <_ZN8touchgfx9DragEventD0Ev>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	2110      	movs	r1, #16
 80114e4:	4604      	mov	r4, r0
 80114e6:	f00f fe46 	bl	8021176 <_ZdlPvj>
 80114ea:	4620      	mov	r0, r4
 80114ec:	bd10      	pop	{r4, pc}

080114ee <_ZN8touchgfx12GestureEventD0Ev>:
 80114ee:	b510      	push	{r4, lr}
 80114f0:	210c      	movs	r1, #12
 80114f2:	4604      	mov	r4, r0
 80114f4:	f00f fe3f 	bl	8021176 <_ZdlPvj>
 80114f8:	4620      	mov	r0, r4
 80114fa:	bd10      	pop	{r4, pc}

080114fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80114fc:	b530      	push	{r4, r5, lr}
 80114fe:	460d      	mov	r5, r1
 8011500:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8011502:	b087      	sub	sp, #28
 8011504:	4604      	mov	r4, r0
 8011506:	b301      	cbz	r1, 801154a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011508:	a801      	add	r0, sp, #4
 801150a:	f7ff ff35 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801150e:	892a      	ldrh	r2, [r5, #8]
 8011510:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011514:	7928      	ldrb	r0, [r5, #4]
 8011516:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801151a:	f88d 0010 	strb.w	r0, [sp, #16]
 801151e:	1ad2      	subs	r2, r2, r3
 8011520:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011522:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011524:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011528:	441a      	add	r2, r3
 801152a:	896b      	ldrh	r3, [r5, #10]
 801152c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011530:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011534:	1b5b      	subs	r3, r3, r5
 8011536:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8011538:	442b      	add	r3, r5
 801153a:	4d05      	ldr	r5, [pc, #20]	@ (8011550 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801153c:	9503      	str	r5, [sp, #12]
 801153e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011542:	6803      	ldr	r3, [r0, #0]
 8011544:	a903      	add	r1, sp, #12
 8011546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011548:	4798      	blx	r3
 801154a:	b007      	add	sp, #28
 801154c:	bd30      	pop	{r4, r5, pc}
 801154e:	bf00      	nop
 8011550:	08023a90 	.word	0x08023a90

08011554 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011558:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801155a:	b08a      	sub	sp, #40	@ 0x28
 801155c:	4604      	mov	r4, r0
 801155e:	460d      	mov	r5, r1
 8011560:	b113      	cbz	r3, 8011568 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8011562:	790b      	ldrb	r3, [r1, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d044      	beq.n	80115f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011568:	f104 0804 	add.w	r8, r4, #4
 801156c:	4641      	mov	r1, r8
 801156e:	a803      	add	r0, sp, #12
 8011570:	f7ff ff02 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011574:	792b      	ldrb	r3, [r5, #4]
 8011576:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801157a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801157e:	b983      	cbnz	r3, 80115a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8011580:	892a      	ldrh	r2, [r5, #8]
 8011582:	88e9      	ldrh	r1, [r5, #6]
 8011584:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8011588:	1b92      	subs	r2, r2, r6
 801158a:	1bc9      	subs	r1, r1, r7
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	b212      	sxth	r2, r2
 8011596:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801159a:	b209      	sxth	r1, r1
 801159c:	4640      	mov	r0, r8
 801159e:	f7fb fccb 	bl	800cf38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80115a2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80115a4:	b329      	cbz	r1, 80115f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80115a6:	a805      	add	r0, sp, #20
 80115a8:	f7ff fee6 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80115ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80115b0:	792b      	ldrb	r3, [r5, #4]
 80115b2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80115b4:	f88d 3020 	strb.w	r3, [sp, #32]
 80115b8:	1abf      	subs	r7, r7, r2
 80115ba:	88ea      	ldrh	r2, [r5, #6]
 80115bc:	4417      	add	r7, r2
 80115be:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80115c0:	4417      	add	r7, r2
 80115c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80115c6:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80115ca:	1ab6      	subs	r6, r6, r2
 80115cc:	892a      	ldrh	r2, [r5, #8]
 80115ce:	4416      	add	r6, r2
 80115d0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80115d2:	4416      	add	r6, r2
 80115d4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80115d8:	4a07      	ldr	r2, [pc, #28]	@ (80115f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80115da:	9207      	str	r2, [sp, #28]
 80115dc:	2600      	movs	r6, #0
 80115de:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80115e2:	6803      	ldr	r3, [r0, #0]
 80115e4:	a907      	add	r1, sp, #28
 80115e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e8:	4798      	blx	r3
 80115ea:	792b      	ldrb	r3, [r5, #4]
 80115ec:	b10b      	cbz	r3, 80115f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80115ee:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80115f2:	b00a      	add	sp, #40	@ 0x28
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	08023a68 	.word	0x08023a68

080115fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80115fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011600:	460c      	mov	r4, r1
 8011602:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8011604:	b088      	sub	sp, #32
 8011606:	4605      	mov	r5, r0
 8011608:	2900      	cmp	r1, #0
 801160a:	d06d      	beq.n	80116e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801160c:	4668      	mov	r0, sp
 801160e:	f7ff feb3 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011612:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8011614:	88e3      	ldrh	r3, [r4, #6]
 8011616:	f9bd 8000 	ldrsh.w	r8, [sp]
 801161a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801161e:	440b      	add	r3, r1
 8011620:	b21b      	sxth	r3, r3
 8011622:	4543      	cmp	r3, r8
 8011624:	db31      	blt.n	801168a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011626:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801162a:	44c4      	add	ip, r8
 801162c:	fa0f fc8c 	sxth.w	ip, ip
 8011630:	4563      	cmp	r3, ip
 8011632:	da2a      	bge.n	801168a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011634:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8011636:	8926      	ldrh	r6, [r4, #8]
 8011638:	4416      	add	r6, r2
 801163a:	b236      	sxth	r6, r6
 801163c:	42be      	cmp	r6, r7
 801163e:	db24      	blt.n	801168a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011640:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011644:	4438      	add	r0, r7
 8011646:	b200      	sxth	r0, r0
 8011648:	4286      	cmp	r6, r0
 801164a:	da1e      	bge.n	801168a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801164c:	8963      	ldrh	r3, [r4, #10]
 801164e:	4419      	add	r1, r3
 8011650:	b209      	sxth	r1, r1
 8011652:	4541      	cmp	r1, r8
 8011654:	db08      	blt.n	8011668 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011656:	4561      	cmp	r1, ip
 8011658:	da06      	bge.n	8011668 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801165a:	89a3      	ldrh	r3, [r4, #12]
 801165c:	441a      	add	r2, r3
 801165e:	b212      	sxth	r2, r2
 8011660:	42ba      	cmp	r2, r7
 8011662:	db01      	blt.n	8011668 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011664:	4282      	cmp	r2, r0
 8011666:	db10      	blt.n	801168a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011668:	4b21      	ldr	r3, [pc, #132]	@ (80116f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	2302      	movs	r3, #2
 801166e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011672:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8011674:	2300      	movs	r3, #0
 8011676:	f8ad 3016 	strh.w	r3, [sp, #22]
 801167a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801167e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011682:	6803      	ldr	r3, [r0, #0]
 8011684:	a904      	add	r1, sp, #16
 8011686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011688:	4798      	blx	r3
 801168a:	1d29      	adds	r1, r5, #4
 801168c:	a802      	add	r0, sp, #8
 801168e:	f7ff fe73 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011692:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011696:	88e0      	ldrh	r0, [r4, #6]
 8011698:	7921      	ldrb	r1, [r4, #4]
 801169a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801169e:	8922      	ldrh	r2, [r4, #8]
 80116a0:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80116a2:	f88d 1014 	strb.w	r1, [sp, #20]
 80116a6:	eba3 0808 	sub.w	r8, r3, r8
 80116aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80116ae:	1bdf      	subs	r7, r3, r7
 80116b0:	b2bb      	uxth	r3, r7
 80116b2:	fa1f f888 	uxth.w	r8, r8
 80116b6:	8967      	ldrh	r7, [r4, #10]
 80116b8:	89a4      	ldrh	r4, [r4, #12]
 80116ba:	4440      	add	r0, r8
 80116bc:	4460      	add	r0, ip
 80116be:	441a      	add	r2, r3
 80116c0:	44b8      	add	r8, r7
 80116c2:	4423      	add	r3, r4
 80116c4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80116c8:	4433      	add	r3, r6
 80116ca:	4432      	add	r2, r6
 80116cc:	44e0      	add	r8, ip
 80116ce:	4c09      	ldr	r4, [pc, #36]	@ (80116f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80116d0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80116d2:	9404      	str	r4, [sp, #16]
 80116d4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80116d8:	f8ad 801a 	strh.w	r8, [sp, #26]
 80116dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80116e0:	6803      	ldr	r3, [r0, #0]
 80116e2:	a904      	add	r1, sp, #16
 80116e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116e6:	4798      	blx	r3
 80116e8:	b008      	add	sp, #32
 80116ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ee:	bf00      	nop
 80116f0:	08023a68 	.word	0x08023a68
 80116f4:	08023a7c 	.word	0x08023a7c

080116f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80116f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116fa:	4604      	mov	r4, r0
 80116fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011700:	3201      	adds	r2, #1
 8011702:	d112      	bne.n	801172a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801170a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801170e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011712:	2500      	movs	r5, #0
 8011714:	9500      	str	r5, [sp, #0]
 8011716:	466d      	mov	r5, sp
 8011718:	4629      	mov	r1, r5
 801171a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011720:	4798      	blx	r3
 8011722:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011726:	e884 0003 	stmia.w	r4, {r0, r1}
 801172a:	4620      	mov	r0, r4
 801172c:	b003      	add	sp, #12
 801172e:	bd30      	pop	{r4, r5, pc}

08011730 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011730:	b513      	push	{r0, r1, r4, lr}
 8011732:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011736:	3301      	adds	r3, #1
 8011738:	4604      	mov	r4, r0
 801173a:	d109      	bne.n	8011750 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801173c:	4601      	mov	r1, r0
 801173e:	4668      	mov	r0, sp
 8011740:	f7ff fe1a 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011744:	f8bd 3000 	ldrh.w	r3, [sp]
 8011748:	8423      	strh	r3, [r4, #32]
 801174a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801174e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8011750:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011754:	b002      	add	sp, #8
 8011756:	bd10      	pop	{r4, pc}

08011758 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011758:	b513      	push	{r0, r1, r4, lr}
 801175a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801175e:	3301      	adds	r3, #1
 8011760:	4604      	mov	r4, r0
 8011762:	d109      	bne.n	8011778 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011764:	4601      	mov	r1, r0
 8011766:	4668      	mov	r0, sp
 8011768:	f7ff fe06 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801176c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011770:	8423      	strh	r3, [r4, #32]
 8011772:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011776:	8463      	strh	r3, [r4, #34]	@ 0x22
 8011778:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801177c:	b002      	add	sp, #8
 801177e:	bd10      	pop	{r4, pc}

08011780 <_ZN8touchgfx6ScreenC1Ev>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	4605      	mov	r5, r0
 8011784:	4b16      	ldr	r3, [pc, #88]	@ (80117e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011786:	f845 3b04 	str.w	r3, [r5], #4
 801178a:	2300      	movs	r3, #0
 801178c:	8103      	strh	r3, [r0, #8]
 801178e:	8143      	strh	r3, [r0, #10]
 8011790:	8183      	strh	r3, [r0, #12]
 8011792:	81c3      	strh	r3, [r0, #14]
 8011794:	8203      	strh	r3, [r0, #16]
 8011796:	8243      	strh	r3, [r0, #18]
 8011798:	8283      	strh	r3, [r0, #20]
 801179a:	82c3      	strh	r3, [r0, #22]
 801179c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80117a0:	6203      	str	r3, [r0, #32]
 80117a2:	8483      	strh	r3, [r0, #36]	@ 0x24
 80117a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80117a6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80117aa:	4a0e      	ldr	r2, [pc, #56]	@ (80117e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80117ac:	6343      	str	r3, [r0, #52]	@ 0x34
 80117ae:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80117b2:	4b0d      	ldr	r3, [pc, #52]	@ (80117e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80117b4:	6042      	str	r2, [r0, #4]
 80117b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80117ba:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80117bc:	4a0b      	ldr	r2, [pc, #44]	@ (80117ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80117be:	4604      	mov	r4, r0
 80117c0:	2101      	movs	r1, #1
 80117c2:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80117c6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80117ca:	f9b2 1000 	ldrsh.w	r1, [r2]
 80117ce:	4628      	mov	r0, r5
 80117d0:	4798      	blx	r3
 80117d2:	6863      	ldr	r3, [r4, #4]
 80117d4:	4628      	mov	r0, r5
 80117d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117d8:	4631      	mov	r1, r6
 80117da:	4798      	blx	r3
 80117dc:	4620      	mov	r0, r4
 80117de:	bd70      	pop	{r4, r5, r6, pc}
 80117e0:	08023aa4 	.word	0x08023aa4
 80117e4:	08023530 	.word	0x08023530
 80117e8:	2002b022 	.word	0x2002b022
 80117ec:	2002b020 	.word	0x2002b020

080117f0 <_ZN8touchgfx6Screen4drawEv>:
 80117f0:	b507      	push	{r0, r1, r2, lr}
 80117f2:	4b09      	ldr	r3, [pc, #36]	@ (8011818 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80117f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117f8:	4b08      	ldr	r3, [pc, #32]	@ (801181c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80117fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80117fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011802:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011806:	6803      	ldr	r3, [r0, #0]
 8011808:	2100      	movs	r1, #0
 801180a:	9100      	str	r1, [sp, #0]
 801180c:	689b      	ldr	r3, [r3, #8]
 801180e:	4669      	mov	r1, sp
 8011810:	4798      	blx	r3
 8011812:	b003      	add	sp, #12
 8011814:	f85d fb04 	ldr.w	pc, [sp], #4
 8011818:	2002b020 	.word	0x2002b020
 801181c:	2002b022 	.word	0x2002b022

08011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	b089      	sub	sp, #36	@ 0x24
 801182c:	4680      	mov	r8, r0
 801182e:	460c      	mov	r4, r1
 8011830:	4615      	mov	r5, r2
 8011832:	dd0e      	ble.n	8011852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011834:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011838:	2b00      	cmp	r3, #0
 801183a:	dd0a      	ble.n	8011852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801183c:	4628      	mov	r0, r5
 801183e:	f7ff ff5b 	bl	80116f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011842:	4621      	mov	r1, r4
 8011844:	f7fe fa6c 	bl	800fd20 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011848:	69eb      	ldr	r3, [r5, #28]
 801184a:	b928      	cbnz	r0, 8011858 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801184c:	461d      	mov	r5, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	d1f4      	bne.n	801183c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011852:	b009      	add	sp, #36	@ 0x24
 8011854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011858:	ae04      	add	r6, sp, #16
 801185a:	2b00      	cmp	r3, #0
 801185c:	f000 80b5 	beq.w	80119ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	4629      	mov	r1, r5
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	a802      	add	r0, sp, #8
 8011868:	4798      	blx	r3
 801186a:	4628      	mov	r0, r5
 801186c:	f7ff ff60 	bl	8011730 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011870:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011874:	4407      	add	r7, r0
 8011876:	4628      	mov	r0, r5
 8011878:	f7ff ff6e 	bl	8011758 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801187c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011880:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011884:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011888:	4418      	add	r0, r3
 801188a:	4621      	mov	r1, r4
 801188c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011890:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011894:	b23f      	sxth	r7, r7
 8011896:	4630      	mov	r0, r6
 8011898:	f8ad 3016 	strh.w	r3, [sp, #22]
 801189c:	f8ad 7010 	strh.w	r7, [sp, #16]
 80118a0:	f7fb fc2e 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 80118a4:	4628      	mov	r0, r5
 80118a6:	f7ff ff27 	bl	80116f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80118aa:	4602      	mov	r2, r0
 80118ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 80118b0:	ab06      	add	r3, sp, #24
 80118b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80118b6:	4611      	mov	r1, r2
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7fb fc21 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 80118be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80118c2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80118c6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80118ca:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80118ce:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80118d2:	4299      	cmp	r1, r3
 80118d4:	d10b      	bne.n	80118ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80118d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80118da:	4552      	cmp	r2, sl
 80118dc:	d107      	bne.n	80118ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80118de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80118e2:	455a      	cmp	r2, fp
 80118e4:	d103      	bne.n	80118ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80118e6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80118ea:	454a      	cmp	r2, r9
 80118ec:	d06d      	beq.n	80119ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80118ee:	f1bb 0f00 	cmp.w	fp, #0
 80118f2:	dd65      	ble.n	80119c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80118f4:	f1b9 0f00 	cmp.w	r9, #0
 80118f8:	dd62      	ble.n	80119c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80118fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80118fe:	fa1f f08a 	uxth.w	r0, sl
 8011902:	4552      	cmp	r2, sl
 8011904:	9000      	str	r0, [sp, #0]
 8011906:	da12      	bge.n	801192e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	9b00      	ldr	r3, [sp, #0]
 801190c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011910:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011914:	1a9a      	subs	r2, r3, r2
 8011916:	f8ad 1010 	strh.w	r1, [sp, #16]
 801191a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801191e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011922:	69ea      	ldr	r2, [r5, #28]
 8011924:	4631      	mov	r1, r6
 8011926:	4640      	mov	r0, r8
 8011928:	f7ff ff7a 	bl	8011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801192c:	9b01      	ldr	r3, [sp, #4]
 801192e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011932:	429a      	cmp	r2, r3
 8011934:	b29f      	uxth	r7, r3
 8011936:	da0d      	bge.n	8011954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011938:	f8ad 2010 	strh.w	r2, [sp, #16]
 801193c:	1aba      	subs	r2, r7, r2
 801193e:	f8ad a012 	strh.w	sl, [sp, #18]
 8011942:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011946:	f8ad 9016 	strh.w	r9, [sp, #22]
 801194a:	69ea      	ldr	r2, [r5, #28]
 801194c:	4631      	mov	r1, r6
 801194e:	4640      	mov	r0, r8
 8011950:	f7ff ff66 	bl	8011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011954:	8822      	ldrh	r2, [r4, #0]
 8011956:	88a3      	ldrh	r3, [r4, #4]
 8011958:	445f      	add	r7, fp
 801195a:	4413      	add	r3, r2
 801195c:	b29b      	uxth	r3, r3
 801195e:	b2bf      	uxth	r7, r7
 8011960:	b23a      	sxth	r2, r7
 8011962:	b219      	sxth	r1, r3
 8011964:	4291      	cmp	r1, r2
 8011966:	dd0d      	ble.n	8011984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011968:	1bdb      	subs	r3, r3, r7
 801196a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801196e:	f8ad a012 	strh.w	sl, [sp, #18]
 8011972:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011976:	f8ad 9016 	strh.w	r9, [sp, #22]
 801197a:	69ea      	ldr	r2, [r5, #28]
 801197c:	4631      	mov	r1, r6
 801197e:	4640      	mov	r0, r8
 8011980:	f7ff ff4e 	bl	8011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011984:	88e2      	ldrh	r2, [r4, #6]
 8011986:	8863      	ldrh	r3, [r4, #2]
 8011988:	4413      	add	r3, r2
 801198a:	9a00      	ldr	r2, [sp, #0]
 801198c:	444a      	add	r2, r9
 801198e:	b29b      	uxth	r3, r3
 8011990:	fa1f f982 	uxth.w	r9, r2
 8011994:	fa0f f289 	sxth.w	r2, r9
 8011998:	b219      	sxth	r1, r3
 801199a:	428a      	cmp	r2, r1
 801199c:	da15      	bge.n	80119ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801199e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80119a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80119a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80119aa:	eba3 0309 	sub.w	r3, r3, r9
 80119ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 80119b2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80119b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119ba:	69ea      	ldr	r2, [r5, #28]
 80119bc:	4631      	mov	r1, r6
 80119be:	e001      	b.n	80119c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80119c0:	69ea      	ldr	r2, [r5, #28]
 80119c2:	4621      	mov	r1, r4
 80119c4:	4640      	mov	r0, r8
 80119c6:	f7ff ff2b 	bl	8011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80119ca:	4628      	mov	r0, r5
 80119cc:	f7ff fe94 	bl	80116f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80119d0:	6861      	ldr	r1, [r4, #4]
 80119d2:	4602      	mov	r2, r0
 80119d4:	6820      	ldr	r0, [r4, #0]
 80119d6:	4633      	mov	r3, r6
 80119d8:	c303      	stmia	r3!, {r0, r1}
 80119da:	4611      	mov	r1, r2
 80119dc:	4630      	mov	r0, r6
 80119de:	f7fb fb8f 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 80119e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f77f af33 	ble.w	8011852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80119ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f77f af2e 	ble.w	8011852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80119f6:	4628      	mov	r0, r5
 80119f8:	f7ff fe9a 	bl	8011730 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80119fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011a00:	1a18      	subs	r0, r3, r0
 8011a02:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011a06:	4628      	mov	r0, r5
 8011a08:	f7ff fea6 	bl	8011758 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011a0c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011a10:	1a18      	subs	r0, r3, r0
 8011a12:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011a16:	682b      	ldr	r3, [r5, #0]
 8011a18:	4631      	mov	r1, r6
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	4798      	blx	r3
 8011a20:	e717      	b.n	8011852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08011a22 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	460c      	mov	r4, r1
 8011a26:	b086      	sub	sp, #24
 8011a28:	1d06      	adds	r6, r0, #4
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4631      	mov	r1, r6
 8011a2e:	4605      	mov	r5, r0
 8011a30:	a802      	add	r0, sp, #8
 8011a32:	9301      	str	r3, [sp, #4]
 8011a34:	f7ff fca0 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011a3c:	8822      	ldrh	r2, [r4, #0]
 8011a3e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8011a42:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011a46:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011a4a:	1ad2      	subs	r2, r2, r3
 8011a4c:	8863      	ldrh	r3, [r4, #2]
 8011a4e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011a52:	1a5b      	subs	r3, r3, r1
 8011a54:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011a58:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011a5c:	aa01      	add	r2, sp, #4
 8011a5e:	a904      	add	r1, sp, #16
 8011a60:	4630      	mov	r0, r6
 8011a62:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011a66:	f7fb fc23 	bl	800d2b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011a6a:	9a01      	ldr	r2, [sp, #4]
 8011a6c:	b11a      	cbz	r2, 8011a76 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff fed5 	bl	8011820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011a76:	b006      	add	sp, #24
 8011a78:	bd70      	pop	{r4, r5, r6, pc}

08011a7a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011a7a:	b530      	push	{r4, r5, lr}
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	4604      	mov	r4, r0
 8011a80:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011a84:	b085      	sub	sp, #20
 8011a86:	460d      	mov	r5, r1
 8011a88:	6851      	ldr	r1, [r2, #4]
 8011a8a:	466b      	mov	r3, sp
 8011a8c:	c303      	stmia	r3!, {r0, r1}
 8011a8e:	4629      	mov	r1, r5
 8011a90:	4668      	mov	r0, sp
 8011a92:	f7fb fb35 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8011a96:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011a9a:	b12b      	cbz	r3, 8011aa8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011a9c:	4669      	mov	r1, sp
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7ff ffbf 	bl	8011a22 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011aa4:	b005      	add	sp, #20
 8011aa6:	bd30      	pop	{r4, r5, pc}
 8011aa8:	3404      	adds	r4, #4
 8011aaa:	4621      	mov	r1, r4
 8011aac:	a802      	add	r0, sp, #8
 8011aae:	f7ff fc63 	bl	8011378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ab2:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ab6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011aba:	1a9b      	subs	r3, r3, r2
 8011abc:	f8ad 3000 	strh.w	r3, [sp]
 8011ac0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011ac4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ac8:	4669      	mov	r1, sp
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	4620      	mov	r0, r4
 8011ace:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011ad2:	f7fb fbb4 	bl	800d23e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8011ad6:	e7e5      	b.n	8011aa4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011ad8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011ad8:	680a      	ldr	r2, [r1, #0]
 8011ada:	460b      	mov	r3, r1
 8011adc:	6992      	ldr	r2, [r2, #24]
 8011ade:	1d01      	adds	r1, r0, #4
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	4710      	bx	r2

08011ae4 <_ZN8touchgfx12TextProviderC1Ev>:
 8011ae4:	b538      	push	{r3, r4, r5, lr}
 8011ae6:	2500      	movs	r5, #0
 8011ae8:	2302      	movs	r3, #2
 8011aea:	4604      	mov	r4, r0
 8011aec:	e9c0 5500 	strd	r5, r5, [r0]
 8011af0:	7403      	strb	r3, [r0, #16]
 8011af2:	6145      	str	r5, [r0, #20]
 8011af4:	7605      	strb	r5, [r0, #24]
 8011af6:	83c5      	strh	r5, [r0, #30]
 8011af8:	8405      	strh	r5, [r0, #32]
 8011afa:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8011afc:	8705      	strh	r5, [r0, #56]	@ 0x38
 8011afe:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8011b00:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8011b04:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8011b08:	220e      	movs	r2, #14
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	304c      	adds	r0, #76	@ 0x4c
 8011b0e:	f00f fd68 	bl	80215e2 <memset>
 8011b12:	2301      	movs	r3, #1
 8011b14:	4620      	mov	r0, r4
 8011b16:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8011b1a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8011b1e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8011b22:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8011b26:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8011b2a:	f7f9 fa8b 	bl	800b044 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011b2e:	4620      	mov	r0, r4
 8011b30:	bd38      	pop	{r3, r4, r5, pc}

08011b32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011b32:	b530      	push	{r4, r5, lr}
 8011b34:	2500      	movs	r5, #0
 8011b36:	2401      	movs	r4, #1
 8011b38:	6843      	ldr	r3, [r0, #4]
 8011b3a:	b913      	cbnz	r3, 8011b42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011b3c:	6803      	ldr	r3, [r0, #0]
 8011b3e:	b313      	cbz	r3, 8011b86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011b40:	6043      	str	r3, [r0, #4]
 8011b42:	7e03      	ldrb	r3, [r0, #24]
 8011b44:	b143      	cbz	r3, 8011b58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8011b46:	6943      	ldr	r3, [r0, #20]
 8011b48:	b12b      	cbz	r3, 8011b56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011b4a:	881a      	ldrh	r2, [r3, #0]
 8011b4c:	b11a      	cbz	r2, 8011b56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011b4e:	1c9a      	adds	r2, r3, #2
 8011b50:	6142      	str	r2, [r0, #20]
 8011b52:	8818      	ldrh	r0, [r3, #0]
 8011b54:	bd30      	pop	{r4, r5, pc}
 8011b56:	7605      	strb	r5, [r0, #24]
 8011b58:	6843      	ldr	r3, [r0, #4]
 8011b5a:	8819      	ldrh	r1, [r3, #0]
 8011b5c:	b199      	cbz	r1, 8011b86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011b5e:	1c9a      	adds	r2, r3, #2
 8011b60:	2902      	cmp	r1, #2
 8011b62:	6042      	str	r2, [r0, #4]
 8011b64:	d1f5      	bne.n	8011b52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8011b66:	7c03      	ldrb	r3, [r0, #16]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d8e5      	bhi.n	8011b38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	3302      	adds	r3, #2
 8011b70:	7402      	strb	r2, [r0, #16]
 8011b72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011b76:	6143      	str	r3, [r0, #20]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d0dd      	beq.n	8011b38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011b7c:	881b      	ldrh	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0da      	beq.n	8011b38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011b82:	7604      	strb	r4, [r0, #24]
 8011b84:	e7d8      	b.n	8011b38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011b86:	2000      	movs	r0, #0
 8011b88:	e7e4      	b.n	8011b54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011b8a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8011b8a:	b430      	push	{r4, r5}
 8011b8c:	6001      	str	r1, [r0, #0]
 8011b8e:	2100      	movs	r1, #0
 8011b90:	6041      	str	r1, [r0, #4]
 8011b92:	6815      	ldr	r5, [r2, #0]
 8011b94:	6085      	str	r5, [r0, #8]
 8011b96:	6852      	ldr	r2, [r2, #4]
 8011b98:	6443      	str	r3, [r0, #68]	@ 0x44
 8011b9a:	9b02      	ldr	r3, [sp, #8]
 8011b9c:	60c2      	str	r2, [r0, #12]
 8011b9e:	7401      	strb	r1, [r0, #16]
 8011ba0:	6141      	str	r1, [r0, #20]
 8011ba2:	7601      	strb	r1, [r0, #24]
 8011ba4:	8701      	strh	r1, [r0, #56]	@ 0x38
 8011ba6:	8401      	strh	r1, [r0, #32]
 8011ba8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8011bac:	6483      	str	r3, [r0, #72]	@ 0x48
 8011bae:	bc30      	pop	{r4, r5}
 8011bb0:	f7f9 ba48 	b.w	800b044 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08011bb4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8011bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	4608      	mov	r0, r1
 8011bba:	b1e9      	cbz	r1, 8011bf8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8011bbc:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	f101 0708 	add.w	r7, r1, #8
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	6818      	ldr	r0, [r3, #0]
 8011bca:	6859      	ldr	r1, [r3, #4]
 8011bcc:	4626      	mov	r6, r4
 8011bce:	c603      	stmia	r6!, {r0, r1}
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	42bb      	cmp	r3, r7
 8011bd4:	4634      	mov	r4, r6
 8011bd6:	d1f7      	bne.n	8011bc8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8011bd8:	6818      	ldr	r0, [r3, #0]
 8011bda:	6030      	str	r0, [r6, #0]
 8011bdc:	889b      	ldrh	r3, [r3, #4]
 8011bde:	80b3      	strh	r3, [r6, #4]
 8011be0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8011be4:	015b      	lsls	r3, r3, #5
 8011be6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8011bea:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8011bee:	430b      	orrs	r3, r1
 8011bf0:	425b      	negs	r3, r3
 8011bf2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8011bfa:	b538      	push	{r3, r4, r5, lr}
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	6811      	ldr	r1, [r2, #0]
 8011c00:	4610      	mov	r0, r2
 8011c02:	68cd      	ldr	r5, [r1, #12]
 8011c04:	4619      	mov	r1, r3
 8011c06:	47a8      	blx	r5
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	bf08      	it	eq
 8011c0c:	4620      	moveq	r0, r4
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}

08011c10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8011c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	468c      	mov	ip, r1
 8011c16:	4605      	mov	r5, r0
 8011c18:	4614      	mov	r4, r2
 8011c1a:	b942      	cbnz	r2, 8011c2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8011c1c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8011c20:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8011c24:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8011c28:	4620      	mov	r0, r4
 8011c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c2e:	7b50      	ldrb	r0, [r2, #13]
 8011c30:	8893      	ldrh	r3, [r2, #4]
 8011c32:	0106      	lsls	r6, r0, #4
 8011c34:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8011c38:	79e6      	ldrb	r6, [r4, #7]
 8011c3a:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8011c3e:	4316      	orrs	r6, r2
 8011c40:	185a      	adds	r2, r3, r1
 8011c42:	b291      	uxth	r1, r2
 8011c44:	291d      	cmp	r1, #29
 8011c46:	b2b7      	uxth	r7, r6
 8011c48:	d87e      	bhi.n	8011d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	408a      	lsls	r2, r1
 8011c4e:	498a      	ldr	r1, [pc, #552]	@ (8011e78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 8011c50:	420a      	tst	r2, r1
 8011c52:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8011c56:	d12d      	bne.n	8011cb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8011c58:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8011c5c:	d074      	beq.n	8011d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8011c5e:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8011c62:	4623      	mov	r3, r4
 8011c64:	f104 0e08 	add.w	lr, r4, #8
 8011c68:	4614      	mov	r4, r2
 8011c6a:	6818      	ldr	r0, [r3, #0]
 8011c6c:	6859      	ldr	r1, [r3, #4]
 8011c6e:	4694      	mov	ip, r2
 8011c70:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011c74:	3308      	adds	r3, #8
 8011c76:	4573      	cmp	r3, lr
 8011c78:	4662      	mov	r2, ip
 8011c7a:	d1f6      	bne.n	8011c6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8011c7c:	6818      	ldr	r0, [r3, #0]
 8011c7e:	f8cc 0000 	str.w	r0, [ip]
 8011c82:	889b      	ldrh	r3, [r3, #4]
 8011c84:	f8ac 3004 	strh.w	r3, [ip, #4]
 8011c88:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8011c8c:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8011c90:	b2b3      	uxth	r3, r6
 8011c92:	1aca      	subs	r2, r1, r3
 8011c94:	b292      	uxth	r2, r2
 8011c96:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8011c9a:	10d2      	asrs	r2, r2, #3
 8011c9c:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8011ca0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8011ca4:	4302      	orrs	r2, r0
 8011ca6:	1bcf      	subs	r7, r1, r7
 8011ca8:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8011cac:	1afb      	subs	r3, r7, r3
 8011cae:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8011cb2:	e7b9      	b.n	8011c28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8011cb4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8011cb8:	4623      	mov	r3, r4
 8011cba:	f104 0808 	add.w	r8, r4, #8
 8011cbe:	4614      	mov	r4, r2
 8011cc0:	6818      	ldr	r0, [r3, #0]
 8011cc2:	6859      	ldr	r1, [r3, #4]
 8011cc4:	4696      	mov	lr, r2
 8011cc6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8011cca:	3308      	adds	r3, #8
 8011ccc:	4543      	cmp	r3, r8
 8011cce:	4672      	mov	r2, lr
 8011cd0:	d1f6      	bne.n	8011cc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8011cd2:	6818      	ldr	r0, [r3, #0]
 8011cd4:	f8ce 0000 	str.w	r0, [lr]
 8011cd8:	889b      	ldrh	r3, [r3, #4]
 8011cda:	f8ae 3004 	strh.w	r3, [lr, #4]
 8011cde:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8011ce0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011ce4:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8011ce6:	f640 6333 	movw	r3, #3635	@ 0xe33
 8011cea:	4299      	cmp	r1, r3
 8011cec:	d111      	bne.n	8011d12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8011cee:	f8dc 3000 	ldr.w	r3, [ip]
 8011cf2:	4660      	mov	r0, ip
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	4798      	blx	r3
 8011cf8:	7b41      	ldrb	r1, [r0, #13]
 8011cfa:	00cb      	lsls	r3, r1, #3
 8011cfc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011d00:	7a03      	ldrb	r3, [r0, #8]
 8011d02:	4313      	orrs	r3, r2
 8011d04:	064a      	lsls	r2, r1, #25
 8011d06:	bf44      	itt	mi
 8011d08:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011d0c:	b21b      	sxthmi	r3, r3
 8011d0e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8011d12:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8011d16:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8011d1a:	443b      	add	r3, r7
 8011d1c:	4433      	add	r3, r6
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8011d24:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8011d28:	10db      	asrs	r3, r3, #3
 8011d2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011d2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011d32:	4313      	orrs	r3, r2
 8011d34:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8011d38:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8011d3c:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8011d40:	1a9b      	subs	r3, r3, r2
 8011d42:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8011d46:	e76f      	b.n	8011c28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8011d48:	f023 0204 	bic.w	r2, r3, #4
 8011d4c:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8011d50:	428a      	cmp	r2, r1
 8011d52:	d003      	beq.n	8011d5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 8011d54:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d137      	bne.n	8011dcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8011d5c:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8011d60:	4622      	mov	r2, r4
 8011d62:	f104 0808 	add.w	r8, r4, #8
 8011d66:	4634      	mov	r4, r6
 8011d68:	6810      	ldr	r0, [r2, #0]
 8011d6a:	6851      	ldr	r1, [r2, #4]
 8011d6c:	46b6      	mov	lr, r6
 8011d6e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8011d72:	3208      	adds	r2, #8
 8011d74:	4542      	cmp	r2, r8
 8011d76:	4676      	mov	r6, lr
 8011d78:	d1f6      	bne.n	8011d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8011d7a:	6810      	ldr	r0, [r2, #0]
 8011d7c:	f8ce 0000 	str.w	r0, [lr]
 8011d80:	8892      	ldrh	r2, [r2, #4]
 8011d82:	f8ae 2004 	strh.w	r2, [lr, #4]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	4662      	mov	r2, ip
 8011d8c:	4621      	mov	r1, r4
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f7ff ff33 	bl	8011bfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011d94:	7b41      	ldrb	r1, [r0, #13]
 8011d96:	00cb      	lsls	r3, r1, #3
 8011d98:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011d9c:	7a03      	ldrb	r3, [r0, #8]
 8011d9e:	0648      	lsls	r0, r1, #25
 8011da0:	ea43 0302 	orr.w	r3, r3, r2
 8011da4:	bf44      	itt	mi
 8011da6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011daa:	b21b      	sxthmi	r3, r3
 8011dac:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8011db0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8011db4:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	115a      	asrs	r2, r3, #5
 8011dc2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8011dc6:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8011dca:	e046      	b.n	8011e5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 8011dcc:	00c2      	lsls	r2, r0, #3
 8011dce:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8011dd2:	7a22      	ldrb	r2, [r4, #8]
 8011dd4:	430a      	orrs	r2, r1
 8011dd6:	0641      	lsls	r1, r0, #25
 8011dd8:	bf44      	itt	mi
 8011dda:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8011dde:	b212      	sxthmi	r2, r2
 8011de0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8011de4:	f640 6109 	movw	r1, #3593	@ 0xe09
 8011de8:	f023 0210 	bic.w	r2, r3, #16
 8011dec:	428a      	cmp	r2, r1
 8011dee:	d003      	beq.n	8011df8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 8011df0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8011df4:	4293      	cmp	r3, r2
 8011df6:	d13d      	bne.n	8011e74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 8011df8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8011dfc:	f104 0808 	add.w	r8, r4, #8
 8011e00:	4696      	mov	lr, r2
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	6861      	ldr	r1, [r4, #4]
 8011e06:	4616      	mov	r6, r2
 8011e08:	c603      	stmia	r6!, {r0, r1}
 8011e0a:	3408      	adds	r4, #8
 8011e0c:	4544      	cmp	r4, r8
 8011e0e:	4632      	mov	r2, r6
 8011e10:	d1f7      	bne.n	8011e02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8011e12:	6820      	ldr	r0, [r4, #0]
 8011e14:	6030      	str	r0, [r6, #0]
 8011e16:	88a1      	ldrh	r1, [r4, #4]
 8011e18:	80b1      	strh	r1, [r6, #4]
 8011e1a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8011e1e:	0076      	lsls	r6, r6, #1
 8011e20:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8011e24:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8011e28:	4316      	orrs	r6, r2
 8011e2a:	f640 6213 	movw	r2, #3603	@ 0xe13
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	bf1a      	itte	ne
 8011e32:	f103 33ff 	addne.w	r3, r3, #4294967295
 8011e36:	b29b      	uxthne	r3, r3
 8011e38:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8011e3c:	4662      	mov	r2, ip
 8011e3e:	4671      	mov	r1, lr
 8011e40:	4628      	mov	r0, r5
 8011e42:	4674      	mov	r4, lr
 8011e44:	f7ff fed9 	bl	8011bfa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011e48:	7b43      	ldrb	r3, [r0, #13]
 8011e4a:	7a82      	ldrb	r2, [r0, #10]
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e52:	4313      	orrs	r3, r2
 8011e54:	1af6      	subs	r6, r6, r3
 8011e56:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8011e5a:	7b61      	ldrb	r1, [r4, #13]
 8011e5c:	00cb      	lsls	r3, r1, #3
 8011e5e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011e62:	7a23      	ldrb	r3, [r4, #8]
 8011e64:	4313      	orrs	r3, r2
 8011e66:	064a      	lsls	r2, r1, #25
 8011e68:	bf44      	itt	mi
 8011e6a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011e6e:	b21b      	sxthmi	r3, r3
 8011e70:	1bdb      	subs	r3, r3, r7
 8011e72:	e71c      	b.n	8011cae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8011e74:	2300      	movs	r3, #0
 8011e76:	e7a6      	b.n	8011dc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 8011e78:	3fc00079 	.word	0x3fc00079

08011e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e80:	4604      	mov	r4, r0
 8011e82:	b942      	cbnz	r2, 8011e96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8011e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e88:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8011e8c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8011e90:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8011e94:	e047      	b.n	8011f26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8011e96:	7b51      	ldrb	r1, [r2, #13]
 8011e98:	8893      	ldrh	r3, [r2, #4]
 8011e9a:	010d      	lsls	r5, r1, #4
 8011e9c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8011ea0:	79d5      	ldrb	r5, [r2, #7]
 8011ea2:	4305      	orrs	r5, r0
 8011ea4:	2d04      	cmp	r5, #4
 8011ea6:	bfcc      	ite	gt
 8011ea8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8011eac:	f04f 0e01 	movle.w	lr, #1
 8011eb0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8011eb4:	f200 80ab 	bhi.w	801200e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8011eb8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8011ebc:	4283      	cmp	r3, r0
 8011ebe:	d216      	bcs.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ec0:	f240 605b 	movw	r0, #1627	@ 0x65b
 8011ec4:	4283      	cmp	r3, r0
 8011ec6:	d859      	bhi.n	8011f7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8011ec8:	f240 6057 	movw	r0, #1623	@ 0x657
 8011ecc:	4283      	cmp	r3, r0
 8011ece:	d20e      	bcs.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ed0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8011ed4:	d24a      	bcs.n	8011f6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8011ed6:	f240 604e 	movw	r0, #1614	@ 0x64e
 8011eda:	4283      	cmp	r3, r0
 8011edc:	d207      	bcs.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ede:	f240 601a 	movw	r0, #1562	@ 0x61a
 8011ee2:	4283      	cmp	r3, r0
 8011ee4:	d02a      	beq.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011ee6:	d821      	bhi.n	8011f2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8011ee8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8011eec:	d35b      	bcc.n	8011fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011eee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8011ef2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8011ef6:	f040 80d0 	bne.w	801209a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8011efa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8011efe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8011f02:	f040 80ca 	bne.w	801209a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8011f06:	00cb      	lsls	r3, r1, #3
 8011f08:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8011f0c:	7a13      	ldrb	r3, [r2, #8]
 8011f0e:	0649      	lsls	r1, r1, #25
 8011f10:	ea43 0300 	orr.w	r3, r3, r0
 8011f14:	bf44      	itt	mi
 8011f16:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011f1a:	b21b      	sxthmi	r3, r3
 8011f1c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011f20:	1b5d      	subs	r5, r3, r5
 8011f22:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8011f26:	4610      	mov	r0, r2
 8011f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f2c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8011f30:	4283      	cmp	r3, r0
 8011f32:	d338      	bcc.n	8011fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011f34:	f240 604c 	movw	r0, #1612	@ 0x64c
 8011f38:	4283      	cmp	r3, r0
 8011f3a:	d9d8      	bls.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011f3c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8011f40:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8011f44:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8011f48:	f040 80f2 	bne.w	8012130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8011f4c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8011f50:	f040 80ee 	bne.w	8012130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8011f54:	00cb      	lsls	r3, r1, #3
 8011f56:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8011f5a:	7a13      	ldrb	r3, [r2, #8]
 8011f5c:	064e      	lsls	r6, r1, #25
 8011f5e:	ea43 0300 	orr.w	r3, r3, r0
 8011f62:	bf44      	itt	mi
 8011f64:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011f68:	b21b      	sxthmi	r3, r3
 8011f6a:	e7d9      	b.n	8011f20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8011f6c:	f240 6054 	movw	r0, #1620	@ 0x654
 8011f70:	4283      	cmp	r3, r0
 8011f72:	d8e3      	bhi.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011f74:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8011f78:	d9e0      	bls.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011f7a:	e7b8      	b.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011f7c:	f240 6074 	movw	r0, #1652	@ 0x674
 8011f80:	4283      	cmp	r3, r0
 8011f82:	d0b4      	beq.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011f84:	d82d      	bhi.n	8011fe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8011f86:	f240 605e 	movw	r0, #1630	@ 0x65e
 8011f8a:	4283      	cmp	r3, r0
 8011f8c:	d804      	bhi.n	8011f98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8011f8e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8011f92:	4283      	cmp	r3, r0
 8011f94:	d3d2      	bcc.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011f96:	e7aa      	b.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011f98:	f240 605f 	movw	r0, #1631	@ 0x65f
 8011f9c:	4283      	cmp	r3, r0
 8011f9e:	d0cd      	beq.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011fa0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8011fa4:	d0a3      	beq.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011fa6:	00cb      	lsls	r3, r1, #3
 8011fa8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8011fac:	7a13      	ldrb	r3, [r2, #8]
 8011fae:	0649      	lsls	r1, r1, #25
 8011fb0:	ea43 0300 	orr.w	r3, r3, r0
 8011fb4:	bf44      	itt	mi
 8011fb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011fba:	b21b      	sxthmi	r3, r3
 8011fbc:	1b5d      	subs	r5, r3, r5
 8011fbe:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011fc2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8011fc6:	7b53      	ldrb	r3, [r2, #13]
 8011fc8:	015b      	lsls	r3, r3, #5
 8011fca:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8011fce:	7993      	ldrb	r3, [r2, #6]
 8011fd0:	430b      	orrs	r3, r1
 8011fd2:	005b      	lsls	r3, r3, #1
 8011fd4:	2105      	movs	r1, #5
 8011fd6:	fb93 f3f1 	sdiv	r3, r3, r1
 8011fda:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8011fde:	440b      	add	r3, r1
 8011fe0:	e756      	b.n	8011e90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8011fe2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8011fe6:	4283      	cmp	r3, r0
 8011fe8:	d809      	bhi.n	8011ffe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8011fea:	f240 60df 	movw	r0, #1759	@ 0x6df
 8011fee:	4283      	cmp	r3, r0
 8011ff0:	f4bf af7d 	bcs.w	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ff4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8011ff8:	2b05      	cmp	r3, #5
 8011ffa:	d8d4      	bhi.n	8011fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011ffc:	e777      	b.n	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ffe:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8012002:	4283      	cmp	r3, r0
 8012004:	d09a      	beq.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012006:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801200a:	4283      	cmp	r3, r0
 801200c:	e7ca      	b.n	8011fa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801200e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8012012:	d22b      	bcs.n	801206c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8012014:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8012018:	4283      	cmp	r3, r0
 801201a:	d28f      	bcs.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801201c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8012020:	4283      	cmp	r3, r0
 8012022:	d816      	bhi.n	8012052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8012024:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8012028:	4283      	cmp	r3, r0
 801202a:	f4bf af60 	bcs.w	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801202e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8012032:	4283      	cmp	r3, r0
 8012034:	d80a      	bhi.n	801204c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8012036:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801203a:	4283      	cmp	r3, r0
 801203c:	f4bf af57 	bcs.w	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012040:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8012044:	4283      	cmp	r3, r0
 8012046:	f43f af79 	beq.w	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801204a:	e7ac      	b.n	8011fa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801204c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8012050:	e7f8      	b.n	8012044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8012052:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8012056:	4283      	cmp	r3, r0
 8012058:	d802      	bhi.n	8012060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801205a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801205e:	e798      	b.n	8011f92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8012060:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8012064:	4283      	cmp	r3, r0
 8012066:	f47f af42 	bne.w	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801206a:	e767      	b.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801206c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8012070:	4283      	cmp	r3, r0
 8012072:	f43f af63 	beq.w	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012076:	d802      	bhi.n	801207e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8012078:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801207c:	e7f2      	b.n	8012064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801207e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8012082:	4283      	cmp	r3, r0
 8012084:	d805      	bhi.n	8012092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8012086:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801208a:	4283      	cmp	r3, r0
 801208c:	f4ff af2f 	bcc.w	8011eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012090:	e754      	b.n	8011f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012092:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8012096:	4283      	cmp	r3, r0
 8012098:	e7af      	b.n	8011ffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801209a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801209e:	4617      	mov	r7, r2
 80120a0:	f102 0808 	add.w	r8, r2, #8
 80120a4:	4666      	mov	r6, ip
 80120a6:	6838      	ldr	r0, [r7, #0]
 80120a8:	6879      	ldr	r1, [r7, #4]
 80120aa:	46e6      	mov	lr, ip
 80120ac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80120b0:	3708      	adds	r7, #8
 80120b2:	4547      	cmp	r7, r8
 80120b4:	46f4      	mov	ip, lr
 80120b6:	d1f6      	bne.n	80120a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80120b8:	6838      	ldr	r0, [r7, #0]
 80120ba:	f8ce 0000 	str.w	r0, [lr]
 80120be:	88b9      	ldrh	r1, [r7, #4]
 80120c0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80120c4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80120c8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80120cc:	d009      	beq.n	80120e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80120ce:	7b51      	ldrb	r1, [r2, #13]
 80120d0:	7992      	ldrb	r2, [r2, #6]
 80120d2:	0149      	lsls	r1, r1, #5
 80120d4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80120d8:	4311      	orrs	r1, r2
 80120da:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80120de:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80120e2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80120e6:	b2ad      	uxth	r5, r5
 80120e8:	d00d      	beq.n	8012106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80120ea:	442b      	add	r3, r5
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80120f2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80120f6:	10db      	asrs	r3, r3, #3
 80120f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80120fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012100:	4313      	orrs	r3, r2
 8012102:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8012106:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801210a:	00cb      	lsls	r3, r1, #3
 801210c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012110:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8012114:	064f      	lsls	r7, r1, #25
 8012116:	ea43 0302 	orr.w	r3, r3, r2
 801211a:	bf44      	itt	mi
 801211c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8012120:	b21b      	sxthmi	r3, r3
 8012122:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8012126:	1b5b      	subs	r3, r3, r5
 8012128:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801212c:	4632      	mov	r2, r6
 801212e:	e6fa      	b.n	8011f26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8012130:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8012134:	4617      	mov	r7, r2
 8012136:	f102 0908 	add.w	r9, r2, #8
 801213a:	4666      	mov	r6, ip
 801213c:	6838      	ldr	r0, [r7, #0]
 801213e:	6879      	ldr	r1, [r7, #4]
 8012140:	46e0      	mov	r8, ip
 8012142:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8012146:	3708      	adds	r7, #8
 8012148:	454f      	cmp	r7, r9
 801214a:	46c4      	mov	ip, r8
 801214c:	d1f6      	bne.n	801213c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801214e:	6838      	ldr	r0, [r7, #0]
 8012150:	f8c8 0000 	str.w	r0, [r8]
 8012154:	88b9      	ldrh	r1, [r7, #4]
 8012156:	f8a8 1004 	strh.w	r1, [r8, #4]
 801215a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801215e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8012162:	d009      	beq.n	8012178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8012164:	7b51      	ldrb	r1, [r2, #13]
 8012166:	7992      	ldrb	r2, [r2, #6]
 8012168:	0149      	lsls	r1, r1, #5
 801216a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801216e:	4311      	orrs	r1, r2
 8012170:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012174:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8012178:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801217c:	d00e      	beq.n	801219c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801217e:	eba3 030e 	sub.w	r3, r3, lr
 8012182:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8012186:	b29b      	uxth	r3, r3
 8012188:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801218c:	10db      	asrs	r3, r3, #3
 801218e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012192:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012196:	4313      	orrs	r3, r2
 8012198:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801219c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80121a0:	00cb      	lsls	r3, r1, #3
 80121a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80121a6:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80121aa:	0648      	lsls	r0, r1, #25
 80121ac:	ea43 0302 	orr.w	r3, r3, r2
 80121b0:	bf44      	itt	mi
 80121b2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80121b6:	b21b      	sxthmi	r3, r3
 80121b8:	1b5d      	subs	r5, r3, r5
 80121ba:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80121be:	e7b5      	b.n	801212c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080121c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80121c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c4:	461e      	mov	r6, r3
 80121c6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80121c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80121cc:	4604      	mov	r4, r0
 80121ce:	4617      	mov	r7, r2
 80121d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80121d4:	f7f8 fe90 	bl	800aef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80121d8:	4605      	mov	r5, r0
 80121da:	b918      	cbnz	r0, 80121e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80121dc:	6030      	str	r0, [r6, #0]
 80121de:	4628      	mov	r0, r5
 80121e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	4601      	mov	r1, r0
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	4638      	mov	r0, r7
 80121ec:	4798      	blx	r3
 80121ee:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80121f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80121f6:	4602      	mov	r2, r0
 80121f8:	6030      	str	r0, [r6, #0]
 80121fa:	d213      	bcs.n	8012224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80121fc:	4643      	mov	r3, r8
 80121fe:	4639      	mov	r1, r7
 8012200:	4620      	mov	r0, r4
 8012202:	f7ff fe3b 	bl	8011e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012206:	6030      	str	r0, [r6, #0]
 8012208:	6833      	ldr	r3, [r6, #0]
 801220a:	b143      	cbz	r3, 801221e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801220c:	7b5a      	ldrb	r2, [r3, #13]
 801220e:	7a9b      	ldrb	r3, [r3, #10]
 8012210:	0052      	lsls	r2, r2, #1
 8012212:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8012216:	4313      	orrs	r3, r2
 8012218:	bf0c      	ite	eq
 801221a:	2301      	moveq	r3, #1
 801221c:	2300      	movne	r3, #0
 801221e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8012222:	e7dc      	b.n	80121de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8012224:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8012228:	b29b      	uxth	r3, r3
 801222a:	2b7f      	cmp	r3, #127	@ 0x7f
 801222c:	d804      	bhi.n	8012238 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801222e:	4639      	mov	r1, r7
 8012230:	4620      	mov	r0, r4
 8012232:	f7ff fced 	bl	8011c10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012236:	e7e6      	b.n	8012206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8012238:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801223c:	2b00      	cmp	r3, #0
 801223e:	d0e3      	beq.n	8012208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8012240:	f640 1302 	movw	r3, #2306	@ 0x902
 8012244:	429d      	cmp	r5, r3
 8012246:	d1df      	bne.n	8012208 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8012248:	4601      	mov	r1, r0
 801224a:	4620      	mov	r0, r4
 801224c:	f7ff fcb2 	bl	8011bb4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012250:	e7d9      	b.n	8012206 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08012252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012256:	461e      	mov	r6, r3
 8012258:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801225a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801225e:	4604      	mov	r4, r0
 8012260:	4617      	mov	r7, r2
 8012262:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8012266:	f7f8 fe47 	bl	800aef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801226a:	4605      	mov	r5, r0
 801226c:	b918      	cbnz	r0, 8012276 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801226e:	6030      	str	r0, [r6, #0]
 8012270:	4628      	mov	r0, r5
 8012272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	4601      	mov	r1, r0
 801227a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801227e:	4638      	mov	r0, r7
 8012280:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012284:	47c8      	blx	r9
 8012286:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801228a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801228e:	4602      	mov	r2, r0
 8012290:	6030      	str	r0, [r6, #0]
 8012292:	d213      	bcs.n	80122bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8012294:	4643      	mov	r3, r8
 8012296:	4639      	mov	r1, r7
 8012298:	4620      	mov	r0, r4
 801229a:	f7ff fdef 	bl	8011e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801229e:	6030      	str	r0, [r6, #0]
 80122a0:	6833      	ldr	r3, [r6, #0]
 80122a2:	b143      	cbz	r3, 80122b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80122a4:	7b5a      	ldrb	r2, [r3, #13]
 80122a6:	7a9b      	ldrb	r3, [r3, #10]
 80122a8:	0052      	lsls	r2, r2, #1
 80122aa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80122ae:	4313      	orrs	r3, r2
 80122b0:	bf0c      	ite	eq
 80122b2:	2301      	moveq	r3, #1
 80122b4:	2300      	movne	r3, #0
 80122b6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80122ba:	e7d9      	b.n	8012270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80122bc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80122c4:	d804      	bhi.n	80122d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80122c6:	4639      	mov	r1, r7
 80122c8:	4620      	mov	r0, r4
 80122ca:	f7ff fca1 	bl	8011c10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80122ce:	e7e6      	b.n	801229e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80122d0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d0e3      	beq.n	80122a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80122d8:	f640 1302 	movw	r3, #2306	@ 0x902
 80122dc:	429d      	cmp	r5, r3
 80122de:	d1df      	bne.n	80122a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80122e0:	4601      	mov	r1, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	f7ff fc66 	bl	8011bb4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80122e8:	e7d9      	b.n	801229e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080122ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80122ea:	b510      	push	{r4, lr}
 80122ec:	4604      	mov	r4, r0
 80122ee:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80122f2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80122f4:	b1f1      	cbz	r1, 8012334 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80122f6:	2b0a      	cmp	r3, #10
 80122f8:	d02f      	beq.n	801235a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80122fa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80122fc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8012300:	3901      	subs	r1, #1
 8012302:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8012304:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8012308:	1c51      	adds	r1, r2, #1
 801230a:	b289      	uxth	r1, r1
 801230c:	2901      	cmp	r1, #1
 801230e:	bf84      	itt	hi
 8012310:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012314:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8012316:	f103 0201 	add.w	r2, r3, #1
 801231a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801231c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801231e:	bf98      	it	ls
 8012320:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8012322:	4413      	add	r3, r2
 8012324:	b29b      	uxth	r3, r3
 8012326:	2b09      	cmp	r3, #9
 8012328:	bf88      	it	hi
 801232a:	3b0a      	subhi	r3, #10
 801232c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012330:	8458      	strh	r0, [r3, #34]	@ 0x22
 8012332:	e7dc      	b.n	80122ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8012334:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8012336:	2b0a      	cmp	r3, #10
 8012338:	d00f      	beq.n	801235a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801233a:	4620      	mov	r0, r4
 801233c:	f7ff fbf9 	bl	8011b32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8012340:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8012342:	1c5a      	adds	r2, r3, #1
 8012344:	8722      	strh	r2, [r4, #56]	@ 0x38
 8012346:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8012348:	4413      	add	r3, r2
 801234a:	b29b      	uxth	r3, r3
 801234c:	2b09      	cmp	r3, #9
 801234e:	bf88      	it	hi
 8012350:	3b0a      	subhi	r3, #10
 8012352:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012356:	8458      	strh	r0, [r3, #34]	@ 0x22
 8012358:	e7ec      	b.n	8012334 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801235a:	bd10      	pop	{r4, pc}

0801235c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801235c:	b538      	push	{r3, r4, r5, lr}
 801235e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8012360:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8012364:	4604      	mov	r4, r0
 8012366:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8012368:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801236a:	3a01      	subs	r2, #1
 801236c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801236e:	1c5a      	adds	r2, r3, #1
 8012370:	b292      	uxth	r2, r2
 8012372:	2a09      	cmp	r2, #9
 8012374:	bf86      	itte	hi
 8012376:	3b09      	subhi	r3, #9
 8012378:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801237a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801237c:	f7ff ffb5 	bl	80122ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8012380:	8c23      	ldrh	r3, [r4, #32]
 8012382:	2b01      	cmp	r3, #1
 8012384:	bf9c      	itt	ls
 8012386:	3301      	addls	r3, #1
 8012388:	8423      	strhls	r3, [r4, #32]
 801238a:	8be3      	ldrh	r3, [r4, #30]
 801238c:	b90b      	cbnz	r3, 8012392 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801238e:	2302      	movs	r3, #2
 8012390:	83e3      	strh	r3, [r4, #30]
 8012392:	8be3      	ldrh	r3, [r4, #30]
 8012394:	3b01      	subs	r3, #1
 8012396:	b29b      	uxth	r3, r3
 8012398:	83e3      	strh	r3, [r4, #30]
 801239a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801239e:	4628      	mov	r0, r5
 80123a0:	8365      	strh	r5, [r4, #26]
 80123a2:	bd38      	pop	{r3, r4, r5, pc}

080123a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80123a4:	428a      	cmp	r2, r1
 80123a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123aa:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80123ac:	d931      	bls.n	8012412 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80123ae:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80123b0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80123b4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80123b8:	19ee      	adds	r6, r5, r7
 80123ba:	1a54      	subs	r4, r2, r1
 80123bc:	3e01      	subs	r6, #1
 80123be:	fa1f fe84 	uxth.w	lr, r4
 80123c2:	b2b4      	uxth	r4, r6
 80123c4:	eba4 090e 	sub.w	r9, r4, lr
 80123c8:	fa1f f989 	uxth.w	r9, r9
 80123cc:	2c09      	cmp	r4, #9
 80123ce:	4626      	mov	r6, r4
 80123d0:	bf88      	it	hi
 80123d2:	f1a4 060a 	subhi.w	r6, r4, #10
 80123d6:	f1bc 0f00 	cmp.w	ip, #0
 80123da:	bf08      	it	eq
 80123dc:	f04f 0c02 	moveq.w	ip, #2
 80123e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80123e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80123e8:	fa1f fc8c 	uxth.w	ip, ip
 80123ec:	3c01      	subs	r4, #1
 80123ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80123f2:	b2a4      	uxth	r4, r4
 80123f4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80123f8:	454c      	cmp	r4, r9
 80123fa:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80123fe:	d1e5      	bne.n	80123cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8012400:	eba5 050e 	sub.w	r5, r5, lr
 8012404:	eb0e 0408 	add.w	r4, lr, r8
 8012408:	8705      	strh	r5, [r0, #56]	@ 0x38
 801240a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801240e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8012412:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8012414:	1a64      	subs	r4, r4, r1
 8012416:	4439      	add	r1, r7
 8012418:	b289      	uxth	r1, r1
 801241a:	2909      	cmp	r1, #9
 801241c:	bf88      	it	hi
 801241e:	390a      	subhi	r1, #10
 8012420:	8704      	strh	r4, [r0, #56]	@ 0x38
 8012422:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8012424:	250a      	movs	r5, #10
 8012426:	b18a      	cbz	r2, 801244c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8012428:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801242a:	3a01      	subs	r2, #1
 801242c:	b292      	uxth	r2, r2
 801242e:	3101      	adds	r1, #1
 8012430:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012434:	8701      	strh	r1, [r0, #56]	@ 0x38
 8012436:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8012438:	b901      	cbnz	r1, 801243c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801243a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801243c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801243e:	3901      	subs	r1, #1
 8012440:	b289      	uxth	r1, r1
 8012442:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8012444:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012448:	844c      	strh	r4, [r1, #34]	@ 0x22
 801244a:	e7ec      	b.n	8012426 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801244c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012450:	f7ff bf4b 	b.w	80122ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08012454 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	2500      	movs	r5, #0
 8012458:	4295      	cmp	r5, r2
 801245a:	d011      	beq.n	8012480 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801245c:	8bc4      	ldrh	r4, [r0, #30]
 801245e:	f831 6b02 	ldrh.w	r6, [r1], #2
 8012462:	4414      	add	r4, r2
 8012464:	3c01      	subs	r4, #1
 8012466:	1b64      	subs	r4, r4, r5
 8012468:	b2a4      	uxth	r4, r4
 801246a:	2c01      	cmp	r4, #1
 801246c:	bf88      	it	hi
 801246e:	3c02      	subhi	r4, #2
 8012470:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012474:	8b64      	ldrh	r4, [r4, #26]
 8012476:	42b4      	cmp	r4, r6
 8012478:	d117      	bne.n	80124aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801247a:	3501      	adds	r5, #1
 801247c:	b2ad      	uxth	r5, r5
 801247e:	e7eb      	b.n	8012458 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8012480:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012484:	2400      	movs	r4, #0
 8012486:	4413      	add	r3, r2
 8012488:	b2a2      	uxth	r2, r4
 801248a:	429a      	cmp	r2, r3
 801248c:	da0f      	bge.n	80124ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801248e:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8012490:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012494:	4432      	add	r2, r6
 8012496:	b292      	uxth	r2, r2
 8012498:	2a09      	cmp	r2, #9
 801249a:	bf88      	it	hi
 801249c:	3a0a      	subhi	r2, #10
 801249e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80124a2:	3401      	adds	r4, #1
 80124a4:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80124a6:	42aa      	cmp	r2, r5
 80124a8:	d0ee      	beq.n	8012488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80124aa:	2000      	movs	r0, #0
 80124ac:	bd70      	pop	{r4, r5, r6, pc}
 80124ae:	2001      	movs	r0, #1
 80124b0:	e7fc      	b.n	80124ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080124b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80124b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b6:	4605      	mov	r5, r0
 80124b8:	4616      	mov	r6, r2
 80124ba:	1c8c      	adds	r4, r1, #2
 80124bc:	8809      	ldrh	r1, [r1, #0]
 80124be:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80124c2:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80124c6:	42b3      	cmp	r3, r6
 80124c8:	d124      	bne.n	8012514 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80124ca:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80124ce:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80124d2:	f001 070f 	and.w	r7, r1, #15
 80124d6:	f8cd 8000 	str.w	r8, [sp]
 80124da:	464b      	mov	r3, r9
 80124dc:	4652      	mov	r2, sl
 80124de:	4621      	mov	r1, r4
 80124e0:	4628      	mov	r0, r5
 80124e2:	f7ff ffb7 	bl	8012454 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80124e6:	4683      	mov	fp, r0
 80124e8:	b168      	cbz	r0, 8012506 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80124ea:	eb0a 0109 	add.w	r1, sl, r9
 80124ee:	4441      	add	r1, r8
 80124f0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80124f4:	463a      	mov	r2, r7
 80124f6:	4649      	mov	r1, r9
 80124f8:	4628      	mov	r0, r5
 80124fa:	f7ff ff53 	bl	80123a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80124fe:	4658      	mov	r0, fp
 8012500:	b003      	add	sp, #12
 8012502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012506:	eb07 010a 	add.w	r1, r7, sl
 801250a:	4449      	add	r1, r9
 801250c:	4441      	add	r1, r8
 801250e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012512:	e7d2      	b.n	80124ba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012514:	f04f 0b00 	mov.w	fp, #0
 8012518:	e7f1      	b.n	80124fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801251a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801251a:	b570      	push	{r4, r5, r6, lr}
 801251c:	8810      	ldrh	r0, [r2, #0]
 801251e:	4298      	cmp	r0, r3
 8012520:	d817      	bhi.n	8012552 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012522:	1e48      	subs	r0, r1, #1
 8012524:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012528:	4298      	cmp	r0, r3
 801252a:	d312      	bcc.n	8012552 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801252c:	2400      	movs	r4, #0
 801252e:	428c      	cmp	r4, r1
 8012530:	d20f      	bcs.n	8012552 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012532:	1860      	adds	r0, r4, r1
 8012534:	1040      	asrs	r0, r0, #1
 8012536:	0085      	lsls	r5, r0, #2
 8012538:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801253c:	42b3      	cmp	r3, r6
 801253e:	d902      	bls.n	8012546 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8012540:	3001      	adds	r0, #1
 8012542:	b284      	uxth	r4, r0
 8012544:	e7f3      	b.n	801252e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012546:	d201      	bcs.n	801254c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012548:	b281      	uxth	r1, r0
 801254a:	e7f0      	b.n	801252e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801254c:	442a      	add	r2, r5
 801254e:	8850      	ldrh	r0, [r2, #2]
 8012550:	bd70      	pop	{r4, r5, r6, pc}
 8012552:	2000      	movs	r0, #0
 8012554:	e7fc      	b.n	8012550 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012556 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801255c:	886f      	ldrh	r7, [r5, #2]
 801255e:	4604      	mov	r4, r0
 8012560:	087f      	lsrs	r7, r7, #1
 8012562:	260b      	movs	r6, #11
 8012564:	3e01      	subs	r6, #1
 8012566:	d013      	beq.n	8012590 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8012568:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801256a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801256e:	462a      	mov	r2, r5
 8012570:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8012574:	4639      	mov	r1, r7
 8012576:	4643      	mov	r3, r8
 8012578:	4620      	mov	r0, r4
 801257a:	f7ff ffce 	bl	801251a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801257e:	b138      	cbz	r0, 8012590 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8012580:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012584:	4642      	mov	r2, r8
 8012586:	4620      	mov	r0, r4
 8012588:	f7ff ff93 	bl	80124b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801258c:	2800      	cmp	r0, #0
 801258e:	d1e9      	bne.n	8012564 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012594 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012594:	b570      	push	{r4, r5, r6, lr}
 8012596:	694a      	ldr	r2, [r1, #20]
 8012598:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801259a:	684b      	ldr	r3, [r1, #4]
 801259c:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801259e:	1b54      	subs	r4, r2, r5
 80125a0:	f000 8106 	beq.w	80127b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80125a4:	1b9b      	subs	r3, r3, r6
 80125a6:	d003      	beq.n	80125b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80125a8:	4363      	muls	r3, r4
 80125aa:	2210      	movs	r2, #16
 80125ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80125b0:	680c      	ldr	r4, [r1, #0]
 80125b2:	698a      	ldr	r2, [r1, #24]
 80125b4:	1b65      	subs	r5, r4, r5
 80125b6:	f000 80fd 	beq.w	80127b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80125ba:	1b92      	subs	r2, r2, r6
 80125bc:	d003      	beq.n	80125c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80125be:	436a      	muls	r2, r5
 80125c0:	2410      	movs	r4, #16
 80125c2:	fb92 f2f4 	sdiv	r2, r2, r4
 80125c6:	1a9b      	subs	r3, r3, r2
 80125c8:	ee07 3a90 	vmov	s15, r3
 80125cc:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 80127f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80125d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80125d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80125dc:	460a      	mov	r2, r1
 80125de:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80125e2:	4603      	mov	r3, r0
 80125e4:	f100 040c 	add.w	r4, r0, #12
 80125e8:	eeb1 6a43 	vneg.f32	s12, s6
 80125ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80125f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80125f4:	3214      	adds	r2, #20
 80125f6:	ece3 6a01 	vstmia	r3!, {s13}
 80125fa:	ed52 7a02 	vldr	s15, [r2, #-8]
 80125fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012602:	429c      	cmp	r4, r3
 8012604:	edc3 7a02 	vstr	s15, [r3, #8]
 8012608:	ed52 7a01 	vldr	s15, [r2, #-4]
 801260c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012610:	edc3 7a05 	vstr	s15, [r3, #20]
 8012614:	d1ea      	bne.n	80125ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012616:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8012618:	698b      	ldr	r3, [r1, #24]
 801261a:	edd0 4a02 	vldr	s9, [r0, #8]
 801261e:	edd0 3a00 	vldr	s7, [r0]
 8012622:	edd0 6a01 	vldr	s13, [r0, #4]
 8012626:	ed90 5a05 	vldr	s10, [r0, #20]
 801262a:	ed90 2a03 	vldr	s4, [r0, #12]
 801262e:	edd0 5a04 	vldr	s11, [r0, #16]
 8012632:	ed90 1a07 	vldr	s2, [r0, #28]
 8012636:	edd0 2a06 	vldr	s5, [r0, #24]
 801263a:	1a9b      	subs	r3, r3, r2
 801263c:	ee07 3a90 	vmov	s15, r3
 8012640:	684b      	ldr	r3, [r1, #4]
 8012642:	1a9b      	subs	r3, r3, r2
 8012644:	ee07 3a10 	vmov	s14, r3
 8012648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801264c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012650:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012654:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801265c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012660:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012664:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012668:	eee6 7a87 	vfma.f32	s15, s13, s14
 801266c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012670:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012674:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8012678:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801267a:	694a      	ldr	r2, [r1, #20]
 801267c:	1b13      	subs	r3, r2, r4
 801267e:	ee07 3a10 	vmov	s14, r3
 8012682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012686:	680b      	ldr	r3, [r1, #0]
 8012688:	ee27 7a04 	vmul.f32	s14, s14, s8
 801268c:	1b1b      	subs	r3, r3, r4
 801268e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012692:	ee07 3a10 	vmov	s14, r3
 8012696:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801269a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801269e:	eee6 4a87 	vfma.f32	s9, s13, s14
 80126a2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80126a6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80126aa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80126ac:	698b      	ldr	r3, [r1, #24]
 80126ae:	1a9b      	subs	r3, r3, r2
 80126b0:	ee06 3a90 	vmov	s13, r3
 80126b4:	684b      	ldr	r3, [r1, #4]
 80126b6:	1a9b      	subs	r3, r3, r2
 80126b8:	ee07 3a10 	vmov	s14, r3
 80126bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80126c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80126c4:	ee66 6a84 	vmul.f32	s13, s13, s8
 80126c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80126cc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80126d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80126d4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80126d8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80126dc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80126de:	694a      	ldr	r2, [r1, #20]
 80126e0:	1b13      	subs	r3, r2, r4
 80126e2:	ee07 3a10 	vmov	s14, r3
 80126e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80126ea:	680b      	ldr	r3, [r1, #0]
 80126ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80126f0:	1b1b      	subs	r3, r3, r4
 80126f2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80126f6:	ee07 3a10 	vmov	s14, r3
 80126fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80126fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012702:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012706:	edd0 5a08 	vldr	s11, [r0, #32]
 801270a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801270e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012712:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8012716:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8012718:	698b      	ldr	r3, [r1, #24]
 801271a:	1a9b      	subs	r3, r3, r2
 801271c:	ee07 3a10 	vmov	s14, r3
 8012720:	684b      	ldr	r3, [r1, #4]
 8012722:	1a9b      	subs	r3, r3, r2
 8012724:	ee01 3a90 	vmov	s3, r3
 8012728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801272c:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012730:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012734:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012738:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801273c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012740:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012744:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012748:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801274c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801274e:	694a      	ldr	r2, [r1, #20]
 8012750:	1b13      	subs	r3, r2, r4
 8012752:	ee03 3a10 	vmov	s6, r3
 8012756:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801275a:	680b      	ldr	r3, [r1, #0]
 801275c:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012760:	1b1b      	subs	r3, r3, r4
 8012762:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012766:	ee03 3a10 	vmov	s6, r3
 801276a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801276e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012772:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012776:	ee25 6a86 	vmul.f32	s12, s11, s12
 801277a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801277e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8012782:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012786:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278e:	dd13      	ble.n	80127b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012794:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012798:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801279a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801279e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a6:	dd15      	ble.n	80127d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80127a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80127ac:	6403      	str	r3, [r0, #64]	@ 0x40
 80127ae:	bd70      	pop	{r4, r5, r6, pc}
 80127b0:	4623      	mov	r3, r4
 80127b2:	e6fd      	b.n	80125b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80127b4:	462a      	mov	r2, r5
 80127b6:	e706      	b.n	80125c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80127b8:	d502      	bpl.n	80127c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80127ba:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80127be:	e7e9      	b.n	8012794 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80127c0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80127c4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80127c8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80127cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d0:	dade      	bge.n	8012790 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80127d2:	e7f2      	b.n	80127ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80127d4:	d502      	bpl.n	80127dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80127d6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80127da:	e7e7      	b.n	80127ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80127dc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80127e0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80127e4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80127e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ec:	dadc      	bge.n	80127a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80127ee:	e7f2      	b.n	80127d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80127f0:	3d800000 	.word	0x3d800000

080127f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80127f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127f8:	2714      	movs	r7, #20
 80127fa:	435f      	muls	r7, r3
 80127fc:	eb02 0c07 	add.w	ip, r2, r7
 8012800:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8012804:	f115 0e0f 	adds.w	lr, r5, #15
 8012808:	f100 80a2 	bmi.w	8012950 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801280c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8012810:	9c08      	ldr	r4, [sp, #32]
 8012812:	f8c0 e014 	str.w	lr, [r0, #20]
 8012816:	2614      	movs	r6, #20
 8012818:	4366      	muls	r6, r4
 801281a:	eb02 0806 	add.w	r8, r2, r6
 801281e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012822:	f115 040f 	adds.w	r4, r5, #15
 8012826:	f100 809f 	bmi.w	8012968 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801282a:	1124      	asrs	r4, r4, #4
 801282c:	eba4 040e 	sub.w	r4, r4, lr
 8012830:	6184      	str	r4, [r0, #24]
 8012832:	2c00      	cmp	r4, #0
 8012834:	f000 808a 	beq.w	801294c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8012838:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801283c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012840:	5995      	ldr	r5, [r2, r6]
 8012842:	eba4 0809 	sub.w	r8, r4, r9
 8012846:	59d4      	ldr	r4, [r2, r7]
 8012848:	eba5 0a04 	sub.w	sl, r5, r4
 801284c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8012850:	fb0e fe05 	mul.w	lr, lr, r5
 8012854:	fb0a ee19 	mls	lr, sl, r9, lr
 8012858:	fb08 e404 	mla	r4, r8, r4, lr
 801285c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8012860:	3c01      	subs	r4, #1
 8012862:	19a4      	adds	r4, r4, r6
 8012864:	f100 808c 	bmi.w	8012980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8012868:	fb94 fef6 	sdiv	lr, r4, r6
 801286c:	f8c0 e000 	str.w	lr, [r0]
 8012870:	fb06 441e 	mls	r4, r6, lr, r4
 8012874:	6104      	str	r4, [r0, #16]
 8012876:	2d00      	cmp	r5, #0
 8012878:	f2c0 8095 	blt.w	80129a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801287c:	fb95 f4f6 	sdiv	r4, r5, r6
 8012880:	6044      	str	r4, [r0, #4]
 8012882:	fb06 5514 	mls	r5, r6, r4, r5
 8012886:	6085      	str	r5, [r0, #8]
 8012888:	60c6      	str	r6, [r0, #12]
 801288a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801288e:	6945      	ldr	r5, [r0, #20]
 8012890:	59d2      	ldr	r2, [r2, r7]
 8012892:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80129c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8012896:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801289a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801289e:	ee07 4a10 	vmov	s14, r4
 80128a2:	6804      	ldr	r4, [r0, #0]
 80128a4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80128a8:	ee07 2a90 	vmov	s15, r2
 80128ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80128b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80128bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128c0:	edd3 6a00 	vldr	s13, [r3]
 80128c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80128c8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80128cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80128d0:	edc0 6a07 	vstr	s13, [r0, #28]
 80128d4:	edd0 6a01 	vldr	s13, [r0, #4]
 80128d8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80128dc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80128e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80128e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80128e8:	ed80 6a08 	vstr	s12, [r0, #32]
 80128ec:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80128ee:	6242      	str	r2, [r0, #36]	@ 0x24
 80128f0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80128f4:	ed93 6a03 	vldr	s12, [r3, #12]
 80128f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80128fc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8012900:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012904:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8012908:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801290c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8012910:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012914:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8012918:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801291a:	6302      	str	r2, [r0, #48]	@ 0x30
 801291c:	ed93 6a06 	vldr	s12, [r3, #24]
 8012920:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8012924:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012928:	eeb0 7a46 	vmov.f32	s14, s12
 801292c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8012930:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012934:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8012938:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801293c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8012940:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012944:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8012948:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801294a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012950:	f1c5 0501 	rsb	r5, r5, #1
 8012954:	f015 050f 	ands.w	r5, r5, #15
 8012958:	bf18      	it	ne
 801295a:	2501      	movne	r5, #1
 801295c:	2410      	movs	r4, #16
 801295e:	fb9e fef4 	sdiv	lr, lr, r4
 8012962:	ebae 0e05 	sub.w	lr, lr, r5
 8012966:	e753      	b.n	8012810 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8012968:	f1c5 0501 	rsb	r5, r5, #1
 801296c:	f015 050f 	ands.w	r5, r5, #15
 8012970:	bf18      	it	ne
 8012972:	2501      	movne	r5, #1
 8012974:	f04f 0910 	mov.w	r9, #16
 8012978:	fb94 f4f9 	sdiv	r4, r4, r9
 801297c:	1b64      	subs	r4, r4, r5
 801297e:	e755      	b.n	801282c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8012980:	4264      	negs	r4, r4
 8012982:	fb94 fef6 	sdiv	lr, r4, r6
 8012986:	f1ce 0800 	rsb	r8, lr, #0
 801298a:	fb06 441e 	mls	r4, r6, lr, r4
 801298e:	f8c0 8000 	str.w	r8, [r0]
 8012992:	6104      	str	r4, [r0, #16]
 8012994:	2c00      	cmp	r4, #0
 8012996:	f43f af6e 	beq.w	8012876 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801299a:	ea6f 0e0e 	mvn.w	lr, lr
 801299e:	f8c0 e000 	str.w	lr, [r0]
 80129a2:	1b34      	subs	r4, r6, r4
 80129a4:	e766      	b.n	8012874 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80129a6:	426d      	negs	r5, r5
 80129a8:	fb95 f4f6 	sdiv	r4, r5, r6
 80129ac:	f1c4 0e00 	rsb	lr, r4, #0
 80129b0:	fb06 5514 	mls	r5, r6, r4, r5
 80129b4:	f8c0 e004 	str.w	lr, [r0, #4]
 80129b8:	6085      	str	r5, [r0, #8]
 80129ba:	2d00      	cmp	r5, #0
 80129bc:	f43f af64 	beq.w	8012888 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80129c0:	43e4      	mvns	r4, r4
 80129c2:	6044      	str	r4, [r0, #4]
 80129c4:	1b75      	subs	r5, r6, r5
 80129c6:	e75e      	b.n	8012886 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80129c8:	3d800000 	.word	0x3d800000

080129cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80129cc:	4b01      	ldr	r3, [pc, #4]	@ (80129d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80129ce:	6018      	str	r0, [r3, #0]
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	2002b08c 	.word	0x2002b08c

080129d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80129d8:	4b06      	ldr	r3, [pc, #24]	@ (80129f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80129da:	881a      	ldrh	r2, [r3, #0]
 80129dc:	4282      	cmp	r2, r0
 80129de:	d807      	bhi.n	80129f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80129e0:	4b05      	ldr	r3, [pc, #20]	@ (80129f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	4413      	add	r3, r2
 80129e6:	4298      	cmp	r0, r3
 80129e8:	bfac      	ite	ge
 80129ea:	2000      	movge	r0, #0
 80129ec:	2001      	movlt	r0, #1
 80129ee:	4770      	bx	lr
 80129f0:	2000      	movs	r0, #0
 80129f2:	4770      	bx	lr
 80129f4:	2002b0ac 	.word	0x2002b0ac
 80129f8:	2002b0b0 	.word	0x2002b0b0

080129fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80129fc:	b508      	push	{r3, lr}
 80129fe:	4601      	mov	r1, r0
 8012a00:	f7ff ffea 	bl	80129d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012a04:	b118      	cbz	r0, 8012a0e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8012a06:	4b02      	ldr	r3, [pc, #8]	@ (8012a10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8012a0e:	bd08      	pop	{r3, pc}
 8012a10:	2002b090 	.word	0x2002b090

08012a14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8012a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a16:	4c24      	ldr	r4, [pc, #144]	@ (8012aa8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8012a18:	6823      	ldr	r3, [r4, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d042      	beq.n	8012aa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012a1e:	4a23      	ldr	r2, [pc, #140]	@ (8012aac <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8012a20:	4d23      	ldr	r5, [pc, #140]	@ (8012ab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8012a22:	8811      	ldrh	r1, [r2, #0]
 8012a24:	f8b5 c000 	ldrh.w	ip, [r5]
 8012a28:	4822      	ldr	r0, [pc, #136]	@ (8012ab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8012a2a:	4461      	add	r1, ip
 8012a2c:	1c4a      	adds	r2, r1, #1
 8012a2e:	f022 0201 	bic.w	r2, r2, #1
 8012a32:	008f      	lsls	r7, r1, #2
 8012a34:	0412      	lsls	r2, r2, #16
 8012a36:	19de      	adds	r6, r3, r7
 8012a38:	0c12      	lsrs	r2, r2, #16
 8012a3a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8012a3e:	6006      	str	r6, [r0, #0]
 8012a40:	4e1d      	ldr	r6, [pc, #116]	@ (8012ab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8012a42:	19da      	adds	r2, r3, r7
 8012a44:	6032      	str	r2, [r6, #0]
 8012a46:	220e      	movs	r2, #14
 8012a48:	fb02 f20c 	mul.w	r2, r2, ip
 8012a4c:	3203      	adds	r2, #3
 8012a4e:	f022 0203 	bic.w	r2, r2, #3
 8012a52:	443a      	add	r2, r7
 8012a54:	4f19      	ldr	r7, [pc, #100]	@ (8012abc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012a56:	4413      	add	r3, r2
 8012a58:	603b      	str	r3, [r7, #0]
 8012a5a:	4f19      	ldr	r7, [pc, #100]	@ (8012ac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	803b      	strh	r3, [r7, #0]
 8012a60:	4f18      	ldr	r7, [pc, #96]	@ (8012ac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012a62:	683f      	ldr	r7, [r7, #0]
 8012a64:	1aba      	subs	r2, r7, r2
 8012a66:	4f18      	ldr	r7, [pc, #96]	@ (8012ac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012a68:	603a      	str	r2, [r7, #0]
 8012a6a:	4a18      	ldr	r2, [pc, #96]	@ (8012acc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012a6c:	469c      	mov	ip, r3
 8012a6e:	8013      	strh	r3, [r2, #0]
 8012a70:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8012a74:	428b      	cmp	r3, r1
 8012a76:	d10d      	bne.n	8012a94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8012a78:	882d      	ldrh	r5, [r5, #0]
 8012a7a:	6830      	ldr	r0, [r6, #0]
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	240e      	movs	r4, #14
 8012a80:	429d      	cmp	r5, r3
 8012a82:	d90f      	bls.n	8012aa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012a84:	fb04 0203 	mla	r2, r4, r3, r0
 8012a88:	3301      	adds	r3, #1
 8012a8a:	7b11      	ldrb	r1, [r2, #12]
 8012a8c:	f36f 1145 	bfc	r1, #5, #1
 8012a90:	7311      	strb	r1, [r2, #12]
 8012a92:	e7f5      	b.n	8012a80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8012a94:	6822      	ldr	r2, [r4, #0]
 8012a96:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8012a9a:	6802      	ldr	r2, [r0, #0]
 8012a9c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	e7e7      	b.n	8012a74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8012aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	2002b090 	.word	0x2002b090
 8012aac:	2002b0ac 	.word	0x2002b0ac
 8012ab0:	2002b0b0 	.word	0x2002b0b0
 8012ab4:	2002b0a4 	.word	0x2002b0a4
 8012ab8:	2002b094 	.word	0x2002b094
 8012abc:	2002b09c 	.word	0x2002b09c
 8012ac0:	2002b0ae 	.word	0x2002b0ae
 8012ac4:	2002b098 	.word	0x2002b098
 8012ac8:	2002b0a8 	.word	0x2002b0a8
 8012acc:	2002b0a0 	.word	0x2002b0a0

08012ad0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8012ad0:	4b06      	ldr	r3, [pc, #24]	@ (8012aec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	b943      	cbnz	r3, 8012ae8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8012ad6:	b139      	cbz	r1, 8012ae8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8012ad8:	4b05      	ldr	r3, [pc, #20]	@ (8012af0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8012ada:	801a      	strh	r2, [r3, #0]
 8012adc:	4b05      	ldr	r3, [pc, #20]	@ (8012af4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8012ade:	6019      	str	r1, [r3, #0]
 8012ae0:	4b05      	ldr	r3, [pc, #20]	@ (8012af8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8012ae2:	6018      	str	r0, [r3, #0]
 8012ae4:	f7ff bf96 	b.w	8012a14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop
 8012aec:	2002b09c 	.word	0x2002b09c
 8012af0:	2002b0b0 	.word	0x2002b0b0
 8012af4:	2002b098 	.word	0x2002b098
 8012af8:	2002b090 	.word	0x2002b090

08012afc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012afc:	b470      	push	{r4, r5, r6}
 8012afe:	4c07      	ldr	r4, [pc, #28]	@ (8012b1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012b00:	6826      	ldr	r6, [r4, #0]
 8012b02:	4605      	mov	r5, r0
 8012b04:	4610      	mov	r0, r2
 8012b06:	9a03      	ldr	r2, [sp, #12]
 8012b08:	b936      	cbnz	r6, 8012b18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8012b0a:	6025      	str	r5, [r4, #0]
 8012b0c:	4c04      	ldr	r4, [pc, #16]	@ (8012b20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012b0e:	8021      	strh	r1, [r4, #0]
 8012b10:	bc70      	pop	{r4, r5, r6}
 8012b12:	4619      	mov	r1, r3
 8012b14:	f7ff bfdc 	b.w	8012ad0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8012b18:	bc70      	pop	{r4, r5, r6}
 8012b1a:	4770      	bx	lr
 8012b1c:	2002b0b4 	.word	0x2002b0b4
 8012b20:	2002b0ac 	.word	0x2002b0ac

08012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012b24:	4a12      	ldr	r2, [pc, #72]	@ (8012b70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8012b26:	8803      	ldrh	r3, [r0, #0]
 8012b28:	8812      	ldrh	r2, [r2, #0]
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d207      	bcs.n	8012b3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8012b2e:	4a11      	ldr	r2, [pc, #68]	@ (8012b74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8012b30:	6812      	ldr	r2, [r2, #0]
 8012b32:	2114      	movs	r1, #20
 8012b34:	fb01 2303 	mla	r3, r1, r3, r2
 8012b38:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8012b3c:	4770      	bx	lr
 8012b3e:	490e      	ldr	r1, [pc, #56]	@ (8012b78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8012b40:	8809      	ldrh	r1, [r1, #0]
 8012b42:	4411      	add	r1, r2
 8012b44:	428b      	cmp	r3, r1
 8012b46:	da04      	bge.n	8012b52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8012b48:	1a9b      	subs	r3, r3, r2
 8012b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8012b7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012b4c:	210e      	movs	r1, #14
 8012b4e:	6812      	ldr	r2, [r2, #0]
 8012b50:	e7f0      	b.n	8012b34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8012b52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d108      	bne.n	8012b6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8012b5a:	4b09      	ldr	r3, [pc, #36]	@ (8012b80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	b91b      	cbnz	r3, 8012b68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8012b60:	4b08      	ldr	r3, [pc, #32]	@ (8012b84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012b62:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012b66:	4770      	bx	lr
 8012b68:	4b07      	ldr	r3, [pc, #28]	@ (8012b88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012b6a:	e7fa      	b.n	8012b62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	4770      	bx	lr
 8012b70:	2002b0ac 	.word	0x2002b0ac
 8012b74:	2002b0b4 	.word	0x2002b0b4
 8012b78:	2002b0b0 	.word	0x2002b0b0
 8012b7c:	2002b094 	.word	0x2002b094
 8012b80:	2002b024 	.word	0x2002b024
 8012b84:	2002b026 	.word	0x2002b026
 8012b88:	2002b028 	.word	0x2002b028

08012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8012b8c:	4a12      	ldr	r2, [pc, #72]	@ (8012bd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8012b8e:	8803      	ldrh	r3, [r0, #0]
 8012b90:	8812      	ldrh	r2, [r2, #0]
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d207      	bcs.n	8012ba6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8012b96:	4a11      	ldr	r2, [pc, #68]	@ (8012bdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8012b98:	6812      	ldr	r2, [r2, #0]
 8012b9a:	2114      	movs	r1, #20
 8012b9c:	fb01 2303 	mla	r3, r1, r3, r2
 8012ba0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8012ba4:	4770      	bx	lr
 8012ba6:	490e      	ldr	r1, [pc, #56]	@ (8012be0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8012ba8:	8809      	ldrh	r1, [r1, #0]
 8012baa:	4411      	add	r1, r2
 8012bac:	428b      	cmp	r3, r1
 8012bae:	da04      	bge.n	8012bba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8012bb0:	1a9b      	subs	r3, r3, r2
 8012bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8012be4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8012bb4:	210e      	movs	r1, #14
 8012bb6:	6812      	ldr	r2, [r2, #0]
 8012bb8:	e7f0      	b.n	8012b9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8012bba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d108      	bne.n	8012bd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8012bc2:	4b09      	ldr	r3, [pc, #36]	@ (8012be8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	b91b      	cbnz	r3, 8012bd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8012bc8:	4b08      	ldr	r3, [pc, #32]	@ (8012bec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8012bca:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012bce:	4770      	bx	lr
 8012bd0:	4b07      	ldr	r3, [pc, #28]	@ (8012bf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8012bd2:	e7fa      	b.n	8012bca <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	4770      	bx	lr
 8012bd8:	2002b0ac 	.word	0x2002b0ac
 8012bdc:	2002b0b4 	.word	0x2002b0b4
 8012be0:	2002b0b0 	.word	0x2002b0b0
 8012be4:	2002b094 	.word	0x2002b094
 8012be8:	2002b024 	.word	0x2002b024
 8012bec:	2002b028 	.word	0x2002b028
 8012bf0:	2002b026 	.word	0x2002b026

08012bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8012bf4:	b530      	push	{r4, r5, lr}
 8012bf6:	4a22      	ldr	r2, [pc, #136]	@ (8012c80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8012bf8:	880b      	ldrh	r3, [r1, #0]
 8012bfa:	8812      	ldrh	r2, [r2, #0]
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d213      	bcs.n	8012c28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8012c00:	4a20      	ldr	r2, [pc, #128]	@ (8012c84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012c02:	6812      	ldr	r2, [r2, #0]
 8012c04:	2114      	movs	r1, #20
 8012c06:	fb01 2303 	mla	r3, r1, r3, r2
 8012c0a:	8a1a      	ldrh	r2, [r3, #16]
 8012c0c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8012c10:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8012c14:	8a5b      	ldrh	r3, [r3, #18]
 8012c16:	8004      	strh	r4, [r0, #0]
 8012c18:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c20:	8041      	strh	r1, [r0, #2]
 8012c22:	8082      	strh	r2, [r0, #4]
 8012c24:	80c3      	strh	r3, [r0, #6]
 8012c26:	e024      	b.n	8012c72 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8012c28:	4917      	ldr	r1, [pc, #92]	@ (8012c88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8012c2a:	8809      	ldrh	r1, [r1, #0]
 8012c2c:	4411      	add	r1, r2
 8012c2e:	428b      	cmp	r3, r1
 8012c30:	da10      	bge.n	8012c54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8012c32:	1a9b      	subs	r3, r3, r2
 8012c34:	220e      	movs	r2, #14
 8012c36:	4353      	muls	r3, r2
 8012c38:	4a14      	ldr	r2, [pc, #80]	@ (8012c8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8012c3a:	6811      	ldr	r1, [r2, #0]
 8012c3c:	18ca      	adds	r2, r1, r3
 8012c3e:	5ecd      	ldrsh	r5, [r1, r3]
 8012c40:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012c44:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012c48:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8012c4c:	8005      	strh	r5, [r0, #0]
 8012c4e:	8044      	strh	r4, [r0, #2]
 8012c50:	8081      	strh	r1, [r0, #4]
 8012c52:	e7e7      	b.n	8012c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8012c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d10b      	bne.n	8012c74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8012c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012c90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8012c5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012c62:	4b0c      	ldr	r3, [pc, #48]	@ (8012c94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8012c64:	8081      	strh	r1, [r0, #4]
 8012c66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c6a:	80c2      	strh	r2, [r0, #6]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	8003      	strh	r3, [r0, #0]
 8012c70:	8043      	strh	r3, [r0, #2]
 8012c72:	bd30      	pop	{r4, r5, pc}
 8012c74:	2300      	movs	r3, #0
 8012c76:	8003      	strh	r3, [r0, #0]
 8012c78:	8043      	strh	r3, [r0, #2]
 8012c7a:	8083      	strh	r3, [r0, #4]
 8012c7c:	e7d2      	b.n	8012c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8012c7e:	bf00      	nop
 8012c80:	2002b0ac 	.word	0x2002b0ac
 8012c84:	2002b0b4 	.word	0x2002b0b4
 8012c88:	2002b0b0 	.word	0x2002b0b0
 8012c8c:	2002b094 	.word	0x2002b094
 8012c90:	2002b020 	.word	0x2002b020
 8012c94:	2002b022 	.word	0x2002b022

08012c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8012c98:	4a17      	ldr	r2, [pc, #92]	@ (8012cf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8012c9a:	8803      	ldrh	r3, [r0, #0]
 8012c9c:	8812      	ldrh	r2, [r2, #0]
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d213      	bcs.n	8012cca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8012ca2:	4a16      	ldr	r2, [pc, #88]	@ (8012cfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8012ca4:	6812      	ldr	r2, [r2, #0]
 8012ca6:	2114      	movs	r1, #20
 8012ca8:	fb01 2303 	mla	r3, r1, r3, r2
 8012cac:	8a1a      	ldrh	r2, [r3, #16]
 8012cae:	8919      	ldrh	r1, [r3, #8]
 8012cb0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012cb4:	428a      	cmp	r2, r1
 8012cb6:	db1d      	blt.n	8012cf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8012cb8:	8a58      	ldrh	r0, [r3, #18]
 8012cba:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012cbe:	895b      	ldrh	r3, [r3, #10]
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	bfac      	ite	ge
 8012cc4:	2000      	movge	r0, #0
 8012cc6:	2001      	movlt	r0, #1
 8012cc8:	4770      	bx	lr
 8012cca:	490d      	ldr	r1, [pc, #52]	@ (8012d00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8012ccc:	8809      	ldrh	r1, [r1, #0]
 8012cce:	4411      	add	r1, r2
 8012cd0:	428b      	cmp	r3, r1
 8012cd2:	da0d      	bge.n	8012cf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8012cd4:	1a9b      	subs	r3, r3, r2
 8012cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8012d04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8012cd8:	6812      	ldr	r2, [r2, #0]
 8012cda:	210e      	movs	r1, #14
 8012cdc:	fb01 2303 	mla	r3, r1, r3, r2
 8012ce0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012ce4:	891a      	ldrh	r2, [r3, #8]
 8012ce6:	4291      	cmp	r1, r2
 8012ce8:	db04      	blt.n	8012cf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8012cea:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012cee:	e7e6      	b.n	8012cbe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	4770      	bx	lr
 8012cf4:	2001      	movs	r0, #1
 8012cf6:	4770      	bx	lr
 8012cf8:	2002b0ac 	.word	0x2002b0ac
 8012cfc:	2002b0b4 	.word	0x2002b0b4
 8012d00:	2002b0b0 	.word	0x2002b0b0
 8012d04:	2002b094 	.word	0x2002b094

08012d08 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012d08:	4a12      	ldr	r2, [pc, #72]	@ (8012d54 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012d0a:	8803      	ldrh	r3, [r0, #0]
 8012d0c:	8811      	ldrh	r1, [r2, #0]
 8012d0e:	428b      	cmp	r3, r1
 8012d10:	d20b      	bcs.n	8012d2a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8012d12:	4a11      	ldr	r2, [pc, #68]	@ (8012d58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012d14:	6812      	ldr	r2, [r2, #0]
 8012d16:	b112      	cbz	r2, 8012d1e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012d1c:	b9c0      	cbnz	r0, 8012d50 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8012d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8012d5c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012d20:	6811      	ldr	r1, [r2, #0]
 8012d22:	2214      	movs	r2, #20
 8012d24:	4353      	muls	r3, r2
 8012d26:	58c8      	ldr	r0, [r1, r3]
 8012d28:	4770      	bx	lr
 8012d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8012d60 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012d2c:	8812      	ldrh	r2, [r2, #0]
 8012d2e:	440a      	add	r2, r1
 8012d30:	4293      	cmp	r3, r2
 8012d32:	da04      	bge.n	8012d3e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8012d34:	4a08      	ldr	r2, [pc, #32]	@ (8012d58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012d36:	6812      	ldr	r2, [r2, #0]
 8012d38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012d3c:	4770      	bx	lr
 8012d3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d103      	bne.n	8012d4e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012d46:	4b07      	ldr	r3, [pc, #28]	@ (8012d64 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8012d4c:	4770      	bx	lr
 8012d4e:	2000      	movs	r0, #0
 8012d50:	4770      	bx	lr
 8012d52:	bf00      	nop
 8012d54:	2002b0ac 	.word	0x2002b0ac
 8012d58:	2002b090 	.word	0x2002b090
 8012d5c:	2002b0b4 	.word	0x2002b0b4
 8012d60:	2002b0b0 	.word	0x2002b0b0
 8012d64:	2002b02c 	.word	0x2002b02c

08012d68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012d68:	4b24      	ldr	r3, [pc, #144]	@ (8012dfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8012d6a:	8802      	ldrh	r2, [r0, #0]
 8012d6c:	8818      	ldrh	r0, [r3, #0]
 8012d6e:	4282      	cmp	r2, r0
 8012d70:	d221      	bcs.n	8012db6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8012d72:	4b23      	ldr	r3, [pc, #140]	@ (8012e00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8012d74:	6819      	ldr	r1, [r3, #0]
 8012d76:	2314      	movs	r3, #20
 8012d78:	fb03 1302 	mla	r3, r3, r2, r1
 8012d7c:	6858      	ldr	r0, [r3, #4]
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d03a      	beq.n	8012df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8012d82:	4920      	ldr	r1, [pc, #128]	@ (8012e04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012d84:	6809      	ldr	r1, [r1, #0]
 8012d86:	2900      	cmp	r1, #0
 8012d88:	d036      	beq.n	8012df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8012d8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012d8e:	2900      	cmp	r1, #0
 8012d90:	d032      	beq.n	8012df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8012d92:	891a      	ldrh	r2, [r3, #8]
 8012d94:	8958      	ldrh	r0, [r3, #10]
 8012d96:	4350      	muls	r0, r2
 8012d98:	7c5a      	ldrb	r2, [r3, #17]
 8012d9a:	7cdb      	ldrb	r3, [r3, #19]
 8012d9c:	0952      	lsrs	r2, r2, #5
 8012d9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012da2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012da6:	2b0b      	cmp	r3, #11
 8012da8:	bf18      	it	ne
 8012daa:	0040      	lslne	r0, r0, #1
 8012dac:	3003      	adds	r0, #3
 8012dae:	f020 0003 	bic.w	r0, r0, #3
 8012db2:	4408      	add	r0, r1
 8012db4:	4770      	bx	lr
 8012db6:	4b14      	ldr	r3, [pc, #80]	@ (8012e08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	4403      	add	r3, r0
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	da1a      	bge.n	8012df6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012dc0:	4b12      	ldr	r3, [pc, #72]	@ (8012e0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	1a10      	subs	r0, r2, r0
 8012dc6:	210e      	movs	r1, #14
 8012dc8:	fb01 3000 	mla	r0, r1, r0, r3
 8012dcc:	7b03      	ldrb	r3, [r0, #12]
 8012dce:	f003 031f 	and.w	r3, r3, #31
 8012dd2:	2b0b      	cmp	r3, #11
 8012dd4:	d10b      	bne.n	8012dee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8012dd6:	8903      	ldrh	r3, [r0, #8]
 8012dd8:	8940      	ldrh	r0, [r0, #10]
 8012dda:	4358      	muls	r0, r3
 8012ddc:	4b09      	ldr	r3, [pc, #36]	@ (8012e04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012dde:	6819      	ldr	r1, [r3, #0]
 8012de0:	3003      	adds	r0, #3
 8012de2:	f020 0303 	bic.w	r3, r0, #3
 8012de6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012dea:	4418      	add	r0, r3
 8012dec:	4770      	bx	lr
 8012dee:	2b0d      	cmp	r3, #13
 8012df0:	d101      	bne.n	8012df6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012df2:	300d      	adds	r0, #13
 8012df4:	4770      	bx	lr
 8012df6:	2000      	movs	r0, #0
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	2002b0ac 	.word	0x2002b0ac
 8012e00:	2002b0b4 	.word	0x2002b0b4
 8012e04:	2002b090 	.word	0x2002b090
 8012e08:	2002b0b0 	.word	0x2002b0b0
 8012e0c:	2002b094 	.word	0x2002b094

08012e10 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8012e10:	b510      	push	{r4, lr}
 8012e12:	4b1f      	ldr	r3, [pc, #124]	@ (8012e90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8012e14:	8802      	ldrh	r2, [r0, #0]
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d21a      	bcs.n	8012e52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8012e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8012e94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	2114      	movs	r1, #20
 8012e22:	fb01 3102 	mla	r1, r1, r2, r3
 8012e26:	7c4b      	ldrb	r3, [r1, #17]
 8012e28:	0958      	lsrs	r0, r3, #5
 8012e2a:	7ccb      	ldrb	r3, [r1, #19]
 8012e2c:	491a      	ldr	r1, [pc, #104]	@ (8012e98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8012e2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012e32:	6809      	ldr	r1, [r1, #0]
 8012e34:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8012e38:	b2d8      	uxtb	r0, r3
 8012e3a:	b149      	cbz	r1, 8012e50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012e3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012e40:	b132      	cbz	r2, 8012e50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012e42:	2b0e      	cmp	r3, #14
 8012e44:	d021      	beq.n	8012e8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8012e46:	280f      	cmp	r0, #15
 8012e48:	d01d      	beq.n	8012e86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8012e4a:	2810      	cmp	r0, #16
 8012e4c:	bf08      	it	eq
 8012e4e:	2002      	moveq	r0, #2
 8012e50:	bd10      	pop	{r4, pc}
 8012e52:	4912      	ldr	r1, [pc, #72]	@ (8012e9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8012e54:	8809      	ldrh	r1, [r1, #0]
 8012e56:	4419      	add	r1, r3
 8012e58:	428a      	cmp	r2, r1
 8012e5a:	da09      	bge.n	8012e70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8012e5c:	1ad3      	subs	r3, r2, r3
 8012e5e:	4a10      	ldr	r2, [pc, #64]	@ (8012ea0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8012e60:	6812      	ldr	r2, [r2, #0]
 8012e62:	210e      	movs	r1, #14
 8012e64:	fb01 2303 	mla	r3, r1, r3, r2
 8012e68:	7b18      	ldrb	r0, [r3, #12]
 8012e6a:	f000 001f 	and.w	r0, r0, #31
 8012e6e:	e7ef      	b.n	8012e50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012e70:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d108      	bne.n	8012e8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8012e78:	f7f5 fd60 	bl	800893c <_ZN8touchgfx3HAL3lcdEv>
 8012e7c:	6803      	ldr	r3, [r0, #0]
 8012e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e84:	4718      	bx	r3
 8012e86:	2001      	movs	r0, #1
 8012e88:	e7e2      	b.n	8012e50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	e7e0      	b.n	8012e50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8012e8e:	bf00      	nop
 8012e90:	2002b0ac 	.word	0x2002b0ac
 8012e94:	2002b0b4 	.word	0x2002b0b4
 8012e98:	2002b090 	.word	0x2002b090
 8012e9c:	2002b0b0 	.word	0x2002b0b0
 8012ea0:	2002b094 	.word	0x2002b094

08012ea4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8012ea4:	2010      	movs	r0, #16
 8012ea6:	4770      	bx	lr

08012ea8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	4770      	bx	lr

08012eac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8012eac:	4b02      	ldr	r3, [pc, #8]	@ (8012eb8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8012eae:	8818      	ldrh	r0, [r3, #0]
 8012eb0:	0040      	lsls	r0, r0, #1
 8012eb2:	b280      	uxth	r0, r0
 8012eb4:	4770      	bx	lr
 8012eb6:	bf00      	nop
 8012eb8:	2002b026 	.word	0x2002b026

08012ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012ebc:	2bff      	cmp	r3, #255	@ 0xff
 8012ebe:	d05e      	beq.n	8012f7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8012ec0:	2a0b      	cmp	r2, #11
 8012ec2:	d058      	beq.n	8012f76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8012ec4:	d80e      	bhi.n	8012ee4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8012ec6:	2a03      	cmp	r2, #3
 8012ec8:	d04d      	beq.n	8012f66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8012eca:	d804      	bhi.n	8012ed6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012ecc:	2a01      	cmp	r2, #1
 8012ece:	d04c      	beq.n	8012f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8012ed0:	d94d      	bls.n	8012f6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8012ed2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012ed4:	e031      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012ed6:	2a09      	cmp	r2, #9
 8012ed8:	d04d      	beq.n	8012f76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8012eda:	d84a      	bhi.n	8012f72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8012edc:	2a08      	cmp	r2, #8
 8012ede:	d048      	beq.n	8012f72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e02a      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012ee4:	2a2f      	cmp	r2, #47	@ 0x2f
 8012ee6:	d02c      	beq.n	8012f42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8012ee8:	d811      	bhi.n	8012f0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8012eea:	2a2d      	cmp	r2, #45	@ 0x2d
 8012eec:	d018      	beq.n	8012f20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8012eee:	d831      	bhi.n	8012f54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8012ef0:	2a2c      	cmp	r2, #44	@ 0x2c
 8012ef2:	d1f5      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012ef4:	684a      	ldr	r2, [r1, #4]
 8012ef6:	7813      	ldrb	r3, [r2, #0]
 8012ef8:	7852      	ldrb	r2, [r2, #1]
 8012efa:	2a00      	cmp	r2, #0
 8012efc:	d1f0      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d01d      	beq.n	8012f3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d02d      	beq.n	8012f62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	d1ea      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f0a:	68c3      	ldr	r3, [r0, #12]
 8012f0c:	e015      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f0e:	2a31      	cmp	r2, #49	@ 0x31
 8012f10:	d004      	beq.n	8012f1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8012f12:	d332      	bcc.n	8012f7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8012f14:	2a32      	cmp	r2, #50	@ 0x32
 8012f16:	d030      	beq.n	8012f7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8012f18:	2a33      	cmp	r2, #51	@ 0x33
 8012f1a:	d1e1      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f1c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8012f1e:	e00c      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f20:	684a      	ldr	r2, [r1, #4]
 8012f22:	7813      	ldrb	r3, [r2, #0]
 8012f24:	7852      	ldrb	r2, [r2, #1]
 8012f26:	2a00      	cmp	r2, #0
 8012f28:	d1da      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d004      	beq.n	8012f38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8012f2e:	d30f      	bcc.n	8012f50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d1d5      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f34:	6943      	ldr	r3, [r0, #20]
 8012f36:	e000      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f38:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	4770      	bx	lr
 8012f3e:	69c3      	ldr	r3, [r0, #28]
 8012f40:	e7fb      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f42:	684b      	ldr	r3, [r1, #4]
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	785b      	ldrb	r3, [r3, #1]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1c9      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f4c:	2a00      	cmp	r2, #0
 8012f4e:	d1f4      	bne.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f50:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012f52:	e7f2      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f54:	684b      	ldr	r3, [r1, #4]
 8012f56:	781a      	ldrb	r2, [r3, #0]
 8012f58:	785b      	ldrb	r3, [r3, #1]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d1c0      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f5e:	2a00      	cmp	r2, #0
 8012f60:	d1eb      	bne.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f62:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012f64:	e7e9      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f66:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012f68:	e7e7      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f6a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8012f6c:	e7e5      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012f70:	e7e3      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f72:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8012f74:	e7e1      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f76:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8012f78:	e7df      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f7a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8012f7c:	e7dd      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f7e:	2a0b      	cmp	r2, #11
 8012f80:	d059      	beq.n	8013036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8012f82:	d80e      	bhi.n	8012fa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8012f84:	2a03      	cmp	r2, #3
 8012f86:	d050      	beq.n	801302a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8012f88:	d804      	bhi.n	8012f94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8012f8a:	2a01      	cmp	r2, #1
 8012f8c:	d04f      	beq.n	801302e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8012f8e:	d950      	bls.n	8013032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8012f90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012f92:	e7d2      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012f94:	2a09      	cmp	r2, #9
 8012f96:	d04e      	beq.n	8013036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8012f98:	d801      	bhi.n	8012f9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8012f9a:	2a08      	cmp	r2, #8
 8012f9c:	d1a0      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f9e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8012fa0:	e7cb      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012fa2:	2a2f      	cmp	r2, #47	@ 0x2f
 8012fa4:	d02d      	beq.n	8013002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8012fa6:	d811      	bhi.n	8012fcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8012fa8:	2a2d      	cmp	r2, #45	@ 0x2d
 8012faa:	d018      	beq.n	8012fde <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8012fac:	d833      	bhi.n	8013016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8012fae:	2a2c      	cmp	r2, #44	@ 0x2c
 8012fb0:	d196      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012fb2:	684a      	ldr	r2, [r1, #4]
 8012fb4:	7813      	ldrb	r3, [r2, #0]
 8012fb6:	7852      	ldrb	r2, [r2, #1]
 8012fb8:	2a00      	cmp	r2, #0
 8012fba:	d191      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d01e      	beq.n	8012ffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d030      	beq.n	8013026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8012fc4:	2b02      	cmp	r3, #2
 8012fc6:	d18b      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012fc8:	6903      	ldr	r3, [r0, #16]
 8012fca:	e7b6      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012fcc:	2a31      	cmp	r2, #49	@ 0x31
 8012fce:	d004      	beq.n	8012fda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8012fd0:	d333      	bcc.n	801303a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8012fd2:	2a32      	cmp	r2, #50	@ 0x32
 8012fd4:	d031      	beq.n	801303a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8012fd6:	2a33      	cmp	r2, #51	@ 0x33
 8012fd8:	d182      	bne.n	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012fda:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8012fdc:	e7ad      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012fde:	684a      	ldr	r2, [r1, #4]
 8012fe0:	7813      	ldrb	r3, [r2, #0]
 8012fe2:	7852      	ldrb	r2, [r2, #1]
 8012fe4:	2a00      	cmp	r2, #0
 8012fe6:	f47f af7b 	bne.w	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d005      	beq.n	8012ffa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012fee:	d310      	bcc.n	8013012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8012ff0:	2b02      	cmp	r3, #2
 8012ff2:	f47f af75 	bne.w	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012ff6:	6983      	ldr	r3, [r0, #24]
 8012ff8:	e79f      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012ffa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012ffc:	e79d      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012ffe:	6a03      	ldr	r3, [r0, #32]
 8013000:	e79b      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013002:	684b      	ldr	r3, [r1, #4]
 8013004:	781a      	ldrb	r2, [r3, #0]
 8013006:	785b      	ldrb	r3, [r3, #1]
 8013008:	2b00      	cmp	r3, #0
 801300a:	f47f af69 	bne.w	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801300e:	2a00      	cmp	r2, #0
 8013010:	d193      	bne.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013012:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8013014:	e791      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013016:	684b      	ldr	r3, [r1, #4]
 8013018:	781a      	ldrb	r2, [r3, #0]
 801301a:	785b      	ldrb	r3, [r3, #1]
 801301c:	2b00      	cmp	r3, #0
 801301e:	f47f af5f 	bne.w	8012ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013022:	2a00      	cmp	r2, #0
 8013024:	d189      	bne.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013026:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013028:	e787      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801302a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801302c:	e785      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801302e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8013030:	e783      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013032:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8013034:	e781      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013036:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013038:	e77f      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801303a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801303c:	e77d      	b.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801303e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801303e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013042:	b087      	sub	sp, #28
 8013044:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8013046:	9205      	str	r2, [sp, #20]
 8013048:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801304c:	9202      	str	r2, [sp, #8]
 801304e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8013052:	9101      	str	r1, [sp, #4]
 8013054:	6841      	ldr	r1, [r0, #4]
 8013056:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801305a:	fb01 2404 	mla	r4, r1, r4, r2
 801305e:	6802      	ldr	r2, [r0, #0]
 8013060:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013064:	f8de 2000 	ldr.w	r2, [lr]
 8013068:	9203      	str	r2, [sp, #12]
 801306a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801306e:	3204      	adds	r2, #4
 8013070:	9204      	str	r2, [sp, #16]
 8013072:	9a02      	ldr	r2, [sp, #8]
 8013074:	43d6      	mvns	r6, r2
 8013076:	b2f6      	uxtb	r6, r6
 8013078:	9a01      	ldr	r2, [sp, #4]
 801307a:	2a00      	cmp	r2, #0
 801307c:	dc03      	bgt.n	8013086 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801307e:	9a05      	ldr	r2, [sp, #20]
 8013080:	2a00      	cmp	r2, #0
 8013082:	f340 8129 	ble.w	80132d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013086:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013088:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801308c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8013090:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8013094:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013096:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801309a:	2b00      	cmp	r3, #0
 801309c:	dd0e      	ble.n	80130bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801309e:	1408      	asrs	r0, r1, #16
 80130a0:	d405      	bmi.n	80130ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130a2:	4560      	cmp	r0, ip
 80130a4:	da03      	bge.n	80130ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130a6:	1410      	asrs	r0, r2, #16
 80130a8:	d401      	bmi.n	80130ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80130aa:	42b8      	cmp	r0, r7
 80130ac:	db07      	blt.n	80130be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80130ae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80130b0:	4401      	add	r1, r0
 80130b2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80130b4:	3b01      	subs	r3, #1
 80130b6:	4402      	add	r2, r0
 80130b8:	3402      	adds	r4, #2
 80130ba:	e7ee      	b.n	801309a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80130bc:	d071      	beq.n	80131a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80130be:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80130c0:	1e58      	subs	r0, r3, #1
 80130c2:	fb05 1500 	mla	r5, r5, r0, r1
 80130c6:	142d      	asrs	r5, r5, #16
 80130c8:	d45f      	bmi.n	801318a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80130ca:	4565      	cmp	r5, ip
 80130cc:	da5d      	bge.n	801318a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80130ce:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80130d0:	fb05 2000 	mla	r0, r5, r0, r2
 80130d4:	1400      	asrs	r0, r0, #16
 80130d6:	d458      	bmi.n	801318a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80130d8:	42b8      	cmp	r0, r7
 80130da:	da56      	bge.n	801318a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80130dc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80130e0:	4699      	mov	r9, r3
 80130e2:	46a2      	mov	sl, r4
 80130e4:	f1b9 0f00 	cmp.w	r9, #0
 80130e8:	dd57      	ble.n	801319a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80130ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80130ee:	9803      	ldr	r0, [sp, #12]
 80130f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80130f4:	140d      	asrs	r5, r1, #16
 80130f6:	fb07 000c 	mla	r0, r7, ip, r0
 80130fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80130fe:	5d40      	ldrb	r0, [r0, r5]
 8013100:	9d04      	ldr	r5, [sp, #16]
 8013102:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8013106:	f8ba 5000 	ldrh.w	r5, [sl]
 801310a:	122f      	asrs	r7, r5, #8
 801310c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013110:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8013114:	fb17 f706 	smulbb	r7, r7, r6
 8013118:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801311c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8013120:	00ed      	lsls	r5, r5, #3
 8013122:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8013126:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801312a:	10c7      	asrs	r7, r0, #3
 801312c:	b2ed      	uxtb	r5, r5
 801312e:	00c0      	lsls	r0, r0, #3
 8013130:	fb18 f806 	smulbb	r8, r8, r6
 8013134:	fb15 f506 	smulbb	r5, r5, r6
 8013138:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801313c:	b2c0      	uxtb	r0, r0
 801313e:	fa1f fc8c 	uxth.w	ip, ip
 8013142:	fb07 870b 	mla	r7, r7, fp, r8
 8013146:	fb00 500b 	mla	r0, r0, fp, r5
 801314a:	b280      	uxth	r0, r0
 801314c:	b2bf      	uxth	r7, r7
 801314e:	f10c 0501 	add.w	r5, ip, #1
 8013152:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013156:	f107 0801 	add.w	r8, r7, #1
 801315a:	1c45      	adds	r5, r0, #1
 801315c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8013160:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8013164:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013166:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801316a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801316e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013172:	ea45 0c0c 	orr.w	ip, r5, ip
 8013176:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801317a:	4401      	add	r1, r0
 801317c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801317e:	ea4c 0c08 	orr.w	ip, ip, r8
 8013182:	f82a cb02 	strh.w	ip, [sl], #2
 8013186:	4402      	add	r2, r0
 8013188:	e7ac      	b.n	80130e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801318a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801318e:	f04f 0800 	mov.w	r8, #0
 8013192:	eb03 0008 	add.w	r0, r3, r8
 8013196:	2800      	cmp	r0, #0
 8013198:	dc41      	bgt.n	801321e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801319a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801319e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80131a2:	9b01      	ldr	r3, [sp, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f340 8097 	ble.w	80132d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80131aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80131ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80131b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80131b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80131b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80131bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80131c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80131c4:	eef0 6a62 	vmov.f32	s13, s5
 80131c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80131cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80131d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80131d4:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 80131d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80131dc:	eef0 6a43 	vmov.f32	s13, s6
 80131e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80131e4:	ee12 2a90 	vmov	r2, s5
 80131e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80131ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80131f0:	ee13 2a10 	vmov	r2, s6
 80131f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80131f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80131f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80131fc:	9314      	str	r3, [sp, #80]	@ 0x50
 80131fe:	9b01      	ldr	r3, [sp, #4]
 8013200:	9a05      	ldr	r2, [sp, #20]
 8013202:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013206:	3b01      	subs	r3, #1
 8013208:	9301      	str	r3, [sp, #4]
 801320a:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801320e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013210:	eeb0 3a67 	vmov.f32	s6, s15
 8013214:	bf08      	it	eq
 8013216:	4613      	moveq	r3, r2
 8013218:	eef0 2a47 	vmov.f32	s5, s14
 801321c:	e72c      	b.n	8013078 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801321e:	140f      	asrs	r7, r1, #16
 8013220:	d453      	bmi.n	80132ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013222:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013226:	42bd      	cmp	r5, r7
 8013228:	dd4f      	ble.n	80132ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801322a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801322e:	d44c      	bmi.n	80132ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013230:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013234:	4560      	cmp	r0, ip
 8013236:	dd48      	ble.n	80132ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013238:	9803      	ldr	r0, [sp, #12]
 801323a:	b22d      	sxth	r5, r5
 801323c:	fb0c 0505 	mla	r5, ip, r5, r0
 8013240:	5de8      	ldrb	r0, [r5, r7]
 8013242:	9d04      	ldr	r5, [sp, #16]
 8013244:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8013248:	f06f 0501 	mvn.w	r5, #1
 801324c:	fb05 fb08 	mul.w	fp, r5, r8
 8013250:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013254:	f834 500b 	ldrh.w	r5, [r4, fp]
 8013258:	122f      	asrs	r7, r5, #8
 801325a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801325e:	fb17 f706 	smulbb	r7, r7, r6
 8013262:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8013266:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801326a:	00ed      	lsls	r5, r5, #3
 801326c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8013270:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8013274:	10c7      	asrs	r7, r0, #3
 8013276:	b2ed      	uxtb	r5, r5
 8013278:	00c0      	lsls	r0, r0, #3
 801327a:	fb19 f906 	smulbb	r9, r9, r6
 801327e:	fb15 f506 	smulbb	r5, r5, r6
 8013282:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8013286:	b2c0      	uxtb	r0, r0
 8013288:	fa1f fc8c 	uxth.w	ip, ip
 801328c:	fb07 970a 	mla	r7, r7, sl, r9
 8013290:	fb00 500a 	mla	r0, r0, sl, r5
 8013294:	b2bf      	uxth	r7, r7
 8013296:	b280      	uxth	r0, r0
 8013298:	f10c 0501 	add.w	r5, ip, #1
 801329c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80132a0:	f107 0901 	add.w	r9, r7, #1
 80132a4:	1c45      	adds	r5, r0, #1
 80132a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80132aa:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80132ae:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80132b2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80132b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80132ba:	ea45 0c0c 	orr.w	ip, r5, ip
 80132be:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80132c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80132c6:	f824 c00b 	strh.w	ip, [r4, fp]
 80132ca:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80132cc:	4401      	add	r1, r0
 80132ce:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80132d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80132d4:	4402      	add	r2, r0
 80132d6:	e75c      	b.n	8013192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80132d8:	b007      	add	sp, #28
 80132da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80132de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e2:	b085      	sub	sp, #20
 80132e4:	4693      	mov	fp, r2
 80132e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80132e8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80132ea:	6870      	ldr	r0, [r6, #4]
 80132ec:	9100      	str	r1, [sp, #0]
 80132ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80132f2:	fb00 2404 	mla	r4, r0, r4, r2
 80132f6:	6832      	ldr	r2, [r6, #0]
 80132f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80132fc:	682a      	ldr	r2, [r5, #0]
 80132fe:	9201      	str	r2, [sp, #4]
 8013300:	686a      	ldr	r2, [r5, #4]
 8013302:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8013306:	3204      	adds	r2, #4
 8013308:	9202      	str	r2, [sp, #8]
 801330a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801330e:	9a00      	ldr	r2, [sp, #0]
 8013310:	2a00      	cmp	r2, #0
 8013312:	dc03      	bgt.n	801331c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013314:	f1bb 0f00 	cmp.w	fp, #0
 8013318:	f340 80a0 	ble.w	801345c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801331c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801331e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8013322:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013326:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801332a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801332c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8013330:	2b00      	cmp	r3, #0
 8013332:	dd0c      	ble.n	801334e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013334:	1406      	asrs	r6, r0, #16
 8013336:	d405      	bmi.n	8013344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013338:	454e      	cmp	r6, r9
 801333a:	da03      	bge.n	8013344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801333c:	1416      	asrs	r6, r2, #16
 801333e:	d401      	bmi.n	8013344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013340:	4546      	cmp	r6, r8
 8013342:	db05      	blt.n	8013350 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013344:	4470      	add	r0, lr
 8013346:	4462      	add	r2, ip
 8013348:	3b01      	subs	r3, #1
 801334a:	3402      	adds	r4, #2
 801334c:	e7f0      	b.n	8013330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801334e:	d00f      	beq.n	8013370 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8013350:	1e5e      	subs	r6, r3, #1
 8013352:	fb0e 0706 	mla	r7, lr, r6, r0
 8013356:	143f      	asrs	r7, r7, #16
 8013358:	d541      	bpl.n	80133de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801335a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801335e:	4698      	mov	r8, r3
 8013360:	9603      	str	r6, [sp, #12]
 8013362:	f1b8 0f00 	cmp.w	r8, #0
 8013366:	dc59      	bgt.n	801341c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8013368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801336c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013370:	9b00      	ldr	r3, [sp, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	dd72      	ble.n	801345c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8013376:	ee30 0a04 	vadd.f32	s0, s0, s8
 801337a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801337e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013384:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013388:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801338c:	eeb0 6a62 	vmov.f32	s12, s5
 8013390:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013394:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013398:	ee77 2a62 	vsub.f32	s5, s14, s5
 801339c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80133a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80133a4:	eeb0 6a43 	vmov.f32	s12, s6
 80133a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80133ac:	ee12 2a90 	vmov	r2, s5
 80133b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80133b4:	fb92 fef3 	sdiv	lr, r2, r3
 80133b8:	ee13 2a10 	vmov	r2, s6
 80133bc:	fb92 fcf3 	sdiv	ip, r2, r3
 80133c0:	9b00      	ldr	r3, [sp, #0]
 80133c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80133c6:	3b01      	subs	r3, #1
 80133c8:	9300      	str	r3, [sp, #0]
 80133ca:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80133ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133d0:	eeb0 3a67 	vmov.f32	s6, s15
 80133d4:	bf08      	it	eq
 80133d6:	465b      	moveq	r3, fp
 80133d8:	eef0 2a47 	vmov.f32	s5, s14
 80133dc:	e797      	b.n	801330e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80133de:	454f      	cmp	r7, r9
 80133e0:	dabb      	bge.n	801335a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80133e2:	fb0c 2606 	mla	r6, ip, r6, r2
 80133e6:	1436      	asrs	r6, r6, #16
 80133e8:	d4b7      	bmi.n	801335a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80133ea:	4546      	cmp	r6, r8
 80133ec:	dab5      	bge.n	801335a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80133ee:	461e      	mov	r6, r3
 80133f0:	46a0      	mov	r8, r4
 80133f2:	2e00      	cmp	r6, #0
 80133f4:	ddb8      	ble.n	8013368 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80133f6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80133fa:	9901      	ldr	r1, [sp, #4]
 80133fc:	1417      	asrs	r7, r2, #16
 80133fe:	ea4f 4920 	mov.w	r9, r0, asr #16
 8013402:	fb0a 1707 	mla	r7, sl, r7, r1
 8013406:	9902      	ldr	r1, [sp, #8]
 8013408:	f817 7009 	ldrb.w	r7, [r7, r9]
 801340c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8013410:	f828 7b02 	strh.w	r7, [r8], #2
 8013414:	4470      	add	r0, lr
 8013416:	4462      	add	r2, ip
 8013418:	3e01      	subs	r6, #1
 801341a:	e7ea      	b.n	80133f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801341c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013420:	d417      	bmi.n	8013452 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8013422:	68ae      	ldr	r6, [r5, #8]
 8013424:	454e      	cmp	r6, r9
 8013426:	dd14      	ble.n	8013452 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8013428:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801342c:	d411      	bmi.n	8013452 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801342e:	68ef      	ldr	r7, [r5, #12]
 8013430:	4557      	cmp	r7, sl
 8013432:	dd0e      	ble.n	8013452 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8013434:	9f01      	ldr	r7, [sp, #4]
 8013436:	b236      	sxth	r6, r6
 8013438:	fb0a 7606 	mla	r6, sl, r6, r7
 801343c:	9f02      	ldr	r7, [sp, #8]
 801343e:	f816 6009 	ldrb.w	r6, [r6, r9]
 8013442:	f06f 0101 	mvn.w	r1, #1
 8013446:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801344a:	fb01 f608 	mul.w	r6, r1, r8
 801344e:	9903      	ldr	r1, [sp, #12]
 8013450:	538f      	strh	r7, [r1, r6]
 8013452:	4470      	add	r0, lr
 8013454:	4462      	add	r2, ip
 8013456:	f108 38ff 	add.w	r8, r8, #4294967295
 801345a:	e782      	b.n	8013362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801345c:	b005      	add	sp, #20
 801345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013466:	b087      	sub	sp, #28
 8013468:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801346a:	9205      	str	r2, [sp, #20]
 801346c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8013470:	9203      	str	r2, [sp, #12]
 8013472:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8013476:	9102      	str	r1, [sp, #8]
 8013478:	6861      	ldr	r1, [r4, #4]
 801347a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801347e:	fb01 2000 	mla	r0, r1, r0, r2
 8013482:	6822      	ldr	r2, [r4, #0]
 8013484:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013488:	9200      	str	r2, [sp, #0]
 801348a:	f8dc 2000 	ldr.w	r2, [ip]
 801348e:	9204      	str	r2, [sp, #16]
 8013490:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013494:	3204      	adds	r2, #4
 8013496:	9201      	str	r2, [sp, #4]
 8013498:	9a03      	ldr	r2, [sp, #12]
 801349a:	43d5      	mvns	r5, r2
 801349c:	b2ed      	uxtb	r5, r5
 801349e:	9a02      	ldr	r2, [sp, #8]
 80134a0:	2a00      	cmp	r2, #0
 80134a2:	dc03      	bgt.n	80134ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80134a4:	9a05      	ldr	r2, [sp, #20]
 80134a6:	2a00      	cmp	r2, #0
 80134a8:	f340 812c 	ble.w	8013704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80134ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80134ae:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80134b2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80134b6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80134ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80134bc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	dd10      	ble.n	80134e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80134c4:	140c      	asrs	r4, r1, #16
 80134c6:	d405      	bmi.n	80134d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80134c8:	4574      	cmp	r4, lr
 80134ca:	da03      	bge.n	80134d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80134cc:	1414      	asrs	r4, r2, #16
 80134ce:	d401      	bmi.n	80134d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80134d0:	42bc      	cmp	r4, r7
 80134d2:	db09      	blt.n	80134e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80134d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80134d6:	9800      	ldr	r0, [sp, #0]
 80134d8:	4421      	add	r1, r4
 80134da:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80134dc:	3002      	adds	r0, #2
 80134de:	4422      	add	r2, r4
 80134e0:	3b01      	subs	r3, #1
 80134e2:	9000      	str	r0, [sp, #0]
 80134e4:	e7ec      	b.n	80134c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80134e6:	d071      	beq.n	80135cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80134e8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80134ea:	1e5c      	subs	r4, r3, #1
 80134ec:	fb06 1604 	mla	r6, r6, r4, r1
 80134f0:	1436      	asrs	r6, r6, #16
 80134f2:	d45d      	bmi.n	80135b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80134f4:	4576      	cmp	r6, lr
 80134f6:	da5b      	bge.n	80135b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80134f8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80134fa:	fb06 2404 	mla	r4, r6, r4, r2
 80134fe:	1424      	asrs	r4, r4, #16
 8013500:	d456      	bmi.n	80135b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8013502:	42bc      	cmp	r4, r7
 8013504:	da54      	bge.n	80135b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8013506:	f8dd 9000 	ldr.w	r9, [sp]
 801350a:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801350e:	4698      	mov	r8, r3
 8013510:	f1b8 0f00 	cmp.w	r8, #0
 8013514:	dd54      	ble.n	80135c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8013516:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801351a:	9804      	ldr	r0, [sp, #16]
 801351c:	1414      	asrs	r4, r2, #16
 801351e:	fb07 0404 	mla	r4, r7, r4, r0
 8013522:	140e      	asrs	r6, r1, #16
 8013524:	9801      	ldr	r0, [sp, #4]
 8013526:	f814 e006 	ldrb.w	lr, [r4, r6]
 801352a:	f8b9 4000 	ldrh.w	r4, [r9]
 801352e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013532:	eb00 0b0e 	add.w	fp, r0, lr
 8013536:	1227      	asrs	r7, r4, #8
 8013538:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801353c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8013540:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8013544:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013546:	fb16 f60a 	smulbb	r6, r6, sl
 801354a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801354e:	fb07 6705 	mla	r7, r7, r5, r6
 8013552:	10e6      	asrs	r6, r4, #3
 8013554:	00e4      	lsls	r4, r4, #3
 8013556:	b2e4      	uxtb	r4, r4
 8013558:	fb1b fb0a 	smulbb	fp, fp, sl
 801355c:	fb14 f405 	smulbb	r4, r4, r5
 8013560:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8013564:	b2bf      	uxth	r7, r7
 8013566:	fb06 b605 	mla	r6, r6, r5, fp
 801356a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801356e:	b2b6      	uxth	r6, r6
 8013570:	fa1f fe8e 	uxth.w	lr, lr
 8013574:	1c7c      	adds	r4, r7, #1
 8013576:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801357a:	f106 0b01 	add.w	fp, r6, #1
 801357e:	f10e 0401 	add.w	r4, lr, #1
 8013582:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8013586:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801358a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801358e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8013592:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8013596:	4327      	orrs	r7, r4
 8013598:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801359c:	4401      	add	r1, r0
 801359e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80135a0:	ea47 070b 	orr.w	r7, r7, fp
 80135a4:	f829 7b02 	strh.w	r7, [r9], #2
 80135a8:	4402      	add	r2, r0
 80135aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80135ae:	e7af      	b.n	8013510 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80135b0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80135b4:	f04f 0e00 	mov.w	lr, #0
 80135b8:	eb03 040e 	add.w	r4, r3, lr
 80135bc:	2c00      	cmp	r4, #0
 80135be:	dc43      	bgt.n	8013648 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80135c0:	9a00      	ldr	r2, [sp, #0]
 80135c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80135c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	9b02      	ldr	r3, [sp, #8]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f340 8098 	ble.w	8013704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80135d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80135d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80135dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80135e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80135e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80135ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80135ee:	eef0 6a62 	vmov.f32	s13, s5
 80135f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80135f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80135fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80135fe:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8013602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013606:	eef0 6a43 	vmov.f32	s13, s6
 801360a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801360e:	ee12 2a90 	vmov	r2, s5
 8013612:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013616:	fb92 f3f3 	sdiv	r3, r2, r3
 801361a:	ee13 2a10 	vmov	r2, s6
 801361e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013622:	fb92 f3f3 	sdiv	r3, r2, r3
 8013626:	9314      	str	r3, [sp, #80]	@ 0x50
 8013628:	9b02      	ldr	r3, [sp, #8]
 801362a:	9a05      	ldr	r2, [sp, #20]
 801362c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013630:	3b01      	subs	r3, #1
 8013632:	9302      	str	r3, [sp, #8]
 8013634:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8013638:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801363a:	eeb0 3a67 	vmov.f32	s6, s15
 801363e:	bf08      	it	eq
 8013640:	4613      	moveq	r3, r2
 8013642:	eef0 2a47 	vmov.f32	s5, s14
 8013646:	e72a      	b.n	801349e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013648:	140f      	asrs	r7, r1, #16
 801364a:	d454      	bmi.n	80136f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801364c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013650:	42be      	cmp	r6, r7
 8013652:	dd50      	ble.n	80136f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013654:	ea5f 4822 	movs.w	r8, r2, asr #16
 8013658:	d44d      	bmi.n	80136f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801365a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801365e:	4544      	cmp	r4, r8
 8013660:	dd49      	ble.n	80136f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013662:	9c04      	ldr	r4, [sp, #16]
 8013664:	b236      	sxth	r6, r6
 8013666:	fb08 4606 	mla	r6, r8, r6, r4
 801366a:	f06f 0001 	mvn.w	r0, #1
 801366e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8013672:	9c01      	ldr	r4, [sp, #4]
 8013674:	fb00 fa0e 	mul.w	sl, r0, lr
 8013678:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801367c:	9800      	ldr	r0, [sp, #0]
 801367e:	eb04 0b08 	add.w	fp, r4, r8
 8013682:	f830 400a 	ldrh.w	r4, [r0, sl]
 8013686:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801368a:	9801      	ldr	r0, [sp, #4]
 801368c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8013690:	f810 8008 	ldrb.w	r8, [r0, r8]
 8013694:	9800      	ldr	r0, [sp, #0]
 8013696:	1227      	asrs	r7, r4, #8
 8013698:	fb16 f609 	smulbb	r6, r6, r9
 801369c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80136a0:	fb07 6705 	mla	r7, r7, r5, r6
 80136a4:	10e6      	asrs	r6, r4, #3
 80136a6:	00e4      	lsls	r4, r4, #3
 80136a8:	b2e4      	uxtb	r4, r4
 80136aa:	fb1b fb09 	smulbb	fp, fp, r9
 80136ae:	fb14 f405 	smulbb	r4, r4, r5
 80136b2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80136b6:	b2bf      	uxth	r7, r7
 80136b8:	fb06 b605 	mla	r6, r6, r5, fp
 80136bc:	fb08 4809 	mla	r8, r8, r9, r4
 80136c0:	b2b6      	uxth	r6, r6
 80136c2:	fa1f f888 	uxth.w	r8, r8
 80136c6:	1c7c      	adds	r4, r7, #1
 80136c8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80136cc:	f106 0b01 	add.w	fp, r6, #1
 80136d0:	f108 0401 	add.w	r4, r8, #1
 80136d4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80136d8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80136dc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80136e0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80136e4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80136e8:	4327      	orrs	r7, r4
 80136ea:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80136ee:	ea47 070b 	orr.w	r7, r7, fp
 80136f2:	f820 700a 	strh.w	r7, [r0, sl]
 80136f6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80136f8:	4401      	add	r1, r0
 80136fa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80136fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013700:	4402      	add	r2, r0
 8013702:	e759      	b.n	80135b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013704:	b007      	add	sp, #28
 8013706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801370c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	b085      	sub	sp, #20
 8013712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013716:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013718:	9203      	str	r2, [sp, #12]
 801371a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801371e:	6870      	ldr	r0, [r6, #4]
 8013720:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8013722:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8013726:	686f      	ldr	r7, [r5, #4]
 8013728:	9101      	str	r1, [sp, #4]
 801372a:	fb00 2404 	mla	r4, r0, r4, r2
 801372e:	6832      	ldr	r2, [r6, #0]
 8013730:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013734:	682a      	ldr	r2, [r5, #0]
 8013736:	9202      	str	r2, [sp, #8]
 8013738:	3704      	adds	r7, #4
 801373a:	9a01      	ldr	r2, [sp, #4]
 801373c:	2a00      	cmp	r2, #0
 801373e:	dc03      	bgt.n	8013748 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013740:	9a03      	ldr	r2, [sp, #12]
 8013742:	2a00      	cmp	r2, #0
 8013744:	f340 80cc 	ble.w	80138e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8013748:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801374a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801374e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013752:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8013756:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013758:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801375c:	2b00      	cmp	r3, #0
 801375e:	dd0d      	ble.n	801377c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013760:	1406      	asrs	r6, r0, #16
 8013762:	d405      	bmi.n	8013770 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013764:	454e      	cmp	r6, r9
 8013766:	da03      	bge.n	8013770 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013768:	1416      	asrs	r6, r2, #16
 801376a:	d401      	bmi.n	8013770 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801376c:	4546      	cmp	r6, r8
 801376e:	db06      	blt.n	801377e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013770:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8013772:	4460      	add	r0, ip
 8013774:	4432      	add	r2, r6
 8013776:	3b01      	subs	r3, #1
 8013778:	3402      	adds	r4, #2
 801377a:	e7ef      	b.n	801375c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801377c:	d00f      	beq.n	801379e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801377e:	1e5e      	subs	r6, r3, #1
 8013780:	fb0c 0e06 	mla	lr, ip, r6, r0
 8013784:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8013788:	d543      	bpl.n	8013812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801378a:	4698      	mov	r8, r3
 801378c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8013790:	f1b8 0f00 	cmp.w	r8, #0
 8013794:	dc71      	bgt.n	801387a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8013796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801379a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801379e:	9b01      	ldr	r3, [sp, #4]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f340 809d 	ble.w	80138e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80137a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80137aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80137ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80137b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80137b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80137bc:	eeb0 6a62 	vmov.f32	s12, s5
 80137c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80137c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80137c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80137cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80137d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80137d4:	eeb0 6a43 	vmov.f32	s12, s6
 80137d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80137dc:	ee12 2a90 	vmov	r2, s5
 80137e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80137e4:	fb92 fcf3 	sdiv	ip, r2, r3
 80137e8:	ee13 2a10 	vmov	r2, s6
 80137ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80137f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	9a03      	ldr	r2, [sp, #12]
 80137f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80137fa:	3b01      	subs	r3, #1
 80137fc:	9301      	str	r3, [sp, #4]
 80137fe:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8013802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013804:	eeb0 3a67 	vmov.f32	s6, s15
 8013808:	bf08      	it	eq
 801380a:	4613      	moveq	r3, r2
 801380c:	eef0 2a47 	vmov.f32	s5, s14
 8013810:	e793      	b.n	801373a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013812:	45ce      	cmp	lr, r9
 8013814:	dab9      	bge.n	801378a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013816:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013818:	fb01 2606 	mla	r6, r1, r6, r2
 801381c:	1436      	asrs	r6, r6, #16
 801381e:	d4b4      	bmi.n	801378a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013820:	4546      	cmp	r6, r8
 8013822:	dab2      	bge.n	801378a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013824:	4698      	mov	r8, r3
 8013826:	46a2      	mov	sl, r4
 8013828:	f1b8 0f00 	cmp.w	r8, #0
 801382c:	ddb3      	ble.n	8013796 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801382e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8013832:	9902      	ldr	r1, [sp, #8]
 8013834:	1416      	asrs	r6, r2, #16
 8013836:	fb09 1606 	mla	r6, r9, r6, r1
 801383a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801383e:	492a      	ldr	r1, [pc, #168]	@ (80138e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8013840:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8013844:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013848:	eb07 0b0e 	add.w	fp, r7, lr
 801384c:	4460      	add	r0, ip
 801384e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8013852:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013856:	00f6      	lsls	r6, r6, #3
 8013858:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801385c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8013860:	ea49 0606 	orr.w	r6, r9, r6
 8013864:	f817 900e 	ldrb.w	r9, [r7, lr]
 8013868:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801386a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801386e:	f82a 6b02 	strh.w	r6, [sl], #2
 8013872:	440a      	add	r2, r1
 8013874:	f108 38ff 	add.w	r8, r8, #4294967295
 8013878:	e7d6      	b.n	8013828 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801387a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801387e:	d429      	bmi.n	80138d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013880:	68ae      	ldr	r6, [r5, #8]
 8013882:	454e      	cmp	r6, r9
 8013884:	dd26      	ble.n	80138d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013886:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801388a:	d423      	bmi.n	80138d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801388c:	68e9      	ldr	r1, [r5, #12]
 801388e:	4559      	cmp	r1, fp
 8013890:	dd20      	ble.n	80138d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013892:	9902      	ldr	r1, [sp, #8]
 8013894:	fa0f fe86 	sxth.w	lr, r6
 8013898:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801389c:	f06f 0101 	mvn.w	r1, #1
 80138a0:	f81e e009 	ldrb.w	lr, [lr, r9]
 80138a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80138a8:	eb07 060e 	add.w	r6, r7, lr
 80138ac:	fb01 f908 	mul.w	r9, r1, r8
 80138b0:	f896 b002 	ldrb.w	fp, [r6, #2]
 80138b4:	7876      	ldrb	r6, [r6, #1]
 80138b6:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 80138ba:	00f6      	lsls	r6, r6, #3
 80138bc:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80138c0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80138c4:	ea4b 0606 	orr.w	r6, fp, r6
 80138c8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80138cc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80138d0:	f82a 6009 	strh.w	r6, [sl, r9]
 80138d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80138d6:	4460      	add	r0, ip
 80138d8:	440a      	add	r2, r1
 80138da:	f108 38ff 	add.w	r8, r8, #4294967295
 80138de:	e757      	b.n	8013790 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80138e0:	b005      	add	sp, #20
 80138e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e6:	bf00      	nop
 80138e8:	fffff800 	.word	0xfffff800

080138ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80138ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f0:	b087      	sub	sp, #28
 80138f2:	468b      	mov	fp, r1
 80138f4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80138f6:	9204      	str	r2, [sp, #16]
 80138f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80138fc:	9205      	str	r2, [sp, #20]
 80138fe:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8013902:	6841      	ldr	r1, [r0, #4]
 8013904:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8013908:	fb01 2404 	mla	r4, r1, r4, r2
 801390c:	6802      	ldr	r2, [r0, #0]
 801390e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013912:	f8dc 2000 	ldr.w	r2, [ip]
 8013916:	9201      	str	r2, [sp, #4]
 8013918:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801391c:	3204      	adds	r2, #4
 801391e:	9202      	str	r2, [sp, #8]
 8013920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013924:	f1bb 0f00 	cmp.w	fp, #0
 8013928:	dc03      	bgt.n	8013932 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801392a:	9a04      	ldr	r2, [sp, #16]
 801392c:	2a00      	cmp	r2, #0
 801392e:	f340 8138 	ble.w	8013ba2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8013932:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013934:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8013938:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801393c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8013940:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013942:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8013946:	2b00      	cmp	r3, #0
 8013948:	dd0e      	ble.n	8013968 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801394a:	1402      	asrs	r2, r0, #16
 801394c:	d405      	bmi.n	801395a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801394e:	42ba      	cmp	r2, r7
 8013950:	da03      	bge.n	801395a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013952:	140a      	asrs	r2, r1, #16
 8013954:	d401      	bmi.n	801395a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013956:	42b2      	cmp	r2, r6
 8013958:	db07      	blt.n	801396a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801395a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801395c:	4410      	add	r0, r2
 801395e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013960:	3b01      	subs	r3, #1
 8013962:	4411      	add	r1, r2
 8013964:	3402      	adds	r4, #2
 8013966:	e7ee      	b.n	8013946 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013968:	d019      	beq.n	801399e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801396a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801396c:	1e5a      	subs	r2, r3, #1
 801396e:	fb05 0502 	mla	r5, r5, r2, r0
 8013972:	142d      	asrs	r5, r5, #16
 8013974:	d409      	bmi.n	801398a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013976:	42bd      	cmp	r5, r7
 8013978:	da07      	bge.n	801398a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801397a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801397c:	fb05 1202 	mla	r2, r5, r2, r1
 8013980:	1412      	asrs	r2, r2, #16
 8013982:	d402      	bmi.n	801398a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013984:	42b2      	cmp	r2, r6
 8013986:	f2c0 80ac 	blt.w	8013ae2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801398a:	f04f 0e00 	mov.w	lr, #0
 801398e:	eb03 020e 	add.w	r2, r3, lr
 8013992:	2a00      	cmp	r2, #0
 8013994:	dc3e      	bgt.n	8013a14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8013996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801399a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801399e:	f1bb 0f00 	cmp.w	fp, #0
 80139a2:	f340 80fe 	ble.w	8013ba2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80139a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80139aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80139ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139b4:	f1bb 0b01 	subs.w	fp, fp, #1
 80139b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139c0:	eeb0 6a62 	vmov.f32	s12, s5
 80139c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139d0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80139d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139d8:	eeb0 6a43 	vmov.f32	s12, s6
 80139dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139e0:	ee12 2a90 	vmov	r2, s5
 80139e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80139e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139ec:	ee13 2a10 	vmov	r2, s6
 80139f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80139f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139fc:	9a04      	ldr	r2, [sp, #16]
 80139fe:	9314      	str	r3, [sp, #80]	@ 0x50
 8013a00:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8013a04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a06:	eeb0 3a67 	vmov.f32	s6, s15
 8013a0a:	bf08      	it	eq
 8013a0c:	4613      	moveq	r3, r2
 8013a0e:	eef0 2a47 	vmov.f32	s5, s14
 8013a12:	e787      	b.n	8013924 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8013a14:	1406      	asrs	r6, r0, #16
 8013a16:	d45d      	bmi.n	8013ad4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013a18:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8013a1c:	42b5      	cmp	r5, r6
 8013a1e:	dd59      	ble.n	8013ad4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013a20:	140f      	asrs	r7, r1, #16
 8013a22:	d457      	bmi.n	8013ad4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013a24:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013a28:	42ba      	cmp	r2, r7
 8013a2a:	dd53      	ble.n	8013ad4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013a2c:	9a01      	ldr	r2, [sp, #4]
 8013a2e:	b22d      	sxth	r5, r5
 8013a30:	fb07 2505 	mla	r5, r7, r5, r2
 8013a34:	5daa      	ldrb	r2, [r5, r6]
 8013a36:	9d02      	ldr	r5, [sp, #8]
 8013a38:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013a3c:	0e2e      	lsrs	r6, r5, #24
 8013a3e:	d049      	beq.n	8013ad4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013a40:	f06f 0201 	mvn.w	r2, #1
 8013a44:	fb02 f20e 	mul.w	r2, r2, lr
 8013a48:	9203      	str	r2, [sp, #12]
 8013a4a:	f834 8002 	ldrh.w	r8, [r4, r2]
 8013a4e:	9a05      	ldr	r2, [sp, #20]
 8013a50:	4356      	muls	r6, r2
 8013a52:	1c72      	adds	r2, r6, #1
 8013a54:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013a58:	1212      	asrs	r2, r2, #8
 8013a5a:	fa1f f982 	uxth.w	r9, r2
 8013a5e:	ea4f 2728 	mov.w	r7, r8, asr #8
 8013a62:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013a66:	43d2      	mvns	r2, r2
 8013a68:	b2d2      	uxtb	r2, r2
 8013a6a:	fb16 f609 	smulbb	r6, r6, r9
 8013a6e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8013a72:	fb07 6702 	mla	r7, r7, r2, r6
 8013a76:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013a7a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8013a7e:	b2ed      	uxtb	r5, r5
 8013a80:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013a84:	fa5f f888 	uxtb.w	r8, r8
 8013a88:	fb15 f509 	smulbb	r5, r5, r9
 8013a8c:	fb08 5502 	mla	r5, r8, r2, r5
 8013a90:	b2bf      	uxth	r7, r7
 8013a92:	fb1a fa09 	smulbb	sl, sl, r9
 8013a96:	b2ad      	uxth	r5, r5
 8013a98:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8013a9c:	fb06 a602 	mla	r6, r6, r2, sl
 8013aa0:	1c7a      	adds	r2, r7, #1
 8013aa2:	f105 0a01 	add.w	sl, r5, #1
 8013aa6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013aaa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013aae:	b2b6      	uxth	r6, r6
 8013ab0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013ab4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8013ab8:	ea4a 0707 	orr.w	r7, sl, r7
 8013abc:	f106 0a01 	add.w	sl, r6, #1
 8013ac0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013ac4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013ac8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8013acc:	9a03      	ldr	r2, [sp, #12]
 8013ace:	ea47 070a 	orr.w	r7, r7, sl
 8013ad2:	52a7      	strh	r7, [r4, r2]
 8013ad4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013ad6:	4410      	add	r0, r2
 8013ad8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ada:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013ade:	4411      	add	r1, r2
 8013ae0:	e755      	b.n	801398e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013ae2:	f04f 0800 	mov.w	r8, #0
 8013ae6:	eba3 0208 	sub.w	r2, r3, r8
 8013aea:	2a00      	cmp	r2, #0
 8013aec:	f77f af53 	ble.w	8013996 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8013af0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8013af4:	9f01      	ldr	r7, [sp, #4]
 8013af6:	140a      	asrs	r2, r1, #16
 8013af8:	1405      	asrs	r5, r0, #16
 8013afa:	fb06 7202 	mla	r2, r6, r2, r7
 8013afe:	5d52      	ldrb	r2, [r2, r5]
 8013b00:	9d02      	ldr	r5, [sp, #8]
 8013b02:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013b06:	0e2e      	lsrs	r6, r5, #24
 8013b08:	d044      	beq.n	8013b94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8013b0a:	9a05      	ldr	r2, [sp, #20]
 8013b0c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8013b10:	4356      	muls	r6, r2
 8013b12:	1c72      	adds	r2, r6, #1
 8013b14:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013b18:	1212      	asrs	r2, r2, #8
 8013b1a:	fa1f f982 	uxth.w	r9, r2
 8013b1e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013b22:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013b26:	43d2      	mvns	r2, r2
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	fb16 f609 	smulbb	r6, r6, r9
 8013b2e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8013b32:	fb07 6702 	mla	r7, r7, r2, r6
 8013b36:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013b3a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013b3e:	b2ed      	uxtb	r5, r5
 8013b40:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013b44:	fa5f fe8e 	uxtb.w	lr, lr
 8013b48:	fb15 f509 	smulbb	r5, r5, r9
 8013b4c:	fb0e 5502 	mla	r5, lr, r2, r5
 8013b50:	b2bf      	uxth	r7, r7
 8013b52:	fb1a fa09 	smulbb	sl, sl, r9
 8013b56:	b2ad      	uxth	r5, r5
 8013b58:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8013b5c:	fb06 a602 	mla	r6, r6, r2, sl
 8013b60:	1c7a      	adds	r2, r7, #1
 8013b62:	f105 0a01 	add.w	sl, r5, #1
 8013b66:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013b6a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013b6e:	b2b6      	uxth	r6, r6
 8013b70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013b74:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8013b78:	ea4a 0707 	orr.w	r7, sl, r7
 8013b7c:	f106 0a01 	add.w	sl, r6, #1
 8013b80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013b84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013b88:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8013b8c:	ea47 070a 	orr.w	r7, r7, sl
 8013b90:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8013b94:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013b96:	4410      	add	r0, r2
 8013b98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013b9a:	f108 0801 	add.w	r8, r8, #1
 8013b9e:	4411      	add	r1, r2
 8013ba0:	e7a1      	b.n	8013ae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8013ba2:	b007      	add	sp, #28
 8013ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ba8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	b085      	sub	sp, #20
 8013bae:	468b      	mov	fp, r1
 8013bb0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013bb2:	9203      	str	r2, [sp, #12]
 8013bb4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8013bb8:	6841      	ldr	r1, [r0, #4]
 8013bba:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8013bbe:	fb01 2404 	mla	r4, r1, r4, r2
 8013bc2:	6802      	ldr	r2, [r0, #0]
 8013bc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013bc8:	f8de 2000 	ldr.w	r2, [lr]
 8013bcc:	9200      	str	r2, [sp, #0]
 8013bce:	f8de 2004 	ldr.w	r2, [lr, #4]
 8013bd2:	3204      	adds	r2, #4
 8013bd4:	9201      	str	r2, [sp, #4]
 8013bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bda:	f1bb 0f00 	cmp.w	fp, #0
 8013bde:	dc03      	bgt.n	8013be8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8013be0:	9a03      	ldr	r2, [sp, #12]
 8013be2:	2a00      	cmp	r2, #0
 8013be4:	f340 8153 	ble.w	8013e8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8013be8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013bea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8013bee:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8013bf2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8013bf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013bf8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	dd0e      	ble.n	8013c1e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013c00:	1408      	asrs	r0, r1, #16
 8013c02:	d405      	bmi.n	8013c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013c04:	42b8      	cmp	r0, r7
 8013c06:	da03      	bge.n	8013c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013c08:	1410      	asrs	r0, r2, #16
 8013c0a:	d401      	bmi.n	8013c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013c0c:	42b0      	cmp	r0, r6
 8013c0e:	db07      	blt.n	8013c20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013c10:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013c12:	4401      	add	r1, r0
 8013c14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013c16:	3b01      	subs	r3, #1
 8013c18:	4402      	add	r2, r0
 8013c1a:	3402      	adds	r4, #2
 8013c1c:	e7ee      	b.n	8013bfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8013c1e:	d017      	beq.n	8013c50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8013c20:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013c22:	1e58      	subs	r0, r3, #1
 8013c24:	fb05 1500 	mla	r5, r5, r0, r1
 8013c28:	142d      	asrs	r5, r5, #16
 8013c2a:	d409      	bmi.n	8013c40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013c2c:	42bd      	cmp	r5, r7
 8013c2e:	da07      	bge.n	8013c40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013c30:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8013c32:	fb05 2000 	mla	r0, r5, r0, r2
 8013c36:	1400      	asrs	r0, r0, #16
 8013c38:	d402      	bmi.n	8013c40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013c3a:	42b0      	cmp	r0, r6
 8013c3c:	f2c0 80bc 	blt.w	8013db8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8013c40:	2600      	movs	r6, #0
 8013c42:	1998      	adds	r0, r3, r6
 8013c44:	2800      	cmp	r0, #0
 8013c46:	dc3e      	bgt.n	8013cc6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8013c48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013c50:	f1bb 0f00 	cmp.w	fp, #0
 8013c54:	f340 811b 	ble.w	8013e8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8013c58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013c5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013c60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c66:	f1bb 0b01 	subs.w	fp, fp, #1
 8013c6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013c6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013c72:	eeb0 6a62 	vmov.f32	s12, s5
 8013c76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013c7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013c82:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8013c86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013c8a:	eeb0 6a43 	vmov.f32	s12, s6
 8013c8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013c92:	ee12 2a90 	vmov	r2, s5
 8013c96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c9e:	ee13 2a10 	vmov	r2, s6
 8013ca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013ca6:	9311      	str	r3, [sp, #68]	@ 0x44
 8013ca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cae:	9a03      	ldr	r2, [sp, #12]
 8013cb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8013cb2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8013cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cb8:	eeb0 3a67 	vmov.f32	s6, s15
 8013cbc:	bf08      	it	eq
 8013cbe:	4613      	moveq	r3, r2
 8013cc0:	eef0 2a47 	vmov.f32	s5, s14
 8013cc4:	e789      	b.n	8013bda <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8013cc6:	140f      	asrs	r7, r1, #16
 8013cc8:	d426      	bmi.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013cca:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013cce:	42bd      	cmp	r5, r7
 8013cd0:	dd22      	ble.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013cd2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8013cd6:	d41f      	bmi.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013cd8:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013cdc:	4560      	cmp	r0, ip
 8013cde:	dd1b      	ble.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013ce0:	9800      	ldr	r0, [sp, #0]
 8013ce2:	b22d      	sxth	r5, r5
 8013ce4:	fb0c 0505 	mla	r5, ip, r5, r0
 8013ce8:	5de8      	ldrb	r0, [r5, r7]
 8013cea:	9d01      	ldr	r5, [sp, #4]
 8013cec:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8013cf0:	0e07      	lsrs	r7, r0, #24
 8013cf2:	2fff      	cmp	r7, #255	@ 0xff
 8013cf4:	d116      	bne.n	8013d24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8013cf6:	f06f 0501 	mvn.w	r5, #1
 8013cfa:	fb05 f706 	mul.w	r7, r5, r6
 8013cfe:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8013d02:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8013d06:	0945      	lsrs	r5, r0, #5
 8013d08:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8013d0c:	ea4c 0505 	orr.w	r5, ip, r5
 8013d10:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8013d14:	4305      	orrs	r5, r0
 8013d16:	53e5      	strh	r5, [r4, r7]
 8013d18:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013d1a:	4401      	add	r1, r0
 8013d1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013d1e:	3e01      	subs	r6, #1
 8013d20:	4402      	add	r2, r0
 8013d22:	e78e      	b.n	8013c42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8013d24:	b2fd      	uxtb	r5, r7
 8013d26:	2f00      	cmp	r7, #0
 8013d28:	d0f6      	beq.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013d2a:	f06f 0701 	mvn.w	r7, #1
 8013d2e:	4377      	muls	r7, r6
 8013d30:	fa1f f985 	uxth.w	r9, r5
 8013d34:	f834 8007 	ldrh.w	r8, [r4, r7]
 8013d38:	9702      	str	r7, [sp, #8]
 8013d3a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8013d3e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013d42:	43ed      	mvns	r5, r5
 8013d44:	b2ed      	uxtb	r5, r5
 8013d46:	fb17 f709 	smulbb	r7, r7, r9
 8013d4a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8013d4e:	fb0c 7c05 	mla	ip, ip, r5, r7
 8013d52:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8013d56:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8013d5a:	b2c0      	uxtb	r0, r0
 8013d5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013d60:	fa5f f888 	uxtb.w	r8, r8
 8013d64:	fb10 f009 	smulbb	r0, r0, r9
 8013d68:	fb08 0005 	mla	r0, r8, r5, r0
 8013d6c:	b280      	uxth	r0, r0
 8013d6e:	fa1f fc8c 	uxth.w	ip, ip
 8013d72:	fb1a fa09 	smulbb	sl, sl, r9
 8013d76:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8013d7a:	fb07 a705 	mla	r7, r7, r5, sl
 8013d7e:	f100 0a01 	add.w	sl, r0, #1
 8013d82:	f10c 0501 	add.w	r5, ip, #1
 8013d86:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8013d8a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013d8e:	b2bf      	uxth	r7, r7
 8013d90:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013d94:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8013d98:	ea4a 0c0c 	orr.w	ip, sl, ip
 8013d9c:	f107 0a01 	add.w	sl, r7, #1
 8013da0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8013da4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013da8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8013dac:	9802      	ldr	r0, [sp, #8]
 8013dae:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013db2:	f824 c000 	strh.w	ip, [r4, r0]
 8013db6:	e7af      	b.n	8013d18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8013db8:	f04f 0800 	mov.w	r8, #0
 8013dbc:	eba3 0008 	sub.w	r0, r3, r8
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f77f af41 	ble.w	8013c48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013dc6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8013dca:	9f00      	ldr	r7, [sp, #0]
 8013dcc:	1410      	asrs	r0, r2, #16
 8013dce:	140d      	asrs	r5, r1, #16
 8013dd0:	fb06 7000 	mla	r0, r6, r0, r7
 8013dd4:	5d40      	ldrb	r0, [r0, r5]
 8013dd6:	9d01      	ldr	r5, [sp, #4]
 8013dd8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8013ddc:	0e2e      	lsrs	r6, r5, #24
 8013dde:	2eff      	cmp	r6, #255	@ 0xff
 8013de0:	d112      	bne.n	8013e08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8013de2:	482c      	ldr	r0, [pc, #176]	@ (8013e94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8013de4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8013de8:	0968      	lsrs	r0, r5, #5
 8013dea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8013dee:	4330      	orrs	r0, r6
 8013df0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8013df4:	4328      	orrs	r0, r5
 8013df6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8013dfa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013dfc:	4401      	add	r1, r0
 8013dfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013e00:	f108 0801 	add.w	r8, r8, #1
 8013e04:	4402      	add	r2, r0
 8013e06:	e7d9      	b.n	8013dbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8013e08:	b2f0      	uxtb	r0, r6
 8013e0a:	2e00      	cmp	r6, #0
 8013e0c:	d0f5      	beq.n	8013dfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8013e0e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8013e12:	fa1f f980 	uxth.w	r9, r0
 8013e16:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013e1a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013e1e:	43c0      	mvns	r0, r0
 8013e20:	b2c0      	uxtb	r0, r0
 8013e22:	fb16 f609 	smulbb	r6, r6, r9
 8013e26:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8013e2a:	fb07 6700 	mla	r7, r7, r0, r6
 8013e2e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013e32:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8013e36:	b2ed      	uxtb	r5, r5
 8013e38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013e3c:	fa5f fc8c 	uxtb.w	ip, ip
 8013e40:	fb15 f509 	smulbb	r5, r5, r9
 8013e44:	fb0c 5500 	mla	r5, ip, r0, r5
 8013e48:	b2bf      	uxth	r7, r7
 8013e4a:	fb1a fa09 	smulbb	sl, sl, r9
 8013e4e:	b2ad      	uxth	r5, r5
 8013e50:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8013e54:	fb06 a600 	mla	r6, r6, r0, sl
 8013e58:	1c78      	adds	r0, r7, #1
 8013e5a:	f105 0a01 	add.w	sl, r5, #1
 8013e5e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8013e62:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013e66:	b2b6      	uxth	r6, r6
 8013e68:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013e6c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8013e70:	ea4a 0707 	orr.w	r7, sl, r7
 8013e74:	f106 0a01 	add.w	sl, r6, #1
 8013e78:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013e7c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013e80:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8013e84:	ea47 070a 	orr.w	r7, r7, sl
 8013e88:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8013e8c:	e7b5      	b.n	8013dfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8013e8e:	b005      	add	sp, #20
 8013e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e94:	fffff800 	.word	0xfffff800

08013e98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9c:	b087      	sub	sp, #28
 8013e9e:	468b      	mov	fp, r1
 8013ea0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8013ea2:	9204      	str	r2, [sp, #16]
 8013ea4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8013ea8:	9205      	str	r2, [sp, #20]
 8013eaa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8013eae:	6861      	ldr	r1, [r4, #4]
 8013eb0:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8013eb4:	fb01 2000 	mla	r0, r1, r0, r2
 8013eb8:	6822      	ldr	r2, [r4, #0]
 8013eba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8013ebe:	f8de 2000 	ldr.w	r2, [lr]
 8013ec2:	9201      	str	r2, [sp, #4]
 8013ec4:	f8de 2004 	ldr.w	r2, [lr, #4]
 8013ec8:	9202      	str	r2, [sp, #8]
 8013eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ece:	f1bb 0f00 	cmp.w	fp, #0
 8013ed2:	dc03      	bgt.n	8013edc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8013ed4:	9a04      	ldr	r2, [sp, #16]
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	f340 8142 	ble.w	8014160 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8013edc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013ede:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8013ee2:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8013ee6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8013eea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013eec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	dd0e      	ble.n	8013f12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013ef4:	140c      	asrs	r4, r1, #16
 8013ef6:	d405      	bmi.n	8013f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013ef8:	42bc      	cmp	r4, r7
 8013efa:	da03      	bge.n	8013f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013efc:	1414      	asrs	r4, r2, #16
 8013efe:	d401      	bmi.n	8013f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013f00:	42b4      	cmp	r4, r6
 8013f02:	db07      	blt.n	8013f14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013f04:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013f06:	4421      	add	r1, r4
 8013f08:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8013f0a:	3b01      	subs	r3, #1
 8013f0c:	4422      	add	r2, r4
 8013f0e:	3002      	adds	r0, #2
 8013f10:	e7ee      	b.n	8013ef0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8013f12:	d019      	beq.n	8013f48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8013f14:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8013f16:	1e5c      	subs	r4, r3, #1
 8013f18:	fb05 1504 	mla	r5, r5, r4, r1
 8013f1c:	142d      	asrs	r5, r5, #16
 8013f1e:	d409      	bmi.n	8013f34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013f20:	42bd      	cmp	r5, r7
 8013f22:	da07      	bge.n	8013f34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013f24:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8013f26:	fb05 2404 	mla	r4, r5, r4, r2
 8013f2a:	1424      	asrs	r4, r4, #16
 8013f2c:	d402      	bmi.n	8013f34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8013f2e:	42b4      	cmp	r4, r6
 8013f30:	f2c0 80b1 	blt.w	8014096 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8013f34:	f04f 0800 	mov.w	r8, #0
 8013f38:	eb03 0408 	add.w	r4, r3, r8
 8013f3c:	2c00      	cmp	r4, #0
 8013f3e:	dc3e      	bgt.n	8013fbe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013f40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013f48:	f1bb 0f00 	cmp.w	fp, #0
 8013f4c:	f340 8108 	ble.w	8014160 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8013f50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013f54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013f58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013f5e:	f1bb 0b01 	subs.w	fp, fp, #1
 8013f62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013f66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013f6a:	eeb0 6a62 	vmov.f32	s12, s5
 8013f6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013f72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013f76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013f7a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8013f7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013f82:	eeb0 6a43 	vmov.f32	s12, s6
 8013f86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013f8a:	ee12 2a90 	vmov	r2, s5
 8013f8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f96:	ee13 2a10 	vmov	r2, s6
 8013f9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013f9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013fa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8013fa6:	9a04      	ldr	r2, [sp, #16]
 8013fa8:	9314      	str	r3, [sp, #80]	@ 0x50
 8013faa:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8013fae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013fb0:	eeb0 3a67 	vmov.f32	s6, s15
 8013fb4:	bf08      	it	eq
 8013fb6:	4613      	moveq	r3, r2
 8013fb8:	eef0 2a47 	vmov.f32	s5, s14
 8013fbc:	e787      	b.n	8013ece <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013fbe:	140e      	asrs	r6, r1, #16
 8013fc0:	d462      	bmi.n	8014088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8013fc2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013fc6:	42b5      	cmp	r5, r6
 8013fc8:	dd5e      	ble.n	8014088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8013fca:	1417      	asrs	r7, r2, #16
 8013fcc:	d45c      	bmi.n	8014088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8013fce:	f8de 400c 	ldr.w	r4, [lr, #12]
 8013fd2:	42bc      	cmp	r4, r7
 8013fd4:	dd58      	ble.n	8014088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8013fd6:	b22d      	sxth	r5, r5
 8013fd8:	fb07 6505 	mla	r5, r7, r5, r6
 8013fdc:	9c02      	ldr	r4, [sp, #8]
 8013fde:	5d66      	ldrb	r6, [r4, r5]
 8013fe0:	2e00      	cmp	r6, #0
 8013fe2:	d051      	beq.n	8014088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8013fe4:	9c01      	ldr	r4, [sp, #4]
 8013fe6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8013fea:	f06f 0401 	mvn.w	r4, #1
 8013fee:	fb04 f408 	mul.w	r4, r4, r8
 8013ff2:	9403      	str	r4, [sp, #12]
 8013ff4:	5b05      	ldrh	r5, [r0, r4]
 8013ff6:	9c05      	ldr	r4, [sp, #20]
 8013ff8:	4366      	muls	r6, r4
 8013ffa:	1c74      	adds	r4, r6, #1
 8013ffc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8014000:	1224      	asrs	r4, r4, #8
 8014002:	b2a7      	uxth	r7, r4
 8014004:	122e      	asrs	r6, r5, #8
 8014006:	43e4      	mvns	r4, r4
 8014008:	b2e4      	uxtb	r4, r4
 801400a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801400e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8014012:	fb16 f604 	smulbb	r6, r6, r4
 8014016:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801401a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801401e:	00ed      	lsls	r5, r5, #3
 8014020:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014024:	b2ed      	uxtb	r5, r5
 8014026:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801402a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801402e:	fb15 f504 	smulbb	r5, r5, r4
 8014032:	fa5f f989 	uxtb.w	r9, r9
 8014036:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801403a:	fb09 5507 	mla	r5, r9, r7, r5
 801403e:	fb1a fa04 	smulbb	sl, sl, r4
 8014042:	fa1f fc8c 	uxth.w	ip, ip
 8014046:	b2ad      	uxth	r5, r5
 8014048:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801404c:	fb06 a607 	mla	r6, r6, r7, sl
 8014050:	f10c 0401 	add.w	r4, ip, #1
 8014054:	f105 0a01 	add.w	sl, r5, #1
 8014058:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801405c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014060:	b2b6      	uxth	r6, r6
 8014062:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014066:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801406a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801406e:	f106 0a01 	add.w	sl, r6, #1
 8014072:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014076:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801407a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801407e:	9c03      	ldr	r4, [sp, #12]
 8014080:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014084:	f820 c004 	strh.w	ip, [r0, r4]
 8014088:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801408a:	4421      	add	r1, r4
 801408c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801408e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014092:	4422      	add	r2, r4
 8014094:	e750      	b.n	8013f38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014096:	f04f 0900 	mov.w	r9, #0
 801409a:	eba3 0409 	sub.w	r4, r3, r9
 801409e:	2c00      	cmp	r4, #0
 80140a0:	f77f af4e 	ble.w	8013f40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80140a4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80140a8:	140d      	asrs	r5, r1, #16
 80140aa:	1414      	asrs	r4, r2, #16
 80140ac:	fb06 5404 	mla	r4, r6, r4, r5
 80140b0:	9d02      	ldr	r5, [sp, #8]
 80140b2:	5d2e      	ldrb	r6, [r5, r4]
 80140b4:	2e00      	cmp	r6, #0
 80140b6:	d04c      	beq.n	8014152 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80140b8:	9d01      	ldr	r5, [sp, #4]
 80140ba:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80140be:	9c05      	ldr	r4, [sp, #20]
 80140c0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80140c4:	4366      	muls	r6, r4
 80140c6:	1c74      	adds	r4, r6, #1
 80140c8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80140cc:	1224      	asrs	r4, r4, #8
 80140ce:	b2a7      	uxth	r7, r4
 80140d0:	122e      	asrs	r6, r5, #8
 80140d2:	43e4      	mvns	r4, r4
 80140d4:	b2e4      	uxtb	r4, r4
 80140d6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80140da:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80140de:	fb16 f604 	smulbb	r6, r6, r4
 80140e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80140e6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80140ea:	00ed      	lsls	r5, r5, #3
 80140ec:	fb0c 6c07 	mla	ip, ip, r7, r6
 80140f0:	b2ed      	uxtb	r5, r5
 80140f2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80140f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80140fa:	fb15 f504 	smulbb	r5, r5, r4
 80140fe:	fa5f f888 	uxtb.w	r8, r8
 8014102:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8014106:	fb08 5507 	mla	r5, r8, r7, r5
 801410a:	fb1a fa04 	smulbb	sl, sl, r4
 801410e:	fa1f fc8c 	uxth.w	ip, ip
 8014112:	b2ad      	uxth	r5, r5
 8014114:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8014118:	fb06 a607 	mla	r6, r6, r7, sl
 801411c:	f10c 0401 	add.w	r4, ip, #1
 8014120:	f105 0a01 	add.w	sl, r5, #1
 8014124:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8014128:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801412c:	b2b6      	uxth	r6, r6
 801412e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014132:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014136:	ea4a 0c0c 	orr.w	ip, sl, ip
 801413a:	f106 0a01 	add.w	sl, r6, #1
 801413e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014142:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014146:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801414a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801414e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8014152:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8014154:	4421      	add	r1, r4
 8014156:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8014158:	f109 0901 	add.w	r9, r9, #1
 801415c:	4422      	add	r2, r4
 801415e:	e79c      	b.n	801409a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8014160:	b007      	add	sp, #28
 8014162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014166 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416a:	b085      	sub	sp, #20
 801416c:	468b      	mov	fp, r1
 801416e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8014170:	9203      	str	r2, [sp, #12]
 8014172:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 8014176:	6861      	ldr	r1, [r4, #4]
 8014178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801417c:	fb01 2000 	mla	r0, r1, r0, r2
 8014180:	6822      	ldr	r2, [r4, #0]
 8014182:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8014186:	f8d8 2000 	ldr.w	r2, [r8]
 801418a:	9200      	str	r2, [sp, #0]
 801418c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8014190:	9201      	str	r2, [sp, #4]
 8014192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014196:	f1bb 0f00 	cmp.w	fp, #0
 801419a:	dc03      	bgt.n	80141a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801419c:	9a03      	ldr	r2, [sp, #12]
 801419e:	2a00      	cmp	r2, #0
 80141a0:	f340 8146 	ble.w	8014430 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80141a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80141a6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80141aa:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80141ae:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80141b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80141b4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	dd0e      	ble.n	80141da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80141bc:	140c      	asrs	r4, r1, #16
 80141be:	d405      	bmi.n	80141cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80141c0:	42bc      	cmp	r4, r7
 80141c2:	da03      	bge.n	80141cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80141c4:	1414      	asrs	r4, r2, #16
 80141c6:	d401      	bmi.n	80141cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80141c8:	42b4      	cmp	r4, r6
 80141ca:	db07      	blt.n	80141dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80141cc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80141ce:	4421      	add	r1, r4
 80141d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80141d2:	3b01      	subs	r3, #1
 80141d4:	4422      	add	r2, r4
 80141d6:	3002      	adds	r0, #2
 80141d8:	e7ee      	b.n	80141b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80141da:	d017      	beq.n	801420c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80141dc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80141de:	1e5c      	subs	r4, r3, #1
 80141e0:	fb05 1504 	mla	r5, r5, r4, r1
 80141e4:	142d      	asrs	r5, r5, #16
 80141e6:	d409      	bmi.n	80141fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80141e8:	42bd      	cmp	r5, r7
 80141ea:	da07      	bge.n	80141fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80141ec:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80141ee:	fb05 2404 	mla	r4, r5, r4, r2
 80141f2:	1424      	asrs	r4, r4, #16
 80141f4:	d402      	bmi.n	80141fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80141f6:	42b4      	cmp	r4, r6
 80141f8:	f2c0 80b3 	blt.w	8014362 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80141fc:	2600      	movs	r6, #0
 80141fe:	199c      	adds	r4, r3, r6
 8014200:	2c00      	cmp	r4, #0
 8014202:	dc3e      	bgt.n	8014282 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8014204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014208:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801420c:	f1bb 0f00 	cmp.w	fp, #0
 8014210:	f340 810e 	ble.w	8014430 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8014214:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014218:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801421c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014222:	f1bb 0b01 	subs.w	fp, fp, #1
 8014226:	ee31 1a05 	vadd.f32	s2, s2, s10
 801422a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801422e:	eeb0 6a62 	vmov.f32	s12, s5
 8014232:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014236:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801423a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801423e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8014242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014246:	eeb0 6a43 	vmov.f32	s12, s6
 801424a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801424e:	ee12 2a90 	vmov	r2, s5
 8014252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014256:	fb92 f3f3 	sdiv	r3, r2, r3
 801425a:	ee13 2a10 	vmov	r2, s6
 801425e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014262:	9311      	str	r3, [sp, #68]	@ 0x44
 8014264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014266:	fb92 f3f3 	sdiv	r3, r2, r3
 801426a:	9a03      	ldr	r2, [sp, #12]
 801426c:	9312      	str	r3, [sp, #72]	@ 0x48
 801426e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8014272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014274:	eeb0 3a67 	vmov.f32	s6, s15
 8014278:	bf08      	it	eq
 801427a:	4613      	moveq	r3, r2
 801427c:	eef0 2a47 	vmov.f32	s5, s14
 8014280:	e789      	b.n	8014196 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8014282:	140f      	asrs	r7, r1, #16
 8014284:	d418      	bmi.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014286:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801428a:	42bd      	cmp	r5, r7
 801428c:	dd14      	ble.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801428e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014292:	d411      	bmi.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014294:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8014298:	4564      	cmp	r4, ip
 801429a:	dd0d      	ble.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801429c:	b22d      	sxth	r5, r5
 801429e:	fb0c 7505 	mla	r5, ip, r5, r7
 80142a2:	9c01      	ldr	r4, [sp, #4]
 80142a4:	5d64      	ldrb	r4, [r4, r5]
 80142a6:	2cff      	cmp	r4, #255	@ 0xff
 80142a8:	d10c      	bne.n	80142c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80142aa:	9c00      	ldr	r4, [sp, #0]
 80142ac:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80142b0:	f06f 0401 	mvn.w	r4, #1
 80142b4:	4374      	muls	r4, r6
 80142b6:	5305      	strh	r5, [r0, r4]
 80142b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80142ba:	4421      	add	r1, r4
 80142bc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80142be:	3e01      	subs	r6, #1
 80142c0:	4422      	add	r2, r4
 80142c2:	e79c      	b.n	80141fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80142c4:	2c00      	cmp	r4, #0
 80142c6:	d0f7      	beq.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80142c8:	9f00      	ldr	r7, [sp, #0]
 80142ca:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80142ce:	f06f 0501 	mvn.w	r5, #1
 80142d2:	4375      	muls	r5, r6
 80142d4:	9502      	str	r5, [sp, #8]
 80142d6:	5b45      	ldrh	r5, [r0, r5]
 80142d8:	fa1f fc84 	uxth.w	ip, r4
 80142dc:	122f      	asrs	r7, r5, #8
 80142de:	43e4      	mvns	r4, r4
 80142e0:	b2e4      	uxtb	r4, r4
 80142e2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80142e6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80142ea:	fb17 f704 	smulbb	r7, r7, r4
 80142ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80142f2:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80142f6:	00ed      	lsls	r5, r5, #3
 80142f8:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80142fc:	b2ed      	uxtb	r5, r5
 80142fe:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8014302:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014306:	fb15 f504 	smulbb	r5, r5, r4
 801430a:	fa5f f989 	uxtb.w	r9, r9
 801430e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8014312:	fb09 550c 	mla	r5, r9, ip, r5
 8014316:	fb1a fa04 	smulbb	sl, sl, r4
 801431a:	fa1f fe8e 	uxth.w	lr, lr
 801431e:	b2ad      	uxth	r5, r5
 8014320:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014324:	fb07 a70c 	mla	r7, r7, ip, sl
 8014328:	f10e 0401 	add.w	r4, lr, #1
 801432c:	f105 0a01 	add.w	sl, r5, #1
 8014330:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8014334:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014338:	b2bf      	uxth	r7, r7
 801433a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801433e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8014342:	ea4a 0e0e 	orr.w	lr, sl, lr
 8014346:	f107 0a01 	add.w	sl, r7, #1
 801434a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801434e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014352:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8014356:	9c02      	ldr	r4, [sp, #8]
 8014358:	ea4e 0e0a 	orr.w	lr, lr, sl
 801435c:	f820 e004 	strh.w	lr, [r0, r4]
 8014360:	e7aa      	b.n	80142b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014362:	f04f 0900 	mov.w	r9, #0
 8014366:	eba3 0409 	sub.w	r4, r3, r9
 801436a:	2c00      	cmp	r4, #0
 801436c:	f77f af4a 	ble.w	8014204 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014370:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8014374:	1414      	asrs	r4, r2, #16
 8014376:	140d      	asrs	r5, r1, #16
 8014378:	fb06 5504 	mla	r5, r6, r4, r5
 801437c:	9c01      	ldr	r4, [sp, #4]
 801437e:	5d64      	ldrb	r4, [r4, r5]
 8014380:	2cff      	cmp	r4, #255	@ 0xff
 8014382:	d10b      	bne.n	801439c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8014384:	9c00      	ldr	r4, [sp, #0]
 8014386:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801438a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801438e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8014390:	4421      	add	r1, r4
 8014392:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014394:	f109 0901 	add.w	r9, r9, #1
 8014398:	4422      	add	r2, r4
 801439a:	e7e4      	b.n	8014366 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801439c:	2c00      	cmp	r4, #0
 801439e:	d0f6      	beq.n	801438e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80143a0:	9e00      	ldr	r6, [sp, #0]
 80143a2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80143a6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80143aa:	b2a7      	uxth	r7, r4
 80143ac:	122e      	asrs	r6, r5, #8
 80143ae:	43e4      	mvns	r4, r4
 80143b0:	b2e4      	uxtb	r4, r4
 80143b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80143b6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80143ba:	fb16 f604 	smulbb	r6, r6, r4
 80143be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80143c2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80143c6:	00ed      	lsls	r5, r5, #3
 80143c8:	fb0c 6c07 	mla	ip, ip, r7, r6
 80143cc:	b2ed      	uxtb	r5, r5
 80143ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80143d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80143d6:	fb15 f504 	smulbb	r5, r5, r4
 80143da:	fa5f fe8e 	uxtb.w	lr, lr
 80143de:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80143e2:	fb0e 5507 	mla	r5, lr, r7, r5
 80143e6:	fb1a fa04 	smulbb	sl, sl, r4
 80143ea:	fa1f fc8c 	uxth.w	ip, ip
 80143ee:	b2ad      	uxth	r5, r5
 80143f0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80143f4:	fb06 a607 	mla	r6, r6, r7, sl
 80143f8:	f10c 0401 	add.w	r4, ip, #1
 80143fc:	f105 0a01 	add.w	sl, r5, #1
 8014400:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8014404:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014408:	b2b6      	uxth	r6, r6
 801440a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801440e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014412:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014416:	f106 0a01 	add.w	sl, r6, #1
 801441a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801441e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014422:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8014426:	ea4c 0c0a 	orr.w	ip, ip, sl
 801442a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801442e:	e7ae      	b.n	801438e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8014430:	b005      	add	sp, #20
 8014432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014436 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443a:	b085      	sub	sp, #20
 801443c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801443e:	9203      	str	r2, [sp, #12]
 8014440:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8014444:	9201      	str	r2, [sp, #4]
 8014446:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801444a:	9100      	str	r1, [sp, #0]
 801444c:	6841      	ldr	r1, [r0, #4]
 801444e:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8014452:	fb01 2404 	mla	r4, r1, r4, r2
 8014456:	6802      	ldr	r2, [r0, #0]
 8014458:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801445c:	f8de 2000 	ldr.w	r2, [lr]
 8014460:	9202      	str	r2, [sp, #8]
 8014462:	9a01      	ldr	r2, [sp, #4]
 8014464:	43d6      	mvns	r6, r2
 8014466:	b2f6      	uxtb	r6, r6
 8014468:	9a00      	ldr	r2, [sp, #0]
 801446a:	2a00      	cmp	r2, #0
 801446c:	dc03      	bgt.n	8014476 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801446e:	9a03      	ldr	r2, [sp, #12]
 8014470:	2a00      	cmp	r2, #0
 8014472:	f340 8124 	ble.w	80146be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014476:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014478:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801447c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8014480:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8014484:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014486:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801448a:	2b00      	cmp	r3, #0
 801448c:	dd0e      	ble.n	80144ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801448e:	1408      	asrs	r0, r1, #16
 8014490:	d405      	bmi.n	801449e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014492:	4560      	cmp	r0, ip
 8014494:	da03      	bge.n	801449e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014496:	1410      	asrs	r0, r2, #16
 8014498:	d401      	bmi.n	801449e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801449a:	42b8      	cmp	r0, r7
 801449c:	db07      	blt.n	80144ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801449e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80144a0:	4401      	add	r1, r0
 80144a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80144a4:	3b01      	subs	r3, #1
 80144a6:	4402      	add	r2, r0
 80144a8:	3402      	adds	r4, #2
 80144aa:	e7ee      	b.n	801448a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80144ac:	d06e      	beq.n	801458c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80144ae:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80144b0:	1e58      	subs	r0, r3, #1
 80144b2:	fb05 1500 	mla	r5, r5, r0, r1
 80144b6:	142d      	asrs	r5, r5, #16
 80144b8:	d45c      	bmi.n	8014574 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80144ba:	4565      	cmp	r5, ip
 80144bc:	da5a      	bge.n	8014574 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80144be:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80144c0:	fb05 2000 	mla	r0, r5, r0, r2
 80144c4:	1400      	asrs	r0, r0, #16
 80144c6:	d455      	bmi.n	8014574 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80144c8:	42b8      	cmp	r0, r7
 80144ca:	da53      	bge.n	8014574 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80144cc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80144d0:	4699      	mov	r9, r3
 80144d2:	46a2      	mov	sl, r4
 80144d4:	f1b9 0f00 	cmp.w	r9, #0
 80144d8:	dd54      	ble.n	8014584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80144da:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80144de:	140d      	asrs	r5, r1, #16
 80144e0:	1410      	asrs	r0, r2, #16
 80144e2:	fb07 5000 	mla	r0, r7, r0, r5
 80144e6:	9d02      	ldr	r5, [sp, #8]
 80144e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80144ec:	f8ba 5000 	ldrh.w	r5, [sl]
 80144f0:	122f      	asrs	r7, r5, #8
 80144f2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80144f6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80144fa:	fb17 f706 	smulbb	r7, r7, r6
 80144fe:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8014502:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014506:	00ed      	lsls	r5, r5, #3
 8014508:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801450c:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8014510:	10c7      	asrs	r7, r0, #3
 8014512:	b2ed      	uxtb	r5, r5
 8014514:	00c0      	lsls	r0, r0, #3
 8014516:	fb18 f806 	smulbb	r8, r8, r6
 801451a:	fb15 f506 	smulbb	r5, r5, r6
 801451e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014522:	b2c0      	uxtb	r0, r0
 8014524:	fa1f fc8c 	uxth.w	ip, ip
 8014528:	fb07 870b 	mla	r7, r7, fp, r8
 801452c:	fb00 500b 	mla	r0, r0, fp, r5
 8014530:	b280      	uxth	r0, r0
 8014532:	b2bf      	uxth	r7, r7
 8014534:	f10c 0501 	add.w	r5, ip, #1
 8014538:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801453c:	f107 0801 	add.w	r8, r7, #1
 8014540:	1c45      	adds	r5, r0, #1
 8014542:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014546:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801454a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801454c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014550:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8014554:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8014558:	ea45 0c0c 	orr.w	ip, r5, ip
 801455c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8014560:	4401      	add	r1, r0
 8014562:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014564:	ea4c 0c08 	orr.w	ip, ip, r8
 8014568:	f82a cb02 	strh.w	ip, [sl], #2
 801456c:	4402      	add	r2, r0
 801456e:	f109 39ff 	add.w	r9, r9, #4294967295
 8014572:	e7af      	b.n	80144d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014574:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8014578:	f04f 0800 	mov.w	r8, #0
 801457c:	eb03 0008 	add.w	r0, r3, r8
 8014580:	2800      	cmp	r0, #0
 8014582:	dc41      	bgt.n	8014608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8014584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014588:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801458c:	9b00      	ldr	r3, [sp, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	f340 8095 	ble.w	80146be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014594:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801459c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80145a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80145a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80145aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80145ae:	eef0 6a62 	vmov.f32	s13, s5
 80145b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80145b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80145ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80145be:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80145c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80145c6:	eef0 6a43 	vmov.f32	s13, s6
 80145ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80145ce:	ee12 2a90 	vmov	r2, s5
 80145d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80145d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80145da:	ee13 2a10 	vmov	r2, s6
 80145de:	9311      	str	r3, [sp, #68]	@ 0x44
 80145e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80145e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80145e8:	9b00      	ldr	r3, [sp, #0]
 80145ea:	9a03      	ldr	r2, [sp, #12]
 80145ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80145f0:	3b01      	subs	r3, #1
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80145f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145fa:	eeb0 3a67 	vmov.f32	s6, s15
 80145fe:	bf08      	it	eq
 8014600:	4613      	moveq	r3, r2
 8014602:	eef0 2a47 	vmov.f32	s5, s14
 8014606:	e72f      	b.n	8014468 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8014608:	140f      	asrs	r7, r1, #16
 801460a:	d451      	bmi.n	80146b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801460c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8014610:	42bd      	cmp	r5, r7
 8014612:	dd4d      	ble.n	80146b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014614:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014618:	d44a      	bmi.n	80146b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801461a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801461e:	4560      	cmp	r0, ip
 8014620:	dd46      	ble.n	80146b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014622:	b22d      	sxth	r5, r5
 8014624:	fb0c 7505 	mla	r5, ip, r5, r7
 8014628:	9802      	ldr	r0, [sp, #8]
 801462a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801462e:	f06f 0501 	mvn.w	r5, #1
 8014632:	fb05 fb08 	mul.w	fp, r5, r8
 8014636:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801463a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801463e:	122f      	asrs	r7, r5, #8
 8014640:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8014644:	fb17 f706 	smulbb	r7, r7, r6
 8014648:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801464c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014650:	00ed      	lsls	r5, r5, #3
 8014652:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8014656:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801465a:	10c7      	asrs	r7, r0, #3
 801465c:	b2ed      	uxtb	r5, r5
 801465e:	00c0      	lsls	r0, r0, #3
 8014660:	fb19 f906 	smulbb	r9, r9, r6
 8014664:	fb15 f506 	smulbb	r5, r5, r6
 8014668:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801466c:	b2c0      	uxtb	r0, r0
 801466e:	fa1f fc8c 	uxth.w	ip, ip
 8014672:	fb07 970a 	mla	r7, r7, sl, r9
 8014676:	fb00 500a 	mla	r0, r0, sl, r5
 801467a:	b2bf      	uxth	r7, r7
 801467c:	b280      	uxth	r0, r0
 801467e:	f10c 0501 	add.w	r5, ip, #1
 8014682:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014686:	f107 0901 	add.w	r9, r7, #1
 801468a:	1c45      	adds	r5, r0, #1
 801468c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014690:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014694:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014698:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801469c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80146a0:	ea45 0c0c 	orr.w	ip, r5, ip
 80146a4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80146a8:	ea4c 0c09 	orr.w	ip, ip, r9
 80146ac:	f824 c00b 	strh.w	ip, [r4, fp]
 80146b0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80146b2:	4401      	add	r1, r0
 80146b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80146b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80146ba:	4402      	add	r2, r0
 80146bc:	e75e      	b.n	801457c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80146be:	b005      	add	sp, #20
 80146c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80146c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c8:	b085      	sub	sp, #20
 80146ca:	4693      	mov	fp, r2
 80146cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80146ce:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80146d0:	6870      	ldr	r0, [r6, #4]
 80146d2:	9101      	str	r1, [sp, #4]
 80146d4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80146d8:	fb00 2404 	mla	r4, r0, r4, r2
 80146dc:	6832      	ldr	r2, [r6, #0]
 80146de:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80146e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80146e6:	682a      	ldr	r2, [r5, #0]
 80146e8:	9202      	str	r2, [sp, #8]
 80146ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80146ee:	9a01      	ldr	r2, [sp, #4]
 80146f0:	2a00      	cmp	r2, #0
 80146f2:	dc03      	bgt.n	80146fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80146f4:	f1bb 0f00 	cmp.w	fp, #0
 80146f8:	f340 809a 	ble.w	8014830 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80146fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80146fe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8014702:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8014706:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801470a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801470c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8014710:	2b00      	cmp	r3, #0
 8014712:	dd0c      	ble.n	801472e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014714:	1406      	asrs	r6, r0, #16
 8014716:	d405      	bmi.n	8014724 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014718:	454e      	cmp	r6, r9
 801471a:	da03      	bge.n	8014724 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801471c:	1416      	asrs	r6, r2, #16
 801471e:	d401      	bmi.n	8014724 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014720:	4546      	cmp	r6, r8
 8014722:	db05      	blt.n	8014730 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014724:	4470      	add	r0, lr
 8014726:	4462      	add	r2, ip
 8014728:	3b01      	subs	r3, #1
 801472a:	3402      	adds	r4, #2
 801472c:	e7f0      	b.n	8014710 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801472e:	d00f      	beq.n	8014750 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014730:	1e5e      	subs	r6, r3, #1
 8014732:	fb0e 0706 	mla	r7, lr, r6, r0
 8014736:	143f      	asrs	r7, r7, #16
 8014738:	d541      	bpl.n	80147be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801473a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801473e:	4698      	mov	r8, r3
 8014740:	9603      	str	r6, [sp, #12]
 8014742:	f1b8 0f00 	cmp.w	r8, #0
 8014746:	dc56      	bgt.n	80147f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8014748:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801474c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014750:	9b01      	ldr	r3, [sp, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	dd6c      	ble.n	8014830 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8014756:	ee30 0a04 	vadd.f32	s0, s0, s8
 801475a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801475e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014764:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014768:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801476c:	eeb0 6a62 	vmov.f32	s12, s5
 8014770:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014774:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014778:	ee77 2a62 	vsub.f32	s5, s14, s5
 801477c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8014780:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014784:	eeb0 6a43 	vmov.f32	s12, s6
 8014788:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801478c:	ee12 2a90 	vmov	r2, s5
 8014790:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014794:	fb92 fef3 	sdiv	lr, r2, r3
 8014798:	ee13 2a10 	vmov	r2, s6
 801479c:	fb92 fcf3 	sdiv	ip, r2, r3
 80147a0:	9b01      	ldr	r3, [sp, #4]
 80147a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80147a6:	3b01      	subs	r3, #1
 80147a8:	9301      	str	r3, [sp, #4]
 80147aa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80147ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147b0:	eeb0 3a67 	vmov.f32	s6, s15
 80147b4:	bf08      	it	eq
 80147b6:	465b      	moveq	r3, fp
 80147b8:	eef0 2a47 	vmov.f32	s5, s14
 80147bc:	e797      	b.n	80146ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80147be:	454f      	cmp	r7, r9
 80147c0:	dabb      	bge.n	801473a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80147c2:	fb0c 2606 	mla	r6, ip, r6, r2
 80147c6:	1436      	asrs	r6, r6, #16
 80147c8:	d4b7      	bmi.n	801473a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80147ca:	4546      	cmp	r6, r8
 80147cc:	dab5      	bge.n	801473a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80147ce:	461e      	mov	r6, r3
 80147d0:	46a0      	mov	r8, r4
 80147d2:	2e00      	cmp	r6, #0
 80147d4:	ddb8      	ble.n	8014748 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80147d6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80147da:	9902      	ldr	r1, [sp, #8]
 80147dc:	1417      	asrs	r7, r2, #16
 80147de:	ea4f 4920 	mov.w	r9, r0, asr #16
 80147e2:	fb0a 9707 	mla	r7, sl, r7, r9
 80147e6:	4470      	add	r0, lr
 80147e8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80147ec:	f828 7b02 	strh.w	r7, [r8], #2
 80147f0:	4462      	add	r2, ip
 80147f2:	3e01      	subs	r6, #1
 80147f4:	e7ed      	b.n	80147d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80147f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80147fa:	d414      	bmi.n	8014826 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80147fc:	68ae      	ldr	r6, [r5, #8]
 80147fe:	454e      	cmp	r6, r9
 8014800:	dd11      	ble.n	8014826 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014802:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014806:	d40e      	bmi.n	8014826 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014808:	68ef      	ldr	r7, [r5, #12]
 801480a:	4557      	cmp	r7, sl
 801480c:	dd0b      	ble.n	8014826 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801480e:	b236      	sxth	r6, r6
 8014810:	fb0a 9606 	mla	r6, sl, r6, r9
 8014814:	9f02      	ldr	r7, [sp, #8]
 8014816:	f06f 0101 	mvn.w	r1, #1
 801481a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801481e:	fb01 f608 	mul.w	r6, r1, r8
 8014822:	9903      	ldr	r1, [sp, #12]
 8014824:	538f      	strh	r7, [r1, r6]
 8014826:	4470      	add	r0, lr
 8014828:	4462      	add	r2, ip
 801482a:	f108 38ff 	add.w	r8, r8, #4294967295
 801482e:	e788      	b.n	8014742 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014830:	b005      	add	sp, #20
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014836 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483a:	b087      	sub	sp, #28
 801483c:	468b      	mov	fp, r1
 801483e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8014840:	9203      	str	r2, [sp, #12]
 8014842:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014846:	9204      	str	r2, [sp, #16]
 8014848:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801484c:	6841      	ldr	r1, [r0, #4]
 801484e:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8014852:	fb01 2505 	mla	r5, r1, r5, r2
 8014856:	6802      	ldr	r2, [r0, #0]
 8014858:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801485c:	f8d9 2000 	ldr.w	r2, [r9]
 8014860:	9201      	str	r2, [sp, #4]
 8014862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014866:	f1bb 0f00 	cmp.w	fp, #0
 801486a:	dc03      	bgt.n	8014874 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801486c:	9a03      	ldr	r2, [sp, #12]
 801486e:	2a00      	cmp	r2, #0
 8014870:	f340 8159 	ble.w	8014b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8014874:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014876:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801487a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801487e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8014882:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014884:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8014888:	2b00      	cmp	r3, #0
 801488a:	dd0e      	ble.n	80148aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801488c:	1402      	asrs	r2, r0, #16
 801488e:	d405      	bmi.n	801489c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014890:	42ba      	cmp	r2, r7
 8014892:	da03      	bge.n	801489c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014894:	140a      	asrs	r2, r1, #16
 8014896:	d401      	bmi.n	801489c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014898:	42b2      	cmp	r2, r6
 801489a:	db07      	blt.n	80148ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801489c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801489e:	4410      	add	r0, r2
 80148a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80148a2:	3b01      	subs	r3, #1
 80148a4:	4411      	add	r1, r2
 80148a6:	3502      	adds	r5, #2
 80148a8:	e7ee      	b.n	8014888 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80148aa:	d017      	beq.n	80148dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80148ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80148ae:	1e5a      	subs	r2, r3, #1
 80148b0:	fb04 0402 	mla	r4, r4, r2, r0
 80148b4:	1424      	asrs	r4, r4, #16
 80148b6:	d409      	bmi.n	80148cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80148b8:	42bc      	cmp	r4, r7
 80148ba:	da07      	bge.n	80148cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80148bc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80148be:	fb04 1202 	mla	r2, r4, r2, r1
 80148c2:	1412      	asrs	r2, r2, #16
 80148c4:	d402      	bmi.n	80148cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80148c6:	42b2      	cmp	r2, r6
 80148c8:	f2c0 80bf 	blt.w	8014a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80148cc:	2700      	movs	r7, #0
 80148ce:	19da      	adds	r2, r3, r7
 80148d0:	2a00      	cmp	r2, #0
 80148d2:	dc3e      	bgt.n	8014952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80148d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80148d8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80148dc:	f1bb 0f00 	cmp.w	fp, #0
 80148e0:	f340 8121 	ble.w	8014b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80148e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80148e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80148ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80148f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80148f2:	f1bb 0b01 	subs.w	fp, fp, #1
 80148f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80148fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80148fe:	eeb0 6a62 	vmov.f32	s12, s5
 8014902:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014906:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801490a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801490e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8014912:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014916:	eeb0 6a43 	vmov.f32	s12, s6
 801491a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801491e:	ee12 2a90 	vmov	r2, s5
 8014922:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014926:	fb92 f3f3 	sdiv	r3, r2, r3
 801492a:	ee13 2a10 	vmov	r2, s6
 801492e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014932:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014934:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014936:	fb92 f3f3 	sdiv	r3, r2, r3
 801493a:	9a03      	ldr	r2, [sp, #12]
 801493c:	9314      	str	r3, [sp, #80]	@ 0x50
 801493e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8014942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014944:	eeb0 3a67 	vmov.f32	s6, s15
 8014948:	bf08      	it	eq
 801494a:	4613      	moveq	r3, r2
 801494c:	eef0 2a47 	vmov.f32	s5, s14
 8014950:	e789      	b.n	8014866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8014952:	1406      	asrs	r6, r0, #16
 8014954:	d42d      	bmi.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014956:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801495a:	42b4      	cmp	r4, r6
 801495c:	dd29      	ble.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801495e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8014962:	d426      	bmi.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014964:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8014968:	4562      	cmp	r2, ip
 801496a:	dd22      	ble.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801496c:	b224      	sxth	r4, r4
 801496e:	9a01      	ldr	r2, [sp, #4]
 8014970:	fb0c 6404 	mla	r4, ip, r4, r6
 8014974:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8014978:	0e22      	lsrs	r2, r4, #24
 801497a:	d01a      	beq.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801497c:	9e04      	ldr	r6, [sp, #16]
 801497e:	4372      	muls	r2, r6
 8014980:	1c56      	adds	r6, r2, #1
 8014982:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014986:	1212      	asrs	r2, r2, #8
 8014988:	0a26      	lsrs	r6, r4, #8
 801498a:	2aff      	cmp	r2, #255	@ 0xff
 801498c:	9605      	str	r6, [sp, #20]
 801498e:	d116      	bne.n	80149be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8014990:	f06f 0201 	mvn.w	r2, #1
 8014994:	fb02 fc07 	mul.w	ip, r2, r7
 8014998:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801499c:	0962      	lsrs	r2, r4, #5
 801499e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80149a2:	f026 0607 	bic.w	r6, r6, #7
 80149a6:	4316      	orrs	r6, r2
 80149a8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80149ac:	4326      	orrs	r6, r4
 80149ae:	f825 600c 	strh.w	r6, [r5, ip]
 80149b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80149b4:	4410      	add	r0, r2
 80149b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80149b8:	3f01      	subs	r7, #1
 80149ba:	4411      	add	r1, r2
 80149bc:	e787      	b.n	80148ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80149be:	f06f 0601 	mvn.w	r6, #1
 80149c2:	437e      	muls	r6, r7
 80149c4:	fa1f fa82 	uxth.w	sl, r2
 80149c8:	f835 8006 	ldrh.w	r8, [r5, r6]
 80149cc:	9602      	str	r6, [sp, #8]
 80149ce:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80149d2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80149d6:	43d2      	mvns	r2, r2
 80149d8:	b2d2      	uxtb	r2, r2
 80149da:	fb1c fc0a 	smulbb	ip, ip, sl
 80149de:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80149e2:	fb0e ce02 	mla	lr, lr, r2, ip
 80149e6:	b2e4      	uxtb	r4, r4
 80149e8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80149ec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80149f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80149f4:	fa5f f888 	uxtb.w	r8, r8
 80149f8:	fb14 f40a 	smulbb	r4, r4, sl
 80149fc:	fb08 4402 	mla	r4, r8, r2, r4
 8014a00:	fa1f fe8e 	uxth.w	lr, lr
 8014a04:	fb16 f60a 	smulbb	r6, r6, sl
 8014a08:	b2a4      	uxth	r4, r4
 8014a0a:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8014a0e:	fb0c 6c02 	mla	ip, ip, r2, r6
 8014a12:	f10e 0201 	add.w	r2, lr, #1
 8014a16:	1c66      	adds	r6, r4, #1
 8014a18:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8014a1c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014a20:	fa1f fc8c 	uxth.w	ip, ip
 8014a24:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014a28:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8014a2c:	ea46 0e0e 	orr.w	lr, r6, lr
 8014a30:	f10c 0601 	add.w	r6, ip, #1
 8014a34:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8014a38:	0976      	lsrs	r6, r6, #5
 8014a3a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8014a3e:	9a02      	ldr	r2, [sp, #8]
 8014a40:	ea4e 0e06 	orr.w	lr, lr, r6
 8014a44:	f825 e002 	strh.w	lr, [r5, r2]
 8014a48:	e7b3      	b.n	80149b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014a4a:	f04f 0800 	mov.w	r8, #0
 8014a4e:	eba3 0208 	sub.w	r2, r3, r8
 8014a52:	2a00      	cmp	r2, #0
 8014a54:	f77f af3e 	ble.w	80148d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014a58:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8014a5c:	1404      	asrs	r4, r0, #16
 8014a5e:	140a      	asrs	r2, r1, #16
 8014a60:	fb06 4202 	mla	r2, r6, r2, r4
 8014a64:	9c01      	ldr	r4, [sp, #4]
 8014a66:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8014a6a:	0e22      	lsrs	r2, r4, #24
 8014a6c:	d016      	beq.n	8014a9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8014a6e:	9e04      	ldr	r6, [sp, #16]
 8014a70:	4372      	muls	r2, r6
 8014a72:	1c56      	adds	r6, r2, #1
 8014a74:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014a78:	1212      	asrs	r2, r2, #8
 8014a7a:	2aff      	cmp	r2, #255	@ 0xff
 8014a7c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8014a80:	d113      	bne.n	8014aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8014a82:	0962      	lsrs	r2, r4, #5
 8014a84:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8014a88:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8014a8c:	f026 0607 	bic.w	r6, r6, #7
 8014a90:	4316      	orrs	r6, r2
 8014a92:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014a96:	4326      	orrs	r6, r4
 8014a98:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8014a9c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014a9e:	4410      	add	r0, r2
 8014aa0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014aa2:	f108 0801 	add.w	r8, r8, #1
 8014aa6:	4411      	add	r1, r2
 8014aa8:	e7d1      	b.n	8014a4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8014aaa:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8014aae:	fa1f fa82 	uxth.w	sl, r2
 8014ab2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014ab6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8014aba:	43d2      	mvns	r2, r2
 8014abc:	b2d2      	uxtb	r2, r2
 8014abe:	fb17 f70a 	smulbb	r7, r7, sl
 8014ac2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014ac6:	fb0c 7c02 	mla	ip, ip, r2, r7
 8014aca:	b2e4      	uxtb	r4, r4
 8014acc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8014ad0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014ad4:	fa5f fe8e 	uxtb.w	lr, lr
 8014ad8:	fb14 f40a 	smulbb	r4, r4, sl
 8014adc:	fb0e 4402 	mla	r4, lr, r2, r4
 8014ae0:	b2f6      	uxtb	r6, r6
 8014ae2:	fa1f fc8c 	uxth.w	ip, ip
 8014ae6:	fb16 f60a 	smulbb	r6, r6, sl
 8014aea:	b2a4      	uxth	r4, r4
 8014aec:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014af0:	fb07 6702 	mla	r7, r7, r2, r6
 8014af4:	f10c 0201 	add.w	r2, ip, #1
 8014af8:	1c66      	adds	r6, r4, #1
 8014afa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8014afe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014b02:	b2bf      	uxth	r7, r7
 8014b04:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014b08:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014b0c:	ea46 0c0c 	orr.w	ip, r6, ip
 8014b10:	1c7e      	adds	r6, r7, #1
 8014b12:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8014b16:	0976      	lsrs	r6, r6, #5
 8014b18:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8014b1c:	ea4c 0c06 	orr.w	ip, ip, r6
 8014b20:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8014b24:	e7ba      	b.n	8014a9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8014b26:	b007      	add	sp, #28
 8014b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	b085      	sub	sp, #20
 8014b32:	468b      	mov	fp, r1
 8014b34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014b36:	9203      	str	r2, [sp, #12]
 8014b38:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8014b3c:	6841      	ldr	r1, [r0, #4]
 8014b3e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014b42:	fb01 2404 	mla	r4, r1, r4, r2
 8014b46:	6802      	ldr	r2, [r0, #0]
 8014b48:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014b4c:	f8d8 2000 	ldr.w	r2, [r8]
 8014b50:	9201      	str	r2, [sp, #4]
 8014b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014b56:	f1bb 0f00 	cmp.w	fp, #0
 8014b5a:	dc03      	bgt.n	8014b64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014b5c:	9a03      	ldr	r2, [sp, #12]
 8014b5e:	2a00      	cmp	r2, #0
 8014b60:	f340 814f 	ble.w	8014e02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8014b64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014b66:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8014b6a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8014b6e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8014b72:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014b74:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	dd0e      	ble.n	8014b9a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014b7c:	1408      	asrs	r0, r1, #16
 8014b7e:	d405      	bmi.n	8014b8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b80:	42b8      	cmp	r0, r7
 8014b82:	da03      	bge.n	8014b8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b84:	1410      	asrs	r0, r2, #16
 8014b86:	d401      	bmi.n	8014b8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b88:	42b0      	cmp	r0, r6
 8014b8a:	db07      	blt.n	8014b9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014b8c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014b8e:	4401      	add	r1, r0
 8014b90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014b92:	3b01      	subs	r3, #1
 8014b94:	4402      	add	r2, r0
 8014b96:	3402      	adds	r4, #2
 8014b98:	e7ee      	b.n	8014b78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8014b9a:	d017      	beq.n	8014bcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014b9c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014b9e:	1e58      	subs	r0, r3, #1
 8014ba0:	fb05 1500 	mla	r5, r5, r0, r1
 8014ba4:	142d      	asrs	r5, r5, #16
 8014ba6:	d409      	bmi.n	8014bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014ba8:	42bd      	cmp	r5, r7
 8014baa:	da07      	bge.n	8014bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014bac:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8014bae:	fb05 2000 	mla	r0, r5, r0, r2
 8014bb2:	1400      	asrs	r0, r0, #16
 8014bb4:	d402      	bmi.n	8014bbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014bb6:	42b0      	cmp	r0, r6
 8014bb8:	f2c0 80ba 	blt.w	8014d30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8014bbc:	2600      	movs	r6, #0
 8014bbe:	1998      	adds	r0, r3, r6
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	dc3e      	bgt.n	8014c42 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8014bc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014bc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014bcc:	f1bb 0f00 	cmp.w	fp, #0
 8014bd0:	f340 8117 	ble.w	8014e02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8014bd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014bd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014bdc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014be2:	f1bb 0b01 	subs.w	fp, fp, #1
 8014be6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014bea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014bee:	eeb0 6a62 	vmov.f32	s12, s5
 8014bf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014bf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014bfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014bfe:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8014c02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014c06:	eeb0 6a43 	vmov.f32	s12, s6
 8014c0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014c0e:	ee12 2a90 	vmov	r2, s5
 8014c12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c1a:	ee13 2a10 	vmov	r2, s6
 8014c1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014c22:	9311      	str	r3, [sp, #68]	@ 0x44
 8014c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c2a:	9a03      	ldr	r2, [sp, #12]
 8014c2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8014c2e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8014c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c34:	eeb0 3a67 	vmov.f32	s6, s15
 8014c38:	bf08      	it	eq
 8014c3a:	4613      	moveq	r3, r2
 8014c3c:	eef0 2a47 	vmov.f32	s5, s14
 8014c40:	e789      	b.n	8014b56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8014c42:	140f      	asrs	r7, r1, #16
 8014c44:	d424      	bmi.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014c46:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014c4a:	42bd      	cmp	r5, r7
 8014c4c:	dd20      	ble.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014c4e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014c52:	d41d      	bmi.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014c54:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8014c58:	4560      	cmp	r0, ip
 8014c5a:	dd19      	ble.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014c5c:	b22d      	sxth	r5, r5
 8014c5e:	fb0c 7505 	mla	r5, ip, r5, r7
 8014c62:	9801      	ldr	r0, [sp, #4]
 8014c64:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014c68:	0e07      	lsrs	r7, r0, #24
 8014c6a:	2fff      	cmp	r7, #255	@ 0xff
 8014c6c:	d116      	bne.n	8014c9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014c6e:	f06f 0501 	mvn.w	r5, #1
 8014c72:	fb05 f706 	mul.w	r7, r5, r6
 8014c76:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8014c7a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8014c7e:	0945      	lsrs	r5, r0, #5
 8014c80:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8014c84:	ea4c 0505 	orr.w	r5, ip, r5
 8014c88:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8014c8c:	4305      	orrs	r5, r0
 8014c8e:	53e5      	strh	r5, [r4, r7]
 8014c90:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014c92:	4401      	add	r1, r0
 8014c94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014c96:	3e01      	subs	r6, #1
 8014c98:	4402      	add	r2, r0
 8014c9a:	e790      	b.n	8014bbe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014c9c:	b2fd      	uxtb	r5, r7
 8014c9e:	2f00      	cmp	r7, #0
 8014ca0:	d0f6      	beq.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014ca2:	f06f 0701 	mvn.w	r7, #1
 8014ca6:	4377      	muls	r7, r6
 8014ca8:	fa1f f985 	uxth.w	r9, r5
 8014cac:	f834 e007 	ldrh.w	lr, [r4, r7]
 8014cb0:	9702      	str	r7, [sp, #8]
 8014cb2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014cb6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014cba:	43ed      	mvns	r5, r5
 8014cbc:	b2ed      	uxtb	r5, r5
 8014cbe:	fb17 f709 	smulbb	r7, r7, r9
 8014cc2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014cc6:	fb0c 7c05 	mla	ip, ip, r5, r7
 8014cca:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014cce:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8014cd2:	b2c0      	uxtb	r0, r0
 8014cd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014cd8:	fa5f fe8e 	uxtb.w	lr, lr
 8014cdc:	fb10 f009 	smulbb	r0, r0, r9
 8014ce0:	fb0e 0005 	mla	r0, lr, r5, r0
 8014ce4:	b280      	uxth	r0, r0
 8014ce6:	fa1f fc8c 	uxth.w	ip, ip
 8014cea:	fb1a fa09 	smulbb	sl, sl, r9
 8014cee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014cf2:	fb07 a705 	mla	r7, r7, r5, sl
 8014cf6:	f100 0a01 	add.w	sl, r0, #1
 8014cfa:	f10c 0501 	add.w	r5, ip, #1
 8014cfe:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8014d02:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014d06:	b2bf      	uxth	r7, r7
 8014d08:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014d0c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014d10:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014d14:	f107 0a01 	add.w	sl, r7, #1
 8014d18:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8014d1c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014d20:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8014d24:	9802      	ldr	r0, [sp, #8]
 8014d26:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014d2a:	f824 c000 	strh.w	ip, [r4, r0]
 8014d2e:	e7af      	b.n	8014c90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014d30:	f04f 0e00 	mov.w	lr, #0
 8014d34:	eba3 000e 	sub.w	r0, r3, lr
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	f77f af43 	ble.w	8014bc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014d3e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8014d42:	140d      	asrs	r5, r1, #16
 8014d44:	1410      	asrs	r0, r2, #16
 8014d46:	fb06 5000 	mla	r0, r6, r0, r5
 8014d4a:	9d01      	ldr	r5, [sp, #4]
 8014d4c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8014d50:	0e2e      	lsrs	r6, r5, #24
 8014d52:	2eff      	cmp	r6, #255	@ 0xff
 8014d54:	d112      	bne.n	8014d7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8014d56:	482c      	ldr	r0, [pc, #176]	@ (8014e08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8014d58:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8014d5c:	0968      	lsrs	r0, r5, #5
 8014d5e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8014d62:	4330      	orrs	r0, r6
 8014d64:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8014d68:	4328      	orrs	r0, r5
 8014d6a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8014d6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014d70:	4401      	add	r1, r0
 8014d72:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014d74:	f10e 0e01 	add.w	lr, lr, #1
 8014d78:	4402      	add	r2, r0
 8014d7a:	e7db      	b.n	8014d34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8014d7c:	b2f0      	uxtb	r0, r6
 8014d7e:	2e00      	cmp	r6, #0
 8014d80:	d0f5      	beq.n	8014d6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8014d82:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8014d86:	fa1f f980 	uxth.w	r9, r0
 8014d8a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014d8e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8014d92:	43c0      	mvns	r0, r0
 8014d94:	b2c0      	uxtb	r0, r0
 8014d96:	fb16 f609 	smulbb	r6, r6, r9
 8014d9a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8014d9e:	fb07 6700 	mla	r7, r7, r0, r6
 8014da2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014da6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8014daa:	b2ed      	uxtb	r5, r5
 8014dac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014db0:	fa5f fc8c 	uxtb.w	ip, ip
 8014db4:	fb15 f509 	smulbb	r5, r5, r9
 8014db8:	fb0c 5500 	mla	r5, ip, r0, r5
 8014dbc:	b2bf      	uxth	r7, r7
 8014dbe:	fb1a fa09 	smulbb	sl, sl, r9
 8014dc2:	b2ad      	uxth	r5, r5
 8014dc4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8014dc8:	fb06 a600 	mla	r6, r6, r0, sl
 8014dcc:	1c78      	adds	r0, r7, #1
 8014dce:	f105 0a01 	add.w	sl, r5, #1
 8014dd2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8014dd6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014dda:	b2b6      	uxth	r6, r6
 8014ddc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014de0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8014de4:	ea4a 0707 	orr.w	r7, sl, r7
 8014de8:	f106 0a01 	add.w	sl, r6, #1
 8014dec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014df0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014df4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8014df8:	ea47 070a 	orr.w	r7, r7, sl
 8014dfc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8014e00:	e7b5      	b.n	8014d6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8014e02:	b005      	add	sp, #20
 8014e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e08:	fffff800 	.word	0xfffff800

08014e0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e10:	b087      	sub	sp, #28
 8014e12:	468b      	mov	fp, r1
 8014e14:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8014e16:	9203      	str	r2, [sp, #12]
 8014e18:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014e1c:	9204      	str	r2, [sp, #16]
 8014e1e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8014e22:	6841      	ldr	r1, [r0, #4]
 8014e24:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8014e28:	fb01 2404 	mla	r4, r1, r4, r2
 8014e2c:	6802      	ldr	r2, [r0, #0]
 8014e2e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014e32:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8014e36:	3201      	adds	r2, #1
 8014e38:	f022 0201 	bic.w	r2, r2, #1
 8014e3c:	9200      	str	r2, [sp, #0]
 8014e3e:	f8d9 2000 	ldr.w	r2, [r9]
 8014e42:	9201      	str	r2, [sp, #4]
 8014e44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014e48:	f1bb 0f00 	cmp.w	fp, #0
 8014e4c:	dc03      	bgt.n	8014e56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8014e4e:	9a03      	ldr	r2, [sp, #12]
 8014e50:	2a00      	cmp	r2, #0
 8014e52:	f340 8169 	ble.w	8015128 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8014e56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014e58:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8014e5c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8014e60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8014e64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014e66:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	dd0e      	ble.n	8014e8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8014e6e:	1402      	asrs	r2, r0, #16
 8014e70:	d405      	bmi.n	8014e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014e72:	42ba      	cmp	r2, r7
 8014e74:	da03      	bge.n	8014e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014e76:	140a      	asrs	r2, r1, #16
 8014e78:	d401      	bmi.n	8014e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014e7a:	42b2      	cmp	r2, r6
 8014e7c:	db07      	blt.n	8014e8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8014e7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014e80:	4410      	add	r0, r2
 8014e82:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014e84:	3b01      	subs	r3, #1
 8014e86:	4411      	add	r1, r2
 8014e88:	3402      	adds	r4, #2
 8014e8a:	e7ee      	b.n	8014e6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8014e8c:	d017      	beq.n	8014ebe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8014e8e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8014e90:	1e5a      	subs	r2, r3, #1
 8014e92:	fb05 0502 	mla	r5, r5, r2, r0
 8014e96:	142d      	asrs	r5, r5, #16
 8014e98:	d409      	bmi.n	8014eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8014e9a:	42bd      	cmp	r5, r7
 8014e9c:	da07      	bge.n	8014eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8014e9e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8014ea0:	fb05 1202 	mla	r2, r5, r2, r1
 8014ea4:	1412      	asrs	r2, r2, #16
 8014ea6:	d402      	bmi.n	8014eae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8014ea8:	42b2      	cmp	r2, r6
 8014eaa:	f2c0 80c7 	blt.w	801503c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8014eae:	2700      	movs	r7, #0
 8014eb0:	19da      	adds	r2, r3, r7
 8014eb2:	2a00      	cmp	r2, #0
 8014eb4:	dc3e      	bgt.n	8014f34 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8014eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014eba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014ebe:	f1bb 0f00 	cmp.w	fp, #0
 8014ec2:	f340 8131 	ble.w	8015128 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8014ec6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014eca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014ece:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014ed2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ed4:	f1bb 0b01 	subs.w	fp, fp, #1
 8014ed8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014edc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014ee0:	eeb0 6a62 	vmov.f32	s12, s5
 8014ee4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014ee8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014eec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014ef0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8014ef4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014ef8:	eeb0 6a43 	vmov.f32	s12, s6
 8014efc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014f00:	ee12 2a90 	vmov	r2, s5
 8014f04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f0c:	ee13 2a10 	vmov	r2, s6
 8014f10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f1c:	9a03      	ldr	r2, [sp, #12]
 8014f1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8014f20:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8014f24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f26:	eeb0 3a67 	vmov.f32	s6, s15
 8014f2a:	bf08      	it	eq
 8014f2c:	4613      	moveq	r3, r2
 8014f2e:	eef0 2a47 	vmov.f32	s5, s14
 8014f32:	e789      	b.n	8014e48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014f34:	1405      	asrs	r5, r0, #16
 8014f36:	d435      	bmi.n	8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8014f38:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8014f3c:	42aa      	cmp	r2, r5
 8014f3e:	dd31      	ble.n	8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8014f40:	140e      	asrs	r6, r1, #16
 8014f42:	d42f      	bmi.n	8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8014f44:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8014f48:	42b2      	cmp	r2, r6
 8014f4a:	dd2b      	ble.n	8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8014f4c:	9a00      	ldr	r2, [sp, #0]
 8014f4e:	fb06 5502 	mla	r5, r6, r2, r5
 8014f52:	086a      	lsrs	r2, r5, #1
 8014f54:	9e01      	ldr	r6, [sp, #4]
 8014f56:	5cb2      	ldrb	r2, [r6, r2]
 8014f58:	07ee      	lsls	r6, r5, #31
 8014f5a:	bf54      	ite	pl
 8014f5c:	f002 020f 	andpl.w	r2, r2, #15
 8014f60:	1112      	asrmi	r2, r2, #4
 8014f62:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014f66:	b2d2      	uxtb	r2, r2
 8014f68:	b1e2      	cbz	r2, 8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8014f6a:	9d04      	ldr	r5, [sp, #16]
 8014f6c:	436a      	muls	r2, r5
 8014f6e:	1c55      	adds	r5, r2, #1
 8014f70:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8014f74:	4d6e      	ldr	r5, [pc, #440]	@ (8015130 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8014f76:	682d      	ldr	r5, [r5, #0]
 8014f78:	1212      	asrs	r2, r2, #8
 8014f7a:	0a2e      	lsrs	r6, r5, #8
 8014f7c:	2aff      	cmp	r2, #255	@ 0xff
 8014f7e:	9605      	str	r6, [sp, #20]
 8014f80:	d116      	bne.n	8014fb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8014f82:	f06f 0201 	mvn.w	r2, #1
 8014f86:	fb02 fc07 	mul.w	ip, r2, r7
 8014f8a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8014f8e:	096a      	lsrs	r2, r5, #5
 8014f90:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8014f94:	f026 0607 	bic.w	r6, r6, #7
 8014f98:	4316      	orrs	r6, r2
 8014f9a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8014f9e:	432e      	orrs	r6, r5
 8014fa0:	f824 600c 	strh.w	r6, [r4, ip]
 8014fa4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014fa6:	4410      	add	r0, r2
 8014fa8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014faa:	3f01      	subs	r7, #1
 8014fac:	4411      	add	r1, r2
 8014fae:	e77f      	b.n	8014eb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8014fb0:	f06f 0601 	mvn.w	r6, #1
 8014fb4:	437e      	muls	r6, r7
 8014fb6:	fa1f fa82 	uxth.w	sl, r2
 8014fba:	f834 8006 	ldrh.w	r8, [r4, r6]
 8014fbe:	9602      	str	r6, [sp, #8]
 8014fc0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8014fc4:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8014fc8:	43d2      	mvns	r2, r2
 8014fca:	b2d2      	uxtb	r2, r2
 8014fcc:	fb1c fc0a 	smulbb	ip, ip, sl
 8014fd0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8014fd4:	fb0e ce02 	mla	lr, lr, r2, ip
 8014fd8:	b2ed      	uxtb	r5, r5
 8014fda:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8014fde:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014fe2:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8014fe6:	fa5f f888 	uxtb.w	r8, r8
 8014fea:	fb15 f50a 	smulbb	r5, r5, sl
 8014fee:	fb08 5502 	mla	r5, r8, r2, r5
 8014ff2:	fa1f fe8e 	uxth.w	lr, lr
 8014ff6:	fb16 f60a 	smulbb	r6, r6, sl
 8014ffa:	b2ad      	uxth	r5, r5
 8014ffc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8015000:	fb0c 6c02 	mla	ip, ip, r2, r6
 8015004:	f10e 0201 	add.w	r2, lr, #1
 8015008:	1c6e      	adds	r6, r5, #1
 801500a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801500e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8015012:	fa1f fc8c 	uxth.w	ip, ip
 8015016:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801501a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801501e:	ea46 0e0e 	orr.w	lr, r6, lr
 8015022:	f10c 0601 	add.w	r6, ip, #1
 8015026:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801502a:	0976      	lsrs	r6, r6, #5
 801502c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8015030:	9a02      	ldr	r2, [sp, #8]
 8015032:	ea4e 0e06 	orr.w	lr, lr, r6
 8015036:	f824 e002 	strh.w	lr, [r4, r2]
 801503a:	e7b3      	b.n	8014fa4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801503c:	f04f 0800 	mov.w	r8, #0
 8015040:	eba3 0208 	sub.w	r2, r3, r8
 8015044:	2a00      	cmp	r2, #0
 8015046:	f77f af36 	ble.w	8014eb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801504a:	9e00      	ldr	r6, [sp, #0]
 801504c:	1402      	asrs	r2, r0, #16
 801504e:	140d      	asrs	r5, r1, #16
 8015050:	fb06 2505 	mla	r5, r6, r5, r2
 8015054:	086a      	lsrs	r2, r5, #1
 8015056:	9e01      	ldr	r6, [sp, #4]
 8015058:	5cb2      	ldrb	r2, [r6, r2]
 801505a:	07ed      	lsls	r5, r5, #31
 801505c:	bf54      	ite	pl
 801505e:	f002 020f 	andpl.w	r2, r2, #15
 8015062:	1112      	asrmi	r2, r2, #4
 8015064:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015068:	b2d2      	uxtb	r2, r2
 801506a:	b1c2      	cbz	r2, 801509e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801506c:	9d04      	ldr	r5, [sp, #16]
 801506e:	436a      	muls	r2, r5
 8015070:	1c55      	adds	r5, r2, #1
 8015072:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8015076:	4d2e      	ldr	r5, [pc, #184]	@ (8015130 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8015078:	1212      	asrs	r2, r2, #8
 801507a:	682e      	ldr	r6, [r5, #0]
 801507c:	2aff      	cmp	r2, #255	@ 0xff
 801507e:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8015082:	d113      	bne.n	80150ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8015084:	0972      	lsrs	r2, r6, #5
 8015086:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801508a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801508e:	f025 0507 	bic.w	r5, r5, #7
 8015092:	4315      	orrs	r5, r2
 8015094:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8015098:	4335      	orrs	r5, r6
 801509a:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801509e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80150a0:	4410      	add	r0, r2
 80150a2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80150a4:	f108 0801 	add.w	r8, r8, #1
 80150a8:	4411      	add	r1, r2
 80150aa:	e7c9      	b.n	8015040 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80150ac:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80150b0:	fa1f fa82 	uxth.w	sl, r2
 80150b4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80150b8:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80150bc:	43d2      	mvns	r2, r2
 80150be:	b2d2      	uxtb	r2, r2
 80150c0:	fb17 f70a 	smulbb	r7, r7, sl
 80150c4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80150c8:	fb0c 7c02 	mla	ip, ip, r2, r7
 80150cc:	b2f6      	uxtb	r6, r6
 80150ce:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80150d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80150d6:	fa5f fe8e 	uxtb.w	lr, lr
 80150da:	fb16 f60a 	smulbb	r6, r6, sl
 80150de:	fb0e 6602 	mla	r6, lr, r2, r6
 80150e2:	b2ed      	uxtb	r5, r5
 80150e4:	fa1f fc8c 	uxth.w	ip, ip
 80150e8:	fb15 f50a 	smulbb	r5, r5, sl
 80150ec:	b2b6      	uxth	r6, r6
 80150ee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80150f2:	fb07 5702 	mla	r7, r7, r2, r5
 80150f6:	f10c 0201 	add.w	r2, ip, #1
 80150fa:	1c75      	adds	r5, r6, #1
 80150fc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8015100:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8015104:	b2bf      	uxth	r7, r7
 8015106:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801510a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801510e:	ea45 0c0c 	orr.w	ip, r5, ip
 8015112:	1c7d      	adds	r5, r7, #1
 8015114:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8015118:	096d      	lsrs	r5, r5, #5
 801511a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801511e:	ea4c 0c05 	orr.w	ip, ip, r5
 8015122:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8015126:	e7ba      	b.n	801509e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8015128:	b007      	add	sp, #28
 801512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801512e:	bf00      	nop
 8015130:	2002b034 	.word	0x2002b034

08015134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015138:	b087      	sub	sp, #28
 801513a:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 8015448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801513e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8015140:	9205      	str	r2, [sp, #20]
 8015142:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8015146:	9101      	str	r1, [sp, #4]
 8015148:	6841      	ldr	r1, [r0, #4]
 801514a:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801514e:	fb01 2404 	mla	r4, r1, r4, r2
 8015152:	6802      	ldr	r2, [r0, #0]
 8015154:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015158:	f8db 2008 	ldr.w	r2, [fp, #8]
 801515c:	3201      	adds	r2, #1
 801515e:	f022 0201 	bic.w	r2, r2, #1
 8015162:	9202      	str	r2, [sp, #8]
 8015164:	f8db 2000 	ldr.w	r2, [fp]
 8015168:	9203      	str	r2, [sp, #12]
 801516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801516e:	9a01      	ldr	r2, [sp, #4]
 8015170:	2a00      	cmp	r2, #0
 8015172:	dc03      	bgt.n	801517c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015174:	9a05      	ldr	r2, [sp, #20]
 8015176:	2a00      	cmp	r2, #0
 8015178:	f340 8162 	ble.w	8015440 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801517c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801517e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8015182:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8015186:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801518a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801518c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015190:	2b00      	cmp	r3, #0
 8015192:	dd0e      	ble.n	80151b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015194:	1402      	asrs	r2, r0, #16
 8015196:	d405      	bmi.n	80151a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015198:	42ba      	cmp	r2, r7
 801519a:	da03      	bge.n	80151a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801519c:	140a      	asrs	r2, r1, #16
 801519e:	d401      	bmi.n	80151a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80151a0:	42b2      	cmp	r2, r6
 80151a2:	db07      	blt.n	80151b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80151a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80151a6:	4410      	add	r0, r2
 80151a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80151aa:	3b01      	subs	r3, #1
 80151ac:	4411      	add	r1, r2
 80151ae:	3402      	adds	r4, #2
 80151b0:	e7ee      	b.n	8015190 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80151b2:	d017      	beq.n	80151e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80151b4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80151b6:	1e5a      	subs	r2, r3, #1
 80151b8:	fb05 0502 	mla	r5, r5, r2, r0
 80151bc:	142d      	asrs	r5, r5, #16
 80151be:	d409      	bmi.n	80151d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80151c0:	42bd      	cmp	r5, r7
 80151c2:	da07      	bge.n	80151d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80151c4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80151c6:	fb05 1202 	mla	r2, r5, r2, r1
 80151ca:	1412      	asrs	r2, r2, #16
 80151cc:	d402      	bmi.n	80151d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80151ce:	42b2      	cmp	r2, r6
 80151d0:	f2c0 80c3 	blt.w	801535a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80151d4:	2500      	movs	r5, #0
 80151d6:	195a      	adds	r2, r3, r5
 80151d8:	2a00      	cmp	r2, #0
 80151da:	dc3f      	bgt.n	801525c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80151dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80151e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80151e4:	9b01      	ldr	r3, [sp, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f340 812a 	ble.w	8015440 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80151ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80151f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80151f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80151f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80151fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80151fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015202:	eeb0 6a62 	vmov.f32	s12, s5
 8015206:	ee61 7a27 	vmul.f32	s15, s2, s15
 801520a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801520e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015212:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8015216:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801521a:	eeb0 6a43 	vmov.f32	s12, s6
 801521e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015222:	ee12 2a90 	vmov	r2, s5
 8015226:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801522a:	fb92 f3f3 	sdiv	r3, r2, r3
 801522e:	ee13 2a10 	vmov	r2, s6
 8015232:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015234:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015236:	fb92 f3f3 	sdiv	r3, r2, r3
 801523a:	9314      	str	r3, [sp, #80]	@ 0x50
 801523c:	9b01      	ldr	r3, [sp, #4]
 801523e:	9a05      	ldr	r2, [sp, #20]
 8015240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015244:	3b01      	subs	r3, #1
 8015246:	9301      	str	r3, [sp, #4]
 8015248:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801524c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801524e:	eeb0 3a67 	vmov.f32	s6, s15
 8015252:	bf08      	it	eq
 8015254:	4613      	moveq	r3, r2
 8015256:	eef0 2a47 	vmov.f32	s5, s14
 801525a:	e788      	b.n	801516e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801525c:	1406      	asrs	r6, r0, #16
 801525e:	d42c      	bmi.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015260:	f8db 2008 	ldr.w	r2, [fp, #8]
 8015264:	42b2      	cmp	r2, r6
 8015266:	dd28      	ble.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015268:	140f      	asrs	r7, r1, #16
 801526a:	d426      	bmi.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801526c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8015270:	42ba      	cmp	r2, r7
 8015272:	dd22      	ble.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015274:	9a02      	ldr	r2, [sp, #8]
 8015276:	fb07 6602 	mla	r6, r7, r2, r6
 801527a:	0872      	lsrs	r2, r6, #1
 801527c:	9f03      	ldr	r7, [sp, #12]
 801527e:	5cba      	ldrb	r2, [r7, r2]
 8015280:	07f6      	lsls	r6, r6, #31
 8015282:	bf54      	ite	pl
 8015284:	f002 020f 	andpl.w	r2, r2, #15
 8015288:	1112      	asrmi	r2, r2, #4
 801528a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801528e:	b2d2      	uxtb	r2, r2
 8015290:	2aff      	cmp	r2, #255	@ 0xff
 8015292:	d118      	bne.n	80152c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8015294:	f8d8 2000 	ldr.w	r2, [r8]
 8015298:	f06f 0601 	mvn.w	r6, #1
 801529c:	fb06 f705 	mul.w	r7, r6, r5
 80152a0:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 80152a4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80152a8:	0956      	lsrs	r6, r2, #5
 80152aa:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80152ae:	ea4c 0606 	orr.w	r6, ip, r6
 80152b2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80152b6:	4316      	orrs	r6, r2
 80152b8:	53e6      	strh	r6, [r4, r7]
 80152ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80152bc:	4410      	add	r0, r2
 80152be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80152c0:	3d01      	subs	r5, #1
 80152c2:	4411      	add	r1, r2
 80152c4:	e787      	b.n	80151d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80152c6:	2a00      	cmp	r2, #0
 80152c8:	d0f7      	beq.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80152ca:	f06f 0601 	mvn.w	r6, #1
 80152ce:	436e      	muls	r6, r5
 80152d0:	f8d8 c000 	ldr.w	ip, [r8]
 80152d4:	f834 e006 	ldrh.w	lr, [r4, r6]
 80152d8:	9604      	str	r6, [sp, #16]
 80152da:	fa1f f982 	uxth.w	r9, r2
 80152de:	ea4f 272e 	mov.w	r7, lr, asr #8
 80152e2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80152e6:	43d2      	mvns	r2, r2
 80152e8:	b2d2      	uxtb	r2, r2
 80152ea:	fb16 f609 	smulbb	r6, r6, r9
 80152ee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80152f2:	fb07 6702 	mla	r7, r7, r2, r6
 80152f6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80152fa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80152fe:	fa5f fc8c 	uxtb.w	ip, ip
 8015302:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015306:	fa5f fe8e 	uxtb.w	lr, lr
 801530a:	fb1c fc09 	smulbb	ip, ip, r9
 801530e:	fb0e cc02 	mla	ip, lr, r2, ip
 8015312:	b2bf      	uxth	r7, r7
 8015314:	fb1a fa09 	smulbb	sl, sl, r9
 8015318:	fa1f fc8c 	uxth.w	ip, ip
 801531c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015320:	fb06 a602 	mla	r6, r6, r2, sl
 8015324:	1c7a      	adds	r2, r7, #1
 8015326:	f10c 0a01 	add.w	sl, ip, #1
 801532a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801532e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8015332:	b2b6      	uxth	r6, r6
 8015334:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015338:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801533c:	ea4a 0707 	orr.w	r7, sl, r7
 8015340:	f106 0a01 	add.w	sl, r6, #1
 8015344:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015348:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801534c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015350:	9a04      	ldr	r2, [sp, #16]
 8015352:	ea47 070a 	orr.w	r7, r7, sl
 8015356:	52a7      	strh	r7, [r4, r2]
 8015358:	e7af      	b.n	80152ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801535a:	f04f 0e00 	mov.w	lr, #0
 801535e:	eba3 020e 	sub.w	r2, r3, lr
 8015362:	2a00      	cmp	r2, #0
 8015364:	f77f af3a 	ble.w	80151dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8015368:	9e02      	ldr	r6, [sp, #8]
 801536a:	1402      	asrs	r2, r0, #16
 801536c:	140d      	asrs	r5, r1, #16
 801536e:	fb06 2505 	mla	r5, r6, r5, r2
 8015372:	086a      	lsrs	r2, r5, #1
 8015374:	9e03      	ldr	r6, [sp, #12]
 8015376:	5cb2      	ldrb	r2, [r6, r2]
 8015378:	07ed      	lsls	r5, r5, #31
 801537a:	bf54      	ite	pl
 801537c:	f002 020f 	andpl.w	r2, r2, #15
 8015380:	1112      	asrmi	r2, r2, #4
 8015382:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015386:	b2d2      	uxtb	r2, r2
 8015388:	2aff      	cmp	r2, #255	@ 0xff
 801538a:	d115      	bne.n	80153b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801538c:	f8d8 5000 	ldr.w	r5, [r8]
 8015390:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8015394:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8015398:	096a      	lsrs	r2, r5, #5
 801539a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801539e:	4332      	orrs	r2, r6
 80153a0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80153a4:	432a      	orrs	r2, r5
 80153a6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80153aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80153ac:	4410      	add	r0, r2
 80153ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80153b0:	f10e 0e01 	add.w	lr, lr, #1
 80153b4:	4411      	add	r1, r2
 80153b6:	e7d2      	b.n	801535e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	d0f6      	beq.n	80153aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80153bc:	f8d8 7000 	ldr.w	r7, [r8]
 80153c0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80153c4:	fa1f f982 	uxth.w	r9, r2
 80153c8:	ea4f 262c 	mov.w	r6, ip, asr #8
 80153cc:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80153d0:	43d2      	mvns	r2, r2
 80153d2:	b2d2      	uxtb	r2, r2
 80153d4:	fb15 f509 	smulbb	r5, r5, r9
 80153d8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80153dc:	fb06 5602 	mla	r6, r6, r2, r5
 80153e0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80153e4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80153e8:	b2ff      	uxtb	r7, r7
 80153ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80153ee:	fa5f fc8c 	uxtb.w	ip, ip
 80153f2:	fb17 f709 	smulbb	r7, r7, r9
 80153f6:	fb0c 7702 	mla	r7, ip, r2, r7
 80153fa:	b2b6      	uxth	r6, r6
 80153fc:	fb1a fa09 	smulbb	sl, sl, r9
 8015400:	b2bf      	uxth	r7, r7
 8015402:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8015406:	fb05 a502 	mla	r5, r5, r2, sl
 801540a:	1c72      	adds	r2, r6, #1
 801540c:	f107 0a01 	add.w	sl, r7, #1
 8015410:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8015414:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015418:	b2ad      	uxth	r5, r5
 801541a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801541e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8015422:	ea4a 0606 	orr.w	r6, sl, r6
 8015426:	f105 0a01 	add.w	sl, r5, #1
 801542a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801542e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015432:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015436:	ea46 060a 	orr.w	r6, r6, sl
 801543a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801543e:	e7b4      	b.n	80153aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015440:	b007      	add	sp, #28
 8015442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015446:	bf00      	nop
 8015448:	2002b034 	.word	0x2002b034

0801544c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801544c:	4770      	bx	lr

0801544e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801544e:	4770      	bx	lr

08015450 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8015450:	4770      	bx	lr

08015452 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8015452:	4770      	bx	lr

08015454 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015454:	4770      	bx	lr

08015456 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015456:	4770      	bx	lr

08015458 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015458:	4770      	bx	lr

0801545a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801545a:	4770      	bx	lr

0801545c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801545c:	4770      	bx	lr

0801545e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801545e:	4770      	bx	lr

08015460 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015460:	4770      	bx	lr

08015462 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015462:	4770      	bx	lr

08015464 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015464:	4770      	bx	lr

08015466 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8015466:	4770      	bx	lr

08015468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015468:	4770      	bx	lr

0801546a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801546a:	4770      	bx	lr

0801546c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801546c:	4770      	bx	lr

0801546e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801546e:	4770      	bx	lr

08015470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015470:	4770      	bx	lr

08015472 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015472:	4770      	bx	lr

08015474 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015474:	4770      	bx	lr

08015476 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015476:	4770      	bx	lr

08015478 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015478:	4770      	bx	lr

0801547a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801547a:	4770      	bx	lr

0801547c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801547c:	4770      	bx	lr

0801547e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801547e:	4770      	bx	lr

08015480 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015480:	4770      	bx	lr

08015482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015482:	4770      	bx	lr

08015484 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015484:	4770      	bx	lr

08015486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8015486:	4770      	bx	lr

08015488 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015488:	4770      	bx	lr

0801548a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801548a:	4770      	bx	lr

0801548c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015490:	b088      	sub	sp, #32
 8015492:	ac08      	add	r4, sp, #32
 8015494:	4606      	mov	r6, r0
 8015496:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801549a:	4620      	mov	r0, r4
 801549c:	4688      	mov	r8, r1
 801549e:	4691      	mov	r9, r2
 80154a0:	f7fd fc32 	bl	8012d08 <_ZNK8touchgfx6Bitmap7getDataEv>
 80154a4:	6833      	ldr	r3, [r6, #0]
 80154a6:	4605      	mov	r5, r0
 80154a8:	4620      	mov	r0, r4
 80154aa:	699f      	ldr	r7, [r3, #24]
 80154ac:	f7fd fb3a 	bl	8012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80154b0:	4682      	mov	sl, r0
 80154b2:	4620      	mov	r0, r4
 80154b4:	f7fd fb6a 	bl	8012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154b8:	9500      	str	r5, [sp, #0]
 80154ba:	e9cd a001 	strd	sl, r0, [sp, #4]
 80154be:	464b      	mov	r3, r9
 80154c0:	a806      	add	r0, sp, #24
 80154c2:	4642      	mov	r2, r8
 80154c4:	4631      	mov	r1, r6
 80154c6:	47b8      	blx	r7
 80154c8:	4628      	mov	r0, r5
 80154ca:	b008      	add	sp, #32
 80154cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080154d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80154d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154d4:	2300      	movs	r3, #0
 80154d6:	9300      	str	r3, [sp, #0]
 80154d8:	4b3d      	ldr	r3, [pc, #244]	@ (80155d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d137      	bne.n	8015550 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80154e0:	4a3c      	ldr	r2, [pc, #240]	@ (80155d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80154e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d132      	bne.n	8015554 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80154ee:	4b3a      	ldr	r3, [pc, #232]	@ (80155d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80154f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154f4:	6808      	ldr	r0, [r1, #0]
 80154f6:	6849      	ldr	r1, [r1, #4]
 80154f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80154fc:	ac02      	add	r4, sp, #8
 80154fe:	ab02      	add	r3, sp, #8
 8015500:	c303      	stmia	r3!, {r0, r1}
 8015502:	4669      	mov	r1, sp
 8015504:	4620      	mov	r0, r4
 8015506:	f7fa fb83 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801550a:	4668      	mov	r0, sp
 801550c:	f7fa fb58 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015510:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015514:	f8bd 2000 	ldrh.w	r2, [sp]
 8015518:	4d30      	ldr	r5, [pc, #192]	@ (80155dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801551a:	4413      	add	r3, r2
 801551c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015520:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015524:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015528:	6828      	ldr	r0, [r5, #0]
 801552a:	4413      	add	r3, r2
 801552c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015530:	6803      	ldr	r3, [r0, #0]
 8015532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015534:	4798      	blx	r3
 8015536:	f010 0f01 	tst.w	r0, #1
 801553a:	462f      	mov	r7, r5
 801553c:	d00c      	beq.n	8015558 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801553e:	6828      	ldr	r0, [r5, #0]
 8015540:	6803      	ldr	r3, [r0, #0]
 8015542:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015548:	4798      	blx	r3
 801554a:	b004      	add	sp, #16
 801554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015550:	4a21      	ldr	r2, [pc, #132]	@ (80155d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8015552:	e7c6      	b.n	80154e2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8015554:	4b1f      	ldr	r3, [pc, #124]	@ (80155d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8015556:	e7cb      	b.n	80154f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8015558:	6838      	ldr	r0, [r7, #0]
 801555a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8015564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015566:	4798      	blx	r3
 8015568:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801556c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015570:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8015574:	fb16 3602 	smlabb	r6, r6, r2, r3
 8015578:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801557c:	6838      	ldr	r0, [r7, #0]
 801557e:	6803      	ldr	r3, [r0, #0]
 8015580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015582:	4798      	blx	r3
 8015584:	4a13      	ldr	r2, [pc, #76]	@ (80155d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8015586:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801558a:	8813      	ldrh	r3, [r2, #0]
 801558c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8015590:	fb03 1404 	mla	r4, r3, r4, r1
 8015594:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015598:	435d      	muls	r5, r3
 801559a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801559e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80155a2:	4691      	mov	r9, r2
 80155a4:	6838      	ldr	r0, [r7, #0]
 80155a6:	42ac      	cmp	r4, r5
 80155a8:	6803      	ldr	r3, [r0, #0]
 80155aa:	d20e      	bcs.n	80155ca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80155ac:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 80155b0:	4632      	mov	r2, r6
 80155b2:	4643      	mov	r3, r8
 80155b4:	4621      	mov	r1, r4
 80155b6:	47d0      	blx	sl
 80155b8:	f8b9 3000 	ldrh.w	r3, [r9]
 80155bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80155c0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80155c4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80155c8:	e7ec      	b.n	80155a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80155ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155cc:	4798      	blx	r3
 80155ce:	e7bc      	b.n	801554a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80155d0:	2002b024 	.word	0x2002b024
 80155d4:	2002b026 	.word	0x2002b026
 80155d8:	2002b028 	.word	0x2002b028
 80155dc:	2002b02c 	.word	0x2002b02c

080155e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80155e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155e4:	b08b      	sub	sp, #44	@ 0x2c
 80155e6:	460f      	mov	r7, r1
 80155e8:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80155ec:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80155f0:	4616      	mov	r6, r2
 80155f2:	f1bb 0f00 	cmp.w	fp, #0
 80155f6:	d04a      	beq.n	801568e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80155f8:	6810      	ldr	r0, [r2, #0]
 80155fa:	6851      	ldr	r1, [r2, #4]
 80155fc:	ad06      	add	r5, sp, #24
 80155fe:	c503      	stmia	r5!, {r0, r1}
 8015600:	6818      	ldr	r0, [r3, #0]
 8015602:	6859      	ldr	r1, [r3, #4]
 8015604:	ad08      	add	r5, sp, #32
 8015606:	c503      	stmia	r5!, {r0, r1}
 8015608:	a806      	add	r0, sp, #24
 801560a:	f7fa fad9 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801560e:	4631      	mov	r1, r6
 8015610:	a808      	add	r0, sp, #32
 8015612:	f7fa fafd 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015616:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801561a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801561e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8015622:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8015626:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801562a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801562e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8015632:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015636:	4f5f      	ldr	r7, [pc, #380]	@ (80157b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8015638:	440a      	add	r2, r1
 801563a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801563e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015642:	6838      	ldr	r0, [r7, #0]
 8015644:	4413      	add	r3, r2
 8015646:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801564a:	6803      	ldr	r3, [r0, #0]
 801564c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801564e:	4798      	blx	r3
 8015650:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8015654:	46b9      	mov	r9, r7
 8015656:	d11d      	bne.n	8015694 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8015658:	b9fc      	cbnz	r4, 801569a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801565a:	f010 0f01 	tst.w	r0, #1
 801565e:	d01c      	beq.n	801569a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8015660:	f8d9 0000 	ldr.w	r0, [r9]
 8015664:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8015668:	6801      	ldr	r1, [r0, #0]
 801566a:	f8cd b00c 	str.w	fp, [sp, #12]
 801566e:	2700      	movs	r7, #0
 8015670:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8015674:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8015678:	9402      	str	r4, [sp, #8]
 801567a:	b2ad      	uxth	r5, r5
 801567c:	fa1f f488 	uxth.w	r4, r8
 8015680:	9501      	str	r5, [sp, #4]
 8015682:	9400      	str	r4, [sp, #0]
 8015684:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 8015686:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801568a:	4631      	mov	r1, r6
 801568c:	47a0      	blx	r4
 801568e:	b00b      	add	sp, #44	@ 0x2c
 8015690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015694:	f010 0f04 	tst.w	r0, #4
 8015698:	e7e1      	b.n	801565e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801569a:	f8d9 0000 	ldr.w	r0, [r9]
 801569e:	6803      	ldr	r3, [r0, #0]
 80156a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a2:	4798      	blx	r3
 80156a4:	4b44      	ldr	r3, [pc, #272]	@ (80157b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80156a6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80156aa:	881a      	ldrh	r2, [r3, #0]
 80156ac:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80156b0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80156b4:	fb02 1404 	mla	r4, r2, r4, r1
 80156b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80156bc:	469a      	mov	sl, r3
 80156be:	fb05 f502 	mul.w	r5, r5, r2
 80156c2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80156c6:	d059      	beq.n	801577c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80156c8:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80156cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80156d0:	fa1f f28b 	uxth.w	r2, fp
 80156d4:	fa1f f989 	uxth.w	r9, r9
 80156d8:	469e      	mov	lr, r3
 80156da:	42ac      	cmp	r4, r5
 80156dc:	d264      	bcs.n	80157a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80156de:	eb04 0a07 	add.w	sl, r4, r7
 80156e2:	4554      	cmp	r4, sl
 80156e4:	d23d      	bcs.n	8015762 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80156e6:	8821      	ldrh	r1, [r4, #0]
 80156e8:	f836 3b02 	ldrh.w	r3, [r6], #2
 80156ec:	1208      	asrs	r0, r1, #8
 80156ee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80156f2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80156f6:	fb10 f009 	smulbb	r0, r0, r9
 80156fa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80156fe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015702:	00c9      	lsls	r1, r1, #3
 8015704:	fb0c 0c02 	mla	ip, ip, r2, r0
 8015708:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801570c:	10d8      	asrs	r0, r3, #3
 801570e:	b2c9      	uxtb	r1, r1
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	fa1f fc8c 	uxth.w	ip, ip
 8015716:	fb1b fb09 	smulbb	fp, fp, r9
 801571a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801571e:	b2db      	uxtb	r3, r3
 8015720:	fb11 f109 	smulbb	r1, r1, r9
 8015724:	fb00 b002 	mla	r0, r0, r2, fp
 8015728:	fb03 1302 	mla	r3, r3, r2, r1
 801572c:	f10c 0b01 	add.w	fp, ip, #1
 8015730:	b29b      	uxth	r3, r3
 8015732:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015736:	b280      	uxth	r0, r0
 8015738:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801573c:	f103 0c01 	add.w	ip, r3, #1
 8015740:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8015744:	1c43      	adds	r3, r0, #1
 8015746:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801574a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801574e:	0940      	lsrs	r0, r0, #5
 8015750:	ea4c 0c0b 	orr.w	ip, ip, fp
 8015754:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015758:	ea4c 0c00 	orr.w	ip, ip, r0
 801575c:	f824 cb02 	strh.w	ip, [r4], #2
 8015760:	e7bf      	b.n	80156e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8015762:	f8be 3000 	ldrh.w	r3, [lr]
 8015766:	eba3 0308 	sub.w	r3, r3, r8
 801576a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801576e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015772:	eba3 0308 	sub.w	r3, r3, r8
 8015776:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801577a:	e7ae      	b.n	80156da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801577c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8015780:	f8d9 0000 	ldr.w	r0, [r9]
 8015784:	42ac      	cmp	r4, r5
 8015786:	6803      	ldr	r3, [r0, #0]
 8015788:	d20e      	bcs.n	80157a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801578a:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801578e:	4632      	mov	r2, r6
 8015790:	463b      	mov	r3, r7
 8015792:	4621      	mov	r1, r4
 8015794:	47c0      	blx	r8
 8015796:	f8ba 3000 	ldrh.w	r3, [sl]
 801579a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801579e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80157a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80157a6:	e7eb      	b.n	8015780 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80157a8:	4b02      	ldr	r3, [pc, #8]	@ (80157b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80157aa:	6818      	ldr	r0, [r3, #0]
 80157ac:	6803      	ldr	r3, [r0, #0]
 80157ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157b0:	4798      	blx	r3
 80157b2:	e76c      	b.n	801568e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80157b4:	2002b02c 	.word	0x2002b02c
 80157b8:	2002b026 	.word	0x2002b026

080157bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80157bc:	b510      	push	{r4, lr}
 80157be:	2104      	movs	r1, #4
 80157c0:	4604      	mov	r4, r0
 80157c2:	f00b fcd8 	bl	8021176 <_ZdlPvj>
 80157c6:	4620      	mov	r0, r4
 80157c8:	bd10      	pop	{r4, pc}

080157ca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 80157ca:	b510      	push	{r4, lr}
 80157cc:	2104      	movs	r1, #4
 80157ce:	4604      	mov	r4, r0
 80157d0:	f00b fcd1 	bl	8021176 <_ZdlPvj>
 80157d4:	4620      	mov	r0, r4
 80157d6:	bd10      	pop	{r4, pc}

080157d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 80157d8:	b510      	push	{r4, lr}
 80157da:	f640 0144 	movw	r1, #2116	@ 0x844
 80157de:	4604      	mov	r4, r0
 80157e0:	f00b fcc9 	bl	8021176 <_ZdlPvj>
 80157e4:	4620      	mov	r0, r4
 80157e6:	bd10      	pop	{r4, pc}

080157e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 80157e8:	b510      	push	{r4, lr}
 80157ea:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80157ee:	4604      	mov	r4, r0
 80157f0:	f00b fcc1 	bl	8021176 <_ZdlPvj>
 80157f4:	4620      	mov	r0, r4
 80157f6:	bd10      	pop	{r4, pc}

080157f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80157f8:	b510      	push	{r4, lr}
 80157fa:	2104      	movs	r1, #4
 80157fc:	4604      	mov	r4, r0
 80157fe:	f00b fcba 	bl	8021176 <_ZdlPvj>
 8015802:	4620      	mov	r0, r4
 8015804:	bd10      	pop	{r4, pc}

08015806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8015806:	b510      	push	{r4, lr}
 8015808:	2104      	movs	r1, #4
 801580a:	4604      	mov	r4, r0
 801580c:	f00b fcb3 	bl	8021176 <_ZdlPvj>
 8015810:	4620      	mov	r0, r4
 8015812:	bd10      	pop	{r4, pc}

08015814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015814:	b510      	push	{r4, lr}
 8015816:	2104      	movs	r1, #4
 8015818:	4604      	mov	r4, r0
 801581a:	f00b fcac 	bl	8021176 <_ZdlPvj>
 801581e:	4620      	mov	r0, r4
 8015820:	bd10      	pop	{r4, pc}

08015822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8015822:	b510      	push	{r4, lr}
 8015824:	2104      	movs	r1, #4
 8015826:	4604      	mov	r4, r0
 8015828:	f00b fca5 	bl	8021176 <_ZdlPvj>
 801582c:	4620      	mov	r0, r4
 801582e:	bd10      	pop	{r4, pc}

08015830 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015830:	b510      	push	{r4, lr}
 8015832:	2104      	movs	r1, #4
 8015834:	4604      	mov	r4, r0
 8015836:	f00b fc9e 	bl	8021176 <_ZdlPvj>
 801583a:	4620      	mov	r0, r4
 801583c:	bd10      	pop	{r4, pc}

0801583e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801583e:	b510      	push	{r4, lr}
 8015840:	2104      	movs	r1, #4
 8015842:	4604      	mov	r4, r0
 8015844:	f00b fc97 	bl	8021176 <_ZdlPvj>
 8015848:	4620      	mov	r0, r4
 801584a:	bd10      	pop	{r4, pc}

0801584c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801584c:	b510      	push	{r4, lr}
 801584e:	2104      	movs	r1, #4
 8015850:	4604      	mov	r4, r0
 8015852:	f00b fc90 	bl	8021176 <_ZdlPvj>
 8015856:	4620      	mov	r0, r4
 8015858:	bd10      	pop	{r4, pc}

0801585a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801585a:	b510      	push	{r4, lr}
 801585c:	2104      	movs	r1, #4
 801585e:	4604      	mov	r4, r0
 8015860:	f00b fc89 	bl	8021176 <_ZdlPvj>
 8015864:	4620      	mov	r0, r4
 8015866:	bd10      	pop	{r4, pc}

08015868 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015868:	b510      	push	{r4, lr}
 801586a:	2104      	movs	r1, #4
 801586c:	4604      	mov	r4, r0
 801586e:	f00b fc82 	bl	8021176 <_ZdlPvj>
 8015872:	4620      	mov	r0, r4
 8015874:	bd10      	pop	{r4, pc}

08015876 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015876:	b510      	push	{r4, lr}
 8015878:	2104      	movs	r1, #4
 801587a:	4604      	mov	r4, r0
 801587c:	f00b fc7b 	bl	8021176 <_ZdlPvj>
 8015880:	4620      	mov	r0, r4
 8015882:	bd10      	pop	{r4, pc}

08015884 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015884:	b510      	push	{r4, lr}
 8015886:	2104      	movs	r1, #4
 8015888:	4604      	mov	r4, r0
 801588a:	f00b fc74 	bl	8021176 <_ZdlPvj>
 801588e:	4620      	mov	r0, r4
 8015890:	bd10      	pop	{r4, pc}

08015892 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015892:	b510      	push	{r4, lr}
 8015894:	2104      	movs	r1, #4
 8015896:	4604      	mov	r4, r0
 8015898:	f00b fc6d 	bl	8021176 <_ZdlPvj>
 801589c:	4620      	mov	r0, r4
 801589e:	bd10      	pop	{r4, pc}

080158a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80158a0:	b510      	push	{r4, lr}
 80158a2:	2104      	movs	r1, #4
 80158a4:	4604      	mov	r4, r0
 80158a6:	f00b fc66 	bl	8021176 <_ZdlPvj>
 80158aa:	4620      	mov	r0, r4
 80158ac:	bd10      	pop	{r4, pc}

080158ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80158ae:	b510      	push	{r4, lr}
 80158b0:	2104      	movs	r1, #4
 80158b2:	4604      	mov	r4, r0
 80158b4:	f00b fc5f 	bl	8021176 <_ZdlPvj>
 80158b8:	4620      	mov	r0, r4
 80158ba:	bd10      	pop	{r4, pc}

080158bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80158bc:	b510      	push	{r4, lr}
 80158be:	2104      	movs	r1, #4
 80158c0:	4604      	mov	r4, r0
 80158c2:	f00b fc58 	bl	8021176 <_ZdlPvj>
 80158c6:	4620      	mov	r0, r4
 80158c8:	bd10      	pop	{r4, pc}

080158ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80158ca:	b510      	push	{r4, lr}
 80158cc:	2104      	movs	r1, #4
 80158ce:	4604      	mov	r4, r0
 80158d0:	f00b fc51 	bl	8021176 <_ZdlPvj>
 80158d4:	4620      	mov	r0, r4
 80158d6:	bd10      	pop	{r4, pc}

080158d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80158d8:	b510      	push	{r4, lr}
 80158da:	2104      	movs	r1, #4
 80158dc:	4604      	mov	r4, r0
 80158de:	f00b fc4a 	bl	8021176 <_ZdlPvj>
 80158e2:	4620      	mov	r0, r4
 80158e4:	bd10      	pop	{r4, pc}

080158e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80158e6:	b510      	push	{r4, lr}
 80158e8:	2104      	movs	r1, #4
 80158ea:	4604      	mov	r4, r0
 80158ec:	f00b fc43 	bl	8021176 <_ZdlPvj>
 80158f0:	4620      	mov	r0, r4
 80158f2:	bd10      	pop	{r4, pc}

080158f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80158f4:	b510      	push	{r4, lr}
 80158f6:	2104      	movs	r1, #4
 80158f8:	4604      	mov	r4, r0
 80158fa:	f00b fc3c 	bl	8021176 <_ZdlPvj>
 80158fe:	4620      	mov	r0, r4
 8015900:	bd10      	pop	{r4, pc}

08015902 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015902:	b510      	push	{r4, lr}
 8015904:	2104      	movs	r1, #4
 8015906:	4604      	mov	r4, r0
 8015908:	f00b fc35 	bl	8021176 <_ZdlPvj>
 801590c:	4620      	mov	r0, r4
 801590e:	bd10      	pop	{r4, pc}

08015910 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015910:	b510      	push	{r4, lr}
 8015912:	2104      	movs	r1, #4
 8015914:	4604      	mov	r4, r0
 8015916:	f00b fc2e 	bl	8021176 <_ZdlPvj>
 801591a:	4620      	mov	r0, r4
 801591c:	bd10      	pop	{r4, pc}

0801591e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801591e:	b510      	push	{r4, lr}
 8015920:	2104      	movs	r1, #4
 8015922:	4604      	mov	r4, r0
 8015924:	f00b fc27 	bl	8021176 <_ZdlPvj>
 8015928:	4620      	mov	r0, r4
 801592a:	bd10      	pop	{r4, pc}

0801592c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801592c:	b510      	push	{r4, lr}
 801592e:	2104      	movs	r1, #4
 8015930:	4604      	mov	r4, r0
 8015932:	f00b fc20 	bl	8021176 <_ZdlPvj>
 8015936:	4620      	mov	r0, r4
 8015938:	bd10      	pop	{r4, pc}

0801593a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801593a:	b510      	push	{r4, lr}
 801593c:	2104      	movs	r1, #4
 801593e:	4604      	mov	r4, r0
 8015940:	f00b fc19 	bl	8021176 <_ZdlPvj>
 8015944:	4620      	mov	r0, r4
 8015946:	bd10      	pop	{r4, pc}

08015948 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015948:	b510      	push	{r4, lr}
 801594a:	2104      	movs	r1, #4
 801594c:	4604      	mov	r4, r0
 801594e:	f00b fc12 	bl	8021176 <_ZdlPvj>
 8015952:	4620      	mov	r0, r4
 8015954:	bd10      	pop	{r4, pc}

08015956 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015956:	b510      	push	{r4, lr}
 8015958:	2104      	movs	r1, #4
 801595a:	4604      	mov	r4, r0
 801595c:	f00b fc0b 	bl	8021176 <_ZdlPvj>
 8015960:	4620      	mov	r0, r4
 8015962:	bd10      	pop	{r4, pc}

08015964 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015964:	b510      	push	{r4, lr}
 8015966:	2104      	movs	r1, #4
 8015968:	4604      	mov	r4, r0
 801596a:	f00b fc04 	bl	8021176 <_ZdlPvj>
 801596e:	4620      	mov	r0, r4
 8015970:	bd10      	pop	{r4, pc}

08015972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015972:	b510      	push	{r4, lr}
 8015974:	2104      	movs	r1, #4
 8015976:	4604      	mov	r4, r0
 8015978:	f00b fbfd 	bl	8021176 <_ZdlPvj>
 801597c:	4620      	mov	r0, r4
 801597e:	bd10      	pop	{r4, pc}

08015980 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8015980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015984:	b08f      	sub	sp, #60	@ 0x3c
 8015986:	4616      	mov	r6, r2
 8015988:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801598c:	9205      	str	r2, [sp, #20]
 801598e:	4682      	mov	sl, r0
 8015990:	460d      	mov	r5, r1
 8015992:	2a00      	cmp	r2, #0
 8015994:	f000 82b7 	beq.w	8015f06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 8015998:	6830      	ldr	r0, [r6, #0]
 801599a:	6871      	ldr	r1, [r6, #4]
 801599c:	ac0a      	add	r4, sp, #40	@ 0x28
 801599e:	c403      	stmia	r4!, {r0, r1}
 80159a0:	6818      	ldr	r0, [r3, #0]
 80159a2:	6859      	ldr	r1, [r3, #4]
 80159a4:	ac0c      	add	r4, sp, #48	@ 0x30
 80159a6:	c403      	stmia	r4!, {r0, r1}
 80159a8:	a80a      	add	r0, sp, #40	@ 0x28
 80159aa:	f7fa f909 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80159ae:	4631      	mov	r1, r6
 80159b0:	a80c      	add	r0, sp, #48	@ 0x30
 80159b2:	f7fa f92d 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80159b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80159ba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80159be:	bfd7      	itett	le
 80159c0:	b293      	uxthle	r3, r2
 80159c2:	2301      	movgt	r3, #1
 80159c4:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80159c8:	fb91 f3f3 	sdivle	r3, r1, r3
 80159cc:	9300      	str	r3, [sp, #0]
 80159ce:	f105 0308 	add.w	r3, r5, #8
 80159d2:	9900      	ldr	r1, [sp, #0]
 80159d4:	9306      	str	r3, [sp, #24]
 80159d6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80159da:	440b      	add	r3, r1
 80159dc:	3b01      	subs	r3, #1
 80159de:	fb93 f3f1 	sdiv	r3, r3, r1
 80159e2:	9906      	ldr	r1, [sp, #24]
 80159e4:	3b01      	subs	r3, #1
 80159e6:	b29b      	uxth	r3, r3
 80159e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80159ec:	9307      	str	r3, [sp, #28]
 80159ee:	9900      	ldr	r1, [sp, #0]
 80159f0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80159f4:	fb93 f0f1 	sdiv	r0, r3, r1
 80159f8:	b284      	uxth	r4, r0
 80159fa:	9402      	str	r4, [sp, #8]
 80159fc:	9d02      	ldr	r5, [sp, #8]
 80159fe:	9c00      	ldr	r4, [sp, #0]
 8015a00:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8015a04:	fb05 3414 	mls	r4, r5, r4, r3
 8015a08:	fb14 f402 	smulbb	r4, r4, r2
 8015a0c:	440c      	add	r4, r1
 8015a0e:	b2a4      	uxth	r4, r4
 8015a10:	2d00      	cmp	r5, #0
 8015a12:	d06c      	beq.n	8015aee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 8015a14:	1e6a      	subs	r2, r5, #1
 8015a16:	9806      	ldr	r0, [sp, #24]
 8015a18:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8015a1c:	9a07      	ldr	r2, [sp, #28]
 8015a1e:	ba36      	rev	r6, r6
 8015a20:	4416      	add	r6, r2
 8015a22:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8015a26:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8015a2a:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 8015d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 8015a2e:	4411      	add	r1, r2
 8015a30:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8015a34:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8015a38:	4413      	add	r3, r2
 8015a3a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015a3e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8015a42:	9301      	str	r3, [sp, #4]
 8015a44:	4bc4      	ldr	r3, [pc, #784]	@ (8015d58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 8015a46:	6818      	ldr	r0, [r3, #0]
 8015a48:	6803      	ldr	r3, [r0, #0]
 8015a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a4c:	4798      	blx	r3
 8015a4e:	4bc3      	ldr	r3, [pc, #780]	@ (8015d5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8015a50:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8015a54:	881b      	ldrh	r3, [r3, #0]
 8015a56:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 8015a5a:	fb03 2808 	mla	r8, r3, r8, r2
 8015a5e:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8015a62:	436b      	muls	r3, r5
 8015a64:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a6a:	2500      	movs	r5, #0
 8015a6c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8015a70:	fb94 f3f3 	sdiv	r3, r4, r3
 8015a74:	9304      	str	r3, [sp, #16]
 8015a76:	f10a 0304 	add.w	r3, sl, #4
 8015a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a7e:	4629      	mov	r1, r5
 8015a80:	4618      	mov	r0, r3
 8015a82:	9308      	str	r3, [sp, #32]
 8015a84:	f00b fdad 	bl	80215e2 <memset>
 8015a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a8a:	4543      	cmp	r3, r8
 8015a8c:	f240 8236 	bls.w	8015efc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8015a90:	2203      	movs	r2, #3
 8015a92:	2107      	movs	r1, #7
 8015a94:	200b      	movs	r0, #11
 8015a96:	2c00      	cmp	r4, #0
 8015a98:	f000 8131 	beq.w	8015cfe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 8015a9c:	7833      	ldrb	r3, [r6, #0]
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	2bfe      	cmp	r3, #254	@ 0xfe
 8015aa2:	d126      	bne.n	8015af2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 8015aa4:	f896 e001 	ldrb.w	lr, [r6, #1]
 8015aa8:	f896 c002 	ldrb.w	ip, [r6, #2]
 8015aac:	f896 b003 	ldrb.w	fp, [r6, #3]
 8015ab0:	fa5f fe8e 	uxtb.w	lr, lr
 8015ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8015ab8:	f36e 0507 	bfi	r5, lr, #0, #8
 8015abc:	f36c 250f 	bfi	r5, ip, #8, #8
 8015ac0:	fa5f fb8b 	uxtb.w	fp, fp
 8015ac4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8015ac8:	f36b 4517 	bfi	r5, fp, #16, #8
 8015acc:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 8015ad0:	0e2b      	lsrs	r3, r5, #24
 8015ad2:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8015ad6:	fb10 c303 	smlabb	r3, r0, r3, ip
 8015ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015ade:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8015ae2:	3c01      	subs	r4, #1
 8015ae4:	1d37      	adds	r7, r6, #4
 8015ae6:	b2a4      	uxth	r4, r4
 8015ae8:	605d      	str	r5, [r3, #4]
 8015aea:	463e      	mov	r6, r7
 8015aec:	e7d3      	b.n	8015a96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 8015aee:	9e07      	ldr	r6, [sp, #28]
 8015af0:	e797      	b.n	8015a22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 8015af2:	2bff      	cmp	r3, #255	@ 0xff
 8015af4:	d127      	bne.n	8015b46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 8015af6:	f896 c001 	ldrb.w	ip, [r6, #1]
 8015afa:	78b3      	ldrb	r3, [r6, #2]
 8015afc:	f896 e003 	ldrb.w	lr, [r6, #3]
 8015b00:	f896 b004 	ldrb.w	fp, [r6, #4]
 8015b04:	fa5f fc8c 	uxtb.w	ip, ip
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	f36c 0507 	bfi	r5, ip, #0, #8
 8015b0e:	f363 250f 	bfi	r5, r3, #8, #8
 8015b12:	fa5f fe8e 	uxtb.w	lr, lr
 8015b16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015b1a:	fb12 330e 	smlabb	r3, r2, lr, r3
 8015b1e:	fa5f fb8b 	uxtb.w	fp, fp
 8015b22:	f36e 4517 	bfi	r5, lr, #16, #8
 8015b26:	fb11 330c 	smlabb	r3, r1, ip, r3
 8015b2a:	f36b 651f 	bfi	r5, fp, #24, #8
 8015b2e:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 8015b32:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 8015b36:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 8015b3a:	3c01      	subs	r4, #1
 8015b3c:	1d77      	adds	r7, r6, #5
 8015b3e:	b2a4      	uxth	r4, r4
 8015b40:	f8cb 5004 	str.w	r5, [fp, #4]
 8015b44:	e7d1      	b.n	8015aea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8015b46:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8015b4a:	f106 0701 	add.w	r7, r6, #1
 8015b4e:	d107      	bne.n	8015b60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8015b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015b54:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8015b58:	685d      	ldr	r5, [r3, #4]
 8015b5a:	3c01      	subs	r4, #1
 8015b5c:	b2a4      	uxth	r4, r4
 8015b5e:	e7c4      	b.n	8015aea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8015b60:	f1bc 0f01 	cmp.w	ip, #1
 8015b64:	d12c      	bne.n	8015bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 8015b66:	f003 0e03 	and.w	lr, r3, #3
 8015b6a:	f1ae 0e02 	sub.w	lr, lr, #2
 8015b6e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8015b72:	fa5f fe8e 	uxtb.w	lr, lr
 8015b76:	f003 0c0c 	and.w	ip, r3, #12
 8015b7a:	f36e 0507 	bfi	r5, lr, #0, #8
 8015b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8015b82:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8015b86:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8015b8a:	f36c 250f 	bfi	r5, ip, #8, #8
 8015b8e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015b92:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015b96:	3b02      	subs	r3, #2
 8015b98:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8015ba2:	f363 4517 	bfi	r5, r3, #16, #8
 8015ba6:	fb12 cc03 	smlabb	ip, r2, r3, ip
 8015baa:	0e2e      	lsrs	r6, r5, #24
 8015bac:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8015bb0:	fb10 c606 	smlabb	r6, r0, r6, ip
 8015bb4:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8015bb8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8015bbc:	6075      	str	r5, [r6, #4]
 8015bbe:	e7cc      	b.n	8015b5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 8015bc0:	f1bc 0f02 	cmp.w	ip, #2
 8015bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015bc8:	d12a      	bne.n	8015c20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 8015bca:	1cb7      	adds	r7, r6, #2
 8015bcc:	7876      	ldrb	r6, [r6, #1]
 8015bce:	b2f6      	uxtb	r6, r6
 8015bd0:	f006 0c0f 	and.w	ip, r6, #15
 8015bd4:	3b20      	subs	r3, #32
 8015bd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8015bda:	449c      	add	ip, r3
 8015bdc:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8015be0:	fa5f fc8c 	uxtb.w	ip, ip
 8015be4:	f36c 0507 	bfi	r5, ip, #0, #8
 8015be8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8015bec:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 8015bf0:	fa5f fe8e 	uxtb.w	lr, lr
 8015bf4:	1136      	asrs	r6, r6, #4
 8015bf6:	f36e 250f 	bfi	r5, lr, #8, #8
 8015bfa:	3e08      	subs	r6, #8
 8015bfc:	4433      	add	r3, r6
 8015bfe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015c02:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8015c0c:	f363 4517 	bfi	r5, r3, #16, #8
 8015c10:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8015c14:	0e2e      	lsrs	r6, r5, #24
 8015c16:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 8015c1a:	fb10 e606 	smlabb	r6, r0, r6, lr
 8015c1e:	e7c9      	b.n	8015bb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8015c20:	1c5e      	adds	r6, r3, #1
 8015c22:	42a6      	cmp	r6, r4
 8015c24:	dd4e      	ble.n	8015cc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 8015c26:	1b36      	subs	r6, r6, r4
 8015c28:	2e00      	cmp	r6, #0
 8015c2a:	dc4e      	bgt.n	8015cca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 8015c2c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015c30:	2400      	movs	r4, #0
 8015c32:	f1bb 0f00 	cmp.w	fp, #0
 8015c36:	f340 8122 	ble.w	8015e7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 8015c3a:	1c7b      	adds	r3, r7, #1
 8015c3c:	9303      	str	r3, [sp, #12]
 8015c3e:	783b      	ldrb	r3, [r7, #0]
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	2bfe      	cmp	r3, #254	@ 0xfe
 8015c44:	d160      	bne.n	8015d08 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 8015c46:	7879      	ldrb	r1, [r7, #1]
 8015c48:	78ba      	ldrb	r2, [r7, #2]
 8015c4a:	78f8      	ldrb	r0, [r7, #3]
 8015c4c:	b2c9      	uxtb	r1, r1
 8015c4e:	f361 0507 	bfi	r5, r1, #0, #8
 8015c52:	b2d2      	uxtb	r2, r2
 8015c54:	1d3b      	adds	r3, r7, #4
 8015c56:	f362 250f 	bfi	r5, r2, #8, #8
 8015c5a:	b2c0      	uxtb	r0, r0
 8015c5c:	9303      	str	r3, [sp, #12]
 8015c5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015c62:	2303      	movs	r3, #3
 8015c64:	fb13 2200 	smlabb	r2, r3, r0, r2
 8015c68:	f360 4517 	bfi	r5, r0, #16, #8
 8015c6c:	2307      	movs	r3, #7
 8015c6e:	fb13 2101 	smlabb	r1, r3, r1, r2
 8015c72:	0e2e      	lsrs	r6, r5, #24
 8015c74:	230b      	movs	r3, #11
 8015c76:	fb13 1306 	smlabb	r3, r3, r6, r1
 8015c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015c7e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8015c82:	605d      	str	r5, [r3, #4]
 8015c84:	2601      	movs	r6, #1
 8015c86:	4637      	mov	r7, r6
 8015c88:	0e2b      	lsrs	r3, r5, #24
 8015c8a:	ebab 0b07 	sub.w	fp, fp, r7
 8015c8e:	eba6 0607 	sub.w	r6, r6, r7
 8015c92:	f040 80d3 	bne.w	8015e3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 8015c96:	b18c      	cbz	r4, 8015cbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8015c98:	4648      	mov	r0, r9
 8015c9a:	00a1      	lsls	r1, r4, #2
 8015c9c:	f7f6 fe04 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8015ca0:	9b05      	ldr	r3, [sp, #20]
 8015ca2:	4622      	mov	r2, r4
 8015ca4:	4649      	mov	r1, r9
 8015ca6:	4640      	mov	r0, r8
 8015ca8:	f7f6 feb2 	bl	800ca10 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8015cac:	4b2c      	ldr	r3, [pc, #176]	@ (8015d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 8015cae:	4a2d      	ldr	r2, [pc, #180]	@ (8015d64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 8015cb0:	4599      	cmp	r9, r3
 8015cb2:	bf08      	it	eq
 8015cb4:	4613      	moveq	r3, r2
 8015cb6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8015cba:	4699      	mov	r9, r3
 8015cbc:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 8015cc0:	2400      	movs	r4, #0
 8015cc2:	e0da      	b.n	8015e7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 8015cc4:	1ba6      	subs	r6, r4, r6
 8015cc6:	b2b4      	uxth	r4, r6
 8015cc8:	e70f      	b.n	8015aea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8015cca:	9b01      	ldr	r3, [sp, #4]
 8015ccc:	9a01      	ldr	r2, [sp, #4]
 8015cce:	42b3      	cmp	r3, r6
 8015cd0:	bfa8      	it	ge
 8015cd2:	4633      	movge	r3, r6
 8015cd4:	0e2c      	lsrs	r4, r5, #24
 8015cd6:	eba2 0b03 	sub.w	fp, r2, r3
 8015cda:	eba6 0603 	sub.w	r6, r6, r3
 8015cde:	d00b      	beq.n	8015cf8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8015ce0:	f1a9 0104 	sub.w	r1, r9, #4
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	2a00      	cmp	r2, #0
 8015ce8:	dc02      	bgt.n	8015cf0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 8015cea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015cee:	e7a0      	b.n	8015c32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8015cf0:	f841 5f04 	str.w	r5, [r1, #4]!
 8015cf4:	3a01      	subs	r2, #1
 8015cf6:	e7f6      	b.n	8015ce6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 8015cf8:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8015cfc:	e799      	b.n	8015c32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8015cfe:	4637      	mov	r7, r6
 8015d00:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015d04:	4626      	mov	r6, r4
 8015d06:	e794      	b.n	8015c32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8015d08:	2bff      	cmp	r3, #255	@ 0xff
 8015d0a:	d11d      	bne.n	8015d48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 8015d0c:	7878      	ldrb	r0, [r7, #1]
 8015d0e:	78ba      	ldrb	r2, [r7, #2]
 8015d10:	78fe      	ldrb	r6, [r7, #3]
 8015d12:	1d7b      	adds	r3, r7, #5
 8015d14:	b2c0      	uxtb	r0, r0
 8015d16:	9303      	str	r3, [sp, #12]
 8015d18:	793b      	ldrb	r3, [r7, #4]
 8015d1a:	f360 0507 	bfi	r5, r0, #0, #8
 8015d1e:	b2d2      	uxtb	r2, r2
 8015d20:	b2d9      	uxtb	r1, r3
 8015d22:	f362 250f 	bfi	r5, r2, #8, #8
 8015d26:	b2f6      	uxtb	r6, r6
 8015d28:	2303      	movs	r3, #3
 8015d2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015d2e:	fb13 2206 	smlabb	r2, r3, r6, r2
 8015d32:	2307      	movs	r3, #7
 8015d34:	fb13 2000 	smlabb	r0, r3, r0, r2
 8015d38:	f366 4517 	bfi	r5, r6, #16, #8
 8015d3c:	230b      	movs	r3, #11
 8015d3e:	f361 651f 	bfi	r5, r1, #24, #8
 8015d42:	fb13 0301 	smlabb	r3, r3, r1, r0
 8015d46:	e798      	b.n	8015c7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8015d48:	119e      	asrs	r6, r3, #6
 8015d4a:	d10d      	bne.n	8015d68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8015d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015d50:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8015d54:	685d      	ldr	r5, [r3, #4]
 8015d56:	e795      	b.n	8015c84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8015d58:	2002b02c 	.word	0x2002b02c
 8015d5c:	2002b026 	.word	0x2002b026
 8015d60:	20025900 	.word	0x20025900
 8015d64:	20025a00 	.word	0x20025a00
 8015d68:	2e01      	cmp	r6, #1
 8015d6a:	ea4f 6115 	mov.w	r1, r5, lsr #24
 8015d6e:	d12b      	bne.n	8015dc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 8015d70:	f003 0003 	and.w	r0, r3, #3
 8015d74:	3802      	subs	r0, #2
 8015d76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8015d7a:	b2c0      	uxtb	r0, r0
 8015d7c:	f003 020c 	and.w	r2, r3, #12
 8015d80:	f360 0507 	bfi	r5, r0, #0, #8
 8015d84:	3a08      	subs	r2, #8
 8015d86:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8015d8a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015d8e:	f362 250f 	bfi	r5, r2, #8, #8
 8015d92:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015d96:	1e9f      	subs	r7, r3, #2
 8015d98:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	2703      	movs	r7, #3
 8015da4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015da8:	fb17 2203 	smlabb	r2, r7, r3, r2
 8015dac:	2707      	movs	r7, #7
 8015dae:	f363 4517 	bfi	r5, r3, #16, #8
 8015db2:	fb17 2000 	smlabb	r0, r7, r0, r2
 8015db6:	230b      	movs	r3, #11
 8015db8:	fb13 0101 	smlabb	r1, r3, r1, r0
 8015dbc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8015dc0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8015dc4:	604d      	str	r5, [r1, #4]
 8015dc6:	e75e      	b.n	8015c86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8015dc8:	2e02      	cmp	r6, #2
 8015dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015dce:	d12f      	bne.n	8015e30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 8015dd0:	7878      	ldrb	r0, [r7, #1]
 8015dd2:	1cba      	adds	r2, r7, #2
 8015dd4:	b2c0      	uxtb	r0, r0
 8015dd6:	9203      	str	r2, [sp, #12]
 8015dd8:	f000 020f 	and.w	r2, r0, #15
 8015ddc:	3b20      	subs	r3, #32
 8015dde:	3a08      	subs	r2, #8
 8015de0:	441a      	add	r2, r3
 8015de2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8015de6:	b2d2      	uxtb	r2, r2
 8015de8:	f362 0507 	bfi	r5, r2, #0, #8
 8015dec:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8015df0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8015df4:	b2f6      	uxtb	r6, r6
 8015df6:	1100      	asrs	r0, r0, #4
 8015df8:	f366 250f 	bfi	r5, r6, #8, #8
 8015dfc:	3808      	subs	r0, #8
 8015dfe:	4403      	add	r3, r0
 8015e00:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8015e04:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	2003      	movs	r0, #3
 8015e0c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015e10:	fb10 6603 	smlabb	r6, r0, r3, r6
 8015e14:	2007      	movs	r0, #7
 8015e16:	f363 4517 	bfi	r5, r3, #16, #8
 8015e1a:	fb10 6202 	smlabb	r2, r0, r2, r6
 8015e1e:	230b      	movs	r3, #11
 8015e20:	fb13 2101 	smlabb	r1, r3, r1, r2
 8015e24:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8015e28:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8015e2c:	604d      	str	r5, [r1, #4]
 8015e2e:	e729      	b.n	8015c84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8015e30:	1c5e      	adds	r6, r3, #1
 8015e32:	45b3      	cmp	fp, r6
 8015e34:	465f      	mov	r7, fp
 8015e36:	bfa8      	it	ge
 8015e38:	4637      	movge	r7, r6
 8015e3a:	e725      	b.n	8015c88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 8015e3c:	193b      	adds	r3, r7, r4
 8015e3e:	2b40      	cmp	r3, #64	@ 0x40
 8015e40:	dd13      	ble.n	8015e6a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 8015e42:	4648      	mov	r0, r9
 8015e44:	00a1      	lsls	r1, r4, #2
 8015e46:	f7f6 fd2f 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8015e4a:	4649      	mov	r1, r9
 8015e4c:	9b05      	ldr	r3, [sp, #20]
 8015e4e:	4622      	mov	r2, r4
 8015e50:	4640      	mov	r0, r8
 8015e52:	f7f6 fddd 	bl	800ca10 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8015e56:	4b2d      	ldr	r3, [pc, #180]	@ (8015f0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 8015e58:	4599      	cmp	r9, r3
 8015e5a:	bf0c      	ite	eq
 8015e5c:	f8df 90b8 	ldreq.w	r9, [pc, #184]	@ 8015f18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8015e60:	f8df 90a8 	ldrne.w	r9, [pc, #168]	@ 8015f0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 8015e64:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8015e68:	2400      	movs	r4, #0
 8015e6a:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8015e6e:	463b      	mov	r3, r7
 8015e70:	3b01      	subs	r3, #1
 8015e72:	f842 5b04 	str.w	r5, [r2], #4
 8015e76:	d1fb      	bne.n	8015e70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8015e78:	443c      	add	r4, r7
 8015e7a:	9f03      	ldr	r7, [sp, #12]
 8015e7c:	e6d9      	b.n	8015c32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8015e7e:	b15c      	cbz	r4, 8015e98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8015e80:	00a1      	lsls	r1, r4, #2
 8015e82:	4648      	mov	r0, r9
 8015e84:	f7f6 fd10 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8015e88:	4640      	mov	r0, r8
 8015e8a:	9b05      	ldr	r3, [sp, #20]
 8015e8c:	4622      	mov	r2, r4
 8015e8e:	4649      	mov	r1, r9
 8015e90:	f7f6 fdbe 	bl	800ca10 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8015e94:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8015e98:	4b1d      	ldr	r3, [pc, #116]	@ (8015f10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 8015e9a:	9a01      	ldr	r2, [sp, #4]
 8015e9c:	881b      	ldrh	r3, [r3, #0]
 8015e9e:	1a9b      	subs	r3, r3, r2
 8015ea0:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8015ea4:	9b04      	ldr	r3, [sp, #16]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	9304      	str	r3, [sp, #16]
 8015eaa:	9a04      	ldr	r2, [sp, #16]
 8015eac:	9b00      	ldr	r3, [sp, #0]
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d11d      	bne.n	8015eee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 8015eb2:	9b02      	ldr	r3, [sp, #8]
 8015eb4:	9a02      	ldr	r2, [sp, #8]
 8015eb6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8015eba:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8015ebe:	9808      	ldr	r0, [sp, #32]
 8015ec0:	f103 0b01 	add.w	fp, r3, #1
 8015ec4:	9b06      	ldr	r3, [sp, #24]
 8015ec6:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8015eca:	9b07      	ldr	r3, [sp, #28]
 8015ecc:	2500      	movs	r5, #0
 8015ece:	ba3f      	rev	r7, r7
 8015ed0:	1ba4      	subs	r4, r4, r6
 8015ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015ed6:	4629      	mov	r1, r5
 8015ed8:	441f      	add	r7, r3
 8015eda:	b2a4      	uxth	r4, r4
 8015edc:	f00b fb81 	bl	80215e2 <memset>
 8015ee0:	f8cd b008 	str.w	fp, [sp, #8]
 8015ee4:	9504      	str	r5, [sp, #16]
 8015ee6:	f7f6 fcd8 	bl	800c89a <_ZN8touchgfx5paint8tearDownEv>
 8015eea:	463e      	mov	r6, r7
 8015eec:	e5cc      	b.n	8015a88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 8015eee:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8015ef2:	9b01      	ldr	r3, [sp, #4]
 8015ef4:	1ae4      	subs	r4, r4, r3
 8015ef6:	1ba4      	subs	r4, r4, r6
 8015ef8:	b2a4      	uxth	r4, r4
 8015efa:	e7f4      	b.n	8015ee6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 8015efc:	4b05      	ldr	r3, [pc, #20]	@ (8015f14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 8015efe:	6818      	ldr	r0, [r3, #0]
 8015f00:	6803      	ldr	r3, [r0, #0]
 8015f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f04:	4798      	blx	r3
 8015f06:	b00f      	add	sp, #60	@ 0x3c
 8015f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0c:	20025900 	.word	0x20025900
 8015f10:	2002b026 	.word	0x2002b026
 8015f14:	2002b02c 	.word	0x2002b02c
 8015f18:	20025a00 	.word	0x20025a00

08015f1c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8015f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f20:	b08f      	sub	sp, #60	@ 0x3c
 8015f22:	461c      	mov	r4, r3
 8015f24:	9205      	str	r2, [sp, #20]
 8015f26:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015f2a:	9100      	str	r1, [sp, #0]
 8015f2c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015f2e:	9201      	str	r2, [sp, #4]
 8015f30:	2a00      	cmp	r2, #0
 8015f32:	f000 8115 	beq.w	8016160 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 8015f36:	6820      	ldr	r0, [r4, #0]
 8015f38:	6861      	ldr	r1, [r4, #4]
 8015f3a:	aa0a      	add	r2, sp, #40	@ 0x28
 8015f3c:	c203      	stmia	r2!, {r0, r1}
 8015f3e:	6818      	ldr	r0, [r3, #0]
 8015f40:	6859      	ldr	r1, [r3, #4]
 8015f42:	aa0c      	add	r2, sp, #48	@ 0x30
 8015f44:	c203      	stmia	r2!, {r0, r1}
 8015f46:	a80a      	add	r0, sp, #40	@ 0x28
 8015f48:	f7f9 fe3a 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f4c:	4621      	mov	r1, r4
 8015f4e:	a80c      	add	r0, sp, #48	@ 0x30
 8015f50:	f7f9 fe5e 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f54:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8015f58:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8015f5c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8015f60:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8015f64:	bfde      	ittt	le
 8015f66:	b2b3      	uxthle	r3, r6
 8015f68:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8015f6c:	fb92 f3f3 	sdivle	r3, r2, r3
 8015f70:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8015f74:	bfc8      	it	gt
 8015f76:	2301      	movgt	r3, #1
 8015f78:	fb92 f1f3 	sdiv	r1, r2, r3
 8015f7c:	fa1f fc81 	uxth.w	ip, r1
 8015f80:	fb0c 2413 	mls	r4, ip, r3, r2
 8015f84:	fb14 f406 	smulbb	r4, r4, r6
 8015f88:	441d      	add	r5, r3
 8015f8a:	4404      	add	r4, r0
 8015f8c:	4661      	mov	r1, ip
 8015f8e:	3d01      	subs	r5, #1
 8015f90:	b2a4      	uxth	r4, r4
 8015f92:	fb95 f5f3 	sdiv	r5, r5, r3
 8015f96:	b131      	cbz	r1, 8015fa6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 8015f98:	9b05      	ldr	r3, [sp, #20]
 8015f9a:	9900      	ldr	r1, [sp, #0]
 8015f9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8015fa0:	ba1b      	rev	r3, r3
 8015fa2:	4419      	add	r1, r3
 8015fa4:	9100      	str	r1, [sp, #0]
 8015fa6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015faa:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8015fae:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8015fb2:	4418      	add	r0, r3
 8015fb4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8015fb8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8015fbc:	441a      	add	r2, r3
 8015fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8016168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8015fc0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	6803      	ldr	r3, [r0, #0]
 8015fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fca:	4798      	blx	r3
 8015fcc:	4967      	ldr	r1, [pc, #412]	@ (801616c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8015fce:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8015fd2:	880b      	ldrh	r3, [r1, #0]
 8015fd4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8015fd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8015fda:	fb03 c202 	mla	r2, r3, r2, ip
 8015fde:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8015fe2:	4373      	muls	r3, r6
 8015fe4:	b2ad      	uxth	r5, r5
 8015fe6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015fea:	00ad      	lsls	r5, r5, #2
 8015fec:	9306      	str	r3, [sp, #24]
 8015fee:	1d2b      	adds	r3, r5, #4
 8015ff0:	9307      	str	r3, [sp, #28]
 8015ff2:	9b01      	ldr	r3, [sp, #4]
 8015ff4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8015ff8:	9103      	str	r1, [sp, #12]
 8015ffa:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8015ffe:	2c00      	cmp	r4, #0
 8016000:	bf0c      	ite	eq
 8016002:	46c6      	moveq	lr, r8
 8016004:	f04f 0e00 	movne.w	lr, #0
 8016008:	2300      	movs	r3, #0
 801600a:	b292      	uxth	r2, r2
 801600c:	fa1f fe8e 	uxth.w	lr, lr
 8016010:	9302      	str	r3, [sp, #8]
 8016012:	9204      	str	r2, [sp, #16]
 8016014:	9a06      	ldr	r2, [sp, #24]
 8016016:	4282      	cmp	r2, r0
 8016018:	f240 809d 	bls.w	8016156 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 801601c:	b963      	cbnz	r3, 8016038 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801601e:	9b00      	ldr	r3, [sp, #0]
 8016020:	781a      	ldrb	r2, [r3, #0]
 8016022:	0993      	lsrs	r3, r2, #6
 8016024:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016028:	9202      	str	r2, [sp, #8]
 801602a:	1e5a      	subs	r2, r3, #1
 801602c:	2a02      	cmp	r2, #2
 801602e:	d815      	bhi.n	801605c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 8016030:	9a00      	ldr	r2, [sp, #0]
 8016032:	3201      	adds	r2, #1
 8016034:	9200      	str	r2, [sp, #0]
 8016036:	b29b      	uxth	r3, r3
 8016038:	b1b4      	cbz	r4, 8016068 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 801603a:	429c      	cmp	r4, r3
 801603c:	bf95      	itete	ls
 801603e:	1b1c      	subls	r4, r3, r4
 8016040:	1ae4      	subhi	r4, r4, r3
 8016042:	fa1f fa84 	uxthls.w	sl, r4
 8016046:	b2a4      	uxthhi	r4, r4
 8016048:	bf87      	ittee	hi
 801604a:	4671      	movhi	r1, lr
 801604c:	f04f 0a00 	movhi.w	sl, #0
 8016050:	fa1f f188 	uxthls.w	r1, r8
 8016054:	2400      	movls	r4, #0
 8016056:	4653      	mov	r3, sl
 8016058:	468e      	mov	lr, r1
 801605a:	e7db      	b.n	8016014 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 801605c:	9a00      	ldr	r2, [sp, #0]
 801605e:	9b00      	ldr	r3, [sp, #0]
 8016060:	3202      	adds	r2, #2
 8016062:	785b      	ldrb	r3, [r3, #1]
 8016064:	9200      	str	r2, [sp, #0]
 8016066:	e7e7      	b.n	8016038 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 8016068:	2202      	movs	r2, #2
 801606a:	4615      	mov	r5, r2
 801606c:	9907      	ldr	r1, [sp, #28]
 801606e:	9a02      	ldr	r2, [sp, #8]
 8016070:	fb15 1202 	smlabb	r2, r5, r2, r1
 8016074:	9905      	ldr	r1, [sp, #20]
 8016076:	4573      	cmp	r3, lr
 8016078:	f831 c002 	ldrh.w	ip, [r1, r2]
 801607c:	9a01      	ldr	r2, [sp, #4]
 801607e:	bf2b      	itete	cs
 8016080:	eba3 0a0e 	subcs.w	sl, r3, lr
 8016084:	ebae 0103 	subcc.w	r1, lr, r3
 8016088:	46f1      	movcs	r9, lr
 801608a:	4699      	movcc	r9, r3
 801608c:	bf27      	ittee	cs
 801608e:	fa1f fa8a 	uxthcs.w	sl, sl
 8016092:	4621      	movcs	r1, r4
 8016094:	b289      	uxthcc	r1, r1
 8016096:	46a2      	movcc	sl, r4
 8016098:	2aff      	cmp	r2, #255	@ 0xff
 801609a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801609e:	d105      	bne.n	80160ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80160a0:	4481      	add	r9, r0
 80160a2:	4581      	cmp	r9, r0
 80160a4:	d045      	beq.n	8016132 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 80160a6:	f820 cb02 	strh.w	ip, [r0], #2
 80160aa:	e7fa      	b.n	80160a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80160ac:	9d03      	ldr	r5, [sp, #12]
 80160ae:	ea4f 222c 	mov.w	r2, ip, asr #8
 80160b2:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80160b6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80160ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80160be:	436a      	muls	r2, r5
 80160c0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80160c4:	fa5f fc8c 	uxtb.w	ip, ip
 80160c8:	9208      	str	r2, [sp, #32]
 80160ca:	fb0b fb05 	mul.w	fp, fp, r5
 80160ce:	fb0c fc05 	mul.w	ip, ip, r5
 80160d2:	4481      	add	r9, r0
 80160d4:	4581      	cmp	r9, r0
 80160d6:	d02c      	beq.n	8016132 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 80160d8:	8802      	ldrh	r2, [r0, #0]
 80160da:	9d04      	ldr	r5, [sp, #16]
 80160dc:	9f04      	ldr	r7, [sp, #16]
 80160de:	1216      	asrs	r6, r2, #8
 80160e0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80160e4:	fb16 f605 	smulbb	r6, r6, r5
 80160e8:	9d08      	ldr	r5, [sp, #32]
 80160ea:	442e      	add	r6, r5
 80160ec:	10d5      	asrs	r5, r2, #3
 80160ee:	00d2      	lsls	r2, r2, #3
 80160f0:	b2d2      	uxtb	r2, r2
 80160f2:	fb12 f207 	smulbb	r2, r2, r7
 80160f6:	b2b6      	uxth	r6, r6
 80160f8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80160fc:	4462      	add	r2, ip
 80160fe:	fb15 f507 	smulbb	r5, r5, r7
 8016102:	b292      	uxth	r2, r2
 8016104:	1c77      	adds	r7, r6, #1
 8016106:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801610a:	1c57      	adds	r7, r2, #1
 801610c:	445d      	add	r5, fp
 801610e:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8016112:	b2ad      	uxth	r5, r5
 8016114:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016118:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801611c:	4316      	orrs	r6, r2
 801611e:	1c6a      	adds	r2, r5, #1
 8016120:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8016124:	096d      	lsrs	r5, r5, #5
 8016126:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801612a:	432e      	orrs	r6, r5
 801612c:	f820 6b02 	strh.w	r6, [r0], #2
 8016130:	e7d0      	b.n	80160d4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 8016132:	4573      	cmp	r3, lr
 8016134:	d38f      	bcc.n	8016056 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 8016136:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801613a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801613c:	fa1f f188 	uxth.w	r1, r8
 8016140:	1a64      	subs	r4, r4, r1
 8016142:	881b      	ldrh	r3, [r3, #0]
 8016144:	b2a4      	uxth	r4, r4
 8016146:	2c00      	cmp	r4, #0
 8016148:	eba3 0308 	sub.w	r3, r3, r8
 801614c:	bf18      	it	ne
 801614e:	2100      	movne	r1, #0
 8016150:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016154:	e77f      	b.n	8016056 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 8016156:	4b04      	ldr	r3, [pc, #16]	@ (8016168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8016158:	6818      	ldr	r0, [r3, #0]
 801615a:	6803      	ldr	r3, [r0, #0]
 801615c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801615e:	4798      	blx	r3
 8016160:	b00f      	add	sp, #60	@ 0x3c
 8016162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016166:	bf00      	nop
 8016168:	2002b02c 	.word	0x2002b02c
 801616c:	2002b026 	.word	0x2002b026

08016170 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8016170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016174:	b09f      	sub	sp, #124	@ 0x7c
 8016176:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801617a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801617e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016180:	461d      	mov	r5, r3
 8016182:	4604      	mov	r4, r0
 8016184:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016186:	2a00      	cmp	r2, #0
 8016188:	f000 81eb 	beq.w	8016562 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 801618c:	6828      	ldr	r0, [r5, #0]
 801618e:	6869      	ldr	r1, [r5, #4]
 8016190:	aa1a      	add	r2, sp, #104	@ 0x68
 8016192:	c203      	stmia	r2!, {r0, r1}
 8016194:	6818      	ldr	r0, [r3, #0]
 8016196:	6859      	ldr	r1, [r3, #4]
 8016198:	aa1c      	add	r2, sp, #112	@ 0x70
 801619a:	c203      	stmia	r2!, {r0, r1}
 801619c:	a81a      	add	r0, sp, #104	@ 0x68
 801619e:	f7f9 fd0f 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80161a2:	4629      	mov	r1, r5
 80161a4:	a81c      	add	r0, sp, #112	@ 0x70
 80161a6:	f7f9 fd33 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80161aa:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80161ae:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 80161b2:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80161b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80161ba:	bfd7      	itett	le
 80161bc:	b29a      	uxthle	r2, r3
 80161be:	2201      	movgt	r2, #1
 80161c0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80161c4:	fb91 f2f2 	sdivle	r2, r1, r2
 80161c8:	9202      	str	r2, [sp, #8]
 80161ca:	9802      	ldr	r0, [sp, #8]
 80161cc:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80161d0:	fb92 f0f0 	sdiv	r0, r2, r0
 80161d4:	b280      	uxth	r0, r0
 80161d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80161d8:	9902      	ldr	r1, [sp, #8]
 80161da:	9802      	ldr	r0, [sp, #8]
 80161dc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80161de:	4488      	add	r8, r1
 80161e0:	fb05 2510 	mls	r5, r5, r0, r2
 80161e4:	fb15 f503 	smulbb	r5, r5, r3
 80161e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80161ec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80161f0:	fb98 f8f1 	sdiv	r8, r8, r1
 80161f4:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80161f8:	440d      	add	r5, r1
 80161fa:	4419      	add	r1, r3
 80161fc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8016200:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8016204:	441a      	add	r2, r3
 8016206:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801620a:	9304      	str	r3, [sp, #16]
 801620c:	4b95      	ldr	r3, [pc, #596]	@ (8016464 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801620e:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8016212:	6818      	ldr	r0, [r3, #0]
 8016214:	6803      	ldr	r3, [r0, #0]
 8016216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016218:	4798      	blx	r3
 801621a:	4b93      	ldr	r3, [pc, #588]	@ (8016468 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801621c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8016220:	881a      	ldrh	r2, [r3, #0]
 8016222:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8016226:	9318      	str	r3, [sp, #96]	@ 0x60
 8016228:	fb02 7101 	mla	r1, r2, r1, r7
 801622c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8016230:	4356      	muls	r6, r2
 8016232:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8016236:	f108 0801 	add.w	r8, r8, #1
 801623a:	920a      	str	r2, [sp, #40]	@ 0x28
 801623c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801623e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8016242:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016244:	fa1f f888 	uxth.w	r8, r8
 8016248:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801624c:	f108 0204 	add.w	r2, r8, #4
 8016250:	9211      	str	r2, [sp, #68]	@ 0x44
 8016252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016254:	4b85      	ldr	r3, [pc, #532]	@ (801646c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8016256:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801625a:	b2ad      	uxth	r5, r5
 801625c:	9215      	str	r2, [sp, #84]	@ 0x54
 801625e:	2d00      	cmp	r5, #0
 8016260:	9a04      	ldr	r2, [sp, #16]
 8016262:	f04f 0100 	mov.w	r1, #0
 8016266:	bf18      	it	ne
 8016268:	2200      	movne	r2, #0
 801626a:	1b1b      	subs	r3, r3, r4
 801626c:	b292      	uxth	r2, r2
 801626e:	910d      	str	r1, [sp, #52]	@ 0x34
 8016270:	9319      	str	r3, [sp, #100]	@ 0x64
 8016272:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8016274:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016276:	fa11 f383 	uxtah	r3, r1, r3
 801627a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801627c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016280:	3304      	adds	r3, #4
 8016282:	9306      	str	r3, [sp, #24]
 8016284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016286:	4283      	cmp	r3, r0
 8016288:	f240 8166 	bls.w	8016558 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 801628c:	9902      	ldr	r1, [sp, #8]
 801628e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8016292:	fbb5 f3f3 	udiv	r3, r5, r3
 8016296:	1acb      	subs	r3, r1, r3
 8016298:	b29b      	uxth	r3, r3
 801629a:	9316      	str	r3, [sp, #88]	@ 0x58
 801629c:	9b06      	ldr	r3, [sp, #24]
 801629e:	9e06      	ldr	r6, [sp, #24]
 80162a0:	7859      	ldrb	r1, [r3, #1]
 80162a2:	789b      	ldrb	r3, [r3, #2]
 80162a4:	7836      	ldrb	r6, [r6, #0]
 80162a6:	9612      	str	r6, [sp, #72]	@ 0x48
 80162a8:	021b      	lsls	r3, r3, #8
 80162aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80162ae:	9906      	ldr	r1, [sp, #24]
 80162b0:	78c9      	ldrb	r1, [r1, #3]
 80162b2:	430b      	orrs	r3, r1
 80162b4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80162b6:	3601      	adds	r6, #1
 80162b8:	4419      	add	r1, r3
 80162ba:	9605      	str	r6, [sp, #20]
 80162bc:	1c4e      	adds	r6, r1, #1
 80162be:	9603      	str	r6, [sp, #12]
 80162c0:	7849      	ldrb	r1, [r1, #1]
 80162c2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80162c4:	0209      	lsls	r1, r1, #8
 80162c6:	5cf3      	ldrb	r3, [r6, r3]
 80162c8:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80162cc:	4319      	orrs	r1, r3
 80162ce:	b28b      	uxth	r3, r1
 80162d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80162d2:	2300      	movs	r3, #0
 80162d4:	f04f 0a01 	mov.w	sl, #1
 80162d8:	9307      	str	r3, [sp, #28]
 80162da:	469c      	mov	ip, r3
 80162dc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80162e0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80162e4:	46d3      	mov	fp, sl
 80162e6:	4657      	mov	r7, sl
 80162e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80162ea:	2d00      	cmp	r5, #0
 80162ec:	d07e      	beq.n	80163ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80162ee:	42af      	cmp	r7, r5
 80162f0:	d26e      	bcs.n	80163d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80162f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162f4:	9201      	str	r2, [sp, #4]
 80162f6:	1bed      	subs	r5, r5, r7
 80162f8:	4283      	cmp	r3, r0
 80162fa:	b2ad      	uxth	r5, r5
 80162fc:	d802      	bhi.n	8016304 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80162fe:	e073      	b.n	80163e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 8016300:	2b00      	cmp	r3, #0
 8016302:	d15f      	bne.n	80163c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 8016304:	9b03      	ldr	r3, [sp, #12]
 8016306:	785b      	ldrb	r3, [r3, #1]
 8016308:	f1cb 0207 	rsb	r2, fp, #7
 801630c:	4093      	lsls	r3, r2
 801630e:	005b      	lsls	r3, r3, #1
 8016310:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8016314:	9b03      	ldr	r3, [sp, #12]
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	fa43 f30b 	asr.w	r3, r3, fp
 801631c:	b2db      	uxtb	r3, r3
 801631e:	4313      	orrs	r3, r2
 8016320:	f10b 0201 	add.w	r2, fp, #1
 8016324:	fa5f fb82 	uxtb.w	fp, r2
 8016328:	9a03      	ldr	r2, [sp, #12]
 801632a:	f1bb 0f08 	cmp.w	fp, #8
 801632e:	bf15      	itete	ne
 8016330:	3201      	addne	r2, #1
 8016332:	3202      	addeq	r2, #2
 8016334:	9203      	strne	r2, [sp, #12]
 8016336:	9203      	streq	r2, [sp, #12]
 8016338:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801633a:	b29f      	uxth	r7, r3
 801633c:	bf08      	it	eq
 801633e:	f04f 0b00 	moveq.w	fp, #0
 8016342:	42ba      	cmp	r2, r7
 8016344:	d309      	bcc.n	801635a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 8016346:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801634a:	2301      	movs	r3, #1
 801634c:	9a05      	ldr	r2, [sp, #20]
 801634e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8016352:	d30e      	bcc.n	8016372 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8016354:	469a      	mov	sl, r3
 8016356:	2600      	movs	r6, #0
 8016358:	e035      	b.n	80163c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801635a:	9b05      	ldr	r3, [sp, #20]
 801635c:	429f      	cmp	r7, r3
 801635e:	d318      	bcc.n	8016392 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 8016360:	eb04 030a 	add.w	r3, r4, sl
 8016364:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8016368:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801636c:	f10a 0301 	add.w	r3, sl, #1
 8016370:	b29b      	uxth	r3, r3
 8016372:	9a05      	ldr	r2, [sp, #20]
 8016374:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8016378:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801637a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801637e:	7116      	strb	r6, [r2, #4]
 8016380:	f10a 0601 	add.w	r6, sl, #1
 8016384:	80d1      	strh	r1, [r2, #6]
 8016386:	7156      	strb	r6, [r2, #5]
 8016388:	9a05      	ldr	r2, [sp, #20]
 801638a:	3201      	adds	r2, #1
 801638c:	b292      	uxth	r2, r2
 801638e:	9205      	str	r2, [sp, #20]
 8016390:	e7e0      	b.n	8016354 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 8016392:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8016396:	463a      	mov	r2, r7
 8016398:	795b      	ldrb	r3, [r3, #5]
 801639a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801639e:	4426      	add	r6, r4
 80163a0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80163a2:	eb01 0c06 	add.w	ip, r1, r6
 80163a6:	f1bc 0f00 	cmp.w	ip, #0
 80163aa:	dd07      	ble.n	80163bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 80163ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80163b0:	f892 c004 	ldrb.w	ip, [r2, #4]
 80163b4:	f806 cd01 	strb.w	ip, [r6, #-1]!
 80163b8:	88d2      	ldrh	r2, [r2, #6]
 80163ba:	e7f1      	b.n	80163a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 80163bc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	e7c3      	b.n	801634c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 80163c4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80163c6:	970c      	str	r7, [sp, #48]	@ 0x30
 80163c8:	9a01      	ldr	r2, [sp, #4]
 80163ca:	46b4      	mov	ip, r6
 80163cc:	461f      	mov	r7, r3
 80163ce:	e78c      	b.n	80162ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 80163d0:	1b7b      	subs	r3, r7, r5
 80163d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80163d6:	9201      	str	r2, [sp, #4]
 80163d8:	eb0c 0605 	add.w	r6, ip, r5
 80163dc:	b29b      	uxth	r3, r3
 80163de:	b2b6      	uxth	r6, r6
 80163e0:	2500      	movs	r5, #0
 80163e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80163e4:	4282      	cmp	r2, r0
 80163e6:	d88b      	bhi.n	8016300 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80163e8:	9a01      	ldr	r2, [sp, #4]
 80163ea:	e74b      	b.n	8016284 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80163ec:	4297      	cmp	r7, r2
 80163ee:	d332      	bcc.n	8016456 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 80163f0:	1abb      	subs	r3, r7, r2
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	9208      	str	r2, [sp, #32]
 80163f6:	9501      	str	r5, [sp, #4]
 80163f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80163fa:	29ff      	cmp	r1, #255	@ 0xff
 80163fc:	9908      	ldr	r1, [sp, #32]
 80163fe:	eb0c 0601 	add.w	r6, ip, r1
 8016402:	d135      	bne.n	8016470 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 8016404:	f1a0 0e02 	sub.w	lr, r0, #2
 8016408:	b2b6      	uxth	r6, r6
 801640a:	45b4      	cmp	ip, r6
 801640c:	f040 808c 	bne.w	8016528 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 8016410:	9908      	ldr	r1, [sp, #32]
 8016412:	4297      	cmp	r7, r2
 8016414:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8016418:	d3e2      	bcc.n	80163e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801641a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801641c:	9904      	ldr	r1, [sp, #16]
 801641e:	8812      	ldrh	r2, [r2, #0]
 8016420:	1a52      	subs	r2, r2, r1
 8016422:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016426:	9a07      	ldr	r2, [sp, #28]
 8016428:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801642a:	3201      	adds	r2, #1
 801642c:	428a      	cmp	r2, r1
 801642e:	9207      	str	r2, [sp, #28]
 8016430:	f040 8087 	bne.w	8016542 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 8016434:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8016438:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801643c:	9b04      	ldr	r3, [sp, #16]
 801643e:	1bed      	subs	r5, r5, r7
 8016440:	b2ad      	uxth	r5, r5
 8016442:	2d00      	cmp	r5, #0
 8016444:	bf08      	it	eq
 8016446:	461a      	moveq	r2, r3
 8016448:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801644a:	bf18      	it	ne
 801644c:	2200      	movne	r2, #0
 801644e:	3301      	adds	r3, #1
 8016450:	930d      	str	r3, [sp, #52]	@ 0x34
 8016452:	b292      	uxth	r2, r2
 8016454:	e70d      	b.n	8016272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8016456:	1bd1      	subs	r1, r2, r7
 8016458:	b28b      	uxth	r3, r1
 801645a:	9301      	str	r3, [sp, #4]
 801645c:	9708      	str	r7, [sp, #32]
 801645e:	462b      	mov	r3, r5
 8016460:	e7ca      	b.n	80163f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 8016462:	bf00      	nop
 8016464:	2002b02c 	.word	0x2002b02c
 8016468:	2002b026 	.word	0x2002b026
 801646c:	fffff7fb 	.word	0xfffff7fb
 8016470:	b2b6      	uxth	r6, r6
 8016472:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016474:	45b4      	cmp	ip, r6
 8016476:	d0cb      	beq.n	8016410 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8016478:	f10c 0101 	add.w	r1, ip, #1
 801647c:	44a4      	add	ip, r4
 801647e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8016480:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 8016484:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016486:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801648a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801648c:	f8b1 c000 	ldrh.w	ip, [r1]
 8016490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016492:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8016496:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801649a:	fb1e fe01 	smulbb	lr, lr, r1
 801649e:	ea4f 2825 	mov.w	r8, r5, asr #8
 80164a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80164a4:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80164a8:	fb08 e801 	mla	r8, r8, r1, lr
 80164ac:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80164b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80164b2:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80164b6:	fb19 f901 	smulbb	r9, r9, r1
 80164ba:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80164be:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80164c0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80164c4:	fb0e 9e01 	mla	lr, lr, r1, r9
 80164c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80164cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80164ce:	fa5f fc8c 	uxtb.w	ip, ip
 80164d2:	fb1c fc01 	smulbb	ip, ip, r1
 80164d6:	00ed      	lsls	r5, r5, #3
 80164d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80164da:	b2ed      	uxtb	r5, r5
 80164dc:	fb05 c501 	mla	r5, r5, r1, ip
 80164e0:	fa1f f888 	uxth.w	r8, r8
 80164e4:	fa1f fe8e 	uxth.w	lr, lr
 80164e8:	b2ad      	uxth	r5, r5
 80164ea:	f108 0c01 	add.w	ip, r8, #1
 80164ee:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80164f2:	f10e 0901 	add.w	r9, lr, #1
 80164f6:	f105 0c01 	add.w	ip, r5, #1
 80164fa:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80164fe:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8016502:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8016506:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801650a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801650e:	ea4c 0808 	orr.w	r8, ip, r8
 8016512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016514:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 8016518:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801651c:	ea48 0809 	orr.w	r8, r8, r9
 8016520:	f821 8b02 	strh.w	r8, [r1], #2
 8016524:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016526:	e7a5      	b.n	8016474 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 8016528:	f10c 0801 	add.w	r8, ip, #1
 801652c:	44a4      	add	ip, r4
 801652e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016530:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 8016534:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8016538:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801653c:	fa1f fc88 	uxth.w	ip, r8
 8016540:	e763      	b.n	801640a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 8016542:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016546:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801654a:	1aad      	subs	r5, r5, r2
 801654c:	b2ad      	uxth	r5, r5
 801654e:	2d00      	cmp	r5, #0
 8016550:	bf18      	it	ne
 8016552:	2200      	movne	r2, #0
 8016554:	9201      	str	r2, [sp, #4]
 8016556:	e744      	b.n	80163e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8016558:	4b03      	ldr	r3, [pc, #12]	@ (8016568 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 801655a:	6818      	ldr	r0, [r3, #0]
 801655c:	6803      	ldr	r3, [r0, #0]
 801655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016560:	4798      	blx	r3
 8016562:	b01f      	add	sp, #124	@ 0x7c
 8016564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016568:	2002b02c 	.word	0x2002b02c

0801656c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 801656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016570:	b093      	sub	sp, #76	@ 0x4c
 8016572:	4616      	mov	r6, r2
 8016574:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8016578:	9003      	str	r0, [sp, #12]
 801657a:	460d      	mov	r5, r1
 801657c:	9201      	str	r2, [sp, #4]
 801657e:	2a00      	cmp	r2, #0
 8016580:	f000 8304 	beq.w	8016b8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 8016584:	6830      	ldr	r0, [r6, #0]
 8016586:	6871      	ldr	r1, [r6, #4]
 8016588:	ac0e      	add	r4, sp, #56	@ 0x38
 801658a:	c403      	stmia	r4!, {r0, r1}
 801658c:	6818      	ldr	r0, [r3, #0]
 801658e:	6859      	ldr	r1, [r3, #4]
 8016590:	ac10      	add	r4, sp, #64	@ 0x40
 8016592:	c403      	stmia	r4!, {r0, r1}
 8016594:	a80e      	add	r0, sp, #56	@ 0x38
 8016596:	f7f9 fb13 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801659a:	4631      	mov	r1, r6
 801659c:	a810      	add	r0, sp, #64	@ 0x40
 801659e:	f7f9 fb37 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80165a2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80165a6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80165aa:	bfd7      	itett	le
 80165ac:	b293      	uxthle	r3, r2
 80165ae:	2301      	movgt	r3, #1
 80165b0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80165b4:	fb91 f3f3 	sdivle	r3, r1, r3
 80165b8:	9304      	str	r3, [sp, #16]
 80165ba:	f105 0308 	add.w	r3, r5, #8
 80165be:	9904      	ldr	r1, [sp, #16]
 80165c0:	9308      	str	r3, [sp, #32]
 80165c2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80165c6:	440b      	add	r3, r1
 80165c8:	3b01      	subs	r3, #1
 80165ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80165ce:	9908      	ldr	r1, [sp, #32]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80165d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80165da:	9904      	ldr	r1, [sp, #16]
 80165dc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80165e0:	fb93 f0f1 	sdiv	r0, r3, r1
 80165e4:	b284      	uxth	r4, r0
 80165e6:	9405      	str	r4, [sp, #20]
 80165e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80165ec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80165f0:	fb05 3914 	mls	r9, r5, r4, r3
 80165f4:	fb19 f902 	smulbb	r9, r9, r2
 80165f8:	4489      	add	r9, r1
 80165fa:	fa1f f989 	uxth.w	r9, r9
 80165fe:	2d00      	cmp	r5, #0
 8016600:	d05d      	beq.n	80166be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 8016602:	1e6a      	subs	r2, r5, #1
 8016604:	9808      	ldr	r0, [sp, #32]
 8016606:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 801660a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801660c:	fa9a fa8a 	rev.w	sl, sl
 8016610:	4492      	add	sl, r2
 8016612:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8016616:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801661a:	4411      	add	r1, r2
 801661c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8016620:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8016624:	4413      	add	r3, r2
 8016626:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801662a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801662e:	9302      	str	r3, [sp, #8]
 8016630:	4bcb      	ldr	r3, [pc, #812]	@ (8016960 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 8016632:	6818      	ldr	r0, [r3, #0]
 8016634:	6803      	ldr	r3, [r0, #0]
 8016636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016638:	4798      	blx	r3
 801663a:	4bca      	ldr	r3, [pc, #808]	@ (8016964 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 801663c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8016640:	881b      	ldrh	r3, [r3, #0]
 8016642:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8016646:	fb03 2404 	mla	r4, r3, r4, r2
 801664a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801664e:	436b      	muls	r3, r5
 8016650:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016654:	930d      	str	r3, [sp, #52]	@ 0x34
 8016656:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801665a:	fb99 f3f3 	sdiv	r3, r9, r3
 801665e:	9306      	str	r3, [sp, #24]
 8016660:	9b01      	ldr	r3, [sp, #4]
 8016662:	43db      	mvns	r3, r3
 8016664:	b2db      	uxtb	r3, r3
 8016666:	930a      	str	r3, [sp, #40]	@ 0x28
 8016668:	9b03      	ldr	r3, [sp, #12]
 801666a:	3304      	adds	r3, #4
 801666c:	4618      	mov	r0, r3
 801666e:	2280      	movs	r2, #128	@ 0x80
 8016670:	2100      	movs	r1, #0
 8016672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016674:	f00a ffb5 	bl	80215e2 <memset>
 8016678:	4bbb      	ldr	r3, [pc, #748]	@ (8016968 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 801667a:	9300      	str	r3, [sp, #0]
 801667c:	2300      	movs	r3, #0
 801667e:	f04f 0600 	mov.w	r6, #0
 8016682:	9307      	str	r3, [sp, #28]
 8016684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016686:	42a3      	cmp	r3, r4
 8016688:	f240 827b 	bls.w	8016b82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 801668c:	f04f 0e07 	mov.w	lr, #7
 8016690:	f1b9 0f00 	cmp.w	r9, #0
 8016694:	f000 8159 	beq.w	801694a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8016698:	f89a 5000 	ldrb.w	r5, [sl]
 801669c:	b2ed      	uxtb	r5, r5
 801669e:	11aa      	asrs	r2, r5, #6
 80166a0:	f10a 0701 	add.w	r7, sl, #1
 80166a4:	d10e      	bne.n	80166c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 80166a6:	9b03      	ldr	r3, [sp, #12]
 80166a8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80166ac:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80166b0:	88ae      	ldrh	r6, [r5, #4]
 80166b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80166b6:	fa1f f989 	uxth.w	r9, r9
 80166ba:	46ba      	mov	sl, r7
 80166bc:	e7e8      	b.n	8016690 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 80166be:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80166c2:	e7a6      	b.n	8016612 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 80166c4:	2a01      	cmp	r2, #1
 80166c6:	d129      	bne.n	801671c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 80166c8:	f3c6 0304 	ubfx	r3, r6, #0, #5
 80166cc:	f005 0203 	and.w	r2, r5, #3
 80166d0:	3b02      	subs	r3, #2
 80166d2:	4413      	add	r3, r2
 80166d4:	f003 031f 	and.w	r3, r3, #31
 80166d8:	f3c5 0281 	ubfx	r2, r5, #2, #2
 80166dc:	f363 0604 	bfi	r6, r3, #0, #5
 80166e0:	3a02      	subs	r2, #2
 80166e2:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 80166e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80166ea:	f3c5 1501 	ubfx	r5, r5, #4, #2
 80166ee:	f362 164a 	bfi	r6, r2, #5, #6
 80166f2:	3d02      	subs	r5, #2
 80166f4:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 80166f8:	f005 051f 	and.w	r5, r5, #31
 80166fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016700:	2103      	movs	r1, #3
 8016702:	fb11 2205 	smlabb	r2, r1, r5, r2
 8016706:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801670a:	9a03      	ldr	r2, [sp, #12]
 801670c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016710:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016714:	f365 26cf 	bfi	r6, r5, #11, #5
 8016718:	809e      	strh	r6, [r3, #4]
 801671a:	e7ca      	b.n	80166b2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 801671c:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8016720:	2a02      	cmp	r2, #2
 8016722:	b2ab      	uxth	r3, r5
 8016724:	d136      	bne.n	8016794 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8016726:	2101      	movs	r1, #1
 8016728:	fb12 1205 	smlabb	r2, r2, r5, r1
 801672c:	4492      	add	sl, r2
 801672e:	463a      	mov	r2, r7
 8016730:	4552      	cmp	r2, sl
 8016732:	d01c      	beq.n	801676e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 8016734:	4694      	mov	ip, r2
 8016736:	f04f 0b03 	mov.w	fp, #3
 801673a:	f81c 1b02 	ldrb.w	r1, [ip], #2
 801673e:	7852      	ldrb	r2, [r2, #1]
 8016740:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8016744:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8016748:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 801674c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016750:	f001 021f 	and.w	r2, r1, #31
 8016754:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8016758:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801675c:	9a03      	ldr	r2, [sp, #12]
 801675e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8016762:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8016766:	460e      	mov	r6, r1
 8016768:	8081      	strh	r1, [r0, #4]
 801676a:	4662      	mov	r2, ip
 801676c:	e7e0      	b.n	8016730 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 801676e:	4599      	cmp	r9, r3
 8016770:	d20b      	bcs.n	801678a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 8016772:	eba5 0509 	sub.w	r5, r5, r9
 8016776:	2d00      	cmp	r5, #0
 8016778:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 801677c:	f300 8209 	bgt.w	8016b92 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8016780:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8016784:	2301      	movs	r3, #1
 8016786:	9307      	str	r3, [sp, #28]
 8016788:	e00c      	b.n	80167a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801678a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801678e:	eba9 0903 	sub.w	r9, r9, r3
 8016792:	e790      	b.n	80166b6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8016794:	4599      	cmp	r9, r3
 8016796:	d2fa      	bcs.n	801678e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8016798:	eba5 0509 	sub.w	r5, r5, r9
 801679c:	2d00      	cmp	r5, #0
 801679e:	dc1d      	bgt.n	80167dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 80167a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80167a4:	f04f 0b00 	mov.w	fp, #0
 80167a8:	f1b8 0f00 	cmp.w	r8, #0
 80167ac:	f340 81a1 	ble.w	8016af2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 80167b0:	783b      	ldrb	r3, [r7, #0]
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	119a      	asrs	r2, r3, #6
 80167b6:	f107 0a01 	add.w	sl, r7, #1
 80167ba:	f040 80d7 	bne.w	801696c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 80167be:	9a03      	ldr	r2, [sp, #12]
 80167c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80167c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80167c8:	889e      	ldrh	r6, [r3, #4]
 80167ca:	9b01      	ldr	r3, [sp, #4]
 80167cc:	2bff      	cmp	r3, #255	@ 0xff
 80167ce:	f040 81e9 	bne.w	8016ba4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 80167d2:	8026      	strh	r6, [r4, #0]
 80167d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80167d8:	3402      	adds	r4, #2
 80167da:	e0be      	b.n	801695a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 80167dc:	9b02      	ldr	r3, [sp, #8]
 80167de:	9a02      	ldr	r2, [sp, #8]
 80167e0:	42ab      	cmp	r3, r5
 80167e2:	bfa8      	it	ge
 80167e4:	462b      	movge	r3, r5
 80167e6:	eba2 0803 	sub.w	r8, r2, r3
 80167ea:	9a07      	ldr	r2, [sp, #28]
 80167ec:	1aed      	subs	r5, r5, r3
 80167ee:	2a00      	cmp	r2, #0
 80167f0:	d05a      	beq.n	80168a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 80167f2:	9a01      	ldr	r2, [sp, #4]
 80167f4:	2aff      	cmp	r2, #255	@ 0xff
 80167f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80167fa:	d049      	beq.n	8016890 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80167fc:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8016800:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8016804:	42a3      	cmp	r3, r4
 8016806:	f240 80a5 	bls.w	8016954 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801680a:	46bc      	mov	ip, r7
 801680c:	8820      	ldrh	r0, [r4, #0]
 801680e:	f81c 2b02 	ldrb.w	r2, [ip], #2
 8016812:	7879      	ldrb	r1, [r7, #1]
 8016814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016818:	b212      	sxth	r2, r2
 801681a:	b291      	uxth	r1, r2
 801681c:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8016820:	120f      	asrs	r7, r1, #8
 8016822:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8016826:	fb1a fa09 	smulbb	sl, sl, r9
 801682a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801682e:	fb07 a70e 	mla	r7, r7, lr, sl
 8016832:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8016836:	00c0      	lsls	r0, r0, #3
 8016838:	10c9      	asrs	r1, r1, #3
 801683a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801683e:	00d2      	lsls	r2, r2, #3
 8016840:	b2c0      	uxtb	r0, r0
 8016842:	fb1a fa09 	smulbb	sl, sl, r9
 8016846:	fb10 f009 	smulbb	r0, r0, r9
 801684a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801684e:	b2d2      	uxtb	r2, r2
 8016850:	b2bf      	uxth	r7, r7
 8016852:	fb01 a10e 	mla	r1, r1, lr, sl
 8016856:	fb02 020e 	mla	r2, r2, lr, r0
 801685a:	b289      	uxth	r1, r1
 801685c:	b292      	uxth	r2, r2
 801685e:	1c78      	adds	r0, r7, #1
 8016860:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8016864:	f101 0a01 	add.w	sl, r1, #1
 8016868:	1c50      	adds	r0, r2, #1
 801686a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801686e:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8016872:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8016876:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801687a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801687e:	4307      	orrs	r7, r0
 8016880:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016884:	ea47 070a 	orr.w	r7, r7, sl
 8016888:	f824 7b02 	strh.w	r7, [r4], #2
 801688c:	4667      	mov	r7, ip
 801688e:	e7b9      	b.n	8016804 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8016890:	42a3      	cmp	r3, r4
 8016892:	d95f      	bls.n	8016954 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8016894:	463a      	mov	r2, r7
 8016896:	f812 1b02 	ldrb.w	r1, [r2], #2
 801689a:	7878      	ldrb	r0, [r7, #1]
 801689c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80168a0:	f824 1b02 	strh.w	r1, [r4], #2
 80168a4:	4617      	mov	r7, r2
 80168a6:	e7f3      	b.n	8016890 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80168a8:	9901      	ldr	r1, [sp, #4]
 80168aa:	29ff      	cmp	r1, #255	@ 0xff
 80168ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80168b0:	b2b2      	uxth	r2, r6
 80168b2:	d044      	beq.n	801693e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 80168b4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80168b8:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80168bc:	ea4f 2922 	mov.w	r9, r2, asr #8
 80168c0:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80168c4:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 80168c8:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80168cc:	4608      	mov	r0, r1
 80168ce:	fb09 f901 	mul.w	r9, r9, r1
 80168d2:	fb0e fe01 	mul.w	lr, lr, r1
 80168d6:	00d1      	lsls	r1, r2, #3
 80168d8:	b2c9      	uxtb	r1, r1
 80168da:	4341      	muls	r1, r0
 80168dc:	429c      	cmp	r4, r3
 80168de:	f4bf af61 	bcs.w	80167a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80168e2:	8822      	ldrh	r2, [r4, #0]
 80168e4:	1210      	asrs	r0, r2, #8
 80168e6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80168ea:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80168ee:	00d2      	lsls	r2, r2, #3
 80168f0:	fb00 900a 	mla	r0, r0, sl, r9
 80168f4:	b2d2      	uxtb	r2, r2
 80168f6:	b280      	uxth	r0, r0
 80168f8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80168fc:	fb02 120a 	mla	r2, r2, sl, r1
 8016900:	b292      	uxth	r2, r2
 8016902:	f100 0b01 	add.w	fp, r0, #1
 8016906:	fb0c ec0a 	mla	ip, ip, sl, lr
 801690a:	fa1f fc8c 	uxth.w	ip, ip
 801690e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8016912:	1c50      	adds	r0, r2, #1
 8016914:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8016918:	f10c 0201 	add.w	r2, ip, #1
 801691c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8016920:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8016924:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8016928:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801692c:	ea40 0b0b 	orr.w	fp, r0, fp
 8016930:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8016934:	ea4b 0b0c 	orr.w	fp, fp, ip
 8016938:	f824 bb02 	strh.w	fp, [r4], #2
 801693c:	e7ce      	b.n	80168dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 801693e:	429c      	cmp	r4, r3
 8016940:	f4bf af30 	bcs.w	80167a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8016944:	f824 2b02 	strh.w	r2, [r4], #2
 8016948:	e7f9      	b.n	801693e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801694a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801694e:	4657      	mov	r7, sl
 8016950:	464d      	mov	r5, r9
 8016952:	e727      	b.n	80167a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8016954:	2300      	movs	r3, #0
 8016956:	e716      	b.n	8016786 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8016958:	44bb      	add	fp, r7
 801695a:	4657      	mov	r7, sl
 801695c:	e724      	b.n	80167a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801695e:	bf00      	nop
 8016960:	2002b02c 	.word	0x2002b02c
 8016964:	2002b026 	.word	0x2002b026
 8016968:	20025900 	.word	0x20025900
 801696c:	2a01      	cmp	r2, #1
 801696e:	d12a      	bne.n	80169c6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8016970:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8016974:	f003 0203 	and.w	r2, r3, #3
 8016978:	3902      	subs	r1, #2
 801697a:	4411      	add	r1, r2
 801697c:	f001 011f 	and.w	r1, r1, #31
 8016980:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8016984:	f361 0604 	bfi	r6, r1, #0, #5
 8016988:	3802      	subs	r0, #2
 801698a:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 801698e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8016992:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8016996:	f360 164a 	bfi	r6, r0, #5, #6
 801699a:	3b02      	subs	r3, #2
 801699c:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 80169a0:	f002 031f 	and.w	r3, r2, #31
 80169a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80169a8:	2203      	movs	r2, #3
 80169aa:	f363 26cf 	bfi	r6, r3, #11, #5
 80169ae:	fb12 0303 	smlabb	r3, r2, r3, r0
 80169b2:	2207      	movs	r2, #7
 80169b4:	fb12 3301 	smlabb	r3, r2, r1, r3
 80169b8:	9a03      	ldr	r2, [sp, #12]
 80169ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80169be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80169c2:	809e      	strh	r6, [r3, #4]
 80169c4:	e701      	b.n	80167ca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 80169c6:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80169ca:	45a8      	cmp	r8, r5
 80169cc:	4647      	mov	r7, r8
 80169ce:	bfa8      	it	ge
 80169d0:	462f      	movge	r7, r5
 80169d2:	2a02      	cmp	r2, #2
 80169d4:	d154      	bne.n	8016a80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 80169d6:	9b01      	ldr	r3, [sp, #4]
 80169d8:	2bff      	cmp	r3, #255	@ 0xff
 80169da:	d01a      	beq.n	8016a12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80169dc:	eb0b 0307 	add.w	r3, fp, r7
 80169e0:	2b40      	cmp	r3, #64	@ 0x40
 80169e2:	dd16      	ble.n	8016a12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80169e4:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80169e8:	4649      	mov	r1, r9
 80169ea:	9800      	ldr	r0, [sp, #0]
 80169ec:	f7f5 ff5c 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 80169f0:	465a      	mov	r2, fp
 80169f2:	9b01      	ldr	r3, [sp, #4]
 80169f4:	9900      	ldr	r1, [sp, #0]
 80169f6:	4620      	mov	r0, r4
 80169f8:	f7f5 ff62 	bl	800c8c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80169fc:	9b00      	ldr	r3, [sp, #0]
 80169fe:	461a      	mov	r2, r3
 8016a00:	4b6c      	ldr	r3, [pc, #432]	@ (8016bb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8016a02:	429a      	cmp	r2, r3
 8016a04:	bf0c      	ite	eq
 8016a06:	4b6c      	ldreq	r3, [pc, #432]	@ (8016bb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8016a08:	4b6a      	ldrne	r3, [pc, #424]	@ (8016bb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	444c      	add	r4, r9
 8016a0e:	f04f 0b00 	mov.w	fp, #0
 8016a12:	4652      	mov	r2, sl
 8016a14:	2100      	movs	r1, #0
 8016a16:	42a9      	cmp	r1, r5
 8016a18:	da2c      	bge.n	8016a74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8016a1a:	4694      	mov	ip, r2
 8016a1c:	f04f 0903 	mov.w	r9, #3
 8016a20:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8016a24:	7852      	ldrb	r2, [r2, #1]
 8016a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8016a2a:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8016a2e:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8016a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016a36:	f003 021f 	and.w	r2, r3, #31
 8016a3a:	fb19 000e 	smlabb	r0, r9, lr, r0
 8016a3e:	f04f 0e07 	mov.w	lr, #7
 8016a42:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8016a46:	9a03      	ldr	r2, [sp, #12]
 8016a48:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8016a4c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8016a50:	42b9      	cmp	r1, r7
 8016a52:	461e      	mov	r6, r3
 8016a54:	8083      	strh	r3, [r0, #4]
 8016a56:	da0a      	bge.n	8016a6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8016a58:	9a01      	ldr	r2, [sp, #4]
 8016a5a:	2aff      	cmp	r2, #255	@ 0xff
 8016a5c:	bf15      	itete	ne
 8016a5e:	9a00      	ldrne	r2, [sp, #0]
 8016a60:	8023      	strheq	r3, [r4, #0]
 8016a62:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8016a66:	3402      	addeq	r4, #2
 8016a68:	bf18      	it	ne
 8016a6a:	f10b 0b01 	addne.w	fp, fp, #1
 8016a6e:	3101      	adds	r1, #1
 8016a70:	4662      	mov	r2, ip
 8016a72:	e7d0      	b.n	8016a16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8016a74:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8016a78:	eba8 0807 	sub.w	r8, r8, r7
 8016a7c:	1bed      	subs	r5, r5, r7
 8016a7e:	e76c      	b.n	801695a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8016a80:	9b01      	ldr	r3, [sp, #4]
 8016a82:	2bff      	cmp	r3, #255	@ 0xff
 8016a84:	eba8 0807 	sub.w	r8, r8, r7
 8016a88:	eba5 0507 	sub.w	r5, r5, r7
 8016a8c:	fa1f f986 	uxth.w	r9, r6
 8016a90:	d027      	beq.n	8016ae2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8016a92:	eb0b 0307 	add.w	r3, fp, r7
 8016a96:	2b40      	cmp	r3, #64	@ 0x40
 8016a98:	dd18      	ble.n	8016acc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8016a9a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	9800      	ldr	r0, [sp, #0]
 8016aa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8016aa4:	f7f5 ff00 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8016aa8:	465a      	mov	r2, fp
 8016aaa:	9b01      	ldr	r3, [sp, #4]
 8016aac:	9900      	ldr	r1, [sp, #0]
 8016aae:	4620      	mov	r0, r4
 8016ab0:	f7f5 ff06 	bl	800c8c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8016ab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ab6:	441c      	add	r4, r3
 8016ab8:	9b00      	ldr	r3, [sp, #0]
 8016aba:	461a      	mov	r2, r3
 8016abc:	4b3d      	ldr	r3, [pc, #244]	@ (8016bb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	bf0c      	ite	eq
 8016ac2:	4b3d      	ldreq	r3, [pc, #244]	@ (8016bb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8016ac4:	4b3b      	ldrne	r3, [pc, #236]	@ (8016bb4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8016ac6:	9300      	str	r3, [sp, #0]
 8016ac8:	f04f 0b00 	mov.w	fp, #0
 8016acc:	9b00      	ldr	r3, [sp, #0]
 8016ace:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8016ad2:	463b      	mov	r3, r7
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f43f af3f 	beq.w	8016958 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8016ada:	f822 9b02 	strh.w	r9, [r2], #2
 8016ade:	3b01      	subs	r3, #1
 8016ae0:	e7f8      	b.n	8016ad4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8016ae2:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8016ae6:	42a7      	cmp	r7, r4
 8016ae8:	f67f af37 	bls.w	801695a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8016aec:	f824 9b02 	strh.w	r9, [r4], #2
 8016af0:	e7f9      	b.n	8016ae6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8016af2:	f1bb 0f00 	cmp.w	fp, #0
 8016af6:	d00c      	beq.n	8016b12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8016af8:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8016afc:	4641      	mov	r1, r8
 8016afe:	9800      	ldr	r0, [sp, #0]
 8016b00:	f7f5 fed2 	bl	800c8a8 <_ZN8touchgfx5paint9flushLineEPmi>
 8016b04:	4620      	mov	r0, r4
 8016b06:	9b01      	ldr	r3, [sp, #4]
 8016b08:	9900      	ldr	r1, [sp, #0]
 8016b0a:	465a      	mov	r2, fp
 8016b0c:	f7f5 fed8 	bl	800c8c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8016b10:	4444      	add	r4, r8
 8016b12:	4b2a      	ldr	r3, [pc, #168]	@ (8016bbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8016b14:	9a02      	ldr	r2, [sp, #8]
 8016b16:	881b      	ldrh	r3, [r3, #0]
 8016b18:	1a9b      	subs	r3, r3, r2
 8016b1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016b1e:	9b06      	ldr	r3, [sp, #24]
 8016b20:	3301      	adds	r3, #1
 8016b22:	9306      	str	r3, [sp, #24]
 8016b24:	9a06      	ldr	r2, [sp, #24]
 8016b26:	9b04      	ldr	r3, [sp, #16]
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	d120      	bne.n	8016b6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8016b2c:	9b05      	ldr	r3, [sp, #20]
 8016b2e:	9a05      	ldr	r2, [sp, #20]
 8016b30:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8016b34:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8016b38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016b3a:	f103 0801 	add.w	r8, r3, #1
 8016b3e:	9b08      	ldr	r3, [sp, #32]
 8016b40:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b46:	ba3f      	rev	r7, r7
 8016b48:	2280      	movs	r2, #128	@ 0x80
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	441f      	add	r7, r3
 8016b4e:	eba9 0905 	sub.w	r9, r9, r5
 8016b52:	f00a fd46 	bl	80215e2 <memset>
 8016b56:	2300      	movs	r3, #0
 8016b58:	fa1f f989 	uxth.w	r9, r9
 8016b5c:	f04f 0600 	mov.w	r6, #0
 8016b60:	f8cd 8014 	str.w	r8, [sp, #20]
 8016b64:	9306      	str	r3, [sp, #24]
 8016b66:	f7f5 fe98 	bl	800c89a <_ZN8touchgfx5paint8tearDownEv>
 8016b6a:	46ba      	mov	sl, r7
 8016b6c:	e58a      	b.n	8016684 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8016b6e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8016b72:	9b02      	ldr	r3, [sp, #8]
 8016b74:	eba9 0903 	sub.w	r9, r9, r3
 8016b78:	eba9 0505 	sub.w	r5, r9, r5
 8016b7c:	fa1f f985 	uxth.w	r9, r5
 8016b80:	e7f1      	b.n	8016b66 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8016b82:	4b0f      	ldr	r3, [pc, #60]	@ (8016bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8016b84:	6818      	ldr	r0, [r3, #0]
 8016b86:	6803      	ldr	r3, [r0, #0]
 8016b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b8a:	4798      	blx	r3
 8016b8c:	b013      	add	sp, #76	@ 0x4c
 8016b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b92:	9b02      	ldr	r3, [sp, #8]
 8016b94:	9a02      	ldr	r2, [sp, #8]
 8016b96:	42ab      	cmp	r3, r5
 8016b98:	bfa8      	it	ge
 8016b9a:	462b      	movge	r3, r5
 8016b9c:	eba2 0803 	sub.w	r8, r2, r3
 8016ba0:	1aed      	subs	r5, r5, r3
 8016ba2:	e626      	b.n	80167f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8016ba4:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ba8:	fa1f f986 	uxth.w	r9, r6
 8016bac:	2500      	movs	r5, #0
 8016bae:	2701      	movs	r7, #1
 8016bb0:	e76f      	b.n	8016a92 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8016bb2:	bf00      	nop
 8016bb4:	20025900 	.word	0x20025900
 8016bb8:	20025a00 	.word	0x20025a00
 8016bbc:	2002b026 	.word	0x2002b026
 8016bc0:	2002b02c 	.word	0x2002b02c

08016bc4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8016bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc8:	b08f      	sub	sp, #60	@ 0x3c
 8016bca:	461c      	mov	r4, r3
 8016bcc:	9203      	str	r2, [sp, #12]
 8016bce:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016bd2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016bd4:	9202      	str	r2, [sp, #8]
 8016bd6:	460f      	mov	r7, r1
 8016bd8:	2a00      	cmp	r2, #0
 8016bda:	f000 8128 	beq.w	8016e2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8016bde:	6820      	ldr	r0, [r4, #0]
 8016be0:	6861      	ldr	r1, [r4, #4]
 8016be2:	aa0a      	add	r2, sp, #40	@ 0x28
 8016be4:	c203      	stmia	r2!, {r0, r1}
 8016be6:	6818      	ldr	r0, [r3, #0]
 8016be8:	6859      	ldr	r1, [r3, #4]
 8016bea:	aa0c      	add	r2, sp, #48	@ 0x30
 8016bec:	c203      	stmia	r2!, {r0, r1}
 8016bee:	a80a      	add	r0, sp, #40	@ 0x28
 8016bf0:	f7f8 ffe6 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016bf4:	4621      	mov	r1, r4
 8016bf6:	a80c      	add	r0, sp, #48	@ 0x30
 8016bf8:	f7f9 f80a 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016bfc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8016c00:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8016c04:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8016c08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8016c0c:	bfde      	ittt	le
 8016c0e:	b2b3      	uxthle	r3, r6
 8016c10:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8016c14:	fb92 f3f3 	sdivle	r3, r2, r3
 8016c18:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8016c1c:	bfc8      	it	gt
 8016c1e:	2301      	movgt	r3, #1
 8016c20:	fb92 f1f3 	sdiv	r1, r2, r3
 8016c24:	fa1f fc81 	uxth.w	ip, r1
 8016c28:	fb0c 2413 	mls	r4, ip, r3, r2
 8016c2c:	fb14 f406 	smulbb	r4, r4, r6
 8016c30:	441d      	add	r5, r3
 8016c32:	4404      	add	r4, r0
 8016c34:	4661      	mov	r1, ip
 8016c36:	3d01      	subs	r5, #1
 8016c38:	b2a4      	uxth	r4, r4
 8016c3a:	fb95 f5f3 	sdiv	r5, r5, r3
 8016c3e:	b121      	cbz	r1, 8016c4a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 8016c40:	9b03      	ldr	r3, [sp, #12]
 8016c42:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016c46:	ba1b      	rev	r3, r3
 8016c48:	441f      	add	r7, r3
 8016c4a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8016c4e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8016c52:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8016c56:	4418      	add	r0, r3
 8016c58:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8016c5c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8016c60:	441a      	add	r2, r3
 8016c62:	4b74      	ldr	r3, [pc, #464]	@ (8016e34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8016c64:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016c68:	6818      	ldr	r0, [r3, #0]
 8016c6a:	6803      	ldr	r3, [r0, #0]
 8016c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c6e:	4798      	blx	r3
 8016c70:	4a71      	ldr	r2, [pc, #452]	@ (8016e38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8016c72:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8016c76:	8813      	ldrh	r3, [r2, #0]
 8016c78:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8016c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c7e:	fb03 c101 	mla	r1, r3, r1, ip
 8016c82:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8016c86:	4373      	muls	r3, r6
 8016c88:	b2ad      	uxth	r5, r5
 8016c8a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016c8e:	00ad      	lsls	r5, r5, #2
 8016c90:	2c00      	cmp	r4, #0
 8016c92:	9304      	str	r3, [sp, #16]
 8016c94:	f105 0304 	add.w	r3, r5, #4
 8016c98:	9305      	str	r3, [sp, #20]
 8016c9a:	bf0c      	ite	eq
 8016c9c:	46c8      	moveq	r8, r9
 8016c9e:	f04f 0800 	movne.w	r8, #0
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	fa1f f888 	uxth.w	r8, r8
 8016ca8:	9301      	str	r3, [sp, #4]
 8016caa:	9a04      	ldr	r2, [sp, #16]
 8016cac:	4282      	cmp	r2, r0
 8016cae:	f240 80b9 	bls.w	8016e24 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8016cb2:	b95b      	cbnz	r3, 8016ccc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 8016cb4:	783a      	ldrb	r2, [r7, #0]
 8016cb6:	0993      	lsrs	r3, r2, #6
 8016cb8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016cbc:	9201      	str	r2, [sp, #4]
 8016cbe:	1e5a      	subs	r2, r3, #1
 8016cc0:	2a02      	cmp	r2, #2
 8016cc2:	bf8d      	iteet	hi
 8016cc4:	787b      	ldrbhi	r3, [r7, #1]
 8016cc6:	3701      	addls	r7, #1
 8016cc8:	b29b      	uxthls	r3, r3
 8016cca:	3702      	addhi	r7, #2
 8016ccc:	b184      	cbz	r4, 8016cf0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8016cce:	429c      	cmp	r4, r3
 8016cd0:	bf95      	itete	ls
 8016cd2:	1b1c      	subls	r4, r3, r4
 8016cd4:	1ae4      	subhi	r4, r4, r3
 8016cd6:	fa1f fa84 	uxthls.w	sl, r4
 8016cda:	b2a4      	uxthhi	r4, r4
 8016cdc:	bf87      	ittee	hi
 8016cde:	46c4      	movhi	ip, r8
 8016ce0:	f04f 0a00 	movhi.w	sl, #0
 8016ce4:	fa1f fc89 	uxthls.w	ip, r9
 8016ce8:	2400      	movls	r4, #0
 8016cea:	4653      	mov	r3, sl
 8016cec:	46e0      	mov	r8, ip
 8016cee:	e7dc      	b.n	8016caa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 8016cf0:	2204      	movs	r2, #4
 8016cf2:	4615      	mov	r5, r2
 8016cf4:	9905      	ldr	r1, [sp, #20]
 8016cf6:	9a01      	ldr	r2, [sp, #4]
 8016cf8:	fb15 1202 	smlabb	r2, r5, r2, r1
 8016cfc:	9903      	ldr	r1, [sp, #12]
 8016cfe:	588a      	ldr	r2, [r1, r2]
 8016d00:	4543      	cmp	r3, r8
 8016d02:	bf27      	ittee	cs
 8016d04:	eba3 0a08 	subcs.w	sl, r3, r8
 8016d08:	46c6      	movcs	lr, r8
 8016d0a:	eba8 0c03 	subcc.w	ip, r8, r3
 8016d0e:	469e      	movcc	lr, r3
 8016d10:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8016d14:	bf27      	ittee	cs
 8016d16:	fa1f fa8a 	uxthcs.w	sl, sl
 8016d1a:	46a4      	movcs	ip, r4
 8016d1c:	fa1f fc8c 	uxthcc.w	ip, ip
 8016d20:	46a2      	movcc	sl, r4
 8016d22:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8016d26:	2900      	cmp	r1, #0
 8016d28:	d066      	beq.n	8016df8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 8016d2a:	29ff      	cmp	r1, #255	@ 0xff
 8016d2c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8016d30:	d114      	bne.n	8016d5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8016d32:	9d02      	ldr	r5, [sp, #8]
 8016d34:	2dff      	cmp	r5, #255	@ 0xff
 8016d36:	d111      	bne.n	8016d5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8016d38:	0951      	lsrs	r1, r2, #5
 8016d3a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8016d3e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8016d42:	f026 0607 	bic.w	r6, r6, #7
 8016d46:	430e      	orrs	r6, r1
 8016d48:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8016d4c:	4316      	orrs	r6, r2
 8016d4e:	b2b6      	uxth	r6, r6
 8016d50:	4486      	add	lr, r0
 8016d52:	4586      	cmp	lr, r0
 8016d54:	d051      	beq.n	8016dfa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8016d56:	f820 6b02 	strh.w	r6, [r0], #2
 8016d5a:	e7fa      	b.n	8016d52 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8016d5c:	9d02      	ldr	r5, [sp, #8]
 8016d5e:	4369      	muls	r1, r5
 8016d60:	1c4d      	adds	r5, r1, #1
 8016d62:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8016d66:	122d      	asrs	r5, r5, #8
 8016d68:	ea6f 0b05 	mvn.w	fp, r5
 8016d6c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8016d70:	b2ad      	uxth	r5, r5
 8016d72:	b2f6      	uxtb	r6, r6
 8016d74:	b2d2      	uxtb	r2, r2
 8016d76:	fb11 f105 	smulbb	r1, r1, r5
 8016d7a:	fb16 f605 	smulbb	r6, r6, r5
 8016d7e:	fb12 f205 	smulbb	r2, r2, r5
 8016d82:	b289      	uxth	r1, r1
 8016d84:	b2b6      	uxth	r6, r6
 8016d86:	b292      	uxth	r2, r2
 8016d88:	9106      	str	r1, [sp, #24]
 8016d8a:	9607      	str	r6, [sp, #28]
 8016d8c:	9208      	str	r2, [sp, #32]
 8016d8e:	4486      	add	lr, r0
 8016d90:	fa5f fb8b 	uxtb.w	fp, fp
 8016d94:	4586      	cmp	lr, r0
 8016d96:	d030      	beq.n	8016dfa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8016d98:	8802      	ldrh	r2, [r0, #0]
 8016d9a:	9906      	ldr	r1, [sp, #24]
 8016d9c:	1216      	asrs	r6, r2, #8
 8016d9e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8016da2:	10d5      	asrs	r5, r2, #3
 8016da4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8016da8:	fb06 160b 	mla	r6, r6, fp, r1
 8016dac:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8016db0:	9907      	ldr	r1, [sp, #28]
 8016db2:	00d2      	lsls	r2, r2, #3
 8016db4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8016db8:	fb05 150b 	mla	r5, r5, fp, r1
 8016dbc:	b2d2      	uxtb	r2, r2
 8016dbe:	9908      	ldr	r1, [sp, #32]
 8016dc0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016dc4:	b2b6      	uxth	r6, r6
 8016dc6:	fb02 120b 	mla	r2, r2, fp, r1
 8016dca:	b292      	uxth	r2, r2
 8016dcc:	1c71      	adds	r1, r6, #1
 8016dce:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8016dd2:	1c51      	adds	r1, r2, #1
 8016dd4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016dd8:	b2ad      	uxth	r5, r5
 8016dda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016dde:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8016de2:	4316      	orrs	r6, r2
 8016de4:	1c6a      	adds	r2, r5, #1
 8016de6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8016dea:	096d      	lsrs	r5, r5, #5
 8016dec:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8016df0:	432e      	orrs	r6, r5
 8016df2:	f820 6b02 	strh.w	r6, [r0], #2
 8016df6:	e7cd      	b.n	8016d94 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 8016df8:	4470      	add	r0, lr
 8016dfa:	4543      	cmp	r3, r8
 8016dfc:	f4ff af75 	bcc.w	8016cea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 8016e00:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8016e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e06:	fa1f fc89 	uxth.w	ip, r9
 8016e0a:	eba4 040c 	sub.w	r4, r4, ip
 8016e0e:	881b      	ldrh	r3, [r3, #0]
 8016e10:	b2a4      	uxth	r4, r4
 8016e12:	2c00      	cmp	r4, #0
 8016e14:	eba3 0309 	sub.w	r3, r3, r9
 8016e18:	bf18      	it	ne
 8016e1a:	f04f 0c00 	movne.w	ip, #0
 8016e1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016e22:	e762      	b.n	8016cea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 8016e24:	4b03      	ldr	r3, [pc, #12]	@ (8016e34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8016e26:	6818      	ldr	r0, [r3, #0]
 8016e28:	6803      	ldr	r3, [r0, #0]
 8016e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e2c:	4798      	blx	r3
 8016e2e:	b00f      	add	sp, #60	@ 0x3c
 8016e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e34:	2002b02c 	.word	0x2002b02c
 8016e38:	2002b026 	.word	0x2002b026

08016e3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8016e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e40:	b093      	sub	sp, #76	@ 0x4c
 8016e42:	461c      	mov	r4, r3
 8016e44:	9205      	str	r2, [sp, #20]
 8016e46:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8016e4a:	9101      	str	r1, [sp, #4]
 8016e4c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016e4e:	9202      	str	r2, [sp, #8]
 8016e50:	2a00      	cmp	r2, #0
 8016e52:	f000 812c 	beq.w	80170ae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8016e56:	6820      	ldr	r0, [r4, #0]
 8016e58:	6861      	ldr	r1, [r4, #4]
 8016e5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8016e5c:	c203      	stmia	r2!, {r0, r1}
 8016e5e:	6818      	ldr	r0, [r3, #0]
 8016e60:	6859      	ldr	r1, [r3, #4]
 8016e62:	aa10      	add	r2, sp, #64	@ 0x40
 8016e64:	c203      	stmia	r2!, {r0, r1}
 8016e66:	a80e      	add	r0, sp, #56	@ 0x38
 8016e68:	f7f8 feaa 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	a810      	add	r0, sp, #64	@ 0x40
 8016e70:	f7f8 fece 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016e74:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8016e78:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8016e7c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8016e80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8016e84:	bfde      	ittt	le
 8016e86:	b2b3      	uxthle	r3, r6
 8016e88:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8016e8c:	fb92 f3f3 	sdivle	r3, r2, r3
 8016e90:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8016e94:	bfc8      	it	gt
 8016e96:	2301      	movgt	r3, #1
 8016e98:	fb92 f1f3 	sdiv	r1, r2, r3
 8016e9c:	fa1f fc81 	uxth.w	ip, r1
 8016ea0:	fb0c 2413 	mls	r4, ip, r3, r2
 8016ea4:	fb14 f406 	smulbb	r4, r4, r6
 8016ea8:	441d      	add	r5, r3
 8016eaa:	4404      	add	r4, r0
 8016eac:	4661      	mov	r1, ip
 8016eae:	3d01      	subs	r5, #1
 8016eb0:	b2a4      	uxth	r4, r4
 8016eb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8016eb6:	b131      	cbz	r1, 8016ec6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 8016eb8:	9b05      	ldr	r3, [sp, #20]
 8016eba:	9901      	ldr	r1, [sp, #4]
 8016ebc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016ec0:	ba1b      	rev	r3, r3
 8016ec2:	4419      	add	r1, r3
 8016ec4:	9101      	str	r1, [sp, #4]
 8016ec6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016eca:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8016ece:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8016ed2:	4418      	add	r0, r3
 8016ed4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8016ed8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8016edc:	441a      	add	r2, r3
 8016ede:	4b75      	ldr	r3, [pc, #468]	@ (80170b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 8016ee0:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8016ee4:	6818      	ldr	r0, [r3, #0]
 8016ee6:	6803      	ldr	r3, [r0, #0]
 8016ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016eea:	4798      	blx	r3
 8016eec:	4972      	ldr	r1, [pc, #456]	@ (80170b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8016eee:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8016ef2:	880b      	ldrh	r3, [r1, #0]
 8016ef4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8016ef8:	910d      	str	r1, [sp, #52]	@ 0x34
 8016efa:	fb03 c202 	mla	r2, r3, r2, ip
 8016efe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016f02:	4373      	muls	r3, r6
 8016f04:	b2ad      	uxth	r5, r5
 8016f06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016f0a:	00ad      	lsls	r5, r5, #2
 8016f0c:	9308      	str	r3, [sp, #32]
 8016f0e:	1d2b      	adds	r3, r5, #4
 8016f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f12:	9b02      	ldr	r3, [sp, #8]
 8016f14:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016f18:	9106      	str	r1, [sp, #24]
 8016f1a:	43da      	mvns	r2, r3
 8016f1c:	2c00      	cmp	r4, #0
 8016f1e:	bf0c      	ite	eq
 8016f20:	46dc      	moveq	ip, fp
 8016f22:	f04f 0c00 	movne.w	ip, #0
 8016f26:	2300      	movs	r3, #0
 8016f28:	b2d2      	uxtb	r2, r2
 8016f2a:	fa1f fc8c 	uxth.w	ip, ip
 8016f2e:	9303      	str	r3, [sp, #12]
 8016f30:	9207      	str	r2, [sp, #28]
 8016f32:	9a08      	ldr	r2, [sp, #32]
 8016f34:	4282      	cmp	r2, r0
 8016f36:	f240 80b5 	bls.w	80170a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8016f3a:	b963      	cbnz	r3, 8016f56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8016f3c:	9b01      	ldr	r3, [sp, #4]
 8016f3e:	781a      	ldrb	r2, [r3, #0]
 8016f40:	0993      	lsrs	r3, r2, #6
 8016f42:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016f46:	9203      	str	r2, [sp, #12]
 8016f48:	1e5a      	subs	r2, r3, #1
 8016f4a:	2a02      	cmp	r2, #2
 8016f4c:	d815      	bhi.n	8016f7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 8016f4e:	9a01      	ldr	r2, [sp, #4]
 8016f50:	3201      	adds	r2, #1
 8016f52:	9201      	str	r2, [sp, #4]
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	b1b4      	cbz	r4, 8016f86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	bf95      	itete	ls
 8016f5c:	1b1c      	subls	r4, r3, r4
 8016f5e:	1ae4      	subhi	r4, r4, r3
 8016f60:	fa1f f884 	uxthls.w	r8, r4
 8016f64:	b2a4      	uxthhi	r4, r4
 8016f66:	bf87      	ittee	hi
 8016f68:	4666      	movhi	r6, ip
 8016f6a:	f04f 0800 	movhi.w	r8, #0
 8016f6e:	fa1f f68b 	uxthls.w	r6, fp
 8016f72:	2400      	movls	r4, #0
 8016f74:	4643      	mov	r3, r8
 8016f76:	46b4      	mov	ip, r6
 8016f78:	e7db      	b.n	8016f32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8016f7a:	9a01      	ldr	r2, [sp, #4]
 8016f7c:	9b01      	ldr	r3, [sp, #4]
 8016f7e:	3202      	adds	r2, #2
 8016f80:	785b      	ldrb	r3, [r3, #1]
 8016f82:	9201      	str	r2, [sp, #4]
 8016f84:	e7e7      	b.n	8016f56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8016f86:	2203      	movs	r2, #3
 8016f88:	4615      	mov	r5, r2
 8016f8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016f8c:	9a03      	ldr	r2, [sp, #12]
 8016f8e:	fb15 1202 	smlabb	r2, r5, r2, r1
 8016f92:	9905      	ldr	r1, [sp, #20]
 8016f94:	4563      	cmp	r3, ip
 8016f96:	eb01 0502 	add.w	r5, r1, r2
 8016f9a:	9902      	ldr	r1, [sp, #8]
 8016f9c:	bf29      	itett	cs
 8016f9e:	eba3 080c 	subcs.w	r8, r3, ip
 8016fa2:	ebac 0603 	subcc.w	r6, ip, r3
 8016fa6:	fa1f f888 	uxthcs.w	r8, r8
 8016faa:	46e1      	movcs	r9, ip
 8016fac:	bf2f      	iteee	cs
 8016fae:	4626      	movcs	r6, r4
 8016fb0:	b2b6      	uxthcc	r6, r6
 8016fb2:	4699      	movcc	r9, r3
 8016fb4:	46a0      	movcc	r8, r4
 8016fb6:	29ff      	cmp	r1, #255	@ 0xff
 8016fb8:	d04a      	beq.n	8017050 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 8016fba:	9f06      	ldr	r7, [sp, #24]
 8016fbc:	78a9      	ldrb	r1, [r5, #2]
 8016fbe:	9004      	str	r0, [sp, #16]
 8016fc0:	4379      	muls	r1, r7
 8016fc2:	910a      	str	r1, [sp, #40]	@ 0x28
 8016fc4:	7869      	ldrb	r1, [r5, #1]
 8016fc6:	4379      	muls	r1, r7
 8016fc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016fca:	9905      	ldr	r1, [sp, #20]
 8016fcc:	5c8a      	ldrb	r2, [r1, r2]
 8016fce:	437a      	muls	r2, r7
 8016fd0:	920c      	str	r2, [sp, #48]	@ 0x30
 8016fd2:	46ca      	mov	sl, r9
 8016fd4:	f1ba 0f00 	cmp.w	sl, #0
 8016fd8:	d03d      	beq.n	8017056 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8016fda:	9a04      	ldr	r2, [sp, #16]
 8016fdc:	9f07      	ldr	r7, [sp, #28]
 8016fde:	8812      	ldrh	r2, [r2, #0]
 8016fe0:	1215      	asrs	r5, r2, #8
 8016fe2:	46be      	mov	lr, r7
 8016fe4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8016fe8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8016fea:	10d1      	asrs	r1, r2, #3
 8016fec:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8016ff0:	fb05 750e 	mla	r5, r5, lr, r7
 8016ff4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8016ff8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016ffa:	00d2      	lsls	r2, r2, #3
 8016ffc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8017000:	fb01 710e 	mla	r1, r1, lr, r7
 8017004:	b2d2      	uxtb	r2, r2
 8017006:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017008:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801700c:	b2ad      	uxth	r5, r5
 801700e:	fb02 720e 	mla	r2, r2, lr, r7
 8017012:	b292      	uxth	r2, r2
 8017014:	f105 0e01 	add.w	lr, r5, #1
 8017018:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801701c:	f102 0e01 	add.w	lr, r2, #1
 8017020:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8017024:	b289      	uxth	r1, r1
 8017026:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801702a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801702e:	4315      	orrs	r5, r2
 8017030:	1c4a      	adds	r2, r1, #1
 8017032:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8017036:	0949      	lsrs	r1, r1, #5
 8017038:	9a04      	ldr	r2, [sp, #16]
 801703a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801703e:	430d      	orrs	r5, r1
 8017040:	f822 5b02 	strh.w	r5, [r2], #2
 8017044:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017048:	9204      	str	r2, [sp, #16]
 801704a:	fa1f fa8a 	uxth.w	sl, sl
 801704e:	e7c1      	b.n	8016fd4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8017050:	4649      	mov	r1, r9
 8017052:	4686      	mov	lr, r0
 8017054:	b999      	cbnz	r1, 801707e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 8017056:	4563      	cmp	r3, ip
 8017058:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801705c:	d38a      	bcc.n	8016f74 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801705e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8017062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017064:	fa1f f68b 	uxth.w	r6, fp
 8017068:	1ba4      	subs	r4, r4, r6
 801706a:	881b      	ldrh	r3, [r3, #0]
 801706c:	b2a4      	uxth	r4, r4
 801706e:	2c00      	cmp	r4, #0
 8017070:	eba3 030b 	sub.w	r3, r3, fp
 8017074:	bf18      	it	ne
 8017076:	2600      	movne	r6, #0
 8017078:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801707c:	e77a      	b.n	8016f74 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801707e:	78aa      	ldrb	r2, [r5, #2]
 8017080:	4f0e      	ldr	r7, [pc, #56]	@ (80170bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8017082:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8017086:	786a      	ldrb	r2, [r5, #1]
 8017088:	00d2      	lsls	r2, r2, #3
 801708a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801708e:	ea4a 0202 	orr.w	r2, sl, r2
 8017092:	f895 a000 	ldrb.w	sl, [r5]
 8017096:	3901      	subs	r1, #1
 8017098:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801709c:	f82e 2b02 	strh.w	r2, [lr], #2
 80170a0:	b289      	uxth	r1, r1
 80170a2:	e7d7      	b.n	8017054 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80170a4:	4b03      	ldr	r3, [pc, #12]	@ (80170b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 80170a6:	6818      	ldr	r0, [r3, #0]
 80170a8:	6803      	ldr	r3, [r0, #0]
 80170aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170ac:	4798      	blx	r3
 80170ae:	b013      	add	sp, #76	@ 0x4c
 80170b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b4:	2002b02c 	.word	0x2002b02c
 80170b8:	2002b026 	.word	0x2002b026
 80170bc:	fffff800 	.word	0xfffff800

080170c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80170c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c4:	b09d      	sub	sp, #116	@ 0x74
 80170c6:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 80170ca:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80170ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80170d0:	461c      	mov	r4, r3
 80170d2:	4683      	mov	fp, r0
 80170d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80170d6:	2a00      	cmp	r2, #0
 80170d8:	f000 81e0 	beq.w	801749c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 80170dc:	6820      	ldr	r0, [r4, #0]
 80170de:	6861      	ldr	r1, [r4, #4]
 80170e0:	aa18      	add	r2, sp, #96	@ 0x60
 80170e2:	c203      	stmia	r2!, {r0, r1}
 80170e4:	6818      	ldr	r0, [r3, #0]
 80170e6:	6859      	ldr	r1, [r3, #4]
 80170e8:	aa1a      	add	r2, sp, #104	@ 0x68
 80170ea:	c203      	stmia	r2!, {r0, r1}
 80170ec:	a818      	add	r0, sp, #96	@ 0x60
 80170ee:	f7f8 fd67 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80170f2:	4621      	mov	r1, r4
 80170f4:	a81a      	add	r0, sp, #104	@ 0x68
 80170f6:	f7f8 fd8b 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80170fa:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80170fe:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 8017102:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8017106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801710a:	bfd7      	itett	le
 801710c:	b29a      	uxthle	r2, r3
 801710e:	2201      	movgt	r2, #1
 8017110:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017114:	fb91 f2f2 	sdivle	r2, r1, r2
 8017118:	9202      	str	r2, [sp, #8]
 801711a:	9802      	ldr	r0, [sp, #8]
 801711c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8017120:	fb92 f0f0 	sdiv	r0, r2, r0
 8017124:	b280      	uxth	r0, r0
 8017126:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017128:	9902      	ldr	r1, [sp, #8]
 801712a:	9802      	ldr	r0, [sp, #8]
 801712c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801712e:	440c      	add	r4, r1
 8017130:	fb05 2510 	mls	r5, r5, r0, r2
 8017134:	fb15 f503 	smulbb	r5, r5, r3
 8017138:	3c01      	subs	r4, #1
 801713a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801713e:	fb94 f4f1 	sdiv	r4, r4, r1
 8017142:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8017146:	440d      	add	r5, r1
 8017148:	4419      	add	r1, r3
 801714a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801714e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8017152:	441a      	add	r2, r3
 8017154:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8017158:	9306      	str	r3, [sp, #24]
 801715a:	4bb3      	ldr	r3, [pc, #716]	@ (8017428 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801715c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8017160:	6818      	ldr	r0, [r3, #0]
 8017162:	6803      	ldr	r3, [r0, #0]
 8017164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017166:	4798      	blx	r3
 8017168:	4bb0      	ldr	r3, [pc, #704]	@ (801742c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801716a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801716e:	881a      	ldrh	r2, [r3, #0]
 8017170:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8017174:	9316      	str	r3, [sp, #88]	@ 0x58
 8017176:	fb02 7101 	mla	r1, r2, r1, r7
 801717a:	3401      	adds	r4, #1
 801717c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8017180:	b2a4      	uxth	r4, r4
 8017182:	4356      	muls	r6, r2
 8017184:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8017188:	00a4      	lsls	r4, r4, #2
 801718a:	920a      	str	r2, [sp, #40]	@ 0x28
 801718c:	1d22      	adds	r2, r4, #4
 801718e:	b2ad      	uxth	r5, r5
 8017190:	9213      	str	r2, [sp, #76]	@ 0x4c
 8017192:	4ba7      	ldr	r3, [pc, #668]	@ (8017430 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8017194:	9a06      	ldr	r2, [sp, #24]
 8017196:	2d00      	cmp	r5, #0
 8017198:	bf0c      	ite	eq
 801719a:	4611      	moveq	r1, r2
 801719c:	2100      	movne	r1, #0
 801719e:	2200      	movs	r2, #0
 80171a0:	eba3 030b 	sub.w	r3, r3, fp
 80171a4:	b289      	uxth	r1, r1
 80171a6:	920d      	str	r2, [sp, #52]	@ 0x34
 80171a8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80171aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80171ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80171ae:	fa12 f383 	uxtah	r3, r2, r3
 80171b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80171b8:	3304      	adds	r3, #4
 80171ba:	9308      	str	r3, [sp, #32]
 80171bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171be:	4543      	cmp	r3, r8
 80171c0:	f240 8167 	bls.w	8017492 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 80171c4:	9a02      	ldr	r2, [sp, #8]
 80171c6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80171ca:	fbb5 f3f3 	udiv	r3, r5, r3
 80171ce:	1ad3      	subs	r3, r2, r3
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80171d4:	9b08      	ldr	r3, [sp, #32]
 80171d6:	9808      	ldr	r0, [sp, #32]
 80171d8:	785a      	ldrb	r2, [r3, #1]
 80171da:	789b      	ldrb	r3, [r3, #2]
 80171dc:	7800      	ldrb	r0, [r0, #0]
 80171de:	9010      	str	r0, [sp, #64]	@ 0x40
 80171e0:	021b      	lsls	r3, r3, #8
 80171e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171e6:	9a08      	ldr	r2, [sp, #32]
 80171e8:	78d2      	ldrb	r2, [r2, #3]
 80171ea:	4313      	orrs	r3, r2
 80171ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171ee:	3001      	adds	r0, #1
 80171f0:	441a      	add	r2, r3
 80171f2:	9007      	str	r0, [sp, #28]
 80171f4:	1c50      	adds	r0, r2, #1
 80171f6:	9005      	str	r0, [sp, #20]
 80171f8:	7852      	ldrb	r2, [r2, #1]
 80171fa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80171fc:	0212      	lsls	r2, r2, #8
 80171fe:	5cc3      	ldrb	r3, [r0, r3]
 8017200:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8017204:	431a      	orrs	r2, r3
 8017206:	b293      	uxth	r3, r2
 8017208:	930b      	str	r3, [sp, #44]	@ 0x2c
 801720a:	2300      	movs	r3, #0
 801720c:	9309      	str	r3, [sp, #36]	@ 0x24
 801720e:	2301      	movs	r3, #1
 8017210:	9301      	str	r3, [sp, #4]
 8017212:	9304      	str	r3, [sp, #16]
 8017214:	2300      	movs	r3, #0
 8017216:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801721a:	9303      	str	r3, [sp, #12]
 801721c:	f04f 0e01 	mov.w	lr, #1
 8017220:	2d00      	cmp	r5, #0
 8017222:	d07c      	beq.n	801731e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8017224:	45ae      	cmp	lr, r5
 8017226:	d26b      	bcs.n	8017300 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8017228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801722a:	eba5 050e 	sub.w	r5, r5, lr
 801722e:	4543      	cmp	r3, r8
 8017230:	b2ad      	uxth	r5, r5
 8017232:	460c      	mov	r4, r1
 8017234:	d802      	bhi.n	801723c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8017236:	e070      	b.n	801731a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8017238:	2b00      	cmp	r3, #0
 801723a:	d15c      	bne.n	80172f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801723c:	9b05      	ldr	r3, [sp, #20]
 801723e:	9a04      	ldr	r2, [sp, #16]
 8017240:	785b      	ldrb	r3, [r3, #1]
 8017242:	9904      	ldr	r1, [sp, #16]
 8017244:	f1c2 0207 	rsb	r2, r2, #7
 8017248:	4093      	lsls	r3, r2
 801724a:	005b      	lsls	r3, r3, #1
 801724c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8017250:	9b05      	ldr	r3, [sp, #20]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	410b      	asrs	r3, r1
 8017256:	3101      	adds	r1, #1
 8017258:	b2c9      	uxtb	r1, r1
 801725a:	2908      	cmp	r1, #8
 801725c:	9104      	str	r1, [sp, #16]
 801725e:	9905      	ldr	r1, [sp, #20]
 8017260:	bf0a      	itet	eq
 8017262:	3102      	addeq	r1, #2
 8017264:	3101      	addne	r1, #1
 8017266:	9105      	streq	r1, [sp, #20]
 8017268:	b2db      	uxtb	r3, r3
 801726a:	bf0a      	itet	eq
 801726c:	2100      	moveq	r1, #0
 801726e:	9105      	strne	r1, [sp, #20]
 8017270:	9104      	streq	r1, [sp, #16]
 8017272:	4313      	orrs	r3, r2
 8017274:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017276:	b29a      	uxth	r2, r3
 8017278:	4291      	cmp	r1, r2
 801727a:	d30a      	bcc.n	8017292 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801727c:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8017280:	2301      	movs	r3, #1
 8017282:	9907      	ldr	r1, [sp, #28]
 8017284:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017288:	d30f      	bcc.n	80172aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801728a:	2100      	movs	r1, #0
 801728c:	9301      	str	r3, [sp, #4]
 801728e:	9103      	str	r1, [sp, #12]
 8017290:	e032      	b.n	80172f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8017292:	9b07      	ldr	r3, [sp, #28]
 8017294:	429a      	cmp	r2, r3
 8017296:	d318      	bcc.n	80172ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017298:	9b01      	ldr	r3, [sp, #4]
 801729a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801729e:	445b      	add	r3, fp
 80172a0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80172a4:	9b01      	ldr	r3, [sp, #4]
 80172a6:	3301      	adds	r3, #1
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	9907      	ldr	r1, [sp, #28]
 80172ac:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 80172b0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80172b4:	7108      	strb	r0, [r1, #4]
 80172b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80172b8:	80c8      	strh	r0, [r1, #6]
 80172ba:	9801      	ldr	r0, [sp, #4]
 80172bc:	3001      	adds	r0, #1
 80172be:	7148      	strb	r0, [r1, #5]
 80172c0:	9907      	ldr	r1, [sp, #28]
 80172c2:	3101      	adds	r1, #1
 80172c4:	b289      	uxth	r1, r1
 80172c6:	9107      	str	r1, [sp, #28]
 80172c8:	e7df      	b.n	801728a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80172ca:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80172ce:	4611      	mov	r1, r2
 80172d0:	795b      	ldrb	r3, [r3, #5]
 80172d2:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80172d6:	4458      	add	r0, fp
 80172d8:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80172da:	4406      	add	r6, r0
 80172dc:	2e00      	cmp	r6, #0
 80172de:	dd06      	ble.n	80172ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80172e0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80172e4:	790e      	ldrb	r6, [r1, #4]
 80172e6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80172ea:	88c9      	ldrh	r1, [r1, #6]
 80172ec:	e7f4      	b.n	80172d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80172ee:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	e7c5      	b.n	8017282 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80172f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80172f8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80172fa:	4621      	mov	r1, r4
 80172fc:	469e      	mov	lr, r3
 80172fe:	e78f      	b.n	8017220 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 8017300:	9a03      	ldr	r2, [sp, #12]
 8017302:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8017306:	442a      	add	r2, r5
 8017308:	ebae 0305 	sub.w	r3, lr, r5
 801730c:	b292      	uxth	r2, r2
 801730e:	b29b      	uxth	r3, r3
 8017310:	9203      	str	r2, [sp, #12]
 8017312:	2500      	movs	r5, #0
 8017314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017316:	4542      	cmp	r2, r8
 8017318:	d88e      	bhi.n	8017238 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801731a:	4621      	mov	r1, r4
 801731c:	e74e      	b.n	80171bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801731e:	458e      	cmp	lr, r1
 8017320:	bf29      	itett	cs
 8017322:	ebae 0301 	subcs.w	r3, lr, r1
 8017326:	eba1 040e 	subcc.w	r4, r1, lr
 801732a:	b29b      	uxthcs	r3, r3
 801732c:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801732e:	bf2f      	iteee	cs
 8017330:	462c      	movcs	r4, r5
 8017332:	b2a4      	uxthcc	r4, r4
 8017334:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8017338:	462b      	movcc	r3, r5
 801733a:	f04f 0900 	mov.w	r9, #0
 801733e:	9a03      	ldr	r2, [sp, #12]
 8017340:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017342:	444a      	add	r2, r9
 8017344:	4548      	cmp	r0, r9
 8017346:	b292      	uxth	r2, r2
 8017348:	d074      	beq.n	8017434 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 801734a:	445a      	add	r2, fp
 801734c:	2004      	movs	r0, #4
 801734e:	4605      	mov	r5, r0
 8017350:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8017354:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8017356:	fb15 0202 	smlabb	r2, r5, r2, r0
 801735a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801735c:	5880      	ldr	r0, [r0, r2]
 801735e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8017362:	d014      	beq.n	801738e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 8017364:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8017368:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801736c:	d112      	bne.n	8017394 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801736e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017370:	2aff      	cmp	r2, #255	@ 0xff
 8017372:	d10f      	bne.n	8017394 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 8017374:	0942      	lsrs	r2, r0, #5
 8017376:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801737a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801737e:	f025 0507 	bic.w	r5, r5, #7
 8017382:	4315      	orrs	r5, r2
 8017384:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8017388:	4305      	orrs	r5, r0
 801738a:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801738e:	f109 0901 	add.w	r9, r9, #1
 8017392:	e7d4      	b.n	801733e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 8017394:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8017398:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801739c:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 80173a0:	9215      	str	r2, [sp, #84]	@ 0x54
 80173a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173a4:	fb02 fa0a 	mul.w	sl, r2, sl
 80173a8:	f10a 0201 	add.w	r2, sl, #1
 80173ac:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80173b0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80173b4:	1212      	asrs	r2, r2, #8
 80173b6:	fa1f fa82 	uxth.w	sl, r2
 80173ba:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80173be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80173c2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80173c6:	43d2      	mvns	r2, r2
 80173c8:	b2d2      	uxtb	r2, r2
 80173ca:	fb16 f60a 	smulbb	r6, r6, sl
 80173ce:	fa5f fc8c 	uxtb.w	ip, ip
 80173d2:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80173d6:	b2c0      	uxtb	r0, r0
 80173d8:	fb07 6702 	mla	r7, r7, r2, r6
 80173dc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80173e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80173e2:	fb10 f00a 	smulbb	r0, r0, sl
 80173e6:	fb0c 0002 	mla	r0, ip, r2, r0
 80173ea:	b2ed      	uxtb	r5, r5
 80173ec:	b2bf      	uxth	r7, r7
 80173ee:	fb15 f50a 	smulbb	r5, r5, sl
 80173f2:	b280      	uxth	r0, r0
 80173f4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80173f8:	fb06 5602 	mla	r6, r6, r2, r5
 80173fc:	1c7a      	adds	r2, r7, #1
 80173fe:	1c45      	adds	r5, r0, #1
 8017400:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017404:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017408:	b2b6      	uxth	r6, r6
 801740a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801740e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8017412:	432f      	orrs	r7, r5
 8017414:	1c75      	adds	r5, r6, #1
 8017416:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801741a:	096d      	lsrs	r5, r5, #5
 801741c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8017420:	432f      	orrs	r7, r5
 8017422:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8017426:	e7b2      	b.n	801738e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 8017428:	2002b02c 	.word	0x2002b02c
 801742c:	2002b026 	.word	0x2002b026
 8017430:	fffff7fb 	.word	0xfffff7fb
 8017434:	9203      	str	r2, [sp, #12]
 8017436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017438:	458e      	cmp	lr, r1
 801743a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801743e:	f4ff af68 	bcc.w	8017312 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8017442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017444:	9906      	ldr	r1, [sp, #24]
 8017446:	8812      	ldrh	r2, [r2, #0]
 8017448:	1a52      	subs	r2, r2, r1
 801744a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801744e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017450:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017452:	3201      	adds	r2, #1
 8017454:	428a      	cmp	r2, r1
 8017456:	9209      	str	r2, [sp, #36]	@ 0x24
 8017458:	d111      	bne.n	801747e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 801745a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801745e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8017462:	9b06      	ldr	r3, [sp, #24]
 8017464:	eba5 0509 	sub.w	r5, r5, r9
 8017468:	b2ad      	uxth	r5, r5
 801746a:	2d00      	cmp	r5, #0
 801746c:	bf08      	it	eq
 801746e:	4619      	moveq	r1, r3
 8017470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017472:	bf18      	it	ne
 8017474:	2100      	movne	r1, #0
 8017476:	3301      	adds	r3, #1
 8017478:	930d      	str	r3, [sp, #52]	@ 0x34
 801747a:	b289      	uxth	r1, r1
 801747c:	e695      	b.n	80171aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801747e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8017482:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017486:	1b2d      	subs	r5, r5, r4
 8017488:	b2ad      	uxth	r5, r5
 801748a:	2d00      	cmp	r5, #0
 801748c:	bf18      	it	ne
 801748e:	2400      	movne	r4, #0
 8017490:	e740      	b.n	8017314 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8017492:	4b04      	ldr	r3, [pc, #16]	@ (80174a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 8017494:	6818      	ldr	r0, [r3, #0]
 8017496:	6803      	ldr	r3, [r0, #0]
 8017498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801749a:	4798      	blx	r3
 801749c:	b01d      	add	sp, #116	@ 0x74
 801749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174a2:	bf00      	nop
 80174a4:	2002b02c 	.word	0x2002b02c

080174a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80174a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ac:	b09f      	sub	sp, #124	@ 0x7c
 80174ae:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80174b2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80174b6:	920a      	str	r2, [sp, #40]	@ 0x28
 80174b8:	461d      	mov	r5, r3
 80174ba:	4604      	mov	r4, r0
 80174bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80174be:	2a00      	cmp	r2, #0
 80174c0:	f000 81fa 	beq.w	80178b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 80174c4:	6828      	ldr	r0, [r5, #0]
 80174c6:	6869      	ldr	r1, [r5, #4]
 80174c8:	aa1a      	add	r2, sp, #104	@ 0x68
 80174ca:	c203      	stmia	r2!, {r0, r1}
 80174cc:	6818      	ldr	r0, [r3, #0]
 80174ce:	6859      	ldr	r1, [r3, #4]
 80174d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80174d2:	c203      	stmia	r2!, {r0, r1}
 80174d4:	a81a      	add	r0, sp, #104	@ 0x68
 80174d6:	f7f8 fb73 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80174da:	4629      	mov	r1, r5
 80174dc:	a81c      	add	r0, sp, #112	@ 0x70
 80174de:	f7f8 fb97 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80174e2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80174e6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80174ea:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 80174ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80174f2:	bfd7      	itett	le
 80174f4:	b29a      	uxthle	r2, r3
 80174f6:	2201      	movgt	r2, #1
 80174f8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80174fc:	fb91 f2f2 	sdivle	r2, r1, r2
 8017500:	9201      	str	r2, [sp, #4]
 8017502:	9801      	ldr	r0, [sp, #4]
 8017504:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8017508:	fb92 f0f0 	sdiv	r0, r2, r0
 801750c:	b280      	uxth	r0, r0
 801750e:	9010      	str	r0, [sp, #64]	@ 0x40
 8017510:	9901      	ldr	r1, [sp, #4]
 8017512:	9801      	ldr	r0, [sp, #4]
 8017514:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017516:	440e      	add	r6, r1
 8017518:	fb05 2510 	mls	r5, r5, r0, r2
 801751c:	fb15 f503 	smulbb	r5, r5, r3
 8017520:	3e01      	subs	r6, #1
 8017522:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8017526:	fb96 f6f1 	sdiv	r6, r6, r1
 801752a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801752e:	440d      	add	r5, r1
 8017530:	4419      	add	r1, r3
 8017532:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8017536:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801753a:	441a      	add	r2, r3
 801753c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8017540:	9304      	str	r3, [sp, #16]
 8017542:	4b96      	ldr	r3, [pc, #600]	@ (801779c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8017544:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8017548:	6818      	ldr	r0, [r3, #0]
 801754a:	6803      	ldr	r3, [r0, #0]
 801754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801754e:	4798      	blx	r3
 8017550:	4b93      	ldr	r3, [pc, #588]	@ (80177a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8017552:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8017556:	881a      	ldrh	r2, [r3, #0]
 8017558:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801755c:	9318      	str	r3, [sp, #96]	@ 0x60
 801755e:	fb02 c101 	mla	r1, r2, r1, ip
 8017562:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8017566:	4357      	muls	r7, r2
 8017568:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801756c:	3601      	adds	r6, #1
 801756e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017570:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017572:	4b8c      	ldr	r3, [pc, #560]	@ (80177a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8017574:	b2b6      	uxth	r6, r6
 8017576:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801757a:	1d32      	adds	r2, r6, #4
 801757c:	9206      	str	r2, [sp, #24]
 801757e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017580:	43d2      	mvns	r2, r2
 8017582:	b2d2      	uxtb	r2, r2
 8017584:	b2ad      	uxth	r5, r5
 8017586:	9215      	str	r2, [sp, #84]	@ 0x54
 8017588:	9a04      	ldr	r2, [sp, #16]
 801758a:	2d00      	cmp	r5, #0
 801758c:	bf0c      	ite	eq
 801758e:	4611      	moveq	r1, r2
 8017590:	2100      	movne	r1, #0
 8017592:	2200      	movs	r2, #0
 8017594:	1b1b      	subs	r3, r3, r4
 8017596:	b289      	uxth	r1, r1
 8017598:	920d      	str	r2, [sp, #52]	@ 0x34
 801759a:	9319      	str	r3, [sp, #100]	@ 0x64
 801759c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801759e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175a0:	fa12 f383 	uxtah	r3, r2, r3
 80175a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80175a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80175aa:	3304      	adds	r3, #4
 80175ac:	9307      	str	r3, [sp, #28]
 80175ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80175b0:	455b      	cmp	r3, fp
 80175b2:	f240 817c 	bls.w	80178ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 80175b6:	9a01      	ldr	r2, [sp, #4]
 80175b8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80175bc:	fbb5 f3f3 	udiv	r3, r5, r3
 80175c0:	1ad3      	subs	r3, r2, r3
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80175c6:	9b07      	ldr	r3, [sp, #28]
 80175c8:	9807      	ldr	r0, [sp, #28]
 80175ca:	785a      	ldrb	r2, [r3, #1]
 80175cc:	789b      	ldrb	r3, [r3, #2]
 80175ce:	7800      	ldrb	r0, [r0, #0]
 80175d0:	9011      	str	r0, [sp, #68]	@ 0x44
 80175d2:	021b      	lsls	r3, r3, #8
 80175d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175d8:	9a07      	ldr	r2, [sp, #28]
 80175da:	78d2      	ldrb	r2, [r2, #3]
 80175dc:	4313      	orrs	r3, r2
 80175de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80175e0:	3001      	adds	r0, #1
 80175e2:	441a      	add	r2, r3
 80175e4:	9005      	str	r0, [sp, #20]
 80175e6:	1c50      	adds	r0, r2, #1
 80175e8:	9003      	str	r0, [sp, #12]
 80175ea:	7852      	ldrb	r2, [r2, #1]
 80175ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80175ee:	0212      	lsls	r2, r2, #8
 80175f0:	5cc3      	ldrb	r3, [r0, r3]
 80175f2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80175f6:	431a      	orrs	r2, r3
 80175f8:	b293      	uxth	r3, r2
 80175fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80175fc:	2300      	movs	r3, #0
 80175fe:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8017602:	9308      	str	r3, [sp, #32]
 8017604:	461a      	mov	r2, r3
 8017606:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801760a:	930e      	str	r3, [sp, #56]	@ 0x38
 801760c:	f04f 0801 	mov.w	r8, #1
 8017610:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8017614:	f8cd 8008 	str.w	r8, [sp, #8]
 8017618:	46c4      	mov	ip, r8
 801761a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801761c:	2d00      	cmp	r5, #0
 801761e:	d07c      	beq.n	801771a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8017620:	45ac      	cmp	ip, r5
 8017622:	d26c      	bcs.n	80176fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8017624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017626:	eba5 050c 	sub.w	r5, r5, ip
 801762a:	455b      	cmp	r3, fp
 801762c:	b2ad      	uxth	r5, r5
 801762e:	4608      	mov	r0, r1
 8017630:	d802      	bhi.n	8017638 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8017632:	e070      	b.n	8017716 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8017634:	2b00      	cmp	r3, #0
 8017636:	d15c      	bne.n	80176f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8017638:	9b03      	ldr	r3, [sp, #12]
 801763a:	9a02      	ldr	r2, [sp, #8]
 801763c:	785b      	ldrb	r3, [r3, #1]
 801763e:	9902      	ldr	r1, [sp, #8]
 8017640:	f1c2 0207 	rsb	r2, r2, #7
 8017644:	4093      	lsls	r3, r2
 8017646:	005b      	lsls	r3, r3, #1
 8017648:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	410b      	asrs	r3, r1
 8017652:	3101      	adds	r1, #1
 8017654:	b2c9      	uxtb	r1, r1
 8017656:	2908      	cmp	r1, #8
 8017658:	9102      	str	r1, [sp, #8]
 801765a:	9903      	ldr	r1, [sp, #12]
 801765c:	bf0a      	itet	eq
 801765e:	3102      	addeq	r1, #2
 8017660:	3101      	addne	r1, #1
 8017662:	9103      	streq	r1, [sp, #12]
 8017664:	b2db      	uxtb	r3, r3
 8017666:	bf0a      	itet	eq
 8017668:	2100      	moveq	r1, #0
 801766a:	9103      	strne	r1, [sp, #12]
 801766c:	9102      	streq	r1, [sp, #8]
 801766e:	4313      	orrs	r3, r2
 8017670:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017672:	b29a      	uxth	r2, r3
 8017674:	4291      	cmp	r1, r2
 8017676:	d30a      	bcc.n	801768e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 8017678:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801767c:	2301      	movs	r3, #1
 801767e:	9905      	ldr	r1, [sp, #20]
 8017680:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017684:	d30f      	bcc.n	80176a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 8017686:	2100      	movs	r1, #0
 8017688:	4698      	mov	r8, r3
 801768a:	9100      	str	r1, [sp, #0]
 801768c:	e032      	b.n	80176f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 801768e:	9b05      	ldr	r3, [sp, #20]
 8017690:	429a      	cmp	r2, r3
 8017692:	d318      	bcc.n	80176c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 8017694:	eb04 0308 	add.w	r3, r4, r8
 8017698:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801769c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80176a0:	f108 0301 	add.w	r3, r8, #1
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	9905      	ldr	r1, [sp, #20]
 80176a8:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80176ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80176b0:	710e      	strb	r6, [r1, #4]
 80176b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80176b4:	80ce      	strh	r6, [r1, #6]
 80176b6:	f108 0601 	add.w	r6, r8, #1
 80176ba:	714e      	strb	r6, [r1, #5]
 80176bc:	9905      	ldr	r1, [sp, #20]
 80176be:	3101      	adds	r1, #1
 80176c0:	b289      	uxth	r1, r1
 80176c2:	9105      	str	r1, [sp, #20]
 80176c4:	e7df      	b.n	8017686 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 80176c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176ca:	4611      	mov	r1, r2
 80176cc:	795b      	ldrb	r3, [r3, #5]
 80176ce:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80176d2:	4426      	add	r6, r4
 80176d4:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80176d6:	4437      	add	r7, r6
 80176d8:	2f00      	cmp	r7, #0
 80176da:	dd06      	ble.n	80176ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 80176dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80176e0:	790f      	ldrb	r7, [r1, #4]
 80176e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80176e6:	88c9      	ldrh	r1, [r1, #6]
 80176e8:	e7f4      	b.n	80176d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 80176ea:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	e7c5      	b.n	801767e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80176f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80176f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80176f6:	4601      	mov	r1, r0
 80176f8:	9a00      	ldr	r2, [sp, #0]
 80176fa:	469c      	mov	ip, r3
 80176fc:	e78e      	b.n	801761c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 80176fe:	1957      	adds	r7, r2, r5
 8017700:	ebac 0305 	sub.w	r3, ip, r5
 8017704:	b2ba      	uxth	r2, r7
 8017706:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801770a:	9200      	str	r2, [sp, #0]
 801770c:	b29b      	uxth	r3, r3
 801770e:	2500      	movs	r5, #0
 8017710:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017712:	455a      	cmp	r2, fp
 8017714:	d88e      	bhi.n	8017634 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 8017716:	4601      	mov	r1, r0
 8017718:	e749      	b.n	80175ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 801771a:	458c      	cmp	ip, r1
 801771c:	bf2c      	ite	cs
 801771e:	4628      	movcs	r0, r5
 8017720:	462b      	movcc	r3, r5
 8017722:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017724:	bf27      	ittee	cs
 8017726:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8017728:	ebac 0301 	subcs.w	r3, ip, r1
 801772c:	eba1 000c 	subcc.w	r0, r1, ip
 8017730:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8017734:	bf2c      	ite	cs
 8017736:	b29b      	uxthcs	r3, r3
 8017738:	b280      	uxthcc	r0, r0
 801773a:	2dff      	cmp	r5, #255	@ 0xff
 801773c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801773e:	eb02 0705 	add.w	r7, r2, r5
 8017742:	b2bd      	uxth	r5, r7
 8017744:	9500      	str	r5, [sp, #0]
 8017746:	d12f      	bne.n	80177a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 8017748:	465e      	mov	r6, fp
 801774a:	9d00      	ldr	r5, [sp, #0]
 801774c:	42aa      	cmp	r2, r5
 801774e:	f040 8084 	bne.w	801785a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 8017752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017754:	458c      	cmp	ip, r1
 8017756:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801775a:	d3d8      	bcc.n	801770e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 801775c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801775e:	9904      	ldr	r1, [sp, #16]
 8017760:	8812      	ldrh	r2, [r2, #0]
 8017762:	1a52      	subs	r2, r2, r1
 8017764:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8017768:	9a08      	ldr	r2, [sp, #32]
 801776a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801776c:	3201      	adds	r2, #1
 801776e:	428a      	cmp	r2, r1
 8017770:	9208      	str	r2, [sp, #32]
 8017772:	f040 8092 	bne.w	801789a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 8017776:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801777a:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801777e:	9b04      	ldr	r3, [sp, #16]
 8017780:	eba5 050c 	sub.w	r5, r5, ip
 8017784:	b2ad      	uxth	r5, r5
 8017786:	2d00      	cmp	r5, #0
 8017788:	bf08      	it	eq
 801778a:	4619      	moveq	r1, r3
 801778c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801778e:	bf18      	it	ne
 8017790:	2100      	movne	r1, #0
 8017792:	3301      	adds	r3, #1
 8017794:	930d      	str	r3, [sp, #52]	@ 0x34
 8017796:	b289      	uxth	r1, r1
 8017798:	e700      	b.n	801759c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801779a:	bf00      	nop
 801779c:	2002b02c 	.word	0x2002b02c
 80177a0:	2002b026 	.word	0x2002b026
 80177a4:	fffff7fb 	.word	0xfffff7fb
 80177a8:	46d9      	mov	r9, fp
 80177aa:	9d00      	ldr	r5, [sp, #0]
 80177ac:	42aa      	cmp	r2, r5
 80177ae:	d0d0      	beq.n	8017752 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 80177b0:	1c55      	adds	r5, r2, #1
 80177b2:	4422      	add	r2, r4
 80177b4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80177b6:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 80177ba:	9a06      	ldr	r2, [sp, #24]
 80177bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80177c0:	4472      	add	r2, lr
 80177c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80177c4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80177c6:	f8b9 2000 	ldrh.w	r2, [r9]
 80177ca:	f897 a002 	ldrb.w	sl, [r7, #2]
 80177ce:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80177d0:	1216      	asrs	r6, r2, #8
 80177d2:	fb1a fa07 	smulbb	sl, sl, r7
 80177d6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80177da:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80177dc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80177e0:	fb06 a607 	mla	r6, r6, r7, sl
 80177e4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80177e6:	f897 a001 	ldrb.w	sl, [r7, #1]
 80177ea:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80177ec:	10d5      	asrs	r5, r2, #3
 80177ee:	fb1a fa07 	smulbb	sl, sl, r7
 80177f2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80177f6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80177f8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80177fc:	fb05 a507 	mla	r5, r5, r7, sl
 8017800:	9f06      	ldr	r7, [sp, #24]
 8017802:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8017806:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8017808:	00d2      	lsls	r2, r2, #3
 801780a:	fb1e fe07 	smulbb	lr, lr, r7
 801780e:	b2d2      	uxtb	r2, r2
 8017810:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017812:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8017816:	b2b6      	uxth	r6, r6
 8017818:	fb02 e207 	mla	r2, r2, r7, lr
 801781c:	b292      	uxth	r2, r2
 801781e:	b2ad      	uxth	r5, r5
 8017820:	f106 0a01 	add.w	sl, r6, #1
 8017824:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8017828:	f102 0e01 	add.w	lr, r2, #1
 801782c:	f105 0a01 	add.w	sl, r5, #1
 8017830:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8017834:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017838:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801783c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8017840:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017844:	ea4e 0606 	orr.w	r6, lr, r6
 8017848:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801784c:	ea46 060a 	orr.w	r6, r6, sl
 8017850:	f829 6b02 	strh.w	r6, [r9], #2
 8017854:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8017858:	e7a7      	b.n	80177aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 801785a:	f102 0e01 	add.w	lr, r2, #1
 801785e:	4422      	add	r2, r4
 8017860:	9f06      	ldr	r7, [sp, #24]
 8017862:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8017866:	9a06      	ldr	r2, [sp, #24]
 8017868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801786c:	eb02 0a05 	add.w	sl, r2, r5
 8017870:	4a13      	ldr	r2, [pc, #76]	@ (80178c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 8017872:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017876:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801787a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801787e:	00d2      	lsls	r2, r2, #3
 8017880:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8017884:	ea49 0202 	orr.w	r2, r9, r2
 8017888:	f817 9005 	ldrb.w	r9, [r7, r5]
 801788c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8017890:	f826 2b02 	strh.w	r2, [r6], #2
 8017894:	fa1f f28e 	uxth.w	r2, lr
 8017898:	e757      	b.n	801774a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 801789a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801789e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80178a2:	1a2d      	subs	r5, r5, r0
 80178a4:	b2ad      	uxth	r5, r5
 80178a6:	2d00      	cmp	r5, #0
 80178a8:	bf18      	it	ne
 80178aa:	2000      	movne	r0, #0
 80178ac:	e730      	b.n	8017710 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80178ae:	4b05      	ldr	r3, [pc, #20]	@ (80178c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 80178b0:	6818      	ldr	r0, [r3, #0]
 80178b2:	6803      	ldr	r3, [r0, #0]
 80178b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80178b6:	4798      	blx	r3
 80178b8:	b01f      	add	sp, #124	@ 0x7c
 80178ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178be:	bf00      	nop
 80178c0:	fffff800 	.word	0xfffff800
 80178c4:	2002b02c 	.word	0x2002b02c

080178c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178cc:	b091      	sub	sp, #68	@ 0x44
 80178ce:	469b      	mov	fp, r3
 80178d0:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80178d4:	4616      	mov	r6, r2
 80178d6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80178da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178de:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80178e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178e6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80178ea:	4604      	mov	r4, r0
 80178ec:	460d      	mov	r5, r1
 80178ee:	4640      	mov	r0, r8
 80178f0:	4659      	mov	r1, fp
 80178f2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80178f6:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80178fa:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80178fe:	f7f5 fbff 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8017902:	4631      	mov	r1, r6
 8017904:	4640      	mov	r0, r8
 8017906:	f7f5 fbfb 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 801790a:	4b74      	ldr	r3, [pc, #464]	@ (8017adc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801790c:	8818      	ldrh	r0, [r3, #0]
 801790e:	4b74      	ldr	r3, [pc, #464]	@ (8017ae0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8017910:	8819      	ldrh	r1, [r3, #0]
 8017912:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8017916:	2b00      	cmp	r3, #0
 8017918:	b202      	sxth	r2, r0
 801791a:	b20e      	sxth	r6, r1
 801791c:	da07      	bge.n	801792e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801791e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8017922:	4463      	add	r3, ip
 8017924:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8017928:	2300      	movs	r3, #0
 801792a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801792e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8017932:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8017936:	1ad2      	subs	r2, r2, r3
 8017938:	4594      	cmp	ip, r2
 801793a:	bfc4      	itt	gt
 801793c:	1ac2      	subgt	r2, r0, r3
 801793e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8017942:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017946:	2a00      	cmp	r2, #0
 8017948:	da07      	bge.n	801795a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801794a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801794e:	4462      	add	r2, ip
 8017950:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8017954:	2200      	movs	r2, #0
 8017956:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801795a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801795e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8017962:	eba6 060a 	sub.w	r6, r6, sl
 8017966:	42b2      	cmp	r2, r6
 8017968:	bfc4      	itt	gt
 801796a:	eba1 020a 	subgt.w	r2, r1, sl
 801796e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8017972:	4a5c      	ldr	r2, [pc, #368]	@ (8017ae4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8017974:	7812      	ldrb	r2, [r2, #0]
 8017976:	b9a2      	cbnz	r2, 80179a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8017978:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801797c:	4286      	cmp	r6, r0
 801797e:	4640      	mov	r0, r8
 8017980:	9303      	str	r3, [sp, #12]
 8017982:	bf14      	ite	ne
 8017984:	2600      	movne	r6, #0
 8017986:	2601      	moveq	r6, #1
 8017988:	f7f5 fbfd 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 801798c:	9b03      	ldr	r3, [sp, #12]
 801798e:	b160      	cbz	r0, 80179aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8017990:	2300      	movs	r3, #0
 8017992:	8023      	strh	r3, [r4, #0]
 8017994:	8063      	strh	r3, [r4, #2]
 8017996:	80a3      	strh	r3, [r4, #4]
 8017998:	4620      	mov	r0, r4
 801799a:	80e3      	strh	r3, [r4, #6]
 801799c:	b011      	add	sp, #68	@ 0x44
 801799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80179a6:	428e      	cmp	r6, r1
 80179a8:	e7e9      	b.n	801797e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80179aa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80179ae:	9205      	str	r2, [sp, #20]
 80179b0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80179b4:	9206      	str	r2, [sp, #24]
 80179b6:	f8bb 2000 	ldrh.w	r2, [fp]
 80179ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80179bc:	1a9b      	subs	r3, r3, r2
 80179be:	b21b      	sxth	r3, r3
 80179c0:	9303      	str	r3, [sp, #12]
 80179c2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80179c6:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 80179ca:	ebaa 0a03 	sub.w	sl, sl, r3
 80179ce:	fa0f f38a 	sxth.w	r3, sl
 80179d2:	9304      	str	r3, [sp, #16]
 80179d4:	9b03      	ldr	r3, [sp, #12]
 80179d6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80179da:	9b04      	ldr	r3, [sp, #16]
 80179dc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80179e0:	9b05      	ldr	r3, [sp, #20]
 80179e2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80179e6:	a90e      	add	r1, sp, #56	@ 0x38
 80179e8:	9b06      	ldr	r3, [sp, #24]
 80179ea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80179ee:	a80c      	add	r0, sp, #48	@ 0x30
 80179f0:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 80179f4:	f7f8 f90c 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80179f8:	4640      	mov	r0, r8
 80179fa:	f7f8 f8e1 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179fe:	a80e      	add	r0, sp, #56	@ 0x38
 8017a00:	f7f8 f8de 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a04:	4b38      	ldr	r3, [pc, #224]	@ (8017ae8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8017a06:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8017a0a:	881b      	ldrh	r3, [r3, #0]
 8017a0c:	9307      	str	r3, [sp, #28]
 8017a0e:	682b      	ldr	r3, [r5, #0]
 8017a10:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8017aec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8017a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a16:	4628      	mov	r0, r5
 8017a18:	4798      	blx	r3
 8017a1a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8017a1e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8017a22:	4681      	mov	r9, r0
 8017a24:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8017a28:	f8db 0000 	ldr.w	r0, [fp]
 8017a2c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017a2e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8017a32:	6803      	ldr	r3, [r0, #0]
 8017a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a36:	4798      	blx	r3
 8017a38:	4607      	mov	r7, r0
 8017a3a:	f8db 0000 	ldr.w	r0, [fp]
 8017a3e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8017a42:	6803      	ldr	r3, [r0, #0]
 8017a44:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017a48:	9109      	str	r1, [sp, #36]	@ 0x24
 8017a4a:	9208      	str	r2, [sp, #32]
 8017a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a4e:	4798      	blx	r3
 8017a50:	f010 0f01 	tst.w	r0, #1
 8017a54:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017a58:	d012      	beq.n	8017a80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8017a5a:	f8db 0000 	ldr.w	r0, [fp]
 8017a5e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	9200      	str	r2, [sp, #0]
 8017a66:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8017a68:	e898 0006 	ldmia.w	r8, {r1, r2}
 8017a6c:	462b      	mov	r3, r5
 8017a6e:	47b0      	blx	r6
 8017a70:	9b03      	ldr	r3, [sp, #12]
 8017a72:	8023      	strh	r3, [r4, #0]
 8017a74:	9b04      	ldr	r3, [sp, #16]
 8017a76:	8063      	strh	r3, [r4, #2]
 8017a78:	9b05      	ldr	r3, [sp, #20]
 8017a7a:	80a3      	strh	r3, [r4, #4]
 8017a7c:	9b06      	ldr	r3, [sp, #24]
 8017a7e:	e78b      	b.n	8017998 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8017a80:	fb09 f202 	mul.w	r2, r9, r2
 8017a84:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8017a88:	440f      	add	r7, r1
 8017a8a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8017a8e:	b166      	cbz	r6, 8017aaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8017a90:	9a07      	ldr	r2, [sp, #28]
 8017a92:	4592      	cmp	sl, r2
 8017a94:	d109      	bne.n	8017aaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8017a96:	f8db 0000 	ldr.w	r0, [fp]
 8017a9a:	6802      	ldr	r2, [r0, #0]
 8017a9c:	fb09 f303 	mul.w	r3, r9, r3
 8017aa0:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	463a      	mov	r2, r7
 8017aa6:	47b0      	blx	r6
 8017aa8:	e7e2      	b.n	8017a70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8017aaa:	fb0a f303 	mul.w	r3, sl, r3
 8017aae:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8017aec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8017ab2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8017ab6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8017aba:	4545      	cmp	r5, r8
 8017abc:	d2d8      	bcs.n	8017a70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8017abe:	f8db 0000 	ldr.w	r0, [fp]
 8017ac2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8017ac6:	6802      	ldr	r2, [r0, #0]
 8017ac8:	4629      	mov	r1, r5
 8017aca:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8017ace:	005b      	lsls	r3, r3, #1
 8017ad0:	463a      	mov	r2, r7
 8017ad2:	47d0      	blx	sl
 8017ad4:	444f      	add	r7, r9
 8017ad6:	4435      	add	r5, r6
 8017ad8:	e7ef      	b.n	8017aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8017ada:	bf00      	nop
 8017adc:	2002b020 	.word	0x2002b020
 8017ae0:	2002b022 	.word	0x2002b022
 8017ae4:	2002b024 	.word	0x2002b024
 8017ae8:	2002b026 	.word	0x2002b026
 8017aec:	2002b02c 	.word	0x2002b02c

08017af0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017af2:	4606      	mov	r6, r0
 8017af4:	b087      	sub	sp, #28
 8017af6:	460c      	mov	r4, r1
 8017af8:	4617      	mov	r7, r2
 8017afa:	461d      	mov	r5, r3
 8017afc:	b333      	cbz	r3, 8017b4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8017afe:	4608      	mov	r0, r1
 8017b00:	f7f5 fb41 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b04:	bb10      	cbnz	r0, 8017b4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8017b06:	6820      	ldr	r0, [r4, #0]
 8017b08:	6861      	ldr	r1, [r4, #4]
 8017b0a:	4c1c      	ldr	r4, [pc, #112]	@ (8017b7c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8017b0c:	ab04      	add	r3, sp, #16
 8017b0e:	c303      	stmia	r3!, {r0, r1}
 8017b10:	a804      	add	r0, sp, #16
 8017b12:	f7f8 f855 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017b16:	6820      	ldr	r0, [r4, #0]
 8017b18:	6803      	ldr	r3, [r0, #0]
 8017b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b1c:	4798      	blx	r3
 8017b1e:	2dff      	cmp	r5, #255	@ 0xff
 8017b20:	d016      	beq.n	8017b50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8017b22:	f010 0f08 	tst.w	r0, #8
 8017b26:	6820      	ldr	r0, [r4, #0]
 8017b28:	d015      	beq.n	8017b56 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8017b2a:	2400      	movs	r4, #0
 8017b2c:	6801      	ldr	r1, [r0, #0]
 8017b2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017b32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017b36:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8017b3a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017b3e:	9401      	str	r4, [sp, #4]
 8017b40:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8017b44:	9400      	str	r4, [sp, #0]
 8017b46:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8017b48:	4639      	mov	r1, r7
 8017b4a:	47a0      	blx	r4
 8017b4c:	b007      	add	sp, #28
 8017b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b50:	f010 0f02 	tst.w	r0, #2
 8017b54:	e7e7      	b.n	8017b26 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8017b56:	6803      	ldr	r3, [r0, #0]
 8017b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b5a:	4798      	blx	r3
 8017b5c:	4b08      	ldr	r3, [pc, #32]	@ (8017b80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017b5e:	881a      	ldrh	r2, [r3, #0]
 8017b60:	6833      	ldr	r3, [r6, #0]
 8017b62:	e9cd 7500 	strd	r7, r5, [sp]
 8017b66:	4601      	mov	r1, r0
 8017b68:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	ab04      	add	r3, sp, #16
 8017b6e:	47a8      	blx	r5
 8017b70:	6820      	ldr	r0, [r4, #0]
 8017b72:	6803      	ldr	r3, [r0, #0]
 8017b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b76:	4798      	blx	r3
 8017b78:	e7e8      	b.n	8017b4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8017b7a:	bf00      	nop
 8017b7c:	2002b02c 	.word	0x2002b02c
 8017b80:	2002b026 	.word	0x2002b026

08017b84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8017b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b88:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8017b8c:	9e08      	ldr	r6, [sp, #32]
 8017b8e:	4688      	mov	r8, r1
 8017b90:	4614      	mov	r4, r2
 8017b92:	461d      	mov	r5, r3
 8017b94:	2f00      	cmp	r7, #0
 8017b96:	f000 80a9 	beq.w	8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f5 faf3 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	f040 80a3 	bne.w	8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017ba6:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017baa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017bae:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8017bb2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8017bb6:	fb04 1303 	mla	r3, r4, r3, r1
 8017bba:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8017bbe:	4365      	muls	r5, r4
 8017bc0:	2fff      	cmp	r7, #255	@ 0xff
 8017bc2:	eba4 0200 	sub.w	r2, r4, r0
 8017bc6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8017bca:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8017bce:	d04a      	beq.n	8017c66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8017bd0:	b2bc      	uxth	r4, r7
 8017bd2:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8017bd6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8017bda:	fa5f f788 	uxtb.w	r7, r8
 8017bde:	b2f3      	uxtb	r3, r6
 8017be0:	0040      	lsls	r0, r0, #1
 8017be2:	fb0e fe04 	mul.w	lr, lr, r4
 8017be6:	4367      	muls	r7, r4
 8017be8:	4363      	muls	r3, r4
 8017bea:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8017bee:	fa1f fc8c 	uxth.w	ip, ip
 8017bf2:	42a9      	cmp	r1, r5
 8017bf4:	d27a      	bcs.n	8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017bf6:	eb01 0900 	add.w	r9, r1, r0
 8017bfa:	4549      	cmp	r1, r9
 8017bfc:	d231      	bcs.n	8017c62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8017bfe:	880a      	ldrh	r2, [r1, #0]
 8017c00:	1214      	asrs	r4, r2, #8
 8017c02:	10d6      	asrs	r6, r2, #3
 8017c04:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8017c08:	00d2      	lsls	r2, r2, #3
 8017c0a:	b2d2      	uxtb	r2, r2
 8017c0c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8017c10:	fb14 f40c 	smulbb	r4, r4, ip
 8017c14:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8017c18:	4474      	add	r4, lr
 8017c1a:	fb12 f20c 	smulbb	r2, r2, ip
 8017c1e:	b2a4      	uxth	r4, r4
 8017c20:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8017c24:	441a      	add	r2, r3
 8017c26:	b292      	uxth	r2, r2
 8017c28:	f104 0a01 	add.w	sl, r4, #1
 8017c2c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8017c30:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017c34:	fb16 f60c 	smulbb	r6, r6, ip
 8017c38:	f102 0a01 	add.w	sl, r2, #1
 8017c3c:	443e      	add	r6, r7
 8017c3e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8017c42:	b2b6      	uxth	r6, r6
 8017c44:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8017c48:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017c4c:	4322      	orrs	r2, r4
 8017c4e:	1c74      	adds	r4, r6, #1
 8017c50:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8017c54:	0976      	lsrs	r6, r6, #5
 8017c56:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8017c5a:	4332      	orrs	r2, r6
 8017c5c:	f821 2b02 	strh.w	r2, [r1], #2
 8017c60:	e7cb      	b.n	8017bfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8017c62:	4441      	add	r1, r8
 8017c64:	e7c5      	b.n	8017bf2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8017c66:	4f22      	ldr	r7, [pc, #136]	@ (8017cf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8017c68:	0973      	lsrs	r3, r6, #5
 8017c6a:	ea08 0707 	and.w	r7, r8, r7
 8017c6e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017c72:	433b      	orrs	r3, r7
 8017c74:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8017c78:	4333      	orrs	r3, r6
 8017c7a:	07e7      	lsls	r7, r4, #31
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	d50b      	bpl.n	8017c98 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8017c80:	0040      	lsls	r0, r0, #1
 8017c82:	0052      	lsls	r2, r2, #1
 8017c84:	42a9      	cmp	r1, r5
 8017c86:	d231      	bcs.n	8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017c88:	180c      	adds	r4, r1, r0
 8017c8a:	42a1      	cmp	r1, r4
 8017c8c:	d202      	bcs.n	8017c94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8017c8e:	f821 3b02 	strh.w	r3, [r1], #2
 8017c92:	e7fa      	b.n	8017c8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8017c94:	4411      	add	r1, r2
 8017c96:	e7f5      	b.n	8017c84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8017c98:	078e      	lsls	r6, r1, #30
 8017c9a:	d008      	beq.n	8017cae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8017c9c:	0066      	lsls	r6, r4, #1
 8017c9e:	460a      	mov	r2, r1
 8017ca0:	42aa      	cmp	r2, r5
 8017ca2:	d202      	bcs.n	8017caa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8017ca4:	8013      	strh	r3, [r2, #0]
 8017ca6:	4432      	add	r2, r6
 8017ca8:	e7fa      	b.n	8017ca0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8017caa:	3102      	adds	r1, #2
 8017cac:	3801      	subs	r0, #1
 8017cae:	07c2      	lsls	r2, r0, #31
 8017cb0:	d50b      	bpl.n	8017cca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8017cb2:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8017cb6:	3a01      	subs	r2, #1
 8017cb8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8017cbc:	0066      	lsls	r6, r4, #1
 8017cbe:	42aa      	cmp	r2, r5
 8017cc0:	d202      	bcs.n	8017cc8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8017cc2:	8013      	strh	r3, [r2, #0]
 8017cc4:	4432      	add	r2, r6
 8017cc6:	e7fa      	b.n	8017cbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8017cc8:	3801      	subs	r0, #1
 8017cca:	b178      	cbz	r0, 8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017ccc:	1040      	asrs	r0, r0, #1
 8017cce:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8017cd2:	0080      	lsls	r0, r0, #2
 8017cd4:	0064      	lsls	r4, r4, #1
 8017cd6:	42a9      	cmp	r1, r5
 8017cd8:	d208      	bcs.n	8017cec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8017cda:	180e      	adds	r6, r1, r0
 8017cdc:	460a      	mov	r2, r1
 8017cde:	42b2      	cmp	r2, r6
 8017ce0:	d202      	bcs.n	8017ce8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8017ce2:	f842 3b04 	str.w	r3, [r2], #4
 8017ce6:	e7fa      	b.n	8017cde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8017ce8:	4421      	add	r1, r4
 8017cea:	e7f4      	b.n	8017cd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8017cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cf0:	00fff800 	.word	0x00fff800

08017cf4 <_ZN8touchgfx8LCD16bppC1Ev>:
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	4912      	ldr	r1, [pc, #72]	@ (8017d40 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8017cf8:	6001      	str	r1, [r0, #0]
 8017cfa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8017cfe:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017d02:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017d06:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8017d0a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8017d0e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8017d12:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8017d16:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8017d1a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8017d1e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8017d22:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8017d26:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8017d2a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8017d2e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8017d32:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8017d36:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8017d3a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8017d3e:	4770      	bx	lr
 8017d40:	08023d74 	.word	0x08023d74

08017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8017d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d48:	460d      	mov	r5, r1
 8017d4a:	b08d      	sub	sp, #52	@ 0x34
 8017d4c:	4604      	mov	r4, r0
 8017d4e:	6808      	ldr	r0, [r1, #0]
 8017d50:	6849      	ldr	r1, [r1, #4]
 8017d52:	4699      	mov	r9, r3
 8017d54:	ab08      	add	r3, sp, #32
 8017d56:	c303      	stmia	r3!, {r0, r1}
 8017d58:	6810      	ldr	r0, [r2, #0]
 8017d5a:	6851      	ldr	r1, [r2, #4]
 8017d5c:	ab0a      	add	r3, sp, #40	@ 0x28
 8017d5e:	c303      	stmia	r3!, {r0, r1}
 8017d60:	a808      	add	r0, sp, #32
 8017d62:	f7f7 ff2d 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d66:	4629      	mov	r1, r5
 8017d68:	a80a      	add	r0, sp, #40	@ 0x28
 8017d6a:	f7f7 ff51 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017d6e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8017d72:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8017d76:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8017d7a:	4d63      	ldr	r5, [pc, #396]	@ (8017f08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8017d7c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8017d80:	6828      	ldr	r0, [r5, #0]
 8017d82:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8017d86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017d8a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017d8e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8017d92:	440a      	add	r2, r1
 8017d94:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017d98:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8017d9c:	4413      	add	r3, r2
 8017d9e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017da2:	6803      	ldr	r3, [r0, #0]
 8017da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017da6:	4798      	blx	r3
 8017da8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8017dac:	d119      	bne.n	8017de2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8017dae:	f010 0f20 	tst.w	r0, #32
 8017db2:	6828      	ldr	r0, [r5, #0]
 8017db4:	d018      	beq.n	8017de8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8017db6:	2500      	movs	r5, #0
 8017db8:	6801      	ldr	r1, [r0, #0]
 8017dba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017dbe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8017dc2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8017dc6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8017dca:	9502      	str	r5, [sp, #8]
 8017dcc:	b2b6      	uxth	r6, r6
 8017dce:	fa1f f588 	uxth.w	r5, r8
 8017dd2:	9601      	str	r6, [sp, #4]
 8017dd4:	9500      	str	r5, [sp, #0]
 8017dd6:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8017dd8:	4621      	mov	r1, r4
 8017dda:	47a8      	blx	r5
 8017ddc:	b00d      	add	sp, #52	@ 0x34
 8017dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8017de6:	e7e4      	b.n	8017db2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8017de8:	6803      	ldr	r3, [r0, #0]
 8017dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dec:	4798      	blx	r3
 8017dee:	4947      	ldr	r1, [pc, #284]	@ (8017f0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8017df0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017df4:	880b      	ldrh	r3, [r1, #0]
 8017df6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8017dfa:	fb03 5202 	mla	r2, r3, r2, r5
 8017dfe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017e02:	4373      	muls	r3, r6
 8017e04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017e08:	9307      	str	r3, [sp, #28]
 8017e0a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8017e0e:	9306      	str	r3, [sp, #24]
 8017e10:	468a      	mov	sl, r1
 8017e12:	9b07      	ldr	r3, [sp, #28]
 8017e14:	4298      	cmp	r0, r3
 8017e16:	d270      	bcs.n	8017efa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8017e18:	9b06      	ldr	r3, [sp, #24]
 8017e1a:	4621      	mov	r1, r4
 8017e1c:	eb00 0b03 	add.w	fp, r0, r3
 8017e20:	4558      	cmp	r0, fp
 8017e22:	d25d      	bcs.n	8017ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8017e24:	f851 4b04 	ldr.w	r4, [r1], #4
 8017e28:	0e23      	lsrs	r3, r4, #24
 8017e2a:	d014      	beq.n	8017e56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8017e2c:	2bff      	cmp	r3, #255	@ 0xff
 8017e2e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8017e32:	d112      	bne.n	8017e5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8017e34:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8017e38:	d10f      	bne.n	8017e5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8017e3a:	0963      	lsrs	r3, r4, #5
 8017e3c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8017e40:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017e44:	f02c 0c07 	bic.w	ip, ip, #7
 8017e48:	ea43 0c0c 	orr.w	ip, r3, ip
 8017e4c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017e50:	ea4c 0404 	orr.w	r4, ip, r4
 8017e54:	8004      	strh	r4, [r0, #0]
 8017e56:	3002      	adds	r0, #2
 8017e58:	e7e2      	b.n	8017e20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8017e5a:	fb09 f303 	mul.w	r3, r9, r3
 8017e5e:	8807      	ldrh	r7, [r0, #0]
 8017e60:	1c5a      	adds	r2, r3, #1
 8017e62:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8017e66:	1212      	asrs	r2, r2, #8
 8017e68:	123e      	asrs	r6, r7, #8
 8017e6a:	b293      	uxth	r3, r2
 8017e6c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8017e70:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8017e74:	43d2      	mvns	r2, r2
 8017e76:	b2d2      	uxtb	r2, r2
 8017e78:	10fd      	asrs	r5, r7, #3
 8017e7a:	fb1e fe03 	smulbb	lr, lr, r3
 8017e7e:	00ff      	lsls	r7, r7, #3
 8017e80:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8017e84:	fb06 e602 	mla	r6, r6, r2, lr
 8017e88:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8017e8c:	b2ff      	uxtb	r7, r7
 8017e8e:	fa5f fc8c 	uxtb.w	ip, ip
 8017e92:	b2e4      	uxtb	r4, r4
 8017e94:	b2b6      	uxth	r6, r6
 8017e96:	fb1c fc03 	smulbb	ip, ip, r3
 8017e9a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8017e9e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8017ea2:	fb14 f403 	smulbb	r4, r4, r3
 8017ea6:	fb05 c502 	mla	r5, r5, r2, ip
 8017eaa:	f106 0e01 	add.w	lr, r6, #1
 8017eae:	fb07 4702 	mla	r7, r7, r2, r4
 8017eb2:	b2ad      	uxth	r5, r5
 8017eb4:	b2bf      	uxth	r7, r7
 8017eb6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8017eba:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8017ebe:	f105 0c01 	add.w	ip, r5, #1
 8017ec2:	1c7e      	adds	r6, r7, #1
 8017ec4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8017ec8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8017ecc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017ed0:	096d      	lsrs	r5, r5, #5
 8017ed2:	ea46 060e 	orr.w	r6, r6, lr
 8017ed6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8017eda:	432e      	orrs	r6, r5
 8017edc:	8006      	strh	r6, [r0, #0]
 8017ede:	e7ba      	b.n	8017e56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8017ee0:	f8ba 3000 	ldrh.w	r3, [sl]
 8017ee4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8017ee8:	eba3 0308 	sub.w	r3, r3, r8
 8017eec:	eba4 0408 	sub.w	r4, r4, r8
 8017ef0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017ef4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8017ef8:	e78b      	b.n	8017e12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8017efa:	4b03      	ldr	r3, [pc, #12]	@ (8017f08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	6803      	ldr	r3, [r0, #0]
 8017f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f02:	4798      	blx	r3
 8017f04:	e76a      	b.n	8017ddc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8017f06:	bf00      	nop
 8017f08:	2002b02c 	.word	0x2002b02c
 8017f0c:	2002b026 	.word	0x2002b026

08017f10 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8017f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f14:	460c      	mov	r4, r1
 8017f16:	b085      	sub	sp, #20
 8017f18:	6810      	ldr	r0, [r2, #0]
 8017f1a:	6851      	ldr	r1, [r2, #4]
 8017f1c:	466d      	mov	r5, sp
 8017f1e:	c503      	stmia	r5!, {r0, r1}
 8017f20:	6818      	ldr	r0, [r3, #0]
 8017f22:	6859      	ldr	r1, [r3, #4]
 8017f24:	4616      	mov	r6, r2
 8017f26:	c503      	stmia	r5!, {r0, r1}
 8017f28:	4668      	mov	r0, sp
 8017f2a:	f7f7 fe49 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f2e:	4631      	mov	r1, r6
 8017f30:	a802      	add	r0, sp, #8
 8017f32:	f7f7 fe6d 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017f36:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8017f3a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017f3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017f42:	4d28      	ldr	r5, [pc, #160]	@ (8017fe4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8017f44:	4e28      	ldr	r6, [pc, #160]	@ (8017fe8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8017f46:	6828      	ldr	r0, [r5, #0]
 8017f48:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017f4c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8017f50:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017f54:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017f58:	f8bd 1000 	ldrh.w	r1, [sp]
 8017f5c:	440a      	add	r2, r1
 8017f5e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8017f62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017f66:	4413      	add	r3, r2
 8017f68:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017f6c:	6803      	ldr	r3, [r0, #0]
 8017f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f70:	4798      	blx	r3
 8017f72:	8833      	ldrh	r3, [r6, #0]
 8017f74:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017f78:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8017f7c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8017fec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8017f80:	fb03 1202 	mla	r2, r3, r2, r1
 8017f84:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017f88:	fb08 f303 	mul.w	r3, r8, r3
 8017f8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017f90:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8017f94:	4298      	cmp	r0, r3
 8017f96:	d21d      	bcs.n	8017fd4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8017f98:	eb00 080c 	add.w	r8, r0, ip
 8017f9c:	4540      	cmp	r0, r8
 8017f9e:	d20f      	bcs.n	8017fc0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8017fa0:	f854 1b04 	ldr.w	r1, [r4], #4
 8017fa4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8017fa8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8017fac:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8017fb0:	ea42 0209 	orr.w	r2, r2, r9
 8017fb4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8017fb8:	430a      	orrs	r2, r1
 8017fba:	f820 2b02 	strh.w	r2, [r0], #2
 8017fbe:	e7ed      	b.n	8017f9c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8017fc0:	8832      	ldrh	r2, [r6, #0]
 8017fc2:	1bd2      	subs	r2, r2, r7
 8017fc4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017fc8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017fcc:	1bd2      	subs	r2, r2, r7
 8017fce:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8017fd2:	e7df      	b.n	8017f94 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8017fd4:	6828      	ldr	r0, [r5, #0]
 8017fd6:	6803      	ldr	r3, [r0, #0]
 8017fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fda:	4798      	blx	r3
 8017fdc:	b005      	add	sp, #20
 8017fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fe2:	bf00      	nop
 8017fe4:	2002b02c 	.word	0x2002b02c
 8017fe8:	2002b026 	.word	0x2002b026
 8017fec:	fffff800 	.word	0xfffff800

08017ff0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8017ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ff4:	460e      	mov	r6, r1
 8017ff6:	b08e      	sub	sp, #56	@ 0x38
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	6808      	ldr	r0, [r1, #0]
 8017ffc:	6849      	ldr	r1, [r1, #4]
 8017ffe:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 80181d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8018002:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 80181dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8018006:	461d      	mov	r5, r3
 8018008:	ab0a      	add	r3, sp, #40	@ 0x28
 801800a:	c303      	stmia	r3!, {r0, r1}
 801800c:	6810      	ldr	r0, [r2, #0]
 801800e:	6851      	ldr	r1, [r2, #4]
 8018010:	ab0c      	add	r3, sp, #48	@ 0x30
 8018012:	c303      	stmia	r3!, {r0, r1}
 8018014:	a80a      	add	r0, sp, #40	@ 0x28
 8018016:	f7f7 fdd3 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801801a:	4631      	mov	r1, r6
 801801c:	a80c      	add	r0, sp, #48	@ 0x30
 801801e:	f7f7 fdf7 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018022:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8018026:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801802a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801802e:	f8d8 0000 	ldr.w	r0, [r8]
 8018032:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8018036:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801803a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801803e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018042:	440c      	add	r4, r1
 8018044:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8018048:	440a      	add	r2, r1
 801804a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801804e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8018052:	4413      	add	r3, r2
 8018054:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018058:	6803      	ldr	r3, [r0, #0]
 801805a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801805c:	4798      	blx	r3
 801805e:	2dff      	cmp	r5, #255	@ 0xff
 8018060:	d124      	bne.n	80180ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8018062:	f010 0f01 	tst.w	r0, #1
 8018066:	f8d8 0000 	ldr.w	r0, [r8]
 801806a:	d022      	beq.n	80180b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801806c:	2100      	movs	r1, #0
 801806e:	f8d0 c000 	ldr.w	ip, [r0]
 8018072:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8018076:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801807a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801807e:	f04f 0e01 	mov.w	lr, #1
 8018082:	f8cd e018 	str.w	lr, [sp, #24]
 8018086:	f8b9 e000 	ldrh.w	lr, [r9]
 801808a:	9503      	str	r5, [sp, #12]
 801808c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8018090:	b2b6      	uxth	r6, r6
 8018092:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8018096:	9102      	str	r1, [sp, #8]
 8018098:	b2bf      	uxth	r7, r7
 801809a:	9601      	str	r6, [sp, #4]
 801809c:	9700      	str	r7, [sp, #0]
 801809e:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 80180a2:	4621      	mov	r1, r4
 80180a4:	47a8      	blx	r5
 80180a6:	b00e      	add	sp, #56	@ 0x38
 80180a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ac:	f010 0f04 	tst.w	r0, #4
 80180b0:	e7d9      	b.n	8018066 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80180b2:	6803      	ldr	r3, [r0, #0]
 80180b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80180b6:	4798      	blx	r3
 80180b8:	f8b9 3000 	ldrh.w	r3, [r9]
 80180bc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80180c0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80180c4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80180c8:	fb03 1202 	mla	r2, r3, r2, r1
 80180cc:	ebac 0c07 	sub.w	ip, ip, r7
 80180d0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80180d4:	435e      	muls	r6, r3
 80180d6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80180da:	2dff      	cmp	r5, #255	@ 0xff
 80180dc:	eba3 0707 	sub.w	r7, r3, r7
 80180e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80180e4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80180e8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80180ec:	d049      	beq.n	8018182 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80180ee:	43eb      	mvns	r3, r5
 80180f0:	fa1f f985 	uxth.w	r9, r5
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	42b0      	cmp	r0, r6
 80180f8:	d266      	bcs.n	80181c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80180fa:	eb00 0a0e 	add.w	sl, r0, lr
 80180fe:	4550      	cmp	r0, sl
 8018100:	4621      	mov	r1, r4
 8018102:	f104 0403 	add.w	r4, r4, #3
 8018106:	d25b      	bcs.n	80181c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8018108:	8802      	ldrh	r2, [r0, #0]
 801810a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801810e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8018112:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8018116:	fb11 f109 	smulbb	r1, r1, r9
 801811a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801811e:	10d5      	asrs	r5, r2, #3
 8018120:	fb08 1803 	mla	r8, r8, r3, r1
 8018124:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8018128:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801812c:	fb11 f109 	smulbb	r1, r1, r9
 8018130:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8018134:	fb05 1503 	mla	r5, r5, r3, r1
 8018138:	00d2      	lsls	r2, r2, #3
 801813a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801813e:	b2d2      	uxtb	r2, r2
 8018140:	fb11 f109 	smulbb	r1, r1, r9
 8018144:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018148:	fa1f f888 	uxth.w	r8, r8
 801814c:	fb02 1203 	mla	r2, r2, r3, r1
 8018150:	b292      	uxth	r2, r2
 8018152:	f108 0101 	add.w	r1, r8, #1
 8018156:	b2ad      	uxth	r5, r5
 8018158:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801815c:	1c51      	adds	r1, r2, #1
 801815e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018162:	1c69      	adds	r1, r5, #1
 8018164:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8018168:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801816c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018170:	096d      	lsrs	r5, r5, #5
 8018172:	ea42 0208 	orr.w	r2, r2, r8
 8018176:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801817a:	432a      	orrs	r2, r5
 801817c:	f820 2b02 	strh.w	r2, [r0], #2
 8018180:	e7bd      	b.n	80180fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8018182:	4a14      	ldr	r2, [pc, #80]	@ (80181d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8018184:	42b0      	cmp	r0, r6
 8018186:	d21f      	bcs.n	80181c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8018188:	eb00 050e 	add.w	r5, r0, lr
 801818c:	42a8      	cmp	r0, r5
 801818e:	4621      	mov	r1, r4
 8018190:	f104 0403 	add.w	r4, r4, #3
 8018194:	d210      	bcs.n	80181b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8018196:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801819a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80181a4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80181a8:	430b      	orrs	r3, r1
 80181aa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80181ae:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80181b2:	f820 3b02 	strh.w	r3, [r0], #2
 80181b6:	e7e9      	b.n	801818c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80181b8:	4438      	add	r0, r7
 80181ba:	eb01 040c 	add.w	r4, r1, ip
 80181be:	e7e1      	b.n	8018184 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80181c0:	4438      	add	r0, r7
 80181c2:	eb01 040c 	add.w	r4, r1, ip
 80181c6:	e796      	b.n	80180f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80181c8:	4b03      	ldr	r3, [pc, #12]	@ (80181d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80181ca:	6818      	ldr	r0, [r3, #0]
 80181cc:	6803      	ldr	r3, [r0, #0]
 80181ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181d0:	4798      	blx	r3
 80181d2:	e768      	b.n	80180a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80181d4:	fffff800 	.word	0xfffff800
 80181d8:	2002b02c 	.word	0x2002b02c
 80181dc:	2002b026 	.word	0x2002b026

080181e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80181e0:	b4f0      	push	{r4, r5, r6, r7}
 80181e2:	4616      	mov	r6, r2
 80181e4:	2e01      	cmp	r6, #1
 80181e6:	461c      	mov	r4, r3
 80181e8:	460d      	mov	r5, r1
 80181ea:	9a04      	ldr	r2, [sp, #16]
 80181ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80181f0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80181f4:	d012      	beq.n	801821c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80181f6:	d303      	bcc.n	8018200 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80181f8:	2e02      	cmp	r6, #2
 80181fa:	d00a      	beq.n	8018212 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80181fc:	bcf0      	pop	{r4, r5, r6, r7}
 80181fe:	4770      	bx	lr
 8018200:	6805      	ldr	r5, [r0, #0]
 8018202:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8018206:	68ed      	ldr	r5, [r5, #12]
 8018208:	4613      	mov	r3, r2
 801820a:	46ac      	mov	ip, r5
 801820c:	4622      	mov	r2, r4
 801820e:	bcf0      	pop	{r4, r5, r6, r7}
 8018210:	4760      	bx	ip
 8018212:	4621      	mov	r1, r4
 8018214:	4628      	mov	r0, r5
 8018216:	bcf0      	pop	{r4, r5, r6, r7}
 8018218:	f7ff bd94 	b.w	8017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801821c:	4621      	mov	r1, r4
 801821e:	4628      	mov	r0, r5
 8018220:	bcf0      	pop	{r4, r5, r6, r7}
 8018222:	f7ff bee5 	b.w	8017ff0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08018228 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8018228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801822c:	4681      	mov	r9, r0
 801822e:	b093      	sub	sp, #76	@ 0x4c
 8018230:	6810      	ldr	r0, [r2, #0]
 8018232:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8018236:	4f6d      	ldr	r7, [pc, #436]	@ (80183ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8018238:	4688      	mov	r8, r1
 801823a:	6851      	ldr	r1, [r2, #4]
 801823c:	ac0e      	add	r4, sp, #56	@ 0x38
 801823e:	c403      	stmia	r4!, {r0, r1}
 8018240:	6818      	ldr	r0, [r3, #0]
 8018242:	6859      	ldr	r1, [r3, #4]
 8018244:	ac10      	add	r4, sp, #64	@ 0x40
 8018246:	4616      	mov	r6, r2
 8018248:	c403      	stmia	r4!, {r0, r1}
 801824a:	a80e      	add	r0, sp, #56	@ 0x38
 801824c:	f7f7 fcb8 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018250:	4631      	mov	r1, r6
 8018252:	a810      	add	r0, sp, #64	@ 0x40
 8018254:	f7f7 fcdc 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018258:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801825c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8018260:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8018264:	4e62      	ldr	r6, [pc, #392]	@ (80183f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8018266:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801826a:	6830      	ldr	r0, [r6, #0]
 801826c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8018270:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018274:	4489      	add	r9, r1
 8018276:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801827a:	440a      	add	r2, r1
 801827c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8018280:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018284:	4413      	add	r3, r2
 8018286:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801828e:	4798      	blx	r3
 8018290:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018294:	6830      	ldr	r0, [r6, #0]
 8018296:	d01d      	beq.n	80182d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8018298:	2200      	movs	r2, #0
 801829a:	6801      	ldr	r1, [r0, #0]
 801829c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80182a0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80182a4:	220b      	movs	r2, #11
 80182a6:	9207      	str	r2, [sp, #28]
 80182a8:	883a      	ldrh	r2, [r7, #0]
 80182aa:	9206      	str	r2, [sp, #24]
 80182ac:	2201      	movs	r2, #1
 80182ae:	e9cd a204 	strd	sl, r2, [sp, #16]
 80182b2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80182b6:	9203      	str	r2, [sp, #12]
 80182b8:	b2a4      	uxth	r4, r4
 80182ba:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80182be:	9200      	str	r2, [sp, #0]
 80182c0:	b2ad      	uxth	r5, r5
 80182c2:	9502      	str	r5, [sp, #8]
 80182c4:	9401      	str	r4, [sp, #4]
 80182c6:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 80182c8:	4642      	mov	r2, r8
 80182ca:	4649      	mov	r1, r9
 80182cc:	47a0      	blx	r4
 80182ce:	b013      	add	sp, #76	@ 0x4c
 80182d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d4:	6803      	ldr	r3, [r0, #0]
 80182d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182d8:	4798      	blx	r3
 80182da:	883b      	ldrh	r3, [r7, #0]
 80182dc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80182e0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80182e4:	fb03 1202 	mla	r2, r3, r2, r1
 80182e8:	435d      	muls	r5, r3
 80182ea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80182ee:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80182f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80182f4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80182f8:	1b12      	subs	r2, r2, r4
 80182fa:	920d      	str	r2, [sp, #52]	@ 0x34
 80182fc:	0062      	lsls	r2, r4, #1
 80182fe:	1b1c      	subs	r4, r3, r4
 8018300:	0063      	lsls	r3, r4, #1
 8018302:	920a      	str	r2, [sp, #40]	@ 0x28
 8018304:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018306:	f04f 0e04 	mov.w	lr, #4
 801830a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801830c:	4298      	cmp	r0, r3
 801830e:	d266      	bcs.n	80183de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8018310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018312:	eb00 0b03 	add.w	fp, r0, r3
 8018316:	4558      	cmp	r0, fp
 8018318:	d25c      	bcs.n	80183d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801831a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801831e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8018322:	f858 2003 	ldr.w	r2, [r8, r3]
 8018326:	0e11      	lsrs	r1, r2, #24
 8018328:	d012      	beq.n	8018350 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801832a:	29ff      	cmp	r1, #255	@ 0xff
 801832c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8018330:	d110      	bne.n	8018354 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018332:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8018336:	d10d      	bne.n	8018354 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018338:	0953      	lsrs	r3, r2, #5
 801833a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801833e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8018342:	f027 0707 	bic.w	r7, r7, #7
 8018346:	431f      	orrs	r7, r3
 8018348:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801834c:	433a      	orrs	r2, r7
 801834e:	8002      	strh	r2, [r0, #0]
 8018350:	3002      	adds	r0, #2
 8018352:	e7e0      	b.n	8018316 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8018354:	fb0a f101 	mul.w	r1, sl, r1
 8018358:	8806      	ldrh	r6, [r0, #0]
 801835a:	1c4b      	adds	r3, r1, #1
 801835c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8018360:	1235      	asrs	r5, r6, #8
 8018362:	10f4      	asrs	r4, r6, #3
 8018364:	121b      	asrs	r3, r3, #8
 8018366:	00f6      	lsls	r6, r6, #3
 8018368:	b299      	uxth	r1, r3
 801836a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801836e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8018372:	b2f6      	uxtb	r6, r6
 8018374:	43db      	mvns	r3, r3
 8018376:	b2d2      	uxtb	r2, r2
 8018378:	b2db      	uxtb	r3, r3
 801837a:	fb1c fc01 	smulbb	ip, ip, r1
 801837e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8018382:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8018386:	fb12 f201 	smulbb	r2, r2, r1
 801838a:	fb05 c503 	mla	r5, r5, r3, ip
 801838e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8018392:	b2ff      	uxtb	r7, r7
 8018394:	fb06 2203 	mla	r2, r6, r3, r2
 8018398:	b2ad      	uxth	r5, r5
 801839a:	fb17 f701 	smulbb	r7, r7, r1
 801839e:	b292      	uxth	r2, r2
 80183a0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80183a4:	fb04 7403 	mla	r4, r4, r3, r7
 80183a8:	f105 0c01 	add.w	ip, r5, #1
 80183ac:	1c57      	adds	r7, r2, #1
 80183ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80183b2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80183b6:	b2a4      	uxth	r4, r4
 80183b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80183bc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80183c0:	433d      	orrs	r5, r7
 80183c2:	1c67      	adds	r7, r4, #1
 80183c4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80183c8:	0964      	lsrs	r4, r4, #5
 80183ca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80183ce:	4325      	orrs	r5, r4
 80183d0:	8005      	strh	r5, [r0, #0]
 80183d2:	e7bd      	b.n	8018350 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80183d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80183d6:	4418      	add	r0, r3
 80183d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80183da:	4499      	add	r9, r3
 80183dc:	e795      	b.n	801830a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80183de:	4b04      	ldr	r3, [pc, #16]	@ (80183f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80183e0:	6818      	ldr	r0, [r3, #0]
 80183e2:	6803      	ldr	r3, [r0, #0]
 80183e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183e6:	4798      	blx	r3
 80183e8:	e771      	b.n	80182ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80183ea:	bf00      	nop
 80183ec:	2002b026 	.word	0x2002b026
 80183f0:	2002b02c 	.word	0x2002b02c

080183f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80183f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f8:	b087      	sub	sp, #28
 80183fa:	4680      	mov	r8, r0
 80183fc:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8018400:	460d      	mov	r5, r1
 8018402:	4614      	mov	r4, r2
 8018404:	2e00      	cmp	r6, #0
 8018406:	f000 80b9 	beq.w	801857c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801840a:	6810      	ldr	r0, [r2, #0]
 801840c:	6851      	ldr	r1, [r2, #4]
 801840e:	af02      	add	r7, sp, #8
 8018410:	c703      	stmia	r7!, {r0, r1}
 8018412:	6818      	ldr	r0, [r3, #0]
 8018414:	6859      	ldr	r1, [r3, #4]
 8018416:	af04      	add	r7, sp, #16
 8018418:	c703      	stmia	r7!, {r0, r1}
 801841a:	a802      	add	r0, sp, #8
 801841c:	f7f7 fbd0 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018420:	4621      	mov	r1, r4
 8018422:	a804      	add	r0, sp, #16
 8018424:	f7f7 fbf4 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018428:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801842c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018430:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8018434:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8018438:	fb14 2103 	smlabb	r1, r4, r3, r2
 801843c:	eb08 0401 	add.w	r4, r8, r1
 8018440:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018444:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8018448:	440a      	add	r2, r1
 801844a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801844e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018452:	4413      	add	r3, r2
 8018454:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018458:	4b4a      	ldr	r3, [pc, #296]	@ (8018584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801845a:	6818      	ldr	r0, [r3, #0]
 801845c:	6803      	ldr	r3, [r0, #0]
 801845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018460:	4798      	blx	r3
 8018462:	4b49      	ldr	r3, [pc, #292]	@ (8018588 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8018464:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8018468:	881a      	ldrh	r2, [r3, #0]
 801846a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801846e:	2eff      	cmp	r6, #255	@ 0xff
 8018470:	fb02 c101 	mla	r1, r2, r1, ip
 8018474:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018478:	fb02 f207 	mul.w	r2, r2, r7
 801847c:	f105 0104 	add.w	r1, r5, #4
 8018480:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8018484:	461d      	mov	r5, r3
 8018486:	d05a      	beq.n	801853e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8018488:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801848c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018490:	b2b6      	uxth	r6, r6
 8018492:	fa1f fe8e 	uxth.w	lr, lr
 8018496:	9301      	str	r3, [sp, #4]
 8018498:	4282      	cmp	r2, r0
 801849a:	d96a      	bls.n	8018572 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801849c:	eb00 0b0a 	add.w	fp, r0, sl
 80184a0:	4583      	cmp	fp, r0
 80184a2:	d940      	bls.n	8018526 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80184a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184a8:	8805      	ldrh	r5, [r0, #0]
 80184aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80184ae:	122f      	asrs	r7, r5, #8
 80184b0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80184b4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80184b8:	fb17 f70e 	smulbb	r7, r7, lr
 80184bc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80184c0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80184c4:	00ed      	lsls	r5, r5, #3
 80184c6:	fb0c 7c06 	mla	ip, ip, r6, r7
 80184ca:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80184ce:	10df      	asrs	r7, r3, #3
 80184d0:	b2ed      	uxtb	r5, r5
 80184d2:	00db      	lsls	r3, r3, #3
 80184d4:	fa1f fc8c 	uxth.w	ip, ip
 80184d8:	fb19 f90e 	smulbb	r9, r9, lr
 80184dc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80184e0:	b2db      	uxtb	r3, r3
 80184e2:	fb15 f50e 	smulbb	r5, r5, lr
 80184e6:	fb07 9706 	mla	r7, r7, r6, r9
 80184ea:	fb03 5306 	mla	r3, r3, r6, r5
 80184ee:	f10c 0901 	add.w	r9, ip, #1
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80184f8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80184fc:	f103 0c01 	add.w	ip, r3, #1
 8018500:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018504:	b2bf      	uxth	r7, r7
 8018506:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801850a:	ea4c 0c09 	orr.w	ip, ip, r9
 801850e:	f107 0901 	add.w	r9, r7, #1
 8018512:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8018516:	097f      	lsrs	r7, r7, #5
 8018518:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801851c:	ea4c 0c07 	orr.w	ip, ip, r7
 8018520:	f820 cb02 	strh.w	ip, [r0], #2
 8018524:	e7bc      	b.n	80184a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8018526:	9b01      	ldr	r3, [sp, #4]
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	eba3 0308 	sub.w	r3, r3, r8
 801852e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018532:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018536:	eba3 0308 	sub.w	r3, r3, r8
 801853a:	441c      	add	r4, r3
 801853c:	e7ac      	b.n	8018498 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801853e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018542:	4282      	cmp	r2, r0
 8018544:	d915      	bls.n	8018572 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8018546:	eb00 060a 	add.w	r6, r0, sl
 801854a:	4286      	cmp	r6, r0
 801854c:	d906      	bls.n	801855c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801854e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018556:	f820 3b02 	strh.w	r3, [r0], #2
 801855a:	e7f6      	b.n	801854a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801855c:	882b      	ldrh	r3, [r5, #0]
 801855e:	eba3 0308 	sub.w	r3, r3, r8
 8018562:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018566:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801856a:	eba3 0308 	sub.w	r3, r3, r8
 801856e:	441c      	add	r4, r3
 8018570:	e7e7      	b.n	8018542 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8018572:	4b04      	ldr	r3, [pc, #16]	@ (8018584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8018574:	6818      	ldr	r0, [r3, #0]
 8018576:	6803      	ldr	r3, [r0, #0]
 8018578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801857a:	4798      	blx	r3
 801857c:	b007      	add	sp, #28
 801857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018582:	bf00      	nop
 8018584:	2002b02c 	.word	0x2002b02c
 8018588:	2002b026 	.word	0x2002b026

0801858c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018590:	b091      	sub	sp, #68	@ 0x44
 8018592:	4680      	mov	r8, r0
 8018594:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8018598:	460f      	mov	r7, r1
 801859a:	4614      	mov	r4, r2
 801859c:	2d00      	cmp	r5, #0
 801859e:	d051      	beq.n	8018644 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80185a0:	6810      	ldr	r0, [r2, #0]
 80185a2:	6851      	ldr	r1, [r2, #4]
 80185a4:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 80187a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80185a8:	ae0c      	add	r6, sp, #48	@ 0x30
 80185aa:	c603      	stmia	r6!, {r0, r1}
 80185ac:	6818      	ldr	r0, [r3, #0]
 80185ae:	6859      	ldr	r1, [r3, #4]
 80185b0:	ae0e      	add	r6, sp, #56	@ 0x38
 80185b2:	c603      	stmia	r6!, {r0, r1}
 80185b4:	a80c      	add	r0, sp, #48	@ 0x30
 80185b6:	f7f7 fb03 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80185ba:	4621      	mov	r1, r4
 80185bc:	a80e      	add	r0, sp, #56	@ 0x38
 80185be:	f7f7 fb27 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80185c2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80185c6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80185ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80185ce:	f8d9 0000 	ldr.w	r0, [r9]
 80185d2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80185d6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80185da:	fb11 2103 	smlabb	r1, r1, r3, r2
 80185de:	eb08 0401 	add.w	r4, r8, r1
 80185e2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80185e6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 80187ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80185ea:	440a      	add	r2, r1
 80185ec:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80185f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80185f4:	4413      	add	r3, r2
 80185f6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80185fa:	6803      	ldr	r3, [r0, #0]
 80185fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185fe:	4798      	blx	r3
 8018600:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018604:	f8d9 0000 	ldr.w	r0, [r9]
 8018608:	d01f      	beq.n	801864a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801860a:	2200      	movs	r2, #0
 801860c:	6801      	ldr	r1, [r0, #0]
 801860e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018612:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8018616:	220b      	movs	r2, #11
 8018618:	9207      	str	r2, [sp, #28]
 801861a:	f8b8 2000 	ldrh.w	r2, [r8]
 801861e:	9206      	str	r2, [sp, #24]
 8018620:	2201      	movs	r2, #1
 8018622:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8018626:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801862a:	9203      	str	r2, [sp, #12]
 801862c:	fa1f f28a 	uxth.w	r2, sl
 8018630:	9202      	str	r2, [sp, #8]
 8018632:	b2b6      	uxth	r6, r6
 8018634:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018638:	9200      	str	r2, [sp, #0]
 801863a:	9601      	str	r6, [sp, #4]
 801863c:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801863e:	463a      	mov	r2, r7
 8018640:	4621      	mov	r1, r4
 8018642:	47a8      	blx	r5
 8018644:	b011      	add	sp, #68	@ 0x44
 8018646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864a:	6803      	ldr	r3, [r0, #0]
 801864c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801864e:	4798      	blx	r3
 8018650:	f8b8 2000 	ldrh.w	r2, [r8]
 8018654:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018658:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801865c:	2dff      	cmp	r5, #255	@ 0xff
 801865e:	fb02 1303 	mla	r3, r2, r3, r1
 8018662:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018666:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801866a:	fb0a fa02 	mul.w	sl, sl, r2
 801866e:	d062      	beq.n	8018736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8018670:	ea6f 0c05 	mvn.w	ip, r5
 8018674:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8018678:	930a      	str	r3, [sp, #40]	@ 0x28
 801867a:	b2ad      	uxth	r5, r5
 801867c:	fa5f fc8c 	uxtb.w	ip, ip
 8018680:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8018684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018686:	4298      	cmp	r0, r3
 8018688:	f080 8085 	bcs.w	8018796 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801868c:	eb00 0b09 	add.w	fp, r0, r9
 8018690:	4558      	cmp	r0, fp
 8018692:	d246      	bcs.n	8018722 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8018694:	f814 eb01 	ldrb.w	lr, [r4], #1
 8018698:	2303      	movs	r3, #3
 801869a:	2204      	movs	r2, #4
 801869c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80186a0:	eb07 0a0e 	add.w	sl, r7, lr
 80186a4:	8803      	ldrh	r3, [r0, #0]
 80186a6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80186aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80186ae:	1219      	asrs	r1, r3, #8
 80186b0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80186b4:	fb18 f805 	smulbb	r8, r8, r5
 80186b8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80186bc:	10da      	asrs	r2, r3, #3
 80186be:	fb01 810c 	mla	r1, r1, ip, r8
 80186c2:	00db      	lsls	r3, r3, #3
 80186c4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80186c8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	fb18 f805 	smulbb	r8, r8, r5
 80186d2:	fb1e fe05 	smulbb	lr, lr, r5
 80186d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80186da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80186de:	b289      	uxth	r1, r1
 80186e0:	fb02 820c 	mla	r2, r2, ip, r8
 80186e4:	fb03 e30c 	mla	r3, r3, ip, lr
 80186e8:	b292      	uxth	r2, r2
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	f101 0801 	add.w	r8, r1, #1
 80186f0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80186f4:	f103 0e01 	add.w	lr, r3, #1
 80186f8:	f102 0801 	add.w	r8, r2, #1
 80186fc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8018700:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8018704:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8018708:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801870c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018710:	ea4e 0101 	orr.w	r1, lr, r1
 8018714:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8018718:	ea41 0108 	orr.w	r1, r1, r8
 801871c:	f820 1b02 	strh.w	r1, [r0], #2
 8018720:	e7b6      	b.n	8018690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8018722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018724:	881b      	ldrh	r3, [r3, #0]
 8018726:	1b9b      	subs	r3, r3, r6
 8018728:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801872c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018730:	1b9b      	subs	r3, r3, r6
 8018732:	441c      	add	r4, r3
 8018734:	e7a6      	b.n	8018684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8018736:	491b      	ldr	r1, [pc, #108]	@ (80187a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8018738:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801873c:	2203      	movs	r2, #3
 801873e:	2504      	movs	r5, #4
 8018740:	4550      	cmp	r0, sl
 8018742:	d228      	bcs.n	8018796 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8018744:	eb00 0c09 	add.w	ip, r0, r9
 8018748:	4560      	cmp	r0, ip
 801874a:	4623      	mov	r3, r4
 801874c:	d219      	bcs.n	8018782 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801874e:	f893 e000 	ldrb.w	lr, [r3]
 8018752:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8018756:	eb07 0b0e 	add.w	fp, r7, lr
 801875a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801875e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018762:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018766:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801876a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801876e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8018772:	ea43 030b 	orr.w	r3, r3, fp
 8018776:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801877a:	3401      	adds	r4, #1
 801877c:	f820 3b02 	strh.w	r3, [r0], #2
 8018780:	e7e2      	b.n	8018748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8018782:	f8b8 3000 	ldrh.w	r3, [r8]
 8018786:	1b9b      	subs	r3, r3, r6
 8018788:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801878c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018790:	1b9b      	subs	r3, r3, r6
 8018792:	441c      	add	r4, r3
 8018794:	e7d4      	b.n	8018740 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8018796:	4b04      	ldr	r3, [pc, #16]	@ (80187a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8018798:	6818      	ldr	r0, [r3, #0]
 801879a:	6803      	ldr	r3, [r0, #0]
 801879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801879e:	4798      	blx	r3
 80187a0:	e750      	b.n	8018644 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80187a2:	bf00      	nop
 80187a4:	fffff800 	.word	0xfffff800
 80187a8:	2002b02c 	.word	0x2002b02c
 80187ac:	2002b026 	.word	0x2002b026

080187b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80187b0:	b4f0      	push	{r4, r5, r6, r7}
 80187b2:	460c      	mov	r4, r1
 80187b4:	4611      	mov	r1, r2
 80187b6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80187ba:	780f      	ldrb	r7, [r1, #0]
 80187bc:	784e      	ldrb	r6, [r1, #1]
 80187be:	2f01      	cmp	r7, #1
 80187c0:	461a      	mov	r2, r3
 80187c2:	9b04      	ldr	r3, [sp, #16]
 80187c4:	d038      	beq.n	8018838 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80187c6:	d31f      	bcc.n	8018808 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80187c8:	2f02      	cmp	r7, #2
 80187ca:	d14d      	bne.n	8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80187cc:	2e03      	cmp	r6, #3
 80187ce:	d84b      	bhi.n	8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80187d0:	e8df f006 	tbb	[pc, r6]
 80187d4:	17140702 	.word	0x17140702
 80187d8:	9504      	str	r5, [sp, #16]
 80187da:	4620      	mov	r0, r4
 80187dc:	bcf0      	pop	{r4, r5, r6, r7}
 80187de:	f7ff be09 	b.w	80183f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80187e2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80187e4:	2800      	cmp	r0, #0
 80187e6:	d03f      	beq.n	8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80187e8:	6806      	ldr	r6, [r0, #0]
 80187ea:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80187ee:	68b5      	ldr	r5, [r6, #8]
 80187f0:	4613      	mov	r3, r2
 80187f2:	46ac      	mov	ip, r5
 80187f4:	460a      	mov	r2, r1
 80187f6:	4621      	mov	r1, r4
 80187f8:	bcf0      	pop	{r4, r5, r6, r7}
 80187fa:	4760      	bx	ip
 80187fc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8018800:	e7f0      	b.n	80187e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8018802:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8018806:	e7ed      	b.n	80187e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8018808:	2e03      	cmp	r6, #3
 801880a:	d82d      	bhi.n	8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801880c:	e8df f006 	tbb	[pc, r6]
 8018810:	110e0702 	.word	0x110e0702
 8018814:	9504      	str	r5, [sp, #16]
 8018816:	4620      	mov	r0, r4
 8018818:	bcf0      	pop	{r4, r5, r6, r7}
 801881a:	f7ff bd05 	b.w	8018228 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801881e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8018820:	b310      	cbz	r0, 8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8018822:	6806      	ldr	r6, [r0, #0]
 8018824:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8018828:	68f5      	ldr	r5, [r6, #12]
 801882a:	e7e1      	b.n	80187f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801882c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8018830:	e7f6      	b.n	8018820 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8018832:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8018836:	e7f3      	b.n	8018820 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8018838:	2e03      	cmp	r6, #3
 801883a:	d815      	bhi.n	8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801883c:	e8df f006 	tbb	[pc, r6]
 8018840:	110e0702 	.word	0x110e0702
 8018844:	9504      	str	r5, [sp, #16]
 8018846:	4620      	mov	r0, r4
 8018848:	bcf0      	pop	{r4, r5, r6, r7}
 801884a:	f7ff be9f 	b.w	801858c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801884e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8018850:	b150      	cbz	r0, 8018868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8018852:	6806      	ldr	r6, [r0, #0]
 8018854:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8018858:	6935      	ldr	r5, [r6, #16]
 801885a:	e7c9      	b.n	80187f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801885c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8018860:	e7f6      	b.n	8018850 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8018862:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8018866:	e7f3      	b.n	8018850 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8018868:	bcf0      	pop	{r4, r5, r6, r7}
 801886a:	4770      	bx	lr

0801886c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018870:	4604      	mov	r4, r0
 8018872:	b087      	sub	sp, #28
 8018874:	6810      	ldr	r0, [r2, #0]
 8018876:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801887a:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8018ab4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801887e:	460e      	mov	r6, r1
 8018880:	6851      	ldr	r1, [r2, #4]
 8018882:	ad02      	add	r5, sp, #8
 8018884:	c503      	stmia	r5!, {r0, r1}
 8018886:	6818      	ldr	r0, [r3, #0]
 8018888:	6859      	ldr	r1, [r3, #4]
 801888a:	ad04      	add	r5, sp, #16
 801888c:	4617      	mov	r7, r2
 801888e:	c503      	stmia	r5!, {r0, r1}
 8018890:	a802      	add	r0, sp, #8
 8018892:	f7f7 f995 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018896:	4639      	mov	r1, r7
 8018898:	a804      	add	r0, sp, #16
 801889a:	f7f7 f9b9 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801889e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80188a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80188a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80188aa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80188ae:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80188b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80188b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80188ba:	440e      	add	r6, r1
 80188bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80188c0:	440a      	add	r2, r1
 80188c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80188c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80188ca:	4413      	add	r3, r2
 80188cc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80188d0:	4b77      	ldr	r3, [pc, #476]	@ (8018ab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80188d2:	6818      	ldr	r0, [r3, #0]
 80188d4:	6803      	ldr	r3, [r0, #0]
 80188d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188d8:	4798      	blx	r3
 80188da:	f8b9 b000 	ldrh.w	fp, [r9]
 80188de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80188e2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80188e6:	fb0b 2303 	mla	r3, fp, r3, r2
 80188ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80188ee:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80188f2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80188f6:	fb05 f50b 	mul.w	r5, r5, fp
 80188fa:	9300      	str	r3, [sp, #0]
 80188fc:	d069      	beq.n	80189d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80188fe:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8018902:	4558      	cmp	r0, fp
 8018904:	f080 80cc 	bcs.w	8018aa0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8018908:	9b00      	ldr	r3, [sp, #0]
 801890a:	18c3      	adds	r3, r0, r3
 801890c:	9301      	str	r3, [sp, #4]
 801890e:	4631      	mov	r1, r6
 8018910:	9b01      	ldr	r3, [sp, #4]
 8018912:	4298      	cmp	r0, r3
 8018914:	d24f      	bcs.n	80189b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8018916:	f811 2b01 	ldrb.w	r2, [r1], #1
 801891a:	2a00      	cmp	r2, #0
 801891c:	d048      	beq.n	80189b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801891e:	fb0a f202 	mul.w	r2, sl, r2
 8018922:	1c53      	adds	r3, r2, #1
 8018924:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018928:	121b      	asrs	r3, r3, #8
 801892a:	d041      	beq.n	80189b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801892c:	8802      	ldrh	r2, [r0, #0]
 801892e:	f8b4 c000 	ldrh.w	ip, [r4]
 8018932:	b29e      	uxth	r6, r3
 8018934:	1215      	asrs	r5, r2, #8
 8018936:	43db      	mvns	r3, r3
 8018938:	b2db      	uxtb	r3, r3
 801893a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801893e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8018942:	fb15 f503 	smulbb	r5, r5, r3
 8018946:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801894a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801894e:	00d2      	lsls	r2, r2, #3
 8018950:	fb07 5706 	mla	r7, r7, r6, r5
 8018954:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8018958:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801895c:	b2d2      	uxtb	r2, r2
 801895e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018962:	b2bf      	uxth	r7, r7
 8018964:	fb1e fe03 	smulbb	lr, lr, r3
 8018968:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801896c:	fa5f fc8c 	uxtb.w	ip, ip
 8018970:	fb12 f203 	smulbb	r2, r2, r3
 8018974:	fb05 e506 	mla	r5, r5, r6, lr
 8018978:	fb0c 2c06 	mla	ip, ip, r6, r2
 801897c:	f107 0e01 	add.w	lr, r7, #1
 8018980:	fa1f fc8c 	uxth.w	ip, ip
 8018984:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018988:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801898c:	f10c 0701 	add.w	r7, ip, #1
 8018990:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018994:	b2ad      	uxth	r5, r5
 8018996:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801899a:	ea47 070e 	orr.w	r7, r7, lr
 801899e:	f105 0e01 	add.w	lr, r5, #1
 80189a2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80189a6:	096d      	lsrs	r5, r5, #5
 80189a8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80189ac:	432f      	orrs	r7, r5
 80189ae:	8007      	strh	r7, [r0, #0]
 80189b0:	3002      	adds	r0, #2
 80189b2:	3402      	adds	r4, #2
 80189b4:	e7ac      	b.n	8018910 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80189b6:	f8b9 3000 	ldrh.w	r3, [r9]
 80189ba:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80189be:	eba3 0308 	sub.w	r3, r3, r8
 80189c2:	eba6 0608 	sub.w	r6, r6, r8
 80189c6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80189ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80189ce:	440e      	add	r6, r1
 80189d0:	e797      	b.n	8018902 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80189d2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80189d6:	42a8      	cmp	r0, r5
 80189d8:	d262      	bcs.n	8018aa0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80189da:	9b00      	ldr	r3, [sp, #0]
 80189dc:	4631      	mov	r1, r6
 80189de:	eb00 0b03 	add.w	fp, r0, r3
 80189e2:	4558      	cmp	r0, fp
 80189e4:	d24e      	bcs.n	8018a84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80189e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189ea:	b12b      	cbz	r3, 80189f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80189ec:	2bff      	cmp	r3, #255	@ 0xff
 80189ee:	f8b4 e000 	ldrh.w	lr, [r4]
 80189f2:	d104      	bne.n	80189fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80189f4:	f8a0 e000 	strh.w	lr, [r0]
 80189f8:	3002      	adds	r0, #2
 80189fa:	3402      	adds	r4, #2
 80189fc:	e7f1      	b.n	80189e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80189fe:	8802      	ldrh	r2, [r0, #0]
 8018a00:	b29f      	uxth	r7, r3
 8018a02:	1216      	asrs	r6, r2, #8
 8018a04:	43db      	mvns	r3, r3
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018a0c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8018a10:	fb16 f603 	smulbb	r6, r6, r3
 8018a14:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8018a18:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8018a1c:	00d2      	lsls	r2, r2, #3
 8018a1e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018a22:	b2d2      	uxtb	r2, r2
 8018a24:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018a28:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8018a2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018a30:	fb1a fa03 	smulbb	sl, sl, r3
 8018a34:	fa1f fc8c 	uxth.w	ip, ip
 8018a38:	fb12 f303 	smulbb	r3, r2, r3
 8018a3c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8018a40:	fa5f fe8e 	uxtb.w	lr, lr
 8018a44:	fb06 a607 	mla	r6, r6, r7, sl
 8018a48:	f10c 0201 	add.w	r2, ip, #1
 8018a4c:	fb0e 3307 	mla	r3, lr, r7, r3
 8018a50:	b2b6      	uxth	r6, r6
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018a58:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8018a5c:	f106 0a01 	add.w	sl, r6, #1
 8018a60:	f103 0c01 	add.w	ip, r3, #1
 8018a64:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018a68:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8018a6c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018a70:	0976      	lsrs	r6, r6, #5
 8018a72:	ea4c 0c02 	orr.w	ip, ip, r2
 8018a76:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8018a7a:	ea4c 0c06 	orr.w	ip, ip, r6
 8018a7e:	f8a0 c000 	strh.w	ip, [r0]
 8018a82:	e7b9      	b.n	80189f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8018a84:	f8b9 3000 	ldrh.w	r3, [r9]
 8018a88:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8018a8c:	eba3 0308 	sub.w	r3, r3, r8
 8018a90:	eba6 0608 	sub.w	r6, r6, r8
 8018a94:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8018a98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018a9c:	440e      	add	r6, r1
 8018a9e:	e79a      	b.n	80189d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8018aa0:	4b03      	ldr	r3, [pc, #12]	@ (8018ab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8018aa2:	6818      	ldr	r0, [r3, #0]
 8018aa4:	6803      	ldr	r3, [r0, #0]
 8018aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018aa8:	4798      	blx	r3
 8018aaa:	b007      	add	sp, #28
 8018aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab0:	2002b02c 	.word	0x2002b02c
 8018ab4:	2002b026 	.word	0x2002b026

08018ab8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018abc:	b089      	sub	sp, #36	@ 0x24
 8018abe:	4607      	mov	r7, r0
 8018ac0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8018ac4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018ac6:	4688      	mov	r8, r1
 8018ac8:	4692      	mov	sl, r2
 8018aca:	4699      	mov	r9, r3
 8018acc:	2e00      	cmp	r6, #0
 8018ace:	d048      	beq.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	f7fa f827 	bl	8012b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018ad6:	4605      	mov	r5, r0
 8018ad8:	4640      	mov	r0, r8
 8018ada:	f7fa f857 	bl	8012b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018ade:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018ae2:	4640      	mov	r0, r8
 8018ae4:	f8ad a008 	strh.w	sl, [sp, #8]
 8018ae8:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018aec:	f8ad 900a 	strh.w	r9, [sp, #10]
 8018af0:	f7fa f90a 	bl	8012d08 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018af4:	4605      	mov	r5, r0
 8018af6:	4640      	mov	r0, r8
 8018af8:	f7fa f936 	bl	8012d68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018afc:	4682      	mov	sl, r0
 8018afe:	4640      	mov	r0, r8
 8018b00:	f7fa f986 	bl	8012e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018b04:	2810      	cmp	r0, #16
 8018b06:	d82c      	bhi.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018b08:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018b0c:	00ba00ca 	.word	0x00ba00ca
 8018b10:	002b0011 	.word	0x002b0011
 8018b14:	002b002b 	.word	0x002b002b
 8018b18:	002b002b 	.word	0x002b002b
 8018b1c:	002b002b 	.word	0x002b002b
 8018b20:	00c1002b 	.word	0x00c1002b
 8018b24:	002b002b 	.word	0x002b002b
 8018b28:	002b0180 	.word	0x002b0180
 8018b2c:	0173      	.short	0x0173
 8018b2e:	4bbc      	ldr	r3, [pc, #752]	@ (8018e20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8018b30:	6818      	ldr	r0, [r3, #0]
 8018b32:	6803      	ldr	r3, [r0, #0]
 8018b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018b36:	4798      	blx	r3
 8018b38:	2eff      	cmp	r6, #255	@ 0xff
 8018b3a:	d101      	bne.n	8018b40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8018b3c:	0683      	lsls	r3, r0, #26
 8018b3e:	d506      	bpl.n	8018b4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8018b40:	4633      	mov	r3, r6
 8018b42:	4622      	mov	r2, r4
 8018b44:	a902      	add	r1, sp, #8
 8018b46:	4628      	mov	r0, r5
 8018b48:	f7ff f8fc 	bl	8017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018b4c:	e009      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018b4e:	4640      	mov	r0, r8
 8018b50:	f7fa f8a2 	bl	8012c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8018b54:	b940      	cbnz	r0, 8018b68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8018b56:	4623      	mov	r3, r4
 8018b58:	aa02      	add	r2, sp, #8
 8018b5a:	4629      	mov	r1, r5
 8018b5c:	4638      	mov	r0, r7
 8018b5e:	f7ff f9d7 	bl	8017f10 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8018b62:	b009      	add	sp, #36	@ 0x24
 8018b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b68:	f10d 0918 	add.w	r9, sp, #24
 8018b6c:	4641      	mov	r1, r8
 8018b6e:	4648      	mov	r0, r9
 8018b70:	f7fa f840 	bl	8012bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018b74:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018b78:	f10d 0810 	add.w	r8, sp, #16
 8018b7c:	e888 0003 	stmia.w	r8, {r0, r1}
 8018b80:	4640      	mov	r0, r8
 8018b82:	4621      	mov	r1, r4
 8018b84:	f7f4 fabc 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8018b88:	4640      	mov	r0, r8
 8018b8a:	f7f4 fafc 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b8e:	2800      	cmp	r0, #0
 8018b90:	d1d6      	bne.n	8018b40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8018b92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018b96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018b9a:	4293      	cmp	r3, r2
 8018b9c:	dd12      	ble.n	8018bc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8018b9e:	1a9b      	subs	r3, r3, r2
 8018ba0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018ba4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ba8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8018bac:	f8ad 201a 	strh.w	r2, [sp, #26]
 8018bb0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018bb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018bb8:	464a      	mov	r2, r9
 8018bba:	4633      	mov	r3, r6
 8018bbc:	a902      	add	r1, sp, #8
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	f7ff f8c0 	bl	8017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018bc4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018bc8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	dd12      	ble.n	8018bf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8018bd0:	1a9b      	subs	r3, r3, r2
 8018bd2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018bd6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8018bda:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018bde:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018be2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018be6:	f8ad 101e 	strh.w	r1, [sp, #30]
 8018bea:	23ff      	movs	r3, #255	@ 0xff
 8018bec:	464a      	mov	r2, r9
 8018bee:	a902      	add	r1, sp, #8
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	f7ff f8a7 	bl	8017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018bf6:	4643      	mov	r3, r8
 8018bf8:	aa02      	add	r2, sp, #8
 8018bfa:	4629      	mov	r1, r5
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	f7ff f987 	bl	8017f10 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8018c02:	88a2      	ldrh	r2, [r4, #4]
 8018c04:	8823      	ldrh	r3, [r4, #0]
 8018c06:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018c0a:	4413      	add	r3, r2
 8018c0c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018c10:	440a      	add	r2, r1
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	b292      	uxth	r2, r2
 8018c16:	b211      	sxth	r1, r2
 8018c18:	b218      	sxth	r0, r3
 8018c1a:	4288      	cmp	r0, r1
 8018c1c:	dd12      	ble.n	8018c44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8018c1e:	1a9b      	subs	r3, r3, r2
 8018c20:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8018c24:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8018c28:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018c2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018c30:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018c34:	23ff      	movs	r3, #255	@ 0xff
 8018c36:	464a      	mov	r2, r9
 8018c38:	a902      	add	r1, sp, #8
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8018c40:	f7ff f880 	bl	8017d44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018c44:	88e2      	ldrh	r2, [r4, #6]
 8018c46:	8863      	ldrh	r3, [r4, #2]
 8018c48:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8018c4c:	4413      	add	r3, r2
 8018c4e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8018c52:	440a      	add	r2, r1
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	b292      	uxth	r2, r2
 8018c58:	b211      	sxth	r1, r2
 8018c5a:	b218      	sxth	r0, r3
 8018c5c:	4288      	cmp	r0, r1
 8018c5e:	dd80      	ble.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018c60:	1a9b      	subs	r3, r3, r2
 8018c62:	f9b4 6000 	ldrsh.w	r6, [r4]
 8018c66:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018c6a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018c6e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018c72:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018c76:	f8ad 001c 	strh.w	r0, [sp, #28]
 8018c7a:	23ff      	movs	r3, #255	@ 0xff
 8018c7c:	464a      	mov	r2, r9
 8018c7e:	e761      	b.n	8018b44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8018c80:	4633      	mov	r3, r6
 8018c82:	4622      	mov	r2, r4
 8018c84:	a902      	add	r1, sp, #8
 8018c86:	4628      	mov	r0, r5
 8018c88:	f7ff f9b2 	bl	8017ff0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8018c8c:	e769      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018c8e:	e9cd 4600 	strd	r4, r6, [sp]
 8018c92:	ab02      	add	r3, sp, #8
 8018c94:	4652      	mov	r2, sl
 8018c96:	4629      	mov	r1, r5
 8018c98:	4638      	mov	r0, r7
 8018c9a:	f7ff fd89 	bl	80187b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8018c9e:	e760      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018ca0:	4640      	mov	r0, r8
 8018ca2:	f7f9 fff9 	bl	8012c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8018ca6:	b948      	cbnz	r0, 8018cbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	e9cd 6000 	strd	r6, r0, [sp]
 8018cae:	aa02      	add	r2, sp, #8
 8018cb0:	68de      	ldr	r6, [r3, #12]
 8018cb2:	4629      	mov	r1, r5
 8018cb4:	4623      	mov	r3, r4
 8018cb6:	4638      	mov	r0, r7
 8018cb8:	47b0      	blx	r6
 8018cba:	e752      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018cbc:	f10d 0918 	add.w	r9, sp, #24
 8018cc0:	4641      	mov	r1, r8
 8018cc2:	4648      	mov	r0, r9
 8018cc4:	f7f9 ff96 	bl	8012bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018cc8:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018ccc:	f10d 0810 	add.w	r8, sp, #16
 8018cd0:	e888 0003 	stmia.w	r8, {r0, r1}
 8018cd4:	4640      	mov	r0, r8
 8018cd6:	4621      	mov	r1, r4
 8018cd8:	f7f4 fa12 	bl	800d100 <_ZN8touchgfx4RectaNERKS0_>
 8018cdc:	4640      	mov	r0, r8
 8018cde:	f7f4 fa52 	bl	800d186 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ce2:	b138      	cbz	r0, 8018cf4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8018ce4:	9600      	str	r6, [sp, #0]
 8018ce6:	4623      	mov	r3, r4
 8018ce8:	aa02      	add	r2, sp, #8
 8018cea:	4651      	mov	r1, sl
 8018cec:	4628      	mov	r0, r5
 8018cee:	f7ff fdbd 	bl	801886c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018cf2:	e736      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	e9cd 6000 	strd	r6, r0, [sp]
 8018cfa:	aa02      	add	r2, sp, #8
 8018cfc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8018d00:	4629      	mov	r1, r5
 8018d02:	4643      	mov	r3, r8
 8018d04:	4638      	mov	r0, r7
 8018d06:	47d8      	blx	fp
 8018d08:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018d0c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018d10:	4293      	cmp	r3, r2
 8018d12:	dd13      	ble.n	8018d3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8018d14:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018d18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018d1c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8018d20:	1a9b      	subs	r3, r3, r2
 8018d22:	f8ad 201a 	strh.w	r2, [sp, #26]
 8018d26:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018d2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018d2e:	9600      	str	r6, [sp, #0]
 8018d30:	464b      	mov	r3, r9
 8018d32:	aa02      	add	r2, sp, #8
 8018d34:	4651      	mov	r1, sl
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7ff fd98 	bl	801886c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018d3c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018d40:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018d44:	4293      	cmp	r3, r2
 8018d46:	dd13      	ble.n	8018d70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8018d48:	1a9b      	subs	r3, r3, r2
 8018d4a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018d4e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8018d52:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018d56:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018d5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d5e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8018d62:	9600      	str	r6, [sp, #0]
 8018d64:	464b      	mov	r3, r9
 8018d66:	aa02      	add	r2, sp, #8
 8018d68:	4651      	mov	r1, sl
 8018d6a:	4628      	mov	r0, r5
 8018d6c:	f7ff fd7e 	bl	801886c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018d70:	88a2      	ldrh	r2, [r4, #4]
 8018d72:	8823      	ldrh	r3, [r4, #0]
 8018d74:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018d78:	4413      	add	r3, r2
 8018d7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018d7e:	440a      	add	r2, r1
 8018d80:	b29b      	uxth	r3, r3
 8018d82:	b292      	uxth	r2, r2
 8018d84:	b211      	sxth	r1, r2
 8018d86:	b218      	sxth	r0, r3
 8018d88:	4288      	cmp	r0, r1
 8018d8a:	dd13      	ble.n	8018db4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8018d8c:	1a9b      	subs	r3, r3, r2
 8018d8e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8018d92:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8018d96:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018d9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d9e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018da2:	9600      	str	r6, [sp, #0]
 8018da4:	464b      	mov	r3, r9
 8018da6:	aa02      	add	r2, sp, #8
 8018da8:	4651      	mov	r1, sl
 8018daa:	4628      	mov	r0, r5
 8018dac:	f8ad 701a 	strh.w	r7, [sp, #26]
 8018db0:	f7ff fd5c 	bl	801886c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018db4:	88e2      	ldrh	r2, [r4, #6]
 8018db6:	8863      	ldrh	r3, [r4, #2]
 8018db8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8018dc2:	440a      	add	r2, r1
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	b292      	uxth	r2, r2
 8018dc8:	b211      	sxth	r1, r2
 8018dca:	b218      	sxth	r0, r3
 8018dcc:	4288      	cmp	r0, r1
 8018dce:	f77f aec8 	ble.w	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018dd2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8018dd6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018dda:	f8ad 7018 	strh.w	r7, [sp, #24]
 8018dde:	1a9b      	subs	r3, r3, r2
 8018de0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018de4:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018de8:	f8ad 001c 	strh.w	r0, [sp, #28]
 8018dec:	9600      	str	r6, [sp, #0]
 8018dee:	464b      	mov	r3, r9
 8018df0:	e77a      	b.n	8018ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8018df2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8018df6:	2800      	cmp	r0, #0
 8018df8:	f43f aeb3 	beq.w	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018dfc:	6803      	ldr	r3, [r0, #0]
 8018dfe:	9600      	str	r6, [sp, #0]
 8018e00:	68de      	ldr	r6, [r3, #12]
 8018e02:	4623      	mov	r3, r4
 8018e04:	aa02      	add	r2, sp, #8
 8018e06:	4629      	mov	r1, r5
 8018e08:	47b0      	blx	r6
 8018e0a:	e6aa      	b.n	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018e0c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8018e10:	2800      	cmp	r0, #0
 8018e12:	f43f aea6 	beq.w	8018b62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8018e16:	6803      	ldr	r3, [r0, #0]
 8018e18:	9600      	str	r6, [sp, #0]
 8018e1a:	689e      	ldr	r6, [r3, #8]
 8018e1c:	e7f1      	b.n	8018e02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8018e1e:	bf00      	nop
 8018e20:	2002b02c 	.word	0x2002b02c

08018e24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8018e24:	b180      	cbz	r0, 8018e48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8018e26:	2903      	cmp	r1, #3
 8018e28:	d81c      	bhi.n	8018e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8018e2a:	e8df f001 	tbb	[pc, r1]
 8018e2e:	1d02      	.short	0x1d02
 8018e30:	1f08      	.short	0x1f08
 8018e32:	4b10      	ldr	r3, [pc, #64]	@ (8018e74 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8018e34:	8818      	ldrh	r0, [r3, #0]
 8018e36:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018e3a:	4240      	negs	r0, r0
 8018e3c:	4770      	bx	lr
 8018e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8018e74 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8018e40:	8818      	ldrh	r0, [r3, #0]
 8018e42:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018e46:	4770      	bx	lr
 8018e48:	2903      	cmp	r1, #3
 8018e4a:	d80b      	bhi.n	8018e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8018e4c:	a301      	add	r3, pc, #4	@ (adr r3, 8018e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8018e4e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8018e52:	bf00      	nop
 8018e54:	08018e69 	.word	0x08018e69
 8018e58:	08018e3f 	.word	0x08018e3f
 8018e5c:	08018e6d 	.word	0x08018e6d
 8018e60:	08018e33 	.word	0x08018e33
 8018e64:	2000      	movs	r0, #0
 8018e66:	4770      	bx	lr
 8018e68:	2001      	movs	r0, #1
 8018e6a:	4770      	bx	lr
 8018e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e70:	4770      	bx	lr
 8018e72:	bf00      	nop
 8018e74:	2002b026 	.word	0x2002b026

08018e78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8018e78:	b180      	cbz	r0, 8018e9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8018e7a:	2903      	cmp	r1, #3
 8018e7c:	d81c      	bhi.n	8018eb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8018e7e:	e8df f001 	tbb	[pc, r1]
 8018e82:	021d      	.short	0x021d
 8018e84:	071f      	.short	0x071f
 8018e86:	4b10      	ldr	r3, [pc, #64]	@ (8018ec8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8018e88:	8818      	ldrh	r0, [r3, #0]
 8018e8a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018e8e:	4770      	bx	lr
 8018e90:	4b0d      	ldr	r3, [pc, #52]	@ (8018ec8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8018e92:	8818      	ldrh	r0, [r3, #0]
 8018e94:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018e98:	4240      	negs	r0, r0
 8018e9a:	4770      	bx	lr
 8018e9c:	2903      	cmp	r1, #3
 8018e9e:	d80b      	bhi.n	8018eb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8018ea0:	a301      	add	r3, pc, #4	@ (adr r3, 8018ea8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8018ea2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8018ea6:	bf00      	nop
 8018ea8:	08018e87 	.word	0x08018e87
 8018eac:	08018ec1 	.word	0x08018ec1
 8018eb0:	08018e91 	.word	0x08018e91
 8018eb4:	08018ebd 	.word	0x08018ebd
 8018eb8:	2000      	movs	r0, #0
 8018eba:	4770      	bx	lr
 8018ebc:	2001      	movs	r0, #1
 8018ebe:	4770      	bx	lr
 8018ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ec4:	4770      	bx	lr
 8018ec6:	bf00      	nop
 8018ec8:	2002b026 	.word	0x2002b026

08018ecc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed0:	b099      	sub	sp, #100	@ 0x64
 8018ed2:	910d      	str	r1, [sp, #52]	@ 0x34
 8018ed4:	a914      	add	r1, sp, #80	@ 0x50
 8018ed6:	e881 000c 	stmia.w	r1, {r2, r3}
 8018eda:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8018ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ee0:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8018ee4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8018ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8018eea:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8018eee:	9308      	str	r3, [sp, #32]
 8018ef0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8018ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ef6:	7b4b      	ldrb	r3, [r1, #13]
 8018ef8:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8018efc:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8018f00:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8018f04:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8018f06:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8018f0a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8018f0e:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8018f12:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8018f16:	f891 8006 	ldrb.w	r8, [r1, #6]
 8018f1a:	ea58 0800 	orrs.w	r8, r8, r0
 8018f1e:	f000 81ce 	beq.w	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8018f22:	011b      	lsls	r3, r3, #4
 8018f24:	79c8      	ldrb	r0, [r1, #7]
 8018f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018f2a:	4303      	orrs	r3, r0
 8018f2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f2e:	f000 81c6 	beq.w	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8018f32:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8018f36:	b29b      	uxth	r3, r3
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	f000 812c 	beq.w	8019196 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 8018f3e:	1aed      	subs	r5, r5, r3
 8018f40:	b2ad      	uxth	r5, r5
 8018f42:	0429      	lsls	r1, r5, #16
 8018f44:	d502      	bpl.n	8018f4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8018f46:	1b64      	subs	r4, r4, r5
 8018f48:	b224      	sxth	r4, r4
 8018f4a:	2500      	movs	r5, #0
 8018f4c:	f9b2 0000 	ldrsh.w	r0, [r2]
 8018f50:	8891      	ldrh	r1, [r2, #4]
 8018f52:	4284      	cmp	r4, r0
 8018f54:	b283      	uxth	r3, r0
 8018f56:	bfb8      	it	lt
 8018f58:	18ed      	addlt	r5, r5, r3
 8018f5a:	440b      	add	r3, r1
 8018f5c:	b21b      	sxth	r3, r3
 8018f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f60:	88d3      	ldrh	r3, [r2, #6]
 8018f62:	8852      	ldrh	r2, [r2, #2]
 8018f64:	4413      	add	r3, r2
 8018f66:	b21b      	sxth	r3, r3
 8018f68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018f6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8018f6e:	bfb8      	it	lt
 8018f70:	1b2c      	sublt	r4, r5, r4
 8018f72:	4bb5      	ldr	r3, [pc, #724]	@ (8019248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8018f74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f76:	f893 b000 	ldrb.w	fp, [r3]
 8018f7a:	bfbc      	itt	lt
 8018f7c:	b2a5      	uxthlt	r5, r4
 8018f7e:	4604      	movlt	r4, r0
 8018f80:	4653      	mov	r3, sl
 8018f82:	4621      	mov	r1, r4
 8018f84:	a814      	add	r0, sp, #80	@ 0x50
 8018f86:	f7f6 fc90 	bl	800f8aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8018f90:	4653      	mov	r3, sl
 8018f92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f94:	a814      	add	r0, sp, #80	@ 0x50
 8018f96:	f7f6 fca5 	bl	800f8e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8018f9a:	a918      	add	r1, sp, #96	@ 0x60
 8018f9c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8018fa0:	a817      	add	r0, sp, #92	@ 0x5c
 8018fa2:	f7f6 fdcb 	bl	800fb3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8018fa6:	f1ba 0f00 	cmp.w	sl, #0
 8018faa:	f040 80f7 	bne.w	801919c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 8018fae:	f1bb 0f01 	cmp.w	fp, #1
 8018fb2:	f040 80fb 	bne.w	80191ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8018fb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	f040 81a8 	bne.w	801930e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x442>
 8018fbe:	fa1f f288 	uxth.w	r2, r8
 8018fc2:	b905      	cbnz	r5, 8018fc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8018fc4:	b15e      	cbz	r6, 8018fde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8018fc6:	9808      	ldr	r0, [sp, #32]
 8018fc8:	fb06 5302 	mla	r3, r6, r2, r5
 8018fcc:	4343      	muls	r3, r0
 8018fce:	4631      	mov	r1, r6
 8018fd0:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8018fd4:	f003 0607 	and.w	r6, r3, #7
 8018fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018fda:	1a5b      	subs	r3, r3, r1
 8018fdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8018fde:	f10b 31ff 	add.w	r1, fp, #4294967295
 8018fe2:	424b      	negs	r3, r1
 8018fe4:	414b      	adcs	r3, r1
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	4651      	mov	r1, sl
 8018fea:	930c      	str	r3, [sp, #48]	@ 0x30
 8018fec:	f7ff ff1a 	bl	8018e24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8018ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ff2:	4683      	mov	fp, r0
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7ff ff3f 	bl	8018e78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8018ffa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019000:	eba1 0a00 	sub.w	sl, r1, r0
 8019004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019006:	458a      	cmp	sl, r1
 8019008:	bfa8      	it	ge
 801900a:	468a      	movge	sl, r1
 801900c:	f1ba 0f00 	cmp.w	sl, #0
 8019010:	f340 8155 	ble.w	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8019014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019016:	1b64      	subs	r4, r4, r5
 8019018:	1b0c      	subs	r4, r1, r4
 801901a:	4544      	cmp	r4, r8
 801901c:	bfd4      	ite	le
 801901e:	ebc5 0504 	rsble	r5, r5, r4
 8019022:	ebc5 0508 	rsbgt	r5, r5, r8
 8019026:	2d00      	cmp	r5, #0
 8019028:	f340 8149 	ble.w	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 801902c:	9908      	ldr	r1, [sp, #32]
 801902e:	1b52      	subs	r2, r2, r5
 8019030:	434a      	muls	r2, r1
 8019032:	920e      	str	r2, [sp, #56]	@ 0x38
 8019034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019036:	2a00      	cmp	r2, #0
 8019038:	f040 8175 	bne.w	8019326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 801903c:	4a83      	ldr	r2, [pc, #524]	@ (801924c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801903e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019040:	6810      	ldr	r0, [r2, #0]
 8019042:	6802      	ldr	r2, [r0, #0]
 8019044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019046:	4790      	blx	r2
 8019048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801904a:	9908      	ldr	r1, [sp, #32]
 801904c:	2201      	movs	r2, #1
 801904e:	408a      	lsls	r2, r1
 8019050:	3a01      	subs	r2, #1
 8019052:	497f      	ldr	r1, [pc, #508]	@ (8019250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8019054:	b2d2      	uxtb	r2, r2
 8019056:	880c      	ldrh	r4, [r1, #0]
 8019058:	920c      	str	r2, [sp, #48]	@ 0x30
 801905a:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 801905e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8019062:	fb04 1202 	mla	r2, r4, r2, r1
 8019066:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801906a:	ea4f 2419 	mov.w	r4, r9, lsr #8
 801906e:	920a      	str	r2, [sp, #40]	@ 0x28
 8019070:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8019074:	9212      	str	r2, [sp, #72]	@ 0x48
 8019076:	b2e2      	uxtb	r2, r4
 8019078:	9211      	str	r2, [sp, #68]	@ 0x44
 801907a:	fa5f f289 	uxtb.w	r2, r9
 801907e:	9210      	str	r2, [sp, #64]	@ 0x40
 8019080:	4a74      	ldr	r2, [pc, #464]	@ (8019254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019082:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8019086:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801908a:	4022      	ands	r2, r4
 801908c:	430a      	orrs	r2, r1
 801908e:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 8019092:	ea42 0209 	orr.w	r2, r2, r9
 8019096:	ea4f 014b 	mov.w	r1, fp, lsl #1
 801909a:	b292      	uxth	r2, r2
 801909c:	fb05 3b1b 	mls	fp, r5, fp, r3
 80190a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80190a2:	460b      	mov	r3, r1
 80190a4:	783a      	ldrb	r2, [r7, #0]
 80190a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80190a8:	436b      	muls	r3, r5
 80190aa:	4132      	asrs	r2, r6
 80190ac:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 80190b0:	b2d2      	uxtb	r2, r2
 80190b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80190b4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80190b8:	f0c0 8149 	bcc.w	801934e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x482>
 80190bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80190c0:	46a9      	mov	r9, r5
 80190c2:	f119 39ff 	adds.w	r9, r9, #4294967295
 80190c6:	f0c0 8132 	bcc.w	801932e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 80190ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190cc:	4013      	ands	r3, r2
 80190ce:	d054      	beq.n	801917a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 80190d0:	20ff      	movs	r0, #255	@ 0xff
 80190d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80190d4:	fb90 f1f1 	sdiv	r1, r0, r1
 80190d8:	434b      	muls	r3, r1
 80190da:	2bfe      	cmp	r3, #254	@ 0xfe
 80190dc:	dd03      	ble.n	80190e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 80190de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80190e0:	4281      	cmp	r1, r0
 80190e2:	f000 8122 	beq.w	801932a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 80190e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80190e8:	f8b8 4000 	ldrh.w	r4, [r8]
 80190ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80190ee:	fb11 f303 	smulbb	r3, r1, r3
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	1c59      	adds	r1, r3, #1
 80190f6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80190fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80190fe:	fa1f fe83 	uxth.w	lr, r3
 8019102:	1221      	asrs	r1, r4, #8
 8019104:	fb10 fb0e 	smulbb	fp, r0, lr
 8019108:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801910c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801910e:	43db      	mvns	r3, r3
 8019110:	b2db      	uxtb	r3, r3
 8019112:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8019116:	fb01 b103 	mla	r1, r1, r3, fp
 801911a:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 801911e:	fb10 fb0e 	smulbb	fp, r0, lr
 8019122:	00e4      	lsls	r4, r4, #3
 8019124:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019126:	b2e4      	uxtb	r4, r4
 8019128:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801912c:	fb10 fe0e 	smulbb	lr, r0, lr
 8019130:	fb04 e403 	mla	r4, r4, r3, lr
 8019134:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8019138:	b289      	uxth	r1, r1
 801913a:	b2a4      	uxth	r4, r4
 801913c:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8019140:	fb0c bc03 	mla	ip, ip, r3, fp
 8019144:	1c4b      	adds	r3, r1, #1
 8019146:	f104 0b01 	add.w	fp, r4, #1
 801914a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801914e:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 8019152:	fa1f fc8c 	uxth.w	ip, ip
 8019156:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801915a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801915e:	ea4b 0101 	orr.w	r1, fp, r1
 8019162:	f10c 0b01 	add.w	fp, ip, #1
 8019166:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 801916a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801916e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8019172:	ea41 010b 	orr.w	r1, r1, fp
 8019176:	f8a8 1000 	strh.w	r1, [r8]
 801917a:	9b08      	ldr	r3, [sp, #32]
 801917c:	441e      	add	r6, r3
 801917e:	b2b6      	uxth	r6, r6
 8019180:	2e07      	cmp	r6, #7
 8019182:	bf98      	it	ls
 8019184:	411a      	asrls	r2, r3
 8019186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019188:	bf89      	itett	hi
 801918a:	787a      	ldrbhi	r2, [r7, #1]
 801918c:	b2d2      	uxtbls	r2, r2
 801918e:	3701      	addhi	r7, #1
 8019190:	2600      	movhi	r6, #0
 8019192:	4498      	add	r8, r3
 8019194:	e795      	b.n	80190c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 8019196:	441c      	add	r4, r3
 8019198:	b224      	sxth	r4, r4
 801919a:	e6d7      	b.n	8018f4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 801919c:	f1ba 0f01 	cmp.w	sl, #1
 80191a0:	f47f af09 	bne.w	8018fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 80191a4:	f1bb 0f01 	cmp.w	fp, #1
 80191a8:	f47f af05 	bne.w	8018fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 80191ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80191b0:	1a99      	subs	r1, r3, r2
 80191b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80191b4:	1b9b      	subs	r3, r3, r6
 80191b6:	4299      	cmp	r1, r3
 80191b8:	bfa8      	it	ge
 80191ba:	4619      	movge	r1, r3
 80191bc:	2900      	cmp	r1, #0
 80191be:	9112      	str	r1, [sp, #72]	@ 0x48
 80191c0:	dd7d      	ble.n	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 80191c2:	4a22      	ldr	r2, [pc, #136]	@ (801924c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80191c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80191c6:	6810      	ldr	r0, [r2, #0]
 80191c8:	6803      	ldr	r3, [r0, #0]
 80191ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191cc:	4798      	blx	r3
 80191ce:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80191d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80191d4:	d006      	beq.n	80191e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80191d6:	9b08      	ldr	r3, [sp, #32]
 80191d8:	2b04      	cmp	r3, #4
 80191da:	d133      	bne.n	8019244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80191dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80191de:	3300      	adds	r3, #0
 80191e0:	bf18      	it	ne
 80191e2:	2301      	movne	r3, #1
 80191e4:	0582      	lsls	r2, r0, #22
 80191e6:	fa1f fc88 	uxth.w	ip, r8
 80191ea:	f140 80b9 	bpl.w	8019360 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 80191ee:	9808      	ldr	r0, [sp, #32]
 80191f0:	2808      	cmp	r0, #8
 80191f2:	f040 80b5 	bne.w	8019360 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d064      	beq.n	80192c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f8>
 80191fa:	f10c 0c01 	add.w	ip, ip, #1
 80191fe:	f02c 0301 	bic.w	r3, ip, #1
 8019202:	b29b      	uxth	r3, r3
 8019204:	bb45      	cbnz	r5, 8019258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019206:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019208:	eb08 0004 	add.w	r0, r8, r4
 801920c:	4290      	cmp	r0, r2
 801920e:	dc23      	bgt.n	8019258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019212:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8019216:	6810      	ldr	r0, [r2, #0]
 8019218:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801921c:	6804      	ldr	r4, [r0, #0]
 801921e:	9506      	str	r5, [sp, #24]
 8019220:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8019224:	9505      	str	r5, [sp, #20]
 8019226:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019228:	9302      	str	r3, [sp, #8]
 801922a:	b289      	uxth	r1, r1
 801922c:	e9cd 3100 	strd	r3, r1, [sp]
 8019230:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019234:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019238:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801923a:	4673      	mov	r3, lr
 801923c:	fb06 710c 	mla	r1, r6, ip, r7
 8019240:	47a0      	blx	r4
 8019242:	e03c      	b.n	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8019244:	2300      	movs	r3, #0
 8019246:	e7cd      	b.n	80191e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8019248:	2002b024 	.word	0x2002b024
 801924c:	2002b02c 	.word	0x2002b02c
 8019250:	2002b026 	.word	0x2002b026
 8019254:	00fff800 	.word	0x00fff800
 8019258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801925a:	eba4 0e05 	sub.w	lr, r4, r5
 801925e:	eba2 0e0e 	sub.w	lr, r2, lr
 8019262:	45c6      	cmp	lr, r8
 8019264:	bfd4      	ite	le
 8019266:	ebc5 0e0e 	rsble	lr, r5, lr
 801926a:	ebc5 0e08 	rsbgt	lr, r5, r8
 801926e:	f1be 0f00 	cmp.w	lr, #0
 8019272:	d024      	beq.n	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8019274:	07e8      	lsls	r0, r5, #31
 8019276:	f53f ae9e 	bmi.w	8018fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 801927a:	f01e 0001 	ands.w	r0, lr, #1
 801927e:	f47f ae9a 	bne.w	8018fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8019282:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019284:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8019288:	6814      	ldr	r4, [r2, #0]
 801928a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801928e:	086d      	lsrs	r5, r5, #1
 8019290:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019294:	fb06 560c 	mla	r6, r6, ip, r5
 8019298:	6825      	ldr	r5, [r4, #0]
 801929a:	9006      	str	r0, [sp, #24]
 801929c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80192a0:	9005      	str	r0, [sp, #20]
 80192a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80192a4:	9302      	str	r3, [sp, #8]
 80192a6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80192aa:	b289      	uxth	r1, r1
 80192ac:	fa1f f38e 	uxth.w	r3, lr
 80192b0:	9101      	str	r1, [sp, #4]
 80192b2:	9300      	str	r3, [sp, #0]
 80192b4:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 80192b6:	4643      	mov	r3, r8
 80192b8:	19b9      	adds	r1, r7, r6
 80192ba:	4620      	mov	r0, r4
 80192bc:	47a8      	blx	r5
 80192be:	b019      	add	sp, #100	@ 0x64
 80192c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c4:	4a28      	ldr	r2, [pc, #160]	@ (8019368 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 80192c6:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80192ca:	6810      	ldr	r0, [r2, #0]
 80192cc:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80192d0:	f8d0 a000 	ldr.w	sl, [r0]
 80192d4:	9306      	str	r3, [sp, #24]
 80192d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80192da:	9305      	str	r3, [sp, #20]
 80192dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192de:	f8cd c008 	str.w	ip, [sp, #8]
 80192e2:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80192e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80192e8:	1b64      	subs	r4, r4, r5
 80192ea:	1b1c      	subs	r4, r3, r4
 80192ec:	fb06 5608 	mla	r6, r6, r8, r5
 80192f0:	4544      	cmp	r4, r8
 80192f2:	bfd4      	ite	le
 80192f4:	ebc5 0504 	rsble	r5, r5, r4
 80192f8:	ebc5 0508 	rsbgt	r5, r5, r8
 80192fc:	b289      	uxth	r1, r1
 80192fe:	b2ad      	uxth	r5, r5
 8019300:	9101      	str	r1, [sp, #4]
 8019302:	9500      	str	r5, [sp, #0]
 8019304:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 8019308:	4673      	mov	r3, lr
 801930a:	19b9      	adds	r1, r7, r6
 801930c:	e798      	b.n	8019240 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801930e:	2208      	movs	r2, #8
 8019310:	9b08      	ldr	r3, [sp, #32]
 8019312:	fb92 f3f3 	sdiv	r3, r2, r3
 8019316:	1e5a      	subs	r2, r3, #1
 8019318:	4442      	add	r2, r8
 801931a:	fb92 f2f3 	sdiv	r2, r2, r3
 801931e:	fb12 f203 	smulbb	r2, r2, r3
 8019322:	b292      	uxth	r2, r2
 8019324:	e64d      	b.n	8018fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8019326:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019328:	e68f      	b.n	801904a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 801932a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801932c:	e723      	b.n	8019176 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801932e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019330:	b143      	cbz	r3, 8019344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x478>
 8019332:	441e      	add	r6, r3
 8019334:	b2b6      	uxth	r6, r6
 8019336:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 801933a:	f006 0607 	and.w	r6, r6, #7
 801933e:	783a      	ldrb	r2, [r7, #0]
 8019340:	4132      	asrs	r2, r6
 8019342:	b2d2      	uxtb	r2, r2
 8019344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019346:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019348:	4419      	add	r1, r3
 801934a:	910a      	str	r1, [sp, #40]	@ 0x28
 801934c:	e6b2      	b.n	80190b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801934e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019350:	2b00      	cmp	r3, #0
 8019352:	d1b4      	bne.n	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8019354:	4b04      	ldr	r3, [pc, #16]	@ (8019368 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 8019356:	6818      	ldr	r0, [r3, #0]
 8019358:	6803      	ldr	r3, [r0, #0]
 801935a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801935c:	4798      	blx	r3
 801935e:	e7ae      	b.n	80192be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8019360:	2b00      	cmp	r3, #0
 8019362:	f47f af4a 	bne.w	80191fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32e>
 8019366:	e626      	b.n	8018fb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8019368:	2002b02c 	.word	0x2002b02c

0801936c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801936c:	b538      	push	{r3, r4, r5, lr}
 801936e:	4c15      	ldr	r4, [pc, #84]	@ (80193c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8019370:	7823      	ldrb	r3, [r4, #0]
 8019372:	f3bf 8f5b 	dmb	ish
 8019376:	07da      	lsls	r2, r3, #31
 8019378:	4605      	mov	r5, r0
 801937a:	d40b      	bmi.n	8019394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801937c:	4620      	mov	r0, r4
 801937e:	f007 fefc 	bl	802117a <__cxa_guard_acquire>
 8019382:	b138      	cbz	r0, 8019394 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8019384:	4620      	mov	r0, r4
 8019386:	f007 ff04 	bl	8021192 <__cxa_guard_release>
 801938a:	4a0f      	ldr	r2, [pc, #60]	@ (80193c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801938c:	490f      	ldr	r1, [pc, #60]	@ (80193cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801938e:	4810      	ldr	r0, [pc, #64]	@ (80193d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8019390:	f007 feec 	bl	802116c <__aeabi_atexit>
 8019394:	4c0f      	ldr	r4, [pc, #60]	@ (80193d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8019396:	7823      	ldrb	r3, [r4, #0]
 8019398:	f3bf 8f5b 	dmb	ish
 801939c:	07db      	lsls	r3, r3, #31
 801939e:	d40b      	bmi.n	80193b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80193a0:	4620      	mov	r0, r4
 80193a2:	f007 feea 	bl	802117a <__cxa_guard_acquire>
 80193a6:	b138      	cbz	r0, 80193b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80193a8:	4620      	mov	r0, r4
 80193aa:	f007 fef2 	bl	8021192 <__cxa_guard_release>
 80193ae:	4a06      	ldr	r2, [pc, #24]	@ (80193c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80193b0:	4909      	ldr	r1, [pc, #36]	@ (80193d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80193b2:	480a      	ldr	r0, [pc, #40]	@ (80193dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80193b4:	f007 feda 	bl	802116c <__aeabi_atexit>
 80193b8:	4b05      	ldr	r3, [pc, #20]	@ (80193d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80193ba:	616b      	str	r3, [r5, #20]
 80193bc:	4b07      	ldr	r3, [pc, #28]	@ (80193dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80193be:	61ab      	str	r3, [r5, #24]
 80193c0:	bd38      	pop	{r3, r4, r5, pc}
 80193c2:	bf00      	nop
 80193c4:	2002b108 	.word	0x2002b108
 80193c8:	20000000 	.word	0x20000000
 80193cc:	08015487 	.word	0x08015487
 80193d0:	20000064 	.word	0x20000064
 80193d4:	2002b10c 	.word	0x2002b10c
 80193d8:	08015485 	.word	0x08015485
 80193dc:	20000068 	.word	0x20000068

080193e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80193e0:	b538      	push	{r3, r4, r5, lr}
 80193e2:	4c15      	ldr	r4, [pc, #84]	@ (8019438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80193e4:	7823      	ldrb	r3, [r4, #0]
 80193e6:	f3bf 8f5b 	dmb	ish
 80193ea:	07da      	lsls	r2, r3, #31
 80193ec:	4605      	mov	r5, r0
 80193ee:	d40b      	bmi.n	8019408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80193f0:	4620      	mov	r0, r4
 80193f2:	f007 fec2 	bl	802117a <__cxa_guard_acquire>
 80193f6:	b138      	cbz	r0, 8019408 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80193f8:	4620      	mov	r0, r4
 80193fa:	f007 feca 	bl	8021192 <__cxa_guard_release>
 80193fe:	4a0f      	ldr	r2, [pc, #60]	@ (801943c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8019400:	490f      	ldr	r1, [pc, #60]	@ (8019440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8019402:	4810      	ldr	r0, [pc, #64]	@ (8019444 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8019404:	f007 feb2 	bl	802116c <__aeabi_atexit>
 8019408:	4c0f      	ldr	r4, [pc, #60]	@ (8019448 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801940a:	7823      	ldrb	r3, [r4, #0]
 801940c:	f3bf 8f5b 	dmb	ish
 8019410:	07db      	lsls	r3, r3, #31
 8019412:	d40b      	bmi.n	801942c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8019414:	4620      	mov	r0, r4
 8019416:	f007 feb0 	bl	802117a <__cxa_guard_acquire>
 801941a:	b138      	cbz	r0, 801942c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801941c:	4620      	mov	r0, r4
 801941e:	f007 feb8 	bl	8021192 <__cxa_guard_release>
 8019422:	4a06      	ldr	r2, [pc, #24]	@ (801943c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8019424:	4909      	ldr	r1, [pc, #36]	@ (801944c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8019426:	480a      	ldr	r0, [pc, #40]	@ (8019450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8019428:	f007 fea0 	bl	802116c <__aeabi_atexit>
 801942c:	4b05      	ldr	r3, [pc, #20]	@ (8019444 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801942e:	60eb      	str	r3, [r5, #12]
 8019430:	4b07      	ldr	r3, [pc, #28]	@ (8019450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8019432:	612b      	str	r3, [r5, #16]
 8019434:	bd38      	pop	{r3, r4, r5, pc}
 8019436:	bf00      	nop
 8019438:	2002b0e0 	.word	0x2002b0e0
 801943c:	20000000 	.word	0x20000000
 8019440:	0801548b 	.word	0x0801548b
 8019444:	2000003c 	.word	0x2000003c
 8019448:	2002b0e4 	.word	0x2002b0e4
 801944c:	08015489 	.word	0x08015489
 8019450:	20000040 	.word	0x20000040

08019454 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8019454:	b510      	push	{r4, lr}
 8019456:	4604      	mov	r4, r0
 8019458:	f7ff ff88 	bl	801936c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801945c:	4620      	mov	r0, r4
 801945e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019462:	f7ff bfbd 	b.w	80193e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08019468 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019468:	b538      	push	{r3, r4, r5, lr}
 801946a:	4c15      	ldr	r4, [pc, #84]	@ (80194c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801946c:	7823      	ldrb	r3, [r4, #0]
 801946e:	f3bf 8f5b 	dmb	ish
 8019472:	07da      	lsls	r2, r3, #31
 8019474:	4605      	mov	r5, r0
 8019476:	d40b      	bmi.n	8019490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019478:	4620      	mov	r0, r4
 801947a:	f007 fe7e 	bl	802117a <__cxa_guard_acquire>
 801947e:	b138      	cbz	r0, 8019490 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019480:	4620      	mov	r0, r4
 8019482:	f007 fe86 	bl	8021192 <__cxa_guard_release>
 8019486:	4a0f      	ldr	r2, [pc, #60]	@ (80194c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019488:	490f      	ldr	r1, [pc, #60]	@ (80194c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801948a:	4810      	ldr	r0, [pc, #64]	@ (80194cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801948c:	f007 fe6e 	bl	802116c <__aeabi_atexit>
 8019490:	4c0f      	ldr	r4, [pc, #60]	@ (80194d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019492:	7823      	ldrb	r3, [r4, #0]
 8019494:	f3bf 8f5b 	dmb	ish
 8019498:	07db      	lsls	r3, r3, #31
 801949a:	d40b      	bmi.n	80194b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801949c:	4620      	mov	r0, r4
 801949e:	f007 fe6c 	bl	802117a <__cxa_guard_acquire>
 80194a2:	b138      	cbz	r0, 80194b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80194a4:	4620      	mov	r0, r4
 80194a6:	f007 fe74 	bl	8021192 <__cxa_guard_release>
 80194aa:	4a06      	ldr	r2, [pc, #24]	@ (80194c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80194ac:	4909      	ldr	r1, [pc, #36]	@ (80194d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80194ae:	480a      	ldr	r0, [pc, #40]	@ (80194d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80194b0:	f007 fe5c 	bl	802116c <__aeabi_atexit>
 80194b4:	4b05      	ldr	r3, [pc, #20]	@ (80194cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80194b6:	626b      	str	r3, [r5, #36]	@ 0x24
 80194b8:	4b07      	ldr	r3, [pc, #28]	@ (80194d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80194ba:	62ab      	str	r3, [r5, #40]	@ 0x28
 80194bc:	bd38      	pop	{r3, r4, r5, pc}
 80194be:	bf00      	nop
 80194c0:	2002b110 	.word	0x2002b110
 80194c4:	20000000 	.word	0x20000000
 80194c8:	0801547f 	.word	0x0801547f
 80194cc:	2000006c 	.word	0x2000006c
 80194d0:	2002b114 	.word	0x2002b114
 80194d4:	0801547d 	.word	0x0801547d
 80194d8:	20000070 	.word	0x20000070

080194dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80194dc:	b538      	push	{r3, r4, r5, lr}
 80194de:	4c15      	ldr	r4, [pc, #84]	@ (8019534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80194e0:	7823      	ldrb	r3, [r4, #0]
 80194e2:	f3bf 8f5b 	dmb	ish
 80194e6:	07da      	lsls	r2, r3, #31
 80194e8:	4605      	mov	r5, r0
 80194ea:	d40b      	bmi.n	8019504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80194ec:	4620      	mov	r0, r4
 80194ee:	f007 fe44 	bl	802117a <__cxa_guard_acquire>
 80194f2:	b138      	cbz	r0, 8019504 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80194f4:	4620      	mov	r0, r4
 80194f6:	f007 fe4c 	bl	8021192 <__cxa_guard_release>
 80194fa:	4a0f      	ldr	r2, [pc, #60]	@ (8019538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80194fc:	490f      	ldr	r1, [pc, #60]	@ (801953c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80194fe:	4810      	ldr	r0, [pc, #64]	@ (8019540 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019500:	f007 fe34 	bl	802116c <__aeabi_atexit>
 8019504:	4c0f      	ldr	r4, [pc, #60]	@ (8019544 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8019506:	7823      	ldrb	r3, [r4, #0]
 8019508:	f3bf 8f5b 	dmb	ish
 801950c:	07db      	lsls	r3, r3, #31
 801950e:	d40b      	bmi.n	8019528 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019510:	4620      	mov	r0, r4
 8019512:	f007 fe32 	bl	802117a <__cxa_guard_acquire>
 8019516:	b138      	cbz	r0, 8019528 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019518:	4620      	mov	r0, r4
 801951a:	f007 fe3a 	bl	8021192 <__cxa_guard_release>
 801951e:	4a06      	ldr	r2, [pc, #24]	@ (8019538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019520:	4909      	ldr	r1, [pc, #36]	@ (8019548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019522:	480a      	ldr	r0, [pc, #40]	@ (801954c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019524:	f007 fe22 	bl	802116c <__aeabi_atexit>
 8019528:	4b05      	ldr	r3, [pc, #20]	@ (8019540 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801952a:	61eb      	str	r3, [r5, #28]
 801952c:	4b07      	ldr	r3, [pc, #28]	@ (801954c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801952e:	622b      	str	r3, [r5, #32]
 8019530:	bd38      	pop	{r3, r4, r5, pc}
 8019532:	bf00      	nop
 8019534:	2002b0e8 	.word	0x2002b0e8
 8019538:	20000000 	.word	0x20000000
 801953c:	08015483 	.word	0x08015483
 8019540:	20000044 	.word	0x20000044
 8019544:	2002b0ec 	.word	0x2002b0ec
 8019548:	08015481 	.word	0x08015481
 801954c:	20000048 	.word	0x20000048

08019550 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8019550:	b510      	push	{r4, lr}
 8019552:	4604      	mov	r4, r0
 8019554:	f7ff ff88 	bl	8019468 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8019558:	4620      	mov	r0, r4
 801955a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801955e:	f7ff bfbd 	b.w	80194dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08019564 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8019564:	b538      	push	{r3, r4, r5, lr}
 8019566:	4c15      	ldr	r4, [pc, #84]	@ (80195bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019568:	7823      	ldrb	r3, [r4, #0]
 801956a:	f3bf 8f5b 	dmb	ish
 801956e:	07da      	lsls	r2, r3, #31
 8019570:	4605      	mov	r5, r0
 8019572:	d40b      	bmi.n	801958c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019574:	4620      	mov	r0, r4
 8019576:	f007 fe00 	bl	802117a <__cxa_guard_acquire>
 801957a:	b138      	cbz	r0, 801958c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801957c:	4620      	mov	r0, r4
 801957e:	f007 fe08 	bl	8021192 <__cxa_guard_release>
 8019582:	4a0f      	ldr	r2, [pc, #60]	@ (80195c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019584:	490f      	ldr	r1, [pc, #60]	@ (80195c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019586:	4810      	ldr	r0, [pc, #64]	@ (80195c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019588:	f007 fdf0 	bl	802116c <__aeabi_atexit>
 801958c:	4c0f      	ldr	r4, [pc, #60]	@ (80195cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801958e:	7823      	ldrb	r3, [r4, #0]
 8019590:	f3bf 8f5b 	dmb	ish
 8019594:	07db      	lsls	r3, r3, #31
 8019596:	d40b      	bmi.n	80195b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019598:	4620      	mov	r0, r4
 801959a:	f007 fdee 	bl	802117a <__cxa_guard_acquire>
 801959e:	b138      	cbz	r0, 80195b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80195a0:	4620      	mov	r0, r4
 80195a2:	f007 fdf6 	bl	8021192 <__cxa_guard_release>
 80195a6:	4a06      	ldr	r2, [pc, #24]	@ (80195c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80195a8:	4909      	ldr	r1, [pc, #36]	@ (80195d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80195aa:	480a      	ldr	r0, [pc, #40]	@ (80195d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80195ac:	f007 fdde 	bl	802116c <__aeabi_atexit>
 80195b0:	4b05      	ldr	r3, [pc, #20]	@ (80195c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80195b2:	636b      	str	r3, [r5, #52]	@ 0x34
 80195b4:	4b07      	ldr	r3, [pc, #28]	@ (80195d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80195b6:	63ab      	str	r3, [r5, #56]	@ 0x38
 80195b8:	bd38      	pop	{r3, r4, r5, pc}
 80195ba:	bf00      	nop
 80195bc:	2002b120 	.word	0x2002b120
 80195c0:	20000000 	.word	0x20000000
 80195c4:	08015477 	.word	0x08015477
 80195c8:	2000007c 	.word	0x2000007c
 80195cc:	2002b124 	.word	0x2002b124
 80195d0:	08015475 	.word	0x08015475
 80195d4:	20000080 	.word	0x20000080

080195d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80195d8:	b538      	push	{r3, r4, r5, lr}
 80195da:	4c15      	ldr	r4, [pc, #84]	@ (8019630 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80195dc:	7823      	ldrb	r3, [r4, #0]
 80195de:	f3bf 8f5b 	dmb	ish
 80195e2:	07da      	lsls	r2, r3, #31
 80195e4:	4605      	mov	r5, r0
 80195e6:	d40b      	bmi.n	8019600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80195e8:	4620      	mov	r0, r4
 80195ea:	f007 fdc6 	bl	802117a <__cxa_guard_acquire>
 80195ee:	b138      	cbz	r0, 8019600 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80195f0:	4620      	mov	r0, r4
 80195f2:	f007 fdce 	bl	8021192 <__cxa_guard_release>
 80195f6:	4a0f      	ldr	r2, [pc, #60]	@ (8019634 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80195f8:	490f      	ldr	r1, [pc, #60]	@ (8019638 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80195fa:	4810      	ldr	r0, [pc, #64]	@ (801963c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80195fc:	f007 fdb6 	bl	802116c <__aeabi_atexit>
 8019600:	4c0f      	ldr	r4, [pc, #60]	@ (8019640 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8019602:	7823      	ldrb	r3, [r4, #0]
 8019604:	f3bf 8f5b 	dmb	ish
 8019608:	07db      	lsls	r3, r3, #31
 801960a:	d40b      	bmi.n	8019624 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801960c:	4620      	mov	r0, r4
 801960e:	f007 fdb4 	bl	802117a <__cxa_guard_acquire>
 8019612:	b138      	cbz	r0, 8019624 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8019614:	4620      	mov	r0, r4
 8019616:	f007 fdbc 	bl	8021192 <__cxa_guard_release>
 801961a:	4a06      	ldr	r2, [pc, #24]	@ (8019634 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801961c:	4909      	ldr	r1, [pc, #36]	@ (8019644 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801961e:	480a      	ldr	r0, [pc, #40]	@ (8019648 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8019620:	f007 fda4 	bl	802116c <__aeabi_atexit>
 8019624:	4b05      	ldr	r3, [pc, #20]	@ (801963c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019626:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8019628:	4b07      	ldr	r3, [pc, #28]	@ (8019648 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801962a:	632b      	str	r3, [r5, #48]	@ 0x30
 801962c:	bd38      	pop	{r3, r4, r5, pc}
 801962e:	bf00      	nop
 8019630:	2002b0f0 	.word	0x2002b0f0
 8019634:	20000000 	.word	0x20000000
 8019638:	0801547b 	.word	0x0801547b
 801963c:	2000004c 	.word	0x2000004c
 8019640:	2002b0f4 	.word	0x2002b0f4
 8019644:	08015479 	.word	0x08015479
 8019648:	20000050 	.word	0x20000050

0801964c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801964c:	b510      	push	{r4, lr}
 801964e:	4604      	mov	r4, r0
 8019650:	f7ff ff88 	bl	8019564 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8019654:	4620      	mov	r0, r4
 8019656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801965a:	f7ff bfbd 	b.w	80195d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08019660 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8019660:	b538      	push	{r3, r4, r5, lr}
 8019662:	4c15      	ldr	r4, [pc, #84]	@ (80196b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8019664:	7823      	ldrb	r3, [r4, #0]
 8019666:	f3bf 8f5b 	dmb	ish
 801966a:	07da      	lsls	r2, r3, #31
 801966c:	4605      	mov	r5, r0
 801966e:	d40b      	bmi.n	8019688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8019670:	4620      	mov	r0, r4
 8019672:	f007 fd82 	bl	802117a <__cxa_guard_acquire>
 8019676:	b138      	cbz	r0, 8019688 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8019678:	4620      	mov	r0, r4
 801967a:	f007 fd8a 	bl	8021192 <__cxa_guard_release>
 801967e:	4a0f      	ldr	r2, [pc, #60]	@ (80196bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8019680:	490f      	ldr	r1, [pc, #60]	@ (80196c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8019682:	4810      	ldr	r0, [pc, #64]	@ (80196c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8019684:	f007 fd72 	bl	802116c <__aeabi_atexit>
 8019688:	4c0f      	ldr	r4, [pc, #60]	@ (80196c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801968a:	7823      	ldrb	r3, [r4, #0]
 801968c:	f3bf 8f5b 	dmb	ish
 8019690:	07db      	lsls	r3, r3, #31
 8019692:	d40b      	bmi.n	80196ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8019694:	4620      	mov	r0, r4
 8019696:	f007 fd70 	bl	802117a <__cxa_guard_acquire>
 801969a:	b138      	cbz	r0, 80196ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801969c:	4620      	mov	r0, r4
 801969e:	f007 fd78 	bl	8021192 <__cxa_guard_release>
 80196a2:	4a06      	ldr	r2, [pc, #24]	@ (80196bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80196a4:	4909      	ldr	r1, [pc, #36]	@ (80196cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80196a6:	480a      	ldr	r0, [pc, #40]	@ (80196d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80196a8:	f007 fd60 	bl	802116c <__aeabi_atexit>
 80196ac:	4b05      	ldr	r3, [pc, #20]	@ (80196c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80196ae:	656b      	str	r3, [r5, #84]	@ 0x54
 80196b0:	4b07      	ldr	r3, [pc, #28]	@ (80196d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80196b2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80196b4:	bd38      	pop	{r3, r4, r5, pc}
 80196b6:	bf00      	nop
 80196b8:	2002b128 	.word	0x2002b128
 80196bc:	20000000 	.word	0x20000000
 80196c0:	08015467 	.word	0x08015467
 80196c4:	20000084 	.word	0x20000084
 80196c8:	2002b12c 	.word	0x2002b12c
 80196cc:	08015465 	.word	0x08015465
 80196d0:	20000088 	.word	0x20000088

080196d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4c15      	ldr	r4, [pc, #84]	@ (801972c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80196d8:	7823      	ldrb	r3, [r4, #0]
 80196da:	f3bf 8f5b 	dmb	ish
 80196de:	07da      	lsls	r2, r3, #31
 80196e0:	4605      	mov	r5, r0
 80196e2:	d40b      	bmi.n	80196fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80196e4:	4620      	mov	r0, r4
 80196e6:	f007 fd48 	bl	802117a <__cxa_guard_acquire>
 80196ea:	b138      	cbz	r0, 80196fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80196ec:	4620      	mov	r0, r4
 80196ee:	f007 fd50 	bl	8021192 <__cxa_guard_release>
 80196f2:	4a0f      	ldr	r2, [pc, #60]	@ (8019730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80196f4:	490f      	ldr	r1, [pc, #60]	@ (8019734 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80196f6:	4810      	ldr	r0, [pc, #64]	@ (8019738 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80196f8:	f007 fd38 	bl	802116c <__aeabi_atexit>
 80196fc:	4c0f      	ldr	r4, [pc, #60]	@ (801973c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80196fe:	7823      	ldrb	r3, [r4, #0]
 8019700:	f3bf 8f5b 	dmb	ish
 8019704:	07db      	lsls	r3, r3, #31
 8019706:	d40b      	bmi.n	8019720 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8019708:	4620      	mov	r0, r4
 801970a:	f007 fd36 	bl	802117a <__cxa_guard_acquire>
 801970e:	b138      	cbz	r0, 8019720 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8019710:	4620      	mov	r0, r4
 8019712:	f007 fd3e 	bl	8021192 <__cxa_guard_release>
 8019716:	4a06      	ldr	r2, [pc, #24]	@ (8019730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8019718:	4909      	ldr	r1, [pc, #36]	@ (8019740 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801971a:	480a      	ldr	r0, [pc, #40]	@ (8019744 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801971c:	f007 fd26 	bl	802116c <__aeabi_atexit>
 8019720:	4b05      	ldr	r3, [pc, #20]	@ (8019738 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8019722:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8019724:	4b07      	ldr	r3, [pc, #28]	@ (8019744 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8019726:	652b      	str	r3, [r5, #80]	@ 0x50
 8019728:	bd38      	pop	{r3, r4, r5, pc}
 801972a:	bf00      	nop
 801972c:	2002b130 	.word	0x2002b130
 8019730:	20000000 	.word	0x20000000
 8019734:	0801546b 	.word	0x0801546b
 8019738:	2000008c 	.word	0x2000008c
 801973c:	2002b134 	.word	0x2002b134
 8019740:	08015469 	.word	0x08015469
 8019744:	20000090 	.word	0x20000090

08019748 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8019748:	b538      	push	{r3, r4, r5, lr}
 801974a:	4c15      	ldr	r4, [pc, #84]	@ (80197a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801974c:	7823      	ldrb	r3, [r4, #0]
 801974e:	f3bf 8f5b 	dmb	ish
 8019752:	07da      	lsls	r2, r3, #31
 8019754:	4605      	mov	r5, r0
 8019756:	d40b      	bmi.n	8019770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8019758:	4620      	mov	r0, r4
 801975a:	f007 fd0e 	bl	802117a <__cxa_guard_acquire>
 801975e:	b138      	cbz	r0, 8019770 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8019760:	4620      	mov	r0, r4
 8019762:	f007 fd16 	bl	8021192 <__cxa_guard_release>
 8019766:	4a0f      	ldr	r2, [pc, #60]	@ (80197a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8019768:	490f      	ldr	r1, [pc, #60]	@ (80197a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801976a:	4810      	ldr	r0, [pc, #64]	@ (80197ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801976c:	f007 fcfe 	bl	802116c <__aeabi_atexit>
 8019770:	4c0f      	ldr	r4, [pc, #60]	@ (80197b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8019772:	7823      	ldrb	r3, [r4, #0]
 8019774:	f3bf 8f5b 	dmb	ish
 8019778:	07db      	lsls	r3, r3, #31
 801977a:	d40b      	bmi.n	8019794 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801977c:	4620      	mov	r0, r4
 801977e:	f007 fcfc 	bl	802117a <__cxa_guard_acquire>
 8019782:	b138      	cbz	r0, 8019794 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8019784:	4620      	mov	r0, r4
 8019786:	f007 fd04 	bl	8021192 <__cxa_guard_release>
 801978a:	4a06      	ldr	r2, [pc, #24]	@ (80197a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801978c:	4909      	ldr	r1, [pc, #36]	@ (80197b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801978e:	480a      	ldr	r0, [pc, #40]	@ (80197b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8019790:	f007 fcec 	bl	802116c <__aeabi_atexit>
 8019794:	4b05      	ldr	r3, [pc, #20]	@ (80197ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8019796:	646b      	str	r3, [r5, #68]	@ 0x44
 8019798:	4b07      	ldr	r3, [pc, #28]	@ (80197b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801979a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801979c:	bd38      	pop	{r3, r4, r5, pc}
 801979e:	bf00      	nop
 80197a0:	2002b0f8 	.word	0x2002b0f8
 80197a4:	20000000 	.word	0x20000000
 80197a8:	0801546f 	.word	0x0801546f
 80197ac:	20000054 	.word	0x20000054
 80197b0:	2002b0fc 	.word	0x2002b0fc
 80197b4:	0801546d 	.word	0x0801546d
 80197b8:	20000058 	.word	0x20000058

080197bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80197bc:	b538      	push	{r3, r4, r5, lr}
 80197be:	4c15      	ldr	r4, [pc, #84]	@ (8019814 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80197c0:	7823      	ldrb	r3, [r4, #0]
 80197c2:	f3bf 8f5b 	dmb	ish
 80197c6:	07da      	lsls	r2, r3, #31
 80197c8:	4605      	mov	r5, r0
 80197ca:	d40b      	bmi.n	80197e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80197cc:	4620      	mov	r0, r4
 80197ce:	f007 fcd4 	bl	802117a <__cxa_guard_acquire>
 80197d2:	b138      	cbz	r0, 80197e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80197d4:	4620      	mov	r0, r4
 80197d6:	f007 fcdc 	bl	8021192 <__cxa_guard_release>
 80197da:	4a0f      	ldr	r2, [pc, #60]	@ (8019818 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80197dc:	490f      	ldr	r1, [pc, #60]	@ (801981c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80197de:	4810      	ldr	r0, [pc, #64]	@ (8019820 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80197e0:	f007 fcc4 	bl	802116c <__aeabi_atexit>
 80197e4:	4c0f      	ldr	r4, [pc, #60]	@ (8019824 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80197e6:	7823      	ldrb	r3, [r4, #0]
 80197e8:	f3bf 8f5b 	dmb	ish
 80197ec:	07db      	lsls	r3, r3, #31
 80197ee:	d40b      	bmi.n	8019808 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80197f0:	4620      	mov	r0, r4
 80197f2:	f007 fcc2 	bl	802117a <__cxa_guard_acquire>
 80197f6:	b138      	cbz	r0, 8019808 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80197f8:	4620      	mov	r0, r4
 80197fa:	f007 fcca 	bl	8021192 <__cxa_guard_release>
 80197fe:	4a06      	ldr	r2, [pc, #24]	@ (8019818 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8019800:	4909      	ldr	r1, [pc, #36]	@ (8019828 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8019802:	480a      	ldr	r0, [pc, #40]	@ (801982c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8019804:	f007 fcb2 	bl	802116c <__aeabi_atexit>
 8019808:	4b05      	ldr	r3, [pc, #20]	@ (8019820 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801980a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801980c:	4b07      	ldr	r3, [pc, #28]	@ (801982c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801980e:	642b      	str	r3, [r5, #64]	@ 0x40
 8019810:	bd38      	pop	{r3, r4, r5, pc}
 8019812:	bf00      	nop
 8019814:	2002b118 	.word	0x2002b118
 8019818:	20000000 	.word	0x20000000
 801981c:	08015473 	.word	0x08015473
 8019820:	20000074 	.word	0x20000074
 8019824:	2002b11c 	.word	0x2002b11c
 8019828:	08015471 	.word	0x08015471
 801982c:	20000078 	.word	0x20000078

08019830 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8019830:	b510      	push	{r4, lr}
 8019832:	4604      	mov	r4, r0
 8019834:	f7ff ff14 	bl	8019660 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8019838:	4620      	mov	r0, r4
 801983a:	f7ff ff85 	bl	8019748 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801983e:	4620      	mov	r0, r4
 8019840:	f7ff ff48 	bl	80196d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8019844:	4620      	mov	r0, r4
 8019846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801984a:	f7ff bfb7 	b.w	80197bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08019850 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8019850:	b538      	push	{r3, r4, r5, lr}
 8019852:	4c15      	ldr	r4, [pc, #84]	@ (80198a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8019854:	7823      	ldrb	r3, [r4, #0]
 8019856:	f3bf 8f5b 	dmb	ish
 801985a:	07da      	lsls	r2, r3, #31
 801985c:	4605      	mov	r5, r0
 801985e:	d40b      	bmi.n	8019878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019860:	4620      	mov	r0, r4
 8019862:	f007 fc8a 	bl	802117a <__cxa_guard_acquire>
 8019866:	b138      	cbz	r0, 8019878 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019868:	4620      	mov	r0, r4
 801986a:	f007 fc92 	bl	8021192 <__cxa_guard_release>
 801986e:	4a0f      	ldr	r2, [pc, #60]	@ (80198ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019870:	490f      	ldr	r1, [pc, #60]	@ (80198b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8019872:	4810      	ldr	r0, [pc, #64]	@ (80198b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019874:	f007 fc7a 	bl	802116c <__aeabi_atexit>
 8019878:	4c0f      	ldr	r4, [pc, #60]	@ (80198b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801987a:	7823      	ldrb	r3, [r4, #0]
 801987c:	f3bf 8f5b 	dmb	ish
 8019880:	07db      	lsls	r3, r3, #31
 8019882:	d40b      	bmi.n	801989c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019884:	4620      	mov	r0, r4
 8019886:	f007 fc78 	bl	802117a <__cxa_guard_acquire>
 801988a:	b138      	cbz	r0, 801989c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801988c:	4620      	mov	r0, r4
 801988e:	f007 fc80 	bl	8021192 <__cxa_guard_release>
 8019892:	4a06      	ldr	r2, [pc, #24]	@ (80198ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019894:	4909      	ldr	r1, [pc, #36]	@ (80198bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8019896:	480a      	ldr	r0, [pc, #40]	@ (80198c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019898:	f007 fc68 	bl	802116c <__aeabi_atexit>
 801989c:	4b05      	ldr	r3, [pc, #20]	@ (80198b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801989e:	666b      	str	r3, [r5, #100]	@ 0x64
 80198a0:	4b07      	ldr	r3, [pc, #28]	@ (80198c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80198a2:	66ab      	str	r3, [r5, #104]	@ 0x68
 80198a4:	bd38      	pop	{r3, r4, r5, pc}
 80198a6:	bf00      	nop
 80198a8:	2002b100 	.word	0x2002b100
 80198ac:	20000000 	.word	0x20000000
 80198b0:	0801545f 	.word	0x0801545f
 80198b4:	2000005c 	.word	0x2000005c
 80198b8:	2002b104 	.word	0x2002b104
 80198bc:	0801545d 	.word	0x0801545d
 80198c0:	20000060 	.word	0x20000060

080198c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80198c4:	b538      	push	{r3, r4, r5, lr}
 80198c6:	4c15      	ldr	r4, [pc, #84]	@ (801991c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80198c8:	7823      	ldrb	r3, [r4, #0]
 80198ca:	f3bf 8f5b 	dmb	ish
 80198ce:	07da      	lsls	r2, r3, #31
 80198d0:	4605      	mov	r5, r0
 80198d2:	d40b      	bmi.n	80198ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80198d4:	4620      	mov	r0, r4
 80198d6:	f007 fc50 	bl	802117a <__cxa_guard_acquire>
 80198da:	b138      	cbz	r0, 80198ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80198dc:	4620      	mov	r0, r4
 80198de:	f007 fc58 	bl	8021192 <__cxa_guard_release>
 80198e2:	4a0f      	ldr	r2, [pc, #60]	@ (8019920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80198e4:	490f      	ldr	r1, [pc, #60]	@ (8019924 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80198e6:	4810      	ldr	r0, [pc, #64]	@ (8019928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80198e8:	f007 fc40 	bl	802116c <__aeabi_atexit>
 80198ec:	4c0f      	ldr	r4, [pc, #60]	@ (801992c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80198ee:	7823      	ldrb	r3, [r4, #0]
 80198f0:	f3bf 8f5b 	dmb	ish
 80198f4:	07db      	lsls	r3, r3, #31
 80198f6:	d40b      	bmi.n	8019910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80198f8:	4620      	mov	r0, r4
 80198fa:	f007 fc3e 	bl	802117a <__cxa_guard_acquire>
 80198fe:	b138      	cbz	r0, 8019910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019900:	4620      	mov	r0, r4
 8019902:	f007 fc46 	bl	8021192 <__cxa_guard_release>
 8019906:	4a06      	ldr	r2, [pc, #24]	@ (8019920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019908:	4909      	ldr	r1, [pc, #36]	@ (8019930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801990a:	480a      	ldr	r0, [pc, #40]	@ (8019934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801990c:	f007 fc2e 	bl	802116c <__aeabi_atexit>
 8019910:	4b05      	ldr	r3, [pc, #20]	@ (8019928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019912:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8019914:	4b07      	ldr	r3, [pc, #28]	@ (8019934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019916:	662b      	str	r3, [r5, #96]	@ 0x60
 8019918:	bd38      	pop	{r3, r4, r5, pc}
 801991a:	bf00      	nop
 801991c:	2002b0d8 	.word	0x2002b0d8
 8019920:	20000000 	.word	0x20000000
 8019924:	08015463 	.word	0x08015463
 8019928:	20000034 	.word	0x20000034
 801992c:	2002b0dc 	.word	0x2002b0dc
 8019930:	08015461 	.word	0x08015461
 8019934:	20000038 	.word	0x20000038

08019938 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8019938:	b510      	push	{r4, lr}
 801993a:	4604      	mov	r4, r0
 801993c:	f7ff ff88 	bl	8019850 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8019940:	4620      	mov	r0, r4
 8019942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019946:	f7ff bfbd 	b.w	80198c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801994c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801994c:	b538      	push	{r3, r4, r5, lr}
 801994e:	4c15      	ldr	r4, [pc, #84]	@ (80199a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8019950:	7823      	ldrb	r3, [r4, #0]
 8019952:	f3bf 8f5b 	dmb	ish
 8019956:	07da      	lsls	r2, r3, #31
 8019958:	4605      	mov	r5, r0
 801995a:	d40b      	bmi.n	8019974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801995c:	4620      	mov	r0, r4
 801995e:	f007 fc0c 	bl	802117a <__cxa_guard_acquire>
 8019962:	b138      	cbz	r0, 8019974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019964:	4620      	mov	r0, r4
 8019966:	f007 fc14 	bl	8021192 <__cxa_guard_release>
 801996a:	4a0f      	ldr	r2, [pc, #60]	@ (80199a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801996c:	490f      	ldr	r1, [pc, #60]	@ (80199ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801996e:	4810      	ldr	r0, [pc, #64]	@ (80199b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019970:	f007 fbfc 	bl	802116c <__aeabi_atexit>
 8019974:	4c0f      	ldr	r4, [pc, #60]	@ (80199b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8019976:	7823      	ldrb	r3, [r4, #0]
 8019978:	f3bf 8f5b 	dmb	ish
 801997c:	07db      	lsls	r3, r3, #31
 801997e:	d40b      	bmi.n	8019998 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019980:	4620      	mov	r0, r4
 8019982:	f007 fbfa 	bl	802117a <__cxa_guard_acquire>
 8019986:	b138      	cbz	r0, 8019998 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019988:	4620      	mov	r0, r4
 801998a:	f007 fc02 	bl	8021192 <__cxa_guard_release>
 801998e:	4a06      	ldr	r2, [pc, #24]	@ (80199a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019990:	4909      	ldr	r1, [pc, #36]	@ (80199b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8019992:	480a      	ldr	r0, [pc, #40]	@ (80199bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019994:	f007 fbea 	bl	802116c <__aeabi_atexit>
 8019998:	4b05      	ldr	r3, [pc, #20]	@ (80199b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801999a:	676b      	str	r3, [r5, #116]	@ 0x74
 801999c:	4b07      	ldr	r3, [pc, #28]	@ (80199bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801999e:	67ab      	str	r3, [r5, #120]	@ 0x78
 80199a0:	bd38      	pop	{r3, r4, r5, pc}
 80199a2:	bf00      	nop
 80199a4:	2002b0d0 	.word	0x2002b0d0
 80199a8:	20000000 	.word	0x20000000
 80199ac:	08015457 	.word	0x08015457
 80199b0:	2000002c 	.word	0x2000002c
 80199b4:	2002b0d4 	.word	0x2002b0d4
 80199b8:	08015455 	.word	0x08015455
 80199bc:	20000030 	.word	0x20000030

080199c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4c15      	ldr	r4, [pc, #84]	@ (8019a18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80199c4:	7823      	ldrb	r3, [r4, #0]
 80199c6:	f3bf 8f5b 	dmb	ish
 80199ca:	07da      	lsls	r2, r3, #31
 80199cc:	4605      	mov	r5, r0
 80199ce:	d40b      	bmi.n	80199e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80199d0:	4620      	mov	r0, r4
 80199d2:	f007 fbd2 	bl	802117a <__cxa_guard_acquire>
 80199d6:	b138      	cbz	r0, 80199e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80199d8:	4620      	mov	r0, r4
 80199da:	f007 fbda 	bl	8021192 <__cxa_guard_release>
 80199de:	4a0f      	ldr	r2, [pc, #60]	@ (8019a1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80199e0:	490f      	ldr	r1, [pc, #60]	@ (8019a20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80199e2:	4810      	ldr	r0, [pc, #64]	@ (8019a24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80199e4:	f007 fbc2 	bl	802116c <__aeabi_atexit>
 80199e8:	4c0f      	ldr	r4, [pc, #60]	@ (8019a28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80199ea:	7823      	ldrb	r3, [r4, #0]
 80199ec:	f3bf 8f5b 	dmb	ish
 80199f0:	07db      	lsls	r3, r3, #31
 80199f2:	d40b      	bmi.n	8019a0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80199f4:	4620      	mov	r0, r4
 80199f6:	f007 fbc0 	bl	802117a <__cxa_guard_acquire>
 80199fa:	b138      	cbz	r0, 8019a0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80199fc:	4620      	mov	r0, r4
 80199fe:	f007 fbc8 	bl	8021192 <__cxa_guard_release>
 8019a02:	4a06      	ldr	r2, [pc, #24]	@ (8019a1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019a04:	4909      	ldr	r1, [pc, #36]	@ (8019a2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8019a06:	480a      	ldr	r0, [pc, #40]	@ (8019a30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019a08:	f007 fbb0 	bl	802116c <__aeabi_atexit>
 8019a0c:	4b05      	ldr	r3, [pc, #20]	@ (8019a24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019a0e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8019a10:	4b07      	ldr	r3, [pc, #28]	@ (8019a30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019a12:	672b      	str	r3, [r5, #112]	@ 0x70
 8019a14:	bd38      	pop	{r3, r4, r5, pc}
 8019a16:	bf00      	nop
 8019a18:	2002b0c8 	.word	0x2002b0c8
 8019a1c:	20000000 	.word	0x20000000
 8019a20:	0801545b 	.word	0x0801545b
 8019a24:	20000024 	.word	0x20000024
 8019a28:	2002b0cc 	.word	0x2002b0cc
 8019a2c:	08015459 	.word	0x08015459
 8019a30:	20000028 	.word	0x20000028

08019a34 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8019a34:	b510      	push	{r4, lr}
 8019a36:	4604      	mov	r4, r0
 8019a38:	f7ff ff88 	bl	801994c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a42:	f7ff bfbd 	b.w	80199c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08019a46 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8019a46:	b510      	push	{r4, lr}
 8019a48:	4604      	mov	r4, r0
 8019a4a:	f7ff fff3 	bl	8019a34 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f7ff ff72 	bl	8019938 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8019a54:	4620      	mov	r0, r4
 8019a56:	f7ff fdf9 	bl	801964c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7ff fcfa 	bl	8019454 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8019a60:	4620      	mov	r0, r4
 8019a62:	f7ff fd75 	bl	8019550 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8019a66:	4620      	mov	r0, r4
 8019a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a6c:	f7ff bee0 	b.w	8019830 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08019a70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4c0b      	ldr	r4, [pc, #44]	@ (8019aa0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8019a74:	7823      	ldrb	r3, [r4, #0]
 8019a76:	f3bf 8f5b 	dmb	ish
 8019a7a:	07db      	lsls	r3, r3, #31
 8019a7c:	4605      	mov	r5, r0
 8019a7e:	d40b      	bmi.n	8019a98 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8019a80:	4620      	mov	r0, r4
 8019a82:	f007 fb7a 	bl	802117a <__cxa_guard_acquire>
 8019a86:	b138      	cbz	r0, 8019a98 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8019a88:	4620      	mov	r0, r4
 8019a8a:	f007 fb82 	bl	8021192 <__cxa_guard_release>
 8019a8e:	4a05      	ldr	r2, [pc, #20]	@ (8019aa4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8019a90:	4905      	ldr	r1, [pc, #20]	@ (8019aa8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8019a92:	4806      	ldr	r0, [pc, #24]	@ (8019aac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019a94:	f007 fb6a 	bl	802116c <__aeabi_atexit>
 8019a98:	4b04      	ldr	r3, [pc, #16]	@ (8019aac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019a9a:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8019a9c:	bd38      	pop	{r3, r4, r5, pc}
 8019a9e:	bf00      	nop
 8019aa0:	2002b0bc 	.word	0x2002b0bc
 8019aa4:	20000000 	.word	0x20000000
 8019aa8:	08015453 	.word	0x08015453
 8019aac:	2000001c 	.word	0x2000001c

08019ab0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4c0b      	ldr	r4, [pc, #44]	@ (8019ae0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8019ab4:	7823      	ldrb	r3, [r4, #0]
 8019ab6:	f3bf 8f5b 	dmb	ish
 8019aba:	07db      	lsls	r3, r3, #31
 8019abc:	4605      	mov	r5, r0
 8019abe:	d40b      	bmi.n	8019ad8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f007 fb5a 	bl	802117a <__cxa_guard_acquire>
 8019ac6:	b138      	cbz	r0, 8019ad8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f007 fb62 	bl	8021192 <__cxa_guard_release>
 8019ace:	4a05      	ldr	r2, [pc, #20]	@ (8019ae4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8019ad0:	4905      	ldr	r1, [pc, #20]	@ (8019ae8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8019ad2:	4806      	ldr	r0, [pc, #24]	@ (8019aec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019ad4:	f007 fb4a 	bl	802116c <__aeabi_atexit>
 8019ad8:	4b04      	ldr	r3, [pc, #16]	@ (8019aec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019ada:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8019ade:	bd38      	pop	{r3, r4, r5, pc}
 8019ae0:	2002b0c0 	.word	0x2002b0c0
 8019ae4:	20000000 	.word	0x20000000
 8019ae8:	08015451 	.word	0x08015451
 8019aec:	20000020 	.word	0x20000020

08019af0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8019af0:	b570      	push	{r4, r5, r6, lr}
 8019af2:	4d0d      	ldr	r5, [pc, #52]	@ (8019b28 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8019af4:	4c0d      	ldr	r4, [pc, #52]	@ (8019b2c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8019af6:	782b      	ldrb	r3, [r5, #0]
 8019af8:	f3bf 8f5b 	dmb	ish
 8019afc:	f013 0f01 	tst.w	r3, #1
 8019b00:	4606      	mov	r6, r0
 8019b02:	d10d      	bne.n	8019b20 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019b04:	4628      	mov	r0, r5
 8019b06:	f007 fb38 	bl	802117a <__cxa_guard_acquire>
 8019b0a:	b148      	cbz	r0, 8019b20 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019b0c:	4b08      	ldr	r3, [pc, #32]	@ (8019b30 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8019b0e:	6023      	str	r3, [r4, #0]
 8019b10:	4628      	mov	r0, r5
 8019b12:	f007 fb3e 	bl	8021192 <__cxa_guard_release>
 8019b16:	4a07      	ldr	r2, [pc, #28]	@ (8019b34 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8019b18:	4907      	ldr	r1, [pc, #28]	@ (8019b38 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f007 fb26 	bl	802116c <__aeabi_atexit>
 8019b20:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8019b24:	bd70      	pop	{r4, r5, r6, pc}
 8019b26:	bf00      	nop
 8019b28:	2002b0c4 	.word	0x2002b0c4
 8019b2c:	2002b23c 	.word	0x2002b23c
 8019b30:	08023b10 	.word	0x08023b10
 8019b34:	20000000 	.word	0x20000000
 8019b38:	0801544f 	.word	0x0801544f

08019b3c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8019b3c:	b510      	push	{r4, lr}
 8019b3e:	4604      	mov	r4, r0
 8019b40:	f7ff ff96 	bl	8019a70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8019b44:	4620      	mov	r0, r4
 8019b46:	f7ff ffb3 	bl	8019ab0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b50:	f7ff bfce 	b.w	8019af0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08019b54 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8019b54:	b570      	push	{r4, r5, r6, lr}
 8019b56:	4d0d      	ldr	r5, [pc, #52]	@ (8019b8c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8019b58:	4c0d      	ldr	r4, [pc, #52]	@ (8019b90 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8019b5a:	782b      	ldrb	r3, [r5, #0]
 8019b5c:	f3bf 8f5b 	dmb	ish
 8019b60:	f013 0f01 	tst.w	r3, #1
 8019b64:	4606      	mov	r6, r0
 8019b66:	d10d      	bne.n	8019b84 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8019b68:	4628      	mov	r0, r5
 8019b6a:	f007 fb06 	bl	802117a <__cxa_guard_acquire>
 8019b6e:	b148      	cbz	r0, 8019b84 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8019b70:	4b08      	ldr	r3, [pc, #32]	@ (8019b94 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8019b72:	6023      	str	r3, [r4, #0]
 8019b74:	4628      	mov	r0, r5
 8019b76:	f007 fb0c 	bl	8021192 <__cxa_guard_release>
 8019b7a:	4a07      	ldr	r2, [pc, #28]	@ (8019b98 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8019b7c:	4907      	ldr	r1, [pc, #28]	@ (8019b9c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 8019b7e:	4620      	mov	r0, r4
 8019b80:	f007 faf4 	bl	802116c <__aeabi_atexit>
 8019b84:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8019b88:	bd70      	pop	{r4, r5, r6, pc}
 8019b8a:	bf00      	nop
 8019b8c:	2002b0b8 	.word	0x2002b0b8
 8019b90:	2002b138 	.word	0x2002b138
 8019b94:	08023b2c 	.word	0x08023b2c
 8019b98:	20000000 	.word	0x20000000
 8019b9c:	0801544d 	.word	0x0801544d

08019ba0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8019ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba4:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8019ba8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8019bac:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8019bb0:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8019bb4:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8019bb8:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8019bbc:	8808      	ldrh	r0, [r1, #0]
 8019bbe:	fb05 4c0e 	mla	ip, r5, lr, r4
 8019bc2:	2d00      	cmp	r5, #0
 8019bc4:	eb02 0a0c 	add.w	sl, r2, ip
 8019bc8:	f2c0 80b0 	blt.w	8019d2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8019bcc:	45ab      	cmp	fp, r5
 8019bce:	f340 80ad 	ble.w	8019d2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8019bd2:	2c00      	cmp	r4, #0
 8019bd4:	f2c0 80a8 	blt.w	8019d28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8019bd8:	45a6      	cmp	lr, r4
 8019bda:	f340 80a5 	ble.w	8019d28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8019bde:	f812 200c 	ldrb.w	r2, [r2, ip]
 8019be2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8019be6:	1c62      	adds	r2, r4, #1
 8019be8:	f100 80a3 	bmi.w	8019d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8019bec:	4596      	cmp	lr, r2
 8019bee:	f340 80a0 	ble.w	8019d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8019bf2:	f1b9 0f00 	cmp.w	r9, #0
 8019bf6:	f000 809c 	beq.w	8019d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8019bfa:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8019bfe:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8019c02:	3501      	adds	r5, #1
 8019c04:	f100 8099 	bmi.w	8019d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8019c08:	45ab      	cmp	fp, r5
 8019c0a:	f340 8096 	ble.w	8019d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8019c0e:	2f00      	cmp	r7, #0
 8019c10:	f000 8093 	beq.w	8019d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8019c14:	2c00      	cmp	r4, #0
 8019c16:	f2c0 808e 	blt.w	8019d36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8019c1a:	45a6      	cmp	lr, r4
 8019c1c:	f340 808b 	ble.w	8019d36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8019c20:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8019c24:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8019c28:	3401      	adds	r4, #1
 8019c2a:	f100 8089 	bmi.w	8019d40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8019c2e:	45a6      	cmp	lr, r4
 8019c30:	f340 8086 	ble.w	8019d40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8019c34:	f1b9 0f00 	cmp.w	r9, #0
 8019c38:	f000 8082 	beq.w	8019d40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8019c3c:	44d6      	add	lr, sl
 8019c3e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019c42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019c46:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8019c4a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8019c4e:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8019c52:	fb19 fe07 	smulbb	lr, r9, r7
 8019c56:	ea44 0808 	orr.w	r8, r4, r8
 8019c5a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8019c5e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8019c62:	f1c7 0210 	rsb	r2, r7, #16
 8019c66:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8019c6a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8019c6e:	ea44 0c0c 	orr.w	ip, r4, ip
 8019c72:	eba2 0209 	sub.w	r2, r2, r9
 8019c76:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8019c7a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8019c7e:	fb04 f40c 	mul.w	r4, r4, ip
 8019c82:	fb02 4808 	mla	r8, r2, r8, r4
 8019c86:	041a      	lsls	r2, r3, #16
 8019c88:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8019c8c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8019c90:	4313      	orrs	r3, r2
 8019c92:	042a      	lsls	r2, r5, #16
 8019c94:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8019c98:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8019c9c:	fb0e 8303 	mla	r3, lr, r3, r8
 8019ca0:	432a      	orrs	r2, r5
 8019ca2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8019ca6:	fb07 3202 	mla	r2, r7, r2, r3
 8019caa:	0d53      	lsrs	r3, r2, #21
 8019cac:	0952      	lsrs	r2, r2, #5
 8019cae:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8019cb2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8019cb6:	431a      	orrs	r2, r3
 8019cb8:	b293      	uxth	r3, r2
 8019cba:	b2b4      	uxth	r4, r6
 8019cbc:	1202      	asrs	r2, r0, #8
 8019cbe:	43f6      	mvns	r6, r6
 8019cc0:	b2f6      	uxtb	r6, r6
 8019cc2:	121d      	asrs	r5, r3, #8
 8019cc4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8019cc8:	fb12 f206 	smulbb	r2, r2, r6
 8019ccc:	10c7      	asrs	r7, r0, #3
 8019cce:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8019cd2:	00c0      	lsls	r0, r0, #3
 8019cd4:	fb05 2504 	mla	r5, r5, r4, r2
 8019cd8:	b2c0      	uxtb	r0, r0
 8019cda:	10da      	asrs	r2, r3, #3
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	b2db      	uxtb	r3, r3
 8019ce0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8019ce4:	fb10 f006 	smulbb	r0, r0, r6
 8019ce8:	b2ad      	uxth	r5, r5
 8019cea:	fb03 0004 	mla	r0, r3, r4, r0
 8019cee:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8019cf2:	fb17 f706 	smulbb	r7, r7, r6
 8019cf6:	b280      	uxth	r0, r0
 8019cf8:	1c6b      	adds	r3, r5, #1
 8019cfa:	fb02 7204 	mla	r2, r2, r4, r7
 8019cfe:	b292      	uxth	r2, r2
 8019d00:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019d04:	1c43      	adds	r3, r0, #1
 8019d06:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019d0a:	1c50      	adds	r0, r2, #1
 8019d0c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019d10:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8019d14:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019d18:	0952      	lsrs	r2, r2, #5
 8019d1a:	432b      	orrs	r3, r5
 8019d1c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8019d20:	4313      	orrs	r3, r2
 8019d22:	800b      	strh	r3, [r1, #0]
 8019d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d28:	4680      	mov	r8, r0
 8019d2a:	e75c      	b.n	8019be6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8019d2c:	4684      	mov	ip, r0
 8019d2e:	4680      	mov	r8, r0
 8019d30:	e767      	b.n	8019c02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8019d32:	4684      	mov	ip, r0
 8019d34:	e765      	b.n	8019c02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8019d36:	4605      	mov	r5, r0
 8019d38:	e776      	b.n	8019c28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	e782      	b.n	8019c46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8019d40:	4603      	mov	r3, r0
 8019d42:	e780      	b.n	8019c46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08019d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	b099      	sub	sp, #100	@ 0x64
 8019d4a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8019d4e:	9215      	str	r2, [sp, #84]	@ 0x54
 8019d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d52:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8019d54:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8019d58:	930d      	str	r3, [sp, #52]	@ 0x34
 8019d5a:	910c      	str	r1, [sp, #48]	@ 0x30
 8019d5c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8019d60:	9016      	str	r0, [sp, #88]	@ 0x58
 8019d62:	6850      	ldr	r0, [r2, #4]
 8019d64:	6812      	ldr	r2, [r2, #0]
 8019d66:	fb00 1303 	mla	r3, r0, r3, r1
 8019d6a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8019d6e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019d74:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019d76:	685e      	ldr	r6, [r3, #4]
 8019d78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019d7a:	43db      	mvns	r3, r3
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	3604      	adds	r6, #4
 8019d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	dc03      	bgt.n	8019d90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019d88:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	f340 8225 	ble.w	801a1da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8019d90:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019d92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019d96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019d9a:	1e48      	subs	r0, r1, #1
 8019d9c:	1e57      	subs	r7, r2, #1
 8019d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	f340 80e3 	ble.w	8019f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8019da6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8019daa:	ea4f 4325 	mov.w	r3, r5, asr #16
 8019dae:	d406      	bmi.n	8019dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019db0:	4584      	cmp	ip, r0
 8019db2:	da04      	bge.n	8019dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	db02      	blt.n	8019dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019db8:	42bb      	cmp	r3, r7
 8019dba:	f2c0 80d8 	blt.w	8019f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019dbe:	f11c 0c01 	adds.w	ip, ip, #1
 8019dc2:	f100 80c9 	bmi.w	8019f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019dc6:	4561      	cmp	r1, ip
 8019dc8:	f2c0 80c6 	blt.w	8019f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019dcc:	3301      	adds	r3, #1
 8019dce:	f100 80c3 	bmi.w	8019f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	f2c0 80c0 	blt.w	8019f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019dd8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8019ddc:	4647      	mov	r7, r8
 8019dde:	f1bb 0f00 	cmp.w	fp, #0
 8019de2:	f340 80e3 	ble.w	8019fac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8019de6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8019de8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8019dea:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8019dee:	689b      	ldr	r3, [r3, #8]
 8019df0:	ea5f 422a 	movs.w	r2, sl, asr #16
 8019df4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019df8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8019dfc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019e00:	f100 8121 	bmi.w	801a046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8019e04:	f103 39ff 	add.w	r9, r3, #4294967295
 8019e08:	454a      	cmp	r2, r9
 8019e0a:	f280 811c 	bge.w	801a046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8019e0e:	f1bc 0f00 	cmp.w	ip, #0
 8019e12:	f2c0 8118 	blt.w	801a046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8019e16:	f10e 39ff 	add.w	r9, lr, #4294967295
 8019e1a:	45cc      	cmp	ip, r9
 8019e1c:	f280 8113 	bge.w	801a046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8019e20:	b21b      	sxth	r3, r3
 8019e22:	fb0c 2203 	mla	r2, ip, r3, r2
 8019e26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019e28:	eb04 0902 	add.w	r9, r4, r2
 8019e2c:	5ca2      	ldrb	r2, [r4, r2]
 8019e2e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8019e32:	2800      	cmp	r0, #0
 8019e34:	f000 80fe 	beq.w	801a034 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8019e38:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019e3c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8019e40:	9211      	str	r2, [sp, #68]	@ 0x44
 8019e42:	b151      	cbz	r1, 8019e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8019e44:	eb09 0203 	add.w	r2, r9, r3
 8019e48:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019e4c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8019e50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019e52:	7853      	ldrb	r3, [r2, #1]
 8019e54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8019e58:	9312      	str	r3, [sp, #72]	@ 0x48
 8019e5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019e5c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019e5e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8019e62:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8019e66:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8019e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8019e6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019e70:	041b      	lsls	r3, r3, #16
 8019e72:	fb10 f201 	smulbb	r2, r0, r1
 8019e76:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8019e7a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8019e7e:	10d2      	asrs	r2, r2, #3
 8019e80:	4323      	orrs	r3, r4
 8019e82:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8019e86:	4353      	muls	r3, r2
 8019e88:	fb09 330c 	mla	r3, r9, ip, r3
 8019e8c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8019e90:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8019e94:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8019e98:	ea4c 0e0e 	orr.w	lr, ip, lr
 8019e9c:	f1c1 0c10 	rsb	ip, r1, #16
 8019ea0:	ebac 0c00 	sub.w	ip, ip, r0
 8019ea4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8019ea8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8019eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019eb0:	0418      	lsls	r0, r3, #16
 8019eb2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8019eb6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8019eba:	4318      	orrs	r0, r3
 8019ebc:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8019ec0:	fb02 c200 	mla	r2, r2, r0, ip
 8019ec4:	0d53      	lsrs	r3, r2, #21
 8019ec6:	0952      	lsrs	r2, r2, #5
 8019ec8:	8838      	ldrh	r0, [r7, #0]
 8019eca:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8019ece:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8019ed2:	431a      	orrs	r2, r3
 8019ed4:	b292      	uxth	r2, r2
 8019ed6:	1201      	asrs	r1, r0, #8
 8019ed8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8019edc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8019ee0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8019ee4:	fb11 f104 	smulbb	r1, r1, r4
 8019ee8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8019eec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8019ef0:	00c0      	lsls	r0, r0, #3
 8019ef2:	fb0c 1c03 	mla	ip, ip, r3, r1
 8019ef6:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8019efa:	10d1      	asrs	r1, r2, #3
 8019efc:	b2c0      	uxtb	r0, r0
 8019efe:	00d2      	lsls	r2, r2, #3
 8019f00:	b2d2      	uxtb	r2, r2
 8019f02:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8019f06:	fb1e fe04 	smulbb	lr, lr, r4
 8019f0a:	fb10 f004 	smulbb	r0, r0, r4
 8019f0e:	fa1f fc8c 	uxth.w	ip, ip
 8019f12:	fb01 e103 	mla	r1, r1, r3, lr
 8019f16:	fb02 0303 	mla	r3, r2, r3, r0
 8019f1a:	b29a      	uxth	r2, r3
 8019f1c:	f10c 0301 	add.w	r3, ip, #1
 8019f20:	b289      	uxth	r1, r1
 8019f22:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019f26:	1c53      	adds	r3, r2, #1
 8019f28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019f2c:	1c4a      	adds	r2, r1, #1
 8019f2e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019f32:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8019f36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019f3a:	0949      	lsrs	r1, r1, #5
 8019f3c:	ea43 030c 	orr.w	r3, r3, ip
 8019f40:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8019f44:	430b      	orrs	r3, r1
 8019f46:	803b      	strh	r3, [r7, #0]
 8019f48:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019f4a:	449a      	add	sl, r3
 8019f4c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019f4e:	3702      	adds	r7, #2
 8019f50:	441d      	add	r5, r3
 8019f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019f56:	e742      	b.n	8019dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019f58:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8019f5a:	449a      	add	sl, r3
 8019f5c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019f5e:	441d      	add	r5, r3
 8019f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f62:	3b01      	subs	r3, #1
 8019f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f66:	f108 0802 	add.w	r8, r8, #2
 8019f6a:	e718      	b.n	8019d9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019f6c:	d023      	beq.n	8019fb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8019f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f70:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8019f72:	3b01      	subs	r3, #1
 8019f74:	fb00 a003 	mla	r0, r0, r3, sl
 8019f78:	1400      	asrs	r0, r0, #16
 8019f7a:	f53f af2d 	bmi.w	8019dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f7e:	3901      	subs	r1, #1
 8019f80:	4288      	cmp	r0, r1
 8019f82:	f6bf af29 	bge.w	8019dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f86:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8019f88:	fb01 5303 	mla	r3, r1, r3, r5
 8019f8c:	141b      	asrs	r3, r3, #16
 8019f8e:	f53f af23 	bmi.w	8019dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f92:	3a01      	subs	r2, #1
 8019f94:	4293      	cmp	r3, r2
 8019f96:	f6bf af1f 	bge.w	8019dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f9a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8019f9e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8019fa2:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8019fa6:	f1be 0f00 	cmp.w	lr, #0
 8019faa:	dc6c      	bgt.n	801a086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8019fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019fb2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8019fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	f340 810e 	ble.w	801a1da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8019fbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019fc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019fca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019fcc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019fd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019fd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019fd8:	eef0 6a62 	vmov.f32	s13, s5
 8019fdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019fe0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019fe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019fe8:	ee16 aa90 	vmov	sl, s13
 8019fec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ff0:	eef0 6a43 	vmov.f32	s13, s6
 8019ff4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ff8:	ee12 2a90 	vmov	r2, s5
 8019ffc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a000:	fb92 f3f3 	sdiv	r3, r2, r3
 801a004:	ee13 2a10 	vmov	r2, s6
 801a008:	9325      	str	r3, [sp, #148]	@ 0x94
 801a00a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a00c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a010:	9326      	str	r3, [sp, #152]	@ 0x98
 801a012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a014:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a016:	3b01      	subs	r3, #1
 801a018:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a01c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a01e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a020:	bf08      	it	eq
 801a022:	4613      	moveq	r3, r2
 801a024:	ee16 5a90 	vmov	r5, s13
 801a028:	9309      	str	r3, [sp, #36]	@ 0x24
 801a02a:	eeb0 3a67 	vmov.f32	s6, s15
 801a02e:	eef0 2a47 	vmov.f32	s5, s14
 801a032:	e6a6      	b.n	8019d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a034:	2900      	cmp	r1, #0
 801a036:	f43f af10 	beq.w	8019e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a03a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a03e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a042:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a044:	e709      	b.n	8019e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801a046:	f112 0901 	adds.w	r9, r2, #1
 801a04a:	f53f af7d 	bmi.w	8019f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a04e:	454b      	cmp	r3, r9
 801a050:	f6ff af7a 	blt.w	8019f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a054:	f11c 0901 	adds.w	r9, ip, #1
 801a058:	f53f af76 	bmi.w	8019f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a05c:	45ce      	cmp	lr, r9
 801a05e:	f6ff af73 	blt.w	8019f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a062:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a064:	9202      	str	r2, [sp, #8]
 801a066:	b21b      	sxth	r3, r3
 801a068:	fa0f f28e 	sxth.w	r2, lr
 801a06c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a070:	e9cd c003 	strd	ip, r0, [sp, #12]
 801a074:	9201      	str	r2, [sp, #4]
 801a076:	9300      	str	r3, [sp, #0]
 801a078:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a07a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801a07c:	4633      	mov	r3, r6
 801a07e:	4639      	mov	r1, r7
 801a080:	f7ff fd8e 	bl	8019ba0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801a084:	e760      	b.n	8019f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a086:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801a088:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a08a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a08e:	ea4f 422a 	mov.w	r2, sl, asr #16
 801a092:	1429      	asrs	r1, r5, #16
 801a094:	fb03 2101 	mla	r1, r3, r1, r2
 801a098:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a09a:	440a      	add	r2, r1
 801a09c:	5c61      	ldrb	r1, [r4, r1]
 801a09e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801a0a2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a0a6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801a0aa:	f1bc 0f00 	cmp.w	ip, #0
 801a0ae:	f000 808c 	beq.w	801a1ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801a0b2:	7857      	ldrb	r7, [r2, #1]
 801a0b4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801a0b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801a0ba:	b140      	cbz	r0, 801a0ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a0bc:	18d7      	adds	r7, r2, r3
 801a0be:	5cd3      	ldrb	r3, [r2, r3]
 801a0c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a0c4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a0c6:	787b      	ldrb	r3, [r7, #1]
 801a0c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a0cc:	9314      	str	r3, [sp, #80]	@ 0x50
 801a0ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a0d0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801a0d2:	fb1c f200 	smulbb	r2, ip, r0
 801a0d6:	041f      	lsls	r7, r3, #16
 801a0d8:	10d2      	asrs	r2, r2, #3
 801a0da:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801a0de:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 801a0e2:	431f      	orrs	r7, r3
 801a0e4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801a0e8:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a0ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a0ec:	041b      	lsls	r3, r3, #16
 801a0ee:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 801a0f2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a0f6:	ea43 030b 	orr.w	r3, r3, fp
 801a0fa:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801a0fc:	4353      	muls	r3, r2
 801a0fe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a102:	fb04 3707 	mla	r7, r4, r7, r3
 801a106:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801a10a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801a10e:	ea43 0b01 	orr.w	fp, r3, r1
 801a112:	f1c0 0110 	rsb	r1, r0, #16
 801a116:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a118:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a11a:	eba1 0c0c 	sub.w	ip, r1, ip
 801a11e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801a122:	fb0c 770b 	mla	r7, ip, fp, r7
 801a126:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a12a:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 801a12e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801a132:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801a136:	ea4c 0c0b 	orr.w	ip, ip, fp
 801a13a:	fb02 770c 	mla	r7, r2, ip, r7
 801a13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a140:	0d79      	lsrs	r1, r7, #21
 801a142:	097f      	lsrs	r7, r7, #5
 801a144:	8812      	ldrh	r2, [r2, #0]
 801a146:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801a14a:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801a14e:	430f      	orrs	r7, r1
 801a150:	b2bb      	uxth	r3, r7
 801a152:	1211      	asrs	r1, r2, #8
 801a154:	1218      	asrs	r0, r3, #8
 801a156:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801a15a:	fb11 f104 	smulbb	r1, r1, r4
 801a15e:	10d7      	asrs	r7, r2, #3
 801a160:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801a164:	00d2      	lsls	r2, r2, #3
 801a166:	fb00 1009 	mla	r0, r0, r9, r1
 801a16a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a16e:	10d9      	asrs	r1, r3, #3
 801a170:	b2d2      	uxtb	r2, r2
 801a172:	00db      	lsls	r3, r3, #3
 801a174:	fb17 f704 	smulbb	r7, r7, r4
 801a178:	fb12 f204 	smulbb	r2, r2, r4
 801a17c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801a180:	b2db      	uxtb	r3, r3
 801a182:	b280      	uxth	r0, r0
 801a184:	fb01 7109 	mla	r1, r1, r9, r7
 801a188:	fb03 2309 	mla	r3, r3, r9, r2
 801a18c:	b29b      	uxth	r3, r3
 801a18e:	b289      	uxth	r1, r1
 801a190:	1c42      	adds	r2, r0, #1
 801a192:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a196:	1c4f      	adds	r7, r1, #1
 801a198:	1c5a      	adds	r2, r3, #1
 801a19a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a19e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a1a2:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801a1a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a1aa:	0949      	lsrs	r1, r1, #5
 801a1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a1ae:	4310      	orrs	r0, r2
 801a1b0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801a1b4:	4308      	orrs	r0, r1
 801a1b6:	f823 0b02 	strh.w	r0, [r3], #2
 801a1ba:	930e      	str	r3, [sp, #56]	@ 0x38
 801a1bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a1be:	449a      	add	sl, r3
 801a1c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a1c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a1c6:	441d      	add	r5, r3
 801a1c8:	e6ed      	b.n	8019fa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	f43f af7f 	beq.w	801a0ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a1d0:	5cd3      	ldrb	r3, [r2, r3]
 801a1d2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801a1d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a1d8:	e779      	b.n	801a0ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a1da:	b019      	add	sp, #100	@ 0x64
 801a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1e4:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 801a1e8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a1ec:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 801a1f0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801a1f4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801a1f8:	8808      	ldrh	r0, [r1, #0]
 801a1fa:	fb08 470e 	mla	r7, r8, lr, r4
 801a1fe:	f1b8 0f00 	cmp.w	r8, #0
 801a202:	eb02 0907 	add.w	r9, r2, r7
 801a206:	db67      	blt.n	801a2d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801a208:	45c2      	cmp	sl, r8
 801a20a:	dd65      	ble.n	801a2d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801a20c:	2c00      	cmp	r4, #0
 801a20e:	db61      	blt.n	801a2d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801a210:	45a6      	cmp	lr, r4
 801a212:	dd5f      	ble.n	801a2d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801a214:	5dd2      	ldrb	r2, [r2, r7]
 801a216:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801a21a:	1c62      	adds	r2, r4, #1
 801a21c:	d45f      	bmi.n	801a2de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a21e:	4596      	cmp	lr, r2
 801a220:	dd5d      	ble.n	801a2de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a222:	2d00      	cmp	r5, #0
 801a224:	d05b      	beq.n	801a2de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801a226:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a22a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801a22e:	f118 0801 	adds.w	r8, r8, #1
 801a232:	d458      	bmi.n	801a2e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a234:	45c2      	cmp	sl, r8
 801a236:	dd56      	ble.n	801a2e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a238:	2e00      	cmp	r6, #0
 801a23a:	d054      	beq.n	801a2e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801a23c:	2c00      	cmp	r4, #0
 801a23e:	db50      	blt.n	801a2e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801a240:	45a6      	cmp	lr, r4
 801a242:	dd4e      	ble.n	801a2e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801a244:	f819 200e 	ldrb.w	r2, [r9, lr]
 801a248:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a24c:	3401      	adds	r4, #1
 801a24e:	d407      	bmi.n	801a260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a250:	45a6      	cmp	lr, r4
 801a252:	dd05      	ble.n	801a260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a254:	b125      	cbz	r5, 801a260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801a256:	44ce      	add	lr, r9
 801a258:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801a25c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a260:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801a264:	fb15 f406 	smulbb	r4, r5, r6
 801a268:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a26c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801a270:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801a274:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801a278:	ea43 0c0c 	orr.w	ip, r3, ip
 801a27c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801a280:	f1c6 0310 	rsb	r3, r6, #16
 801a284:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801a288:	1b5b      	subs	r3, r3, r5
 801a28a:	ea4e 0707 	orr.w	r7, lr, r7
 801a28e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801a292:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a296:	437d      	muls	r5, r7
 801a298:	fb03 5c0c 	mla	ip, r3, ip, r5
 801a29c:	0403      	lsls	r3, r0, #16
 801a29e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a2a2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801a2a6:	4318      	orrs	r0, r3
 801a2a8:	0413      	lsls	r3, r2, #16
 801a2aa:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a2ae:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801a2b2:	4313      	orrs	r3, r2
 801a2b4:	fb04 c000 	mla	r0, r4, r0, ip
 801a2b8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801a2bc:	fb06 0003 	mla	r0, r6, r3, r0
 801a2c0:	0d43      	lsrs	r3, r0, #21
 801a2c2:	0940      	lsrs	r0, r0, #5
 801a2c4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a2c8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801a2cc:	4318      	orrs	r0, r3
 801a2ce:	8008      	strh	r0, [r1, #0]
 801a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2d4:	4684      	mov	ip, r0
 801a2d6:	e7a0      	b.n	801a21a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801a2d8:	4607      	mov	r7, r0
 801a2da:	4684      	mov	ip, r0
 801a2dc:	e7a7      	b.n	801a22e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801a2de:	4607      	mov	r7, r0
 801a2e0:	e7a5      	b.n	801a22e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	e7b2      	b.n	801a24c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801a2e6:	4602      	mov	r2, r0
 801a2e8:	e7ba      	b.n	801a260 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801a2ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ee:	b093      	sub	sp, #76	@ 0x4c
 801a2f0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801a2f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a2f6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a2f8:	9108      	str	r1, [sp, #32]
 801a2fa:	9306      	str	r3, [sp, #24]
 801a2fc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a300:	9010      	str	r0, [sp, #64]	@ 0x40
 801a302:	6850      	ldr	r0, [r2, #4]
 801a304:	6812      	ldr	r2, [r2, #0]
 801a306:	fb00 1303 	mla	r3, r0, r3, r1
 801a30a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801a30e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	9307      	str	r3, [sp, #28]
 801a314:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a316:	685f      	ldr	r7, [r3, #4]
 801a318:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a31c:	3704      	adds	r7, #4
 801a31e:	9b08      	ldr	r3, [sp, #32]
 801a320:	2b00      	cmp	r3, #0
 801a322:	dc03      	bgt.n	801a32c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a326:	2b00      	cmp	r3, #0
 801a328:	f340 81b2 	ble.w	801a690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801a32c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a32e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a332:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a336:	1e48      	subs	r0, r1, #1
 801a338:	f102 3cff 	add.w	ip, r2, #4294967295
 801a33c:	9b06      	ldr	r3, [sp, #24]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	f340 80a9 	ble.w	801a496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a344:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801a348:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a34c:	d406      	bmi.n	801a35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a34e:	4586      	cmp	lr, r0
 801a350:	da04      	bge.n	801a35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a352:	2b00      	cmp	r3, #0
 801a354:	db02      	blt.n	801a35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a356:	4563      	cmp	r3, ip
 801a358:	f2c0 809e 	blt.w	801a498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801a35c:	f11e 0e01 	adds.w	lr, lr, #1
 801a360:	f100 808f 	bmi.w	801a482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a364:	4571      	cmp	r1, lr
 801a366:	f2c0 808c 	blt.w	801a482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a36a:	3301      	adds	r3, #1
 801a36c:	f100 8089 	bmi.w	801a482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a370:	429a      	cmp	r2, r3
 801a372:	f2c0 8086 	blt.w	801a482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801a376:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a37a:	46c8      	mov	r8, r9
 801a37c:	f1bb 0f00 	cmp.w	fp, #0
 801a380:	f340 80a6 	ble.w	801a4d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a384:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a386:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a388:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a38c:	689b      	ldr	r3, [r3, #8]
 801a38e:	1422      	asrs	r2, r4, #16
 801a390:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a394:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a398:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a39c:	f100 80e3 	bmi.w	801a566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a3a0:	f103 3aff 	add.w	sl, r3, #4294967295
 801a3a4:	4552      	cmp	r2, sl
 801a3a6:	f280 80de 	bge.w	801a566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a3aa:	f1bc 0f00 	cmp.w	ip, #0
 801a3ae:	f2c0 80da 	blt.w	801a566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a3b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 801a3b6:	45d4      	cmp	ip, sl
 801a3b8:	f280 80d5 	bge.w	801a566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a3bc:	b21b      	sxth	r3, r3
 801a3be:	fb0c 2203 	mla	r2, ip, r3, r2
 801a3c2:	9d07      	ldr	r5, [sp, #28]
 801a3c4:	eb05 0a02 	add.w	sl, r5, r2
 801a3c8:	5caa      	ldrb	r2, [r5, r2]
 801a3ca:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	f000 80c0 	beq.w	801a554 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a3d4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801a3d8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801a3dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a3de:	b151      	cbz	r1, 801a3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801a3e0:	eb0a 0203 	add.w	r2, sl, r3
 801a3e4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801a3e8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801a3ee:	7853      	ldrb	r3, [r2, #1]
 801a3f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a3f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a3f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a3fa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a3fe:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801a402:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801a406:	ea4c 0c03 	orr.w	ip, ip, r3
 801a40a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a40c:	041b      	lsls	r3, r3, #16
 801a40e:	fb10 f201 	smulbb	r2, r0, r1
 801a412:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a416:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801a41a:	10d2      	asrs	r2, r2, #3
 801a41c:	432b      	orrs	r3, r5
 801a41e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801a422:	4353      	muls	r3, r2
 801a424:	fb0a 330c 	mla	r3, sl, ip, r3
 801a428:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801a42c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801a430:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801a434:	ea4c 0e0e 	orr.w	lr, ip, lr
 801a438:	f1c1 0c10 	rsb	ip, r1, #16
 801a43c:	ebac 0c00 	sub.w	ip, ip, r0
 801a440:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801a444:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801a448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a44a:	0418      	lsls	r0, r3, #16
 801a44c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801a450:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801a454:	4318      	orrs	r0, r3
 801a456:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801a45a:	fb02 c200 	mla	r2, r2, r0, ip
 801a45e:	0d53      	lsrs	r3, r2, #21
 801a460:	0952      	lsrs	r2, r2, #5
 801a462:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a466:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801a46a:	431a      	orrs	r2, r3
 801a46c:	f8a8 2000 	strh.w	r2, [r8]
 801a470:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a472:	441c      	add	r4, r3
 801a474:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a476:	f108 0802 	add.w	r8, r8, #2
 801a47a:	441e      	add	r6, r3
 801a47c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a480:	e77c      	b.n	801a37c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a482:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a484:	441c      	add	r4, r3
 801a486:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a488:	441e      	add	r6, r3
 801a48a:	9b06      	ldr	r3, [sp, #24]
 801a48c:	3b01      	subs	r3, #1
 801a48e:	9306      	str	r3, [sp, #24]
 801a490:	f109 0902 	add.w	r9, r9, #2
 801a494:	e752      	b.n	801a33c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a496:	d020      	beq.n	801a4da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a498:	9b06      	ldr	r3, [sp, #24]
 801a49a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a49c:	3b01      	subs	r3, #1
 801a49e:	fb00 4003 	mla	r0, r0, r3, r4
 801a4a2:	1400      	asrs	r0, r0, #16
 801a4a4:	f53f af67 	bmi.w	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a4a8:	3901      	subs	r1, #1
 801a4aa:	4288      	cmp	r0, r1
 801a4ac:	f6bf af63 	bge.w	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a4b0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801a4b2:	fb01 6303 	mla	r3, r1, r3, r6
 801a4b6:	141b      	asrs	r3, r3, #16
 801a4b8:	f53f af5d 	bmi.w	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a4bc:	3a01      	subs	r2, #1
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	f6bf af59 	bge.w	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a4c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a4c8:	46ca      	mov	sl, r9
 801a4ca:	f1b8 0f00 	cmp.w	r8, #0
 801a4ce:	dc67      	bgt.n	801a5a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a4d0:	9b06      	ldr	r3, [sp, #24]
 801a4d2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801a4d6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801a4da:	9b08      	ldr	r3, [sp, #32]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	f340 80d7 	ble.w	801a690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801a4e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a4e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a4f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4f8:	eeb0 6a62 	vmov.f32	s12, s5
 801a4fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a500:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a504:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a508:	ee16 4a10 	vmov	r4, s12
 801a50c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a510:	eeb0 6a43 	vmov.f32	s12, s6
 801a514:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a518:	ee12 2a90 	vmov	r2, s5
 801a51c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a520:	fb92 f3f3 	sdiv	r3, r2, r3
 801a524:	ee13 2a10 	vmov	r2, s6
 801a528:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a52a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a52c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a530:	9320      	str	r3, [sp, #128]	@ 0x80
 801a532:	9b08      	ldr	r3, [sp, #32]
 801a534:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a536:	3b01      	subs	r3, #1
 801a538:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a53c:	9308      	str	r3, [sp, #32]
 801a53e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a540:	bf08      	it	eq
 801a542:	4613      	moveq	r3, r2
 801a544:	ee16 6a10 	vmov	r6, s12
 801a548:	9306      	str	r3, [sp, #24]
 801a54a:	eeb0 3a67 	vmov.f32	s6, s15
 801a54e:	eef0 2a47 	vmov.f32	s5, s14
 801a552:	e6e4      	b.n	801a31e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a554:	2900      	cmp	r1, #0
 801a556:	f43f af4e 	beq.w	801a3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801a55a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801a55e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a562:	9309      	str	r3, [sp, #36]	@ 0x24
 801a564:	e747      	b.n	801a3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801a566:	f112 0a01 	adds.w	sl, r2, #1
 801a56a:	d481      	bmi.n	801a470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a56c:	4553      	cmp	r3, sl
 801a56e:	f6ff af7f 	blt.w	801a470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a572:	f11c 0a01 	adds.w	sl, ip, #1
 801a576:	f53f af7b 	bmi.w	801a470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a57a:	45d6      	cmp	lr, sl
 801a57c:	f6ff af78 	blt.w	801a470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a580:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801a584:	b21b      	sxth	r3, r3
 801a586:	fa0f f28e 	sxth.w	r2, lr
 801a58a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a58e:	9201      	str	r2, [sp, #4]
 801a590:	9300      	str	r3, [sp, #0]
 801a592:	9a07      	ldr	r2, [sp, #28]
 801a594:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a596:	463b      	mov	r3, r7
 801a598:	4641      	mov	r1, r8
 801a59a:	f7ff fe21 	bl	801a1e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801a59e:	e767      	b.n	801a470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a5a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a5a2:	9d07      	ldr	r5, [sp, #28]
 801a5a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a5a8:	1422      	asrs	r2, r4, #16
 801a5aa:	1431      	asrs	r1, r6, #16
 801a5ac:	fb03 2101 	mla	r1, r3, r1, r2
 801a5b0:	9a07      	ldr	r2, [sp, #28]
 801a5b2:	440a      	add	r2, r1
 801a5b4:	5c69      	ldrb	r1, [r5, r1]
 801a5b6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801a5ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a5be:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801a5c2:	f1be 0f00 	cmp.w	lr, #0
 801a5c6:	d05c      	beq.n	801a682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801a5c8:	f892 c001 	ldrb.w	ip, [r2, #1]
 801a5cc:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801a5d0:	950d      	str	r5, [sp, #52]	@ 0x34
 801a5d2:	b150      	cbz	r0, 801a5ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801a5d4:	eb02 0c03 	add.w	ip, r2, r3
 801a5d8:	5cd3      	ldrb	r3, [r2, r3]
 801a5da:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a5de:	930a      	str	r3, [sp, #40]	@ 0x28
 801a5e0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a5e4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a5e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a5ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5ec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801a5ee:	fb1e f200 	smulbb	r2, lr, r0
 801a5f2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a5f6:	10d2      	asrs	r2, r2, #3
 801a5f8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801a5fc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801a600:	ea4c 0c03 	orr.w	ip, ip, r3
 801a604:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801a608:	9311      	str	r3, [sp, #68]	@ 0x44
 801a60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a60c:	041b      	lsls	r3, r3, #16
 801a60e:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 801a612:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801a616:	ea43 030b 	orr.w	r3, r3, fp
 801a61a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a61c:	4353      	muls	r3, r2
 801a61e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a622:	fb05 3c0c 	mla	ip, r5, ip, r3
 801a626:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801a62a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801a62e:	ea43 0b01 	orr.w	fp, r3, r1
 801a632:	f1c0 0110 	rsb	r1, r0, #16
 801a636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a638:	eba1 0e0e 	sub.w	lr, r1, lr
 801a63c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801a640:	fb0e cc0b 	mla	ip, lr, fp, ip
 801a644:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801a648:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 801a64c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801a650:	ea4b 0e0e 	orr.w	lr, fp, lr
 801a654:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801a658:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a65c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801a660:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a664:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801a668:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801a66c:	ea43 0c0c 	orr.w	ip, r3, ip
 801a670:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a672:	f82a cb02 	strh.w	ip, [sl], #2
 801a676:	441c      	add	r4, r3
 801a678:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a67a:	f108 38ff 	add.w	r8, r8, #4294967295
 801a67e:	441e      	add	r6, r3
 801a680:	e723      	b.n	801a4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a682:	2800      	cmp	r0, #0
 801a684:	d0b1      	beq.n	801a5ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801a686:	5cd3      	ldrb	r3, [r2, r3]
 801a688:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801a68c:	930a      	str	r3, [sp, #40]	@ 0x28
 801a68e:	e7ac      	b.n	801a5ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801a690:	b013      	add	sp, #76	@ 0x4c
 801a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a696 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801a696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a69a:	880d      	ldrh	r5, [r1, #0]
 801a69c:	b087      	sub	sp, #28
 801a69e:	10ef      	asrs	r7, r5, #3
 801a6a0:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801a6a4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a6a8:	00ed      	lsls	r5, r5, #3
 801a6aa:	9701      	str	r7, [sp, #4]
 801a6ac:	b2ed      	uxtb	r5, r5
 801a6ae:	9502      	str	r5, [sp, #8]
 801a6b0:	9d01      	ldr	r5, [sp, #4]
 801a6b2:	9103      	str	r1, [sp, #12]
 801a6b4:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801a6b8:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 801a6bc:	9902      	ldr	r1, [sp, #8]
 801a6be:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a6c2:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801a6c6:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 801a6ca:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 801a6ce:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801a6d2:	022d      	lsls	r5, r5, #8
 801a6d4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801a6d8:	fb06 0709 	mla	r7, r6, r9, r0
 801a6dc:	430d      	orrs	r5, r1
 801a6de:	2e00      	cmp	r6, #0
 801a6e0:	eb02 0c07 	add.w	ip, r2, r7
 801a6e4:	9505      	str	r5, [sp, #20]
 801a6e6:	f2c0 80b6 	blt.w	801a856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801a6ea:	45b3      	cmp	fp, r6
 801a6ec:	f340 80b3 	ble.w	801a856 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	f2c0 80ae 	blt.w	801a852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801a6f6:	4581      	cmp	r9, r0
 801a6f8:	f340 80ab 	ble.w	801a852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801a6fc:	5dd7      	ldrb	r7, [r2, r7]
 801a6fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a702:	441f      	add	r7, r3
 801a704:	1c42      	adds	r2, r0, #1
 801a706:	f100 80a9 	bmi.w	801a85c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801a70a:	4591      	cmp	r9, r2
 801a70c:	f340 80a6 	ble.w	801a85c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801a710:	2c00      	cmp	r4, #0
 801a712:	f000 80a3 	beq.w	801a85c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801a716:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801a71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a71e:	441d      	add	r5, r3
 801a720:	3601      	adds	r6, #1
 801a722:	f100 809f 	bmi.w	801a864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801a726:	45b3      	cmp	fp, r6
 801a728:	f340 809c 	ble.w	801a864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801a72c:	f1be 0f00 	cmp.w	lr, #0
 801a730:	f000 8098 	beq.w	801a864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801a734:	2800      	cmp	r0, #0
 801a736:	f2c0 8093 	blt.w	801a860 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801a73a:	4581      	cmp	r9, r0
 801a73c:	f340 8090 	ble.w	801a860 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801a740:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801a744:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a748:	441e      	add	r6, r3
 801a74a:	3001      	adds	r0, #1
 801a74c:	f100 808d 	bmi.w	801a86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801a750:	4581      	cmp	r9, r0
 801a752:	f340 808a 	ble.w	801a86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801a756:	2c00      	cmp	r4, #0
 801a758:	f000 8087 	beq.w	801a86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801a75c:	44e1      	add	r9, ip
 801a75e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a762:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a766:	4413      	add	r3, r2
 801a768:	b2a4      	uxth	r4, r4
 801a76a:	fa1f fe8e 	uxth.w	lr, lr
 801a76e:	fb04 fb0e 	mul.w	fp, r4, lr
 801a772:	0124      	lsls	r4, r4, #4
 801a774:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801a778:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 801a77c:	eba4 040b 	sub.w	r4, r4, fp
 801a780:	fa1f f08e 	uxth.w	r0, lr
 801a784:	b2a2      	uxth	r2, r4
 801a786:	78ac      	ldrb	r4, [r5, #2]
 801a788:	f897 c002 	ldrb.w	ip, [r7, #2]
 801a78c:	9901      	ldr	r1, [sp, #4]
 801a78e:	eba9 0900 	sub.w	r9, r9, r0
 801a792:	fa1f f989 	uxth.w	r9, r9
 801a796:	4354      	muls	r4, r2
 801a798:	fb09 440c 	mla	r4, r9, ip, r4
 801a79c:	f896 c002 	ldrb.w	ip, [r6, #2]
 801a7a0:	fb00 440c 	mla	r4, r0, ip, r4
 801a7a4:	f893 c002 	ldrb.w	ip, [r3, #2]
 801a7a8:	fa1f fe88 	uxth.w	lr, r8
 801a7ac:	ea6f 0808 	mvn.w	r8, r8
 801a7b0:	fa5f f888 	uxtb.w	r8, r8
 801a7b4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801a7b8:	fb1a fa08 	smulbb	sl, sl, r8
 801a7bc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a7c0:	fb0c ac0e 	mla	ip, ip, lr, sl
 801a7c4:	f895 a001 	ldrb.w	sl, [r5, #1]
 801a7c8:	787c      	ldrb	r4, [r7, #1]
 801a7ca:	782d      	ldrb	r5, [r5, #0]
 801a7cc:	783f      	ldrb	r7, [r7, #0]
 801a7ce:	fb02 fa0a 	mul.w	sl, r2, sl
 801a7d2:	fb09 aa04 	mla	sl, r9, r4, sl
 801a7d6:	7874      	ldrb	r4, [r6, #1]
 801a7d8:	436a      	muls	r2, r5
 801a7da:	7835      	ldrb	r5, [r6, #0]
 801a7dc:	fb00 aa04 	mla	sl, r0, r4, sl
 801a7e0:	fb09 2207 	mla	r2, r9, r7, r2
 801a7e4:	785c      	ldrb	r4, [r3, #1]
 801a7e6:	781b      	ldrb	r3, [r3, #0]
 801a7e8:	fb00 2005 	mla	r0, r0, r5, r2
 801a7ec:	fb0b a404 	mla	r4, fp, r4, sl
 801a7f0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801a7f4:	9b02      	ldr	r3, [sp, #8]
 801a7f6:	fb11 fa08 	smulbb	sl, r1, r8
 801a7fa:	fa1f fc8c 	uxth.w	ip, ip
 801a7fe:	fb13 f808 	smulbb	r8, r3, r8
 801a802:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801a806:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a80a:	fb04 a40e 	mla	r4, r4, lr, sl
 801a80e:	f10c 0301 	add.w	r3, ip, #1
 801a812:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801a816:	fa1f fe8e 	uxth.w	lr, lr
 801a81a:	b2a4      	uxth	r4, r4
 801a81c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a820:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 801a824:	f104 0a01 	add.w	sl, r4, #1
 801a828:	f10e 0c01 	add.w	ip, lr, #1
 801a82c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a830:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a834:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a838:	0964      	lsrs	r4, r4, #5
 801a83a:	ea4c 0c03 	orr.w	ip, ip, r3
 801a83e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801a842:	9b03      	ldr	r3, [sp, #12]
 801a844:	ea4c 0c04 	orr.w	ip, ip, r4
 801a848:	f8a3 c000 	strh.w	ip, [r3]
 801a84c:	b007      	add	sp, #28
 801a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a852:	af05      	add	r7, sp, #20
 801a854:	e756      	b.n	801a704 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801a856:	ad05      	add	r5, sp, #20
 801a858:	462f      	mov	r7, r5
 801a85a:	e761      	b.n	801a720 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801a85c:	ad05      	add	r5, sp, #20
 801a85e:	e75f      	b.n	801a720 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801a860:	ae05      	add	r6, sp, #20
 801a862:	e772      	b.n	801a74a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801a864:	ab05      	add	r3, sp, #20
 801a866:	461e      	mov	r6, r3
 801a868:	e77e      	b.n	801a768 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801a86a:	ab05      	add	r3, sp, #20
 801a86c:	e77c      	b.n	801a768 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801a86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a872:	b095      	sub	sp, #84	@ 0x54
 801a874:	9212      	str	r2, [sp, #72]	@ 0x48
 801a876:	9309      	str	r3, [sp, #36]	@ 0x24
 801a878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a87a:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801a87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a880:	910e      	str	r1, [sp, #56]	@ 0x38
 801a882:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 801a886:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a888:	6850      	ldr	r0, [r2, #4]
 801a88a:	6812      	ldr	r2, [r2, #0]
 801a88c:	fb00 1303 	mla	r3, r0, r3, r1
 801a890:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a894:	930a      	str	r3, [sp, #40]	@ 0x28
 801a896:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	930d      	str	r3, [sp, #52]	@ 0x34
 801a89c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a89e:	685c      	ldr	r4, [r3, #4]
 801a8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8a2:	43db      	mvns	r3, r3
 801a8a4:	b2db      	uxtb	r3, r3
 801a8a6:	3404      	adds	r4, #4
 801a8a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a8aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	dc03      	bgt.n	801a8b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a8b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	f340 8255 	ble.w	801ad62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801a8b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a8ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a8be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a8c2:	1e48      	subs	r0, r1, #1
 801a8c4:	1e55      	subs	r5, r2, #1
 801a8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	f340 80f9 	ble.w	801aac0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a8ce:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801a8d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a8d2:	1436      	asrs	r6, r6, #16
 801a8d4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a8d8:	d406      	bmi.n	801a8e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a8da:	4286      	cmp	r6, r0
 801a8dc:	da04      	bge.n	801a8e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	db02      	blt.n	801a8e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a8e2:	42ab      	cmp	r3, r5
 801a8e4:	f2c0 80ed 	blt.w	801aac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a8e8:	3601      	adds	r6, #1
 801a8ea:	f100 80da 	bmi.w	801aaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a8ee:	42b1      	cmp	r1, r6
 801a8f0:	f2c0 80d7 	blt.w	801aaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a8f4:	3301      	adds	r3, #1
 801a8f6:	f100 80d4 	bmi.w	801aaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a8fa:	429a      	cmp	r2, r3
 801a8fc:	f2c0 80d1 	blt.w	801aaa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801a900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a902:	9311      	str	r3, [sp, #68]	@ 0x44
 801a904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a906:	930c      	str	r3, [sp, #48]	@ 0x30
 801a908:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	f340 80fa 	ble.w	801ab04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a910:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801a912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a914:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a916:	68c6      	ldr	r6, [r0, #12]
 801a918:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a91a:	141d      	asrs	r5, r3, #16
 801a91c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a920:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a922:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801a924:	1400      	asrs	r0, r0, #16
 801a926:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a92a:	6892      	ldr	r2, [r2, #8]
 801a92c:	f100 813e 	bmi.w	801abac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a930:	1e57      	subs	r7, r2, #1
 801a932:	42b8      	cmp	r0, r7
 801a934:	f280 813a 	bge.w	801abac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a938:	2d00      	cmp	r5, #0
 801a93a:	f2c0 8137 	blt.w	801abac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a93e:	1e77      	subs	r7, r6, #1
 801a940:	42bd      	cmp	r5, r7
 801a942:	f280 8133 	bge.w	801abac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a946:	b212      	sxth	r2, r2
 801a948:	fb05 0002 	mla	r0, r5, r2, r0
 801a94c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a94e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801a952:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801a956:	182e      	adds	r6, r5, r0
 801a958:	eb04 050a 	add.w	r5, r4, sl
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	f000 8117 	beq.w	801ab90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a962:	f896 c001 	ldrb.w	ip, [r6, #1]
 801a966:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a96a:	44a4      	add	ip, r4
 801a96c:	2900      	cmp	r1, #0
 801a96e:	f000 8117 	beq.w	801aba0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a972:	18b0      	adds	r0, r6, r2
 801a974:	5cb2      	ldrb	r2, [r6, r2]
 801a976:	7840      	ldrb	r0, [r0, #1]
 801a978:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a97c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a980:	4422      	add	r2, r4
 801a982:	4420      	add	r0, r4
 801a984:	b29b      	uxth	r3, r3
 801a986:	b289      	uxth	r1, r1
 801a988:	fb03 f901 	mul.w	r9, r3, r1
 801a98c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a990:	011b      	lsls	r3, r3, #4
 801a992:	b289      	uxth	r1, r1
 801a994:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801a998:	f895 b002 	ldrb.w	fp, [r5, #2]
 801a99c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a99e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801a9a2:	f8b6 e000 	ldrh.w	lr, [r6]
 801a9a6:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801a9aa:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a9ae:	eba3 0309 	sub.w	r3, r3, r9
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	eba8 0801 	sub.w	r8, r8, r1
 801a9b8:	fa1f f888 	uxth.w	r8, r8
 801a9bc:	435f      	muls	r7, r3
 801a9be:	fb08 770b 	mla	r7, r8, fp, r7
 801a9c2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801a9c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9c8:	fb01 770b 	mla	r7, r1, fp, r7
 801a9cc:	f890 b002 	ldrb.w	fp, [r0, #2]
 801a9d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9d2:	fb09 770b 	mla	r7, r9, fp, r7
 801a9d6:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801a9da:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801a9de:	fb1b fb03 	smulbb	fp, fp, r3
 801a9e2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801a9e6:	fb07 b706 	mla	r7, r7, r6, fp
 801a9ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a9ec:	f895 b001 	ldrb.w	fp, [r5, #1]
 801a9f0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801a9f4:	f89c c000 	ldrb.w	ip, [ip]
 801a9f8:	435d      	muls	r5, r3
 801a9fa:	fb08 550b 	mla	r5, r8, fp, r5
 801a9fe:	f892 b001 	ldrb.w	fp, [r2, #1]
 801aa02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa04:	fb01 550b 	mla	r5, r1, fp, r5
 801aa08:	f890 b001 	ldrb.w	fp, [r0, #1]
 801aa0c:	fb09 550b 	mla	r5, r9, fp, r5
 801aa10:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801aa14:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801aa18:	fb1b fb03 	smulbb	fp, fp, r3
 801aa1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa1e:	fb03 f30c 	mul.w	r3, r3, ip
 801aa22:	f892 c000 	ldrb.w	ip, [r2]
 801aa26:	fb08 330a 	mla	r3, r8, sl, r3
 801aa2a:	fb01 330c 	mla	r3, r1, ip, r3
 801aa2e:	f890 c000 	ldrb.w	ip, [r0]
 801aa32:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aa36:	fb09 3c0c 	mla	ip, r9, ip, r3
 801aa3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa3c:	fa5f fe8e 	uxtb.w	lr, lr
 801aa40:	b2bf      	uxth	r7, r7
 801aa42:	fb1e fe03 	smulbb	lr, lr, r3
 801aa46:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801aa4a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801aa4e:	fb05 b506 	mla	r5, r5, r6, fp
 801aa52:	1c7b      	adds	r3, r7, #1
 801aa54:	fb0c e606 	mla	r6, ip, r6, lr
 801aa58:	b2ad      	uxth	r5, r5
 801aa5a:	b2b6      	uxth	r6, r6
 801aa5c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801aa60:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 801aa64:	f105 0b01 	add.w	fp, r5, #1
 801aa68:	1c77      	adds	r7, r6, #1
 801aa6a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801aa6e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801aa72:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801aa76:	096d      	lsrs	r5, r5, #5
 801aa78:	431f      	orrs	r7, r3
 801aa7a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801aa7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa80:	433d      	orrs	r5, r7
 801aa82:	801d      	strh	r5, [r3, #0]
 801aa84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa86:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801aa88:	3302      	adds	r3, #2
 801aa8a:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa8c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801aa8e:	4413      	add	r3, r2
 801aa90:	931f      	str	r3, [sp, #124]	@ 0x7c
 801aa92:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801aa94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aa96:	4413      	add	r3, r2
 801aa98:	9320      	str	r3, [sp, #128]	@ 0x80
 801aa9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aa9c:	3b01      	subs	r3, #1
 801aa9e:	9311      	str	r3, [sp, #68]	@ 0x44
 801aaa0:	e732      	b.n	801a908 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801aaa2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801aaa4:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801aaa6:	4433      	add	r3, r6
 801aaa8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801aaaa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801aaac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aaae:	4433      	add	r3, r6
 801aab0:	9320      	str	r3, [sp, #128]	@ 0x80
 801aab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aab4:	3b01      	subs	r3, #1
 801aab6:	9309      	str	r3, [sp, #36]	@ 0x24
 801aab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aaba:	3302      	adds	r3, #2
 801aabc:	930a      	str	r3, [sp, #40]	@ 0x28
 801aabe:	e702      	b.n	801a8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801aac0:	d027      	beq.n	801ab12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801aac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aac4:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801aac6:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801aac8:	3b01      	subs	r3, #1
 801aaca:	fb00 5003 	mla	r0, r0, r3, r5
 801aace:	1400      	asrs	r0, r0, #16
 801aad0:	f53f af16 	bmi.w	801a900 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aad4:	3901      	subs	r1, #1
 801aad6:	4288      	cmp	r0, r1
 801aad8:	f6bf af12 	bge.w	801a900 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aadc:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801aade:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801aae0:	fb01 0303 	mla	r3, r1, r3, r0
 801aae4:	141b      	asrs	r3, r3, #16
 801aae6:	f53f af0b 	bmi.w	801a900 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aaea:	3a01      	subs	r2, #1
 801aaec:	4293      	cmp	r3, r2
 801aaee:	f6bf af07 	bge.w	801a900 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aaf4:	9311      	str	r3, [sp, #68]	@ 0x44
 801aaf6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 801aafa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aafc:	930c      	str	r3, [sp, #48]	@ 0x30
 801aafe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	dc70      	bgt.n	801abe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801ab04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab0c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ab10:	930a      	str	r3, [sp, #40]	@ 0x28
 801ab12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	f340 8124 	ble.w	801ad62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801ab1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ab22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ab26:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ab28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab34:	eef0 6a62 	vmov.f32	s13, s5
 801ab38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab44:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801ab48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab4c:	eef0 6a43 	vmov.f32	s13, s6
 801ab50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab54:	ee12 2a90 	vmov	r2, s5
 801ab58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab5c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab60:	ee13 2a10 	vmov	r2, s6
 801ab64:	9321      	str	r3, [sp, #132]	@ 0x84
 801ab66:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ab68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab6c:	9322      	str	r3, [sp, #136]	@ 0x88
 801ab6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ab72:	3b01      	subs	r3, #1
 801ab74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab78:	930e      	str	r3, [sp, #56]	@ 0x38
 801ab7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ab7c:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 801ab80:	bf08      	it	eq
 801ab82:	4613      	moveq	r3, r2
 801ab84:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab86:	eeb0 3a67 	vmov.f32	s6, s15
 801ab8a:	eef0 2a47 	vmov.f32	s5, s14
 801ab8e:	e68c      	b.n	801a8aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ab90:	b149      	cbz	r1, 801aba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801ab92:	5cb2      	ldrb	r2, [r6, r2]
 801ab94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ab98:	4422      	add	r2, r4
 801ab9a:	4628      	mov	r0, r5
 801ab9c:	46ac      	mov	ip, r5
 801ab9e:	e6f1      	b.n	801a984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801aba0:	4628      	mov	r0, r5
 801aba2:	462a      	mov	r2, r5
 801aba4:	e6ee      	b.n	801a984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801aba6:	4628      	mov	r0, r5
 801aba8:	462a      	mov	r2, r5
 801abaa:	e7f7      	b.n	801ab9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801abac:	1c47      	adds	r7, r0, #1
 801abae:	f53f af69 	bmi.w	801aa84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801abb2:	42ba      	cmp	r2, r7
 801abb4:	f6ff af66 	blt.w	801aa84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801abb8:	1c6f      	adds	r7, r5, #1
 801abba:	f53f af63 	bmi.w	801aa84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801abbe:	42be      	cmp	r6, r7
 801abc0:	f6ff af60 	blt.w	801aa84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801abc4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801abc6:	9002      	str	r0, [sp, #8]
 801abc8:	b236      	sxth	r6, r6
 801abca:	b212      	sxth	r2, r2
 801abcc:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801abd0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801abd4:	9200      	str	r2, [sp, #0]
 801abd6:	9601      	str	r6, [sp, #4]
 801abd8:	4623      	mov	r3, r4
 801abda:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 801abde:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801abe0:	f7ff fd59 	bl	801a696 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801abe4:	e74e      	b.n	801aa84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801abe6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801abe8:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801abea:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801abec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801abee:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801abf2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801abf4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801abf8:	142d      	asrs	r5, r5, #16
 801abfa:	1400      	asrs	r0, r0, #16
 801abfc:	fb02 5000 	mla	r0, r2, r0, r5
 801ac00:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ac02:	f815 9000 	ldrb.w	r9, [r5, r0]
 801ac06:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ac0a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ac0e:	182e      	adds	r6, r5, r0
 801ac10:	eb04 0509 	add.w	r5, r4, r9
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	f000 8096 	beq.w	801ad46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ac1a:	7877      	ldrb	r7, [r6, #1]
 801ac1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ac20:	4427      	add	r7, r4
 801ac22:	2900      	cmp	r1, #0
 801ac24:	f000 8097 	beq.w	801ad56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801ac28:	18b0      	adds	r0, r6, r2
 801ac2a:	5cb2      	ldrb	r2, [r6, r2]
 801ac2c:	7840      	ldrb	r0, [r0, #1]
 801ac2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ac32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ac36:	4422      	add	r2, r4
 801ac38:	4420      	add	r0, r4
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	b289      	uxth	r1, r1
 801ac3e:	fb03 f801 	mul.w	r8, r3, r1
 801ac42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ac44:	f895 b002 	ldrb.w	fp, [r5, #2]
 801ac48:	f8b6 c000 	ldrh.w	ip, [r6]
 801ac4c:	78be      	ldrb	r6, [r7, #2]
 801ac4e:	f814 9009 	ldrb.w	r9, [r4, r9]
 801ac52:	011b      	lsls	r3, r3, #4
 801ac54:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ac58:	b289      	uxth	r1, r1
 801ac5a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ac5e:	eba3 0308 	sub.w	r3, r3, r8
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	ebae 0e01 	sub.w	lr, lr, r1
 801ac68:	fa1f fe8e 	uxth.w	lr, lr
 801ac6c:	435e      	muls	r6, r3
 801ac6e:	fb0e 660b 	mla	r6, lr, fp, r6
 801ac72:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ac76:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac78:	fb01 660b 	mla	r6, r1, fp, r6
 801ac7c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ac80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac82:	fb08 660b 	mla	r6, r8, fp, r6
 801ac86:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801ac8a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801ac8e:	fb1b fb03 	smulbb	fp, fp, r3
 801ac92:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ac96:	fb06 b60a 	mla	r6, r6, sl, fp
 801ac9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ac9c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801aca0:	787d      	ldrb	r5, [r7, #1]
 801aca2:	783f      	ldrb	r7, [r7, #0]
 801aca4:	435d      	muls	r5, r3
 801aca6:	fb0e 550b 	mla	r5, lr, fp, r5
 801acaa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801acae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801acb0:	fb01 550b 	mla	r5, r1, fp, r5
 801acb4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801acb8:	fb08 550b 	mla	r5, r8, fp, r5
 801acbc:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801acc0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801acc4:	fb1b fb03 	smulbb	fp, fp, r3
 801acc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801acca:	437b      	muls	r3, r7
 801accc:	7817      	ldrb	r7, [r2, #0]
 801acce:	fb0e 3309 	mla	r3, lr, r9, r3
 801acd2:	fb01 3307 	mla	r3, r1, r7, r3
 801acd6:	7807      	ldrb	r7, [r0, #0]
 801acd8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801acdc:	fb08 3707 	mla	r7, r8, r7, r3
 801ace0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ace2:	fa5f fc8c 	uxtb.w	ip, ip
 801ace6:	fb1c fc03 	smulbb	ip, ip, r3
 801acea:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801acee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801acf2:	fb05 b50a 	mla	r5, r5, sl, fp
 801acf6:	fb07 c70a 	mla	r7, r7, sl, ip
 801acfa:	b2b6      	uxth	r6, r6
 801acfc:	b2ad      	uxth	r5, r5
 801acfe:	b2bf      	uxth	r7, r7
 801ad00:	1c73      	adds	r3, r6, #1
 801ad02:	1c7a      	adds	r2, r7, #1
 801ad04:	f105 0b01 	add.w	fp, r5, #1
 801ad08:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ad0c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ad10:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ad14:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ad18:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801ad1c:	096d      	lsrs	r5, r5, #5
 801ad1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad20:	4316      	orrs	r6, r2
 801ad22:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ad26:	432e      	orrs	r6, r5
 801ad28:	f823 6b02 	strh.w	r6, [r3], #2
 801ad2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ad2e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ad30:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ad32:	4413      	add	r3, r2
 801ad34:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ad36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ad38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ad3a:	4413      	add	r3, r2
 801ad3c:	9320      	str	r3, [sp, #128]	@ 0x80
 801ad3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ad40:	3b01      	subs	r3, #1
 801ad42:	9311      	str	r3, [sp, #68]	@ 0x44
 801ad44:	e6db      	b.n	801aafe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801ad46:	b149      	cbz	r1, 801ad5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801ad48:	5cb2      	ldrb	r2, [r6, r2]
 801ad4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ad4e:	4422      	add	r2, r4
 801ad50:	4628      	mov	r0, r5
 801ad52:	462f      	mov	r7, r5
 801ad54:	e771      	b.n	801ac3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ad56:	4628      	mov	r0, r5
 801ad58:	462a      	mov	r2, r5
 801ad5a:	e76e      	b.n	801ac3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ad5c:	4628      	mov	r0, r5
 801ad5e:	462a      	mov	r2, r5
 801ad60:	e7f7      	b.n	801ad52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ad62:	b015      	add	sp, #84	@ 0x54
 801ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ad68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad6c:	880f      	ldrh	r7, [r1, #0]
 801ad6e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801ad72:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ad76:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801ad7a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801ad7e:	023c      	lsls	r4, r7, #8
 801ad80:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 801ad84:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 801ad88:	017c      	lsls	r4, r7, #5
 801ad8a:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 801ad8e:	00ff      	lsls	r7, r7, #3
 801ad90:	ea4b 0404 	orr.w	r4, fp, r4
 801ad94:	b2ff      	uxtb	r7, r7
 801ad96:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ad9a:	4327      	orrs	r7, r4
 801ad9c:	2d00      	cmp	r5, #0
 801ad9e:	eb02 080a 	add.w	r8, r2, sl
 801ada2:	9701      	str	r7, [sp, #4]
 801ada4:	db7e      	blt.n	801aea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ada6:	45a9      	cmp	r9, r5
 801ada8:	dd7c      	ble.n	801aea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801adaa:	f1bc 0f00 	cmp.w	ip, #0
 801adae:	db77      	blt.n	801aea0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801adb0:	45e6      	cmp	lr, ip
 801adb2:	dd75      	ble.n	801aea0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801adb4:	f812 700a 	ldrb.w	r7, [r2, sl]
 801adb8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801adbc:	441f      	add	r7, r3
 801adbe:	f11c 0201 	adds.w	r2, ip, #1
 801adc2:	d472      	bmi.n	801aeaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801adc4:	4596      	cmp	lr, r2
 801adc6:	dd70      	ble.n	801aeaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801adc8:	2800      	cmp	r0, #0
 801adca:	d06e      	beq.n	801aeaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801adcc:	f898 4001 	ldrb.w	r4, [r8, #1]
 801add0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801add4:	441c      	add	r4, r3
 801add6:	3501      	adds	r5, #1
 801add8:	d46b      	bmi.n	801aeb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801adda:	45a9      	cmp	r9, r5
 801addc:	dd69      	ble.n	801aeb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801adde:	2e00      	cmp	r6, #0
 801ade0:	d067      	beq.n	801aeb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ade2:	f1bc 0f00 	cmp.w	ip, #0
 801ade6:	db62      	blt.n	801aeae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ade8:	45e6      	cmp	lr, ip
 801adea:	dd60      	ble.n	801aeae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801adec:	f818 500e 	ldrb.w	r5, [r8, lr]
 801adf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801adf4:	441d      	add	r5, r3
 801adf6:	f11c 0201 	adds.w	r2, ip, #1
 801adfa:	d45d      	bmi.n	801aeb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801adfc:	4596      	cmp	lr, r2
 801adfe:	dd5b      	ble.n	801aeb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	d059      	beq.n	801aeb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ae04:	44c6      	add	lr, r8
 801ae06:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ae0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ae0e:	4413      	add	r3, r2
 801ae10:	b280      	uxth	r0, r0
 801ae12:	b2b2      	uxth	r2, r6
 801ae14:	fb00 f602 	mul.w	r6, r0, r2
 801ae18:	0100      	lsls	r0, r0, #4
 801ae1a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ae1e:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 801ae22:	1b80      	subs	r0, r0, r6
 801ae24:	fa1f fc82 	uxth.w	ip, r2
 801ae28:	b282      	uxth	r2, r0
 801ae2a:	78a0      	ldrb	r0, [r4, #2]
 801ae2c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ae30:	f897 9000 	ldrb.w	r9, [r7]
 801ae34:	787f      	ldrb	r7, [r7, #1]
 801ae36:	eba8 080c 	sub.w	r8, r8, ip
 801ae3a:	fa1f f888 	uxth.w	r8, r8
 801ae3e:	4350      	muls	r0, r2
 801ae40:	fb08 0e0e 	mla	lr, r8, lr, r0
 801ae44:	78a8      	ldrb	r0, [r5, #2]
 801ae46:	fb0c e000 	mla	r0, ip, r0, lr
 801ae4a:	f893 e002 	ldrb.w	lr, [r3, #2]
 801ae4e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801ae52:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 801ae56:	f894 e000 	ldrb.w	lr, [r4]
 801ae5a:	fb02 fe0e 	mul.w	lr, r2, lr
 801ae5e:	fb08 e909 	mla	r9, r8, r9, lr
 801ae62:	f895 e000 	ldrb.w	lr, [r5]
 801ae66:	fb0c 990e 	mla	r9, ip, lr, r9
 801ae6a:	f893 e000 	ldrb.w	lr, [r3]
 801ae6e:	785b      	ldrb	r3, [r3, #1]
 801ae70:	fb06 9e0e 	mla	lr, r6, lr, r9
 801ae74:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ae78:	ea4e 0e00 	orr.w	lr, lr, r0
 801ae7c:	7860      	ldrb	r0, [r4, #1]
 801ae7e:	4350      	muls	r0, r2
 801ae80:	786a      	ldrb	r2, [r5, #1]
 801ae82:	fb08 0007 	mla	r0, r8, r7, r0
 801ae86:	fb0c 0202 	mla	r2, ip, r2, r0
 801ae8a:	fb06 2303 	mla	r3, r6, r3, r2
 801ae8e:	095b      	lsrs	r3, r3, #5
 801ae90:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ae94:	ea4e 0303 	orr.w	r3, lr, r3
 801ae98:	800b      	strh	r3, [r1, #0]
 801ae9a:	b003      	add	sp, #12
 801ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea0:	af01      	add	r7, sp, #4
 801aea2:	e78c      	b.n	801adbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801aea4:	ac01      	add	r4, sp, #4
 801aea6:	4627      	mov	r7, r4
 801aea8:	e795      	b.n	801add6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801aeaa:	ac01      	add	r4, sp, #4
 801aeac:	e793      	b.n	801add6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801aeae:	ad01      	add	r5, sp, #4
 801aeb0:	e7a1      	b.n	801adf6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801aeb2:	ab01      	add	r3, sp, #4
 801aeb4:	461d      	mov	r5, r3
 801aeb6:	e7ab      	b.n	801ae10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801aeb8:	ab01      	add	r3, sp, #4
 801aeba:	e7a9      	b.n	801ae10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801aebc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec0:	b08f      	sub	sp, #60	@ 0x3c
 801aec2:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 801aec6:	920c      	str	r2, [sp, #48]	@ 0x30
 801aec8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801aeca:	910a      	str	r1, [sp, #40]	@ 0x28
 801aecc:	9306      	str	r3, [sp, #24]
 801aece:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 801aed2:	900d      	str	r0, [sp, #52]	@ 0x34
 801aed4:	6850      	ldr	r0, [r2, #4]
 801aed6:	6812      	ldr	r2, [r2, #0]
 801aed8:	fb00 1303 	mla	r3, r0, r3, r1
 801aedc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801aee0:	9307      	str	r3, [sp, #28]
 801aee2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	9308      	str	r3, [sp, #32]
 801aee8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aeea:	685c      	ldr	r4, [r3, #4]
 801aeec:	3404      	adds	r4, #4
 801aeee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	dc03      	bgt.n	801aefc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801aef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	f340 81d6 	ble.w	801b2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801aefc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aefe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801af02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801af06:	1e48      	subs	r0, r1, #1
 801af08:	1e56      	subs	r6, r2, #1
 801af0a:	9b06      	ldr	r3, [sp, #24]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	f340 80b7 	ble.w	801b080 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801af12:	ea5f 472b 	movs.w	r7, fp, asr #16
 801af16:	ea4f 4325 	mov.w	r3, r5, asr #16
 801af1a:	d406      	bmi.n	801af2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801af1c:	4287      	cmp	r7, r0
 801af1e:	da04      	bge.n	801af2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801af20:	2b00      	cmp	r3, #0
 801af22:	db02      	blt.n	801af2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801af24:	42b3      	cmp	r3, r6
 801af26:	f2c0 80ac 	blt.w	801b082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801af2a:	3701      	adds	r7, #1
 801af2c:	f100 809d 	bmi.w	801b06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801af30:	42b9      	cmp	r1, r7
 801af32:	f2c0 809a 	blt.w	801b06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801af36:	3301      	adds	r3, #1
 801af38:	f100 8097 	bmi.w	801b06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801af3c:	429a      	cmp	r2, r3
 801af3e:	f2c0 8094 	blt.w	801b06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801af42:	9b06      	ldr	r3, [sp, #24]
 801af44:	930b      	str	r3, [sp, #44]	@ 0x2c
 801af46:	9b07      	ldr	r3, [sp, #28]
 801af48:	9309      	str	r3, [sp, #36]	@ 0x24
 801af4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	f340 80b5 	ble.w	801b0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801af52:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801af54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801af56:	68c7      	ldr	r7, [r0, #12]
 801af58:	6892      	ldr	r2, [r2, #8]
 801af5a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801af5e:	ea4f 4625 	mov.w	r6, r5, asr #16
 801af62:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801af66:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801af6a:	f100 80fb 	bmi.w	801b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801af6e:	f102 3cff 	add.w	ip, r2, #4294967295
 801af72:	4560      	cmp	r0, ip
 801af74:	f280 80f6 	bge.w	801b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801af78:	2e00      	cmp	r6, #0
 801af7a:	f2c0 80f3 	blt.w	801b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801af7e:	f107 3cff 	add.w	ip, r7, #4294967295
 801af82:	4566      	cmp	r6, ip
 801af84:	f280 80ee 	bge.w	801b164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801af88:	b212      	sxth	r2, r2
 801af8a:	fb06 0002 	mla	r0, r6, r2, r0
 801af8e:	9e08      	ldr	r6, [sp, #32]
 801af90:	1837      	adds	r7, r6, r0
 801af92:	5c30      	ldrb	r0, [r6, r0]
 801af94:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801af98:	eb04 0c08 	add.w	ip, r4, r8
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	f000 80d3 	beq.w	801b148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801afa2:	787e      	ldrb	r6, [r7, #1]
 801afa4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801afa8:	4426      	add	r6, r4
 801afaa:	2900      	cmp	r1, #0
 801afac:	f000 80d4 	beq.w	801b158 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801afb0:	18b8      	adds	r0, r7, r2
 801afb2:	5cba      	ldrb	r2, [r7, r2]
 801afb4:	7840      	ldrb	r0, [r0, #1]
 801afb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801afba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801afbe:	4422      	add	r2, r4
 801afc0:	4420      	add	r0, r4
 801afc2:	b29b      	uxth	r3, r3
 801afc4:	b289      	uxth	r1, r1
 801afc6:	fb03 f901 	mul.w	r9, r3, r1
 801afca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801afce:	011b      	lsls	r3, r3, #4
 801afd0:	b289      	uxth	r1, r1
 801afd2:	78b7      	ldrb	r7, [r6, #2]
 801afd4:	f89c a002 	ldrb.w	sl, [ip, #2]
 801afd8:	f89c c001 	ldrb.w	ip, [ip, #1]
 801afdc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801afe0:	eba3 0309 	sub.w	r3, r3, r9
 801afe4:	b29b      	uxth	r3, r3
 801afe6:	ebae 0e01 	sub.w	lr, lr, r1
 801afea:	fa1f fe8e 	uxth.w	lr, lr
 801afee:	435f      	muls	r7, r3
 801aff0:	fb0e 770a 	mla	r7, lr, sl, r7
 801aff4:	f892 a002 	ldrb.w	sl, [r2, #2]
 801aff8:	fb01 770a 	mla	r7, r1, sl, r7
 801affc:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b000:	fb09 7a0a 	mla	sl, r9, sl, r7
 801b004:	f814 7008 	ldrb.w	r7, [r4, r8]
 801b008:	f896 8000 	ldrb.w	r8, [r6]
 801b00c:	7876      	ldrb	r6, [r6, #1]
 801b00e:	fb03 f808 	mul.w	r8, r3, r8
 801b012:	fb0e 8807 	mla	r8, lr, r7, r8
 801b016:	7817      	ldrb	r7, [r2, #0]
 801b018:	fb01 8807 	mla	r8, r1, r7, r8
 801b01c:	7807      	ldrb	r7, [r0, #0]
 801b01e:	fb09 8707 	mla	r7, r9, r7, r8
 801b022:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801b026:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b02a:	ea47 070a 	orr.w	r7, r7, sl
 801b02e:	4373      	muls	r3, r6
 801b030:	f892 a001 	ldrb.w	sl, [r2, #1]
 801b034:	fb0e 330c 	mla	r3, lr, ip, r3
 801b038:	fb01 310a 	mla	r1, r1, sl, r3
 801b03c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b042:	fb09 1a0a 	mla	sl, r9, sl, r1
 801b046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b04a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b04e:	ea47 070a 	orr.w	r7, r7, sl
 801b052:	801f      	strh	r7, [r3, #0]
 801b054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b056:	3302      	adds	r3, #2
 801b058:	9309      	str	r3, [sp, #36]	@ 0x24
 801b05a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b05c:	449b      	add	fp, r3
 801b05e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b060:	441d      	add	r5, r3
 801b062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b064:	3b01      	subs	r3, #1
 801b066:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b068:	e76f      	b.n	801af4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b06a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b06c:	449b      	add	fp, r3
 801b06e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b070:	441d      	add	r5, r3
 801b072:	9b06      	ldr	r3, [sp, #24]
 801b074:	3b01      	subs	r3, #1
 801b076:	9306      	str	r3, [sp, #24]
 801b078:	9b07      	ldr	r3, [sp, #28]
 801b07a:	3302      	adds	r3, #2
 801b07c:	9307      	str	r3, [sp, #28]
 801b07e:	e744      	b.n	801af0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b080:	d023      	beq.n	801b0ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b082:	9b06      	ldr	r3, [sp, #24]
 801b084:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801b086:	3b01      	subs	r3, #1
 801b088:	fb00 b003 	mla	r0, r0, r3, fp
 801b08c:	1400      	asrs	r0, r0, #16
 801b08e:	f53f af58 	bmi.w	801af42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b092:	3901      	subs	r1, #1
 801b094:	4288      	cmp	r0, r1
 801b096:	f6bf af54 	bge.w	801af42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b09a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801b09c:	fb01 5303 	mla	r3, r1, r3, r5
 801b0a0:	141b      	asrs	r3, r3, #16
 801b0a2:	f53f af4e 	bmi.w	801af42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b0a6:	3a01      	subs	r2, #1
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	f6bf af4a 	bge.w	801af42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b0ae:	9b06      	ldr	r3, [sp, #24]
 801b0b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0b2:	9b07      	ldr	r3, [sp, #28]
 801b0b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	dc70      	bgt.n	801b19e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801b0bc:	9b06      	ldr	r3, [sp, #24]
 801b0be:	9a07      	ldr	r2, [sp, #28]
 801b0c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b0c8:	9307      	str	r3, [sp, #28]
 801b0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	f340 80eb 	ble.w	801b2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801b0d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b0da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b0e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0ec:	eef0 6a62 	vmov.f32	s13, s5
 801b0f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0fc:	ee16 ba90 	vmov	fp, s13
 801b100:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b104:	eef0 6a43 	vmov.f32	s13, s6
 801b108:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b10c:	ee12 2a90 	vmov	r2, s5
 801b110:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b114:	fb92 f3f3 	sdiv	r3, r2, r3
 801b118:	ee13 2a10 	vmov	r2, s6
 801b11c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b11e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b120:	fb92 f3f3 	sdiv	r3, r2, r3
 801b124:	931c      	str	r3, [sp, #112]	@ 0x70
 801b126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b12a:	3b01      	subs	r3, #1
 801b12c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b130:	930a      	str	r3, [sp, #40]	@ 0x28
 801b132:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b134:	bf08      	it	eq
 801b136:	4613      	moveq	r3, r2
 801b138:	ee16 5a90 	vmov	r5, s13
 801b13c:	9306      	str	r3, [sp, #24]
 801b13e:	eeb0 3a67 	vmov.f32	s6, s15
 801b142:	eef0 2a47 	vmov.f32	s5, s14
 801b146:	e6d2      	b.n	801aeee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b148:	b149      	cbz	r1, 801b15e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b14a:	5cba      	ldrb	r2, [r7, r2]
 801b14c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b150:	4422      	add	r2, r4
 801b152:	4660      	mov	r0, ip
 801b154:	4666      	mov	r6, ip
 801b156:	e734      	b.n	801afc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b158:	4660      	mov	r0, ip
 801b15a:	4662      	mov	r2, ip
 801b15c:	e731      	b.n	801afc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b15e:	4660      	mov	r0, ip
 801b160:	4662      	mov	r2, ip
 801b162:	e7f7      	b.n	801b154 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801b164:	f110 0c01 	adds.w	ip, r0, #1
 801b168:	f53f af74 	bmi.w	801b054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b16c:	4562      	cmp	r2, ip
 801b16e:	f6ff af71 	blt.w	801b054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b172:	f116 0c01 	adds.w	ip, r6, #1
 801b176:	f53f af6d 	bmi.w	801b054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b17a:	4567      	cmp	r7, ip
 801b17c:	f6ff af6a 	blt.w	801b054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b180:	b23f      	sxth	r7, r7
 801b182:	b212      	sxth	r2, r2
 801b184:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801b188:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801b18c:	9200      	str	r2, [sp, #0]
 801b18e:	9701      	str	r7, [sp, #4]
 801b190:	4623      	mov	r3, r4
 801b192:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b196:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b198:	f7ff fde6 	bl	801ad68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801b19c:	e75a      	b.n	801b054 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b19e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b1a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b1a4:	ea4f 462b 	mov.w	r6, fp, asr #16
 801b1a8:	1428      	asrs	r0, r5, #16
 801b1aa:	fb02 6000 	mla	r0, r2, r0, r6
 801b1ae:	9e08      	ldr	r6, [sp, #32]
 801b1b0:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b1b4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b1b8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b1bc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b1c0:	1837      	adds	r7, r6, r0
 801b1c2:	eb04 0c08 	add.w	ip, r4, r8
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d060      	beq.n	801b28c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801b1ca:	787e      	ldrb	r6, [r7, #1]
 801b1cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b1d0:	4426      	add	r6, r4
 801b1d2:	2900      	cmp	r1, #0
 801b1d4:	d062      	beq.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801b1d6:	18b8      	adds	r0, r7, r2
 801b1d8:	5cba      	ldrb	r2, [r7, r2]
 801b1da:	7840      	ldrb	r0, [r0, #1]
 801b1dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b1e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b1e4:	4422      	add	r2, r4
 801b1e6:	4420      	add	r0, r4
 801b1e8:	b29b      	uxth	r3, r3
 801b1ea:	b289      	uxth	r1, r1
 801b1ec:	fb03 f901 	mul.w	r9, r3, r1
 801b1f0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b1f4:	011b      	lsls	r3, r3, #4
 801b1f6:	b289      	uxth	r1, r1
 801b1f8:	78b7      	ldrb	r7, [r6, #2]
 801b1fa:	f89c a002 	ldrb.w	sl, [ip, #2]
 801b1fe:	f89c c001 	ldrb.w	ip, [ip, #1]
 801b202:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801b206:	eba3 0309 	sub.w	r3, r3, r9
 801b20a:	b29b      	uxth	r3, r3
 801b20c:	ebae 0e01 	sub.w	lr, lr, r1
 801b210:	fa1f fe8e 	uxth.w	lr, lr
 801b214:	435f      	muls	r7, r3
 801b216:	fb0e 770a 	mla	r7, lr, sl, r7
 801b21a:	f892 a002 	ldrb.w	sl, [r2, #2]
 801b21e:	fb01 770a 	mla	r7, r1, sl, r7
 801b222:	f890 a002 	ldrb.w	sl, [r0, #2]
 801b226:	fb09 7a0a 	mla	sl, r9, sl, r7
 801b22a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801b22e:	f896 8000 	ldrb.w	r8, [r6]
 801b232:	7876      	ldrb	r6, [r6, #1]
 801b234:	fb03 f808 	mul.w	r8, r3, r8
 801b238:	fb0e 8807 	mla	r8, lr, r7, r8
 801b23c:	7817      	ldrb	r7, [r2, #0]
 801b23e:	fb01 8807 	mla	r8, r1, r7, r8
 801b242:	7807      	ldrb	r7, [r0, #0]
 801b244:	fb09 8707 	mla	r7, r9, r7, r8
 801b248:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801b24c:	4373      	muls	r3, r6
 801b24e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b252:	7856      	ldrb	r6, [r2, #1]
 801b254:	ea47 070a 	orr.w	r7, r7, sl
 801b258:	fb0e 330c 	mla	r3, lr, ip, r3
 801b25c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b260:	fb01 3306 	mla	r3, r1, r6, r3
 801b264:	fb09 3a0a 	mla	sl, r9, sl, r3
 801b268:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b26c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b26e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b272:	ea47 070a 	orr.w	r7, r7, sl
 801b276:	f823 7b02 	strh.w	r7, [r3], #2
 801b27a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b27c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b27e:	449b      	add	fp, r3
 801b280:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b282:	441d      	add	r5, r3
 801b284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b286:	3b01      	subs	r3, #1
 801b288:	9309      	str	r3, [sp, #36]	@ 0x24
 801b28a:	e714      	b.n	801b0b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b28c:	b149      	cbz	r1, 801b2a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801b28e:	5cba      	ldrb	r2, [r7, r2]
 801b290:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b294:	4422      	add	r2, r4
 801b296:	4660      	mov	r0, ip
 801b298:	4666      	mov	r6, ip
 801b29a:	e7a5      	b.n	801b1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b29c:	4660      	mov	r0, ip
 801b29e:	4662      	mov	r2, ip
 801b2a0:	e7a2      	b.n	801b1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b2a2:	4660      	mov	r0, ip
 801b2a4:	4662      	mov	r2, ip
 801b2a6:	e7f7      	b.n	801b298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801b2a8:	b00f      	add	sp, #60	@ 0x3c
 801b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801b2ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 801b2b8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801b2bc:	9102      	str	r1, [sp, #8]
 801b2be:	2c00      	cmp	r4, #0
 801b2c0:	fb04 710c 	mla	r1, r4, ip, r7
 801b2c4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801b2c8:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 801b2cc:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801b2d0:	eb02 0e01 	add.w	lr, r2, r1
 801b2d4:	f2c0 8122 	blt.w	801b51c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801b2d8:	45a0      	cmp	r8, r4
 801b2da:	f340 811f 	ble.w	801b51c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801b2de:	2f00      	cmp	r7, #0
 801b2e0:	f2c0 811a 	blt.w	801b518 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801b2e4:	45bc      	cmp	ip, r7
 801b2e6:	f340 8117 	ble.w	801b518 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801b2ea:	5c52      	ldrb	r2, [r2, r1]
 801b2ec:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b2f0:	1c7a      	adds	r2, r7, #1
 801b2f2:	f100 8116 	bmi.w	801b522 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801b2f6:	4594      	cmp	ip, r2
 801b2f8:	f340 8113 	ble.w	801b522 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801b2fc:	2e00      	cmp	r6, #0
 801b2fe:	f000 8112 	beq.w	801b526 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801b302:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b306:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b30a:	3401      	adds	r4, #1
 801b30c:	f100 810f 	bmi.w	801b52e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801b310:	45a0      	cmp	r8, r4
 801b312:	f340 810c 	ble.w	801b52e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801b316:	2800      	cmp	r0, #0
 801b318:	f000 810c 	beq.w	801b534 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801b31c:	2f00      	cmp	r7, #0
 801b31e:	f2c0 8104 	blt.w	801b52a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801b322:	45bc      	cmp	ip, r7
 801b324:	f340 8101 	ble.w	801b52a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801b328:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801b32c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801b330:	3701      	adds	r7, #1
 801b332:	f100 8102 	bmi.w	801b53a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801b336:	45bc      	cmp	ip, r7
 801b338:	f340 80ff 	ble.w	801b53a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801b33c:	2e00      	cmp	r6, #0
 801b33e:	f000 80fe 	beq.w	801b53e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801b342:	44f4      	add	ip, lr
 801b344:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b34c:	b2b6      	uxth	r6, r6
 801b34e:	b280      	uxth	r0, r0
 801b350:	fb00 fe06 	mul.w	lr, r0, r6
 801b354:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801b358:	0136      	lsls	r6, r6, #4
 801b35a:	eba6 070e 	sub.w	r7, r6, lr
 801b35e:	b280      	uxth	r0, r0
 801b360:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801b364:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801b368:	b2bf      	uxth	r7, r7
 801b36a:	1a1b      	subs	r3, r3, r0
 801b36c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801b370:	b29b      	uxth	r3, r3
 801b372:	fb0a f607 	mul.w	r6, sl, r7
 801b376:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b37a:	fb0b 6603 	mla	r6, fp, r3, r6
 801b37e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b382:	fb00 6609 	mla	r6, r0, r9, r6
 801b386:	fb0e 6608 	mla	r6, lr, r8, r6
 801b38a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b38e:	9600      	str	r6, [sp, #0]
 801b390:	2e00      	cmp	r6, #0
 801b392:	f000 80be 	beq.w	801b512 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801b396:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801b39a:	fb0b fc0c 	mul.w	ip, fp, ip
 801b39e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b3a2:	fb0b f505 	mul.w	r5, fp, r5
 801b3a6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b3aa:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b3ae:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b3b2:	44dc      	add	ip, fp
 801b3b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3b8:	9501      	str	r5, [sp, #4]
 801b3ba:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801b3be:	9503      	str	r5, [sp, #12]
 801b3c0:	9d01      	ldr	r5, [sp, #4]
 801b3c2:	9e02      	ldr	r6, [sp, #8]
 801b3c4:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801b3c8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b3cc:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801b3d0:	fb0a fc0c 	mul.w	ip, sl, ip
 801b3d4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801b3d8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801b3dc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b3e0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b3e4:	4465      	add	r5, ip
 801b3e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b3ea:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801b3ee:	fb09 fc0c 	mul.w	ip, r9, ip
 801b3f2:	fb09 f904 	mul.w	r9, r9, r4
 801b3f6:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801b3fa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b3fe:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801b402:	fb08 f404 	mul.w	r4, r8, r4
 801b406:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801b40a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b40e:	fb08 f802 	mul.w	r8, r8, r2
 801b412:	fb0a fa01 	mul.w	sl, sl, r1
 801b416:	0a22      	lsrs	r2, r4, #8
 801b418:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801b41c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b420:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801b424:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801b428:	4414      	add	r4, r2
 801b42a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801b42e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b432:	0a2d      	lsrs	r5, r5, #8
 801b434:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b438:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b43c:	9a03      	ldr	r2, [sp, #12]
 801b43e:	8836      	ldrh	r6, [r6, #0]
 801b440:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801b444:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b448:	437d      	muls	r5, r7
 801b44a:	4461      	add	r1, ip
 801b44c:	0a24      	lsrs	r4, r4, #8
 801b44e:	fb02 5503 	mla	r5, r2, r3, r5
 801b452:	0a09      	lsrs	r1, r1, #8
 801b454:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801b458:	fb04 540e 	mla	r4, r4, lr, r5
 801b45c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801b460:	fb01 4100 	mla	r1, r1, r0, r4
 801b464:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b468:	0a09      	lsrs	r1, r1, #8
 801b46a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b46e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801b472:	fb07 f70a 	mul.w	r7, r7, sl
 801b476:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b47a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801b47e:	fb03 7101 	mla	r1, r3, r1, r7
 801b482:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b486:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b48a:	fb0e 1e08 	mla	lr, lr, r8, r1
 801b48e:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801b492:	fb00 e101 	mla	r1, r0, r1, lr
 801b496:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801b49a:	9a00      	ldr	r2, [sp, #0]
 801b49c:	b287      	uxth	r7, r0
 801b49e:	437a      	muls	r2, r7
 801b4a0:	0a09      	lsrs	r1, r1, #8
 801b4a2:	1c53      	adds	r3, r2, #1
 801b4a4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801b4a8:	4321      	orrs	r1, r4
 801b4aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b4ae:	1235      	asrs	r5, r6, #8
 801b4b0:	0c0a      	lsrs	r2, r1, #16
 801b4b2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801b4b6:	b2db      	uxtb	r3, r3
 801b4b8:	fb12 f207 	smulbb	r2, r2, r7
 801b4bc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801b4c0:	fb05 2503 	mla	r5, r5, r3, r2
 801b4c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801b4c8:	10f2      	asrs	r2, r6, #3
 801b4ca:	b2c8      	uxtb	r0, r1
 801b4cc:	00f6      	lsls	r6, r6, #3
 801b4ce:	fb14 f407 	smulbb	r4, r4, r7
 801b4d2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801b4d6:	b2f6      	uxtb	r6, r6
 801b4d8:	fb10 f007 	smulbb	r0, r0, r7
 801b4dc:	fb02 4203 	mla	r2, r2, r3, r4
 801b4e0:	b2ad      	uxth	r5, r5
 801b4e2:	fb06 0303 	mla	r3, r6, r3, r0
 801b4e6:	b299      	uxth	r1, r3
 801b4e8:	b294      	uxth	r4, r2
 801b4ea:	1c6b      	adds	r3, r5, #1
 801b4ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b4f0:	1c62      	adds	r2, r4, #1
 801b4f2:	1c4b      	adds	r3, r1, #1
 801b4f4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b4f8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b4fc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801b500:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b504:	0952      	lsrs	r2, r2, #5
 801b506:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b50a:	432b      	orrs	r3, r5
 801b50c:	4313      	orrs	r3, r2
 801b50e:	9a02      	ldr	r2, [sp, #8]
 801b510:	8013      	strh	r3, [r2, #0]
 801b512:	b005      	add	sp, #20
 801b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b518:	2500      	movs	r5, #0
 801b51a:	e6e9      	b.n	801b2f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801b51c:	2100      	movs	r1, #0
 801b51e:	460d      	mov	r5, r1
 801b520:	e6f3      	b.n	801b30a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801b522:	2100      	movs	r1, #0
 801b524:	e6f1      	b.n	801b30a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801b526:	4631      	mov	r1, r6
 801b528:	e6ef      	b.n	801b30a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801b52a:	2400      	movs	r4, #0
 801b52c:	e700      	b.n	801b330 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801b52e:	2200      	movs	r2, #0
 801b530:	4614      	mov	r4, r2
 801b532:	e70b      	b.n	801b34c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801b534:	4602      	mov	r2, r0
 801b536:	4604      	mov	r4, r0
 801b538:	e708      	b.n	801b34c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801b53a:	2200      	movs	r2, #0
 801b53c:	e706      	b.n	801b34c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801b53e:	4632      	mov	r2, r6
 801b540:	e704      	b.n	801b34c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801b542 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b546:	b09f      	sub	sp, #124	@ 0x7c
 801b548:	921b      	str	r2, [sp, #108]	@ 0x6c
 801b54a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b54c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801b54e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801b552:	931c      	str	r3, [sp, #112]	@ 0x70
 801b554:	9119      	str	r1, [sp, #100]	@ 0x64
 801b556:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801b55a:	901d      	str	r0, [sp, #116]	@ 0x74
 801b55c:	6850      	ldr	r0, [r2, #4]
 801b55e:	6812      	ldr	r2, [r2, #0]
 801b560:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801b562:	fb00 1303 	mla	r3, r0, r3, r1
 801b566:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b56a:	930c      	str	r3, [sp, #48]	@ 0x30
 801b56c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	9312      	str	r3, [sp, #72]	@ 0x48
 801b572:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b574:	685e      	ldr	r6, [r3, #4]
 801b576:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801b57a:	930d      	str	r3, [sp, #52]	@ 0x34
 801b57c:	3604      	adds	r6, #4
 801b57e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b580:	2b00      	cmp	r3, #0
 801b582:	dc03      	bgt.n	801b58c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b584:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b586:	2b00      	cmp	r3, #0
 801b588:	f340 8388 	ble.w	801bc9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 801b58c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b58e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b592:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b596:	1e48      	subs	r0, r1, #1
 801b598:	1e57      	subs	r7, r2, #1
 801b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	f340 8195 	ble.w	801b8cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b5a2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b5a4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b5a8:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b5ac:	d406      	bmi.n	801b5bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b5ae:	4584      	cmp	ip, r0
 801b5b0:	da04      	bge.n	801b5bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	db02      	blt.n	801b5bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b5b6:	42bb      	cmp	r3, r7
 801b5b8:	f2c0 8189 	blt.w	801b8ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 801b5bc:	f11c 0c01 	adds.w	ip, ip, #1
 801b5c0:	f100 8177 	bmi.w	801b8b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b5c4:	4561      	cmp	r1, ip
 801b5c6:	f2c0 8174 	blt.w	801b8b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b5ca:	3301      	adds	r3, #1
 801b5cc:	f100 8171 	bmi.w	801b8b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	f2c0 816e 	blt.w	801b8b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5d8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b5da:	931a      	str	r3, [sp, #104]	@ 0x68
 801b5dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	f340 8193 	ble.w	801b90a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801b5e4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b5e6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b5ea:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b5ec:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801b5f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b5f2:	141b      	asrs	r3, r3, #16
 801b5f4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b5f8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b5fc:	f100 81d6 	bmi.w	801b9ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801b600:	f100 38ff 	add.w	r8, r0, #4294967295
 801b604:	4543      	cmp	r3, r8
 801b606:	f280 81d1 	bge.w	801b9ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801b60a:	f1bc 0f00 	cmp.w	ip, #0
 801b60e:	f2c0 81cd 	blt.w	801b9ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801b612:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b616:	45c4      	cmp	ip, r8
 801b618:	f280 81c8 	bge.w	801b9ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801b61c:	b200      	sxth	r0, r0
 801b61e:	fb0c 3300 	mla	r3, ip, r0, r3
 801b622:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b624:	eb04 0803 	add.w	r8, r4, r3
 801b628:	5ce3      	ldrb	r3, [r4, r3]
 801b62a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b62e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b632:	2a00      	cmp	r2, #0
 801b634:	f000 81af 	beq.w	801b996 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801b638:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b63c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b640:	940e      	str	r4, [sp, #56]	@ 0x38
 801b642:	0e24      	lsrs	r4, r4, #24
 801b644:	9415      	str	r4, [sp, #84]	@ 0x54
 801b646:	b179      	cbz	r1, 801b668 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b648:	eb08 0c00 	add.w	ip, r8, r0
 801b64c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b650:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b654:	900a      	str	r0, [sp, #40]	@ 0x28
 801b656:	0e00      	lsrs	r0, r0, #24
 801b658:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b65a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b65e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b662:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b664:	0e00      	lsrs	r0, r0, #24
 801b666:	9016      	str	r0, [sp, #88]	@ 0x58
 801b668:	b292      	uxth	r2, r2
 801b66a:	b289      	uxth	r1, r1
 801b66c:	fb02 f901 	mul.w	r9, r2, r1
 801b670:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b674:	0112      	lsls	r2, r2, #4
 801b676:	eba2 0809 	sub.w	r8, r2, r9
 801b67a:	b289      	uxth	r1, r1
 801b67c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b680:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b682:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b684:	fa1f f888 	uxth.w	r8, r8
 801b688:	1a52      	subs	r2, r2, r1
 801b68a:	b292      	uxth	r2, r2
 801b68c:	fb08 f000 	mul.w	r0, r8, r0
 801b690:	fb02 000e 	mla	r0, r2, lr, r0
 801b694:	fb01 0004 	mla	r0, r1, r4, r0
 801b698:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b69a:	fb09 0004 	mla	r0, r9, r4, r0
 801b69e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	f000 80fa 	beq.w	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b6a8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b6ac:	d01b      	beq.n	801b6e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b6ae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b6b2:	fb0e fa0a 	mul.w	sl, lr, sl
 801b6b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b6ba:	fb0e fe03 	mul.w	lr, lr, r3
 801b6be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b6c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b6c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b6ca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b6ce:	4453      	add	r3, sl
 801b6d0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b6d4:	0a1b      	lsrs	r3, r3, #8
 801b6d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b6da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b6de:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b6e2:	ea43 030c 	orr.w	r3, r3, ip
 801b6e6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b6e8:	2cff      	cmp	r4, #255	@ 0xff
 801b6ea:	d021      	beq.n	801b730 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801b6ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b6ee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b6f2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b6f4:	fb04 fb0b 	mul.w	fp, r4, fp
 801b6f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b6fa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b6fe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b700:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b704:	fb04 fa0a 	mul.w	sl, r4, sl
 801b708:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b70c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b710:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b714:	44de      	add	lr, fp
 801b716:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b71a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b71e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b722:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b726:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b72a:	ea4e 040a 	orr.w	r4, lr, sl
 801b72e:	940e      	str	r4, [sp, #56]	@ 0x38
 801b730:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b732:	2cff      	cmp	r4, #255	@ 0xff
 801b734:	d021      	beq.n	801b77a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b736:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b738:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b73c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b73e:	fb04 fb0b 	mul.w	fp, r4, fp
 801b742:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b744:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b748:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b74a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b74e:	fb04 fa0a 	mul.w	sl, r4, sl
 801b752:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b756:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b75a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b75e:	44de      	add	lr, fp
 801b760:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b764:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b768:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b76c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b770:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b774:	ea4e 040a 	orr.w	r4, lr, sl
 801b778:	940a      	str	r4, [sp, #40]	@ 0x28
 801b77a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b77c:	2cff      	cmp	r4, #255	@ 0xff
 801b77e:	d021      	beq.n	801b7c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b780:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b782:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b786:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b788:	fb04 fb0b 	mul.w	fp, r4, fp
 801b78c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b78e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b792:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b794:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b798:	fb04 fa0a 	mul.w	sl, r4, sl
 801b79c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b7a0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b7a4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b7a8:	44de      	add	lr, fp
 801b7aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b7ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b7b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b7b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b7ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b7be:	ea4e 040a 	orr.w	r4, lr, sl
 801b7c2:	940f      	str	r4, [sp, #60]	@ 0x3c
 801b7c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b7c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b7ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b7cc:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b7d0:	fb08 fc0c 	mul.w	ip, r8, ip
 801b7d4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b7d8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b7dc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b7de:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b7e2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b7e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b7e8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b7ec:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b7f0:	fb08 f80e 	mul.w	r8, r8, lr
 801b7f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b7f8:	fb02 8303 	mla	r3, r2, r3, r8
 801b7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801b800:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b804:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b806:	fb01 330a 	mla	r3, r1, sl, r3
 801b80a:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801b80e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b810:	fb09 3901 	mla	r9, r9, r1, r3
 801b814:	4342      	muls	r2, r0
 801b816:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b81a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b81e:	883b      	ldrh	r3, [r7, #0]
 801b820:	1c50      	adds	r0, r2, #1
 801b822:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b826:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b82a:	ea4c 0c09 	orr.w	ip, ip, r9
 801b82e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801b832:	1219      	asrs	r1, r3, #8
 801b834:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801b838:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b83c:	b2c0      	uxtb	r0, r0
 801b83e:	fb12 f204 	smulbb	r2, r2, r4
 801b842:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801b846:	fb01 2100 	mla	r1, r1, r0, r2
 801b84a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801b84e:	10da      	asrs	r2, r3, #3
 801b850:	fa5f fc8c 	uxtb.w	ip, ip
 801b854:	00db      	lsls	r3, r3, #3
 801b856:	fb1c fc04 	smulbb	ip, ip, r4
 801b85a:	b2db      	uxtb	r3, r3
 801b85c:	b289      	uxth	r1, r1
 801b85e:	fb03 c300 	mla	r3, r3, r0, ip
 801b862:	fa1f fc83 	uxth.w	ip, r3
 801b866:	1c4b      	adds	r3, r1, #1
 801b868:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b86c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801b870:	fb1e fe04 	smulbb	lr, lr, r4
 801b874:	f10c 0301 	add.w	r3, ip, #1
 801b878:	fb02 e200 	mla	r2, r2, r0, lr
 801b87c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801b880:	b292      	uxth	r2, r2
 801b882:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801b886:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b88a:	430b      	orrs	r3, r1
 801b88c:	1c51      	adds	r1, r2, #1
 801b88e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b892:	0952      	lsrs	r2, r2, #5
 801b894:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b898:	4313      	orrs	r3, r2
 801b89a:	803b      	strh	r3, [r7, #0]
 801b89c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b89e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b8a0:	441a      	add	r2, r3
 801b8a2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b8a4:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b8a6:	441d      	add	r5, r3
 801b8a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b8aa:	3b01      	subs	r3, #1
 801b8ac:	3702      	adds	r7, #2
 801b8ae:	931a      	str	r3, [sp, #104]	@ 0x68
 801b8b0:	e694      	b.n	801b5dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b8b2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b8b4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b8b6:	441c      	add	r4, r3
 801b8b8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b8ba:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b8bc:	441d      	add	r5, r3
 801b8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8c0:	3b01      	subs	r3, #1
 801b8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b8c6:	3302      	adds	r3, #2
 801b8c8:	930c      	str	r3, [sp, #48]	@ 0x30
 801b8ca:	e666      	b.n	801b59a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b8cc:	d024      	beq.n	801b918 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 801b8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8d0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b8d2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b8d4:	3b01      	subs	r3, #1
 801b8d6:	fb00 4003 	mla	r0, r0, r3, r4
 801b8da:	1400      	asrs	r0, r0, #16
 801b8dc:	f53f ae7b 	bmi.w	801b5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8e0:	3901      	subs	r1, #1
 801b8e2:	4288      	cmp	r0, r1
 801b8e4:	f6bf ae77 	bge.w	801b5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8e8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b8ea:	fb01 5303 	mla	r3, r1, r3, r5
 801b8ee:	141b      	asrs	r3, r3, #16
 801b8f0:	f53f ae71 	bmi.w	801b5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8f4:	3a01      	subs	r2, #1
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	f6bf ae6d 	bge.w	801b5d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8fc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b900:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801b904:	f1bb 0f00 	cmp.w	fp, #0
 801b908:	dc70      	bgt.n	801b9ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801b90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b90c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b912:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801b916:	930c      	str	r3, [sp, #48]	@ 0x30
 801b918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f340 81be 	ble.w	801bc9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 801b920:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b92c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b92e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b932:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b936:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b93a:	eef0 6a62 	vmov.f32	s13, s5
 801b93e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b942:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b946:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b94a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b94e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b952:	eef0 6a43 	vmov.f32	s13, s6
 801b956:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b95a:	ee12 2a90 	vmov	r2, s5
 801b95e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b962:	fb92 f3f3 	sdiv	r3, r2, r3
 801b966:	ee13 2a10 	vmov	r2, s6
 801b96a:	932b      	str	r3, [sp, #172]	@ 0xac
 801b96c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b96e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b972:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b976:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b978:	3b01      	subs	r3, #1
 801b97a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b97e:	9319      	str	r3, [sp, #100]	@ 0x64
 801b980:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b982:	bf08      	it	eq
 801b984:	4613      	moveq	r3, r2
 801b986:	ee16 5a90 	vmov	r5, s13
 801b98a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b98c:	eeb0 3a67 	vmov.f32	s6, s15
 801b990:	eef0 2a47 	vmov.f32	s5, s14
 801b994:	e5f3      	b.n	801b57e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b996:	2900      	cmp	r1, #0
 801b998:	f43f ae66 	beq.w	801b668 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b99c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b9a0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b9a4:	900a      	str	r0, [sp, #40]	@ 0x28
 801b9a6:	0e00      	lsrs	r0, r0, #24
 801b9a8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b9aa:	e65d      	b.n	801b668 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b9ac:	f113 0801 	adds.w	r8, r3, #1
 801b9b0:	f53f af74 	bmi.w	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b9b4:	4540      	cmp	r0, r8
 801b9b6:	f6ff af71 	blt.w	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b9ba:	f11c 0801 	adds.w	r8, ip, #1
 801b9be:	f53f af6d 	bmi.w	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b9c2:	45c6      	cmp	lr, r8
 801b9c4:	f6ff af6a 	blt.w	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b9c8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b9ca:	9302      	str	r3, [sp, #8]
 801b9cc:	b200      	sxth	r0, r0
 801b9ce:	fa0f f38e 	sxth.w	r3, lr
 801b9d2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b9d6:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b9da:	9301      	str	r3, [sp, #4]
 801b9dc:	9000      	str	r0, [sp, #0]
 801b9de:	4633      	mov	r3, r6
 801b9e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b9e2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b9e4:	4639      	mov	r1, r7
 801b9e6:	f7ff fc62 	bl	801b2ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801b9ea:	e757      	b.n	801b89c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b9ec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b9ee:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b9f0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b9f4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b9f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9fa:	1427      	asrs	r7, r4, #16
 801b9fc:	142b      	asrs	r3, r5, #16
 801b9fe:	fb01 7303 	mla	r3, r1, r3, r7
 801ba02:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ba04:	18e7      	adds	r7, r4, r3
 801ba06:	5ce3      	ldrb	r3, [r4, r3]
 801ba08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ba0c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ba10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ba14:	2a00      	cmp	r2, #0
 801ba16:	f000 8137 	beq.w	801bc88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 801ba1a:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ba1e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ba22:	9410      	str	r4, [sp, #64]	@ 0x40
 801ba24:	0e24      	lsrs	r4, r4, #24
 801ba26:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ba28:	b170      	cbz	r0, 801ba48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801ba2a:	eb07 0e01 	add.w	lr, r7, r1
 801ba2e:	5c79      	ldrb	r1, [r7, r1]
 801ba30:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ba34:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ba36:	0e09      	lsrs	r1, r1, #24
 801ba38:	9114      	str	r1, [sp, #80]	@ 0x50
 801ba3a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ba3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ba42:	9111      	str	r1, [sp, #68]	@ 0x44
 801ba44:	0e09      	lsrs	r1, r1, #24
 801ba46:	9118      	str	r1, [sp, #96]	@ 0x60
 801ba48:	b292      	uxth	r2, r2
 801ba4a:	b280      	uxth	r0, r0
 801ba4c:	fb02 f800 	mul.w	r8, r2, r0
 801ba50:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ba54:	0112      	lsls	r2, r2, #4
 801ba56:	eba2 0e08 	sub.w	lr, r2, r8
 801ba5a:	b280      	uxth	r0, r0
 801ba5c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ba60:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ba62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ba64:	fa1f fe8e 	uxth.w	lr, lr
 801ba68:	1a12      	subs	r2, r2, r0
 801ba6a:	b292      	uxth	r2, r2
 801ba6c:	fb0e f101 	mul.w	r1, lr, r1
 801ba70:	fb02 110c 	mla	r1, r2, ip, r1
 801ba74:	fb00 1104 	mla	r1, r0, r4, r1
 801ba78:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ba7a:	fb08 1104 	mla	r1, r8, r4, r1
 801ba7e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ba82:	2900      	cmp	r1, #0
 801ba84:	f000 80f5 	beq.w	801bc72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801ba88:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801ba8c:	d019      	beq.n	801bac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 801ba8e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ba92:	fb0c fa0a 	mul.w	sl, ip, sl
 801ba96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ba9a:	fb0c fc03 	mul.w	ip, ip, r3
 801ba9e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801baa2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801baa6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801baaa:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801baae:	4453      	add	r3, sl
 801bab0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801bab4:	0a1b      	lsrs	r3, r3, #8
 801bab6:	0a3f      	lsrs	r7, r7, #8
 801bab8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801babc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801bac0:	433b      	orrs	r3, r7
 801bac2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bac4:	2cff      	cmp	r4, #255	@ 0xff
 801bac6:	d020      	beq.n	801bb0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 801bac8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801baca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bace:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bad0:	4367      	muls	r7, r4
 801bad2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bad4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bad8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bada:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bade:	fb04 fa0a 	mul.w	sl, r4, sl
 801bae2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bae6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801baea:	44bc      	add	ip, r7
 801baec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801baf0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801baf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801baf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bafc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb00:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bb04:	ea4c 040a 	orr.w	r4, ip, sl
 801bb08:	9410      	str	r4, [sp, #64]	@ 0x40
 801bb0a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bb0c:	2cff      	cmp	r4, #255	@ 0xff
 801bb0e:	d020      	beq.n	801bb52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 801bb10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bb12:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bb16:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bb18:	4367      	muls	r7, r4
 801bb1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bb1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bb20:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bb22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bb26:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb2a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bb2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb32:	44bc      	add	ip, r7
 801bb34:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bb38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bb4c:	ea4c 040a 	orr.w	r4, ip, sl
 801bb50:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bb52:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bb54:	2cff      	cmp	r4, #255	@ 0xff
 801bb56:	d020      	beq.n	801bb9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 801bb58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb5a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bb5e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bb60:	4367      	muls	r7, r4
 801bb62:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb64:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bb68:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bb6a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bb6e:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb72:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bb76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb7a:	44bc      	add	ip, r7
 801bb7c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bb80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb8c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb90:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bb94:	ea4c 040a 	orr.w	r4, ip, sl
 801bb98:	9411      	str	r4, [sp, #68]	@ 0x44
 801bb9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bb9c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bba0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bba2:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801bba6:	fb0e f707 	mul.w	r7, lr, r7
 801bbaa:	fb02 770c 	mla	r7, r2, ip, r7
 801bbae:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bbb2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bbb4:	fb00 770c 	mla	r7, r0, ip, r7
 801bbb8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bbbc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bbbe:	fb08 770c 	mla	r7, r8, ip, r7
 801bbc2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801bbc6:	fb0e fe0c 	mul.w	lr, lr, ip
 801bbca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bbce:	fb02 e303 	mla	r3, r2, r3, lr
 801bbd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bbd4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bbd6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801bbda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bbdc:	fb00 330a 	mla	r3, r0, sl, r3
 801bbe0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801bbe4:	fb08 3c0c 	mla	ip, r8, ip, r3
 801bbe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bbea:	f8b9 0000 	ldrh.w	r0, [r9]
 801bbee:	434b      	muls	r3, r1
 801bbf0:	0a3f      	lsrs	r7, r7, #8
 801bbf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bbf6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801bbfa:	1c59      	adds	r1, r3, #1
 801bbfc:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801bc00:	ea47 070c 	orr.w	r7, r7, ip
 801bc04:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bc08:	1202      	asrs	r2, r0, #8
 801bc0a:	0c3b      	lsrs	r3, r7, #16
 801bc0c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bc10:	b2c9      	uxtb	r1, r1
 801bc12:	fb13 f304 	smulbb	r3, r3, r4
 801bc16:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801bc1a:	fb02 3201 	mla	r2, r2, r1, r3
 801bc1e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801bc22:	10c3      	asrs	r3, r0, #3
 801bc24:	b2ff      	uxtb	r7, r7
 801bc26:	00c0      	lsls	r0, r0, #3
 801bc28:	b292      	uxth	r2, r2
 801bc2a:	fb1c fc04 	smulbb	ip, ip, r4
 801bc2e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801bc32:	b2c0      	uxtb	r0, r0
 801bc34:	fb17 f704 	smulbb	r7, r7, r4
 801bc38:	fb03 c301 	mla	r3, r3, r1, ip
 801bc3c:	fb00 7001 	mla	r0, r0, r1, r7
 801bc40:	f102 0c01 	add.w	ip, r2, #1
 801bc44:	b280      	uxth	r0, r0
 801bc46:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bc4a:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 801bc4e:	1c42      	adds	r2, r0, #1
 801bc50:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bc5a:	ea42 020c 	orr.w	r2, r2, ip
 801bc5e:	f103 0c01 	add.w	ip, r3, #1
 801bc62:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801bc66:	095b      	lsrs	r3, r3, #5
 801bc68:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801bc6c:	431a      	orrs	r2, r3
 801bc6e:	f8a9 2000 	strh.w	r2, [r9]
 801bc72:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801bc74:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bc76:	441a      	add	r2, r3
 801bc78:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bc7a:	9229      	str	r2, [sp, #164]	@ 0xa4
 801bc7c:	f109 0902 	add.w	r9, r9, #2
 801bc80:	441d      	add	r5, r3
 801bc82:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bc86:	e63d      	b.n	801b904 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801bc88:	2800      	cmp	r0, #0
 801bc8a:	f43f aedd 	beq.w	801ba48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801bc8e:	5c79      	ldrb	r1, [r7, r1]
 801bc90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bc94:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bc96:	0e09      	lsrs	r1, r1, #24
 801bc98:	9114      	str	r1, [sp, #80]	@ 0x50
 801bc9a:	e6d5      	b.n	801ba48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801bc9c:	b01f      	add	sp, #124	@ 0x7c
 801bc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bca2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801bca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca6:	b089      	sub	sp, #36	@ 0x24
 801bca8:	9101      	str	r1, [sp, #4]
 801bcaa:	9801      	ldr	r0, [sp, #4]
 801bcac:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 801bcb0:	8800      	ldrh	r0, [r0, #0]
 801bcb2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 801bcb6:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801bcba:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 801bcbe:	1206      	asrs	r6, r0, #8
 801bcc0:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 801bcc4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801bcc8:	9602      	str	r6, [sp, #8]
 801bcca:	10c6      	asrs	r6, r0, #3
 801bccc:	00c0      	lsls	r0, r0, #3
 801bcce:	b2c0      	uxtb	r0, r0
 801bcd0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bcd4:	9004      	str	r0, [sp, #16]
 801bcd6:	2f00      	cmp	r7, #0
 801bcd8:	fb07 100c 	mla	r0, r7, ip, r1
 801bcdc:	9603      	str	r6, [sp, #12]
 801bcde:	eb02 0e00 	add.w	lr, r2, r0
 801bce2:	f2c0 810a 	blt.w	801befa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801bce6:	45b8      	cmp	r8, r7
 801bce8:	f340 8107 	ble.w	801befa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801bcec:	2900      	cmp	r1, #0
 801bcee:	f2c0 8102 	blt.w	801bef6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801bcf2:	458c      	cmp	ip, r1
 801bcf4:	f340 80ff 	ble.w	801bef6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801bcf8:	5c12      	ldrb	r2, [r2, r0]
 801bcfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bcfe:	1c4a      	adds	r2, r1, #1
 801bd00:	f100 80fe 	bmi.w	801bf00 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801bd04:	4594      	cmp	ip, r2
 801bd06:	f340 80fb 	ble.w	801bf00 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801bd0a:	2d00      	cmp	r5, #0
 801bd0c:	f000 80fa 	beq.w	801bf04 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801bd10:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bd14:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bd18:	3701      	adds	r7, #1
 801bd1a:	f100 80f7 	bmi.w	801bf0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801bd1e:	45b8      	cmp	r8, r7
 801bd20:	f340 80f4 	ble.w	801bf0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801bd24:	2c00      	cmp	r4, #0
 801bd26:	f000 80f4 	beq.w	801bf12 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801bd2a:	2900      	cmp	r1, #0
 801bd2c:	eb0e 020c 	add.w	r2, lr, ip
 801bd30:	f2c0 80ea 	blt.w	801bf08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801bd34:	458c      	cmp	ip, r1
 801bd36:	f340 80e7 	ble.w	801bf08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801bd3a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801bd3e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801bd42:	3101      	adds	r1, #1
 801bd44:	f100 80e8 	bmi.w	801bf18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801bd48:	458c      	cmp	ip, r1
 801bd4a:	f340 80e5 	ble.w	801bf18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801bd4e:	2d00      	cmp	r5, #0
 801bd50:	f000 80e4 	beq.w	801bf1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801bd54:	7852      	ldrb	r2, [r2, #1]
 801bd56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bd5a:	0e0b      	lsrs	r3, r1, #24
 801bd5c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801bd60:	9300      	str	r3, [sp, #0]
 801bd62:	b2a4      	uxth	r4, r4
 801bd64:	b2ab      	uxth	r3, r5
 801bd66:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801bd6a:	fb03 f904 	mul.w	r9, r3, r4
 801bd6e:	fb0a f505 	mul.w	r5, sl, r5
 801bd72:	011b      	lsls	r3, r3, #4
 801bd74:	eba3 0e09 	sub.w	lr, r3, r9
 801bd78:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 801bd7c:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 801bd80:	0a28      	lsrs	r0, r5, #8
 801bd82:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bd86:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801bd8a:	4405      	add	r5, r0
 801bd8c:	0a2d      	lsrs	r5, r5, #8
 801bd8e:	fb0a f303 	mul.w	r3, sl, r3
 801bd92:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 801bd96:	9005      	str	r0, [sp, #20]
 801bd98:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 801bd9c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801bda0:	0a1b      	lsrs	r3, r3, #8
 801bda2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801bda6:	9306      	str	r3, [sp, #24]
 801bda8:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 801bdac:	fb0b f303 	mul.w	r3, fp, r3
 801bdb0:	0a1d      	lsrs	r5, r3, #8
 801bdb2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bdb6:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801bdba:	fb0b f606 	mul.w	r6, fp, r6
 801bdbe:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 801bdc2:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 801bdc6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801bdca:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801bdce:	fb08 f707 	mul.w	r7, r8, r7
 801bdd2:	441d      	add	r5, r3
 801bdd4:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 801bdd8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801bddc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801bde0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801bde4:	fb08 fc0c 	mul.w	ip, r8, ip
 801bde8:	0a1b      	lsrs	r3, r3, #8
 801bdea:	9307      	str	r3, [sp, #28]
 801bdec:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801bdf0:	0e0b      	lsrs	r3, r1, #24
 801bdf2:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 801bdf6:	435f      	muls	r7, r3
 801bdf8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801bdfc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801be00:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801be04:	4460      	add	r0, ip
 801be06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801be0a:	b2a4      	uxth	r4, r4
 801be0c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801be10:	0a2d      	lsrs	r5, r5, #8
 801be12:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801be16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801be1a:	fa1f fe8e 	uxth.w	lr, lr
 801be1e:	4359      	muls	r1, r3
 801be20:	1b12      	subs	r2, r2, r4
 801be22:	9b05      	ldr	r3, [sp, #20]
 801be24:	44bc      	add	ip, r7
 801be26:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801be2a:	b292      	uxth	r2, r2
 801be2c:	fb05 f50e 	mul.w	r5, r5, lr
 801be30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be34:	fb03 5502 	mla	r5, r3, r2, r5
 801be38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801be3c:	9b06      	ldr	r3, [sp, #24]
 801be3e:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 801be42:	0a36      	lsrs	r6, r6, #8
 801be44:	0a00      	lsrs	r0, r0, #8
 801be46:	fb0c 5509 	mla	r5, ip, r9, r5
 801be4a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801be4e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801be52:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801be56:	fb00 5504 	mla	r5, r0, r4, r5
 801be5a:	fb0e f606 	mul.w	r6, lr, r6
 801be5e:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 801be62:	0a09      	lsrs	r1, r1, #8
 801be64:	9b07      	ldr	r3, [sp, #28]
 801be66:	fb02 6000 	mla	r0, r2, r0, r6
 801be6a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801be6e:	fb09 0001 	mla	r0, r9, r1, r0
 801be72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801be76:	fb0e fe0b 	mul.w	lr, lr, fp
 801be7a:	fb04 0003 	mla	r0, r4, r3, r0
 801be7e:	fb02 e20a 	mla	r2, r2, sl, lr
 801be82:	9b00      	ldr	r3, [sp, #0]
 801be84:	fb04 2408 	mla	r4, r4, r8, r2
 801be88:	fb09 4903 	mla	r9, r9, r3, r4
 801be8c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801be90:	9b02      	ldr	r3, [sp, #8]
 801be92:	9a04      	ldr	r2, [sp, #16]
 801be94:	fa5f f989 	uxtb.w	r9, r9
 801be98:	fb03 f109 	mul.w	r1, r3, r9
 801be9c:	9b03      	ldr	r3, [sp, #12]
 801be9e:	0a2d      	lsrs	r5, r5, #8
 801bea0:	0a00      	lsrs	r0, r0, #8
 801bea2:	fb03 f309 	mul.w	r3, r3, r9
 801bea6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801beaa:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801beae:	4305      	orrs	r5, r0
 801beb0:	fb02 f909 	mul.w	r9, r2, r9
 801beb4:	1c58      	adds	r0, r3, #1
 801beb6:	1c4a      	adds	r2, r1, #1
 801beb8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bebc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bec0:	0a2b      	lsrs	r3, r5, #8
 801bec2:	0c2a      	lsrs	r2, r5, #16
 801bec4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801bec8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801becc:	00db      	lsls	r3, r3, #3
 801bece:	0212      	lsls	r2, r2, #8
 801bed0:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801bed4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801bed8:	4313      	orrs	r3, r2
 801beda:	f109 0201 	add.w	r2, r9, #1
 801bede:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801bee2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801bee6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801beea:	431d      	orrs	r5, r3
 801beec:	9b01      	ldr	r3, [sp, #4]
 801beee:	801d      	strh	r5, [r3, #0]
 801bef0:	b009      	add	sp, #36	@ 0x24
 801bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bef6:	2000      	movs	r0, #0
 801bef8:	e701      	b.n	801bcfe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801befa:	2600      	movs	r6, #0
 801befc:	4630      	mov	r0, r6
 801befe:	e70b      	b.n	801bd18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801bf00:	2600      	movs	r6, #0
 801bf02:	e709      	b.n	801bd18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801bf04:	462e      	mov	r6, r5
 801bf06:	e707      	b.n	801bd18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801bf08:	2700      	movs	r7, #0
 801bf0a:	e71a      	b.n	801bd42 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801bf0c:	2100      	movs	r1, #0
 801bf0e:	460f      	mov	r7, r1
 801bf10:	e723      	b.n	801bd5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801bf12:	4621      	mov	r1, r4
 801bf14:	4627      	mov	r7, r4
 801bf16:	e720      	b.n	801bd5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801bf18:	2100      	movs	r1, #0
 801bf1a:	e71e      	b.n	801bd5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801bf1c:	4629      	mov	r1, r5
 801bf1e:	e71c      	b.n	801bd5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801bf20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf24:	b09b      	sub	sp, #108	@ 0x6c
 801bf26:	9218      	str	r2, [sp, #96]	@ 0x60
 801bf28:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bf2a:	9116      	str	r1, [sp, #88]	@ 0x58
 801bf2c:	9307      	str	r3, [sp, #28]
 801bf2e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801bf32:	9019      	str	r0, [sp, #100]	@ 0x64
 801bf34:	6850      	ldr	r0, [r2, #4]
 801bf36:	6812      	ldr	r2, [r2, #0]
 801bf38:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801bf3a:	fb00 1303 	mla	r3, r0, r3, r1
 801bf3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bf42:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bf4a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bf4c:	685e      	ldr	r6, [r3, #4]
 801bf4e:	3604      	adds	r6, #4
 801bf50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	dc03      	bgt.n	801bf5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bf56:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	f340 8373 	ble.w	801c644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801bf5e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bf60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bf64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bf68:	1e48      	subs	r0, r1, #1
 801bf6a:	1e57      	subs	r7, r2, #1
 801bf6c:	9b07      	ldr	r3, [sp, #28]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	f340 8190 	ble.w	801c294 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801bf74:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801bf76:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801bf7a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801bf7e:	d406      	bmi.n	801bf8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bf80:	4584      	cmp	ip, r0
 801bf82:	da04      	bge.n	801bf8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	db02      	blt.n	801bf8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bf88:	42bb      	cmp	r3, r7
 801bf8a:	f2c0 8184 	blt.w	801c296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 801bf8e:	f11c 0c01 	adds.w	ip, ip, #1
 801bf92:	f100 8172 	bmi.w	801c27a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801bf96:	4561      	cmp	r1, ip
 801bf98:	f2c0 816f 	blt.w	801c27a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801bf9c:	3301      	adds	r3, #1
 801bf9e:	f100 816c 	bmi.w	801c27a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801bfa2:	429a      	cmp	r2, r3
 801bfa4:	f2c0 8169 	blt.w	801c27a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801bfa8:	9b07      	ldr	r3, [sp, #28]
 801bfaa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bfac:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bfae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	f340 818e 	ble.w	801c2d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 801bfb6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bfb8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bfbc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bfbe:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801bfc2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bfc4:	141b      	asrs	r3, r3, #16
 801bfc6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801bfca:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bfce:	f100 81d1 	bmi.w	801c374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801bfd2:	f101 38ff 	add.w	r8, r1, #4294967295
 801bfd6:	4543      	cmp	r3, r8
 801bfd8:	f280 81cc 	bge.w	801c374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801bfdc:	f1bc 0f00 	cmp.w	ip, #0
 801bfe0:	f2c0 81c8 	blt.w	801c374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801bfe4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bfe8:	45c4      	cmp	ip, r8
 801bfea:	f280 81c3 	bge.w	801c374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801bfee:	b209      	sxth	r1, r1
 801bff0:	fb0c 3301 	mla	r3, ip, r1, r3
 801bff4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bff6:	eb04 0803 	add.w	r8, r4, r3
 801bffa:	5ce3      	ldrb	r3, [r4, r3]
 801bffc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c000:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c004:	2a00      	cmp	r2, #0
 801c006:	f000 81aa 	beq.w	801c35e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 801c00a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c00e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c012:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c014:	0e24      	lsrs	r4, r4, #24
 801c016:	9412      	str	r4, [sp, #72]	@ 0x48
 801c018:	b178      	cbz	r0, 801c03a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801c01a:	eb08 0c01 	add.w	ip, r8, r1
 801c01e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c022:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c026:	9108      	str	r1, [sp, #32]
 801c028:	0e09      	lsrs	r1, r1, #24
 801c02a:	9110      	str	r1, [sp, #64]	@ 0x40
 801c02c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801c030:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c034:	910c      	str	r1, [sp, #48]	@ 0x30
 801c036:	0e09      	lsrs	r1, r1, #24
 801c038:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c03a:	b292      	uxth	r2, r2
 801c03c:	b280      	uxth	r0, r0
 801c03e:	fb02 f900 	mul.w	r9, r2, r0
 801c042:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c046:	0112      	lsls	r2, r2, #4
 801c048:	eba2 0809 	sub.w	r8, r2, r9
 801c04c:	b280      	uxth	r0, r0
 801c04e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c052:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c054:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c056:	fa1f f888 	uxth.w	r8, r8
 801c05a:	1a12      	subs	r2, r2, r0
 801c05c:	b292      	uxth	r2, r2
 801c05e:	fb08 f101 	mul.w	r1, r8, r1
 801c062:	fb02 110e 	mla	r1, r2, lr, r1
 801c066:	fb00 1104 	mla	r1, r0, r4, r1
 801c06a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c06c:	fb09 1104 	mla	r1, r9, r4, r1
 801c070:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c074:	2900      	cmp	r1, #0
 801c076:	f000 80f5 	beq.w	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c07a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801c07e:	d01b      	beq.n	801c0b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c080:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c084:	fb0e fa0a 	mul.w	sl, lr, sl
 801c088:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c08c:	fb0e fe03 	mul.w	lr, lr, r3
 801c090:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c094:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c098:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c09c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801c0a0:	4453      	add	r3, sl
 801c0a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c0a6:	0a1b      	lsrs	r3, r3, #8
 801c0a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c0ac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c0b0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c0b4:	ea43 030c 	orr.w	r3, r3, ip
 801c0b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c0ba:	2cff      	cmp	r4, #255	@ 0xff
 801c0bc:	d021      	beq.n	801c102 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c0be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c0c0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c0c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c0c6:	fb04 fb0b 	mul.w	fp, r4, fp
 801c0ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c0cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c0d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c0d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c0d6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c0da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c0de:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c0e2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c0e6:	44de      	add	lr, fp
 801c0e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c0ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c0f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c0f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c0f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c0fc:	ea4e 040a 	orr.w	r4, lr, sl
 801c100:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c102:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c104:	2cff      	cmp	r4, #255	@ 0xff
 801c106:	d021      	beq.n	801c14c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801c108:	9c08      	ldr	r4, [sp, #32]
 801c10a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c10e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c110:	fb04 fb0b 	mul.w	fp, r4, fp
 801c114:	9c08      	ldr	r4, [sp, #32]
 801c116:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c11a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c11c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c120:	fb04 fa0a 	mul.w	sl, r4, sl
 801c124:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c128:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c12c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c130:	44de      	add	lr, fp
 801c132:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c136:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c13a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c13e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c142:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c146:	ea4e 040a 	orr.w	r4, lr, sl
 801c14a:	9408      	str	r4, [sp, #32]
 801c14c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c14e:	2cff      	cmp	r4, #255	@ 0xff
 801c150:	d021      	beq.n	801c196 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c152:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c154:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c158:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c15a:	fb04 fb0b 	mul.w	fp, r4, fp
 801c15e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c160:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c164:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c166:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c16a:	fb04 fa0a 	mul.w	sl, r4, sl
 801c16e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c172:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c176:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c17a:	44de      	add	lr, fp
 801c17c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c180:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c184:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c188:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c18c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c190:	ea4e 040a 	orr.w	r4, lr, sl
 801c194:	940c      	str	r4, [sp, #48]	@ 0x30
 801c196:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c198:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c19c:	9c08      	ldr	r4, [sp, #32]
 801c19e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c1a2:	fb08 fc0c 	mul.w	ip, r8, ip
 801c1a6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c1aa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c1ae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c1b0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c1b4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c1b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c1ba:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c1be:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c1c2:	fb08 f80e 	mul.w	r8, r8, lr
 801c1c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c1ca:	fb02 8303 	mla	r3, r2, r3, r8
 801c1ce:	9a08      	ldr	r2, [sp, #32]
 801c1d0:	f8b7 8000 	ldrh.w	r8, [r7]
 801c1d4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c1d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c1da:	fb00 330a 	mla	r3, r0, sl, r3
 801c1de:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801c1e2:	fb09 3900 	mla	r9, r9, r0, r3
 801c1e6:	43c9      	mvns	r1, r1
 801c1e8:	ea4f 2228 	mov.w	r2, r8, asr #8
 801c1ec:	fa5f fe81 	uxtb.w	lr, r1
 801c1f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c1f8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801c1fc:	fb02 f20e 	mul.w	r2, r2, lr
 801c200:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c204:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c208:	ea4c 0c09 	orr.w	ip, ip, r9
 801c20c:	1c53      	adds	r3, r2, #1
 801c20e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c212:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801c216:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801c21a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c21e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801c222:	4a63      	ldr	r2, [pc, #396]	@ (801c3b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801c224:	fb00 f00e 	mul.w	r0, r0, lr
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801c22e:	1c43      	adds	r3, r0, #1
 801c230:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c234:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c238:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801c23c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c240:	b2c9      	uxtb	r1, r1
 801c242:	00db      	lsls	r3, r3, #3
 801c244:	fb01 f10e 	mul.w	r1, r1, lr
 801c248:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c24c:	4313      	orrs	r3, r2
 801c24e:	1c4a      	adds	r2, r1, #1
 801c250:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c254:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c258:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801c25c:	ea4c 0c03 	orr.w	ip, ip, r3
 801c260:	f8a7 c000 	strh.w	ip, [r7]
 801c264:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c266:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c268:	441a      	add	r2, r3
 801c26a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c26c:	9225      	str	r2, [sp, #148]	@ 0x94
 801c26e:	441d      	add	r5, r3
 801c270:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c272:	3b01      	subs	r3, #1
 801c274:	3702      	adds	r7, #2
 801c276:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c278:	e699      	b.n	801bfae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c27a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c27c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c27e:	441c      	add	r4, r3
 801c280:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c282:	9425      	str	r4, [sp, #148]	@ 0x94
 801c284:	441d      	add	r5, r3
 801c286:	9b07      	ldr	r3, [sp, #28]
 801c288:	3b01      	subs	r3, #1
 801c28a:	9307      	str	r3, [sp, #28]
 801c28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c28e:	3302      	adds	r3, #2
 801c290:	930a      	str	r3, [sp, #40]	@ 0x28
 801c292:	e66b      	b.n	801bf6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c294:	d024      	beq.n	801c2e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c296:	9b07      	ldr	r3, [sp, #28]
 801c298:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c29a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c29c:	3b01      	subs	r3, #1
 801c29e:	fb00 4003 	mla	r0, r0, r3, r4
 801c2a2:	1400      	asrs	r0, r0, #16
 801c2a4:	f53f ae80 	bmi.w	801bfa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c2a8:	3901      	subs	r1, #1
 801c2aa:	4288      	cmp	r0, r1
 801c2ac:	f6bf ae7c 	bge.w	801bfa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c2b0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c2b2:	fb01 5303 	mla	r3, r1, r3, r5
 801c2b6:	141b      	asrs	r3, r3, #16
 801c2b8:	f53f ae76 	bmi.w	801bfa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c2bc:	3a01      	subs	r2, #1
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	f6bf ae72 	bge.w	801bfa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c2c4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c2c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801c2cc:	f1bb 0f00 	cmp.w	fp, #0
 801c2d0:	dc70      	bgt.n	801c3b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801c2d2:	9b07      	ldr	r3, [sp, #28]
 801c2d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c2da:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c2de:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	f340 81ae 	ble.w	801c644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801c2e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c2f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c2f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c2f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c302:	eef0 6a62 	vmov.f32	s13, s5
 801c306:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c30a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c30e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c312:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 801c316:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c31a:	eef0 6a43 	vmov.f32	s13, s6
 801c31e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c322:	ee12 2a90 	vmov	r2, s5
 801c326:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c32a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c32e:	ee13 2a10 	vmov	r2, s6
 801c332:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c334:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c336:	fb92 f3f3 	sdiv	r3, r2, r3
 801c33a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c33c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c33e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c340:	3b01      	subs	r3, #1
 801c342:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c346:	9316      	str	r3, [sp, #88]	@ 0x58
 801c348:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c34a:	bf08      	it	eq
 801c34c:	4613      	moveq	r3, r2
 801c34e:	ee16 5a90 	vmov	r5, s13
 801c352:	9307      	str	r3, [sp, #28]
 801c354:	eeb0 3a67 	vmov.f32	s6, s15
 801c358:	eef0 2a47 	vmov.f32	s5, s14
 801c35c:	e5f8      	b.n	801bf50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c35e:	2800      	cmp	r0, #0
 801c360:	f43f ae6b 	beq.w	801c03a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801c364:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c368:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c36c:	9108      	str	r1, [sp, #32]
 801c36e:	0e09      	lsrs	r1, r1, #24
 801c370:	9110      	str	r1, [sp, #64]	@ 0x40
 801c372:	e662      	b.n	801c03a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801c374:	f113 0801 	adds.w	r8, r3, #1
 801c378:	f53f af74 	bmi.w	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c37c:	4541      	cmp	r1, r8
 801c37e:	f6ff af71 	blt.w	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c382:	f11c 0801 	adds.w	r8, ip, #1
 801c386:	f53f af6d 	bmi.w	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c38a:	45c6      	cmp	lr, r8
 801c38c:	f6ff af6a 	blt.w	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c390:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801c394:	b209      	sxth	r1, r1
 801c396:	fa0f f38e 	sxth.w	r3, lr
 801c39a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801c39e:	9301      	str	r3, [sp, #4]
 801c3a0:	9100      	str	r1, [sp, #0]
 801c3a2:	4633      	mov	r3, r6
 801c3a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c3a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c3a8:	4639      	mov	r1, r7
 801c3aa:	f7ff fc7a 	bl	801bca2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801c3ae:	e759      	b.n	801c264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c3b0:	fffff800 	.word	0xfffff800
 801c3b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c3b6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c3b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c3bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c3be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3c2:	1427      	asrs	r7, r4, #16
 801c3c4:	142b      	asrs	r3, r5, #16
 801c3c6:	fb01 7303 	mla	r3, r1, r3, r7
 801c3ca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c3cc:	18e7      	adds	r7, r4, r3
 801c3ce:	5ce3      	ldrb	r3, [r4, r3]
 801c3d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c3d4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c3d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c3dc:	2a00      	cmp	r2, #0
 801c3de:	f000 8127 	beq.w	801c630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801c3e2:	f897 e001 	ldrb.w	lr, [r7, #1]
 801c3e6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801c3ea:	940d      	str	r4, [sp, #52]	@ 0x34
 801c3ec:	0e24      	lsrs	r4, r4, #24
 801c3ee:	9414      	str	r4, [sp, #80]	@ 0x50
 801c3f0:	b170      	cbz	r0, 801c410 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801c3f2:	eb07 0e01 	add.w	lr, r7, r1
 801c3f6:	5c79      	ldrb	r1, [r7, r1]
 801c3f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c3fc:	9109      	str	r1, [sp, #36]	@ 0x24
 801c3fe:	0e09      	lsrs	r1, r1, #24
 801c400:	9111      	str	r1, [sp, #68]	@ 0x44
 801c402:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801c406:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c40a:	910e      	str	r1, [sp, #56]	@ 0x38
 801c40c:	0e09      	lsrs	r1, r1, #24
 801c40e:	9115      	str	r1, [sp, #84]	@ 0x54
 801c410:	b292      	uxth	r2, r2
 801c412:	b280      	uxth	r0, r0
 801c414:	fb02 f800 	mul.w	r8, r2, r0
 801c418:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801c41c:	0112      	lsls	r2, r2, #4
 801c41e:	eba2 0e08 	sub.w	lr, r2, r8
 801c422:	b280      	uxth	r0, r0
 801c424:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801c428:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c42a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c42c:	fa1f fe8e 	uxth.w	lr, lr
 801c430:	1a09      	subs	r1, r1, r0
 801c432:	b289      	uxth	r1, r1
 801c434:	fb0e f202 	mul.w	r2, lr, r2
 801c438:	fb01 220c 	mla	r2, r1, ip, r2
 801c43c:	fb00 2204 	mla	r2, r0, r4, r2
 801c440:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c442:	fb08 2204 	mla	r2, r8, r4, r2
 801c446:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c44a:	2a00      	cmp	r2, #0
 801c44c:	f000 80e5 	beq.w	801c61a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801c450:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c454:	d019      	beq.n	801c48a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801c456:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c45a:	fb0c fa0a 	mul.w	sl, ip, sl
 801c45e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c462:	fb0c fc03 	mul.w	ip, ip, r3
 801c466:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c46a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c46e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c472:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c476:	4453      	add	r3, sl
 801c478:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c47c:	0a1b      	lsrs	r3, r3, #8
 801c47e:	0a3f      	lsrs	r7, r7, #8
 801c480:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c484:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c488:	433b      	orrs	r3, r7
 801c48a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c48c:	2cff      	cmp	r4, #255	@ 0xff
 801c48e:	d020      	beq.n	801c4d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801c490:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c492:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c496:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c498:	4367      	muls	r7, r4
 801c49a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c49c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c4a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c4a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c4a6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c4aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c4ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c4b2:	44bc      	add	ip, r7
 801c4b4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c4b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c4bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c4c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c4c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c4cc:	ea4c 040a 	orr.w	r4, ip, sl
 801c4d0:	940d      	str	r4, [sp, #52]	@ 0x34
 801c4d2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c4d4:	2cff      	cmp	r4, #255	@ 0xff
 801c4d6:	d020      	beq.n	801c51a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801c4d8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c4da:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c4de:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c4e0:	4367      	muls	r7, r4
 801c4e2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c4e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c4e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c4ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c4ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801c4f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c4f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c4fa:	44bc      	add	ip, r7
 801c4fc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c500:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c508:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c50c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c510:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c514:	ea4c 040a 	orr.w	r4, ip, sl
 801c518:	9409      	str	r4, [sp, #36]	@ 0x24
 801c51a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c51c:	2cff      	cmp	r4, #255	@ 0xff
 801c51e:	d020      	beq.n	801c562 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801c520:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c522:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c526:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c528:	4367      	muls	r7, r4
 801c52a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c52c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c530:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c532:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c536:	fb04 fa0a 	mul.w	sl, r4, sl
 801c53a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c53e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c542:	44bc      	add	ip, r7
 801c544:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c548:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c54c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c550:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c554:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c558:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c55c:	ea4c 040a 	orr.w	r4, ip, sl
 801c560:	940e      	str	r4, [sp, #56]	@ 0x38
 801c562:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c564:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c568:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c56a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801c56e:	fb0e f707 	mul.w	r7, lr, r7
 801c572:	fb01 770c 	mla	r7, r1, ip, r7
 801c576:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c57a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c57c:	fb00 770c 	mla	r7, r0, ip, r7
 801c580:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c584:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c586:	fb08 770c 	mla	r7, r8, ip, r7
 801c58a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801c58e:	fb0e fe0c 	mul.w	lr, lr, ip
 801c592:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c596:	fb01 e303 	mla	r3, r1, r3, lr
 801c59a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c59c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801c5a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c5a2:	fb00 330a 	mla	r3, r0, sl, r3
 801c5a6:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801c5aa:	fb08 3c0c 	mla	ip, r8, ip, r3
 801c5ae:	f8b9 3000 	ldrh.w	r3, [r9]
 801c5b2:	43d2      	mvns	r2, r2
 801c5b4:	1218      	asrs	r0, r3, #8
 801c5b6:	b2d2      	uxtb	r2, r2
 801c5b8:	10d9      	asrs	r1, r3, #3
 801c5ba:	0a3f      	lsrs	r7, r7, #8
 801c5bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5c0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801c5c4:	00db      	lsls	r3, r3, #3
 801c5c6:	4350      	muls	r0, r2
 801c5c8:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801c5cc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c5d0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801c5d4:	b2db      	uxtb	r3, r3
 801c5d6:	ea47 070c 	orr.w	r7, r7, ip
 801c5da:	4351      	muls	r1, r2
 801c5dc:	4353      	muls	r3, r2
 801c5de:	1c42      	adds	r2, r0, #1
 801c5e0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c5e4:	0c3a      	lsrs	r2, r7, #16
 801c5e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c5ea:	4a18      	ldr	r2, [pc, #96]	@ (801c64c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801c5ec:	b2c0      	uxtb	r0, r0
 801c5ee:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801c5f2:	1c4a      	adds	r2, r1, #1
 801c5f4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c5f8:	0a3a      	lsrs	r2, r7, #8
 801c5fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c5fe:	00c9      	lsls	r1, r1, #3
 801c600:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c604:	4301      	orrs	r1, r0
 801c606:	1c58      	adds	r0, r3, #1
 801c608:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c60c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801c610:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801c614:	4308      	orrs	r0, r1
 801c616:	f8a9 0000 	strh.w	r0, [r9]
 801c61a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c61c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c61e:	441a      	add	r2, r3
 801c620:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c622:	9225      	str	r2, [sp, #148]	@ 0x94
 801c624:	f109 0902 	add.w	r9, r9, #2
 801c628:	441d      	add	r5, r3
 801c62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c62e:	e64d      	b.n	801c2cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801c630:	2800      	cmp	r0, #0
 801c632:	f43f aeed 	beq.w	801c410 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801c636:	5c79      	ldrb	r1, [r7, r1]
 801c638:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c63c:	9109      	str	r1, [sp, #36]	@ 0x24
 801c63e:	0e09      	lsrs	r1, r1, #24
 801c640:	9111      	str	r1, [sp, #68]	@ 0x44
 801c642:	e6e5      	b.n	801c410 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801c644:	b01b      	add	sp, #108	@ 0x6c
 801c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c64a:	bf00      	nop
 801c64c:	fffff800 	.word	0xfffff800

0801c650 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c654:	b085      	sub	sp, #20
 801c656:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801c65a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801c65e:	9103      	str	r1, [sp, #12]
 801c660:	fb00 7406 	mla	r4, r0, r6, r7
 801c664:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801c668:	2800      	cmp	r0, #0
 801c66a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801c66e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801c672:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801c676:	9501      	str	r5, [sp, #4]
 801c678:	eb03 0904 	add.w	r9, r3, r4
 801c67c:	f2c0 8150 	blt.w	801c920 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801c680:	4583      	cmp	fp, r0
 801c682:	f340 814d 	ble.w	801c920 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801c686:	2f00      	cmp	r7, #0
 801c688:	f2c0 8146 	blt.w	801c918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801c68c:	42be      	cmp	r6, r7
 801c68e:	f340 8143 	ble.w	801c918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801c692:	f813 c004 	ldrb.w	ip, [r3, r4]
 801c696:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801c69a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801c69e:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801c6a2:	4355      	muls	r5, r2
 801c6a4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c6a8:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801c6ac:	fb0c f203 	mul.w	r2, ip, r3
 801c6b0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801c6b4:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801c6b8:	441d      	add	r5, r3
 801c6ba:	f102 0320 	add.w	r3, r2, #32
 801c6be:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c6c2:	0a1b      	lsrs	r3, r3, #8
 801c6c4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801c6c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c6cc:	431c      	orrs	r4, r3
 801c6ce:	1c7b      	adds	r3, r7, #1
 801c6d0:	f100 812b 	bmi.w	801c92a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801c6d4:	429e      	cmp	r6, r3
 801c6d6:	f340 8128 	ble.w	801c92a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801c6da:	2900      	cmp	r1, #0
 801c6dc:	f000 8128 	beq.w	801c930 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801c6e0:	9a01      	ldr	r2, [sp, #4]
 801c6e2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c6e6:	8855      	ldrh	r5, [r2, #2]
 801c6e8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801c6ec:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801c6f0:	fb08 f802 	mul.w	r8, r8, r2
 801c6f4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c6f8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801c6fc:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801c700:	435d      	muls	r5, r3
 801c702:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801c706:	44d0      	add	r8, sl
 801c708:	f105 0a20 	add.w	sl, r5, #32
 801c70c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801c710:	0a2d      	lsrs	r5, r5, #8
 801c712:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801c716:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c71a:	432a      	orrs	r2, r5
 801c71c:	3001      	adds	r0, #1
 801c71e:	f100 810d 	bmi.w	801c93c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801c722:	4583      	cmp	fp, r0
 801c724:	f340 810a 	ble.w	801c93c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801c728:	f1be 0f00 	cmp.w	lr, #0
 801c72c:	f000 810b 	beq.w	801c946 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801c730:	2f00      	cmp	r7, #0
 801c732:	f2c0 8100 	blt.w	801c936 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801c736:	42be      	cmp	r6, r7
 801c738:	f340 80fd 	ble.w	801c936 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801c73c:	9801      	ldr	r0, [sp, #4]
 801c73e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801c742:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801c746:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c74a:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801c74e:	fb0a fa00 	mul.w	sl, sl, r0
 801c752:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801c756:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c75a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801c75e:	fb05 f808 	mul.w	r8, r5, r8
 801c762:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801c766:	4482      	add	sl, r0
 801c768:	f108 0020 	add.w	r0, r8, #32
 801c76c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801c770:	0a00      	lsrs	r0, r0, #8
 801c772:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801c776:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c77a:	ea4b 0b00 	orr.w	fp, fp, r0
 801c77e:	3701      	adds	r7, #1
 801c780:	f100 80e6 	bmi.w	801c950 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801c784:	42be      	cmp	r6, r7
 801c786:	f340 80e3 	ble.w	801c950 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801c78a:	2900      	cmp	r1, #0
 801c78c:	f000 80e3 	beq.w	801c956 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801c790:	3601      	adds	r6, #1
 801c792:	9801      	ldr	r0, [sp, #4]
 801c794:	f819 7006 	ldrb.w	r7, [r9, r6]
 801c798:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801c79c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801c7a0:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801c7a4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c7a8:	fb09 f906 	mul.w	r9, r9, r6
 801c7ac:	fb07 f800 	mul.w	r8, r7, r0
 801c7b0:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801c7b4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801c7b8:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801c7bc:	44d1      	add	r9, sl
 801c7be:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801c7c2:	f108 0020 	add.w	r0, r8, #32
 801c7c6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801c7ca:	0a00      	lsrs	r0, r0, #8
 801c7cc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801c7d0:	4330      	orrs	r0, r6
 801c7d2:	b28e      	uxth	r6, r1
 801c7d4:	fa1f f98e 	uxth.w	r9, lr
 801c7d8:	fb06 f809 	mul.w	r8, r6, r9
 801c7dc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801c7e0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801c7e4:	0136      	lsls	r6, r6, #4
 801c7e6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801c7ea:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801c7ee:	9601      	str	r6, [sp, #4]
 801c7f0:	ea4a 0404 	orr.w	r4, sl, r4
 801c7f4:	fa1f f689 	uxth.w	r6, r9
 801c7f8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801c7fc:	fb11 f90e 	smulbb	r9, r1, lr
 801c800:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801c804:	9602      	str	r6, [sp, #8]
 801c806:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801c80a:	4626      	mov	r6, r4
 801c80c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801c810:	f1ce 0410 	rsb	r4, lr, #16
 801c814:	1a64      	subs	r4, r4, r1
 801c816:	ea4a 0202 	orr.w	r2, sl, r2
 801c81a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801c81e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801c822:	434a      	muls	r2, r1
 801c824:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801c828:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801c82c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801c830:	fb04 2406 	mla	r4, r4, r6, r2
 801c834:	ea4a 0000 	orr.w	r0, sl, r0
 801c838:	fb09 4200 	mla	r2, r9, r0, r4
 801c83c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801c840:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801c844:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801c848:	ea44 0b0b 	orr.w	fp, r4, fp
 801c84c:	9c01      	ldr	r4, [sp, #4]
 801c84e:	9e02      	ldr	r6, [sp, #8]
 801c850:	9903      	ldr	r1, [sp, #12]
 801c852:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 801c856:	1ba4      	subs	r4, r4, r6
 801c858:	9e01      	ldr	r6, [sp, #4]
 801c85a:	8808      	ldrh	r0, [r1, #0]
 801c85c:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 801c860:	eba6 0608 	sub.w	r6, r6, r8
 801c864:	b2b6      	uxth	r6, r6
 801c866:	b2a4      	uxth	r4, r4
 801c868:	4373      	muls	r3, r6
 801c86a:	fb0c 3304 	mla	r3, ip, r4, r3
 801c86e:	9c02      	ldr	r4, [sp, #8]
 801c870:	fb04 3505 	mla	r5, r4, r5, r3
 801c874:	fb08 5707 	mla	r7, r8, r7, r5
 801c878:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801c87c:	b289      	uxth	r1, r1
 801c87e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801c882:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c886:	434f      	muls	r7, r1
 801c888:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801c88c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801c890:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c894:	1c7b      	adds	r3, r7, #1
 801c896:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801c89a:	ea42 0e0e 	orr.w	lr, r2, lr
 801c89e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c8a2:	fa1f f28e 	uxth.w	r2, lr
 801c8a6:	1203      	asrs	r3, r0, #8
 801c8a8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801c8ac:	b2ff      	uxtb	r7, r7
 801c8ae:	1215      	asrs	r5, r2, #8
 801c8b0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c8b4:	fb13 f307 	smulbb	r3, r3, r7
 801c8b8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801c8bc:	fb05 3501 	mla	r5, r5, r1, r3
 801c8c0:	10c3      	asrs	r3, r0, #3
 801c8c2:	10d4      	asrs	r4, r2, #3
 801c8c4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801c8c8:	fb13 f307 	smulbb	r3, r3, r7
 801c8cc:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801c8d0:	fb04 3401 	mla	r4, r4, r1, r3
 801c8d4:	00c3      	lsls	r3, r0, #3
 801c8d6:	00d2      	lsls	r2, r2, #3
 801c8d8:	b2db      	uxtb	r3, r3
 801c8da:	fb13 f307 	smulbb	r3, r3, r7
 801c8de:	b2d2      	uxtb	r2, r2
 801c8e0:	fb02 3101 	mla	r1, r2, r1, r3
 801c8e4:	b2ad      	uxth	r5, r5
 801c8e6:	b289      	uxth	r1, r1
 801c8e8:	b2a4      	uxth	r4, r4
 801c8ea:	1c6b      	adds	r3, r5, #1
 801c8ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c8f0:	1c62      	adds	r2, r4, #1
 801c8f2:	1c4b      	adds	r3, r1, #1
 801c8f4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c8f8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801c8fc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801c900:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c904:	0964      	lsrs	r4, r4, #5
 801c906:	432b      	orrs	r3, r5
 801c908:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801c90c:	9a03      	ldr	r2, [sp, #12]
 801c90e:	4323      	orrs	r3, r4
 801c910:	8013      	strh	r3, [r2, #0]
 801c912:	b005      	add	sp, #20
 801c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c918:	f04f 0c00 	mov.w	ip, #0
 801c91c:	4664      	mov	r4, ip
 801c91e:	e6d6      	b.n	801c6ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801c920:	2300      	movs	r3, #0
 801c922:	469c      	mov	ip, r3
 801c924:	461a      	mov	r2, r3
 801c926:	461c      	mov	r4, r3
 801c928:	e6f8      	b.n	801c71c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801c92a:	2300      	movs	r3, #0
 801c92c:	461a      	mov	r2, r3
 801c92e:	e6f5      	b.n	801c71c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801c930:	460b      	mov	r3, r1
 801c932:	460a      	mov	r2, r1
 801c934:	e6f2      	b.n	801c71c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801c936:	2500      	movs	r5, #0
 801c938:	46ab      	mov	fp, r5
 801c93a:	e720      	b.n	801c77e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801c93c:	2700      	movs	r7, #0
 801c93e:	463d      	mov	r5, r7
 801c940:	4638      	mov	r0, r7
 801c942:	46bb      	mov	fp, r7
 801c944:	e745      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801c946:	4677      	mov	r7, lr
 801c948:	4675      	mov	r5, lr
 801c94a:	4670      	mov	r0, lr
 801c94c:	46f3      	mov	fp, lr
 801c94e:	e740      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801c950:	2700      	movs	r7, #0
 801c952:	4638      	mov	r0, r7
 801c954:	e73d      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801c956:	460f      	mov	r7, r1
 801c958:	4608      	mov	r0, r1
 801c95a:	e73a      	b.n	801c7d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801c95c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c960:	b097      	sub	sp, #92	@ 0x5c
 801c962:	9214      	str	r2, [sp, #80]	@ 0x50
 801c964:	9308      	str	r3, [sp, #32]
 801c966:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c968:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801c96c:	9312      	str	r3, [sp, #72]	@ 0x48
 801c96e:	9111      	str	r1, [sp, #68]	@ 0x44
 801c970:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801c974:	9015      	str	r0, [sp, #84]	@ 0x54
 801c976:	6850      	ldr	r0, [r2, #4]
 801c978:	6812      	ldr	r2, [r2, #0]
 801c97a:	fb00 1303 	mla	r3, r0, r3, r1
 801c97e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c982:	9309      	str	r3, [sp, #36]	@ 0x24
 801c984:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c98a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c98c:	685b      	ldr	r3, [r3, #4]
 801c98e:	930c      	str	r3, [sp, #48]	@ 0x30
 801c990:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801c994:	930a      	str	r3, [sp, #40]	@ 0x28
 801c996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c998:	2b00      	cmp	r3, #0
 801c99a:	dc03      	bgt.n	801c9a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c99c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	f340 83cb 	ble.w	801d13a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801c9a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c9a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c9aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c9ae:	1e48      	subs	r0, r1, #1
 801c9b0:	1e55      	subs	r5, r2, #1
 801c9b2:	9b08      	ldr	r3, [sp, #32]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	f340 81a3 	ble.w	801cd00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801c9ba:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801c9bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c9be:	1436      	asrs	r6, r6, #16
 801c9c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c9c4:	d406      	bmi.n	801c9d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9c6:	4286      	cmp	r6, r0
 801c9c8:	da04      	bge.n	801c9d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	db02      	blt.n	801c9d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c9ce:	42ab      	cmp	r3, r5
 801c9d0:	f2c0 8197 	blt.w	801cd02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c9d4:	3601      	adds	r6, #1
 801c9d6:	f100 8184 	bmi.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801c9da:	42b1      	cmp	r1, r6
 801c9dc:	f2c0 8181 	blt.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801c9e0:	3301      	adds	r3, #1
 801c9e2:	f100 817e 	bmi.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	f2c0 817b 	blt.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801c9ec:	9b08      	ldr	r3, [sp, #32]
 801c9ee:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c9f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c9f2:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801c9f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	f340 81a4 	ble.w	801cd46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801c9fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ca00:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801ca02:	1418      	asrs	r0, r3, #16
 801ca04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ca06:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ca0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ca0c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ca10:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ca12:	142d      	asrs	r5, r5, #16
 801ca14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ca18:	f100 81f8 	bmi.w	801ce0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801ca1c:	f102 3eff 	add.w	lr, r2, #4294967295
 801ca20:	4575      	cmp	r5, lr
 801ca22:	f280 81f3 	bge.w	801ce0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801ca26:	2800      	cmp	r0, #0
 801ca28:	f2c0 81f0 	blt.w	801ce0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801ca2c:	f103 3eff 	add.w	lr, r3, #4294967295
 801ca30:	4570      	cmp	r0, lr
 801ca32:	f280 81eb 	bge.w	801ce0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801ca36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca38:	b212      	sxth	r2, r2
 801ca3a:	fb00 5002 	mla	r0, r0, r2, r5
 801ca3e:	fa1f fe81 	uxth.w	lr, r1
 801ca42:	eb03 0a00 	add.w	sl, r3, r0
 801ca46:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801ca4a:	f813 9000 	ldrb.w	r9, [r3, r0]
 801ca4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ca52:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801ca56:	b29b      	uxth	r3, r3
 801ca58:	f1bc 0f00 	cmp.w	ip, #0
 801ca5c:	f000 81b9 	beq.w	801cdd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801ca60:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801ca64:	940d      	str	r4, [sp, #52]	@ 0x34
 801ca66:	eb0a 0b02 	add.w	fp, sl, r2
 801ca6a:	fa1f fa8c 	uxth.w	sl, ip
 801ca6e:	fb0a fe0e 	mul.w	lr, sl, lr
 801ca72:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801ca76:	fa1f fa8a 	uxth.w	sl, sl
 801ca7a:	eba5 050e 	sub.w	r5, r5, lr
 801ca7e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ca82:	940e      	str	r4, [sp, #56]	@ 0x38
 801ca84:	eba3 030a 	sub.w	r3, r3, sl
 801ca88:	b2ad      	uxth	r5, r5
 801ca8a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ca8c:	b29b      	uxth	r3, r3
 801ca8e:	fb08 f505 	mul.w	r5, r8, r5
 801ca92:	fb09 5303 	mla	r3, r9, r3, r5
 801ca96:	fb0a 3304 	mla	r3, sl, r4, r3
 801ca9a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ca9c:	fb0e 3304 	mla	r3, lr, r4, r3
 801caa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	f000 810f 	beq.w	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801caaa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801caac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801cab0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801cab4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801cab8:	f000 8190 	beq.w	801cddc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801cabc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801cac0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801cac4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cac8:	fb09 f000 	mul.w	r0, r9, r0
 801cacc:	fb0a fe0e 	mul.w	lr, sl, lr
 801cad0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801cad4:	f100 0b20 	add.w	fp, r0, #32
 801cad8:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801cadc:	44ce      	add	lr, r9
 801cade:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801cae2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cae6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801caea:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801caee:	ea4e 0909 	orr.w	r9, lr, r9
 801caf2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801caf6:	8868      	ldrh	r0, [r5, #2]
 801caf8:	d019      	beq.n	801cb2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801cafa:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801cafe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801cb02:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cb06:	fb08 f800 	mul.w	r8, r8, r0
 801cb0a:	fb0a fe0e 	mul.w	lr, sl, lr
 801cb0e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801cb12:	f108 0b20 	add.w	fp, r8, #32
 801cb16:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801cb1a:	4486      	add	lr, r0
 801cb1c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801cb20:	0a00      	lsrs	r0, r0, #8
 801cb22:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801cb26:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cb2a:	ea4e 0000 	orr.w	r0, lr, r0
 801cb2e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801cb32:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801cb36:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801cb3a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801cb3e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801cb42:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801cb46:	ea4e 0909 	orr.w	r9, lr, r9
 801cb4a:	ea4a 0000 	orr.w	r0, sl, r0
 801cb4e:	f1bc 0f00 	cmp.w	ip, #0
 801cb52:	f000 8145 	beq.w	801cde0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801cb56:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801cb5a:	3a01      	subs	r2, #1
 801cb5c:	0052      	lsls	r2, r2, #1
 801cb5e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cb60:	3202      	adds	r2, #2
 801cb62:	2cff      	cmp	r4, #255	@ 0xff
 801cb64:	eb05 0e02 	add.w	lr, r5, r2
 801cb68:	5aaa      	ldrh	r2, [r5, r2]
 801cb6a:	d018      	beq.n	801cb9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801cb6c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801cb70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cb74:	fb04 fa02 	mul.w	sl, r4, r2
 801cb78:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801cb7c:	fb08 f805 	mul.w	r8, r8, r5
 801cb80:	f10a 0520 	add.w	r5, sl, #32
 801cb84:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801cb88:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801cb8c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801cb90:	4442      	add	r2, r8
 801cb92:	0a2d      	lsrs	r5, r5, #8
 801cb94:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801cb98:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cb9c:	432a      	orrs	r2, r5
 801cb9e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801cba0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801cba4:	2cff      	cmp	r4, #255	@ 0xff
 801cba6:	d01a      	beq.n	801cbde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801cba8:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801cbac:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cbb0:	fb04 fa05 	mul.w	sl, r4, r5
 801cbb4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801cbb8:	fb08 f80e 	mul.w	r8, r8, lr
 801cbbc:	f10a 0e20 	add.w	lr, sl, #32
 801cbc0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801cbc4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801cbc8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801cbcc:	4445      	add	r5, r8
 801cbce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cbd2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801cbd6:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801cbda:	ea45 050e 	orr.w	r5, r5, lr
 801cbde:	fb1c fe01 	smulbb	lr, ip, r1
 801cbe2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801cbe6:	f1cc 0810 	rsb	r8, ip, #16
 801cbea:	eba8 0801 	sub.w	r8, r8, r1
 801cbee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801cbf2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801cbf6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801cbfa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801cbfe:	4341      	muls	r1, r0
 801cc00:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801cc04:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801cc08:	ea4a 0202 	orr.w	r2, sl, r2
 801cc0c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801cc10:	fb09 1108 	mla	r1, r9, r8, r1
 801cc14:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801cc18:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801cc1c:	fb0c 1102 	mla	r1, ip, r2, r1
 801cc20:	ea4b 0505 	orr.w	r5, fp, r5
 801cc24:	fb0e 1e05 	mla	lr, lr, r5, r1
 801cc28:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801cc2c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801cc30:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cc34:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801cc38:	ea42 0e0e 	orr.w	lr, r2, lr
 801cc3c:	fa1f f28e 	uxth.w	r2, lr
 801cc40:	2bff      	cmp	r3, #255	@ 0xff
 801cc42:	d103      	bne.n	801cc4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801cc44:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cc46:	29ff      	cmp	r1, #255	@ 0xff
 801cc48:	f000 80de 	beq.w	801ce08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801cc4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cc4e:	8838      	ldrh	r0, [r7, #0]
 801cc50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801cc52:	434b      	muls	r3, r1
 801cc54:	f103 0c01 	add.w	ip, r3, #1
 801cc58:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801cc5c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801cc60:	fa5f fc83 	uxtb.w	ip, r3
 801cc64:	1203      	asrs	r3, r0, #8
 801cc66:	1215      	asrs	r5, r2, #8
 801cc68:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801cc6c:	fb13 f30c 	smulbb	r3, r3, ip
 801cc70:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801cc74:	fb05 3501 	mla	r5, r5, r1, r3
 801cc78:	10c3      	asrs	r3, r0, #3
 801cc7a:	10d1      	asrs	r1, r2, #3
 801cc7c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801cc80:	fb13 f30c 	smulbb	r3, r3, ip
 801cc84:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801cc88:	fb01 3104 	mla	r1, r1, r4, r3
 801cc8c:	00c3      	lsls	r3, r0, #3
 801cc8e:	00d2      	lsls	r2, r2, #3
 801cc90:	b2db      	uxtb	r3, r3
 801cc92:	b2d2      	uxtb	r2, r2
 801cc94:	fb13 f30c 	smulbb	r3, r3, ip
 801cc98:	b2ad      	uxth	r5, r5
 801cc9a:	fb02 3304 	mla	r3, r2, r4, r3
 801cc9e:	b29a      	uxth	r2, r3
 801cca0:	1c6b      	adds	r3, r5, #1
 801cca2:	b289      	uxth	r1, r1
 801cca4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cca8:	1c53      	adds	r3, r2, #1
 801ccaa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ccae:	1c4a      	adds	r2, r1, #1
 801ccb0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ccb4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801ccb8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ccbc:	0949      	lsrs	r1, r1, #5
 801ccbe:	432b      	orrs	r3, r5
 801ccc0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ccc4:	430b      	orrs	r3, r1
 801ccc6:	803b      	strh	r3, [r7, #0]
 801ccc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ccca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801cccc:	4413      	add	r3, r2
 801ccce:	9321      	str	r3, [sp, #132]	@ 0x84
 801ccd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ccd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ccd4:	441a      	add	r2, r3
 801ccd6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ccd8:	9222      	str	r2, [sp, #136]	@ 0x88
 801ccda:	3b01      	subs	r3, #1
 801ccdc:	3702      	adds	r7, #2
 801ccde:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cce0:	e689      	b.n	801c9f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801cce2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cce4:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801cce6:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801cce8:	4433      	add	r3, r6
 801ccea:	9321      	str	r3, [sp, #132]	@ 0x84
 801ccec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ccee:	441c      	add	r4, r3
 801ccf0:	9b08      	ldr	r3, [sp, #32]
 801ccf2:	9422      	str	r4, [sp, #136]	@ 0x88
 801ccf4:	3b01      	subs	r3, #1
 801ccf6:	9308      	str	r3, [sp, #32]
 801ccf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccfa:	3302      	adds	r3, #2
 801ccfc:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccfe:	e658      	b.n	801c9b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801cd00:	d028      	beq.n	801cd54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801cd02:	9b08      	ldr	r3, [sp, #32]
 801cd04:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801cd06:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801cd08:	3b01      	subs	r3, #1
 801cd0a:	fb00 5003 	mla	r0, r0, r3, r5
 801cd0e:	1400      	asrs	r0, r0, #16
 801cd10:	f53f ae6c 	bmi.w	801c9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd14:	3901      	subs	r1, #1
 801cd16:	4288      	cmp	r0, r1
 801cd18:	f6bf ae68 	bge.w	801c9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd1c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801cd1e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801cd20:	fb01 0303 	mla	r3, r1, r3, r0
 801cd24:	141b      	asrs	r3, r3, #16
 801cd26:	f53f ae61 	bmi.w	801c9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd2a:	3a01      	subs	r2, #1
 801cd2c:	4293      	cmp	r3, r2
 801cd2e:	f6bf ae5d 	bge.w	801c9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd32:	9b08      	ldr	r3, [sp, #32]
 801cd34:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801cd38:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd3a:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801cd3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f300 8082 	bgt.w	801ce4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801cd46:	9b08      	ldr	r3, [sp, #32]
 801cd48:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd4e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801cd52:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f340 81ef 	ble.w	801d13a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801cd5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cd64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cd6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd76:	eef0 6a62 	vmov.f32	s13, s5
 801cd7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd86:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 801cd8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd8e:	eef0 6a43 	vmov.f32	s13, s6
 801cd92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd96:	ee12 2a90 	vmov	r2, s5
 801cd9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cda2:	ee13 2a10 	vmov	r2, s6
 801cda6:	9323      	str	r3, [sp, #140]	@ 0x8c
 801cda8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cdaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdae:	9324      	str	r3, [sp, #144]	@ 0x90
 801cdb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cdb2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cdb4:	3b01      	subs	r3, #1
 801cdb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdba:	9311      	str	r3, [sp, #68]	@ 0x44
 801cdbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cdbe:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 801cdc2:	bf08      	it	eq
 801cdc4:	4613      	moveq	r3, r2
 801cdc6:	9308      	str	r3, [sp, #32]
 801cdc8:	eeb0 3a67 	vmov.f32	s6, s15
 801cdcc:	eef0 2a47 	vmov.f32	s5, s14
 801cdd0:	e5e1      	b.n	801c996 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cdd2:	fb08 f505 	mul.w	r5, r8, r5
 801cdd6:	fb09 5303 	mla	r3, r9, r3, r5
 801cdda:	e661      	b.n	801caa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801cddc:	4681      	mov	r9, r0
 801cdde:	e688      	b.n	801caf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cde0:	f1c1 0210 	rsb	r2, r1, #16
 801cde4:	4341      	muls	r1, r0
 801cde6:	fb09 1902 	mla	r9, r9, r2, r1
 801cdea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801cdee:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801cdf2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801cdf6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cdfa:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801cdfe:	ea42 0909 	orr.w	r9, r2, r9
 801ce02:	fa1f f289 	uxth.w	r2, r9
 801ce06:	e71b      	b.n	801cc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ce08:	803a      	strh	r2, [r7, #0]
 801ce0a:	e75d      	b.n	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce0c:	f115 0e01 	adds.w	lr, r5, #1
 801ce10:	f53f af5a 	bmi.w	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce14:	4572      	cmp	r2, lr
 801ce16:	f6ff af57 	blt.w	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce1a:	f110 0e01 	adds.w	lr, r0, #1
 801ce1e:	f53f af53 	bmi.w	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce22:	4573      	cmp	r3, lr
 801ce24:	f6ff af50 	blt.w	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce28:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ce2a:	9502      	str	r5, [sp, #8]
 801ce2c:	b21b      	sxth	r3, r3
 801ce2e:	b212      	sxth	r2, r2
 801ce30:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801ce34:	9301      	str	r3, [sp, #4]
 801ce36:	9200      	str	r2, [sp, #0]
 801ce38:	e9cd c405 	strd	ip, r4, [sp, #20]
 801ce3c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 801ce40:	4639      	mov	r1, r7
 801ce42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ce44:	f7ff fc04 	bl	801c650 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801ce48:	e73e      	b.n	801ccc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ce4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ce4c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ce50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ce52:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801ce56:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ce58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ce5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ce5e:	141f      	asrs	r7, r3, #16
 801ce60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ce62:	141b      	asrs	r3, r3, #16
 801ce64:	fb01 3707 	mla	r7, r1, r7, r3
 801ce68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ce6a:	fa1f fc82 	uxth.w	ip, r2
 801ce6e:	eb03 0a07 	add.w	sl, r3, r7
 801ce72:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ce76:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ce7a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ce7e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801ce82:	b29b      	uxth	r3, r3
 801ce84:	2d00      	cmp	r5, #0
 801ce86:	f000 813d 	beq.w	801d104 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801ce8a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ce8e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801ce90:	eb0a 0b01 	add.w	fp, sl, r1
 801ce94:	fa1f fa85 	uxth.w	sl, r5
 801ce98:	fb0a fc0c 	mul.w	ip, sl, ip
 801ce9c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801cea0:	fa1f fa8a 	uxth.w	sl, sl
 801cea4:	eba0 000c 	sub.w	r0, r0, ip
 801cea8:	eba3 030a 	sub.w	r3, r3, sl
 801ceac:	b280      	uxth	r0, r0
 801ceae:	fb08 f000 	mul.w	r0, r8, r0
 801ceb2:	b29b      	uxth	r3, r3
 801ceb4:	fb09 0303 	mla	r3, r9, r3, r0
 801ceb8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ceba:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801cebe:	9410      	str	r4, [sp, #64]	@ 0x40
 801cec0:	fb0a 3300 	mla	r3, sl, r0, r3
 801cec4:	fb0c 3304 	mla	r3, ip, r4, r3
 801cec8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cecc:	2b00      	cmp	r3, #0
 801cece:	f000 810b 	beq.w	801d0e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801ced2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ced4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ced6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ceda:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801cede:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801cee2:	f000 8114 	beq.w	801d10e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 801cee6:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801ceea:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ceee:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801cef2:	fb09 f707 	mul.w	r7, r9, r7
 801cef6:	fb0a fc0c 	mul.w	ip, sl, ip
 801cefa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801cefe:	f107 0b20 	add.w	fp, r7, #32
 801cf02:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801cf06:	44cc      	add	ip, r9
 801cf08:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801cf0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cf10:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801cf14:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801cf18:	ea4c 0909 	orr.w	r9, ip, r9
 801cf1c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801cf20:	8847      	ldrh	r7, [r0, #2]
 801cf22:	d019      	beq.n	801cf58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 801cf24:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801cf28:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801cf2c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801cf30:	fb08 f807 	mul.w	r8, r8, r7
 801cf34:	fb0a fc0c 	mul.w	ip, sl, ip
 801cf38:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801cf3c:	f108 0b20 	add.w	fp, r8, #32
 801cf40:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801cf44:	44bc      	add	ip, r7
 801cf46:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801cf4a:	0a3f      	lsrs	r7, r7, #8
 801cf4c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801cf50:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801cf54:	ea4c 0707 	orr.w	r7, ip, r7
 801cf58:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801cf5c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801cf60:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801cf64:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801cf68:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801cf6c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801cf70:	ea4c 0909 	orr.w	r9, ip, r9
 801cf74:	ea4a 0707 	orr.w	r7, sl, r7
 801cf78:	2d00      	cmp	r5, #0
 801cf7a:	f000 80ca 	beq.w	801d112 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801cf7e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801cf82:	3901      	subs	r1, #1
 801cf84:	0049      	lsls	r1, r1, #1
 801cf86:	3102      	adds	r1, #2
 801cf88:	eb00 0c01 	add.w	ip, r0, r1
 801cf8c:	5a41      	ldrh	r1, [r0, r1]
 801cf8e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cf90:	28ff      	cmp	r0, #255	@ 0xff
 801cf92:	d019      	beq.n	801cfc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 801cf94:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cf96:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 801cf9a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801cf9e:	fb04 fa01 	mul.w	sl, r4, r1
 801cfa2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801cfa6:	fb08 f800 	mul.w	r8, r8, r0
 801cfaa:	f10a 0020 	add.w	r0, sl, #32
 801cfae:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801cfb2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801cfb6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801cfba:	4441      	add	r1, r8
 801cfbc:	0a00      	lsrs	r0, r0, #8
 801cfbe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801cfc2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cfc6:	4301      	orrs	r1, r0
 801cfc8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cfca:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801cfce:	2cff      	cmp	r4, #255	@ 0xff
 801cfd0:	d01a      	beq.n	801d008 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 801cfd2:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 801cfd6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cfda:	fb04 fa00 	mul.w	sl, r4, r0
 801cfde:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801cfe2:	fb08 f80c 	mul.w	r8, r8, ip
 801cfe6:	f10a 0c20 	add.w	ip, sl, #32
 801cfea:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801cfee:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801cff2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801cff6:	4440      	add	r0, r8
 801cff8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cffc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801d000:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801d004:	ea40 000c 	orr.w	r0, r0, ip
 801d008:	fb15 fc02 	smulbb	ip, r5, r2
 801d00c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801d010:	f1c5 0810 	rsb	r8, r5, #16
 801d014:	eba8 0802 	sub.w	r8, r8, r2
 801d018:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801d01c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801d020:	437a      	muls	r2, r7
 801d022:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801d026:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801d02a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d02e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801d032:	fb09 2208 	mla	r2, r9, r8, r2
 801d036:	ea4a 0101 	orr.w	r1, sl, r1
 801d03a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801d03e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801d042:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801d046:	fb05 2201 	mla	r2, r5, r1, r2
 801d04a:	ea4b 0000 	orr.w	r0, fp, r0
 801d04e:	fb0c 2200 	mla	r2, ip, r0, r2
 801d052:	0d57      	lsrs	r7, r2, #21
 801d054:	0952      	lsrs	r2, r2, #5
 801d056:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801d05a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d05e:	433a      	orrs	r2, r7
 801d060:	2bff      	cmp	r3, #255	@ 0xff
 801d062:	b292      	uxth	r2, r2
 801d064:	d102      	bne.n	801d06c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801d066:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d068:	29ff      	cmp	r1, #255	@ 0xff
 801d06a:	d063      	beq.n	801d134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 801d06c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d06e:	f8be 1000 	ldrh.w	r1, [lr]
 801d072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d074:	4343      	muls	r3, r0
 801d076:	1c58      	adds	r0, r3, #1
 801d078:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801d07c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801d080:	1208      	asrs	r0, r1, #8
 801d082:	b2db      	uxtb	r3, r3
 801d084:	1215      	asrs	r5, r2, #8
 801d086:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801d08a:	fb10 f003 	smulbb	r0, r0, r3
 801d08e:	10cf      	asrs	r7, r1, #3
 801d090:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801d094:	00c9      	lsls	r1, r1, #3
 801d096:	fb05 0504 	mla	r5, r5, r4, r0
 801d09a:	b2c9      	uxtb	r1, r1
 801d09c:	10d0      	asrs	r0, r2, #3
 801d09e:	00d2      	lsls	r2, r2, #3
 801d0a0:	fb11 f103 	smulbb	r1, r1, r3
 801d0a4:	b2d2      	uxtb	r2, r2
 801d0a6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d0aa:	fb02 1204 	mla	r2, r2, r4, r1
 801d0ae:	fb17 f703 	smulbb	r7, r7, r3
 801d0b2:	b2ad      	uxth	r5, r5
 801d0b4:	b292      	uxth	r2, r2
 801d0b6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801d0ba:	fb00 7004 	mla	r0, r0, r4, r7
 801d0be:	1c6b      	adds	r3, r5, #1
 801d0c0:	1c57      	adds	r7, r2, #1
 801d0c2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d0c6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d0ca:	b280      	uxth	r0, r0
 801d0cc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d0d0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801d0d4:	433d      	orrs	r5, r7
 801d0d6:	1c47      	adds	r7, r0, #1
 801d0d8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801d0dc:	097f      	lsrs	r7, r7, #5
 801d0de:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801d0e2:	433d      	orrs	r5, r7
 801d0e4:	f8ae 5000 	strh.w	r5, [lr]
 801d0e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d0ea:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d0ec:	4413      	add	r3, r2
 801d0ee:	9321      	str	r3, [sp, #132]	@ 0x84
 801d0f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d0f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d0f4:	441a      	add	r2, r3
 801d0f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d0f8:	9222      	str	r2, [sp, #136]	@ 0x88
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	f10e 0e02 	add.w	lr, lr, #2
 801d100:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d102:	e61c      	b.n	801cd3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801d104:	fb08 f000 	mul.w	r0, r8, r0
 801d108:	fb09 0303 	mla	r3, r9, r3, r0
 801d10c:	e6dc      	b.n	801cec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 801d10e:	46b9      	mov	r9, r7
 801d110:	e704      	b.n	801cf1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 801d112:	f1c2 0110 	rsb	r1, r2, #16
 801d116:	437a      	muls	r2, r7
 801d118:	fb09 2901 	mla	r9, r9, r1, r2
 801d11c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d120:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801d124:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801d128:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d12c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d130:	4302      	orrs	r2, r0
 801d132:	e795      	b.n	801d060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801d134:	f8ae 2000 	strh.w	r2, [lr]
 801d138:	e7d6      	b.n	801d0e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801d13a:	b017      	add	sp, #92	@ 0x5c
 801d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d144:	b085      	sub	sp, #20
 801d146:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801d14a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801d14e:	9103      	str	r1, [sp, #12]
 801d150:	fb00 7406 	mla	r4, r0, r6, r7
 801d154:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801d158:	2800      	cmp	r0, #0
 801d15a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801d15e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801d162:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801d166:	9501      	str	r5, [sp, #4]
 801d168:	eb02 0904 	add.w	r9, r2, r4
 801d16c:	f2c0 8141 	blt.w	801d3f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801d170:	4583      	cmp	fp, r0
 801d172:	f340 813e 	ble.w	801d3f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801d176:	2f00      	cmp	r7, #0
 801d178:	f2c0 8137 	blt.w	801d3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801d17c:	42be      	cmp	r6, r7
 801d17e:	f340 8134 	ble.w	801d3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801d182:	f812 c004 	ldrb.w	ip, [r2, r4]
 801d186:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801d18a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801d18e:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801d192:	4355      	muls	r5, r2
 801d194:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d198:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801d19c:	fb0c f203 	mul.w	r2, ip, r3
 801d1a0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801d1a4:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801d1a8:	441d      	add	r5, r3
 801d1aa:	f102 0320 	add.w	r3, r2, #32
 801d1ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d1b2:	0a1b      	lsrs	r3, r3, #8
 801d1b4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801d1b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d1bc:	431c      	orrs	r4, r3
 801d1be:	1c7b      	adds	r3, r7, #1
 801d1c0:	f100 811c 	bmi.w	801d3fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801d1c4:	429e      	cmp	r6, r3
 801d1c6:	f340 8119 	ble.w	801d3fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801d1ca:	2900      	cmp	r1, #0
 801d1cc:	f000 8119 	beq.w	801d402 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801d1d0:	9a01      	ldr	r2, [sp, #4]
 801d1d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d1d6:	8855      	ldrh	r5, [r2, #2]
 801d1d8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801d1dc:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801d1e0:	fb08 f802 	mul.w	r8, r8, r2
 801d1e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d1e8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801d1ec:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801d1f0:	435d      	muls	r5, r3
 801d1f2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801d1f6:	44d0      	add	r8, sl
 801d1f8:	f105 0a20 	add.w	sl, r5, #32
 801d1fc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d200:	0a2d      	lsrs	r5, r5, #8
 801d202:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801d206:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d20a:	432a      	orrs	r2, r5
 801d20c:	3001      	adds	r0, #1
 801d20e:	f100 80fe 	bmi.w	801d40e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801d212:	4583      	cmp	fp, r0
 801d214:	f340 80fb 	ble.w	801d40e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801d218:	f1be 0f00 	cmp.w	lr, #0
 801d21c:	f000 80fc 	beq.w	801d418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801d220:	2f00      	cmp	r7, #0
 801d222:	f2c0 80f1 	blt.w	801d408 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801d226:	42be      	cmp	r6, r7
 801d228:	f340 80ee 	ble.w	801d408 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801d22c:	9801      	ldr	r0, [sp, #4]
 801d22e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801d232:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801d236:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d23a:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801d23e:	fb0a fa00 	mul.w	sl, sl, r0
 801d242:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801d246:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d24a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801d24e:	fb05 f808 	mul.w	r8, r5, r8
 801d252:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801d256:	4482      	add	sl, r0
 801d258:	f108 0020 	add.w	r0, r8, #32
 801d25c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d260:	0a00      	lsrs	r0, r0, #8
 801d262:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801d266:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d26a:	ea4b 0b00 	orr.w	fp, fp, r0
 801d26e:	3701      	adds	r7, #1
 801d270:	f100 80d7 	bmi.w	801d422 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801d274:	42be      	cmp	r6, r7
 801d276:	f340 80d4 	ble.w	801d422 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801d27a:	2900      	cmp	r1, #0
 801d27c:	f000 80d4 	beq.w	801d428 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801d280:	3601      	adds	r6, #1
 801d282:	9801      	ldr	r0, [sp, #4]
 801d284:	f819 7006 	ldrb.w	r7, [r9, r6]
 801d288:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801d28c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801d290:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801d294:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d298:	fb09 f906 	mul.w	r9, r9, r6
 801d29c:	fb07 f800 	mul.w	r8, r7, r0
 801d2a0:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801d2a4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801d2a8:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801d2ac:	44d1      	add	r9, sl
 801d2ae:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801d2b2:	f108 0020 	add.w	r0, r8, #32
 801d2b6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d2ba:	0a00      	lsrs	r0, r0, #8
 801d2bc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d2c0:	4330      	orrs	r0, r6
 801d2c2:	b28e      	uxth	r6, r1
 801d2c4:	fa1f f98e 	uxth.w	r9, lr
 801d2c8:	fb06 f809 	mul.w	r8, r6, r9
 801d2cc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801d2d0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801d2d4:	0136      	lsls	r6, r6, #4
 801d2d6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d2da:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801d2de:	9601      	str	r6, [sp, #4]
 801d2e0:	ea4a 0404 	orr.w	r4, sl, r4
 801d2e4:	fa1f f689 	uxth.w	r6, r9
 801d2e8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d2ec:	fb11 f90e 	smulbb	r9, r1, lr
 801d2f0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801d2f4:	9602      	str	r6, [sp, #8]
 801d2f6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d2fa:	4626      	mov	r6, r4
 801d2fc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d300:	f1ce 0410 	rsb	r4, lr, #16
 801d304:	1a64      	subs	r4, r4, r1
 801d306:	ea4a 0202 	orr.w	r2, sl, r2
 801d30a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801d30e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d312:	434a      	muls	r2, r1
 801d314:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801d318:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d31c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801d320:	fb04 2406 	mla	r4, r4, r6, r2
 801d324:	ea4a 0000 	orr.w	r0, sl, r0
 801d328:	fb09 4200 	mla	r2, r9, r0, r4
 801d32c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801d330:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801d334:	9801      	ldr	r0, [sp, #4]
 801d336:	9903      	ldr	r1, [sp, #12]
 801d338:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801d33c:	ea44 0b0b 	orr.w	fp, r4, fp
 801d340:	9c02      	ldr	r4, [sp, #8]
 801d342:	8809      	ldrh	r1, [r1, #0]
 801d344:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 801d348:	1b00      	subs	r0, r0, r4
 801d34a:	9c01      	ldr	r4, [sp, #4]
 801d34c:	eba4 0608 	sub.w	r6, r4, r8
 801d350:	b2b6      	uxth	r6, r6
 801d352:	b280      	uxth	r0, r0
 801d354:	4373      	muls	r3, r6
 801d356:	fb0c 3300 	mla	r3, ip, r0, r3
 801d35a:	9802      	ldr	r0, [sp, #8]
 801d35c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801d360:	fb00 3505 	mla	r5, r0, r5, r3
 801d364:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801d368:	fb08 5707 	mla	r7, r8, r7, r5
 801d36c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d370:	120b      	asrs	r3, r1, #8
 801d372:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d376:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801d37a:	b2ff      	uxtb	r7, r7
 801d37c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d380:	10c8      	asrs	r0, r1, #3
 801d382:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801d386:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801d38a:	00c9      	lsls	r1, r1, #3
 801d38c:	437b      	muls	r3, r7
 801d38e:	ea42 0e0e 	orr.w	lr, r2, lr
 801d392:	b2c9      	uxtb	r1, r1
 801d394:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801d398:	fa1f f28e 	uxth.w	r2, lr
 801d39c:	4378      	muls	r0, r7
 801d39e:	434f      	muls	r7, r1
 801d3a0:	1c59      	adds	r1, r3, #1
 801d3a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d3a6:	1213      	asrs	r3, r2, #8
 801d3a8:	f023 0307 	bic.w	r3, r3, #7
 801d3ac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d3b0:	1c41      	adds	r1, r0, #1
 801d3b2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801d3b6:	10d1      	asrs	r1, r2, #3
 801d3b8:	f021 0103 	bic.w	r1, r1, #3
 801d3bc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d3c0:	021b      	lsls	r3, r3, #8
 801d3c2:	00c9      	lsls	r1, r1, #3
 801d3c4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801d3c8:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801d3cc:	430b      	orrs	r3, r1
 801d3ce:	1c79      	adds	r1, r7, #1
 801d3d0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d3d4:	00d2      	lsls	r2, r2, #3
 801d3d6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d3da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d3de:	431a      	orrs	r2, r3
 801d3e0:	9b03      	ldr	r3, [sp, #12]
 801d3e2:	801a      	strh	r2, [r3, #0]
 801d3e4:	b005      	add	sp, #20
 801d3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ea:	f04f 0c00 	mov.w	ip, #0
 801d3ee:	4664      	mov	r4, ip
 801d3f0:	e6e5      	b.n	801d1be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	469c      	mov	ip, r3
 801d3f6:	461a      	mov	r2, r3
 801d3f8:	461c      	mov	r4, r3
 801d3fa:	e707      	b.n	801d20c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801d3fc:	2300      	movs	r3, #0
 801d3fe:	461a      	mov	r2, r3
 801d400:	e704      	b.n	801d20c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801d402:	460b      	mov	r3, r1
 801d404:	460a      	mov	r2, r1
 801d406:	e701      	b.n	801d20c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801d408:	2500      	movs	r5, #0
 801d40a:	46ab      	mov	fp, r5
 801d40c:	e72f      	b.n	801d26e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801d40e:	2700      	movs	r7, #0
 801d410:	463d      	mov	r5, r7
 801d412:	4638      	mov	r0, r7
 801d414:	46bb      	mov	fp, r7
 801d416:	e754      	b.n	801d2c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801d418:	4677      	mov	r7, lr
 801d41a:	4675      	mov	r5, lr
 801d41c:	4670      	mov	r0, lr
 801d41e:	46f3      	mov	fp, lr
 801d420:	e74f      	b.n	801d2c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801d422:	2700      	movs	r7, #0
 801d424:	4638      	mov	r0, r7
 801d426:	e74c      	b.n	801d2c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801d428:	460f      	mov	r7, r1
 801d42a:	4608      	mov	r0, r1
 801d42c:	e749      	b.n	801d2c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801d430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d434:	b093      	sub	sp, #76	@ 0x4c
 801d436:	9210      	str	r2, [sp, #64]	@ 0x40
 801d438:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d43a:	910e      	str	r1, [sp, #56]	@ 0x38
 801d43c:	9306      	str	r3, [sp, #24]
 801d43e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801d442:	9011      	str	r0, [sp, #68]	@ 0x44
 801d444:	6850      	ldr	r0, [r2, #4]
 801d446:	6812      	ldr	r2, [r2, #0]
 801d448:	fb00 1303 	mla	r3, r0, r3, r1
 801d44c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d450:	9307      	str	r3, [sp, #28]
 801d452:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	9308      	str	r3, [sp, #32]
 801d458:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d45a:	685b      	ldr	r3, [r3, #4]
 801d45c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d45e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d460:	2b00      	cmp	r3, #0
 801d462:	dc03      	bgt.n	801d46c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d466:	2b00      	cmp	r3, #0
 801d468:	f340 83b4 	ble.w	801dbd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801d46c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d46e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d472:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d476:	1e48      	subs	r0, r1, #1
 801d478:	1e55      	subs	r5, r2, #1
 801d47a:	9b06      	ldr	r3, [sp, #24]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	f340 8163 	ble.w	801d748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801d482:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801d484:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d486:	1436      	asrs	r6, r6, #16
 801d488:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d48c:	d406      	bmi.n	801d49c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d48e:	4286      	cmp	r6, r0
 801d490:	da04      	bge.n	801d49c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d492:	2b00      	cmp	r3, #0
 801d494:	db02      	blt.n	801d49c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d496:	42ab      	cmp	r3, r5
 801d498:	f2c0 8157 	blt.w	801d74a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d49c:	3601      	adds	r6, #1
 801d49e:	f100 8144 	bmi.w	801d72a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801d4a2:	42b1      	cmp	r1, r6
 801d4a4:	f2c0 8141 	blt.w	801d72a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801d4a8:	3301      	adds	r3, #1
 801d4aa:	f100 813e 	bmi.w	801d72a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801d4ae:	429a      	cmp	r2, r3
 801d4b0:	f2c0 813b 	blt.w	801d72a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801d4b4:	9b06      	ldr	r3, [sp, #24]
 801d4b6:	9f07      	ldr	r7, [sp, #28]
 801d4b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d4ba:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801d4be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	f340 8164 	ble.w	801d78e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801d4c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4c8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d4ca:	1418      	asrs	r0, r3, #16
 801d4cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d4ce:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801d4d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d4d4:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801d4d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d4da:	142d      	asrs	r5, r5, #16
 801d4dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d4e0:	f100 81ee 	bmi.w	801d8c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d4e4:	f102 3eff 	add.w	lr, r2, #4294967295
 801d4e8:	4575      	cmp	r5, lr
 801d4ea:	f280 81e9 	bge.w	801d8c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d4ee:	2800      	cmp	r0, #0
 801d4f0:	f2c0 81e6 	blt.w	801d8c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d4f4:	f103 3eff 	add.w	lr, r3, #4294967295
 801d4f8:	4570      	cmp	r0, lr
 801d4fa:	f280 81e1 	bge.w	801d8c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d500:	b212      	sxth	r2, r2
 801d502:	fb00 5002 	mla	r0, r0, r2, r5
 801d506:	fa1f fe81 	uxth.w	lr, r1
 801d50a:	eb03 0a00 	add.w	sl, r3, r0
 801d50e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801d512:	f813 9000 	ldrb.w	r9, [r3, r0]
 801d516:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d51a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801d51e:	b29b      	uxth	r3, r3
 801d520:	f1bc 0f00 	cmp.w	ip, #0
 801d524:	f000 8179 	beq.w	801d81a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d528:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801d52c:	940a      	str	r4, [sp, #40]	@ 0x28
 801d52e:	eb0a 0b02 	add.w	fp, sl, r2
 801d532:	fa1f fa8c 	uxth.w	sl, ip
 801d536:	fb0a fe0e 	mul.w	lr, sl, lr
 801d53a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801d53e:	fa1f fa8a 	uxth.w	sl, sl
 801d542:	eba5 050e 	sub.w	r5, r5, lr
 801d546:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d54a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d54c:	eba3 030a 	sub.w	r3, r3, sl
 801d550:	b2ad      	uxth	r5, r5
 801d552:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d554:	b29b      	uxth	r3, r3
 801d556:	fb08 f505 	mul.w	r5, r8, r5
 801d55a:	fb09 5303 	mla	r3, r9, r3, r5
 801d55e:	fb0a 3304 	mla	r3, sl, r4, r3
 801d562:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d564:	fb0e 3304 	mla	r3, lr, r4, r3
 801d568:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	f000 80cf 	beq.w	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d572:	9c08      	ldr	r4, [sp, #32]
 801d574:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801d578:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801d57c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801d580:	f000 8150 	beq.w	801d824 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801d584:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801d588:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801d58c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d590:	fb09 f000 	mul.w	r0, r9, r0
 801d594:	fb0a fe0e 	mul.w	lr, sl, lr
 801d598:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801d59c:	f100 0b20 	add.w	fp, r0, #32
 801d5a0:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801d5a4:	44ce      	add	lr, r9
 801d5a6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801d5aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d5ae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801d5b2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d5b6:	ea4e 0909 	orr.w	r9, lr, r9
 801d5ba:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d5be:	8868      	ldrh	r0, [r5, #2]
 801d5c0:	d019      	beq.n	801d5f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801d5c2:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801d5c6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801d5ca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d5ce:	fb08 f800 	mul.w	r8, r8, r0
 801d5d2:	fb0a fe0e 	mul.w	lr, sl, lr
 801d5d6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801d5da:	f108 0b20 	add.w	fp, r8, #32
 801d5de:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801d5e2:	4486      	add	lr, r0
 801d5e4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801d5e8:	0a00      	lsrs	r0, r0, #8
 801d5ea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801d5ee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d5f2:	ea4e 0000 	orr.w	r0, lr, r0
 801d5f6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801d5fa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d5fe:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801d602:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801d606:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d60a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801d60e:	ea4e 0909 	orr.w	r9, lr, r9
 801d612:	ea4a 0000 	orr.w	r0, sl, r0
 801d616:	f1bc 0f00 	cmp.w	ip, #0
 801d61a:	f000 8105 	beq.w	801d828 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801d61e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801d622:	3a01      	subs	r2, #1
 801d624:	0052      	lsls	r2, r2, #1
 801d626:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d628:	3202      	adds	r2, #2
 801d62a:	2cff      	cmp	r4, #255	@ 0xff
 801d62c:	eb05 0e02 	add.w	lr, r5, r2
 801d630:	5aaa      	ldrh	r2, [r5, r2]
 801d632:	d018      	beq.n	801d666 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d634:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801d638:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d63c:	fb04 fa02 	mul.w	sl, r4, r2
 801d640:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d644:	fb08 f805 	mul.w	r8, r8, r5
 801d648:	f10a 0520 	add.w	r5, sl, #32
 801d64c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801d650:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801d654:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801d658:	4442      	add	r2, r8
 801d65a:	0a2d      	lsrs	r5, r5, #8
 801d65c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801d660:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d664:	432a      	orrs	r2, r5
 801d666:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d668:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801d66c:	2cff      	cmp	r4, #255	@ 0xff
 801d66e:	d01a      	beq.n	801d6a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d670:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801d674:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d678:	fb04 fa05 	mul.w	sl, r4, r5
 801d67c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801d680:	fb08 f80e 	mul.w	r8, r8, lr
 801d684:	f10a 0e20 	add.w	lr, sl, #32
 801d688:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801d68c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801d690:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801d694:	4445      	add	r5, r8
 801d696:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d69a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801d69e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801d6a2:	ea45 050e 	orr.w	r5, r5, lr
 801d6a6:	fb1c fe01 	smulbb	lr, ip, r1
 801d6aa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801d6ae:	f1cc 0810 	rsb	r8, ip, #16
 801d6b2:	eba8 0801 	sub.w	r8, r8, r1
 801d6b6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d6ba:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801d6be:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801d6c2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801d6c6:	4341      	muls	r1, r0
 801d6c8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801d6cc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801d6d0:	ea4a 0202 	orr.w	r2, sl, r2
 801d6d4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801d6d8:	fb09 1108 	mla	r1, r9, r8, r1
 801d6dc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801d6e0:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801d6e4:	fb0c 1102 	mla	r1, ip, r2, r1
 801d6e8:	ea4b 0505 	orr.w	r5, fp, r5
 801d6ec:	fb0e 1e05 	mla	lr, lr, r5, r1
 801d6f0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d6f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d6f8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d6fc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801d700:	ea42 0e0e 	orr.w	lr, r2, lr
 801d704:	fa1f f28e 	uxth.w	r2, lr
 801d708:	2bff      	cmp	r3, #255	@ 0xff
 801d70a:	f040 80a1 	bne.w	801d850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801d70e:	803a      	strh	r2, [r7, #0]
 801d710:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d712:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d714:	4413      	add	r3, r2
 801d716:	931d      	str	r3, [sp, #116]	@ 0x74
 801d718:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d71a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d71c:	441a      	add	r2, r3
 801d71e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d720:	921e      	str	r2, [sp, #120]	@ 0x78
 801d722:	3b01      	subs	r3, #1
 801d724:	3702      	adds	r7, #2
 801d726:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d728:	e6c9      	b.n	801d4be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d72a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d72c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d72e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 801d730:	4433      	add	r3, r6
 801d732:	931d      	str	r3, [sp, #116]	@ 0x74
 801d734:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d736:	441c      	add	r4, r3
 801d738:	9b06      	ldr	r3, [sp, #24]
 801d73a:	941e      	str	r4, [sp, #120]	@ 0x78
 801d73c:	3b01      	subs	r3, #1
 801d73e:	9306      	str	r3, [sp, #24]
 801d740:	9b07      	ldr	r3, [sp, #28]
 801d742:	3302      	adds	r3, #2
 801d744:	9307      	str	r3, [sp, #28]
 801d746:	e698      	b.n	801d47a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d748:	d028      	beq.n	801d79c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d74a:	9b06      	ldr	r3, [sp, #24]
 801d74c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d74e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d750:	3b01      	subs	r3, #1
 801d752:	fb00 5003 	mla	r0, r0, r3, r5
 801d756:	1400      	asrs	r0, r0, #16
 801d758:	f53f aeac 	bmi.w	801d4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d75c:	3901      	subs	r1, #1
 801d75e:	4288      	cmp	r0, r1
 801d760:	f6bf aea8 	bge.w	801d4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d764:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d766:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d768:	fb01 0303 	mla	r3, r1, r3, r0
 801d76c:	141b      	asrs	r3, r3, #16
 801d76e:	f53f aea1 	bmi.w	801d4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d772:	3a01      	subs	r2, #1
 801d774:	4293      	cmp	r3, r2
 801d776:	f6bf ae9d 	bge.w	801d4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d77a:	9b06      	ldr	r3, [sp, #24]
 801d77c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801d780:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d782:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801d786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d788:	2b00      	cmp	r3, #0
 801d78a:	f300 80b6 	bgt.w	801d8fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 801d78e:	9b06      	ldr	r3, [sp, #24]
 801d790:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d794:	9b07      	ldr	r3, [sp, #28]
 801d796:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d79a:	9307      	str	r3, [sp, #28]
 801d79c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	f340 8218 	ble.w	801dbd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801d7a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d7ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d7b0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d7b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7be:	eef0 6a62 	vmov.f32	s13, s5
 801d7c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d7ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7ce:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d7d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7d6:	eef0 6a43 	vmov.f32	s13, s6
 801d7da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7de:	ee12 2a90 	vmov	r2, s5
 801d7e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7ea:	ee13 2a10 	vmov	r2, s6
 801d7ee:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d7f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d7f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7f6:	9320      	str	r3, [sp, #128]	@ 0x80
 801d7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d7fc:	3b01      	subs	r3, #1
 801d7fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d802:	930e      	str	r3, [sp, #56]	@ 0x38
 801d804:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d806:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d80a:	bf08      	it	eq
 801d80c:	4613      	moveq	r3, r2
 801d80e:	9306      	str	r3, [sp, #24]
 801d810:	eeb0 3a67 	vmov.f32	s6, s15
 801d814:	eef0 2a47 	vmov.f32	s5, s14
 801d818:	e621      	b.n	801d45e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d81a:	fb08 f505 	mul.w	r5, r8, r5
 801d81e:	fb09 5303 	mla	r3, r9, r3, r5
 801d822:	e6a1      	b.n	801d568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d824:	4681      	mov	r9, r0
 801d826:	e6c8      	b.n	801d5ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d828:	f1c1 0210 	rsb	r2, r1, #16
 801d82c:	4341      	muls	r1, r0
 801d82e:	fb09 1902 	mla	r9, r9, r2, r1
 801d832:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d836:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801d83a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d83e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d842:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801d846:	ea42 0909 	orr.w	r9, r2, r9
 801d84a:	fa1f f289 	uxth.w	r2, r9
 801d84e:	e75b      	b.n	801d708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d850:	f8b7 c000 	ldrh.w	ip, [r7]
 801d854:	43db      	mvns	r3, r3
 801d856:	ea4f 202c 	mov.w	r0, ip, asr #8
 801d85a:	fa5f fe83 	uxtb.w	lr, r3
 801d85e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801d862:	fb00 f00e 	mul.w	r0, r0, lr
 801d866:	1c41      	adds	r1, r0, #1
 801d868:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801d86c:	1211      	asrs	r1, r2, #8
 801d86e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d872:	f021 0107 	bic.w	r1, r1, #7
 801d876:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d87a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801d87e:	48d7      	ldr	r0, [pc, #860]	@ (801dbdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801d880:	fb05 f50e 	mul.w	r5, r5, lr
 801d884:	b2c9      	uxtb	r1, r1
 801d886:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801d88a:	1c69      	adds	r1, r5, #1
 801d88c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d890:	10d1      	asrs	r1, r2, #3
 801d892:	f021 0103 	bic.w	r1, r1, #3
 801d896:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801d89a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d89e:	b2db      	uxtb	r3, r3
 801d8a0:	00c9      	lsls	r1, r1, #3
 801d8a2:	fb03 f30e 	mul.w	r3, r3, lr
 801d8a6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801d8aa:	4301      	orrs	r1, r0
 801d8ac:	1c58      	adds	r0, r3, #1
 801d8ae:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d8b2:	00d2      	lsls	r2, r2, #3
 801d8b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d8b8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d8bc:	430a      	orrs	r2, r1
 801d8be:	e726      	b.n	801d70e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 801d8c0:	f115 0e01 	adds.w	lr, r5, #1
 801d8c4:	f53f af24 	bmi.w	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d8c8:	4572      	cmp	r2, lr
 801d8ca:	f6ff af21 	blt.w	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d8ce:	f110 0e01 	adds.w	lr, r0, #1
 801d8d2:	f53f af1d 	bmi.w	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d8d6:	4573      	cmp	r3, lr
 801d8d8:	f6ff af1a 	blt.w	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d8dc:	b21b      	sxth	r3, r3
 801d8de:	b212      	sxth	r2, r2
 801d8e0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801d8e4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801d8e8:	9301      	str	r3, [sp, #4]
 801d8ea:	9200      	str	r2, [sp, #0]
 801d8ec:	4639      	mov	r1, r7
 801d8ee:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801d8f2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d8f4:	f7ff fc24 	bl	801d140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801d8f8:	e70a      	b.n	801d710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d8fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d8fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d900:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d902:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801d906:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d908:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d90c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d90e:	141f      	asrs	r7, r3, #16
 801d910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d912:	141b      	asrs	r3, r3, #16
 801d914:	fb01 3707 	mla	r7, r1, r7, r3
 801d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d91a:	fa1f fc82 	uxth.w	ip, r2
 801d91e:	eb03 0a07 	add.w	sl, r3, r7
 801d922:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801d926:	f813 9007 	ldrb.w	r9, [r3, r7]
 801d92a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801d92e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801d932:	b29b      	uxth	r3, r3
 801d934:	2d00      	cmp	r5, #0
 801d936:	f000 80fe 	beq.w	801db36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801d93a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801d93e:	940c      	str	r4, [sp, #48]	@ 0x30
 801d940:	eb0a 0b01 	add.w	fp, sl, r1
 801d944:	fa1f fa85 	uxth.w	sl, r5
 801d948:	fb0a fc0c 	mul.w	ip, sl, ip
 801d94c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801d950:	fa1f fa8a 	uxth.w	sl, sl
 801d954:	eba0 000c 	sub.w	r0, r0, ip
 801d958:	eba3 030a 	sub.w	r3, r3, sl
 801d95c:	b280      	uxth	r0, r0
 801d95e:	fb08 f000 	mul.w	r0, r8, r0
 801d962:	b29b      	uxth	r3, r3
 801d964:	fb09 0303 	mla	r3, r9, r3, r0
 801d968:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d96a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d96e:	940d      	str	r4, [sp, #52]	@ 0x34
 801d970:	fb0a 3300 	mla	r3, sl, r0, r3
 801d974:	fb0c 3304 	mla	r3, ip, r4, r3
 801d978:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	f000 80cc 	beq.w	801db1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801d982:	9808      	ldr	r0, [sp, #32]
 801d984:	9c08      	ldr	r4, [sp, #32]
 801d986:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801d98a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801d98e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801d992:	f000 80d5 	beq.w	801db40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801d996:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801d99a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801d99e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801d9a2:	fb09 f707 	mul.w	r7, r9, r7
 801d9a6:	fb0a fc0c 	mul.w	ip, sl, ip
 801d9aa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801d9ae:	f107 0b20 	add.w	fp, r7, #32
 801d9b2:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801d9b6:	44cc      	add	ip, r9
 801d9b8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801d9bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d9c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801d9c4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d9c8:	ea4c 0909 	orr.w	r9, ip, r9
 801d9cc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d9d0:	8847      	ldrh	r7, [r0, #2]
 801d9d2:	d019      	beq.n	801da08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 801d9d4:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801d9d8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801d9dc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801d9e0:	fb08 f807 	mul.w	r8, r8, r7
 801d9e4:	fb0a fc0c 	mul.w	ip, sl, ip
 801d9e8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801d9ec:	f108 0b20 	add.w	fp, r8, #32
 801d9f0:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801d9f4:	44bc      	add	ip, r7
 801d9f6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801d9fa:	0a3f      	lsrs	r7, r7, #8
 801d9fc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801da00:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801da04:	ea4c 0707 	orr.w	r7, ip, r7
 801da08:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801da0c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801da10:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801da14:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801da18:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801da1c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801da20:	ea4c 0909 	orr.w	r9, ip, r9
 801da24:	ea4a 0707 	orr.w	r7, sl, r7
 801da28:	2d00      	cmp	r5, #0
 801da2a:	f000 808b 	beq.w	801db44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801da2e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801da32:	3901      	subs	r1, #1
 801da34:	0049      	lsls	r1, r1, #1
 801da36:	3102      	adds	r1, #2
 801da38:	eb00 0c01 	add.w	ip, r0, r1
 801da3c:	5a41      	ldrh	r1, [r0, r1]
 801da3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801da40:	28ff      	cmp	r0, #255	@ 0xff
 801da42:	d019      	beq.n	801da78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 801da44:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801da46:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 801da4a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801da4e:	fb04 fa01 	mul.w	sl, r4, r1
 801da52:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801da56:	fb08 f800 	mul.w	r8, r8, r0
 801da5a:	f10a 0020 	add.w	r0, sl, #32
 801da5e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801da62:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801da66:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801da6a:	4441      	add	r1, r8
 801da6c:	0a00      	lsrs	r0, r0, #8
 801da6e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801da72:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801da76:	4301      	orrs	r1, r0
 801da78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801da7a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801da7e:	2cff      	cmp	r4, #255	@ 0xff
 801da80:	d01a      	beq.n	801dab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801da82:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 801da86:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801da8a:	fb04 fa00 	mul.w	sl, r4, r0
 801da8e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801da92:	fb08 f80c 	mul.w	r8, r8, ip
 801da96:	f10a 0c20 	add.w	ip, sl, #32
 801da9a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801da9e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801daa2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801daa6:	4440      	add	r0, r8
 801daa8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801daac:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801dab0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801dab4:	ea40 000c 	orr.w	r0, r0, ip
 801dab8:	fb15 fc02 	smulbb	ip, r5, r2
 801dabc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801dac0:	f1c5 0810 	rsb	r8, r5, #16
 801dac4:	eba8 0802 	sub.w	r8, r8, r2
 801dac8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801dacc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801dad0:	437a      	muls	r2, r7
 801dad2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801dad6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801dada:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801dade:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801dae2:	fb09 2208 	mla	r2, r9, r8, r2
 801dae6:	ea4a 0101 	orr.w	r1, sl, r1
 801daea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801daee:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801daf2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801daf6:	fb05 2201 	mla	r2, r5, r1, r2
 801dafa:	ea4b 0000 	orr.w	r0, fp, r0
 801dafe:	fb0c 2200 	mla	r2, ip, r0, r2
 801db02:	0d57      	lsrs	r7, r2, #21
 801db04:	0952      	lsrs	r2, r2, #5
 801db06:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801db0a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801db0e:	433a      	orrs	r2, r7
 801db10:	2bff      	cmp	r3, #255	@ 0xff
 801db12:	b292      	uxth	r2, r2
 801db14:	d127      	bne.n	801db66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801db16:	f8ae 2000 	strh.w	r2, [lr]
 801db1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db1c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801db1e:	4413      	add	r3, r2
 801db20:	931d      	str	r3, [sp, #116]	@ 0x74
 801db22:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801db24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801db26:	441a      	add	r2, r3
 801db28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db2a:	921e      	str	r2, [sp, #120]	@ 0x78
 801db2c:	3b01      	subs	r3, #1
 801db2e:	f10e 0e02 	add.w	lr, lr, #2
 801db32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db34:	e627      	b.n	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801db36:	fb08 f000 	mul.w	r0, r8, r0
 801db3a:	fb09 0303 	mla	r3, r9, r3, r0
 801db3e:	e71b      	b.n	801d978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 801db40:	46b9      	mov	r9, r7
 801db42:	e743      	b.n	801d9cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 801db44:	f1c2 0110 	rsb	r1, r2, #16
 801db48:	437a      	muls	r2, r7
 801db4a:	fb09 2901 	mla	r9, r9, r1, r2
 801db4e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801db52:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801db56:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801db5a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801db5e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801db62:	4302      	orrs	r2, r0
 801db64:	e7d4      	b.n	801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801db66:	f8be 7000 	ldrh.w	r7, [lr]
 801db6a:	4c1c      	ldr	r4, [pc, #112]	@ (801dbdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801db6c:	43db      	mvns	r3, r3
 801db6e:	1238      	asrs	r0, r7, #8
 801db70:	fa5f fc83 	uxtb.w	ip, r3
 801db74:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801db78:	10fd      	asrs	r5, r7, #3
 801db7a:	fb00 f00c 	mul.w	r0, r0, ip
 801db7e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801db82:	fb05 f10c 	mul.w	r1, r5, ip
 801db86:	1c45      	adds	r5, r0, #1
 801db88:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801db8c:	1215      	asrs	r5, r2, #8
 801db8e:	f025 0507 	bic.w	r5, r5, #7
 801db92:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801db96:	1c4d      	adds	r5, r1, #1
 801db98:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801db9c:	10d1      	asrs	r1, r2, #3
 801db9e:	f021 0103 	bic.w	r1, r1, #3
 801dba2:	00fb      	lsls	r3, r7, #3
 801dba4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801dba8:	b2db      	uxtb	r3, r3
 801dbaa:	b2c0      	uxtb	r0, r0
 801dbac:	00c9      	lsls	r1, r1, #3
 801dbae:	fb03 f30c 	mul.w	r3, r3, ip
 801dbb2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801dbb6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801dbba:	4308      	orrs	r0, r1
 801dbbc:	1c59      	adds	r1, r3, #1
 801dbbe:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801dbc2:	00d2      	lsls	r2, r2, #3
 801dbc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dbc8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dbcc:	4318      	orrs	r0, r3
 801dbce:	f8ae 0000 	strh.w	r0, [lr]
 801dbd2:	e7a2      	b.n	801db1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801dbd4:	b013      	add	sp, #76	@ 0x4c
 801dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbda:	bf00      	nop
 801dbdc:	fffff800 	.word	0xfffff800

0801dbe0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801dbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbe4:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 801dbe8:	fb05 4c03 	mla	ip, r5, r3, r4
 801dbec:	2d00      	cmp	r5, #0
 801dbee:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801dbf2:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801dbf6:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 801dbfa:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801dbfe:	8808      	ldrh	r0, [r1, #0]
 801dc00:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801dc04:	f2c0 80a7 	blt.w	801dd56 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801dc08:	45aa      	cmp	sl, r5
 801dc0a:	f340 80a4 	ble.w	801dd56 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801dc0e:	2c00      	cmp	r4, #0
 801dc10:	f2c0 809f 	blt.w	801dd52 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801dc14:	42a3      	cmp	r3, r4
 801dc16:	f340 809c 	ble.w	801dd52 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801dc1a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801dc1e:	1c62      	adds	r2, r4, #1
 801dc20:	f100 809c 	bmi.w	801dd5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801dc24:	4293      	cmp	r3, r2
 801dc26:	f340 8099 	ble.w	801dd5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801dc2a:	f1b9 0f00 	cmp.w	r9, #0
 801dc2e:	f000 8095 	beq.w	801dd5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801dc32:	f8be c002 	ldrh.w	ip, [lr, #2]
 801dc36:	3501      	adds	r5, #1
 801dc38:	f100 8094 	bmi.w	801dd64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801dc3c:	45aa      	cmp	sl, r5
 801dc3e:	f340 8091 	ble.w	801dd64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801dc42:	2f00      	cmp	r7, #0
 801dc44:	f000 808e 	beq.w	801dd64 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801dc48:	2c00      	cmp	r4, #0
 801dc4a:	f2c0 8089 	blt.w	801dd60 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801dc4e:	42a3      	cmp	r3, r4
 801dc50:	f340 8086 	ble.w	801dd60 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801dc54:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801dc58:	3401      	adds	r4, #1
 801dc5a:	f100 8086 	bmi.w	801dd6a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801dc5e:	42a3      	cmp	r3, r4
 801dc60:	f340 8083 	ble.w	801dd6a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801dc64:	f1b9 0f00 	cmp.w	r9, #0
 801dc68:	d07f      	beq.n	801dd6a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801dc70:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801dc74:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801dc78:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801dc7c:	fb19 fe07 	smulbb	lr, r9, r7
 801dc80:	ea44 0808 	orr.w	r8, r4, r8
 801dc84:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801dc88:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801dc8c:	f1c7 0210 	rsb	r2, r7, #16
 801dc90:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801dc94:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801dc98:	ea44 0c0c 	orr.w	ip, r4, ip
 801dc9c:	eba2 0209 	sub.w	r2, r2, r9
 801dca0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801dca4:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801dca8:	fb04 f40c 	mul.w	r4, r4, ip
 801dcac:	fb02 4808 	mla	r8, r2, r8, r4
 801dcb0:	041a      	lsls	r2, r3, #16
 801dcb2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801dcb6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801dcba:	4313      	orrs	r3, r2
 801dcbc:	042a      	lsls	r2, r5, #16
 801dcbe:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801dcc2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801dcc6:	fb0e 8303 	mla	r3, lr, r3, r8
 801dcca:	432a      	orrs	r2, r5
 801dccc:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801dcd0:	fb07 3202 	mla	r2, r7, r2, r3
 801dcd4:	0d53      	lsrs	r3, r2, #21
 801dcd6:	0952      	lsrs	r2, r2, #5
 801dcd8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801dcdc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801dce0:	431a      	orrs	r2, r3
 801dce2:	b293      	uxth	r3, r2
 801dce4:	b2b4      	uxth	r4, r6
 801dce6:	1202      	asrs	r2, r0, #8
 801dce8:	43f6      	mvns	r6, r6
 801dcea:	b2f6      	uxtb	r6, r6
 801dcec:	121d      	asrs	r5, r3, #8
 801dcee:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801dcf2:	fb12 f206 	smulbb	r2, r2, r6
 801dcf6:	10c7      	asrs	r7, r0, #3
 801dcf8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801dcfc:	00c0      	lsls	r0, r0, #3
 801dcfe:	fb05 2504 	mla	r5, r5, r4, r2
 801dd02:	b2c0      	uxtb	r0, r0
 801dd04:	10da      	asrs	r2, r3, #3
 801dd06:	00db      	lsls	r3, r3, #3
 801dd08:	b2db      	uxtb	r3, r3
 801dd0a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dd0e:	fb10 f006 	smulbb	r0, r0, r6
 801dd12:	b2ad      	uxth	r5, r5
 801dd14:	fb03 0004 	mla	r0, r3, r4, r0
 801dd18:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801dd1c:	fb17 f706 	smulbb	r7, r7, r6
 801dd20:	b280      	uxth	r0, r0
 801dd22:	1c6b      	adds	r3, r5, #1
 801dd24:	fb02 7204 	mla	r2, r2, r4, r7
 801dd28:	b292      	uxth	r2, r2
 801dd2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801dd2e:	1c43      	adds	r3, r0, #1
 801dd30:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dd34:	1c50      	adds	r0, r2, #1
 801dd36:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dd3a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801dd3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dd42:	0952      	lsrs	r2, r2, #5
 801dd44:	432b      	orrs	r3, r5
 801dd46:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801dd4a:	4313      	orrs	r3, r2
 801dd4c:	800b      	strh	r3, [r1, #0]
 801dd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd52:	4680      	mov	r8, r0
 801dd54:	e763      	b.n	801dc1e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801dd56:	4684      	mov	ip, r0
 801dd58:	4680      	mov	r8, r0
 801dd5a:	e76c      	b.n	801dc36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801dd5c:	4684      	mov	ip, r0
 801dd5e:	e76a      	b.n	801dc36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801dd60:	4605      	mov	r5, r0
 801dd62:	e779      	b.n	801dc58 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801dd64:	4603      	mov	r3, r0
 801dd66:	4605      	mov	r5, r0
 801dd68:	e782      	b.n	801dc70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	e780      	b.n	801dc70 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801dd6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd72:	b093      	sub	sp, #76	@ 0x4c
 801dd74:	461d      	mov	r5, r3
 801dd76:	9210      	str	r2, [sp, #64]	@ 0x40
 801dd78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801dd7a:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801dd7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dd80:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 801dd84:	910a      	str	r1, [sp, #40]	@ 0x28
 801dd86:	6859      	ldr	r1, [r3, #4]
 801dd88:	681b      	ldr	r3, [r3, #0]
 801dd8a:	9011      	str	r0, [sp, #68]	@ 0x44
 801dd8c:	fb01 2707 	mla	r7, r1, r7, r2
 801dd90:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801dd94:	9307      	str	r3, [sp, #28]
 801dd96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd9e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801dda2:	43db      	mvns	r3, r3
 801dda4:	b2db      	uxtb	r3, r3
 801dda6:	9308      	str	r3, [sp, #32]
 801dda8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	dc03      	bgt.n	801ddb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ddae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	f340 8203 	ble.w	801e1bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ddb6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ddb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ddbc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ddc0:	1e48      	subs	r0, r1, #1
 801ddc2:	f102 3cff 	add.w	ip, r2, #4294967295
 801ddc6:	2d00      	cmp	r5, #0
 801ddc8:	f340 80da 	ble.w	801df80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ddcc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ddd0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ddd4:	d406      	bmi.n	801dde4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ddd6:	4586      	cmp	lr, r0
 801ddd8:	da04      	bge.n	801dde4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	db02      	blt.n	801dde4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ddde:	4563      	cmp	r3, ip
 801dde0:	f2c0 80cf 	blt.w	801df82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dde4:	f11e 0e01 	adds.w	lr, lr, #1
 801dde8:	f100 80c1 	bmi.w	801df6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ddec:	4571      	cmp	r1, lr
 801ddee:	f2c0 80be 	blt.w	801df6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ddf2:	3301      	adds	r3, #1
 801ddf4:	f100 80bb 	bmi.w	801df6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ddf8:	429a      	cmp	r2, r3
 801ddfa:	f2c0 80b8 	blt.w	801df6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ddfe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801de02:	46a9      	mov	r9, r5
 801de04:	f1b9 0f00 	cmp.w	r9, #0
 801de08:	f340 80d8 	ble.w	801dfbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801de0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de0e:	1421      	asrs	r1, r4, #16
 801de10:	ea4f 4026 	mov.w	r0, r6, asr #16
 801de14:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801de18:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801de1c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801de20:	f100 8111 	bmi.w	801e046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de24:	f10e 3aff 	add.w	sl, lr, #4294967295
 801de28:	4551      	cmp	r1, sl
 801de2a:	f280 810c 	bge.w	801e046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de2e:	2800      	cmp	r0, #0
 801de30:	f2c0 8109 	blt.w	801e046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de34:	f103 3aff 	add.w	sl, r3, #4294967295
 801de38:	4550      	cmp	r0, sl
 801de3a:	f280 8104 	bge.w	801e046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801de3e:	fa0f f38e 	sxth.w	r3, lr
 801de42:	fb00 1103 	mla	r1, r0, r3, r1
 801de46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de48:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801de4c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801de50:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801de54:	f1bc 0f00 	cmp.w	ip, #0
 801de58:	d007      	beq.n	801de6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801de5a:	005b      	lsls	r3, r3, #1
 801de5c:	eb0a 0003 	add.w	r0, sl, r3
 801de60:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801de64:	930c      	str	r3, [sp, #48]	@ 0x30
 801de66:	8843      	ldrh	r3, [r0, #2]
 801de68:	930d      	str	r3, [sp, #52]	@ 0x34
 801de6a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801de6e:	fb12 f30c 	smulbb	r3, r2, ip
 801de72:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801de76:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801de7a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801de7e:	10db      	asrs	r3, r3, #3
 801de80:	ea40 000e 	orr.w	r0, r0, lr
 801de84:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801de88:	f1cc 0e10 	rsb	lr, ip, #16
 801de8c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801de90:	ebae 0e02 	sub.w	lr, lr, r2
 801de94:	ea4a 0101 	orr.w	r1, sl, r1
 801de98:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801de9c:	4351      	muls	r1, r2
 801de9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dea0:	9f08      	ldr	r7, [sp, #32]
 801dea2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801dea6:	fb0e 1e00 	mla	lr, lr, r0, r1
 801deaa:	0410      	lsls	r0, r2, #16
 801deac:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801deb0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801deb4:	4310      	orrs	r0, r2
 801deb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801deb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801deba:	0412      	lsls	r2, r2, #16
 801debc:	fb03 e000 	mla	r0, r3, r0, lr
 801dec0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801dec4:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 801dec8:	ea42 020e 	orr.w	r2, r2, lr
 801decc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ded0:	fb03 0302 	mla	r3, r3, r2, r0
 801ded4:	0d5a      	lsrs	r2, r3, #21
 801ded6:	095b      	lsrs	r3, r3, #5
 801ded8:	f8b8 0000 	ldrh.w	r0, [r8]
 801dedc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801dee0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801dee4:	4313      	orrs	r3, r2
 801dee6:	b29b      	uxth	r3, r3
 801dee8:	1201      	asrs	r1, r0, #8
 801deea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801deee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801def2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801def6:	fb11 f107 	smulbb	r1, r1, r7
 801defa:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801defe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801df02:	00c0      	lsls	r0, r0, #3
 801df04:	fb0c 1c02 	mla	ip, ip, r2, r1
 801df08:	b2c0      	uxtb	r0, r0
 801df0a:	10d9      	asrs	r1, r3, #3
 801df0c:	00db      	lsls	r3, r3, #3
 801df0e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801df12:	b2db      	uxtb	r3, r3
 801df14:	fb10 f007 	smulbb	r0, r0, r7
 801df18:	fa1f fc8c 	uxth.w	ip, ip
 801df1c:	fb03 0302 	mla	r3, r3, r2, r0
 801df20:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801df24:	fb1e fe07 	smulbb	lr, lr, r7
 801df28:	fb01 e102 	mla	r1, r1, r2, lr
 801df2c:	b29a      	uxth	r2, r3
 801df2e:	f10c 0301 	add.w	r3, ip, #1
 801df32:	b289      	uxth	r1, r1
 801df34:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801df38:	1c53      	adds	r3, r2, #1
 801df3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801df3e:	1c4a      	adds	r2, r1, #1
 801df40:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801df44:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801df48:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801df4c:	0949      	lsrs	r1, r1, #5
 801df4e:	ea43 030c 	orr.w	r3, r3, ip
 801df52:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801df56:	430b      	orrs	r3, r1
 801df58:	f8a8 3000 	strh.w	r3, [r8]
 801df5c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df5e:	441c      	add	r4, r3
 801df60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801df62:	f108 0802 	add.w	r8, r8, #2
 801df66:	441e      	add	r6, r3
 801df68:	f109 39ff 	add.w	r9, r9, #4294967295
 801df6c:	e74a      	b.n	801de04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df6e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df70:	441c      	add	r4, r3
 801df72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801df74:	441e      	add	r6, r3
 801df76:	9b07      	ldr	r3, [sp, #28]
 801df78:	3302      	adds	r3, #2
 801df7a:	3d01      	subs	r5, #1
 801df7c:	9307      	str	r3, [sp, #28]
 801df7e:	e722      	b.n	801ddc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801df80:	d022      	beq.n	801dfc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801df82:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801df84:	1e6b      	subs	r3, r5, #1
 801df86:	fb00 4003 	mla	r0, r0, r3, r4
 801df8a:	1400      	asrs	r0, r0, #16
 801df8c:	f53f af37 	bmi.w	801ddfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801df90:	3901      	subs	r1, #1
 801df92:	4288      	cmp	r0, r1
 801df94:	f6bf af33 	bge.w	801ddfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801df98:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801df9a:	fb01 6303 	mla	r3, r1, r3, r6
 801df9e:	141b      	asrs	r3, r3, #16
 801dfa0:	f53f af2d 	bmi.w	801ddfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfa4:	3a01      	subs	r2, #1
 801dfa6:	4293      	cmp	r3, r2
 801dfa8:	f6bf af29 	bge.w	801ddfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dfac:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801dfb0:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 801dfb4:	46a8      	mov	r8, r5
 801dfb6:	f1b8 0f00 	cmp.w	r8, #0
 801dfba:	dc5e      	bgt.n	801e07a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801dfbc:	9b07      	ldr	r3, [sp, #28]
 801dfbe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801dfc2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801dfc6:	9307      	str	r3, [sp, #28]
 801dfc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	f340 80f6 	ble.w	801e1bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801dfd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dfd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dfdc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dfde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfe2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfe6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfea:	eef0 6a62 	vmov.f32	s13, s5
 801dfee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dff2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dff6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dffa:	ee16 4a90 	vmov	r4, s13
 801dffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e002:	eef0 6a43 	vmov.f32	s13, s6
 801e006:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e00a:	ee12 2a90 	vmov	r2, s5
 801e00e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e012:	fb92 f3f3 	sdiv	r3, r2, r3
 801e016:	ee13 2a10 	vmov	r2, s6
 801e01a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e01c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e01e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e022:	9320      	str	r3, [sp, #128]	@ 0x80
 801e024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e026:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e028:	3b01      	subs	r3, #1
 801e02a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e02e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e030:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e032:	ee16 6a90 	vmov	r6, s13
 801e036:	bf14      	ite	ne
 801e038:	461d      	movne	r5, r3
 801e03a:	4615      	moveq	r5, r2
 801e03c:	eeb0 3a67 	vmov.f32	s6, s15
 801e040:	eef0 2a47 	vmov.f32	s5, s14
 801e044:	e6b0      	b.n	801dda8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e046:	f111 0a01 	adds.w	sl, r1, #1
 801e04a:	d487      	bmi.n	801df5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e04c:	45d6      	cmp	lr, sl
 801e04e:	db85      	blt.n	801df5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e050:	f110 0a01 	adds.w	sl, r0, #1
 801e054:	d482      	bmi.n	801df5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e056:	4553      	cmp	r3, sl
 801e058:	db80      	blt.n	801df5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e05a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e05c:	9101      	str	r1, [sp, #4]
 801e05e:	b21b      	sxth	r3, r3
 801e060:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801e064:	9300      	str	r3, [sp, #0]
 801e066:	e9cd c704 	strd	ip, r7, [sp, #16]
 801e06a:	fa0f f38e 	sxth.w	r3, lr
 801e06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e070:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e072:	4641      	mov	r1, r8
 801e074:	f7ff fdb4 	bl	801dbe0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801e078:	e770      	b.n	801df5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e07a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e07c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e07e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e082:	1430      	asrs	r0, r6, #16
 801e084:	1423      	asrs	r3, r4, #16
 801e086:	fb01 3000 	mla	r0, r1, r0, r3
 801e08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e08c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801e090:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801e094:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801e098:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e09c:	8858      	ldrh	r0, [r3, #2]
 801e09e:	f1be 0f00 	cmp.w	lr, #0
 801e0a2:	d00b      	beq.n	801e0bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801e0a4:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801e0a8:	3901      	subs	r1, #1
 801e0aa:	0049      	lsls	r1, r1, #1
 801e0ac:	3102      	adds	r1, #2
 801e0ae:	eb03 0b01 	add.w	fp, r3, r1
 801e0b2:	5a5b      	ldrh	r3, [r3, r1]
 801e0b4:	930e      	str	r3, [sp, #56]	@ 0x38
 801e0b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801e0ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e0bc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801e0c0:	fb12 f30e 	smulbb	r3, r2, lr
 801e0c4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801e0c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801e0cc:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 801e0d0:	10db      	asrs	r3, r3, #3
 801e0d2:	ea41 010c 	orr.w	r1, r1, ip
 801e0d6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e0da:	f1ce 0c10 	rsb	ip, lr, #16
 801e0de:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e0e2:	ebac 0c02 	sub.w	ip, ip, r2
 801e0e6:	ea4b 0000 	orr.w	r0, fp, r0
 801e0ea:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e0ee:	4350      	muls	r0, r2
 801e0f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e0f2:	9f08      	ldr	r7, [sp, #32]
 801e0f4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801e0f8:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e0fc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801e100:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 801e104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e106:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e108:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e10c:	0412      	lsls	r2, r2, #16
 801e10e:	ea4b 0101 	orr.w	r1, fp, r1
 801e112:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e116:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801e11a:	fb03 c101 	mla	r1, r3, r1, ip
 801e11e:	4302      	orrs	r2, r0
 801e120:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801e124:	fb03 1202 	mla	r2, r3, r2, r1
 801e128:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801e12c:	0952      	lsrs	r2, r2, #5
 801e12e:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 801e132:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801e136:	f8b9 2000 	ldrh.w	r2, [r9]
 801e13a:	ea4b 0303 	orr.w	r3, fp, r3
 801e13e:	b29b      	uxth	r3, r3
 801e140:	1211      	asrs	r1, r2, #8
 801e142:	1218      	asrs	r0, r3, #8
 801e144:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801e148:	fb11 f107 	smulbb	r1, r1, r7
 801e14c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801e150:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e154:	00d2      	lsls	r2, r2, #3
 801e156:	fb00 100a 	mla	r0, r0, sl, r1
 801e15a:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e15e:	10d9      	asrs	r1, r3, #3
 801e160:	b2d2      	uxtb	r2, r2
 801e162:	00db      	lsls	r3, r3, #3
 801e164:	fb1c fc07 	smulbb	ip, ip, r7
 801e168:	fb12 f207 	smulbb	r2, r2, r7
 801e16c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e170:	b2db      	uxtb	r3, r3
 801e172:	b280      	uxth	r0, r0
 801e174:	fb01 c10a 	mla	r1, r1, sl, ip
 801e178:	fb03 230a 	mla	r3, r3, sl, r2
 801e17c:	b29b      	uxth	r3, r3
 801e17e:	b289      	uxth	r1, r1
 801e180:	1c42      	adds	r2, r0, #1
 801e182:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e186:	f101 0c01 	add.w	ip, r1, #1
 801e18a:	1c5a      	adds	r2, r3, #1
 801e18c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e190:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e194:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e196:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801e19a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e19e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e1a2:	4310      	orrs	r0, r2
 801e1a4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e1a8:	441c      	add	r4, r3
 801e1aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e1ac:	ea40 000c 	orr.w	r0, r0, ip
 801e1b0:	f829 0b02 	strh.w	r0, [r9], #2
 801e1b4:	441e      	add	r6, r3
 801e1b6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e1ba:	e6fc      	b.n	801dfb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e1bc:	b013      	add	sp, #76	@ 0x4c
 801e1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801e1c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1c6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801e1ca:	fb0e 4703 	mla	r7, lr, r3, r4
 801e1ce:	f1be 0f00 	cmp.w	lr, #0
 801e1d2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801e1d6:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801e1da:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 801e1de:	8808      	ldrh	r0, [r1, #0]
 801e1e0:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801e1e4:	db60      	blt.n	801e2a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801e1e6:	45f1      	cmp	r9, lr
 801e1e8:	dd5e      	ble.n	801e2a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801e1ea:	2c00      	cmp	r4, #0
 801e1ec:	db5a      	blt.n	801e2a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801e1ee:	42a3      	cmp	r3, r4
 801e1f0:	dd58      	ble.n	801e2a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801e1f2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801e1f6:	1c62      	adds	r2, r4, #1
 801e1f8:	d459      	bmi.n	801e2ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	dd57      	ble.n	801e2ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e1fe:	2d00      	cmp	r5, #0
 801e200:	d055      	beq.n	801e2ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801e202:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801e206:	f11e 0e01 	adds.w	lr, lr, #1
 801e20a:	d454      	bmi.n	801e2b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e20c:	45f1      	cmp	r9, lr
 801e20e:	dd52      	ble.n	801e2b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e210:	2e00      	cmp	r6, #0
 801e212:	d050      	beq.n	801e2b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801e214:	2c00      	cmp	r4, #0
 801e216:	db4c      	blt.n	801e2b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801e218:	42a3      	cmp	r3, r4
 801e21a:	dd4a      	ble.n	801e2b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801e21c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801e220:	3401      	adds	r4, #1
 801e222:	d405      	bmi.n	801e230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e224:	42a3      	cmp	r3, r4
 801e226:	dd03      	ble.n	801e230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e228:	b115      	cbz	r5, 801e230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801e22a:	3301      	adds	r3, #1
 801e22c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801e230:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801e234:	fb15 f406 	smulbb	r4, r5, r6
 801e238:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e23c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801e240:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801e244:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801e248:	ea43 0c0c 	orr.w	ip, r3, ip
 801e24c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801e250:	f1c6 0310 	rsb	r3, r6, #16
 801e254:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801e258:	1b5b      	subs	r3, r3, r5
 801e25a:	ea4e 0707 	orr.w	r7, lr, r7
 801e25e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801e262:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e266:	437d      	muls	r5, r7
 801e268:	fb03 5c0c 	mla	ip, r3, ip, r5
 801e26c:	0403      	lsls	r3, r0, #16
 801e26e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e272:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e276:	4318      	orrs	r0, r3
 801e278:	0413      	lsls	r3, r2, #16
 801e27a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801e27e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e282:	4313      	orrs	r3, r2
 801e284:	fb04 c000 	mla	r0, r4, r0, ip
 801e288:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801e28c:	fb06 0003 	mla	r0, r6, r3, r0
 801e290:	0d43      	lsrs	r3, r0, #21
 801e292:	0940      	lsrs	r0, r0, #5
 801e294:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e298:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e29c:	4318      	orrs	r0, r3
 801e29e:	8008      	strh	r0, [r1, #0]
 801e2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2a4:	4684      	mov	ip, r0
 801e2a6:	e7a6      	b.n	801e1f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801e2a8:	4607      	mov	r7, r0
 801e2aa:	4684      	mov	ip, r0
 801e2ac:	e7ab      	b.n	801e206 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801e2ae:	4607      	mov	r7, r0
 801e2b0:	e7a9      	b.n	801e206 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801e2b2:	4602      	mov	r2, r0
 801e2b4:	e7b4      	b.n	801e220 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801e2b6:	4602      	mov	r2, r0
 801e2b8:	e7ba      	b.n	801e230 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801e2ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2be:	b08f      	sub	sp, #60	@ 0x3c
 801e2c0:	461d      	mov	r5, r3
 801e2c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e2c4:	920c      	str	r2, [sp, #48]	@ 0x30
 801e2c6:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 801e2ca:	9107      	str	r1, [sp, #28]
 801e2cc:	6859      	ldr	r1, [r3, #4]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	900d      	str	r0, [sp, #52]	@ 0x34
 801e2d2:	fb01 2707 	mla	r7, r1, r7, r2
 801e2d6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801e2da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e2dc:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 801e2e0:	f8d3 8000 	ldr.w	r8, [r3]
 801e2e4:	9b07      	ldr	r3, [sp, #28]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	dc03      	bgt.n	801e2f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e2ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	f340 8181 	ble.w	801e5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e2f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e2f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e2f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e2fc:	1e48      	subs	r0, r1, #1
 801e2fe:	f102 3cff 	add.w	ip, r2, #4294967295
 801e302:	2d00      	cmp	r5, #0
 801e304:	f340 809b 	ble.w	801e43e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e308:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e30c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e310:	d406      	bmi.n	801e320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e312:	4586      	cmp	lr, r0
 801e314:	da04      	bge.n	801e320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e316:	2b00      	cmp	r3, #0
 801e318:	db02      	blt.n	801e320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e31a:	4563      	cmp	r3, ip
 801e31c:	f2c0 8090 	blt.w	801e440 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e320:	f11e 0e01 	adds.w	lr, lr, #1
 801e324:	f100 8084 	bmi.w	801e430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e328:	4571      	cmp	r1, lr
 801e32a:	f2c0 8081 	blt.w	801e430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e32e:	3301      	adds	r3, #1
 801e330:	d47e      	bmi.n	801e430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e332:	429a      	cmp	r2, r3
 801e334:	db7c      	blt.n	801e430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e336:	46aa      	mov	sl, r5
 801e338:	46b9      	mov	r9, r7
 801e33a:	f1ba 0f00 	cmp.w	sl, #0
 801e33e:	f340 8099 	ble.w	801e474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e344:	1421      	asrs	r1, r4, #16
 801e346:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e34a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e34e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e352:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e356:	f100 80d0 	bmi.w	801e4fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e35a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e35e:	4559      	cmp	r1, fp
 801e360:	f280 80cb 	bge.w	801e4fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e364:	2800      	cmp	r0, #0
 801e366:	f2c0 80c8 	blt.w	801e4fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e36a:	f103 3bff 	add.w	fp, r3, #4294967295
 801e36e:	4558      	cmp	r0, fp
 801e370:	f280 80c3 	bge.w	801e4fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e374:	fa0f fe8e 	sxth.w	lr, lr
 801e378:	fb00 110e 	mla	r1, r0, lr, r1
 801e37c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801e380:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801e384:	8841      	ldrh	r1, [r0, #2]
 801e386:	f1bc 0f00 	cmp.w	ip, #0
 801e38a:	d00b      	beq.n	801e3a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e38c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 801e390:	3b01      	subs	r3, #1
 801e392:	005b      	lsls	r3, r3, #1
 801e394:	3302      	adds	r3, #2
 801e396:	eb00 0e03 	add.w	lr, r0, r3
 801e39a:	5ac3      	ldrh	r3, [r0, r3]
 801e39c:	9308      	str	r3, [sp, #32]
 801e39e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801e3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3a4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801e3a8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801e3ac:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801e3b0:	ea40 000b 	orr.w	r0, r0, fp
 801e3b4:	fb12 f30c 	smulbb	r3, r2, ip
 801e3b8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e3bc:	10db      	asrs	r3, r3, #3
 801e3be:	f1cc 0e10 	rsb	lr, ip, #16
 801e3c2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e3c6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801e3ca:	ebae 0e02 	sub.w	lr, lr, r2
 801e3ce:	ea4b 0101 	orr.w	r1, fp, r1
 801e3d2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e3d6:	4351      	muls	r1, r2
 801e3d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3da:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801e3de:	fb0e 1e00 	mla	lr, lr, r0, r1
 801e3e2:	0410      	lsls	r0, r2, #16
 801e3e4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801e3e8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e3ec:	4310      	orrs	r0, r2
 801e3ee:	9a08      	ldr	r2, [sp, #32]
 801e3f0:	9908      	ldr	r1, [sp, #32]
 801e3f2:	0412      	lsls	r2, r2, #16
 801e3f4:	fb03 e000 	mla	r0, r3, r0, lr
 801e3f8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801e3fc:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 801e400:	ea42 020e 	orr.w	r2, r2, lr
 801e404:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801e408:	fb03 0302 	mla	r3, r3, r2, r0
 801e40c:	0d5a      	lsrs	r2, r3, #21
 801e40e:	095b      	lsrs	r3, r3, #5
 801e410:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e414:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801e418:	4313      	orrs	r3, r2
 801e41a:	f8a9 3000 	strh.w	r3, [r9]
 801e41e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e420:	441c      	add	r4, r3
 801e422:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e424:	f109 0902 	add.w	r9, r9, #2
 801e428:	441e      	add	r6, r3
 801e42a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e42e:	e784      	b.n	801e33a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e430:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e432:	441c      	add	r4, r3
 801e434:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e436:	3d01      	subs	r5, #1
 801e438:	441e      	add	r6, r3
 801e43a:	3702      	adds	r7, #2
 801e43c:	e761      	b.n	801e302 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e43e:	d01d      	beq.n	801e47c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e440:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e442:	1e6b      	subs	r3, r5, #1
 801e444:	fb00 4003 	mla	r0, r0, r3, r4
 801e448:	1400      	asrs	r0, r0, #16
 801e44a:	f53f af74 	bmi.w	801e336 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e44e:	3901      	subs	r1, #1
 801e450:	4288      	cmp	r0, r1
 801e452:	f6bf af70 	bge.w	801e336 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e456:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e458:	fb01 6303 	mla	r3, r1, r3, r6
 801e45c:	141b      	asrs	r3, r3, #16
 801e45e:	f53f af6a 	bmi.w	801e336 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e462:	3a01      	subs	r2, #1
 801e464:	4293      	cmp	r3, r2
 801e466:	f6bf af66 	bge.w	801e336 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e46a:	46a9      	mov	r9, r5
 801e46c:	46ba      	mov	sl, r7
 801e46e:	f1b9 0f00 	cmp.w	r9, #0
 801e472:	dc5a      	bgt.n	801e52a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801e474:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801e478:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801e47c:	9b07      	ldr	r3, [sp, #28]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	f340 80b8 	ble.w	801e5f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e484:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e48c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e490:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e492:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e496:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e49a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e49e:	eef0 6a62 	vmov.f32	s13, s5
 801e4a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4ae:	ee16 4a90 	vmov	r4, s13
 801e4b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4b6:	eef0 6a43 	vmov.f32	s13, s6
 801e4ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4be:	ee12 2a90 	vmov	r2, s5
 801e4c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4ca:	ee13 2a10 	vmov	r2, s6
 801e4ce:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e4d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e4d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4d6:	931c      	str	r3, [sp, #112]	@ 0x70
 801e4d8:	9b07      	ldr	r3, [sp, #28]
 801e4da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e4dc:	3b01      	subs	r3, #1
 801e4de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4e2:	9307      	str	r3, [sp, #28]
 801e4e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e4e6:	ee16 6a90 	vmov	r6, s13
 801e4ea:	bf14      	ite	ne
 801e4ec:	461d      	movne	r5, r3
 801e4ee:	4615      	moveq	r5, r2
 801e4f0:	eeb0 3a67 	vmov.f32	s6, s15
 801e4f4:	eef0 2a47 	vmov.f32	s5, s14
 801e4f8:	e6f4      	b.n	801e2e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e4fa:	f111 0b01 	adds.w	fp, r1, #1
 801e4fe:	d48e      	bmi.n	801e41e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e500:	45de      	cmp	lr, fp
 801e502:	db8c      	blt.n	801e41e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e504:	f110 0b01 	adds.w	fp, r0, #1
 801e508:	d489      	bmi.n	801e41e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e50a:	455b      	cmp	r3, fp
 801e50c:	db87      	blt.n	801e41e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e50e:	b21b      	sxth	r3, r3
 801e510:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801e514:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801e518:	9300      	str	r3, [sp, #0]
 801e51a:	4642      	mov	r2, r8
 801e51c:	fa0f f38e 	sxth.w	r3, lr
 801e520:	4649      	mov	r1, r9
 801e522:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e524:	f7ff fe4d 	bl	801e1c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801e528:	e779      	b.n	801e41e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e52a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e52c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e530:	1420      	asrs	r0, r4, #16
 801e532:	1431      	asrs	r1, r6, #16
 801e534:	fb03 0101 	mla	r1, r3, r1, r0
 801e538:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801e53c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801e540:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801e544:	8841      	ldrh	r1, [r0, #2]
 801e546:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e54a:	f1be 0f00 	cmp.w	lr, #0
 801e54e:	d00b      	beq.n	801e568 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801e550:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801e554:	3b01      	subs	r3, #1
 801e556:	005b      	lsls	r3, r3, #1
 801e558:	3302      	adds	r3, #2
 801e55a:	eb00 0b03 	add.w	fp, r0, r3
 801e55e:	5ac3      	ldrh	r3, [r0, r3]
 801e560:	930a      	str	r3, [sp, #40]	@ 0x28
 801e562:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801e566:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e568:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801e56c:	fb12 f30e 	smulbb	r3, r2, lr
 801e570:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801e574:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e578:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801e57c:	10db      	asrs	r3, r3, #3
 801e57e:	ea40 000c 	orr.w	r0, r0, ip
 801e582:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e586:	f1ce 0c10 	rsb	ip, lr, #16
 801e58a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801e58e:	ebac 0c02 	sub.w	ip, ip, r2
 801e592:	ea4b 0101 	orr.w	r1, fp, r1
 801e596:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e59a:	4351      	muls	r1, r2
 801e59c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e59e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801e5a2:	fb0c 1c00 	mla	ip, ip, r0, r1
 801e5a6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801e5aa:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 801e5ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e5b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5b2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e5b6:	0412      	lsls	r2, r2, #16
 801e5b8:	ea4b 0000 	orr.w	r0, fp, r0
 801e5bc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801e5c0:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 801e5c4:	fb03 c000 	mla	r0, r3, r0, ip
 801e5c8:	ea42 0b0b 	orr.w	fp, r2, fp
 801e5cc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801e5d0:	fb03 000b 	mla	r0, r3, fp, r0
 801e5d4:	0d43      	lsrs	r3, r0, #21
 801e5d6:	0940      	lsrs	r0, r0, #5
 801e5d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e5dc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e5e0:	4318      	orrs	r0, r3
 801e5e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e5e4:	f82a 0b02 	strh.w	r0, [sl], #2
 801e5e8:	441c      	add	r4, r3
 801e5ea:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e5ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801e5f0:	441e      	add	r6, r3
 801e5f2:	e73c      	b.n	801e46e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e5f4:	b00f      	add	sp, #60	@ 0x3c
 801e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801e5fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5fe:	b085      	sub	sp, #20
 801e600:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 801e604:	9102      	str	r1, [sp, #8]
 801e606:	2c00      	cmp	r4, #0
 801e608:	fb04 7103 	mla	r1, r4, r3, r7
 801e60c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 801e610:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801e614:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 801e618:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801e61c:	f2c0 811b 	blt.w	801e856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801e620:	45a6      	cmp	lr, r4
 801e622:	f340 8118 	ble.w	801e856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801e626:	2f00      	cmp	r7, #0
 801e628:	f2c0 8113 	blt.w	801e852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801e62c:	42bb      	cmp	r3, r7
 801e62e:	f340 8110 	ble.w	801e852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801e632:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801e636:	1c7a      	adds	r2, r7, #1
 801e638:	f100 8110 	bmi.w	801e85c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801e63c:	4293      	cmp	r3, r2
 801e63e:	f340 810d 	ble.w	801e85c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801e642:	2e00      	cmp	r6, #0
 801e644:	f000 810c 	beq.w	801e860 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801e648:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e64c:	3401      	adds	r4, #1
 801e64e:	f100 810b 	bmi.w	801e868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801e652:	45a6      	cmp	lr, r4
 801e654:	f340 8108 	ble.w	801e868 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801e658:	2800      	cmp	r0, #0
 801e65a:	f000 8108 	beq.w	801e86e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801e65e:	2f00      	cmp	r7, #0
 801e660:	f2c0 8100 	blt.w	801e864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801e664:	42bb      	cmp	r3, r7
 801e666:	f340 80fd 	ble.w	801e864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801e66a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801e66e:	3701      	adds	r7, #1
 801e670:	f100 8100 	bmi.w	801e874 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801e674:	42bb      	cmp	r3, r7
 801e676:	f340 80fd 	ble.w	801e874 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801e67a:	2e00      	cmp	r6, #0
 801e67c:	f000 80fc 	beq.w	801e878 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801e680:	3301      	adds	r3, #1
 801e682:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e686:	b2b6      	uxth	r6, r6
 801e688:	b280      	uxth	r0, r0
 801e68a:	fb00 fe06 	mul.w	lr, r0, r6
 801e68e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801e692:	0136      	lsls	r6, r6, #4
 801e694:	eba6 070e 	sub.w	r7, r6, lr
 801e698:	b280      	uxth	r0, r0
 801e69a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801e69e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801e6a2:	b2bf      	uxth	r7, r7
 801e6a4:	1a1b      	subs	r3, r3, r0
 801e6a6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	fb0a f607 	mul.w	r6, sl, r7
 801e6b0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e6b4:	fb0b 6603 	mla	r6, fp, r3, r6
 801e6b8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e6bc:	fb00 6609 	mla	r6, r0, r9, r6
 801e6c0:	fb0e 6608 	mla	r6, lr, r8, r6
 801e6c4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e6c8:	9600      	str	r6, [sp, #0]
 801e6ca:	2e00      	cmp	r6, #0
 801e6cc:	f000 80be 	beq.w	801e84c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801e6d0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801e6d4:	fb0b fc0c 	mul.w	ip, fp, ip
 801e6d8:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e6dc:	fb0b f505 	mul.w	r5, fp, r5
 801e6e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e6e4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e6e8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e6ec:	44dc      	add	ip, fp
 801e6ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6f2:	9501      	str	r5, [sp, #4]
 801e6f4:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801e6f8:	9503      	str	r5, [sp, #12]
 801e6fa:	9d01      	ldr	r5, [sp, #4]
 801e6fc:	9e02      	ldr	r6, [sp, #8]
 801e6fe:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801e702:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e706:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801e70a:	fb0a fc0c 	mul.w	ip, sl, ip
 801e70e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801e712:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801e716:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e71a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e71e:	4465      	add	r5, ip
 801e720:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e724:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801e728:	fb09 fc0c 	mul.w	ip, r9, ip
 801e72c:	fb09 f904 	mul.w	r9, r9, r4
 801e730:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801e734:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e738:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801e73c:	fb08 f404 	mul.w	r4, r8, r4
 801e740:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801e744:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e748:	fb08 f802 	mul.w	r8, r8, r2
 801e74c:	fb0a fa01 	mul.w	sl, sl, r1
 801e750:	0a22      	lsrs	r2, r4, #8
 801e752:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801e756:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e75a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801e75e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801e762:	4414      	add	r4, r2
 801e764:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801e768:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e76c:	0a2d      	lsrs	r5, r5, #8
 801e76e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e772:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e776:	9a03      	ldr	r2, [sp, #12]
 801e778:	8836      	ldrh	r6, [r6, #0]
 801e77a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801e77e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e782:	437d      	muls	r5, r7
 801e784:	4461      	add	r1, ip
 801e786:	0a24      	lsrs	r4, r4, #8
 801e788:	fb02 5503 	mla	r5, r2, r3, r5
 801e78c:	0a09      	lsrs	r1, r1, #8
 801e78e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801e792:	fb04 540e 	mla	r4, r4, lr, r5
 801e796:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801e79a:	fb01 4100 	mla	r1, r1, r0, r4
 801e79e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7a2:	0a09      	lsrs	r1, r1, #8
 801e7a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e7a8:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801e7ac:	fb07 f70a 	mul.w	r7, r7, sl
 801e7b0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e7b4:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801e7b8:	fb03 7101 	mla	r1, r3, r1, r7
 801e7bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e7c0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e7c4:	fb0e 1e08 	mla	lr, lr, r8, r1
 801e7c8:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801e7cc:	fb00 e101 	mla	r1, r0, r1, lr
 801e7d0:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801e7d4:	9a00      	ldr	r2, [sp, #0]
 801e7d6:	b287      	uxth	r7, r0
 801e7d8:	437a      	muls	r2, r7
 801e7da:	0a09      	lsrs	r1, r1, #8
 801e7dc:	1c53      	adds	r3, r2, #1
 801e7de:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801e7e2:	4321      	orrs	r1, r4
 801e7e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e7e8:	1235      	asrs	r5, r6, #8
 801e7ea:	0c0a      	lsrs	r2, r1, #16
 801e7ec:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801e7f0:	b2db      	uxtb	r3, r3
 801e7f2:	fb12 f207 	smulbb	r2, r2, r7
 801e7f6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e7fa:	fb05 2503 	mla	r5, r5, r3, r2
 801e7fe:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801e802:	10f2      	asrs	r2, r6, #3
 801e804:	b2c8      	uxtb	r0, r1
 801e806:	00f6      	lsls	r6, r6, #3
 801e808:	fb14 f407 	smulbb	r4, r4, r7
 801e80c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801e810:	b2f6      	uxtb	r6, r6
 801e812:	fb10 f007 	smulbb	r0, r0, r7
 801e816:	fb02 4203 	mla	r2, r2, r3, r4
 801e81a:	b2ad      	uxth	r5, r5
 801e81c:	fb06 0303 	mla	r3, r6, r3, r0
 801e820:	b299      	uxth	r1, r3
 801e822:	b294      	uxth	r4, r2
 801e824:	1c6b      	adds	r3, r5, #1
 801e826:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e82a:	1c62      	adds	r2, r4, #1
 801e82c:	1c4b      	adds	r3, r1, #1
 801e82e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e832:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e836:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e83a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e83e:	0952      	lsrs	r2, r2, #5
 801e840:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e844:	432b      	orrs	r3, r5
 801e846:	4313      	orrs	r3, r2
 801e848:	9a02      	ldr	r2, [sp, #8]
 801e84a:	8013      	strh	r3, [r2, #0]
 801e84c:	b005      	add	sp, #20
 801e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e852:	2500      	movs	r5, #0
 801e854:	e6ef      	b.n	801e636 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801e856:	2100      	movs	r1, #0
 801e858:	460d      	mov	r5, r1
 801e85a:	e6f7      	b.n	801e64c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801e85c:	2100      	movs	r1, #0
 801e85e:	e6f5      	b.n	801e64c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801e860:	4631      	mov	r1, r6
 801e862:	e6f3      	b.n	801e64c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801e864:	2400      	movs	r4, #0
 801e866:	e702      	b.n	801e66e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801e868:	2200      	movs	r2, #0
 801e86a:	4614      	mov	r4, r2
 801e86c:	e70b      	b.n	801e686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801e86e:	4602      	mov	r2, r0
 801e870:	4604      	mov	r4, r0
 801e872:	e708      	b.n	801e686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801e874:	2200      	movs	r2, #0
 801e876:	e706      	b.n	801e686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801e878:	4632      	mov	r2, r6
 801e87a:	e704      	b.n	801e686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801e87c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e880:	b09d      	sub	sp, #116	@ 0x74
 801e882:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 801e886:	9219      	str	r2, [sp, #100]	@ 0x64
 801e888:	9307      	str	r3, [sp, #28]
 801e88a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801e88c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801e890:	931a      	str	r3, [sp, #104]	@ 0x68
 801e892:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e894:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801e898:	901b      	str	r0, [sp, #108]	@ 0x6c
 801e89a:	6850      	ldr	r0, [r2, #4]
 801e89c:	6812      	ldr	r2, [r2, #0]
 801e89e:	fb00 1303 	mla	r3, r0, r3, r1
 801e8a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e8a8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	9310      	str	r3, [sp, #64]	@ 0x40
 801e8ae:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e8b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e8b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	dc03      	bgt.n	801e8c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	f340 8375 	ble.w	801efac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801e8c2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e8c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e8cc:	1e48      	subs	r0, r1, #1
 801e8ce:	1e57      	subs	r7, r2, #1
 801e8d0:	9b07      	ldr	r3, [sp, #28]
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	f340 818e 	ble.w	801ebf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801e8d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e8dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e8e0:	d406      	bmi.n	801e8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e8e2:	4584      	cmp	ip, r0
 801e8e4:	da04      	bge.n	801e8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	db02      	blt.n	801e8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e8ea:	42bb      	cmp	r3, r7
 801e8ec:	f2c0 8183 	blt.w	801ebf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801e8f0:	f11c 0c01 	adds.w	ip, ip, #1
 801e8f4:	f100 8173 	bmi.w	801ebde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801e8f8:	4561      	cmp	r1, ip
 801e8fa:	f2c0 8170 	blt.w	801ebde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801e8fe:	3301      	adds	r3, #1
 801e900:	f100 816d 	bmi.w	801ebde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801e904:	429a      	cmp	r2, r3
 801e906:	f2c0 816a 	blt.w	801ebde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801e90a:	9b07      	ldr	r3, [sp, #28]
 801e90c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e90e:	9318      	str	r3, [sp, #96]	@ 0x60
 801e910:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e912:	2b00      	cmp	r3, #0
 801e914:	f340 818c 	ble.w	801ec30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e918:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 801e91a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e91c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e920:	689b      	ldr	r3, [r3, #8]
 801e922:	1422      	asrs	r2, r4, #16
 801e924:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801e928:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801e92c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e930:	f100 81cd 	bmi.w	801ecce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e934:	f103 38ff 	add.w	r8, r3, #4294967295
 801e938:	4542      	cmp	r2, r8
 801e93a:	f280 81c8 	bge.w	801ecce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e93e:	f1bc 0f00 	cmp.w	ip, #0
 801e942:	f2c0 81c4 	blt.w	801ecce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e946:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e94a:	45c4      	cmp	ip, r8
 801e94c:	f280 81bf 	bge.w	801ecce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e950:	b21b      	sxth	r3, r3
 801e952:	fb0c 2203 	mla	r2, ip, r3, r2
 801e956:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e958:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801e95c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e960:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e964:	2800      	cmp	r0, #0
 801e966:	f000 81a9 	beq.w	801ecbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801e96a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e96e:	950c      	str	r5, [sp, #48]	@ 0x30
 801e970:	0e2d      	lsrs	r5, r5, #24
 801e972:	9513      	str	r5, [sp, #76]	@ 0x4c
 801e974:	b181      	cbz	r1, 801e998 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801e97a:	3b01      	subs	r3, #1
 801e97c:	009b      	lsls	r3, r3, #2
 801e97e:	3304      	adds	r3, #4
 801e980:	eb08 0c03 	add.w	ip, r8, r3
 801e984:	f858 3003 	ldr.w	r3, [r8, r3]
 801e988:	9308      	str	r3, [sp, #32]
 801e98a:	0e1b      	lsrs	r3, r3, #24
 801e98c:	9311      	str	r3, [sp, #68]	@ 0x44
 801e98e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801e992:	930d      	str	r3, [sp, #52]	@ 0x34
 801e994:	0e1b      	lsrs	r3, r3, #24
 801e996:	9314      	str	r3, [sp, #80]	@ 0x50
 801e998:	b280      	uxth	r0, r0
 801e99a:	b289      	uxth	r1, r1
 801e99c:	fb00 f901 	mul.w	r9, r0, r1
 801e9a0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e9a4:	0100      	lsls	r0, r0, #4
 801e9a6:	eba0 0809 	sub.w	r8, r0, r9
 801e9aa:	b289      	uxth	r1, r1
 801e9ac:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801e9b0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e9b2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e9b4:	fa1f f888 	uxth.w	r8, r8
 801e9b8:	1a5b      	subs	r3, r3, r1
 801e9ba:	b29b      	uxth	r3, r3
 801e9bc:	fb08 f000 	mul.w	r0, r8, r0
 801e9c0:	fb03 000e 	mla	r0, r3, lr, r0
 801e9c4:	fb01 0005 	mla	r0, r1, r5, r0
 801e9c8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e9ca:	fb09 0005 	mla	r0, r9, r5, r0
 801e9ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e9d2:	2800      	cmp	r0, #0
 801e9d4:	f000 80fa 	beq.w	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801e9d8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e9dc:	d01b      	beq.n	801ea16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e9de:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801e9e2:	fb0e fa0a 	mul.w	sl, lr, sl
 801e9e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e9ea:	fb0e fe02 	mul.w	lr, lr, r2
 801e9ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e9f2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e9f6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e9fa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e9fe:	4452      	add	r2, sl
 801ea00:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ea04:	0a12      	lsrs	r2, r2, #8
 801ea06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea0a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ea0e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ea12:	ea42 020c 	orr.w	r2, r2, ip
 801ea16:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ea18:	2dff      	cmp	r5, #255	@ 0xff
 801ea1a:	d021      	beq.n	801ea60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801ea1c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ea1e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801ea22:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ea24:	fb05 fb0b 	mul.w	fp, r5, fp
 801ea28:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ea2a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801ea2e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ea30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea34:	fb05 fa0a 	mul.w	sl, r5, sl
 801ea38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea3c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ea40:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ea44:	44de      	add	lr, fp
 801ea46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea56:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea5a:	ea4e 050a 	orr.w	r5, lr, sl
 801ea5e:	950c      	str	r5, [sp, #48]	@ 0x30
 801ea60:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ea62:	2dff      	cmp	r5, #255	@ 0xff
 801ea64:	d021      	beq.n	801eaaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ea66:	9d08      	ldr	r5, [sp, #32]
 801ea68:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801ea6c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ea6e:	fb05 fb0b 	mul.w	fp, r5, fp
 801ea72:	9d08      	ldr	r5, [sp, #32]
 801ea74:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801ea78:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ea7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea7e:	fb05 fa0a 	mul.w	sl, r5, sl
 801ea82:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ea86:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ea8a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ea8e:	44de      	add	lr, fp
 801ea90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea9c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eaa0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eaa4:	ea4e 050a 	orr.w	r5, lr, sl
 801eaa8:	9508      	str	r5, [sp, #32]
 801eaaa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eaac:	2dff      	cmp	r5, #255	@ 0xff
 801eaae:	d021      	beq.n	801eaf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801eab0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801eab2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801eab6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eab8:	fb05 fb0b 	mul.w	fp, r5, fp
 801eabc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801eabe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801eac2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eac4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eac8:	fb05 fa0a 	mul.w	sl, r5, sl
 801eacc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ead0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ead4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ead8:	44de      	add	lr, fp
 801eada:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eade:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eae6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eaea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eaee:	ea4e 050a 	orr.w	r5, lr, sl
 801eaf2:	950d      	str	r5, [sp, #52]	@ 0x34
 801eaf4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801eaf6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801eafa:	9d08      	ldr	r5, [sp, #32]
 801eafc:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801eb00:	fb08 fc0c 	mul.w	ip, r8, ip
 801eb04:	fb03 cc0e 	mla	ip, r3, lr, ip
 801eb08:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 801eb0c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801eb0e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801eb12:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 801eb16:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801eb18:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eb1c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801eb20:	fb08 f80e 	mul.w	r8, r8, lr
 801eb24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801eb28:	fb03 8202 	mla	r2, r3, r2, r8
 801eb2c:	9b08      	ldr	r3, [sp, #32]
 801eb2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801eb30:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801eb34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb36:	fb01 220a 	mla	r2, r1, sl, r2
 801eb3a:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801eb3e:	fb09 2901 	mla	r9, r9, r1, r2
 801eb42:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eb44:	883b      	ldrh	r3, [r7, #0]
 801eb46:	4342      	muls	r2, r0
 801eb48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb4c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb50:	1c50      	adds	r0, r2, #1
 801eb52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb56:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801eb5a:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb5e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801eb62:	1219      	asrs	r1, r3, #8
 801eb64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801eb68:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801eb6c:	b2c0      	uxtb	r0, r0
 801eb6e:	fb12 f205 	smulbb	r2, r2, r5
 801eb72:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801eb76:	fb01 2100 	mla	r1, r1, r0, r2
 801eb7a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801eb7e:	10da      	asrs	r2, r3, #3
 801eb80:	fa5f fc8c 	uxtb.w	ip, ip
 801eb84:	00db      	lsls	r3, r3, #3
 801eb86:	fb1c fc05 	smulbb	ip, ip, r5
 801eb8a:	b2db      	uxtb	r3, r3
 801eb8c:	b289      	uxth	r1, r1
 801eb8e:	fb03 c300 	mla	r3, r3, r0, ip
 801eb92:	fa1f fc83 	uxth.w	ip, r3
 801eb96:	1c4b      	adds	r3, r1, #1
 801eb98:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801eb9c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801eba0:	fb1e fe05 	smulbb	lr, lr, r5
 801eba4:	f10c 0301 	add.w	r3, ip, #1
 801eba8:	fb02 e200 	mla	r2, r2, r0, lr
 801ebac:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ebb0:	b292      	uxth	r2, r2
 801ebb2:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801ebb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ebba:	430b      	orrs	r3, r1
 801ebbc:	1c51      	adds	r1, r2, #1
 801ebbe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ebc2:	0952      	lsrs	r2, r2, #5
 801ebc4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ebc8:	4313      	orrs	r3, r2
 801ebca:	803b      	strh	r3, [r7, #0]
 801ebcc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ebce:	441c      	add	r4, r3
 801ebd0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ebd2:	441e      	add	r6, r3
 801ebd4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ebd6:	3b01      	subs	r3, #1
 801ebd8:	3702      	adds	r7, #2
 801ebda:	9318      	str	r3, [sp, #96]	@ 0x60
 801ebdc:	e698      	b.n	801e910 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ebde:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ebe0:	441c      	add	r4, r3
 801ebe2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ebe4:	441e      	add	r6, r3
 801ebe6:	9b07      	ldr	r3, [sp, #28]
 801ebe8:	3b01      	subs	r3, #1
 801ebea:	9307      	str	r3, [sp, #28]
 801ebec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ebee:	3302      	adds	r3, #2
 801ebf0:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebf2:	e66d      	b.n	801e8d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ebf4:	d023      	beq.n	801ec3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801ebf6:	9b07      	ldr	r3, [sp, #28]
 801ebf8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801ebfa:	3b01      	subs	r3, #1
 801ebfc:	fb00 4003 	mla	r0, r0, r3, r4
 801ec00:	1400      	asrs	r0, r0, #16
 801ec02:	f53f ae82 	bmi.w	801e90a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec06:	3901      	subs	r1, #1
 801ec08:	4288      	cmp	r0, r1
 801ec0a:	f6bf ae7e 	bge.w	801e90a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec0e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801ec10:	fb01 6303 	mla	r3, r1, r3, r6
 801ec14:	141b      	asrs	r3, r3, #16
 801ec16:	f53f ae78 	bmi.w	801e90a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec1a:	3a01      	subs	r2, #1
 801ec1c:	4293      	cmp	r3, r2
 801ec1e:	f6bf ae74 	bge.w	801e90a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec22:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ec26:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801ec2a:	f1bb 0f00 	cmp.w	fp, #0
 801ec2e:	dc6c      	bgt.n	801ed0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801ec30:	9b07      	ldr	r3, [sp, #28]
 801ec32:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ec36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec38:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801ec3c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec3e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	f340 81b3 	ble.w	801efac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801ec46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ec4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ec52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ec54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec58:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec60:	eef0 6a62 	vmov.f32	s13, s5
 801ec64:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec70:	ee16 4a90 	vmov	r4, s13
 801ec74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec78:	eef0 6a43 	vmov.f32	s13, s6
 801ec7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec80:	ee12 2a90 	vmov	r2, s5
 801ec84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec8c:	ee13 2a10 	vmov	r2, s6
 801ec90:	9329      	str	r3, [sp, #164]	@ 0xa4
 801ec92:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ec94:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec98:	932a      	str	r3, [sp, #168]	@ 0xa8
 801ec9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ec9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ec9e:	3b01      	subs	r3, #1
 801eca0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eca4:	9317      	str	r3, [sp, #92]	@ 0x5c
 801eca6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801eca8:	bf08      	it	eq
 801ecaa:	4613      	moveq	r3, r2
 801ecac:	ee16 6a90 	vmov	r6, s13
 801ecb0:	9307      	str	r3, [sp, #28]
 801ecb2:	eeb0 3a67 	vmov.f32	s6, s15
 801ecb6:	eef0 2a47 	vmov.f32	s5, s14
 801ecba:	e5fb      	b.n	801e8b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ecbc:	2900      	cmp	r1, #0
 801ecbe:	f43f ae6b 	beq.w	801e998 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ecc2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801ecc6:	9308      	str	r3, [sp, #32]
 801ecc8:	0e1b      	lsrs	r3, r3, #24
 801ecca:	9311      	str	r3, [sp, #68]	@ 0x44
 801eccc:	e664      	b.n	801e998 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ecce:	f112 0801 	adds.w	r8, r2, #1
 801ecd2:	f53f af7b 	bmi.w	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecd6:	4543      	cmp	r3, r8
 801ecd8:	f6ff af78 	blt.w	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecdc:	f11c 0801 	adds.w	r8, ip, #1
 801ece0:	f53f af74 	bmi.w	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ece4:	45c6      	cmp	lr, r8
 801ece6:	f6ff af71 	blt.w	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecea:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801ecec:	9201      	str	r2, [sp, #4]
 801ecee:	fa0f f28e 	sxth.w	r2, lr
 801ecf2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801ecf6:	e9cd c002 	strd	ip, r0, [sp, #8]
 801ecfa:	9200      	str	r2, [sp, #0]
 801ecfc:	b21b      	sxth	r3, r3
 801ecfe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ed00:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801ed02:	4639      	mov	r1, r7
 801ed04:	f7ff fc79 	bl	801e5fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801ed08:	e760      	b.n	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ed0a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801ed0c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ed0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed12:	1427      	asrs	r7, r4, #16
 801ed14:	1433      	asrs	r3, r6, #16
 801ed16:	fb01 7303 	mla	r3, r1, r3, r7
 801ed1a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801ed1e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ed22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ed26:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ed2a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ed2e:	2a00      	cmp	r2, #0
 801ed30:	f000 8133 	beq.w	801ef9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801ed34:	687d      	ldr	r5, [r7, #4]
 801ed36:	950e      	str	r5, [sp, #56]	@ 0x38
 801ed38:	0e2d      	lsrs	r5, r5, #24
 801ed3a:	9515      	str	r5, [sp, #84]	@ 0x54
 801ed3c:	b178      	cbz	r0, 801ed5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801ed3e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801ed42:	3901      	subs	r1, #1
 801ed44:	0089      	lsls	r1, r1, #2
 801ed46:	3104      	adds	r1, #4
 801ed48:	eb07 0e01 	add.w	lr, r7, r1
 801ed4c:	5879      	ldr	r1, [r7, r1]
 801ed4e:	9109      	str	r1, [sp, #36]	@ 0x24
 801ed50:	0e09      	lsrs	r1, r1, #24
 801ed52:	9112      	str	r1, [sp, #72]	@ 0x48
 801ed54:	f8de 1004 	ldr.w	r1, [lr, #4]
 801ed58:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ed5a:	0e09      	lsrs	r1, r1, #24
 801ed5c:	9116      	str	r1, [sp, #88]	@ 0x58
 801ed5e:	b292      	uxth	r2, r2
 801ed60:	b280      	uxth	r0, r0
 801ed62:	fb02 f800 	mul.w	r8, r2, r0
 801ed66:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ed6a:	0112      	lsls	r2, r2, #4
 801ed6c:	eba2 0e08 	sub.w	lr, r2, r8
 801ed70:	b280      	uxth	r0, r0
 801ed72:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ed76:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801ed78:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ed7a:	fa1f fe8e 	uxth.w	lr, lr
 801ed7e:	1a12      	subs	r2, r2, r0
 801ed80:	b292      	uxth	r2, r2
 801ed82:	fb0e f101 	mul.w	r1, lr, r1
 801ed86:	fb02 110c 	mla	r1, r2, ip, r1
 801ed8a:	fb00 1105 	mla	r1, r0, r5, r1
 801ed8e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ed90:	fb08 1105 	mla	r1, r8, r5, r1
 801ed94:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ed98:	2900      	cmp	r1, #0
 801ed9a:	f000 80f5 	beq.w	801ef88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801ed9e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801eda2:	d019      	beq.n	801edd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801eda4:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801eda8:	fb0c fa0a 	mul.w	sl, ip, sl
 801edac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801edb0:	fb0c fc03 	mul.w	ip, ip, r3
 801edb4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801edb8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801edbc:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801edc0:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801edc4:	4453      	add	r3, sl
 801edc6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801edca:	0a1b      	lsrs	r3, r3, #8
 801edcc:	0a3f      	lsrs	r7, r7, #8
 801edce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801edd2:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801edd6:	433b      	orrs	r3, r7
 801edd8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801edda:	2dff      	cmp	r5, #255	@ 0xff
 801eddc:	d020      	beq.n	801ee20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801edde:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ede0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801ede4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801ede6:	436f      	muls	r7, r5
 801ede8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801edea:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801edee:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801edf0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801edf4:	fb05 fa0a 	mul.w	sl, r5, sl
 801edf8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801edfc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee00:	44bc      	add	ip, r7
 801ee02:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ee06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee16:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee1a:	ea4c 050a 	orr.w	r5, ip, sl
 801ee1e:	950e      	str	r5, [sp, #56]	@ 0x38
 801ee20:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ee22:	2dff      	cmp	r5, #255	@ 0xff
 801ee24:	d020      	beq.n	801ee68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801ee26:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ee28:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801ee2c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ee2e:	436f      	muls	r7, r5
 801ee30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ee32:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801ee36:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ee38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee3c:	fb05 fa0a 	mul.w	sl, r5, sl
 801ee40:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ee44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee48:	44bc      	add	ip, r7
 801ee4a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ee4e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee62:	ea4c 050a 	orr.w	r5, ip, sl
 801ee66:	9509      	str	r5, [sp, #36]	@ 0x24
 801ee68:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ee6a:	2dff      	cmp	r5, #255	@ 0xff
 801ee6c:	d020      	beq.n	801eeb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801ee6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ee70:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801ee74:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ee76:	436f      	muls	r7, r5
 801ee78:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ee7a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801ee7e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801ee80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee84:	fb05 fa0a 	mul.w	sl, r5, sl
 801ee88:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ee8c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ee90:	44bc      	add	ip, r7
 801ee92:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ee96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eea2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eea6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eeaa:	ea4c 050a 	orr.w	r5, ip, sl
 801eeae:	950f      	str	r5, [sp, #60]	@ 0x3c
 801eeb0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801eeb2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801eeb6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801eeb8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801eebc:	fb0e f707 	mul.w	r7, lr, r7
 801eec0:	fb02 770c 	mla	r7, r2, ip, r7
 801eec4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801eec8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801eeca:	fb00 770c 	mla	r7, r0, ip, r7
 801eece:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801eed2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801eed4:	fb08 770c 	mla	r7, r8, ip, r7
 801eed8:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 801eedc:	fb0e fe0c 	mul.w	lr, lr, ip
 801eee0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801eee4:	fb02 e303 	mla	r3, r2, r3, lr
 801eee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eeea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801eeec:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801eef0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801eef2:	fb00 330a 	mla	r3, r0, sl, r3
 801eef6:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801eefa:	fb08 3c0c 	mla	ip, r8, ip, r3
 801eefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ef00:	f8b9 0000 	ldrh.w	r0, [r9]
 801ef04:	4359      	muls	r1, r3
 801ef06:	0a3f      	lsrs	r7, r7, #8
 801ef08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef0c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ef10:	1c4b      	adds	r3, r1, #1
 801ef12:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ef16:	ea47 070c 	orr.w	r7, r7, ip
 801ef1a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ef1e:	1202      	asrs	r2, r0, #8
 801ef20:	0c3b      	lsrs	r3, r7, #16
 801ef22:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ef26:	b2c9      	uxtb	r1, r1
 801ef28:	fb13 f305 	smulbb	r3, r3, r5
 801ef2c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801ef30:	fb02 3201 	mla	r2, r2, r1, r3
 801ef34:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801ef38:	10c3      	asrs	r3, r0, #3
 801ef3a:	b2ff      	uxtb	r7, r7
 801ef3c:	00c0      	lsls	r0, r0, #3
 801ef3e:	b2c0      	uxtb	r0, r0
 801ef40:	fb17 f705 	smulbb	r7, r7, r5
 801ef44:	fb00 7001 	mla	r0, r0, r1, r7
 801ef48:	b292      	uxth	r2, r2
 801ef4a:	fb1c fc05 	smulbb	ip, ip, r5
 801ef4e:	b280      	uxth	r0, r0
 801ef50:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801ef54:	fb03 c301 	mla	r3, r3, r1, ip
 801ef58:	1c51      	adds	r1, r2, #1
 801ef5a:	f100 0c01 	add.w	ip, r0, #1
 801ef5e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ef62:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801ef66:	b29b      	uxth	r3, r3
 801ef68:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ef6c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801ef70:	ea4c 0202 	orr.w	r2, ip, r2
 801ef74:	f103 0c01 	add.w	ip, r3, #1
 801ef78:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801ef7c:	095b      	lsrs	r3, r3, #5
 801ef7e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ef82:	431a      	orrs	r2, r3
 801ef84:	f8a9 2000 	strh.w	r2, [r9]
 801ef88:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ef8a:	441c      	add	r4, r3
 801ef8c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ef8e:	f109 0902 	add.w	r9, r9, #2
 801ef92:	441e      	add	r6, r3
 801ef94:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef98:	e647      	b.n	801ec2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef9a:	2800      	cmp	r0, #0
 801ef9c:	f43f aedf 	beq.w	801ed5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801efa0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801efa4:	9109      	str	r1, [sp, #36]	@ 0x24
 801efa6:	0e09      	lsrs	r1, r1, #24
 801efa8:	9112      	str	r1, [sp, #72]	@ 0x48
 801efaa:	e6d8      	b.n	801ed5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801efac:	b01d      	add	sp, #116	@ 0x74
 801efae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801efb2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801efb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb6:	b085      	sub	sp, #20
 801efb8:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 801efbc:	9102      	str	r1, [sp, #8]
 801efbe:	2c00      	cmp	r4, #0
 801efc0:	fb04 7103 	mla	r1, r4, r3, r7
 801efc4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 801efc8:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801efcc:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 801efd0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801efd4:	f2c0 810c 	blt.w	801f1f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801efd8:	45a6      	cmp	lr, r4
 801efda:	f340 8109 	ble.w	801f1f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801efde:	2f00      	cmp	r7, #0
 801efe0:	f2c0 8104 	blt.w	801f1ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801efe4:	42bb      	cmp	r3, r7
 801efe6:	f340 8101 	ble.w	801f1ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801efea:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801efee:	1c7a      	adds	r2, r7, #1
 801eff0:	f100 8101 	bmi.w	801f1f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801eff4:	4293      	cmp	r3, r2
 801eff6:	f340 80fe 	ble.w	801f1f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801effa:	2e00      	cmp	r6, #0
 801effc:	f000 80fd 	beq.w	801f1fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 801f000:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f004:	3401      	adds	r4, #1
 801f006:	f100 80fc 	bmi.w	801f202 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801f00a:	45a6      	cmp	lr, r4
 801f00c:	f340 80f9 	ble.w	801f202 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801f010:	2800      	cmp	r0, #0
 801f012:	f000 80f9 	beq.w	801f208 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 801f016:	2f00      	cmp	r7, #0
 801f018:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 801f01c:	f2c0 80ef 	blt.w	801f1fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801f020:	42bb      	cmp	r3, r7
 801f022:	f340 80ec 	ble.w	801f1fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801f026:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801f02a:	3701      	adds	r7, #1
 801f02c:	f100 80ef 	bmi.w	801f20e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801f030:	42bb      	cmp	r3, r7
 801f032:	f340 80ec 	ble.w	801f20e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801f036:	2e00      	cmp	r6, #0
 801f038:	f000 80eb 	beq.w	801f212 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 801f03c:	6852      	ldr	r2, [r2, #4]
 801f03e:	b2b6      	uxth	r6, r6
 801f040:	b280      	uxth	r0, r0
 801f042:	fb00 fe06 	mul.w	lr, r0, r6
 801f046:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f04a:	0136      	lsls	r6, r6, #4
 801f04c:	eba6 070e 	sub.w	r7, r6, lr
 801f050:	b280      	uxth	r0, r0
 801f052:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801f056:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f05a:	b2bf      	uxth	r7, r7
 801f05c:	1a1b      	subs	r3, r3, r0
 801f05e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801f062:	b29b      	uxth	r3, r3
 801f064:	fb07 f60a 	mul.w	r6, r7, sl
 801f068:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f06c:	fb0b 6603 	mla	r6, fp, r3, r6
 801f070:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f074:	fb00 6609 	mla	r6, r0, r9, r6
 801f078:	fb0e 6608 	mla	r6, lr, r8, r6
 801f07c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f080:	9600      	str	r6, [sp, #0]
 801f082:	2e00      	cmp	r6, #0
 801f084:	f000 80af 	beq.w	801f1e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 801f088:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801f08c:	fb0b fc0c 	mul.w	ip, fp, ip
 801f090:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f094:	fb0b f505 	mul.w	r5, fp, r5
 801f098:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f09c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801f0a0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f0a4:	44dc      	add	ip, fp
 801f0a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0aa:	9501      	str	r5, [sp, #4]
 801f0ac:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801f0b0:	9503      	str	r5, [sp, #12]
 801f0b2:	9d01      	ldr	r5, [sp, #4]
 801f0b4:	9e02      	ldr	r6, [sp, #8]
 801f0b6:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801f0ba:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f0be:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801f0c2:	fb0a fc0c 	mul.w	ip, sl, ip
 801f0c6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f0ca:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f0ce:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f0d2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f0d6:	4465      	add	r5, ip
 801f0d8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f0dc:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801f0e0:	fb09 fc0c 	mul.w	ip, r9, ip
 801f0e4:	fb09 f904 	mul.w	r9, r9, r4
 801f0e8:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801f0ec:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f0f0:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801f0f4:	fb08 f404 	mul.w	r4, r8, r4
 801f0f8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801f0fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f100:	fb08 f802 	mul.w	r8, r8, r2
 801f104:	fb0a fa01 	mul.w	sl, sl, r1
 801f108:	0a22      	lsrs	r2, r4, #8
 801f10a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801f10e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f112:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801f116:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f11a:	4414      	add	r4, r2
 801f11c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f120:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801f124:	0a2d      	lsrs	r5, r5, #8
 801f126:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f12a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f12e:	9a03      	ldr	r2, [sp, #12]
 801f130:	8836      	ldrh	r6, [r6, #0]
 801f132:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801f136:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f13a:	437d      	muls	r5, r7
 801f13c:	4461      	add	r1, ip
 801f13e:	0a24      	lsrs	r4, r4, #8
 801f140:	fb02 5503 	mla	r5, r2, r3, r5
 801f144:	0a09      	lsrs	r1, r1, #8
 801f146:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801f14a:	fb04 540e 	mla	r4, r4, lr, r5
 801f14e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801f152:	fb01 4100 	mla	r1, r1, r0, r4
 801f156:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f15a:	0a09      	lsrs	r1, r1, #8
 801f15c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f160:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801f164:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f168:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801f16c:	fb07 f70a 	mul.w	r7, r7, sl
 801f170:	fb03 7101 	mla	r1, r3, r1, r7
 801f174:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f178:	9b00      	ldr	r3, [sp, #0]
 801f17a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801f17e:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f182:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801f186:	fb00 e101 	mla	r1, r0, r1, lr
 801f18a:	43da      	mvns	r2, r3
 801f18c:	1233      	asrs	r3, r6, #8
 801f18e:	b2d2      	uxtb	r2, r2
 801f190:	10f0      	asrs	r0, r6, #3
 801f192:	0a09      	lsrs	r1, r1, #8
 801f194:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801f198:	00f6      	lsls	r6, r6, #3
 801f19a:	4353      	muls	r3, r2
 801f19c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801f1a0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f1a4:	b2f6      	uxtb	r6, r6
 801f1a6:	4321      	orrs	r1, r4
 801f1a8:	4350      	muls	r0, r2
 801f1aa:	4356      	muls	r6, r2
 801f1ac:	1c5a      	adds	r2, r3, #1
 801f1ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f1b2:	0c0b      	lsrs	r3, r1, #16
 801f1b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f1b8:	1c42      	adds	r2, r0, #1
 801f1ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f1be:	0a0a      	lsrs	r2, r1, #8
 801f1c0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f1c4:	021b      	lsls	r3, r3, #8
 801f1c6:	00d2      	lsls	r2, r2, #3
 801f1c8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f1cc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801f1d0:	4313      	orrs	r3, r2
 801f1d2:	1c72      	adds	r2, r6, #1
 801f1d4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f1d8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 801f1dc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801f1e0:	4319      	orrs	r1, r3
 801f1e2:	9b02      	ldr	r3, [sp, #8]
 801f1e4:	8019      	strh	r1, [r3, #0]
 801f1e6:	b005      	add	sp, #20
 801f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ec:	2500      	movs	r5, #0
 801f1ee:	e6fe      	b.n	801efee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 801f1f0:	2100      	movs	r1, #0
 801f1f2:	460d      	mov	r5, r1
 801f1f4:	e706      	b.n	801f004 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f1f6:	2100      	movs	r1, #0
 801f1f8:	e704      	b.n	801f004 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f1fa:	4631      	mov	r1, r6
 801f1fc:	e702      	b.n	801f004 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801f1fe:	2400      	movs	r4, #0
 801f200:	e713      	b.n	801f02a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 801f202:	2200      	movs	r2, #0
 801f204:	4614      	mov	r4, r2
 801f206:	e71a      	b.n	801f03e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f208:	4602      	mov	r2, r0
 801f20a:	4604      	mov	r4, r0
 801f20c:	e717      	b.n	801f03e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f20e:	2200      	movs	r2, #0
 801f210:	e715      	b.n	801f03e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801f212:	4632      	mov	r2, r6
 801f214:	e713      	b.n	801f03e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0801f218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21c:	b09b      	sub	sp, #108	@ 0x6c
 801f21e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 801f222:	9218      	str	r2, [sp, #96]	@ 0x60
 801f224:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f226:	9116      	str	r1, [sp, #88]	@ 0x58
 801f228:	9307      	str	r3, [sp, #28]
 801f22a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f22e:	9019      	str	r0, [sp, #100]	@ 0x64
 801f230:	6850      	ldr	r0, [r2, #4]
 801f232:	6812      	ldr	r2, [r2, #0]
 801f234:	fb00 1303 	mla	r3, r0, r3, r1
 801f238:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f23c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f23e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f244:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f246:	2b00      	cmp	r3, #0
 801f248:	dc03      	bgt.n	801f252 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f24a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	f340 8386 	ble.w	801f95e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 801f252:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f254:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f258:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f25c:	1e48      	subs	r0, r1, #1
 801f25e:	1e57      	subs	r7, r2, #1
 801f260:	9b07      	ldr	r3, [sp, #28]
 801f262:	2b00      	cmp	r3, #0
 801f264:	f340 8166 	ble.w	801f534 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f268:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f26c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f270:	d406      	bmi.n	801f280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f272:	4584      	cmp	ip, r0
 801f274:	da04      	bge.n	801f280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f276:	2b00      	cmp	r3, #0
 801f278:	db02      	blt.n	801f280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f27a:	42bb      	cmp	r3, r7
 801f27c:	f2c0 815b 	blt.w	801f536 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f280:	f11c 0c01 	adds.w	ip, ip, #1
 801f284:	f100 814b 	bmi.w	801f51e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f288:	4561      	cmp	r1, ip
 801f28a:	f2c0 8148 	blt.w	801f51e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f28e:	3301      	adds	r3, #1
 801f290:	f100 8145 	bmi.w	801f51e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f294:	429a      	cmp	r2, r3
 801f296:	f2c0 8142 	blt.w	801f51e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801f29a:	9b07      	ldr	r3, [sp, #28]
 801f29c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f29e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f2a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	f340 8165 	ble.w	801f572 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801f2a8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 801f2aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f2ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f2b0:	689b      	ldr	r3, [r3, #8]
 801f2b2:	1422      	asrs	r2, r4, #16
 801f2b4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f2b8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f2bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f2c0:	f100 81d5 	bmi.w	801f66e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f2c4:	f103 38ff 	add.w	r8, r3, #4294967295
 801f2c8:	4542      	cmp	r2, r8
 801f2ca:	f280 81d0 	bge.w	801f66e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f2ce:	f1bc 0f00 	cmp.w	ip, #0
 801f2d2:	f2c0 81cc 	blt.w	801f66e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f2d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f2da:	45c4      	cmp	ip, r8
 801f2dc:	f280 81c7 	bge.w	801f66e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801f2e0:	b21b      	sxth	r3, r3
 801f2e2:	fb0c 2203 	mla	r2, ip, r3, r2
 801f2e6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f2e8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801f2ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f2f0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f2f4:	2900      	cmp	r1, #0
 801f2f6:	f000 8182 	beq.w	801f5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801f2fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f2fe:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f300:	0e2d      	lsrs	r5, r5, #24
 801f302:	9512      	str	r5, [sp, #72]	@ 0x48
 801f304:	b180      	cbz	r0, 801f328 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801f306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801f30a:	3b01      	subs	r3, #1
 801f30c:	009b      	lsls	r3, r3, #2
 801f30e:	3304      	adds	r3, #4
 801f310:	eb08 0c03 	add.w	ip, r8, r3
 801f314:	f858 3003 	ldr.w	r3, [r8, r3]
 801f318:	9308      	str	r3, [sp, #32]
 801f31a:	0e1b      	lsrs	r3, r3, #24
 801f31c:	9310      	str	r3, [sp, #64]	@ 0x40
 801f31e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f322:	930c      	str	r3, [sp, #48]	@ 0x30
 801f324:	0e1b      	lsrs	r3, r3, #24
 801f326:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f328:	b289      	uxth	r1, r1
 801f32a:	b280      	uxth	r0, r0
 801f32c:	fb01 f900 	mul.w	r9, r1, r0
 801f330:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f334:	0109      	lsls	r1, r1, #4
 801f336:	eba1 0809 	sub.w	r8, r1, r9
 801f33a:	b280      	uxth	r0, r0
 801f33c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801f340:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f342:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f344:	fa1f f888 	uxth.w	r8, r8
 801f348:	1a09      	subs	r1, r1, r0
 801f34a:	b289      	uxth	r1, r1
 801f34c:	fb08 f303 	mul.w	r3, r8, r3
 801f350:	fb01 330e 	mla	r3, r1, lr, r3
 801f354:	fb00 3305 	mla	r3, r0, r5, r3
 801f358:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f35a:	fb09 3305 	mla	r3, r9, r5, r3
 801f35e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f362:	2b00      	cmp	r3, #0
 801f364:	f000 80d2 	beq.w	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f368:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f36c:	d01b      	beq.n	801f3a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 801f36e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801f372:	fb0e fa0a 	mul.w	sl, lr, sl
 801f376:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f37a:	fb0e fe02 	mul.w	lr, lr, r2
 801f37e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f382:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f386:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f38a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f38e:	4452      	add	r2, sl
 801f390:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f394:	0a12      	lsrs	r2, r2, #8
 801f396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f39a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f39e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f3a2:	ea42 020c 	orr.w	r2, r2, ip
 801f3a6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f3a8:	2dff      	cmp	r5, #255	@ 0xff
 801f3aa:	d021      	beq.n	801f3f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801f3ac:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f3ae:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801f3b2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f3b4:	fb05 fb0b 	mul.w	fp, r5, fp
 801f3b8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f3ba:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801f3be:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f3c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f3c4:	fb05 fa0a 	mul.w	sl, r5, sl
 801f3c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f3cc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f3d0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f3d4:	44de      	add	lr, fp
 801f3d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f3da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f3e6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f3ea:	ea4e 050a 	orr.w	r5, lr, sl
 801f3ee:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f3f0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f3f2:	2dff      	cmp	r5, #255	@ 0xff
 801f3f4:	d021      	beq.n	801f43a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801f3f6:	9d08      	ldr	r5, [sp, #32]
 801f3f8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801f3fc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f3fe:	fb05 fb0b 	mul.w	fp, r5, fp
 801f402:	9d08      	ldr	r5, [sp, #32]
 801f404:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f408:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f40a:	fb05 fa0e 	mul.w	sl, r5, lr
 801f40e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f412:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f416:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f41a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f41e:	44de      	add	lr, fp
 801f420:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f424:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f428:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f42c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f430:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f434:	ea4e 050a 	orr.w	r5, lr, sl
 801f438:	9508      	str	r5, [sp, #32]
 801f43a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f43c:	2dff      	cmp	r5, #255	@ 0xff
 801f43e:	d021      	beq.n	801f484 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801f440:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f442:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801f446:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f448:	fb05 fb0b 	mul.w	fp, r5, fp
 801f44c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f44e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801f452:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f454:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f458:	fb05 fa0a 	mul.w	sl, r5, sl
 801f45c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f460:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f464:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f468:	44de      	add	lr, fp
 801f46a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f46e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f472:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f476:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f47a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f47e:	ea4e 050a 	orr.w	r5, lr, sl
 801f482:	950c      	str	r5, [sp, #48]	@ 0x30
 801f484:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f486:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801f48a:	9d08      	ldr	r5, [sp, #32]
 801f48c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801f490:	fb08 fc0c 	mul.w	ip, r8, ip
 801f494:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f498:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 801f49c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f49e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f4a2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 801f4a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f4a8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f4ac:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f4b0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f4b4:	fb08 f80e 	mul.w	r8, r8, lr
 801f4b8:	fb01 8202 	mla	r2, r1, r2, r8
 801f4bc:	9908      	ldr	r1, [sp, #32]
 801f4be:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f4c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f4c4:	fb00 220a 	mla	r2, r0, sl, r2
 801f4c8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801f4cc:	fb09 2900 	mla	r9, r9, r0, r2
 801f4d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f4d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f4dc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801f4e0:	ea4c 0c09 	orr.w	ip, ip, r9
 801f4e4:	2bff      	cmp	r3, #255	@ 0xff
 801f4e6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801f4ea:	f040 8091 	bne.w	801f610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801f4ee:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801f4f2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 801f4f6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f4fa:	f022 0207 	bic.w	r2, r2, #7
 801f4fe:	431a      	orrs	r2, r3
 801f500:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801f504:	ea4c 0c02 	orr.w	ip, ip, r2
 801f508:	f8a7 c000 	strh.w	ip, [r7]
 801f50c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f50e:	441c      	add	r4, r3
 801f510:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f512:	441e      	add	r6, r3
 801f514:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f516:	3b01      	subs	r3, #1
 801f518:	3702      	adds	r7, #2
 801f51a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f51c:	e6c0      	b.n	801f2a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f51e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f520:	441c      	add	r4, r3
 801f522:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f524:	441e      	add	r6, r3
 801f526:	9b07      	ldr	r3, [sp, #28]
 801f528:	3b01      	subs	r3, #1
 801f52a:	9307      	str	r3, [sp, #28]
 801f52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f52e:	3302      	adds	r3, #2
 801f530:	930a      	str	r3, [sp, #40]	@ 0x28
 801f532:	e695      	b.n	801f260 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f534:	d024      	beq.n	801f580 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801f536:	9b07      	ldr	r3, [sp, #28]
 801f538:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f53a:	3b01      	subs	r3, #1
 801f53c:	fb00 4003 	mla	r0, r0, r3, r4
 801f540:	1400      	asrs	r0, r0, #16
 801f542:	f53f aeaa 	bmi.w	801f29a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f546:	3901      	subs	r1, #1
 801f548:	4288      	cmp	r0, r1
 801f54a:	f6bf aea6 	bge.w	801f29a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f54e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f550:	fb01 6303 	mla	r3, r1, r3, r6
 801f554:	141b      	asrs	r3, r3, #16
 801f556:	f53f aea0 	bmi.w	801f29a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f55a:	3a01      	subs	r2, #1
 801f55c:	4293      	cmp	r3, r2
 801f55e:	f6bf ae9c 	bge.w	801f29a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f562:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f566:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 801f56a:	f1bb 0f00 	cmp.w	fp, #0
 801f56e:	f300 809a 	bgt.w	801f6a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801f572:	9b07      	ldr	r3, [sp, #28]
 801f574:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f57a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801f57e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f582:	2b00      	cmp	r3, #0
 801f584:	f340 81eb 	ble.w	801f95e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 801f588:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f58c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f590:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f594:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f596:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f59a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f59e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5a2:	eef0 6a62 	vmov.f32	s13, s5
 801f5a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5b2:	ee16 4a90 	vmov	r4, s13
 801f5b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5ba:	eef0 6a43 	vmov.f32	s13, s6
 801f5be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5c2:	ee12 2a90 	vmov	r2, s5
 801f5c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5ce:	ee13 2a10 	vmov	r2, s6
 801f5d2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f5d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f5d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5da:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f5dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f5de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f5e0:	3b01      	subs	r3, #1
 801f5e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5e6:	9316      	str	r3, [sp, #88]	@ 0x58
 801f5e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f5ea:	bf08      	it	eq
 801f5ec:	4613      	moveq	r3, r2
 801f5ee:	ee16 6a90 	vmov	r6, s13
 801f5f2:	9307      	str	r3, [sp, #28]
 801f5f4:	eeb0 3a67 	vmov.f32	s6, s15
 801f5f8:	eef0 2a47 	vmov.f32	s5, s14
 801f5fc:	e622      	b.n	801f244 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801f5fe:	2800      	cmp	r0, #0
 801f600:	f43f ae92 	beq.w	801f328 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801f604:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f608:	9308      	str	r3, [sp, #32]
 801f60a:	0e1b      	lsrs	r3, r3, #24
 801f60c:	9310      	str	r3, [sp, #64]	@ 0x40
 801f60e:	e68b      	b.n	801f328 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801f610:	8839      	ldrh	r1, [r7, #0]
 801f612:	4dd4      	ldr	r5, [pc, #848]	@ (801f964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 801f614:	43db      	mvns	r3, r3
 801f616:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801f61a:	fa5f f883 	uxtb.w	r8, r3
 801f61e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f622:	fb0e fe08 	mul.w	lr, lr, r8
 801f626:	10c8      	asrs	r0, r1, #3
 801f628:	00cb      	lsls	r3, r1, #3
 801f62a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f62e:	f10e 0101 	add.w	r1, lr, #1
 801f632:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801f636:	fb00 f008 	mul.w	r0, r0, r8
 801f63a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801f63e:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801f642:	f100 0e01 	add.w	lr, r0, #1
 801f646:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801f64a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f64e:	b2db      	uxtb	r3, r3
 801f650:	b2c9      	uxtb	r1, r1
 801f652:	00d2      	lsls	r2, r2, #3
 801f654:	fb03 f308 	mul.w	r3, r3, r8
 801f658:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 801f65c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f660:	430a      	orrs	r2, r1
 801f662:	1c59      	adds	r1, r3, #1
 801f664:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f668:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f66c:	e748      	b.n	801f500 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f66e:	f112 0801 	adds.w	r8, r2, #1
 801f672:	f53f af4b 	bmi.w	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f676:	4543      	cmp	r3, r8
 801f678:	f6ff af48 	blt.w	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f67c:	f11c 0801 	adds.w	r8, ip, #1
 801f680:	f53f af44 	bmi.w	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f684:	45c6      	cmp	lr, r8
 801f686:	f6ff af41 	blt.w	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f68a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801f68e:	fa0f f28e 	sxth.w	r2, lr
 801f692:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801f696:	9200      	str	r2, [sp, #0]
 801f698:	b21b      	sxth	r3, r3
 801f69a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f69c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f69e:	4639      	mov	r1, r7
 801f6a0:	f7ff fc87 	bl	801efb2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801f6a4:	e732      	b.n	801f50c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f6a6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f6a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f6aa:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801f6ae:	1421      	asrs	r1, r4, #16
 801f6b0:	1433      	asrs	r3, r6, #16
 801f6b2:	fb07 1303 	mla	r3, r7, r3, r1
 801f6b6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f6b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f6bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f6c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f6c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f6c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f6cc:	2a00      	cmp	r2, #0
 801f6ce:	f000 8107 	beq.w	801f8e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 801f6d2:	684d      	ldr	r5, [r1, #4]
 801f6d4:	950d      	str	r5, [sp, #52]	@ 0x34
 801f6d6:	0e2d      	lsrs	r5, r5, #24
 801f6d8:	9514      	str	r5, [sp, #80]	@ 0x50
 801f6da:	b178      	cbz	r0, 801f6fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f6dc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 801f6e0:	3f01      	subs	r7, #1
 801f6e2:	00bf      	lsls	r7, r7, #2
 801f6e4:	3704      	adds	r7, #4
 801f6e6:	eb01 0e07 	add.w	lr, r1, r7
 801f6ea:	59c9      	ldr	r1, [r1, r7]
 801f6ec:	9109      	str	r1, [sp, #36]	@ 0x24
 801f6ee:	0e09      	lsrs	r1, r1, #24
 801f6f0:	9111      	str	r1, [sp, #68]	@ 0x44
 801f6f2:	f8de 1004 	ldr.w	r1, [lr, #4]
 801f6f6:	910e      	str	r1, [sp, #56]	@ 0x38
 801f6f8:	0e09      	lsrs	r1, r1, #24
 801f6fa:	9115      	str	r1, [sp, #84]	@ 0x54
 801f6fc:	b292      	uxth	r2, r2
 801f6fe:	b280      	uxth	r0, r0
 801f700:	fb02 f900 	mul.w	r9, r2, r0
 801f704:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f708:	0112      	lsls	r2, r2, #4
 801f70a:	eba2 0e09 	sub.w	lr, r2, r9
 801f70e:	b280      	uxth	r0, r0
 801f710:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801f714:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f716:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f718:	fa1f fe8e 	uxth.w	lr, lr
 801f71c:	1a09      	subs	r1, r1, r0
 801f71e:	b289      	uxth	r1, r1
 801f720:	fb0e f202 	mul.w	r2, lr, r2
 801f724:	fb01 220c 	mla	r2, r1, ip, r2
 801f728:	fb00 2205 	mla	r2, r0, r5, r2
 801f72c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801f72e:	fb09 2205 	mla	r2, r9, r5, r2
 801f732:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f736:	2a00      	cmp	r2, #0
 801f738:	f000 80c9 	beq.w	801f8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 801f73c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f740:	d019      	beq.n	801f776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 801f742:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f746:	fb0c fa0a 	mul.w	sl, ip, sl
 801f74a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f74e:	fb0c fc03 	mul.w	ip, ip, r3
 801f752:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f756:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f75a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f75e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801f762:	4453      	add	r3, sl
 801f764:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f768:	0a1b      	lsrs	r3, r3, #8
 801f76a:	0a3f      	lsrs	r7, r7, #8
 801f76c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f770:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f774:	433b      	orrs	r3, r7
 801f776:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f778:	2dff      	cmp	r5, #255	@ 0xff
 801f77a:	d020      	beq.n	801f7be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 801f77c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f77e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801f782:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f784:	436f      	muls	r7, r5
 801f786:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f788:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801f78c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f78e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f792:	fb05 fa0a 	mul.w	sl, r5, sl
 801f796:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f79a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f79e:	44bc      	add	ip, r7
 801f7a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f7a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f7b8:	ea4c 050a 	orr.w	r5, ip, sl
 801f7bc:	950d      	str	r5, [sp, #52]	@ 0x34
 801f7be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f7c0:	2dff      	cmp	r5, #255	@ 0xff
 801f7c2:	d020      	beq.n	801f806 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 801f7c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f7c6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801f7ca:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f7cc:	436f      	muls	r7, r5
 801f7ce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f7d0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 801f7d4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f7d6:	fb05 fa0c 	mul.w	sl, r5, ip
 801f7da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f7de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f7e6:	44bc      	add	ip, r7
 801f7e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f7ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f800:	ea4c 050a 	orr.w	r5, ip, sl
 801f804:	9509      	str	r5, [sp, #36]	@ 0x24
 801f806:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801f808:	2dff      	cmp	r5, #255	@ 0xff
 801f80a:	d020      	beq.n	801f84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 801f80c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f80e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801f812:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801f814:	436f      	muls	r7, r5
 801f816:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f818:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 801f81c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801f81e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f822:	fb05 fa0a 	mul.w	sl, r5, sl
 801f826:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f82a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f82e:	44bc      	add	ip, r7
 801f830:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f834:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f83c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f840:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f844:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f848:	ea4c 050a 	orr.w	r5, ip, sl
 801f84c:	950e      	str	r5, [sp, #56]	@ 0x38
 801f84e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f850:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 801f854:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f856:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801f85a:	fb0e f707 	mul.w	r7, lr, r7
 801f85e:	fb01 770c 	mla	r7, r1, ip, r7
 801f862:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801f866:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f868:	fb00 770c 	mla	r7, r0, ip, r7
 801f86c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801f870:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f872:	fb09 770c 	mla	r7, r9, ip, r7
 801f876:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 801f87a:	fb0e fe0c 	mul.w	lr, lr, ip
 801f87e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f882:	fb01 e303 	mla	r3, r1, r3, lr
 801f886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f888:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f88c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f88e:	fb00 330a 	mla	r3, r0, sl, r3
 801f892:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801f896:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f89a:	0a3f      	lsrs	r7, r7, #8
 801f89c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8a0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801f8a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f8a8:	ea47 070c 	orr.w	r7, r7, ip
 801f8ac:	2aff      	cmp	r2, #255	@ 0xff
 801f8ae:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801f8b2:	d11e      	bne.n	801f8f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 801f8b4:	097a      	lsrs	r2, r7, #5
 801f8b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801f8ba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f8be:	f023 0307 	bic.w	r3, r3, #7
 801f8c2:	4313      	orrs	r3, r2
 801f8c4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801f8c8:	431f      	orrs	r7, r3
 801f8ca:	f8a8 7000 	strh.w	r7, [r8]
 801f8ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f8d0:	441c      	add	r4, r3
 801f8d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f8d4:	f108 0802 	add.w	r8, r8, #2
 801f8d8:	441e      	add	r6, r3
 801f8da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8de:	e644      	b.n	801f56a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801f8e0:	2800      	cmp	r0, #0
 801f8e2:	f43f af0b 	beq.w	801f6fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f8e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f8ea:	9109      	str	r1, [sp, #36]	@ 0x24
 801f8ec:	0e09      	lsrs	r1, r1, #24
 801f8ee:	9111      	str	r1, [sp, #68]	@ 0x44
 801f8f0:	e704      	b.n	801f6fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f8f2:	f8b8 1000 	ldrh.w	r1, [r8]
 801f8f6:	43d2      	mvns	r2, r2
 801f8f8:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801f8fc:	fa5f fe82 	uxtb.w	lr, r2
 801f900:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f904:	fb0c fc0e 	mul.w	ip, ip, lr
 801f908:	10c8      	asrs	r0, r1, #3
 801f90a:	00ca      	lsls	r2, r1, #3
 801f90c:	f10c 0101 	add.w	r1, ip, #1
 801f910:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801f914:	0c39      	lsrs	r1, r7, #16
 801f916:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801f91a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f91e:	4911      	ldr	r1, [pc, #68]	@ (801f964 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 801f920:	fb00 f00e 	mul.w	r0, r0, lr
 801f924:	fa5f fc8c 	uxtb.w	ip, ip
 801f928:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801f92c:	b2d2      	uxtb	r2, r2
 801f92e:	1c41      	adds	r1, r0, #1
 801f930:	fb02 f20e 	mul.w	r2, r2, lr
 801f934:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f938:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f93c:	1c51      	adds	r1, r2, #1
 801f93e:	00c0      	lsls	r0, r0, #3
 801f940:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f944:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f948:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f94c:	ea4c 0c00 	orr.w	ip, ip, r0
 801f950:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801f954:	ea47 0c0c 	orr.w	ip, r7, ip
 801f958:	f8a8 c000 	strh.w	ip, [r8]
 801f95c:	e7b7      	b.n	801f8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 801f95e:	b01b      	add	sp, #108	@ 0x6c
 801f960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f964:	fffff800 	.word	0xfffff800

0801f968 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801f968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f96c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 801f970:	2d00      	cmp	r5, #0
 801f972:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801f976:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f97a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 801f97e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 801f982:	fb05 0e03 	mla	lr, r5, r3, r0
 801f986:	f2c0 808c 	blt.w	801faa2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801f98a:	45a9      	cmp	r9, r5
 801f98c:	f340 8089 	ble.w	801faa2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801f990:	2800      	cmp	r0, #0
 801f992:	f2c0 8084 	blt.w	801fa9e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801f996:	4580      	cmp	r8, r0
 801f998:	f340 8081 	ble.w	801fa9e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801f99c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801f9a0:	f01e 0f01 	tst.w	lr, #1
 801f9a4:	5d16      	ldrb	r6, [r2, r4]
 801f9a6:	bf0c      	ite	eq
 801f9a8:	f006 060f 	andeq.w	r6, r6, #15
 801f9ac:	1136      	asrne	r6, r6, #4
 801f9ae:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f9b2:	b2f6      	uxtb	r6, r6
 801f9b4:	1c44      	adds	r4, r0, #1
 801f9b6:	d477      	bmi.n	801faa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801f9b8:	45a0      	cmp	r8, r4
 801f9ba:	dd75      	ble.n	801faa8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801f9bc:	2f00      	cmp	r7, #0
 801f9be:	d075      	beq.n	801faac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 801f9c0:	f10e 0a01 	add.w	sl, lr, #1
 801f9c4:	ea4f 045a 	mov.w	r4, sl, lsr #1
 801f9c8:	f01a 0f01 	tst.w	sl, #1
 801f9cc:	5d14      	ldrb	r4, [r2, r4]
 801f9ce:	bf0c      	ite	eq
 801f9d0:	f004 040f 	andeq.w	r4, r4, #15
 801f9d4:	1124      	asrne	r4, r4, #4
 801f9d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f9da:	b2e4      	uxtb	r4, r4
 801f9dc:	3501      	adds	r5, #1
 801f9de:	d469      	bmi.n	801fab4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801f9e0:	45a9      	cmp	r9, r5
 801f9e2:	dd67      	ble.n	801fab4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801f9e4:	f1bc 0f00 	cmp.w	ip, #0
 801f9e8:	d067      	beq.n	801faba <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 801f9ea:	2800      	cmp	r0, #0
 801f9ec:	db60      	blt.n	801fab0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801f9ee:	4580      	cmp	r8, r0
 801f9f0:	dd5e      	ble.n	801fab0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801f9f2:	eb03 090e 	add.w	r9, r3, lr
 801f9f6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 801f9fa:	f019 0f01 	tst.w	r9, #1
 801f9fe:	5d55      	ldrb	r5, [r2, r5]
 801fa00:	bf0c      	ite	eq
 801fa02:	f005 050f 	andeq.w	r5, r5, #15
 801fa06:	112d      	asrne	r5, r5, #4
 801fa08:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fa0c:	b2ed      	uxtb	r5, r5
 801fa0e:	3001      	adds	r0, #1
 801fa10:	d456      	bmi.n	801fac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801fa12:	4580      	cmp	r8, r0
 801fa14:	dd54      	ble.n	801fac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801fa16:	2f00      	cmp	r7, #0
 801fa18:	d054      	beq.n	801fac4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 801fa1a:	3301      	adds	r3, #1
 801fa1c:	449e      	add	lr, r3
 801fa1e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fa22:	f01e 0f01 	tst.w	lr, #1
 801fa26:	5cd0      	ldrb	r0, [r2, r3]
 801fa28:	bf0c      	ite	eq
 801fa2a:	f000 000f 	andeq.w	r0, r0, #15
 801fa2e:	1100      	asrne	r0, r0, #4
 801fa30:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fa34:	b2c3      	uxtb	r3, r0
 801fa36:	b2ba      	uxth	r2, r7
 801fa38:	fa1f fc8c 	uxth.w	ip, ip
 801fa3c:	fb02 f00c 	mul.w	r0, r2, ip
 801fa40:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801fa44:	0112      	lsls	r2, r2, #4
 801fa46:	fa1f fc8c 	uxth.w	ip, ip
 801fa4a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801fa4e:	1a12      	subs	r2, r2, r0
 801fa50:	eba7 070c 	sub.w	r7, r7, ip
 801fa54:	b292      	uxth	r2, r2
 801fa56:	b2bf      	uxth	r7, r7
 801fa58:	4362      	muls	r2, r4
 801fa5a:	fb06 2207 	mla	r2, r6, r7, r2
 801fa5e:	fb0c 2505 	mla	r5, ip, r5, r2
 801fa62:	fb00 5303 	mla	r3, r0, r3, r5
 801fa66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa6a:	b1b3      	cbz	r3, 801fa9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801fa6c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 801fa70:	435a      	muls	r2, r3
 801fa72:	1c53      	adds	r3, r2, #1
 801fa74:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fa78:	4a2d      	ldr	r2, [pc, #180]	@ (801fb30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801fa7a:	121b      	asrs	r3, r3, #8
 801fa7c:	6812      	ldr	r2, [r2, #0]
 801fa7e:	2bff      	cmp	r3, #255	@ 0xff
 801fa80:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801fa84:	d120      	bne.n	801fac8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 801fa86:	4b2b      	ldr	r3, [pc, #172]	@ (801fb34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801fa88:	0950      	lsrs	r0, r2, #5
 801fa8a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fa8e:	4033      	ands	r3, r6
 801fa90:	4318      	orrs	r0, r3
 801fa92:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fa96:	4302      	orrs	r2, r0
 801fa98:	800a      	strh	r2, [r1, #0]
 801fa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa9e:	2600      	movs	r6, #0
 801faa0:	e788      	b.n	801f9b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 801faa2:	2400      	movs	r4, #0
 801faa4:	4626      	mov	r6, r4
 801faa6:	e799      	b.n	801f9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801faa8:	2400      	movs	r4, #0
 801faaa:	e797      	b.n	801f9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801faac:	463c      	mov	r4, r7
 801faae:	e795      	b.n	801f9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801fab0:	2500      	movs	r5, #0
 801fab2:	e7ac      	b.n	801fa0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 801fab4:	2300      	movs	r3, #0
 801fab6:	461d      	mov	r5, r3
 801fab8:	e7bd      	b.n	801fa36 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801faba:	4663      	mov	r3, ip
 801fabc:	4665      	mov	r5, ip
 801fabe:	e7ba      	b.n	801fa36 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801fac0:	2300      	movs	r3, #0
 801fac2:	e7b8      	b.n	801fa36 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801fac4:	463b      	mov	r3, r7
 801fac6:	e7b6      	b.n	801fa36 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801fac8:	880d      	ldrh	r5, [r1, #0]
 801faca:	b29f      	uxth	r7, r3
 801facc:	122c      	asrs	r4, r5, #8
 801face:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801fad2:	43db      	mvns	r3, r3
 801fad4:	b2db      	uxtb	r3, r3
 801fad6:	fb10 f007 	smulbb	r0, r0, r7
 801fada:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801fade:	fb04 0403 	mla	r4, r4, r3, r0
 801fae2:	b2f6      	uxtb	r6, r6
 801fae4:	10e8      	asrs	r0, r5, #3
 801fae6:	b2d2      	uxtb	r2, r2
 801fae8:	00ed      	lsls	r5, r5, #3
 801faea:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801faee:	fb12 f207 	smulbb	r2, r2, r7
 801faf2:	fb16 f607 	smulbb	r6, r6, r7
 801faf6:	b2ed      	uxtb	r5, r5
 801faf8:	b2a4      	uxth	r4, r4
 801fafa:	fb00 6603 	mla	r6, r0, r3, r6
 801fafe:	fb05 2303 	mla	r3, r5, r3, r2
 801fb02:	b29a      	uxth	r2, r3
 801fb04:	1c63      	adds	r3, r4, #1
 801fb06:	b2b0      	uxth	r0, r6
 801fb08:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801fb0c:	1c53      	adds	r3, r2, #1
 801fb0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fb12:	1c42      	adds	r2, r0, #1
 801fb14:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fb18:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801fb1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fb20:	0940      	lsrs	r0, r0, #5
 801fb22:	4323      	orrs	r3, r4
 801fb24:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fb28:	4303      	orrs	r3, r0
 801fb2a:	800b      	strh	r3, [r1, #0]
 801fb2c:	e7b5      	b.n	801fa9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801fb2e:	bf00      	nop
 801fb30:	2002b034 	.word	0x2002b034
 801fb34:	00fff800 	.word	0x00fff800

0801fb38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb3c:	b097      	sub	sp, #92	@ 0x5c
 801fb3e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 801fb42:	9214      	str	r2, [sp, #80]	@ 0x50
 801fb44:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb46:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801fb48:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801fb4c:	910d      	str	r1, [sp, #52]	@ 0x34
 801fb4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fb50:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801fb54:	9015      	str	r0, [sp, #84]	@ 0x54
 801fb56:	6850      	ldr	r0, [r2, #4]
 801fb58:	6812      	ldr	r2, [r2, #0]
 801fb5a:	fb00 1303 	mla	r3, r0, r3, r1
 801fb5e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801fb62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fb64:	689b      	ldr	r3, [r3, #8]
 801fb66:	3301      	adds	r3, #1
 801fb68:	f023 0301 	bic.w	r3, r3, #1
 801fb6c:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fb70:	681f      	ldr	r7, [r3, #0]
 801fb72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	dc03      	bgt.n	801fb80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fb78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	f340 8287 	ble.w	802008e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fb80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fb82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb8a:	1e48      	subs	r0, r1, #1
 801fb8c:	f102 3cff 	add.w	ip, r2, #4294967295
 801fb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	f340 80c4 	ble.w	801fd20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb98:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fb9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fba0:	d406      	bmi.n	801fbb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fba2:	4586      	cmp	lr, r0
 801fba4:	da04      	bge.n	801fbb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	db02      	blt.n	801fbb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fbaa:	4563      	cmp	r3, ip
 801fbac:	f2c0 80b9 	blt.w	801fd22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fbb0:	f11e 0e01 	adds.w	lr, lr, #1
 801fbb4:	f100 80aa 	bmi.w	801fd0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fbb8:	4571      	cmp	r1, lr
 801fbba:	f2c0 80a7 	blt.w	801fd0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fbbe:	3301      	adds	r3, #1
 801fbc0:	f100 80a4 	bmi.w	801fd0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fbc4:	429a      	cmp	r2, r3
 801fbc6:	f2c0 80a1 	blt.w	801fd0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbcc:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 801fbd0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fbd2:	46c8      	mov	r8, r9
 801fbd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	f340 80c3 	ble.w	801fd62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fbdc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fbde:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fbe2:	1423      	asrs	r3, r4, #16
 801fbe4:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fbe8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fbec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fbf0:	f100 814d 	bmi.w	801fe8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fbf4:	f10c 3bff 	add.w	fp, ip, #4294967295
 801fbf8:	455b      	cmp	r3, fp
 801fbfa:	f280 8148 	bge.w	801fe8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fbfe:	2800      	cmp	r0, #0
 801fc00:	f2c0 8145 	blt.w	801fe8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fc04:	f10e 3bff 	add.w	fp, lr, #4294967295
 801fc08:	4558      	cmp	r0, fp
 801fc0a:	f280 8140 	bge.w	801fe8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fc0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fc10:	fb00 3305 	mla	r3, r0, r5, r3
 801fc14:	0858      	lsrs	r0, r3, #1
 801fc16:	07dd      	lsls	r5, r3, #31
 801fc18:	f817 c000 	ldrb.w	ip, [r7, r0]
 801fc1c:	bf54      	ite	pl
 801fc1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fc22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fc26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fc2a:	fa5f fc8c 	uxtb.w	ip, ip
 801fc2e:	2a00      	cmp	r2, #0
 801fc30:	f000 80db 	beq.w	801fdea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801fc34:	1c58      	adds	r0, r3, #1
 801fc36:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fc3a:	07c0      	lsls	r0, r0, #31
 801fc3c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801fc40:	bf54      	ite	pl
 801fc42:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fc46:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fc4a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fc4e:	fa5f f08e 	uxtb.w	r0, lr
 801fc52:	9010      	str	r0, [sp, #64]	@ 0x40
 801fc54:	b1c9      	cbz	r1, 801fc8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fc56:	4453      	add	r3, sl
 801fc58:	0858      	lsrs	r0, r3, #1
 801fc5a:	07dd      	lsls	r5, r3, #31
 801fc5c:	5c38      	ldrb	r0, [r7, r0]
 801fc5e:	bf54      	ite	pl
 801fc60:	f000 000f 	andpl.w	r0, r0, #15
 801fc64:	1100      	asrmi	r0, r0, #4
 801fc66:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fc6a:	3301      	adds	r3, #1
 801fc6c:	b2c0      	uxtb	r0, r0
 801fc6e:	900b      	str	r0, [sp, #44]	@ 0x2c
 801fc70:	0858      	lsrs	r0, r3, #1
 801fc72:	07dd      	lsls	r5, r3, #31
 801fc74:	f817 e000 	ldrb.w	lr, [r7, r0]
 801fc78:	bf54      	ite	pl
 801fc7a:	f00e 030f 	andpl.w	r3, lr, #15
 801fc7e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801fc82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fc86:	b2db      	uxtb	r3, r3
 801fc88:	9311      	str	r3, [sp, #68]	@ 0x44
 801fc8a:	b292      	uxth	r2, r2
 801fc8c:	b289      	uxth	r1, r1
 801fc8e:	fb02 f301 	mul.w	r3, r2, r1
 801fc92:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fc96:	0112      	lsls	r2, r2, #4
 801fc98:	b289      	uxth	r1, r1
 801fc9a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801fc9e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801fca0:	1ad2      	subs	r2, r2, r3
 801fca2:	1a40      	subs	r0, r0, r1
 801fca4:	b292      	uxth	r2, r2
 801fca6:	436a      	muls	r2, r5
 801fca8:	b280      	uxth	r0, r0
 801fcaa:	fb0c 2c00 	mla	ip, ip, r0, r2
 801fcae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fcb0:	fb01 c102 	mla	r1, r1, r2, ip
 801fcb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fcb6:	fb03 1302 	mla	r3, r3, r2, r1
 801fcba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fcbe:	b1db      	cbz	r3, 801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fcc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fcc2:	4353      	muls	r3, r2
 801fcc4:	1c5a      	adds	r2, r3, #1
 801fcc6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fcca:	4ac6      	ldr	r2, [pc, #792]	@ (801ffe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 801fccc:	121b      	asrs	r3, r3, #8
 801fcce:	6812      	ldr	r2, [r2, #0]
 801fcd0:	2bff      	cmp	r3, #255	@ 0xff
 801fcd2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801fcd6:	f040 8099 	bne.w	801fe0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801fcda:	0953      	lsrs	r3, r2, #5
 801fcdc:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801fce0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fce4:	f02c 0c07 	bic.w	ip, ip, #7
 801fce8:	ea43 0c0c 	orr.w	ip, r3, ip
 801fcec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fcf0:	ea4c 0202 	orr.w	r2, ip, r2
 801fcf4:	f8a8 2000 	strh.w	r2, [r8]
 801fcf8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fcfa:	441c      	add	r4, r3
 801fcfc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fcfe:	441e      	add	r6, r3
 801fd00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fd02:	3b01      	subs	r3, #1
 801fd04:	f108 0802 	add.w	r8, r8, #2
 801fd08:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd0a:	e763      	b.n	801fbd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fd0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fd0e:	441c      	add	r4, r3
 801fd10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd12:	441e      	add	r6, r3
 801fd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd16:	3b01      	subs	r3, #1
 801fd18:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd1a:	f109 0902 	add.w	r9, r9, #2
 801fd1e:	e737      	b.n	801fb90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fd20:	d024      	beq.n	801fd6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd24:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801fd26:	3b01      	subs	r3, #1
 801fd28:	fb00 4003 	mla	r0, r0, r3, r4
 801fd2c:	1400      	asrs	r0, r0, #16
 801fd2e:	f53f af4c 	bmi.w	801fbca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd32:	3901      	subs	r1, #1
 801fd34:	4288      	cmp	r0, r1
 801fd36:	f6bf af48 	bge.w	801fbca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd3a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801fd3c:	fb01 6303 	mla	r3, r1, r3, r6
 801fd40:	141b      	asrs	r3, r3, #16
 801fd42:	f53f af42 	bmi.w	801fbca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd46:	3a01      	subs	r2, #1
 801fd48:	4293      	cmp	r3, r2
 801fd4a:	f6bf af3e 	bge.w	801fbca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd4e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801fd52:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801fd56:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd58:	46c8      	mov	r8, r9
 801fd5a:	f1bb 0f00 	cmp.w	fp, #0
 801fd5e:	f300 80b7 	bgt.w	801fed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801fd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd64:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801fd68:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801fd6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	f340 818d 	ble.w	802008e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fd74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fd7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fd82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd8e:	eef0 6a62 	vmov.f32	s13, s5
 801fd92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd9e:	ee16 4a90 	vmov	r4, s13
 801fda2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fda6:	eef0 6a43 	vmov.f32	s13, s6
 801fdaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdae:	ee12 2a90 	vmov	r2, s5
 801fdb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdba:	ee13 2a10 	vmov	r2, s6
 801fdbe:	9323      	str	r3, [sp, #140]	@ 0x8c
 801fdc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fdc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdc6:	9324      	str	r3, [sp, #144]	@ 0x90
 801fdc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fdca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fdcc:	3b01      	subs	r3, #1
 801fdce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdd2:	930d      	str	r3, [sp, #52]	@ 0x34
 801fdd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fdd6:	bf08      	it	eq
 801fdd8:	4613      	moveq	r3, r2
 801fdda:	ee16 6a90 	vmov	r6, s13
 801fdde:	9309      	str	r3, [sp, #36]	@ 0x24
 801fde0:	eeb0 3a67 	vmov.f32	s6, s15
 801fde4:	eef0 2a47 	vmov.f32	s5, s14
 801fde8:	e6c3      	b.n	801fb72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fdea:	2900      	cmp	r1, #0
 801fdec:	f43f af4d 	beq.w	801fc8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fdf0:	eb0a 0003 	add.w	r0, sl, r3
 801fdf4:	0843      	lsrs	r3, r0, #1
 801fdf6:	07c0      	lsls	r0, r0, #31
 801fdf8:	5cfb      	ldrb	r3, [r7, r3]
 801fdfa:	bf54      	ite	pl
 801fdfc:	f003 030f 	andpl.w	r3, r3, #15
 801fe00:	111b      	asrmi	r3, r3, #4
 801fe02:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fe06:	b2db      	uxtb	r3, r3
 801fe08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fe0a:	e73e      	b.n	801fc8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fe0c:	f8b8 e000 	ldrh.w	lr, [r8]
 801fe10:	fa1f fb83 	uxth.w	fp, r3
 801fe14:	ea4f 202e 	mov.w	r0, lr, asr #8
 801fe18:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801fe1c:	43db      	mvns	r3, r3
 801fe1e:	b2db      	uxtb	r3, r3
 801fe20:	fb11 f10b 	smulbb	r1, r1, fp
 801fe24:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801fe28:	fb00 1003 	mla	r0, r0, r3, r1
 801fe2c:	fa5f fc8c 	uxtb.w	ip, ip
 801fe30:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801fe34:	b2d2      	uxtb	r2, r2
 801fe36:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe3a:	b280      	uxth	r0, r0
 801fe3c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801fe40:	fb1c fc0b 	smulbb	ip, ip, fp
 801fe44:	fa5f fe8e 	uxtb.w	lr, lr
 801fe48:	fb12 fb0b 	smulbb	fp, r2, fp
 801fe4c:	fb01 cc03 	mla	ip, r1, r3, ip
 801fe50:	fb0e bb03 	mla	fp, lr, r3, fp
 801fe54:	1c43      	adds	r3, r0, #1
 801fe56:	fa1f fc8c 	uxth.w	ip, ip
 801fe5a:	fa1f fb8b 	uxth.w	fp, fp
 801fe5e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fe62:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 801fe66:	f10c 0101 	add.w	r1, ip, #1
 801fe6a:	f10b 0001 	add.w	r0, fp, #1
 801fe6e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801fe72:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801fe76:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801fe7a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fe7e:	4318      	orrs	r0, r3
 801fe80:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801fe84:	ea40 000c 	orr.w	r0, r0, ip
 801fe88:	f8a8 0000 	strh.w	r0, [r8]
 801fe8c:	e734      	b.n	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fe8e:	f113 0b01 	adds.w	fp, r3, #1
 801fe92:	f53f af31 	bmi.w	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fe96:	45dc      	cmp	ip, fp
 801fe98:	f6ff af2e 	blt.w	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fe9c:	f110 0b01 	adds.w	fp, r0, #1
 801fea0:	f53f af2a 	bmi.w	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fea4:	45de      	cmp	lr, fp
 801fea6:	f6ff af27 	blt.w	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801feaa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801feac:	9302      	str	r3, [sp, #8]
 801feae:	fa0f f38e 	sxth.w	r3, lr
 801feb2:	9301      	str	r3, [sp, #4]
 801feb4:	fa0f f38c 	sxth.w	r3, ip
 801feb8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801febc:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fec0:	9300      	str	r3, [sp, #0]
 801fec2:	463a      	mov	r2, r7
 801fec4:	4653      	mov	r3, sl
 801fec6:	4641      	mov	r1, r8
 801fec8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801feca:	f7ff fd4d 	bl	801f968 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801fece:	e713      	b.n	801fcf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fed0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fed2:	1422      	asrs	r2, r4, #16
 801fed4:	1433      	asrs	r3, r6, #16
 801fed6:	fb05 2303 	mla	r3, r5, r3, r2
 801feda:	085a      	lsrs	r2, r3, #1
 801fedc:	07dd      	lsls	r5, r3, #31
 801fede:	5cba      	ldrb	r2, [r7, r2]
 801fee0:	bf54      	ite	pl
 801fee2:	f002 020f 	andpl.w	r2, r2, #15
 801fee6:	1112      	asrmi	r2, r2, #4
 801fee8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801feec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801fef0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fef4:	b2d2      	uxtb	r2, r2
 801fef6:	2900      	cmp	r1, #0
 801fef8:	d076      	beq.n	801ffe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801fefa:	f103 0e01 	add.w	lr, r3, #1
 801fefe:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801ff02:	f01e 0f01 	tst.w	lr, #1
 801ff06:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff0a:	bf0c      	ite	eq
 801ff0c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ff10:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ff14:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff18:	fa5f f58c 	uxtb.w	r5, ip
 801ff1c:	9512      	str	r5, [sp, #72]	@ 0x48
 801ff1e:	b300      	cbz	r0, 801ff62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff20:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ff22:	442b      	add	r3, r5
 801ff24:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ff28:	07dd      	lsls	r5, r3, #31
 801ff2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff2e:	bf54      	ite	pl
 801ff30:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ff34:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ff38:	3301      	adds	r3, #1
 801ff3a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff3e:	fa5f f58c 	uxtb.w	r5, ip
 801ff42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ff46:	950c      	str	r5, [sp, #48]	@ 0x30
 801ff48:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ff4c:	07dd      	lsls	r5, r3, #31
 801ff4e:	bf54      	ite	pl
 801ff50:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ff54:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ff58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ff5c:	fa5f f38c 	uxtb.w	r3, ip
 801ff60:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ff62:	b289      	uxth	r1, r1
 801ff64:	b280      	uxth	r0, r0
 801ff66:	fb01 f300 	mul.w	r3, r1, r0
 801ff6a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801ff6e:	0109      	lsls	r1, r1, #4
 801ff70:	b280      	uxth	r0, r0
 801ff72:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801ff76:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ff78:	1ac9      	subs	r1, r1, r3
 801ff7a:	ebac 0c00 	sub.w	ip, ip, r0
 801ff7e:	b289      	uxth	r1, r1
 801ff80:	4369      	muls	r1, r5
 801ff82:	fa1f fc8c 	uxth.w	ip, ip
 801ff86:	fb02 120c 	mla	r2, r2, ip, r1
 801ff8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ff8c:	fb00 2001 	mla	r0, r0, r1, r2
 801ff90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ff92:	fb03 0302 	mla	r3, r3, r2, r0
 801ff96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ff9a:	b1d3      	cbz	r3, 801ffd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801ff9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff9e:	4353      	muls	r3, r2
 801ffa0:	1c5a      	adds	r2, r3, #1
 801ffa2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffa6:	4a0f      	ldr	r2, [pc, #60]	@ (801ffe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 801ffa8:	121b      	asrs	r3, r3, #8
 801ffaa:	6812      	ldr	r2, [r2, #0]
 801ffac:	2bff      	cmp	r3, #255	@ 0xff
 801ffae:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801ffb2:	d12d      	bne.n	8020010 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ffb4:	0953      	lsrs	r3, r2, #5
 801ffb6:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801ffba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ffbe:	f02c 0c07 	bic.w	ip, ip, #7
 801ffc2:	ea43 0c0c 	orr.w	ip, r3, ip
 801ffc6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ffca:	ea4c 0202 	orr.w	r2, ip, r2
 801ffce:	f8a8 2000 	strh.w	r2, [r8]
 801ffd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ffd4:	441c      	add	r4, r3
 801ffd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ffd8:	f108 0802 	add.w	r8, r8, #2
 801ffdc:	441e      	add	r6, r3
 801ffde:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ffe2:	e6ba      	b.n	801fd5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801ffe4:	2002b034 	.word	0x2002b034
 801ffe8:	2800      	cmp	r0, #0
 801ffea:	d0ba      	beq.n	801ff62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ffec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ffee:	442b      	add	r3, r5
 801fff0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fff4:	07db      	lsls	r3, r3, #31
 801fff6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fffa:	bf54      	ite	pl
 801fffc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020000:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020004:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020008:	fa5f f38c 	uxtb.w	r3, ip
 802000c:	930c      	str	r3, [sp, #48]	@ 0x30
 802000e:	e7a8      	b.n	801ff62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020010:	f8b8 e000 	ldrh.w	lr, [r8]
 8020014:	fa1f fa83 	uxth.w	sl, r3
 8020018:	ea4f 202e 	mov.w	r0, lr, asr #8
 802001c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020020:	43db      	mvns	r3, r3
 8020022:	b2db      	uxtb	r3, r3
 8020024:	fb11 f10a 	smulbb	r1, r1, sl
 8020028:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802002c:	fb00 1003 	mla	r0, r0, r3, r1
 8020030:	b2d2      	uxtb	r2, r2
 8020032:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8020036:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802003a:	fa5f fe8e 	uxtb.w	lr, lr
 802003e:	fb12 f20a 	smulbb	r2, r2, sl
 8020042:	fb0e 2203 	mla	r2, lr, r3, r2
 8020046:	fa5f fc8c 	uxtb.w	ip, ip
 802004a:	b280      	uxth	r0, r0
 802004c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020050:	b292      	uxth	r2, r2
 8020052:	fb1c fc0a 	smulbb	ip, ip, sl
 8020056:	fb01 cc03 	mla	ip, r1, r3, ip
 802005a:	1c43      	adds	r3, r0, #1
 802005c:	1c51      	adds	r1, r2, #1
 802005e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020062:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8020066:	fa1f fc8c 	uxth.w	ip, ip
 802006a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802006e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8020072:	4308      	orrs	r0, r1
 8020074:	f10c 0101 	add.w	r1, ip, #1
 8020078:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802007c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020080:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8020084:	ea40 000c 	orr.w	r0, r0, ip
 8020088:	f8a8 0000 	strh.w	r0, [r8]
 802008c:	e7a1      	b.n	801ffd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802008e:	b017      	add	sp, #92	@ 0x5c
 8020090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020094 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8020094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020098:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802009c:	2d00      	cmp	r5, #0
 802009e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80200a2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80200a6:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80200aa:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80200ae:	fb05 0e03 	mla	lr, r5, r3, r0
 80200b2:	f2c0 80b0 	blt.w	8020216 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80200b6:	45a9      	cmp	r9, r5
 80200b8:	f340 80ad 	ble.w	8020216 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80200bc:	2800      	cmp	r0, #0
 80200be:	f2c0 80a8 	blt.w	8020212 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80200c2:	4580      	cmp	r8, r0
 80200c4:	f340 80a5 	ble.w	8020212 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80200c8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80200cc:	f01e 0f01 	tst.w	lr, #1
 80200d0:	5d16      	ldrb	r6, [r2, r4]
 80200d2:	bf0c      	ite	eq
 80200d4:	f006 060f 	andeq.w	r6, r6, #15
 80200d8:	1136      	asrne	r6, r6, #4
 80200da:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80200de:	b2f6      	uxtb	r6, r6
 80200e0:	1c44      	adds	r4, r0, #1
 80200e2:	f100 809b 	bmi.w	802021c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80200e6:	45a0      	cmp	r8, r4
 80200e8:	f340 8098 	ble.w	802021c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80200ec:	2f00      	cmp	r7, #0
 80200ee:	f000 8097 	beq.w	8020220 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80200f2:	f10e 0a01 	add.w	sl, lr, #1
 80200f6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80200fa:	f01a 0f01 	tst.w	sl, #1
 80200fe:	5d14      	ldrb	r4, [r2, r4]
 8020100:	bf0c      	ite	eq
 8020102:	f004 040f 	andeq.w	r4, r4, #15
 8020106:	1124      	asrne	r4, r4, #4
 8020108:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802010c:	b2e4      	uxtb	r4, r4
 802010e:	3501      	adds	r5, #1
 8020110:	f100 808a 	bmi.w	8020228 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8020114:	45a9      	cmp	r9, r5
 8020116:	f340 8087 	ble.w	8020228 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802011a:	f1bc 0f00 	cmp.w	ip, #0
 802011e:	f000 8086 	beq.w	802022e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8020122:	2800      	cmp	r0, #0
 8020124:	db7e      	blt.n	8020224 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8020126:	4580      	cmp	r8, r0
 8020128:	dd7c      	ble.n	8020224 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802012a:	eb03 090e 	add.w	r9, r3, lr
 802012e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8020132:	f019 0f01 	tst.w	r9, #1
 8020136:	5d55      	ldrb	r5, [r2, r5]
 8020138:	bf0c      	ite	eq
 802013a:	f005 050f 	andeq.w	r5, r5, #15
 802013e:	112d      	asrne	r5, r5, #4
 8020140:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020144:	b2ed      	uxtb	r5, r5
 8020146:	3001      	adds	r0, #1
 8020148:	d474      	bmi.n	8020234 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802014a:	4580      	cmp	r8, r0
 802014c:	dd72      	ble.n	8020234 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802014e:	2f00      	cmp	r7, #0
 8020150:	d072      	beq.n	8020238 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8020152:	3301      	adds	r3, #1
 8020154:	449e      	add	lr, r3
 8020156:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802015a:	f01e 0f01 	tst.w	lr, #1
 802015e:	5cd0      	ldrb	r0, [r2, r3]
 8020160:	bf0c      	ite	eq
 8020162:	f000 000f 	andeq.w	r0, r0, #15
 8020166:	1100      	asrne	r0, r0, #4
 8020168:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802016c:	b2c3      	uxtb	r3, r0
 802016e:	b2ba      	uxth	r2, r7
 8020170:	fa1f fc8c 	uxth.w	ip, ip
 8020174:	fb02 f00c 	mul.w	r0, r2, ip
 8020178:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802017c:	0112      	lsls	r2, r2, #4
 802017e:	fa1f fc8c 	uxth.w	ip, ip
 8020182:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020186:	1a12      	subs	r2, r2, r0
 8020188:	eba7 070c 	sub.w	r7, r7, ip
 802018c:	b292      	uxth	r2, r2
 802018e:	b2bf      	uxth	r7, r7
 8020190:	4362      	muls	r2, r4
 8020192:	fb06 2207 	mla	r2, r6, r7, r2
 8020196:	fb0c 2505 	mla	r5, ip, r5, r2
 802019a:	fb00 5303 	mla	r3, r0, r3, r5
 802019e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80201a2:	b3a3      	cbz	r3, 802020e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80201a4:	4a25      	ldr	r2, [pc, #148]	@ (802023c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80201a6:	880e      	ldrh	r6, [r1, #0]
 80201a8:	6815      	ldr	r5, [r2, #0]
 80201aa:	1234      	asrs	r4, r6, #8
 80201ac:	b29a      	uxth	r2, r3
 80201ae:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80201b2:	43db      	mvns	r3, r3
 80201b4:	b2db      	uxtb	r3, r3
 80201b6:	fb10 f002 	smulbb	r0, r0, r2
 80201ba:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80201be:	fb04 0403 	mla	r4, r4, r3, r0
 80201c2:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80201c6:	10f0      	asrs	r0, r6, #3
 80201c8:	b2ed      	uxtb	r5, r5
 80201ca:	00f6      	lsls	r6, r6, #3
 80201cc:	fb17 f702 	smulbb	r7, r7, r2
 80201d0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80201d4:	fb15 f202 	smulbb	r2, r5, r2
 80201d8:	b2f6      	uxtb	r6, r6
 80201da:	b2a4      	uxth	r4, r4
 80201dc:	fb00 7003 	mla	r0, r0, r3, r7
 80201e0:	fb06 2303 	mla	r3, r6, r3, r2
 80201e4:	b29a      	uxth	r2, r3
 80201e6:	1c63      	adds	r3, r4, #1
 80201e8:	b280      	uxth	r0, r0
 80201ea:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80201ee:	1c53      	adds	r3, r2, #1
 80201f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80201f4:	1c42      	adds	r2, r0, #1
 80201f6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80201fa:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80201fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020202:	0940      	lsrs	r0, r0, #5
 8020204:	4323      	orrs	r3, r4
 8020206:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802020a:	4303      	orrs	r3, r0
 802020c:	800b      	strh	r3, [r1, #0]
 802020e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020212:	2600      	movs	r6, #0
 8020214:	e764      	b.n	80200e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8020216:	2400      	movs	r4, #0
 8020218:	4626      	mov	r6, r4
 802021a:	e778      	b.n	802010e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802021c:	2400      	movs	r4, #0
 802021e:	e776      	b.n	802010e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8020220:	463c      	mov	r4, r7
 8020222:	e774      	b.n	802010e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8020224:	2500      	movs	r5, #0
 8020226:	e78e      	b.n	8020146 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8020228:	2300      	movs	r3, #0
 802022a:	461d      	mov	r5, r3
 802022c:	e79f      	b.n	802016e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802022e:	4663      	mov	r3, ip
 8020230:	4665      	mov	r5, ip
 8020232:	e79c      	b.n	802016e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8020234:	2300      	movs	r3, #0
 8020236:	e79a      	b.n	802016e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8020238:	463b      	mov	r3, r7
 802023a:	e798      	b.n	802016e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802023c:	2002b034 	.word	0x2002b034

08020240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020244:	b093      	sub	sp, #76	@ 0x4c
 8020246:	461d      	mov	r5, r3
 8020248:	920c      	str	r2, [sp, #48]	@ 0x30
 802024a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802024c:	9107      	str	r1, [sp, #28]
 802024e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8020252:	9011      	str	r0, [sp, #68]	@ 0x44
 8020254:	6850      	ldr	r0, [r2, #4]
 8020256:	6812      	ldr	r2, [r2, #0]
 8020258:	fb00 1303 	mla	r3, r0, r3, r1
 802025c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020260:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020262:	689b      	ldr	r3, [r3, #8]
 8020264:	3301      	adds	r3, #1
 8020266:	f023 0301 	bic.w	r3, r3, #1
 802026a:	9306      	str	r3, [sp, #24]
 802026c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802026e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8020272:	681f      	ldr	r7, [r3, #0]
 8020274:	9b07      	ldr	r3, [sp, #28]
 8020276:	2b00      	cmp	r3, #0
 8020278:	dc03      	bgt.n	8020282 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802027a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802027c:	2b00      	cmp	r3, #0
 802027e:	f340 8267 	ble.w	8020750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8020282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020284:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020288:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802028c:	1e48      	subs	r0, r1, #1
 802028e:	f102 3cff 	add.w	ip, r2, #4294967295
 8020292:	2d00      	cmp	r5, #0
 8020294:	f340 80b8 	ble.w	8020408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020298:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802029c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80202a0:	d406      	bmi.n	80202b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202a2:	4586      	cmp	lr, r0
 80202a4:	da04      	bge.n	80202b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	db02      	blt.n	80202b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202aa:	4563      	cmp	r3, ip
 80202ac:	f2c0 80ad 	blt.w	802040a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80202b0:	f11e 0e01 	adds.w	lr, lr, #1
 80202b4:	f100 80a0 	bmi.w	80203f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80202b8:	4571      	cmp	r1, lr
 80202ba:	f2c0 809d 	blt.w	80203f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80202be:	3301      	adds	r3, #1
 80202c0:	f100 809a 	bmi.w	80203f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80202c4:	429a      	cmp	r2, r3
 80202c6:	f2c0 8097 	blt.w	80203f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80202ca:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80202ce:	9509      	str	r5, [sp, #36]	@ 0x24
 80202d0:	46c8      	mov	r8, r9
 80202d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	f340 80b6 	ble.w	8020446 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80202da:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80202de:	9308      	str	r3, [sp, #32]
 80202e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80202e2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80202e6:	1423      	asrs	r3, r4, #16
 80202e8:	ea4f 4026 	mov.w	r0, r6, asr #16
 80202ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80202f0:	f100 813e 	bmi.w	8020570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80202f4:	f10c 3bff 	add.w	fp, ip, #4294967295
 80202f8:	455b      	cmp	r3, fp
 80202fa:	f280 8139 	bge.w	8020570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80202fe:	2800      	cmp	r0, #0
 8020300:	f2c0 8136 	blt.w	8020570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020304:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020308:	4558      	cmp	r0, fp
 802030a:	f280 8131 	bge.w	8020570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802030e:	9a06      	ldr	r2, [sp, #24]
 8020310:	fb00 3302 	mla	r3, r0, r2, r3
 8020314:	0858      	lsrs	r0, r3, #1
 8020316:	07da      	lsls	r2, r3, #31
 8020318:	f817 c000 	ldrb.w	ip, [r7, r0]
 802031c:	9a08      	ldr	r2, [sp, #32]
 802031e:	bf54      	ite	pl
 8020320:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020324:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020328:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802032c:	fa5f fc8c 	uxtb.w	ip, ip
 8020330:	2a00      	cmp	r2, #0
 8020332:	f000 80cb 	beq.w	80204cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020336:	1c58      	adds	r0, r3, #1
 8020338:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802033c:	07c0      	lsls	r0, r0, #31
 802033e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020342:	bf54      	ite	pl
 8020344:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020348:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802034c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020350:	fa5f fe8e 	uxtb.w	lr, lr
 8020354:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8020358:	b1b9      	cbz	r1, 802038a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802035a:	4453      	add	r3, sl
 802035c:	0858      	lsrs	r0, r3, #1
 802035e:	07da      	lsls	r2, r3, #31
 8020360:	5c38      	ldrb	r0, [r7, r0]
 8020362:	bf54      	ite	pl
 8020364:	f000 000f 	andpl.w	r0, r0, #15
 8020368:	1100      	asrmi	r0, r0, #4
 802036a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802036e:	b2c0      	uxtb	r0, r0
 8020370:	900a      	str	r0, [sp, #40]	@ 0x28
 8020372:	1c58      	adds	r0, r3, #1
 8020374:	0843      	lsrs	r3, r0, #1
 8020376:	07c2      	lsls	r2, r0, #31
 8020378:	5cfb      	ldrb	r3, [r7, r3]
 802037a:	bf54      	ite	pl
 802037c:	f003 030f 	andpl.w	r3, r3, #15
 8020380:	111b      	asrmi	r3, r3, #4
 8020382:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020386:	b2db      	uxtb	r3, r3
 8020388:	930e      	str	r3, [sp, #56]	@ 0x38
 802038a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802038e:	b289      	uxth	r1, r1
 8020390:	fb02 f301 	mul.w	r3, r2, r1
 8020394:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020398:	0112      	lsls	r2, r2, #4
 802039a:	b289      	uxth	r1, r1
 802039c:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80203a0:	1a40      	subs	r0, r0, r1
 80203a2:	fa1f fe80 	uxth.w	lr, r0
 80203a6:	1ad2      	subs	r2, r2, r3
 80203a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80203aa:	b292      	uxth	r2, r2
 80203ac:	4342      	muls	r2, r0
 80203ae:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80203b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80203b4:	fb01 c102 	mla	r1, r1, r2, ip
 80203b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80203ba:	fb03 1302 	mla	r3, r3, r2, r1
 80203be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80203c2:	2bff      	cmp	r3, #255	@ 0xff
 80203c4:	f040 8093 	bne.w	80204ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80203c8:	4bbe      	ldr	r3, [pc, #760]	@ (80206c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80203ca:	681a      	ldr	r2, [r3, #0]
 80203cc:	4bbe      	ldr	r3, [pc, #760]	@ (80206c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80203ce:	0951      	lsrs	r1, r2, #5
 80203d0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80203d4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80203d8:	430b      	orrs	r3, r1
 80203da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80203de:	4313      	orrs	r3, r2
 80203e0:	f8a8 3000 	strh.w	r3, [r8]
 80203e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80203e6:	441c      	add	r4, r3
 80203e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80203ea:	441e      	add	r6, r3
 80203ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203ee:	3b01      	subs	r3, #1
 80203f0:	f108 0802 	add.w	r8, r8, #2
 80203f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80203f6:	e76c      	b.n	80202d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80203f8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80203fa:	441c      	add	r4, r3
 80203fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80203fe:	3d01      	subs	r5, #1
 8020400:	441e      	add	r6, r3
 8020402:	f109 0902 	add.w	r9, r9, #2
 8020406:	e744      	b.n	8020292 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020408:	d021      	beq.n	802044e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802040a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802040c:	1e6b      	subs	r3, r5, #1
 802040e:	fb00 4003 	mla	r0, r0, r3, r4
 8020412:	1400      	asrs	r0, r0, #16
 8020414:	f53f af59 	bmi.w	80202ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020418:	3901      	subs	r1, #1
 802041a:	4288      	cmp	r0, r1
 802041c:	f6bf af55 	bge.w	80202ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020420:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8020422:	fb01 6303 	mla	r3, r1, r3, r6
 8020426:	141b      	asrs	r3, r3, #16
 8020428:	f53f af4f 	bmi.w	80202ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802042c:	3a01      	subs	r2, #1
 802042e:	4293      	cmp	r3, r2
 8020430:	f6bf af4b 	bge.w	80202ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020434:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020438:	9308      	str	r3, [sp, #32]
 802043a:	46a8      	mov	r8, r5
 802043c:	46ce      	mov	lr, r9
 802043e:	f1b8 0f00 	cmp.w	r8, #0
 8020442:	f300 80b5 	bgt.w	80205b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020446:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802044a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802044e:	9b07      	ldr	r3, [sp, #28]
 8020450:	2b00      	cmp	r3, #0
 8020452:	f340 817d 	ble.w	8020750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8020456:	ee30 0a04 	vadd.f32	s0, s0, s8
 802045a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802045e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020462:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020464:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020468:	ee31 1a05 	vadd.f32	s2, s2, s10
 802046c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020470:	eef0 6a62 	vmov.f32	s13, s5
 8020474:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020478:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802047c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020480:	ee16 4a90 	vmov	r4, s13
 8020484:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020488:	eef0 6a43 	vmov.f32	s13, s6
 802048c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020490:	ee12 2a90 	vmov	r2, s5
 8020494:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020498:	fb92 f3f3 	sdiv	r3, r2, r3
 802049c:	ee13 2a10 	vmov	r2, s6
 80204a0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80204a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80204a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80204a8:	9320      	str	r3, [sp, #128]	@ 0x80
 80204aa:	9b07      	ldr	r3, [sp, #28]
 80204ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80204ae:	3b01      	subs	r3, #1
 80204b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204b4:	9307      	str	r3, [sp, #28]
 80204b6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80204b8:	ee16 6a90 	vmov	r6, s13
 80204bc:	bf14      	ite	ne
 80204be:	461d      	movne	r5, r3
 80204c0:	4615      	moveq	r5, r2
 80204c2:	eeb0 3a67 	vmov.f32	s6, s15
 80204c6:	eef0 2a47 	vmov.f32	s5, s14
 80204ca:	e6d3      	b.n	8020274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80204cc:	2900      	cmp	r1, #0
 80204ce:	f43f af5c 	beq.w	802038a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80204d2:	eb0a 0003 	add.w	r0, sl, r3
 80204d6:	0843      	lsrs	r3, r0, #1
 80204d8:	07c0      	lsls	r0, r0, #31
 80204da:	5cfb      	ldrb	r3, [r7, r3]
 80204dc:	bf54      	ite	pl
 80204de:	f003 030f 	andpl.w	r3, r3, #15
 80204e2:	111b      	asrmi	r3, r3, #4
 80204e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80204e8:	b2db      	uxtb	r3, r3
 80204ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80204ec:	e74d      	b.n	802038a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	f43f af78 	beq.w	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80204f4:	4a73      	ldr	r2, [pc, #460]	@ (80206c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80204f6:	f8b8 c000 	ldrh.w	ip, [r8]
 80204fa:	6810      	ldr	r0, [r2, #0]
 80204fc:	fa1f fe83 	uxth.w	lr, r3
 8020500:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020504:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8020508:	43db      	mvns	r3, r3
 802050a:	b2db      	uxtb	r3, r3
 802050c:	fb12 f20e 	smulbb	r2, r2, lr
 8020510:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020514:	fb01 2103 	mla	r1, r1, r3, r2
 8020518:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802051c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020520:	b2c0      	uxtb	r0, r0
 8020522:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020526:	fb1b fb0e 	smulbb	fp, fp, lr
 802052a:	b289      	uxth	r1, r1
 802052c:	fb10 fe0e 	smulbb	lr, r0, lr
 8020530:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020534:	fa5f fc8c 	uxtb.w	ip, ip
 8020538:	fb02 b203 	mla	r2, r2, r3, fp
 802053c:	1c48      	adds	r0, r1, #1
 802053e:	fb0c e303 	mla	r3, ip, r3, lr
 8020542:	b292      	uxth	r2, r2
 8020544:	b29b      	uxth	r3, r3
 8020546:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802054a:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802054e:	f102 0b01 	add.w	fp, r2, #1
 8020552:	1c59      	adds	r1, r3, #1
 8020554:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020558:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802055c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8020560:	0952      	lsrs	r2, r2, #5
 8020562:	4301      	orrs	r1, r0
 8020564:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020568:	4311      	orrs	r1, r2
 802056a:	f8a8 1000 	strh.w	r1, [r8]
 802056e:	e739      	b.n	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020570:	f113 0b01 	adds.w	fp, r3, #1
 8020574:	f53f af36 	bmi.w	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020578:	45dc      	cmp	ip, fp
 802057a:	f6ff af33 	blt.w	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802057e:	f110 0b01 	adds.w	fp, r0, #1
 8020582:	f53f af2f 	bmi.w	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020586:	45de      	cmp	lr, fp
 8020588:	f6ff af2c 	blt.w	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802058c:	9a08      	ldr	r2, [sp, #32]
 802058e:	9302      	str	r3, [sp, #8]
 8020590:	fa0f f38e 	sxth.w	r3, lr
 8020594:	9301      	str	r3, [sp, #4]
 8020596:	fa0f f38c 	sxth.w	r3, ip
 802059a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802059e:	9105      	str	r1, [sp, #20]
 80205a0:	9300      	str	r3, [sp, #0]
 80205a2:	463a      	mov	r2, r7
 80205a4:	4653      	mov	r3, sl
 80205a6:	4641      	mov	r1, r8
 80205a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80205aa:	f7ff fd73 	bl	8020094 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80205ae:	e719      	b.n	80203e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80205b0:	9906      	ldr	r1, [sp, #24]
 80205b2:	1422      	asrs	r2, r4, #16
 80205b4:	1433      	asrs	r3, r6, #16
 80205b6:	fb01 2303 	mla	r3, r1, r3, r2
 80205ba:	085a      	lsrs	r2, r3, #1
 80205bc:	07d9      	lsls	r1, r3, #31
 80205be:	5cba      	ldrb	r2, [r7, r2]
 80205c0:	bf54      	ite	pl
 80205c2:	f002 020f 	andpl.w	r2, r2, #15
 80205c6:	1112      	asrmi	r2, r2, #4
 80205c8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80205cc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80205d0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80205d4:	b2d2      	uxtb	r2, r2
 80205d6:	2800      	cmp	r0, #0
 80205d8:	d062      	beq.n	80206a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80205da:	f103 0a01 	add.w	sl, r3, #1
 80205de:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80205e2:	f01a 0f01 	tst.w	sl, #1
 80205e6:	5c79      	ldrb	r1, [r7, r1]
 80205e8:	bf0c      	ite	eq
 80205ea:	f001 010f 	andeq.w	r1, r1, #15
 80205ee:	1109      	asrne	r1, r1, #4
 80205f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80205f4:	b2c9      	uxtb	r1, r1
 80205f6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80205f8:	f1bc 0f00 	cmp.w	ip, #0
 80205fc:	d019      	beq.n	8020632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80205fe:	9908      	ldr	r1, [sp, #32]
 8020600:	440b      	add	r3, r1
 8020602:	0859      	lsrs	r1, r3, #1
 8020604:	f013 0f01 	tst.w	r3, #1
 8020608:	5c79      	ldrb	r1, [r7, r1]
 802060a:	bf0c      	ite	eq
 802060c:	f001 010f 	andeq.w	r1, r1, #15
 8020610:	1109      	asrne	r1, r1, #4
 8020612:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020616:	b2c9      	uxtb	r1, r1
 8020618:	3301      	adds	r3, #1
 802061a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802061c:	0859      	lsrs	r1, r3, #1
 802061e:	07db      	lsls	r3, r3, #31
 8020620:	5c79      	ldrb	r1, [r7, r1]
 8020622:	bf54      	ite	pl
 8020624:	f001 010f 	andpl.w	r1, r1, #15
 8020628:	1109      	asrmi	r1, r1, #4
 802062a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802062e:	b2c9      	uxtb	r1, r1
 8020630:	9110      	str	r1, [sp, #64]	@ 0x40
 8020632:	b280      	uxth	r0, r0
 8020634:	fa1f fc8c 	uxth.w	ip, ip
 8020638:	fb00 f30c 	mul.w	r3, r0, ip
 802063c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8020640:	0100      	lsls	r0, r0, #4
 8020642:	fa1f fc8c 	uxth.w	ip, ip
 8020646:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802064a:	eba1 010c 	sub.w	r1, r1, ip
 802064e:	fa1f fa81 	uxth.w	sl, r1
 8020652:	1ac0      	subs	r0, r0, r3
 8020654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020656:	b280      	uxth	r0, r0
 8020658:	4348      	muls	r0, r1
 802065a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802065c:	fb02 020a 	mla	r2, r2, sl, r0
 8020660:	fb0c 2c01 	mla	ip, ip, r1, r2
 8020664:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020666:	fb03 c302 	mla	r3, r3, r2, ip
 802066a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802066e:	2bff      	cmp	r3, #255	@ 0xff
 8020670:	d12c      	bne.n	80206cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8020672:	4b14      	ldr	r3, [pc, #80]	@ (80206c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8020674:	681a      	ldr	r2, [r3, #0]
 8020676:	4b14      	ldr	r3, [pc, #80]	@ (80206c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8020678:	0951      	lsrs	r1, r2, #5
 802067a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802067e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020682:	430b      	orrs	r3, r1
 8020684:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020688:	4313      	orrs	r3, r2
 802068a:	f8ae 3000 	strh.w	r3, [lr]
 802068e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020690:	441c      	add	r4, r3
 8020692:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020694:	f10e 0e02 	add.w	lr, lr, #2
 8020698:	441e      	add	r6, r3
 802069a:	f108 38ff 	add.w	r8, r8, #4294967295
 802069e:	e6ce      	b.n	802043e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80206a0:	f1bc 0f00 	cmp.w	ip, #0
 80206a4:	d0c5      	beq.n	8020632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80206a6:	9908      	ldr	r1, [sp, #32]
 80206a8:	440b      	add	r3, r1
 80206aa:	0859      	lsrs	r1, r3, #1
 80206ac:	07db      	lsls	r3, r3, #31
 80206ae:	5c79      	ldrb	r1, [r7, r1]
 80206b0:	bf54      	ite	pl
 80206b2:	f001 010f 	andpl.w	r1, r1, #15
 80206b6:	1109      	asrmi	r1, r1, #4
 80206b8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80206bc:	b2c9      	uxtb	r1, r1
 80206be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80206c0:	e7b7      	b.n	8020632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80206c2:	bf00      	nop
 80206c4:	2002b034 	.word	0x2002b034
 80206c8:	fffff800 	.word	0xfffff800
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d0de      	beq.n	802068e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80206d0:	4a21      	ldr	r2, [pc, #132]	@ (8020758 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80206d2:	f8be c000 	ldrh.w	ip, [lr]
 80206d6:	6810      	ldr	r0, [r2, #0]
 80206d8:	fa1f fa83 	uxth.w	sl, r3
 80206dc:	ea4f 212c 	mov.w	r1, ip, asr #8
 80206e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80206e4:	43db      	mvns	r3, r3
 80206e6:	b2db      	uxtb	r3, r3
 80206e8:	fb12 f20a 	smulbb	r2, r2, sl
 80206ec:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80206f0:	fb01 2103 	mla	r1, r1, r3, r2
 80206f4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80206f8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80206fc:	b2c0      	uxtb	r0, r0
 80206fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020702:	fa5f fc8c 	uxtb.w	ip, ip
 8020706:	fb10 f00a 	smulbb	r0, r0, sl
 802070a:	fb0c 0003 	mla	r0, ip, r3, r0
 802070e:	b289      	uxth	r1, r1
 8020710:	fb1b fb0a 	smulbb	fp, fp, sl
 8020714:	b280      	uxth	r0, r0
 8020716:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802071a:	fb02 b203 	mla	r2, r2, r3, fp
 802071e:	1c4b      	adds	r3, r1, #1
 8020720:	f100 0b01 	add.w	fp, r0, #1
 8020724:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020728:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802072c:	b292      	uxth	r2, r2
 802072e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020732:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8020736:	ea4b 0101 	orr.w	r1, fp, r1
 802073a:	f102 0b01 	add.w	fp, r2, #1
 802073e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020742:	0952      	lsrs	r2, r2, #5
 8020744:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020748:	4311      	orrs	r1, r2
 802074a:	f8ae 1000 	strh.w	r1, [lr]
 802074e:	e79e      	b.n	802068e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020750:	b013      	add	sp, #76	@ 0x4c
 8020752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020756:	bf00      	nop
 8020758:	2002b034 	.word	0x2002b034

0802075c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802075c:	b570      	push	{r4, r5, r6, lr}
 802075e:	1208      	asrs	r0, r1, #8
 8020760:	b29e      	uxth	r6, r3
 8020762:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8020766:	1213      	asrs	r3, r2, #8
 8020768:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802076c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8020770:	fb13 f305 	smulbb	r3, r3, r5
 8020774:	fb10 f006 	smulbb	r0, r0, r6
 8020778:	4418      	add	r0, r3
 802077a:	10cc      	asrs	r4, r1, #3
 802077c:	10d3      	asrs	r3, r2, #3
 802077e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020782:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020786:	fb13 f305 	smulbb	r3, r3, r5
 802078a:	fb14 f406 	smulbb	r4, r4, r6
 802078e:	00c9      	lsls	r1, r1, #3
 8020790:	00d2      	lsls	r2, r2, #3
 8020792:	441c      	add	r4, r3
 8020794:	b2d2      	uxtb	r2, r2
 8020796:	b2cb      	uxtb	r3, r1
 8020798:	fb12 f205 	smulbb	r2, r2, r5
 802079c:	b280      	uxth	r0, r0
 802079e:	fb13 f306 	smulbb	r3, r3, r6
 80207a2:	4413      	add	r3, r2
 80207a4:	1c42      	adds	r2, r0, #1
 80207a6:	b29b      	uxth	r3, r3
 80207a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80207ac:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 80207b0:	1c58      	adds	r0, r3, #1
 80207b2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80207b6:	b2a4      	uxth	r4, r4
 80207b8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80207bc:	4310      	orrs	r0, r2
 80207be:	1c62      	adds	r2, r4, #1
 80207c0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80207c4:	0964      	lsrs	r4, r4, #5
 80207c6:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80207ca:	4320      	orrs	r0, r4
 80207cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080207d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80207d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207d4:	b08f      	sub	sp, #60	@ 0x3c
 80207d6:	461c      	mov	r4, r3
 80207d8:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80207dc:	9004      	str	r0, [sp, #16]
 80207de:	460d      	mov	r5, r1
 80207e0:	4616      	mov	r6, r2
 80207e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80207e4:	2f00      	cmp	r7, #0
 80207e6:	f000 80f6 	beq.w	80209d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80207ea:	6820      	ldr	r0, [r4, #0]
 80207ec:	6861      	ldr	r1, [r4, #4]
 80207ee:	aa0a      	add	r2, sp, #40	@ 0x28
 80207f0:	c203      	stmia	r2!, {r0, r1}
 80207f2:	6818      	ldr	r0, [r3, #0]
 80207f4:	6859      	ldr	r1, [r3, #4]
 80207f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80207f8:	c203      	stmia	r2!, {r0, r1}
 80207fa:	a80a      	add	r0, sp, #40	@ 0x28
 80207fc:	f7ef f9e0 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020800:	4621      	mov	r1, r4
 8020802:	a80c      	add	r0, sp, #48	@ 0x30
 8020804:	f7ef fa04 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020808:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802080c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8020810:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020814:	f002 0301 	and.w	r3, r2, #1
 8020818:	9306      	str	r3, [sp, #24]
 802081a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802081e:	f003 0101 	and.w	r1, r3, #1
 8020822:	9105      	str	r1, [sp, #20]
 8020824:	9805      	ldr	r0, [sp, #20]
 8020826:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802082a:	4403      	add	r3, r0
 802082c:	fb01 2303 	mla	r3, r1, r3, r2
 8020830:	f04f 0802 	mov.w	r8, #2
 8020834:	fb93 f3f8 	sdiv	r3, r3, r8
 8020838:	441d      	add	r5, r3
 802083a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802083e:	441a      	add	r2, r3
 8020840:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020844:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020848:	4419      	add	r1, r3
 802084a:	4b64      	ldr	r3, [pc, #400]	@ (80209dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802084c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8020850:	6818      	ldr	r0, [r3, #0]
 8020852:	6803      	ldr	r3, [r0, #0]
 8020854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020856:	4798      	blx	r3
 8020858:	4a61      	ldr	r2, [pc, #388]	@ (80209e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802085a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802085e:	8813      	ldrh	r3, [r2, #0]
 8020860:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8020864:	2fff      	cmp	r7, #255	@ 0xff
 8020866:	fb03 a404 	mla	r4, r3, r4, sl
 802086a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802086e:	f106 0604 	add.w	r6, r6, #4
 8020872:	4611      	mov	r1, r2
 8020874:	fb03 fb0b 	mul.w	fp, r3, fp
 8020878:	d06b      	beq.n	8020952 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 802087a:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802087e:	9303      	str	r3, [sp, #12]
 8020880:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8020884:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8020888:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802088c:	9b07      	ldr	r3, [sp, #28]
 802088e:	42a3      	cmp	r3, r4
 8020890:	f240 809c 	bls.w	80209cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8020894:	9b06      	ldr	r3, [sp, #24]
 8020896:	2b00      	cmp	r3, #0
 8020898:	d039      	beq.n	802090e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802089a:	782b      	ldrb	r3, [r5, #0]
 802089c:	8822      	ldrh	r2, [r4, #0]
 802089e:	9804      	ldr	r0, [sp, #16]
 80208a0:	f003 030f 	and.w	r3, r3, #15
 80208a4:	f105 0801 	add.w	r8, r5, #1
 80208a8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80208ac:	9b03      	ldr	r3, [sp, #12]
 80208ae:	9300      	str	r3, [sp, #0]
 80208b0:	463b      	mov	r3, r7
 80208b2:	f7ff ff53 	bl	802075c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80208b6:	f824 0b02 	strh.w	r0, [r4], #2
 80208ba:	f109 3bff 	add.w	fp, r9, #4294967295
 80208be:	f1bb 0f01 	cmp.w	fp, #1
 80208c2:	46a2      	mov	sl, r4
 80208c4:	f104 0404 	add.w	r4, r4, #4
 80208c8:	dd24      	ble.n	8020914 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 80208ca:	f898 3000 	ldrb.w	r3, [r8]
 80208ce:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80208d2:	9804      	ldr	r0, [sp, #16]
 80208d4:	091b      	lsrs	r3, r3, #4
 80208d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80208da:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80208de:	9b03      	ldr	r3, [sp, #12]
 80208e0:	9300      	str	r3, [sp, #0]
 80208e2:	463b      	mov	r3, r7
 80208e4:	f7ff ff3a 	bl	802075c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80208e8:	f824 0c04 	strh.w	r0, [r4, #-4]
 80208ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80208f0:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80208f4:	9804      	ldr	r0, [sp, #16]
 80208f6:	f003 030f 	and.w	r3, r3, #15
 80208fa:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80208fe:	9b03      	ldr	r3, [sp, #12]
 8020900:	9300      	str	r3, [sp, #0]
 8020902:	463b      	mov	r3, r7
 8020904:	f7ff ff2a 	bl	802075c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8020908:	f824 0c02 	strh.w	r0, [r4, #-2]
 802090c:	e7d7      	b.n	80208be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 802090e:	46a8      	mov	r8, r5
 8020910:	46cb      	mov	fp, r9
 8020912:	e7d4      	b.n	80208be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8020914:	d10e      	bne.n	8020934 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8020916:	f898 3000 	ldrb.w	r3, [r8]
 802091a:	f8ba 2000 	ldrh.w	r2, [sl]
 802091e:	9804      	ldr	r0, [sp, #16]
 8020920:	091b      	lsrs	r3, r3, #4
 8020922:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8020926:	9b03      	ldr	r3, [sp, #12]
 8020928:	9300      	str	r3, [sp, #0]
 802092a:	463b      	mov	r3, r7
 802092c:	f7ff ff16 	bl	802075c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8020930:	f82a 0b02 	strh.w	r0, [sl], #2
 8020934:	9b08      	ldr	r3, [sp, #32]
 8020936:	9a05      	ldr	r2, [sp, #20]
 8020938:	881c      	ldrh	r4, [r3, #0]
 802093a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802093e:	eba4 0409 	sub.w	r4, r4, r9
 8020942:	4413      	add	r3, r2
 8020944:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8020948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802094a:	fb93 f3f2 	sdiv	r3, r3, r2
 802094e:	441d      	add	r5, r3
 8020950:	e79c      	b.n	802088c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8020952:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8020956:	45a3      	cmp	fp, r4
 8020958:	d938      	bls.n	80209cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802095a:	9b06      	ldr	r3, [sp, #24]
 802095c:	b1f3      	cbz	r3, 802099c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802095e:	782b      	ldrb	r3, [r5, #0]
 8020960:	f003 030f 	and.w	r3, r3, #15
 8020964:	1c6a      	adds	r2, r5, #1
 8020966:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802096a:	8023      	strh	r3, [r4, #0]
 802096c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020970:	3402      	adds	r4, #2
 8020972:	2801      	cmp	r0, #1
 8020974:	4623      	mov	r3, r4
 8020976:	f104 0404 	add.w	r4, r4, #4
 802097a:	dd12      	ble.n	80209a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 802097c:	7813      	ldrb	r3, [r2, #0]
 802097e:	091b      	lsrs	r3, r3, #4
 8020980:	3802      	subs	r0, #2
 8020982:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020986:	f824 3c04 	strh.w	r3, [r4, #-4]
 802098a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802098e:	f003 030f 	and.w	r3, r3, #15
 8020992:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020996:	f824 3c02 	strh.w	r3, [r4, #-2]
 802099a:	e7ea      	b.n	8020972 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802099c:	462a      	mov	r2, r5
 802099e:	4648      	mov	r0, r9
 80209a0:	e7e7      	b.n	8020972 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80209a2:	d106      	bne.n	80209b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 80209a4:	7812      	ldrb	r2, [r2, #0]
 80209a6:	0912      	lsrs	r2, r2, #4
 80209a8:	3302      	adds	r3, #2
 80209aa:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80209ae:	f823 2c02 	strh.w	r2, [r3, #-2]
 80209b2:	880c      	ldrh	r4, [r1, #0]
 80209b4:	9a05      	ldr	r2, [sp, #20]
 80209b6:	eba4 0409 	sub.w	r4, r4, r9
 80209ba:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80209be:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80209c2:	4413      	add	r3, r2
 80209c4:	fb93 f3f8 	sdiv	r3, r3, r8
 80209c8:	441d      	add	r5, r3
 80209ca:	e7c4      	b.n	8020956 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80209cc:	4b03      	ldr	r3, [pc, #12]	@ (80209dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80209ce:	6818      	ldr	r0, [r3, #0]
 80209d0:	6803      	ldr	r3, [r0, #0]
 80209d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80209d4:	4798      	blx	r3
 80209d6:	b00f      	add	sp, #60	@ 0x3c
 80209d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209dc:	2002b02c 	.word	0x2002b02c
 80209e0:	2002b026 	.word	0x2002b026

080209e4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80209e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209e6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80209ea:	2dff      	cmp	r5, #255	@ 0xff
 80209ec:	ea4f 2711 	mov.w	r7, r1, lsr #8
 80209f0:	d10c      	bne.n	8020a0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80209f2:	2bff      	cmp	r3, #255	@ 0xff
 80209f4:	d10a      	bne.n	8020a0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80209f6:	4b25      	ldr	r3, [pc, #148]	@ (8020a8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80209f8:	0948      	lsrs	r0, r1, #5
 80209fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80209fe:	403b      	ands	r3, r7
 8020a00:	4318      	orrs	r0, r3
 8020a02:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020a06:	4308      	orrs	r0, r1
 8020a08:	b280      	uxth	r0, r0
 8020a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a0c:	fb15 f503 	smulbb	r5, r5, r3
 8020a10:	b2ab      	uxth	r3, r5
 8020a12:	1c5d      	adds	r5, r3, #1
 8020a14:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8020a18:	1214      	asrs	r4, r2, #8
 8020a1a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020a1e:	fa1f fc85 	uxth.w	ip, r5
 8020a22:	10d6      	asrs	r6, r2, #3
 8020a24:	00d0      	lsls	r0, r2, #3
 8020a26:	43ed      	mvns	r5, r5
 8020a28:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8020a2c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8020a30:	b2eb      	uxtb	r3, r5
 8020a32:	b2c0      	uxtb	r0, r0
 8020a34:	fb12 f20c 	smulbb	r2, r2, ip
 8020a38:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020a3c:	fb04 2403 	mla	r4, r4, r3, r2
 8020a40:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8020a44:	b2c8      	uxtb	r0, r1
 8020a46:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020a4a:	b2fd      	uxtb	r5, r7
 8020a4c:	fb10 f00c 	smulbb	r0, r0, ip
 8020a50:	b2a4      	uxth	r4, r4
 8020a52:	fb02 0003 	mla	r0, r2, r3, r0
 8020a56:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020a5a:	fb15 f50c 	smulbb	r5, r5, ip
 8020a5e:	fb06 5503 	mla	r5, r6, r3, r5
 8020a62:	b283      	uxth	r3, r0
 8020a64:	1c60      	adds	r0, r4, #1
 8020a66:	b2ad      	uxth	r5, r5
 8020a68:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8020a6c:	1c58      	adds	r0, r3, #1
 8020a6e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020a72:	1c6b      	adds	r3, r5, #1
 8020a74:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020a78:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8020a7c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020a80:	096d      	lsrs	r5, r5, #5
 8020a82:	4320      	orrs	r0, r4
 8020a84:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020a88:	4328      	orrs	r0, r5
 8020a8a:	e7be      	b.n	8020a0a <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8020a8c:	00fff800 	.word	0x00fff800

08020a90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a94:	461c      	mov	r4, r3
 8020a96:	b08d      	sub	sp, #52	@ 0x34
 8020a98:	460d      	mov	r5, r1
 8020a9a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020a9c:	6861      	ldr	r1, [r4, #4]
 8020a9e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8020aa2:	4680      	mov	r8, r0
 8020aa4:	6820      	ldr	r0, [r4, #0]
 8020aa6:	4616      	mov	r6, r2
 8020aa8:	aa08      	add	r2, sp, #32
 8020aaa:	c203      	stmia	r2!, {r0, r1}
 8020aac:	6818      	ldr	r0, [r3, #0]
 8020aae:	6859      	ldr	r1, [r3, #4]
 8020ab0:	aa0a      	add	r2, sp, #40	@ 0x28
 8020ab2:	c203      	stmia	r2!, {r0, r1}
 8020ab4:	a808      	add	r0, sp, #32
 8020ab6:	f7ef f883 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020aba:	4621      	mov	r1, r4
 8020abc:	a80a      	add	r0, sp, #40	@ 0x28
 8020abe:	f7ef f8a7 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ac2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8020ac6:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8020aca:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8020ace:	f002 0301 	and.w	r3, r2, #1
 8020ad2:	9303      	str	r3, [sp, #12]
 8020ad4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020ad8:	f003 0101 	and.w	r1, r3, #1
 8020adc:	9102      	str	r1, [sp, #8]
 8020ade:	9802      	ldr	r0, [sp, #8]
 8020ae0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8020ae4:	4403      	add	r3, r0
 8020ae6:	fb01 2303 	mla	r3, r1, r3, r2
 8020aea:	f04f 0a02 	mov.w	sl, #2
 8020aee:	fb93 f3fa 	sdiv	r3, r3, sl
 8020af2:	441d      	add	r5, r3
 8020af4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020af8:	441a      	add	r2, r3
 8020afa:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8020afe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8020b02:	4a3f      	ldr	r2, [pc, #252]	@ (8020c00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8020b04:	9205      	str	r2, [sp, #20]
 8020b06:	4419      	add	r1, r3
 8020b08:	6810      	ldr	r0, [r2, #0]
 8020b0a:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8020b0e:	6803      	ldr	r3, [r0, #0]
 8020b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b12:	4798      	blx	r3
 8020b14:	4b3b      	ldr	r3, [pc, #236]	@ (8020c04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8020b16:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8020b1a:	8819      	ldrh	r1, [r3, #0]
 8020b1c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8020b20:	fb01 c404 	mla	r4, r1, r4, ip
 8020b24:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020b28:	434f      	muls	r7, r1
 8020b2a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8020b2e:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8020b32:	3604      	adds	r6, #4
 8020b34:	9204      	str	r2, [sp, #16]
 8020b36:	9b04      	ldr	r3, [sp, #16]
 8020b38:	429c      	cmp	r4, r3
 8020b3a:	d258      	bcs.n	8020bee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8020b3c:	9b03      	ldr	r3, [sp, #12]
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d034      	beq.n	8020bac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020b42:	782b      	ldrb	r3, [r5, #0]
 8020b44:	f003 030f 	and.w	r3, r3, #15
 8020b48:	1c6f      	adds	r7, r5, #1
 8020b4a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020b4e:	0e0b      	lsrs	r3, r1, #24
 8020b50:	d006      	beq.n	8020b60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8020b52:	8822      	ldrh	r2, [r4, #0]
 8020b54:	9300      	str	r3, [sp, #0]
 8020b56:	4640      	mov	r0, r8
 8020b58:	464b      	mov	r3, r9
 8020b5a:	f7ff ff43 	bl	80209e4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8020b5e:	8020      	strh	r0, [r4, #0]
 8020b60:	3402      	adds	r4, #2
 8020b62:	f10b 3aff 	add.w	sl, fp, #4294967295
 8020b66:	f1ba 0f01 	cmp.w	sl, #1
 8020b6a:	dd22      	ble.n	8020bb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8020b6c:	783b      	ldrb	r3, [r7, #0]
 8020b6e:	091b      	lsrs	r3, r3, #4
 8020b70:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020b74:	0e0b      	lsrs	r3, r1, #24
 8020b76:	d006      	beq.n	8020b86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8020b78:	8822      	ldrh	r2, [r4, #0]
 8020b7a:	9300      	str	r3, [sp, #0]
 8020b7c:	4640      	mov	r0, r8
 8020b7e:	464b      	mov	r3, r9
 8020b80:	f7ff ff30 	bl	80209e4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8020b84:	8020      	strh	r0, [r4, #0]
 8020b86:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020b8a:	f003 030f 	and.w	r3, r3, #15
 8020b8e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020b92:	0e0b      	lsrs	r3, r1, #24
 8020b94:	d006      	beq.n	8020ba4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8020b96:	8862      	ldrh	r2, [r4, #2]
 8020b98:	9300      	str	r3, [sp, #0]
 8020b9a:	4640      	mov	r0, r8
 8020b9c:	464b      	mov	r3, r9
 8020b9e:	f7ff ff21 	bl	80209e4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8020ba2:	8060      	strh	r0, [r4, #2]
 8020ba4:	3404      	adds	r4, #4
 8020ba6:	f1aa 0a02 	sub.w	sl, sl, #2
 8020baa:	e7dc      	b.n	8020b66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8020bac:	462f      	mov	r7, r5
 8020bae:	46da      	mov	sl, fp
 8020bb0:	e7d9      	b.n	8020b66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8020bb2:	d10d      	bne.n	8020bd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8020bb4:	783b      	ldrb	r3, [r7, #0]
 8020bb6:	091b      	lsrs	r3, r3, #4
 8020bb8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020bbc:	0e0b      	lsrs	r3, r1, #24
 8020bbe:	d006      	beq.n	8020bce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020bc0:	8822      	ldrh	r2, [r4, #0]
 8020bc2:	9300      	str	r3, [sp, #0]
 8020bc4:	4640      	mov	r0, r8
 8020bc6:	464b      	mov	r3, r9
 8020bc8:	f7ff ff0c 	bl	80209e4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8020bcc:	8020      	strh	r0, [r4, #0]
 8020bce:	3402      	adds	r4, #2
 8020bd0:	9b06      	ldr	r3, [sp, #24]
 8020bd2:	9a02      	ldr	r2, [sp, #8]
 8020bd4:	881b      	ldrh	r3, [r3, #0]
 8020bd6:	eba3 030b 	sub.w	r3, r3, fp
 8020bda:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bde:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020be2:	4413      	add	r3, r2
 8020be4:	9a07      	ldr	r2, [sp, #28]
 8020be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8020bea:	441d      	add	r5, r3
 8020bec:	e7a3      	b.n	8020b36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8020bee:	9b05      	ldr	r3, [sp, #20]
 8020bf0:	6818      	ldr	r0, [r3, #0]
 8020bf2:	6803      	ldr	r3, [r0, #0]
 8020bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020bf6:	4798      	blx	r3
 8020bf8:	b00d      	add	sp, #52	@ 0x34
 8020bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bfe:	bf00      	nop
 8020c00:	2002b02c 	.word	0x2002b02c
 8020c04:	2002b026 	.word	0x2002b026

08020c08 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8020c08:	b570      	push	{r4, r5, r6, lr}
 8020c0a:	1214      	asrs	r4, r2, #8
 8020c0c:	788d      	ldrb	r5, [r1, #2]
 8020c0e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8020c12:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8020c16:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020c1a:	fb15 f503 	smulbb	r5, r5, r3
 8020c1e:	fb04 5506 	mla	r5, r4, r6, r5
 8020c22:	10d0      	asrs	r0, r2, #3
 8020c24:	784c      	ldrb	r4, [r1, #1]
 8020c26:	7809      	ldrb	r1, [r1, #0]
 8020c28:	00d2      	lsls	r2, r2, #3
 8020c2a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020c2e:	b2d2      	uxtb	r2, r2
 8020c30:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8020c34:	fb14 f403 	smulbb	r4, r4, r3
 8020c38:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c3c:	fb11 f303 	smulbb	r3, r1, r3
 8020c40:	fb00 4406 	mla	r4, r0, r6, r4
 8020c44:	fb02 3306 	mla	r3, r2, r6, r3
 8020c48:	b2ad      	uxth	r5, r5
 8020c4a:	b29b      	uxth	r3, r3
 8020c4c:	b2a4      	uxth	r4, r4
 8020c4e:	1c68      	adds	r0, r5, #1
 8020c50:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8020c54:	1c62      	adds	r2, r4, #1
 8020c56:	1c58      	adds	r0, r3, #1
 8020c58:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020c5c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020c60:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020c64:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020c68:	0964      	lsrs	r4, r4, #5
 8020c6a:	4328      	orrs	r0, r5
 8020c6c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8020c70:	4320      	orrs	r0, r4
 8020c72:	bd70      	pop	{r4, r5, r6, pc}

08020c74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c78:	b08f      	sub	sp, #60	@ 0x3c
 8020c7a:	461c      	mov	r4, r3
 8020c7c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8020c80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c82:	4682      	mov	sl, r0
 8020c84:	460e      	mov	r6, r1
 8020c86:	4615      	mov	r5, r2
 8020c88:	2f00      	cmp	r7, #0
 8020c8a:	f000 8142 	beq.w	8020f12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8020c8e:	6820      	ldr	r0, [r4, #0]
 8020c90:	6861      	ldr	r1, [r4, #4]
 8020c92:	aa0a      	add	r2, sp, #40	@ 0x28
 8020c94:	c203      	stmia	r2!, {r0, r1}
 8020c96:	6818      	ldr	r0, [r3, #0]
 8020c98:	6859      	ldr	r1, [r3, #4]
 8020c9a:	aa0c      	add	r2, sp, #48	@ 0x30
 8020c9c:	c203      	stmia	r2!, {r0, r1}
 8020c9e:	a80a      	add	r0, sp, #40	@ 0x28
 8020ca0:	f7ee ff8e 	bl	800fbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ca4:	4621      	mov	r1, r4
 8020ca6:	a80c      	add	r0, sp, #48	@ 0x30
 8020ca8:	f7ee ffb2 	bl	800fc10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020cac:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020cb0:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8020cb4:	f002 0301 	and.w	r3, r2, #1
 8020cb8:	9306      	str	r3, [sp, #24]
 8020cba:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020cbe:	f003 0101 	and.w	r1, r3, #1
 8020cc2:	9105      	str	r1, [sp, #20]
 8020cc4:	9805      	ldr	r0, [sp, #20]
 8020cc6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020cca:	4403      	add	r3, r0
 8020ccc:	fb01 2303 	mla	r3, r1, r3, r2
 8020cd0:	f04f 0802 	mov.w	r8, #2
 8020cd4:	fb93 f3f8 	sdiv	r3, r3, r8
 8020cd8:	441e      	add	r6, r3
 8020cda:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020cde:	441a      	add	r2, r3
 8020ce0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020ce4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020ce8:	4419      	add	r1, r3
 8020cea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020cee:	9303      	str	r3, [sp, #12]
 8020cf0:	4b89      	ldr	r3, [pc, #548]	@ (8020f18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8020cf2:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8020cf6:	6818      	ldr	r0, [r3, #0]
 8020cf8:	6803      	ldr	r3, [r0, #0]
 8020cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cfc:	4798      	blx	r3
 8020cfe:	4a87      	ldr	r2, [pc, #540]	@ (8020f1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8020d00:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8020d04:	8813      	ldrh	r3, [r2, #0]
 8020d06:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8020d0a:	2fff      	cmp	r7, #255	@ 0xff
 8020d0c:	fb03 9404 	mla	r4, r3, r4, r9
 8020d10:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020d14:	f105 0504 	add.w	r5, r5, #4
 8020d18:	4694      	mov	ip, r2
 8020d1a:	fb03 f30b 	mul.w	r3, r3, fp
 8020d1e:	d071      	beq.n	8020e04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8020d20:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020d24:	43f9      	mvns	r1, r7
 8020d26:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8020d2a:	b2c9      	uxtb	r1, r1
 8020d2c:	9104      	str	r1, [sp, #16]
 8020d2e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8020d32:	9b07      	ldr	r3, [sp, #28]
 8020d34:	42a3      	cmp	r3, r4
 8020d36:	f240 80e7 	bls.w	8020f08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8020d3a:	9b06      	ldr	r3, [sp, #24]
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d03d      	beq.n	8020dbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8020d40:	7831      	ldrb	r1, [r6, #0]
 8020d42:	9b04      	ldr	r3, [sp, #16]
 8020d44:	8822      	ldrh	r2, [r4, #0]
 8020d46:	9300      	str	r3, [sp, #0]
 8020d48:	f001 010f 	and.w	r1, r1, #15
 8020d4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020d50:	463b      	mov	r3, r7
 8020d52:	4429      	add	r1, r5
 8020d54:	4650      	mov	r0, sl
 8020d56:	f7ff ff57 	bl	8020c08 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8020d5a:	9b03      	ldr	r3, [sp, #12]
 8020d5c:	f824 0b02 	strh.w	r0, [r4], #2
 8020d60:	f106 0801 	add.w	r8, r6, #1
 8020d64:	f103 3bff 	add.w	fp, r3, #4294967295
 8020d68:	f1bb 0f01 	cmp.w	fp, #1
 8020d6c:	46a1      	mov	r9, r4
 8020d6e:	f104 0404 	add.w	r4, r4, #4
 8020d72:	dd27      	ble.n	8020dc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8020d74:	f898 1000 	ldrb.w	r1, [r8]
 8020d78:	9b04      	ldr	r3, [sp, #16]
 8020d7a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8020d7e:	9300      	str	r3, [sp, #0]
 8020d80:	0909      	lsrs	r1, r1, #4
 8020d82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020d86:	463b      	mov	r3, r7
 8020d88:	4429      	add	r1, r5
 8020d8a:	4650      	mov	r0, sl
 8020d8c:	f7ff ff3c 	bl	8020c08 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8020d90:	f824 0c04 	strh.w	r0, [r4, #-4]
 8020d94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020d98:	9b04      	ldr	r3, [sp, #16]
 8020d9a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8020d9e:	9300      	str	r3, [sp, #0]
 8020da0:	f001 010f 	and.w	r1, r1, #15
 8020da4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020da8:	463b      	mov	r3, r7
 8020daa:	4429      	add	r1, r5
 8020dac:	4650      	mov	r0, sl
 8020dae:	f7ff ff2b 	bl	8020c08 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8020db2:	f1ab 0b02 	sub.w	fp, fp, #2
 8020db6:	f824 0c02 	strh.w	r0, [r4, #-2]
 8020dba:	e7d5      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8020dbc:	46b0      	mov	r8, r6
 8020dbe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020dc2:	e7d1      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8020dc4:	d10f      	bne.n	8020de6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8020dc6:	f898 1000 	ldrb.w	r1, [r8]
 8020dca:	9b04      	ldr	r3, [sp, #16]
 8020dcc:	f8b9 2000 	ldrh.w	r2, [r9]
 8020dd0:	9300      	str	r3, [sp, #0]
 8020dd2:	0909      	lsrs	r1, r1, #4
 8020dd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020dd8:	463b      	mov	r3, r7
 8020dda:	4429      	add	r1, r5
 8020ddc:	4650      	mov	r0, sl
 8020dde:	f7ff ff13 	bl	8020c08 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8020de2:	f829 0b02 	strh.w	r0, [r9], #2
 8020de6:	9b08      	ldr	r3, [sp, #32]
 8020de8:	9a05      	ldr	r2, [sp, #20]
 8020dea:	881c      	ldrh	r4, [r3, #0]
 8020dec:	9b03      	ldr	r3, [sp, #12]
 8020dee:	1ae4      	subs	r4, r4, r3
 8020df0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020df4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020df8:	4413      	add	r3, r2
 8020dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8020e00:	441e      	add	r6, r3
 8020e02:	e796      	b.n	8020d32 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8020e04:	4f46      	ldr	r7, [pc, #280]	@ (8020f20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8020e06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020e0a:	42a3      	cmp	r3, r4
 8020e0c:	d97c      	bls.n	8020f08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8020e0e:	9a06      	ldr	r2, [sp, #24]
 8020e10:	2a00      	cmp	r2, #0
 8020e12:	d054      	beq.n	8020ebe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8020e14:	7830      	ldrb	r0, [r6, #0]
 8020e16:	f000 000f 	and.w	r0, r0, #15
 8020e1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020e1e:	eb05 0e00 	add.w	lr, r5, r0
 8020e22:	5c28      	ldrb	r0, [r5, r0]
 8020e24:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8020e28:	f89e e001 	ldrb.w	lr, [lr, #1]
 8020e2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020e30:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8020e34:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8020e38:	ea42 020e 	orr.w	r2, r2, lr
 8020e3c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8020e40:	f824 2b02 	strh.w	r2, [r4], #2
 8020e44:	9a03      	ldr	r2, [sp, #12]
 8020e46:	1c71      	adds	r1, r6, #1
 8020e48:	f102 3eff 	add.w	lr, r2, #4294967295
 8020e4c:	f1be 0f01 	cmp.w	lr, #1
 8020e50:	4620      	mov	r0, r4
 8020e52:	f104 0404 	add.w	r4, r4, #4
 8020e56:	dd36      	ble.n	8020ec6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8020e58:	7808      	ldrb	r0, [r1, #0]
 8020e5a:	0900      	lsrs	r0, r0, #4
 8020e5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020e60:	eb05 0a00 	add.w	sl, r5, r0
 8020e64:	f1ae 0e02 	sub.w	lr, lr, #2
 8020e68:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020e6c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020e70:	00d2      	lsls	r2, r2, #3
 8020e72:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8020e76:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020e7a:	ea49 0202 	orr.w	r2, r9, r2
 8020e7e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8020e82:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8020e86:	f824 2c04 	strh.w	r2, [r4, #-4]
 8020e8a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8020e8e:	f000 000f 	and.w	r0, r0, #15
 8020e92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020e96:	eb05 0a00 	add.w	sl, r5, r0
 8020e9a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020e9e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020ea2:	00d2      	lsls	r2, r2, #3
 8020ea4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8020ea8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020eac:	ea49 0202 	orr.w	r2, r9, r2
 8020eb0:	f815 9000 	ldrb.w	r9, [r5, r0]
 8020eb4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8020eb8:	f824 2c02 	strh.w	r2, [r4, #-2]
 8020ebc:	e7c6      	b.n	8020e4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8020ebe:	4631      	mov	r1, r6
 8020ec0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020ec4:	e7c2      	b.n	8020e4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8020ec6:	d111      	bne.n	8020eec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8020ec8:	7809      	ldrb	r1, [r1, #0]
 8020eca:	0909      	lsrs	r1, r1, #4
 8020ecc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020ed0:	186c      	adds	r4, r5, r1
 8020ed2:	5c69      	ldrb	r1, [r5, r1]
 8020ed4:	78a2      	ldrb	r2, [r4, #2]
 8020ed6:	7864      	ldrb	r4, [r4, #1]
 8020ed8:	00e4      	lsls	r4, r4, #3
 8020eda:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8020ede:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8020ee2:	4322      	orrs	r2, r4
 8020ee4:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8020ee8:	f820 2b02 	strh.w	r2, [r0], #2
 8020eec:	9a03      	ldr	r2, [sp, #12]
 8020eee:	f8bc 4000 	ldrh.w	r4, [ip]
 8020ef2:	9905      	ldr	r1, [sp, #20]
 8020ef4:	1aa4      	subs	r4, r4, r2
 8020ef6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8020efa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020efe:	440a      	add	r2, r1
 8020f00:	fb92 f2f8 	sdiv	r2, r2, r8
 8020f04:	4416      	add	r6, r2
 8020f06:	e780      	b.n	8020e0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8020f08:	4b03      	ldr	r3, [pc, #12]	@ (8020f18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8020f0a:	6818      	ldr	r0, [r3, #0]
 8020f0c:	6803      	ldr	r3, [r0, #0]
 8020f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020f10:	4798      	blx	r3
 8020f12:	b00f      	add	sp, #60	@ 0x3c
 8020f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f18:	2002b02c 	.word	0x2002b02c
 8020f1c:	2002b026 	.word	0x2002b026
 8020f20:	fffff800 	.word	0xfffff800

08020f24 <CRC_Lock>:
 8020f24:	b530      	push	{r4, r5, lr}
 8020f26:	4a2d      	ldr	r2, [pc, #180]	@ (8020fdc <CRC_Lock+0xb8>)
 8020f28:	6813      	ldr	r3, [r2, #0]
 8020f2a:	f023 0301 	bic.w	r3, r3, #1
 8020f2e:	6013      	str	r3, [r2, #0]
 8020f30:	4b2b      	ldr	r3, [pc, #172]	@ (8020fe0 <CRC_Lock+0xbc>)
 8020f32:	681c      	ldr	r4, [r3, #0]
 8020f34:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8020f38:	4014      	ands	r4, r2
 8020f3a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8020f3e:	42ac      	cmp	r4, r5
 8020f40:	d005      	beq.n	8020f4e <CRC_Lock+0x2a>
 8020f42:	681c      	ldr	r4, [r3, #0]
 8020f44:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8020f48:	4014      	ands	r4, r2
 8020f4a:	42ac      	cmp	r4, r5
 8020f4c:	d125      	bne.n	8020f9a <CRC_Lock+0x76>
 8020f4e:	4b25      	ldr	r3, [pc, #148]	@ (8020fe4 <CRC_Lock+0xc0>)
 8020f50:	681b      	ldr	r3, [r3, #0]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d139      	bne.n	8020fca <CRC_Lock+0xa6>
 8020f56:	4b24      	ldr	r3, [pc, #144]	@ (8020fe8 <CRC_Lock+0xc4>)
 8020f58:	681a      	ldr	r2, [r3, #0]
 8020f5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020f5e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8020f62:	d00d      	beq.n	8020f80 <CRC_Lock+0x5c>
 8020f64:	681a      	ldr	r2, [r3, #0]
 8020f66:	f240 4483 	movw	r4, #1155	@ 0x483
 8020f6a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8020f6e:	42a2      	cmp	r2, r4
 8020f70:	d006      	beq.n	8020f80 <CRC_Lock+0x5c>
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	f240 4285 	movw	r2, #1157	@ 0x485
 8020f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020f7c:	4293      	cmp	r3, r2
 8020f7e:	d124      	bne.n	8020fca <CRC_Lock+0xa6>
 8020f80:	4b1a      	ldr	r3, [pc, #104]	@ (8020fec <CRC_Lock+0xc8>)
 8020f82:	2201      	movs	r2, #1
 8020f84:	601a      	str	r2, [r3, #0]
 8020f86:	681a      	ldr	r2, [r3, #0]
 8020f88:	2a00      	cmp	r2, #0
 8020f8a:	d1fc      	bne.n	8020f86 <CRC_Lock+0x62>
 8020f8c:	4b18      	ldr	r3, [pc, #96]	@ (8020ff0 <CRC_Lock+0xcc>)
 8020f8e:	6018      	str	r0, [r3, #0]
 8020f90:	6818      	ldr	r0, [r3, #0]
 8020f92:	1a43      	subs	r3, r0, r1
 8020f94:	4258      	negs	r0, r3
 8020f96:	4158      	adcs	r0, r3
 8020f98:	e00e      	b.n	8020fb8 <CRC_Lock+0x94>
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	4013      	ands	r3, r2
 8020f9e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8020fa2:	4293      	cmp	r3, r2
 8020fa4:	d111      	bne.n	8020fca <CRC_Lock+0xa6>
 8020fa6:	4b13      	ldr	r3, [pc, #76]	@ (8020ff4 <CRC_Lock+0xd0>)
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	f240 4286 	movw	r2, #1158	@ 0x486
 8020fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020fb2:	4293      	cmp	r3, r2
 8020fb4:	d001      	beq.n	8020fba <CRC_Lock+0x96>
 8020fb6:	2000      	movs	r0, #0
 8020fb8:	bd30      	pop	{r4, r5, pc}
 8020fba:	4b0f      	ldr	r3, [pc, #60]	@ (8020ff8 <CRC_Lock+0xd4>)
 8020fbc:	2201      	movs	r2, #1
 8020fbe:	601a      	str	r2, [r3, #0]
 8020fc0:	681a      	ldr	r2, [r3, #0]
 8020fc2:	2a00      	cmp	r2, #0
 8020fc4:	d1fc      	bne.n	8020fc0 <CRC_Lock+0x9c>
 8020fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8020ffc <CRC_Lock+0xd8>)
 8020fc8:	e7e1      	b.n	8020f8e <CRC_Lock+0x6a>
 8020fca:	4b0d      	ldr	r3, [pc, #52]	@ (8021000 <CRC_Lock+0xdc>)
 8020fcc:	2201      	movs	r2, #1
 8020fce:	601a      	str	r2, [r3, #0]
 8020fd0:	681a      	ldr	r2, [r3, #0]
 8020fd2:	2a00      	cmp	r2, #0
 8020fd4:	d1fc      	bne.n	8020fd0 <CRC_Lock+0xac>
 8020fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8021004 <CRC_Lock+0xe0>)
 8020fd8:	e7d9      	b.n	8020f8e <CRC_Lock+0x6a>
 8020fda:	bf00      	nop
 8020fdc:	e0002000 	.word	0xe0002000
 8020fe0:	e000ed00 	.word	0xe000ed00
 8020fe4:	e0042000 	.word	0xe0042000
 8020fe8:	5c001000 	.word	0x5c001000
 8020fec:	58024c08 	.word	0x58024c08
 8020ff0:	58024c00 	.word	0x58024c00
 8020ff4:	46008ff0 	.word	0x46008ff0
 8020ff8:	46024c08 	.word	0x46024c08
 8020ffc:	46024c00 	.word	0x46024c00
 8021000:	40023008 	.word	0x40023008
 8021004:	40023000 	.word	0x40023000

08021008 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021008:	6101      	str	r1, [r0, #16]
 802100a:	4770      	bx	lr

0802100c <_ZN8touchgfx8Gestures4tickEv>:
 802100c:	7b83      	ldrb	r3, [r0, #14]
 802100e:	b14b      	cbz	r3, 8021024 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021010:	8903      	ldrh	r3, [r0, #8]
 8021012:	3301      	adds	r3, #1
 8021014:	b29b      	uxth	r3, r3
 8021016:	2b07      	cmp	r3, #7
 8021018:	8103      	strh	r3, [r0, #8]
 802101a:	bf81      	itttt	hi
 802101c:	2300      	movhi	r3, #0
 802101e:	8143      	strhhi	r3, [r0, #10]
 8021020:	8183      	strhhi	r3, [r0, #12]
 8021022:	7383      	strbhi	r3, [r0, #14]
 8021024:	4770      	bx	lr
	...

08021028 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802102c:	4698      	mov	r8, r3
 802102e:	8883      	ldrh	r3, [r0, #4]
 8021030:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021034:	eba8 0303 	sub.w	r3, r8, r3
 8021038:	b21b      	sxth	r3, r3
 802103a:	4604      	mov	r4, r0
 802103c:	2b00      	cmp	r3, #0
 802103e:	4617      	mov	r7, r2
 8021040:	4a18      	ldr	r2, [pc, #96]	@ (80210a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021042:	9200      	str	r2, [sp, #0]
 8021044:	bfb8      	it	lt
 8021046:	425b      	neglt	r3, r3
 8021048:	8aa2      	ldrh	r2, [r4, #20]
 802104a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802104e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021052:	b21b      	sxth	r3, r3
 8021054:	460e      	mov	r6, r1
 8021056:	4293      	cmp	r3, r2
 8021058:	88c1      	ldrh	r1, [r0, #6]
 802105a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802105e:	f04f 0000 	mov.w	r0, #0
 8021062:	f88d 0004 	strb.w	r0, [sp, #4]
 8021066:	f8ad 500c 	strh.w	r5, [sp, #12]
 802106a:	dc07      	bgt.n	802107c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 802106c:	1a69      	subs	r1, r5, r1
 802106e:	b209      	sxth	r1, r1
 8021070:	2900      	cmp	r1, #0
 8021072:	bfb8      	it	lt
 8021074:	4249      	neglt	r1, r1
 8021076:	b209      	sxth	r1, r1
 8021078:	428a      	cmp	r2, r1
 802107a:	da10      	bge.n	802109e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 802107c:	6920      	ldr	r0, [r4, #16]
 802107e:	6803      	ldr	r3, [r0, #0]
 8021080:	4669      	mov	r1, sp
 8021082:	685b      	ldr	r3, [r3, #4]
 8021084:	4798      	blx	r3
 8021086:	eba8 0606 	sub.w	r6, r8, r6
 802108a:	2300      	movs	r3, #0
 802108c:	1bef      	subs	r7, r5, r7
 802108e:	2001      	movs	r0, #1
 8021090:	8123      	strh	r3, [r4, #8]
 8021092:	8166      	strh	r6, [r4, #10]
 8021094:	81a7      	strh	r7, [r4, #12]
 8021096:	f8a4 8004 	strh.w	r8, [r4, #4]
 802109a:	80e5      	strh	r5, [r4, #6]
 802109c:	73a0      	strb	r0, [r4, #14]
 802109e:	b004      	add	sp, #16
 80210a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210a4:	08023a7c 	.word	0x08023a7c

080210a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80210a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210aa:	461e      	mov	r6, r3
 80210ac:	1e4b      	subs	r3, r1, #1
 80210ae:	2b01      	cmp	r3, #1
 80210b0:	b085      	sub	sp, #20
 80210b2:	4604      	mov	r4, r0
 80210b4:	460d      	mov	r5, r1
 80210b6:	4617      	mov	r7, r2
 80210b8:	d84b      	bhi.n	8021152 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80210ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80210be:	1cd3      	adds	r3, r2, #3
 80210c0:	b29b      	uxth	r3, r3
 80210c2:	2b06      	cmp	r3, #6
 80210c4:	d916      	bls.n	80210f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80210c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021168 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80210ca:	f8cd c004 	str.w	ip, [sp, #4]
 80210ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80210d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80210d6:	6900      	ldr	r0, [r0, #16]
 80210d8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80210dc:	f04f 0c00 	mov.w	ip, #0
 80210e0:	f88d c008 	strb.w	ip, [sp, #8]
 80210e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80210e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80210ec:	6803      	ldr	r3, [r0, #0]
 80210ee:	a901      	add	r1, sp, #4
 80210f0:	689b      	ldr	r3, [r3, #8]
 80210f2:	4798      	blx	r3
 80210f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210f8:	1cd3      	adds	r3, r2, #3
 80210fa:	b29b      	uxth	r3, r3
 80210fc:	2b06      	cmp	r3, #6
 80210fe:	d916      	bls.n	802112e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021100:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021168 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021104:	f8cd c004 	str.w	ip, [sp, #4]
 8021108:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802110c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021110:	6920      	ldr	r0, [r4, #16]
 8021112:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021116:	f04f 0c01 	mov.w	ip, #1
 802111a:	f88d c008 	strb.w	ip, [sp, #8]
 802111e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021122:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021126:	6803      	ldr	r3, [r0, #0]
 8021128:	a901      	add	r1, sp, #4
 802112a:	689b      	ldr	r3, [r3, #8]
 802112c:	4798      	blx	r3
 802112e:	4b0d      	ldr	r3, [pc, #52]	@ (8021164 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021130:	9301      	str	r3, [sp, #4]
 8021132:	6920      	ldr	r0, [r4, #16]
 8021134:	f88d 5008 	strb.w	r5, [sp, #8]
 8021138:	2300      	movs	r3, #0
 802113a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802113e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021142:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021146:	6803      	ldr	r3, [r0, #0]
 8021148:	a901      	add	r1, sp, #4
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	4798      	blx	r3
 802114e:	b005      	add	sp, #20
 8021150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021152:	2900      	cmp	r1, #0
 8021154:	d1eb      	bne.n	802112e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021156:	80a2      	strh	r2, [r4, #4]
 8021158:	80c6      	strh	r6, [r0, #6]
 802115a:	60a1      	str	r1, [r4, #8]
 802115c:	81a1      	strh	r1, [r4, #12]
 802115e:	73a1      	strb	r1, [r4, #14]
 8021160:	e7e5      	b.n	802112e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021162:	bf00      	nop
 8021164:	08023a68 	.word	0x08023a68
 8021168:	08023a90 	.word	0x08023a90

0802116c <__aeabi_atexit>:
 802116c:	460b      	mov	r3, r1
 802116e:	4601      	mov	r1, r0
 8021170:	4618      	mov	r0, r3
 8021172:	f000 b911 	b.w	8021398 <__cxa_atexit>

08021176 <_ZdlPvj>:
 8021176:	f000 b812 	b.w	802119e <_ZdlPv>

0802117a <__cxa_guard_acquire>:
 802117a:	6802      	ldr	r2, [r0, #0]
 802117c:	07d2      	lsls	r2, r2, #31
 802117e:	4603      	mov	r3, r0
 8021180:	d405      	bmi.n	802118e <__cxa_guard_acquire+0x14>
 8021182:	7842      	ldrb	r2, [r0, #1]
 8021184:	b102      	cbz	r2, 8021188 <__cxa_guard_acquire+0xe>
 8021186:	deff      	udf	#255	@ 0xff
 8021188:	2001      	movs	r0, #1
 802118a:	7058      	strb	r0, [r3, #1]
 802118c:	4770      	bx	lr
 802118e:	2000      	movs	r0, #0
 8021190:	4770      	bx	lr

08021192 <__cxa_guard_release>:
 8021192:	2301      	movs	r3, #1
 8021194:	6003      	str	r3, [r0, #0]
 8021196:	4770      	bx	lr

08021198 <__cxa_pure_virtual>:
 8021198:	b508      	push	{r3, lr}
 802119a:	f000 f80f 	bl	80211bc <_ZSt9terminatev>

0802119e <_ZdlPv>:
 802119e:	f000 b845 	b.w	802122c <free>

080211a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80211a2:	b508      	push	{r3, lr}
 80211a4:	4780      	blx	r0
 80211a6:	f000 f80e 	bl	80211c6 <abort>
	...

080211ac <_ZSt13get_terminatev>:
 80211ac:	4b02      	ldr	r3, [pc, #8]	@ (80211b8 <_ZSt13get_terminatev+0xc>)
 80211ae:	6818      	ldr	r0, [r3, #0]
 80211b0:	f3bf 8f5b 	dmb	ish
 80211b4:	4770      	bx	lr
 80211b6:	bf00      	nop
 80211b8:	20000094 	.word	0x20000094

080211bc <_ZSt9terminatev>:
 80211bc:	b508      	push	{r3, lr}
 80211be:	f7ff fff5 	bl	80211ac <_ZSt13get_terminatev>
 80211c2:	f7ff ffee 	bl	80211a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080211c6 <abort>:
 80211c6:	b508      	push	{r3, lr}
 80211c8:	2006      	movs	r0, #6
 80211ca:	f000 fa3b 	bl	8021644 <raise>
 80211ce:	2001      	movs	r0, #1
 80211d0:	f7e0 f9fe 	bl	80015d0 <_exit>

080211d4 <__assert_func>:
 80211d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211d6:	4614      	mov	r4, r2
 80211d8:	461a      	mov	r2, r3
 80211da:	4b09      	ldr	r3, [pc, #36]	@ (8021200 <__assert_func+0x2c>)
 80211dc:	681b      	ldr	r3, [r3, #0]
 80211de:	4605      	mov	r5, r0
 80211e0:	68d8      	ldr	r0, [r3, #12]
 80211e2:	b14c      	cbz	r4, 80211f8 <__assert_func+0x24>
 80211e4:	4b07      	ldr	r3, [pc, #28]	@ (8021204 <__assert_func+0x30>)
 80211e6:	9100      	str	r1, [sp, #0]
 80211e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80211ec:	4906      	ldr	r1, [pc, #24]	@ (8021208 <__assert_func+0x34>)
 80211ee:	462b      	mov	r3, r5
 80211f0:	f000 f984 	bl	80214fc <fiprintf>
 80211f4:	f7ff ffe7 	bl	80211c6 <abort>
 80211f8:	4b04      	ldr	r3, [pc, #16]	@ (802120c <__assert_func+0x38>)
 80211fa:	461c      	mov	r4, r3
 80211fc:	e7f3      	b.n	80211e6 <__assert_func+0x12>
 80211fe:	bf00      	nop
 8021200:	200000a4 	.word	0x200000a4
 8021204:	08023dc4 	.word	0x08023dc4
 8021208:	08023dd1 	.word	0x08023dd1
 802120c:	08023dff 	.word	0x08023dff

08021210 <atexit>:
 8021210:	2300      	movs	r3, #0
 8021212:	4601      	mov	r1, r0
 8021214:	461a      	mov	r2, r3
 8021216:	4618      	mov	r0, r3
 8021218:	f000 bb20 	b.w	802185c <__register_exitproc>

0802121c <malloc>:
 802121c:	4b02      	ldr	r3, [pc, #8]	@ (8021228 <malloc+0xc>)
 802121e:	4601      	mov	r1, r0
 8021220:	6818      	ldr	r0, [r3, #0]
 8021222:	f000 b82d 	b.w	8021280 <_malloc_r>
 8021226:	bf00      	nop
 8021228:	200000a4 	.word	0x200000a4

0802122c <free>:
 802122c:	4b02      	ldr	r3, [pc, #8]	@ (8021238 <free+0xc>)
 802122e:	4601      	mov	r1, r0
 8021230:	6818      	ldr	r0, [r3, #0]
 8021232:	f000 bb6f 	b.w	8021914 <_free_r>
 8021236:	bf00      	nop
 8021238:	200000a4 	.word	0x200000a4

0802123c <sbrk_aligned>:
 802123c:	b570      	push	{r4, r5, r6, lr}
 802123e:	4e0f      	ldr	r6, [pc, #60]	@ (802127c <sbrk_aligned+0x40>)
 8021240:	460c      	mov	r4, r1
 8021242:	6831      	ldr	r1, [r6, #0]
 8021244:	4605      	mov	r5, r0
 8021246:	b911      	cbnz	r1, 802124e <sbrk_aligned+0x12>
 8021248:	f000 faaa 	bl	80217a0 <_sbrk_r>
 802124c:	6030      	str	r0, [r6, #0]
 802124e:	4621      	mov	r1, r4
 8021250:	4628      	mov	r0, r5
 8021252:	f000 faa5 	bl	80217a0 <_sbrk_r>
 8021256:	1c43      	adds	r3, r0, #1
 8021258:	d103      	bne.n	8021262 <sbrk_aligned+0x26>
 802125a:	f04f 34ff 	mov.w	r4, #4294967295
 802125e:	4620      	mov	r0, r4
 8021260:	bd70      	pop	{r4, r5, r6, pc}
 8021262:	1cc4      	adds	r4, r0, #3
 8021264:	f024 0403 	bic.w	r4, r4, #3
 8021268:	42a0      	cmp	r0, r4
 802126a:	d0f8      	beq.n	802125e <sbrk_aligned+0x22>
 802126c:	1a21      	subs	r1, r4, r0
 802126e:	4628      	mov	r0, r5
 8021270:	f000 fa96 	bl	80217a0 <_sbrk_r>
 8021274:	3001      	adds	r0, #1
 8021276:	d1f2      	bne.n	802125e <sbrk_aligned+0x22>
 8021278:	e7ef      	b.n	802125a <sbrk_aligned+0x1e>
 802127a:	bf00      	nop
 802127c:	2002ba80 	.word	0x2002ba80

08021280 <_malloc_r>:
 8021280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021284:	1ccd      	adds	r5, r1, #3
 8021286:	f025 0503 	bic.w	r5, r5, #3
 802128a:	3508      	adds	r5, #8
 802128c:	2d0c      	cmp	r5, #12
 802128e:	bf38      	it	cc
 8021290:	250c      	movcc	r5, #12
 8021292:	2d00      	cmp	r5, #0
 8021294:	4606      	mov	r6, r0
 8021296:	db01      	blt.n	802129c <_malloc_r+0x1c>
 8021298:	42a9      	cmp	r1, r5
 802129a:	d904      	bls.n	80212a6 <_malloc_r+0x26>
 802129c:	230c      	movs	r3, #12
 802129e:	6033      	str	r3, [r6, #0]
 80212a0:	2000      	movs	r0, #0
 80212a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802137c <_malloc_r+0xfc>
 80212aa:	f000 f869 	bl	8021380 <__malloc_lock>
 80212ae:	f8d8 3000 	ldr.w	r3, [r8]
 80212b2:	461c      	mov	r4, r3
 80212b4:	bb44      	cbnz	r4, 8021308 <_malloc_r+0x88>
 80212b6:	4629      	mov	r1, r5
 80212b8:	4630      	mov	r0, r6
 80212ba:	f7ff ffbf 	bl	802123c <sbrk_aligned>
 80212be:	1c43      	adds	r3, r0, #1
 80212c0:	4604      	mov	r4, r0
 80212c2:	d158      	bne.n	8021376 <_malloc_r+0xf6>
 80212c4:	f8d8 4000 	ldr.w	r4, [r8]
 80212c8:	4627      	mov	r7, r4
 80212ca:	2f00      	cmp	r7, #0
 80212cc:	d143      	bne.n	8021356 <_malloc_r+0xd6>
 80212ce:	2c00      	cmp	r4, #0
 80212d0:	d04b      	beq.n	802136a <_malloc_r+0xea>
 80212d2:	6823      	ldr	r3, [r4, #0]
 80212d4:	4639      	mov	r1, r7
 80212d6:	4630      	mov	r0, r6
 80212d8:	eb04 0903 	add.w	r9, r4, r3
 80212dc:	f000 fa60 	bl	80217a0 <_sbrk_r>
 80212e0:	4581      	cmp	r9, r0
 80212e2:	d142      	bne.n	802136a <_malloc_r+0xea>
 80212e4:	6821      	ldr	r1, [r4, #0]
 80212e6:	1a6d      	subs	r5, r5, r1
 80212e8:	4629      	mov	r1, r5
 80212ea:	4630      	mov	r0, r6
 80212ec:	f7ff ffa6 	bl	802123c <sbrk_aligned>
 80212f0:	3001      	adds	r0, #1
 80212f2:	d03a      	beq.n	802136a <_malloc_r+0xea>
 80212f4:	6823      	ldr	r3, [r4, #0]
 80212f6:	442b      	add	r3, r5
 80212f8:	6023      	str	r3, [r4, #0]
 80212fa:	f8d8 3000 	ldr.w	r3, [r8]
 80212fe:	685a      	ldr	r2, [r3, #4]
 8021300:	bb62      	cbnz	r2, 802135c <_malloc_r+0xdc>
 8021302:	f8c8 7000 	str.w	r7, [r8]
 8021306:	e00f      	b.n	8021328 <_malloc_r+0xa8>
 8021308:	6822      	ldr	r2, [r4, #0]
 802130a:	1b52      	subs	r2, r2, r5
 802130c:	d420      	bmi.n	8021350 <_malloc_r+0xd0>
 802130e:	2a0b      	cmp	r2, #11
 8021310:	d917      	bls.n	8021342 <_malloc_r+0xc2>
 8021312:	1961      	adds	r1, r4, r5
 8021314:	42a3      	cmp	r3, r4
 8021316:	6025      	str	r5, [r4, #0]
 8021318:	bf18      	it	ne
 802131a:	6059      	strne	r1, [r3, #4]
 802131c:	6863      	ldr	r3, [r4, #4]
 802131e:	bf08      	it	eq
 8021320:	f8c8 1000 	streq.w	r1, [r8]
 8021324:	5162      	str	r2, [r4, r5]
 8021326:	604b      	str	r3, [r1, #4]
 8021328:	4630      	mov	r0, r6
 802132a:	f000 f82f 	bl	802138c <__malloc_unlock>
 802132e:	f104 000b 	add.w	r0, r4, #11
 8021332:	1d23      	adds	r3, r4, #4
 8021334:	f020 0007 	bic.w	r0, r0, #7
 8021338:	1ac2      	subs	r2, r0, r3
 802133a:	bf1c      	itt	ne
 802133c:	1a1b      	subne	r3, r3, r0
 802133e:	50a3      	strne	r3, [r4, r2]
 8021340:	e7af      	b.n	80212a2 <_malloc_r+0x22>
 8021342:	6862      	ldr	r2, [r4, #4]
 8021344:	42a3      	cmp	r3, r4
 8021346:	bf0c      	ite	eq
 8021348:	f8c8 2000 	streq.w	r2, [r8]
 802134c:	605a      	strne	r2, [r3, #4]
 802134e:	e7eb      	b.n	8021328 <_malloc_r+0xa8>
 8021350:	4623      	mov	r3, r4
 8021352:	6864      	ldr	r4, [r4, #4]
 8021354:	e7ae      	b.n	80212b4 <_malloc_r+0x34>
 8021356:	463c      	mov	r4, r7
 8021358:	687f      	ldr	r7, [r7, #4]
 802135a:	e7b6      	b.n	80212ca <_malloc_r+0x4a>
 802135c:	461a      	mov	r2, r3
 802135e:	685b      	ldr	r3, [r3, #4]
 8021360:	42a3      	cmp	r3, r4
 8021362:	d1fb      	bne.n	802135c <_malloc_r+0xdc>
 8021364:	2300      	movs	r3, #0
 8021366:	6053      	str	r3, [r2, #4]
 8021368:	e7de      	b.n	8021328 <_malloc_r+0xa8>
 802136a:	230c      	movs	r3, #12
 802136c:	6033      	str	r3, [r6, #0]
 802136e:	4630      	mov	r0, r6
 8021370:	f000 f80c 	bl	802138c <__malloc_unlock>
 8021374:	e794      	b.n	80212a0 <_malloc_r+0x20>
 8021376:	6005      	str	r5, [r0, #0]
 8021378:	e7d6      	b.n	8021328 <_malloc_r+0xa8>
 802137a:	bf00      	nop
 802137c:	2002ba84 	.word	0x2002ba84

08021380 <__malloc_lock>:
 8021380:	4801      	ldr	r0, [pc, #4]	@ (8021388 <__malloc_lock+0x8>)
 8021382:	f000 ba5a 	b.w	802183a <__retarget_lock_acquire_recursive>
 8021386:	bf00      	nop
 8021388:	2002bbc8 	.word	0x2002bbc8

0802138c <__malloc_unlock>:
 802138c:	4801      	ldr	r0, [pc, #4]	@ (8021394 <__malloc_unlock+0x8>)
 802138e:	f000 ba55 	b.w	802183c <__retarget_lock_release_recursive>
 8021392:	bf00      	nop
 8021394:	2002bbc8 	.word	0x2002bbc8

08021398 <__cxa_atexit>:
 8021398:	b510      	push	{r4, lr}
 802139a:	4604      	mov	r4, r0
 802139c:	4804      	ldr	r0, [pc, #16]	@ (80213b0 <__cxa_atexit+0x18>)
 802139e:	4613      	mov	r3, r2
 80213a0:	b120      	cbz	r0, 80213ac <__cxa_atexit+0x14>
 80213a2:	460a      	mov	r2, r1
 80213a4:	2002      	movs	r0, #2
 80213a6:	4621      	mov	r1, r4
 80213a8:	f000 fa58 	bl	802185c <__register_exitproc>
 80213ac:	bd10      	pop	{r4, pc}
 80213ae:	bf00      	nop
 80213b0:	0802185d 	.word	0x0802185d

080213b4 <std>:
 80213b4:	2300      	movs	r3, #0
 80213b6:	b510      	push	{r4, lr}
 80213b8:	4604      	mov	r4, r0
 80213ba:	e9c0 3300 	strd	r3, r3, [r0]
 80213be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80213c2:	6083      	str	r3, [r0, #8]
 80213c4:	8181      	strh	r1, [r0, #12]
 80213c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80213c8:	81c2      	strh	r2, [r0, #14]
 80213ca:	6183      	str	r3, [r0, #24]
 80213cc:	4619      	mov	r1, r3
 80213ce:	2208      	movs	r2, #8
 80213d0:	305c      	adds	r0, #92	@ 0x5c
 80213d2:	f000 f906 	bl	80215e2 <memset>
 80213d6:	4b0d      	ldr	r3, [pc, #52]	@ (802140c <std+0x58>)
 80213d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80213da:	4b0d      	ldr	r3, [pc, #52]	@ (8021410 <std+0x5c>)
 80213dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80213de:	4b0d      	ldr	r3, [pc, #52]	@ (8021414 <std+0x60>)
 80213e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80213e2:	4b0d      	ldr	r3, [pc, #52]	@ (8021418 <std+0x64>)
 80213e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80213e6:	4b0d      	ldr	r3, [pc, #52]	@ (802141c <std+0x68>)
 80213e8:	6224      	str	r4, [r4, #32]
 80213ea:	429c      	cmp	r4, r3
 80213ec:	d006      	beq.n	80213fc <std+0x48>
 80213ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80213f2:	4294      	cmp	r4, r2
 80213f4:	d002      	beq.n	80213fc <std+0x48>
 80213f6:	33d0      	adds	r3, #208	@ 0xd0
 80213f8:	429c      	cmp	r4, r3
 80213fa:	d105      	bne.n	8021408 <std+0x54>
 80213fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021404:	f000 ba18 	b.w	8021838 <__retarget_lock_init_recursive>
 8021408:	bd10      	pop	{r4, pc}
 802140a:	bf00      	nop
 802140c:	0802155d 	.word	0x0802155d
 8021410:	0802157f 	.word	0x0802157f
 8021414:	080215b7 	.word	0x080215b7
 8021418:	080215db 	.word	0x080215db
 802141c:	2002ba88 	.word	0x2002ba88

08021420 <stdio_exit_handler>:
 8021420:	4a02      	ldr	r2, [pc, #8]	@ (802142c <stdio_exit_handler+0xc>)
 8021422:	4903      	ldr	r1, [pc, #12]	@ (8021430 <stdio_exit_handler+0x10>)
 8021424:	4803      	ldr	r0, [pc, #12]	@ (8021434 <stdio_exit_handler+0x14>)
 8021426:	f000 b87b 	b.w	8021520 <_fwalk_sglue>
 802142a:	bf00      	nop
 802142c:	20000098 	.word	0x20000098
 8021430:	0802204d 	.word	0x0802204d
 8021434:	200000a8 	.word	0x200000a8

08021438 <cleanup_stdio>:
 8021438:	6841      	ldr	r1, [r0, #4]
 802143a:	4b0c      	ldr	r3, [pc, #48]	@ (802146c <cleanup_stdio+0x34>)
 802143c:	4299      	cmp	r1, r3
 802143e:	b510      	push	{r4, lr}
 8021440:	4604      	mov	r4, r0
 8021442:	d001      	beq.n	8021448 <cleanup_stdio+0x10>
 8021444:	f000 fe02 	bl	802204c <_fflush_r>
 8021448:	68a1      	ldr	r1, [r4, #8]
 802144a:	4b09      	ldr	r3, [pc, #36]	@ (8021470 <cleanup_stdio+0x38>)
 802144c:	4299      	cmp	r1, r3
 802144e:	d002      	beq.n	8021456 <cleanup_stdio+0x1e>
 8021450:	4620      	mov	r0, r4
 8021452:	f000 fdfb 	bl	802204c <_fflush_r>
 8021456:	68e1      	ldr	r1, [r4, #12]
 8021458:	4b06      	ldr	r3, [pc, #24]	@ (8021474 <cleanup_stdio+0x3c>)
 802145a:	4299      	cmp	r1, r3
 802145c:	d004      	beq.n	8021468 <cleanup_stdio+0x30>
 802145e:	4620      	mov	r0, r4
 8021460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021464:	f000 bdf2 	b.w	802204c <_fflush_r>
 8021468:	bd10      	pop	{r4, pc}
 802146a:	bf00      	nop
 802146c:	2002ba88 	.word	0x2002ba88
 8021470:	2002baf0 	.word	0x2002baf0
 8021474:	2002bb58 	.word	0x2002bb58

08021478 <global_stdio_init.part.0>:
 8021478:	b510      	push	{r4, lr}
 802147a:	4b0b      	ldr	r3, [pc, #44]	@ (80214a8 <global_stdio_init.part.0+0x30>)
 802147c:	4c0b      	ldr	r4, [pc, #44]	@ (80214ac <global_stdio_init.part.0+0x34>)
 802147e:	4a0c      	ldr	r2, [pc, #48]	@ (80214b0 <global_stdio_init.part.0+0x38>)
 8021480:	601a      	str	r2, [r3, #0]
 8021482:	4620      	mov	r0, r4
 8021484:	2200      	movs	r2, #0
 8021486:	2104      	movs	r1, #4
 8021488:	f7ff ff94 	bl	80213b4 <std>
 802148c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021490:	2201      	movs	r2, #1
 8021492:	2109      	movs	r1, #9
 8021494:	f7ff ff8e 	bl	80213b4 <std>
 8021498:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802149c:	2202      	movs	r2, #2
 802149e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214a2:	2112      	movs	r1, #18
 80214a4:	f7ff bf86 	b.w	80213b4 <std>
 80214a8:	2002bbc0 	.word	0x2002bbc0
 80214ac:	2002ba88 	.word	0x2002ba88
 80214b0:	08021421 	.word	0x08021421

080214b4 <__sfp_lock_acquire>:
 80214b4:	4801      	ldr	r0, [pc, #4]	@ (80214bc <__sfp_lock_acquire+0x8>)
 80214b6:	f000 b9c0 	b.w	802183a <__retarget_lock_acquire_recursive>
 80214ba:	bf00      	nop
 80214bc:	2002bbca 	.word	0x2002bbca

080214c0 <__sfp_lock_release>:
 80214c0:	4801      	ldr	r0, [pc, #4]	@ (80214c8 <__sfp_lock_release+0x8>)
 80214c2:	f000 b9bb 	b.w	802183c <__retarget_lock_release_recursive>
 80214c6:	bf00      	nop
 80214c8:	2002bbca 	.word	0x2002bbca

080214cc <__sinit>:
 80214cc:	b510      	push	{r4, lr}
 80214ce:	4604      	mov	r4, r0
 80214d0:	f7ff fff0 	bl	80214b4 <__sfp_lock_acquire>
 80214d4:	6a23      	ldr	r3, [r4, #32]
 80214d6:	b11b      	cbz	r3, 80214e0 <__sinit+0x14>
 80214d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214dc:	f7ff bff0 	b.w	80214c0 <__sfp_lock_release>
 80214e0:	4b04      	ldr	r3, [pc, #16]	@ (80214f4 <__sinit+0x28>)
 80214e2:	6223      	str	r3, [r4, #32]
 80214e4:	4b04      	ldr	r3, [pc, #16]	@ (80214f8 <__sinit+0x2c>)
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d1f5      	bne.n	80214d8 <__sinit+0xc>
 80214ec:	f7ff ffc4 	bl	8021478 <global_stdio_init.part.0>
 80214f0:	e7f2      	b.n	80214d8 <__sinit+0xc>
 80214f2:	bf00      	nop
 80214f4:	08021439 	.word	0x08021439
 80214f8:	2002bbc0 	.word	0x2002bbc0

080214fc <fiprintf>:
 80214fc:	b40e      	push	{r1, r2, r3}
 80214fe:	b503      	push	{r0, r1, lr}
 8021500:	4601      	mov	r1, r0
 8021502:	ab03      	add	r3, sp, #12
 8021504:	4805      	ldr	r0, [pc, #20]	@ (802151c <fiprintf+0x20>)
 8021506:	f853 2b04 	ldr.w	r2, [r3], #4
 802150a:	6800      	ldr	r0, [r0, #0]
 802150c:	9301      	str	r3, [sp, #4]
 802150e:	f000 fa75 	bl	80219fc <_vfiprintf_r>
 8021512:	b002      	add	sp, #8
 8021514:	f85d eb04 	ldr.w	lr, [sp], #4
 8021518:	b003      	add	sp, #12
 802151a:	4770      	bx	lr
 802151c:	200000a4 	.word	0x200000a4

08021520 <_fwalk_sglue>:
 8021520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021524:	4607      	mov	r7, r0
 8021526:	4688      	mov	r8, r1
 8021528:	4614      	mov	r4, r2
 802152a:	2600      	movs	r6, #0
 802152c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021530:	f1b9 0901 	subs.w	r9, r9, #1
 8021534:	d505      	bpl.n	8021542 <_fwalk_sglue+0x22>
 8021536:	6824      	ldr	r4, [r4, #0]
 8021538:	2c00      	cmp	r4, #0
 802153a:	d1f7      	bne.n	802152c <_fwalk_sglue+0xc>
 802153c:	4630      	mov	r0, r6
 802153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021542:	89ab      	ldrh	r3, [r5, #12]
 8021544:	2b01      	cmp	r3, #1
 8021546:	d907      	bls.n	8021558 <_fwalk_sglue+0x38>
 8021548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802154c:	3301      	adds	r3, #1
 802154e:	d003      	beq.n	8021558 <_fwalk_sglue+0x38>
 8021550:	4629      	mov	r1, r5
 8021552:	4638      	mov	r0, r7
 8021554:	47c0      	blx	r8
 8021556:	4306      	orrs	r6, r0
 8021558:	3568      	adds	r5, #104	@ 0x68
 802155a:	e7e9      	b.n	8021530 <_fwalk_sglue+0x10>

0802155c <__sread>:
 802155c:	b510      	push	{r4, lr}
 802155e:	460c      	mov	r4, r1
 8021560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021564:	f000 f8f6 	bl	8021754 <_read_r>
 8021568:	2800      	cmp	r0, #0
 802156a:	bfab      	itete	ge
 802156c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802156e:	89a3      	ldrhlt	r3, [r4, #12]
 8021570:	181b      	addge	r3, r3, r0
 8021572:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021576:	bfac      	ite	ge
 8021578:	6563      	strge	r3, [r4, #84]	@ 0x54
 802157a:	81a3      	strhlt	r3, [r4, #12]
 802157c:	bd10      	pop	{r4, pc}

0802157e <__swrite>:
 802157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021582:	461f      	mov	r7, r3
 8021584:	898b      	ldrh	r3, [r1, #12]
 8021586:	05db      	lsls	r3, r3, #23
 8021588:	4605      	mov	r5, r0
 802158a:	460c      	mov	r4, r1
 802158c:	4616      	mov	r6, r2
 802158e:	d505      	bpl.n	802159c <__swrite+0x1e>
 8021590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021594:	2302      	movs	r3, #2
 8021596:	2200      	movs	r2, #0
 8021598:	f000 f8ca 	bl	8021730 <_lseek_r>
 802159c:	89a3      	ldrh	r3, [r4, #12]
 802159e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80215a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80215a6:	81a3      	strh	r3, [r4, #12]
 80215a8:	4632      	mov	r2, r6
 80215aa:	463b      	mov	r3, r7
 80215ac:	4628      	mov	r0, r5
 80215ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80215b2:	f000 b905 	b.w	80217c0 <_write_r>

080215b6 <__sseek>:
 80215b6:	b510      	push	{r4, lr}
 80215b8:	460c      	mov	r4, r1
 80215ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215be:	f000 f8b7 	bl	8021730 <_lseek_r>
 80215c2:	1c43      	adds	r3, r0, #1
 80215c4:	89a3      	ldrh	r3, [r4, #12]
 80215c6:	bf15      	itete	ne
 80215c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80215ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80215ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80215d2:	81a3      	strheq	r3, [r4, #12]
 80215d4:	bf18      	it	ne
 80215d6:	81a3      	strhne	r3, [r4, #12]
 80215d8:	bd10      	pop	{r4, pc}

080215da <__sclose>:
 80215da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215de:	f000 b839 	b.w	8021654 <_close_r>

080215e2 <memset>:
 80215e2:	4402      	add	r2, r0
 80215e4:	4603      	mov	r3, r0
 80215e6:	4293      	cmp	r3, r2
 80215e8:	d100      	bne.n	80215ec <memset+0xa>
 80215ea:	4770      	bx	lr
 80215ec:	f803 1b01 	strb.w	r1, [r3], #1
 80215f0:	e7f9      	b.n	80215e6 <memset+0x4>

080215f2 <_raise_r>:
 80215f2:	291f      	cmp	r1, #31
 80215f4:	b538      	push	{r3, r4, r5, lr}
 80215f6:	4605      	mov	r5, r0
 80215f8:	460c      	mov	r4, r1
 80215fa:	d904      	bls.n	8021606 <_raise_r+0x14>
 80215fc:	2316      	movs	r3, #22
 80215fe:	6003      	str	r3, [r0, #0]
 8021600:	f04f 30ff 	mov.w	r0, #4294967295
 8021604:	bd38      	pop	{r3, r4, r5, pc}
 8021606:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021608:	b112      	cbz	r2, 8021610 <_raise_r+0x1e>
 802160a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802160e:	b94b      	cbnz	r3, 8021624 <_raise_r+0x32>
 8021610:	4628      	mov	r0, r5
 8021612:	f000 f8c3 	bl	802179c <_getpid_r>
 8021616:	4622      	mov	r2, r4
 8021618:	4601      	mov	r1, r0
 802161a:	4628      	mov	r0, r5
 802161c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021620:	f000 b8aa 	b.w	8021778 <_kill_r>
 8021624:	2b01      	cmp	r3, #1
 8021626:	d00a      	beq.n	802163e <_raise_r+0x4c>
 8021628:	1c59      	adds	r1, r3, #1
 802162a:	d103      	bne.n	8021634 <_raise_r+0x42>
 802162c:	2316      	movs	r3, #22
 802162e:	6003      	str	r3, [r0, #0]
 8021630:	2001      	movs	r0, #1
 8021632:	e7e7      	b.n	8021604 <_raise_r+0x12>
 8021634:	2100      	movs	r1, #0
 8021636:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802163a:	4620      	mov	r0, r4
 802163c:	4798      	blx	r3
 802163e:	2000      	movs	r0, #0
 8021640:	e7e0      	b.n	8021604 <_raise_r+0x12>
	...

08021644 <raise>:
 8021644:	4b02      	ldr	r3, [pc, #8]	@ (8021650 <raise+0xc>)
 8021646:	4601      	mov	r1, r0
 8021648:	6818      	ldr	r0, [r3, #0]
 802164a:	f7ff bfd2 	b.w	80215f2 <_raise_r>
 802164e:	bf00      	nop
 8021650:	200000a4 	.word	0x200000a4

08021654 <_close_r>:
 8021654:	b538      	push	{r3, r4, r5, lr}
 8021656:	4d06      	ldr	r5, [pc, #24]	@ (8021670 <_close_r+0x1c>)
 8021658:	2300      	movs	r3, #0
 802165a:	4604      	mov	r4, r0
 802165c:	4608      	mov	r0, r1
 802165e:	602b      	str	r3, [r5, #0]
 8021660:	f7df fffa 	bl	8001658 <_close>
 8021664:	1c43      	adds	r3, r0, #1
 8021666:	d102      	bne.n	802166e <_close_r+0x1a>
 8021668:	682b      	ldr	r3, [r5, #0]
 802166a:	b103      	cbz	r3, 802166e <_close_r+0x1a>
 802166c:	6023      	str	r3, [r4, #0]
 802166e:	bd38      	pop	{r3, r4, r5, pc}
 8021670:	2002bbc4 	.word	0x2002bbc4

08021674 <_reclaim_reent>:
 8021674:	4b2d      	ldr	r3, [pc, #180]	@ (802172c <_reclaim_reent+0xb8>)
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	4283      	cmp	r3, r0
 802167a:	b570      	push	{r4, r5, r6, lr}
 802167c:	4604      	mov	r4, r0
 802167e:	d053      	beq.n	8021728 <_reclaim_reent+0xb4>
 8021680:	69c3      	ldr	r3, [r0, #28]
 8021682:	b31b      	cbz	r3, 80216cc <_reclaim_reent+0x58>
 8021684:	68db      	ldr	r3, [r3, #12]
 8021686:	b163      	cbz	r3, 80216a2 <_reclaim_reent+0x2e>
 8021688:	2500      	movs	r5, #0
 802168a:	69e3      	ldr	r3, [r4, #28]
 802168c:	68db      	ldr	r3, [r3, #12]
 802168e:	5959      	ldr	r1, [r3, r5]
 8021690:	b9b1      	cbnz	r1, 80216c0 <_reclaim_reent+0x4c>
 8021692:	3504      	adds	r5, #4
 8021694:	2d80      	cmp	r5, #128	@ 0x80
 8021696:	d1f8      	bne.n	802168a <_reclaim_reent+0x16>
 8021698:	69e3      	ldr	r3, [r4, #28]
 802169a:	4620      	mov	r0, r4
 802169c:	68d9      	ldr	r1, [r3, #12]
 802169e:	f000 f939 	bl	8021914 <_free_r>
 80216a2:	69e3      	ldr	r3, [r4, #28]
 80216a4:	6819      	ldr	r1, [r3, #0]
 80216a6:	b111      	cbz	r1, 80216ae <_reclaim_reent+0x3a>
 80216a8:	4620      	mov	r0, r4
 80216aa:	f000 f933 	bl	8021914 <_free_r>
 80216ae:	69e3      	ldr	r3, [r4, #28]
 80216b0:	689d      	ldr	r5, [r3, #8]
 80216b2:	b15d      	cbz	r5, 80216cc <_reclaim_reent+0x58>
 80216b4:	4629      	mov	r1, r5
 80216b6:	4620      	mov	r0, r4
 80216b8:	682d      	ldr	r5, [r5, #0]
 80216ba:	f000 f92b 	bl	8021914 <_free_r>
 80216be:	e7f8      	b.n	80216b2 <_reclaim_reent+0x3e>
 80216c0:	680e      	ldr	r6, [r1, #0]
 80216c2:	4620      	mov	r0, r4
 80216c4:	f000 f926 	bl	8021914 <_free_r>
 80216c8:	4631      	mov	r1, r6
 80216ca:	e7e1      	b.n	8021690 <_reclaim_reent+0x1c>
 80216cc:	6961      	ldr	r1, [r4, #20]
 80216ce:	b111      	cbz	r1, 80216d6 <_reclaim_reent+0x62>
 80216d0:	4620      	mov	r0, r4
 80216d2:	f000 f91f 	bl	8021914 <_free_r>
 80216d6:	69e1      	ldr	r1, [r4, #28]
 80216d8:	b111      	cbz	r1, 80216e0 <_reclaim_reent+0x6c>
 80216da:	4620      	mov	r0, r4
 80216dc:	f000 f91a 	bl	8021914 <_free_r>
 80216e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80216e2:	b111      	cbz	r1, 80216ea <_reclaim_reent+0x76>
 80216e4:	4620      	mov	r0, r4
 80216e6:	f000 f915 	bl	8021914 <_free_r>
 80216ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80216ec:	b111      	cbz	r1, 80216f4 <_reclaim_reent+0x80>
 80216ee:	4620      	mov	r0, r4
 80216f0:	f000 f910 	bl	8021914 <_free_r>
 80216f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80216f6:	b111      	cbz	r1, 80216fe <_reclaim_reent+0x8a>
 80216f8:	4620      	mov	r0, r4
 80216fa:	f000 f90b 	bl	8021914 <_free_r>
 80216fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8021700:	b111      	cbz	r1, 8021708 <_reclaim_reent+0x94>
 8021702:	4620      	mov	r0, r4
 8021704:	f000 f906 	bl	8021914 <_free_r>
 8021708:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802170a:	b111      	cbz	r1, 8021712 <_reclaim_reent+0x9e>
 802170c:	4620      	mov	r0, r4
 802170e:	f000 f901 	bl	8021914 <_free_r>
 8021712:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021714:	b111      	cbz	r1, 802171c <_reclaim_reent+0xa8>
 8021716:	4620      	mov	r0, r4
 8021718:	f000 f8fc 	bl	8021914 <_free_r>
 802171c:	6a23      	ldr	r3, [r4, #32]
 802171e:	b11b      	cbz	r3, 8021728 <_reclaim_reent+0xb4>
 8021720:	4620      	mov	r0, r4
 8021722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021726:	4718      	bx	r3
 8021728:	bd70      	pop	{r4, r5, r6, pc}
 802172a:	bf00      	nop
 802172c:	200000a4 	.word	0x200000a4

08021730 <_lseek_r>:
 8021730:	b538      	push	{r3, r4, r5, lr}
 8021732:	4d07      	ldr	r5, [pc, #28]	@ (8021750 <_lseek_r+0x20>)
 8021734:	4604      	mov	r4, r0
 8021736:	4608      	mov	r0, r1
 8021738:	4611      	mov	r1, r2
 802173a:	2200      	movs	r2, #0
 802173c:	602a      	str	r2, [r5, #0]
 802173e:	461a      	mov	r2, r3
 8021740:	f7df ffb1 	bl	80016a6 <_lseek>
 8021744:	1c43      	adds	r3, r0, #1
 8021746:	d102      	bne.n	802174e <_lseek_r+0x1e>
 8021748:	682b      	ldr	r3, [r5, #0]
 802174a:	b103      	cbz	r3, 802174e <_lseek_r+0x1e>
 802174c:	6023      	str	r3, [r4, #0]
 802174e:	bd38      	pop	{r3, r4, r5, pc}
 8021750:	2002bbc4 	.word	0x2002bbc4

08021754 <_read_r>:
 8021754:	b538      	push	{r3, r4, r5, lr}
 8021756:	4d07      	ldr	r5, [pc, #28]	@ (8021774 <_read_r+0x20>)
 8021758:	4604      	mov	r4, r0
 802175a:	4608      	mov	r0, r1
 802175c:	4611      	mov	r1, r2
 802175e:	2200      	movs	r2, #0
 8021760:	602a      	str	r2, [r5, #0]
 8021762:	461a      	mov	r2, r3
 8021764:	f7df ff3f 	bl	80015e6 <_read>
 8021768:	1c43      	adds	r3, r0, #1
 802176a:	d102      	bne.n	8021772 <_read_r+0x1e>
 802176c:	682b      	ldr	r3, [r5, #0]
 802176e:	b103      	cbz	r3, 8021772 <_read_r+0x1e>
 8021770:	6023      	str	r3, [r4, #0]
 8021772:	bd38      	pop	{r3, r4, r5, pc}
 8021774:	2002bbc4 	.word	0x2002bbc4

08021778 <_kill_r>:
 8021778:	b538      	push	{r3, r4, r5, lr}
 802177a:	4d07      	ldr	r5, [pc, #28]	@ (8021798 <_kill_r+0x20>)
 802177c:	2300      	movs	r3, #0
 802177e:	4604      	mov	r4, r0
 8021780:	4608      	mov	r0, r1
 8021782:	4611      	mov	r1, r2
 8021784:	602b      	str	r3, [r5, #0]
 8021786:	f7df ff13 	bl	80015b0 <_kill>
 802178a:	1c43      	adds	r3, r0, #1
 802178c:	d102      	bne.n	8021794 <_kill_r+0x1c>
 802178e:	682b      	ldr	r3, [r5, #0]
 8021790:	b103      	cbz	r3, 8021794 <_kill_r+0x1c>
 8021792:	6023      	str	r3, [r4, #0]
 8021794:	bd38      	pop	{r3, r4, r5, pc}
 8021796:	bf00      	nop
 8021798:	2002bbc4 	.word	0x2002bbc4

0802179c <_getpid_r>:
 802179c:	f7df bf00 	b.w	80015a0 <_getpid>

080217a0 <_sbrk_r>:
 80217a0:	b538      	push	{r3, r4, r5, lr}
 80217a2:	4d06      	ldr	r5, [pc, #24]	@ (80217bc <_sbrk_r+0x1c>)
 80217a4:	2300      	movs	r3, #0
 80217a6:	4604      	mov	r4, r0
 80217a8:	4608      	mov	r0, r1
 80217aa:	602b      	str	r3, [r5, #0]
 80217ac:	f7df ff88 	bl	80016c0 <_sbrk>
 80217b0:	1c43      	adds	r3, r0, #1
 80217b2:	d102      	bne.n	80217ba <_sbrk_r+0x1a>
 80217b4:	682b      	ldr	r3, [r5, #0]
 80217b6:	b103      	cbz	r3, 80217ba <_sbrk_r+0x1a>
 80217b8:	6023      	str	r3, [r4, #0]
 80217ba:	bd38      	pop	{r3, r4, r5, pc}
 80217bc:	2002bbc4 	.word	0x2002bbc4

080217c0 <_write_r>:
 80217c0:	b538      	push	{r3, r4, r5, lr}
 80217c2:	4d07      	ldr	r5, [pc, #28]	@ (80217e0 <_write_r+0x20>)
 80217c4:	4604      	mov	r4, r0
 80217c6:	4608      	mov	r0, r1
 80217c8:	4611      	mov	r1, r2
 80217ca:	2200      	movs	r2, #0
 80217cc:	602a      	str	r2, [r5, #0]
 80217ce:	461a      	mov	r2, r3
 80217d0:	f7df ff26 	bl	8001620 <_write>
 80217d4:	1c43      	adds	r3, r0, #1
 80217d6:	d102      	bne.n	80217de <_write_r+0x1e>
 80217d8:	682b      	ldr	r3, [r5, #0]
 80217da:	b103      	cbz	r3, 80217de <_write_r+0x1e>
 80217dc:	6023      	str	r3, [r4, #0]
 80217de:	bd38      	pop	{r3, r4, r5, pc}
 80217e0:	2002bbc4 	.word	0x2002bbc4

080217e4 <__errno>:
 80217e4:	4b01      	ldr	r3, [pc, #4]	@ (80217ec <__errno+0x8>)
 80217e6:	6818      	ldr	r0, [r3, #0]
 80217e8:	4770      	bx	lr
 80217ea:	bf00      	nop
 80217ec:	200000a4 	.word	0x200000a4

080217f0 <__libc_init_array>:
 80217f0:	b570      	push	{r4, r5, r6, lr}
 80217f2:	4d0d      	ldr	r5, [pc, #52]	@ (8021828 <__libc_init_array+0x38>)
 80217f4:	4c0d      	ldr	r4, [pc, #52]	@ (802182c <__libc_init_array+0x3c>)
 80217f6:	1b64      	subs	r4, r4, r5
 80217f8:	10a4      	asrs	r4, r4, #2
 80217fa:	2600      	movs	r6, #0
 80217fc:	42a6      	cmp	r6, r4
 80217fe:	d109      	bne.n	8021814 <__libc_init_array+0x24>
 8021800:	4d0b      	ldr	r5, [pc, #44]	@ (8021830 <__libc_init_array+0x40>)
 8021802:	4c0c      	ldr	r4, [pc, #48]	@ (8021834 <__libc_init_array+0x44>)
 8021804:	f000 fd62 	bl	80222cc <_init>
 8021808:	1b64      	subs	r4, r4, r5
 802180a:	10a4      	asrs	r4, r4, #2
 802180c:	2600      	movs	r6, #0
 802180e:	42a6      	cmp	r6, r4
 8021810:	d105      	bne.n	802181e <__libc_init_array+0x2e>
 8021812:	bd70      	pop	{r4, r5, r6, pc}
 8021814:	f855 3b04 	ldr.w	r3, [r5], #4
 8021818:	4798      	blx	r3
 802181a:	3601      	adds	r6, #1
 802181c:	e7ee      	b.n	80217fc <__libc_init_array+0xc>
 802181e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021822:	4798      	blx	r3
 8021824:	3601      	adds	r6, #1
 8021826:	e7f2      	b.n	802180e <__libc_init_array+0x1e>
 8021828:	080279ac 	.word	0x080279ac
 802182c:	080279ac 	.word	0x080279ac
 8021830:	080279ac 	.word	0x080279ac
 8021834:	080279c0 	.word	0x080279c0

08021838 <__retarget_lock_init_recursive>:
 8021838:	4770      	bx	lr

0802183a <__retarget_lock_acquire_recursive>:
 802183a:	4770      	bx	lr

0802183c <__retarget_lock_release_recursive>:
 802183c:	4770      	bx	lr

0802183e <memcpy>:
 802183e:	440a      	add	r2, r1
 8021840:	4291      	cmp	r1, r2
 8021842:	f100 33ff 	add.w	r3, r0, #4294967295
 8021846:	d100      	bne.n	802184a <memcpy+0xc>
 8021848:	4770      	bx	lr
 802184a:	b510      	push	{r4, lr}
 802184c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021854:	4291      	cmp	r1, r2
 8021856:	d1f9      	bne.n	802184c <memcpy+0xe>
 8021858:	bd10      	pop	{r4, pc}
	...

0802185c <__register_exitproc>:
 802185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021860:	4d27      	ldr	r5, [pc, #156]	@ (8021900 <__register_exitproc+0xa4>)
 8021862:	4607      	mov	r7, r0
 8021864:	6828      	ldr	r0, [r5, #0]
 8021866:	4691      	mov	r9, r2
 8021868:	460e      	mov	r6, r1
 802186a:	4698      	mov	r8, r3
 802186c:	f7ff ffe5 	bl	802183a <__retarget_lock_acquire_recursive>
 8021870:	4a24      	ldr	r2, [pc, #144]	@ (8021904 <__register_exitproc+0xa8>)
 8021872:	6814      	ldr	r4, [r2, #0]
 8021874:	b93c      	cbnz	r4, 8021886 <__register_exitproc+0x2a>
 8021876:	4b24      	ldr	r3, [pc, #144]	@ (8021908 <__register_exitproc+0xac>)
 8021878:	6013      	str	r3, [r2, #0]
 802187a:	4a24      	ldr	r2, [pc, #144]	@ (802190c <__register_exitproc+0xb0>)
 802187c:	b112      	cbz	r2, 8021884 <__register_exitproc+0x28>
 802187e:	6812      	ldr	r2, [r2, #0]
 8021880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8021884:	4c20      	ldr	r4, [pc, #128]	@ (8021908 <__register_exitproc+0xac>)
 8021886:	6863      	ldr	r3, [r4, #4]
 8021888:	2b1f      	cmp	r3, #31
 802188a:	dd06      	ble.n	802189a <__register_exitproc+0x3e>
 802188c:	6828      	ldr	r0, [r5, #0]
 802188e:	f7ff ffd5 	bl	802183c <__retarget_lock_release_recursive>
 8021892:	f04f 30ff 	mov.w	r0, #4294967295
 8021896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802189a:	b32f      	cbz	r7, 80218e8 <__register_exitproc+0x8c>
 802189c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80218a0:	b968      	cbnz	r0, 80218be <__register_exitproc+0x62>
 80218a2:	4b1b      	ldr	r3, [pc, #108]	@ (8021910 <__register_exitproc+0xb4>)
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d0f1      	beq.n	802188c <__register_exitproc+0x30>
 80218a8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80218ac:	f7ff fcb6 	bl	802121c <malloc>
 80218b0:	2800      	cmp	r0, #0
 80218b2:	d0eb      	beq.n	802188c <__register_exitproc+0x30>
 80218b4:	2300      	movs	r3, #0
 80218b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80218ba:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80218be:	6863      	ldr	r3, [r4, #4]
 80218c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80218c4:	2201      	movs	r2, #1
 80218c6:	409a      	lsls	r2, r3
 80218c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80218cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80218d0:	4313      	orrs	r3, r2
 80218d2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80218d6:	2f02      	cmp	r7, #2
 80218d8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80218dc:	bf02      	ittt	eq
 80218de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80218e2:	4313      	orreq	r3, r2
 80218e4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80218e8:	6863      	ldr	r3, [r4, #4]
 80218ea:	6828      	ldr	r0, [r5, #0]
 80218ec:	1c5a      	adds	r2, r3, #1
 80218ee:	3302      	adds	r3, #2
 80218f0:	6062      	str	r2, [r4, #4]
 80218f2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80218f6:	f7ff ffa1 	bl	802183c <__retarget_lock_release_recursive>
 80218fa:	2000      	movs	r0, #0
 80218fc:	e7cb      	b.n	8021896 <__register_exitproc+0x3a>
 80218fe:	bf00      	nop
 8021900:	200000f4 	.word	0x200000f4
 8021904:	2002bc58 	.word	0x2002bc58
 8021908:	2002bbcc 	.word	0x2002bbcc
 802190c:	08023e34 	.word	0x08023e34
 8021910:	0802121d 	.word	0x0802121d

08021914 <_free_r>:
 8021914:	b538      	push	{r3, r4, r5, lr}
 8021916:	4605      	mov	r5, r0
 8021918:	2900      	cmp	r1, #0
 802191a:	d041      	beq.n	80219a0 <_free_r+0x8c>
 802191c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021920:	1f0c      	subs	r4, r1, #4
 8021922:	2b00      	cmp	r3, #0
 8021924:	bfb8      	it	lt
 8021926:	18e4      	addlt	r4, r4, r3
 8021928:	f7ff fd2a 	bl	8021380 <__malloc_lock>
 802192c:	4a1d      	ldr	r2, [pc, #116]	@ (80219a4 <_free_r+0x90>)
 802192e:	6813      	ldr	r3, [r2, #0]
 8021930:	b933      	cbnz	r3, 8021940 <_free_r+0x2c>
 8021932:	6063      	str	r3, [r4, #4]
 8021934:	6014      	str	r4, [r2, #0]
 8021936:	4628      	mov	r0, r5
 8021938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802193c:	f7ff bd26 	b.w	802138c <__malloc_unlock>
 8021940:	42a3      	cmp	r3, r4
 8021942:	d908      	bls.n	8021956 <_free_r+0x42>
 8021944:	6820      	ldr	r0, [r4, #0]
 8021946:	1821      	adds	r1, r4, r0
 8021948:	428b      	cmp	r3, r1
 802194a:	bf01      	itttt	eq
 802194c:	6819      	ldreq	r1, [r3, #0]
 802194e:	685b      	ldreq	r3, [r3, #4]
 8021950:	1809      	addeq	r1, r1, r0
 8021952:	6021      	streq	r1, [r4, #0]
 8021954:	e7ed      	b.n	8021932 <_free_r+0x1e>
 8021956:	461a      	mov	r2, r3
 8021958:	685b      	ldr	r3, [r3, #4]
 802195a:	b10b      	cbz	r3, 8021960 <_free_r+0x4c>
 802195c:	42a3      	cmp	r3, r4
 802195e:	d9fa      	bls.n	8021956 <_free_r+0x42>
 8021960:	6811      	ldr	r1, [r2, #0]
 8021962:	1850      	adds	r0, r2, r1
 8021964:	42a0      	cmp	r0, r4
 8021966:	d10b      	bne.n	8021980 <_free_r+0x6c>
 8021968:	6820      	ldr	r0, [r4, #0]
 802196a:	4401      	add	r1, r0
 802196c:	1850      	adds	r0, r2, r1
 802196e:	4283      	cmp	r3, r0
 8021970:	6011      	str	r1, [r2, #0]
 8021972:	d1e0      	bne.n	8021936 <_free_r+0x22>
 8021974:	6818      	ldr	r0, [r3, #0]
 8021976:	685b      	ldr	r3, [r3, #4]
 8021978:	6053      	str	r3, [r2, #4]
 802197a:	4408      	add	r0, r1
 802197c:	6010      	str	r0, [r2, #0]
 802197e:	e7da      	b.n	8021936 <_free_r+0x22>
 8021980:	d902      	bls.n	8021988 <_free_r+0x74>
 8021982:	230c      	movs	r3, #12
 8021984:	602b      	str	r3, [r5, #0]
 8021986:	e7d6      	b.n	8021936 <_free_r+0x22>
 8021988:	6820      	ldr	r0, [r4, #0]
 802198a:	1821      	adds	r1, r4, r0
 802198c:	428b      	cmp	r3, r1
 802198e:	bf04      	itt	eq
 8021990:	6819      	ldreq	r1, [r3, #0]
 8021992:	685b      	ldreq	r3, [r3, #4]
 8021994:	6063      	str	r3, [r4, #4]
 8021996:	bf04      	itt	eq
 8021998:	1809      	addeq	r1, r1, r0
 802199a:	6021      	streq	r1, [r4, #0]
 802199c:	6054      	str	r4, [r2, #4]
 802199e:	e7ca      	b.n	8021936 <_free_r+0x22>
 80219a0:	bd38      	pop	{r3, r4, r5, pc}
 80219a2:	bf00      	nop
 80219a4:	2002ba84 	.word	0x2002ba84

080219a8 <__sfputc_r>:
 80219a8:	6893      	ldr	r3, [r2, #8]
 80219aa:	3b01      	subs	r3, #1
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	b410      	push	{r4}
 80219b0:	6093      	str	r3, [r2, #8]
 80219b2:	da08      	bge.n	80219c6 <__sfputc_r+0x1e>
 80219b4:	6994      	ldr	r4, [r2, #24]
 80219b6:	42a3      	cmp	r3, r4
 80219b8:	db01      	blt.n	80219be <__sfputc_r+0x16>
 80219ba:	290a      	cmp	r1, #10
 80219bc:	d103      	bne.n	80219c6 <__sfputc_r+0x1e>
 80219be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219c2:	f000 bb6b 	b.w	802209c <__swbuf_r>
 80219c6:	6813      	ldr	r3, [r2, #0]
 80219c8:	1c58      	adds	r0, r3, #1
 80219ca:	6010      	str	r0, [r2, #0]
 80219cc:	7019      	strb	r1, [r3, #0]
 80219ce:	4608      	mov	r0, r1
 80219d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219d4:	4770      	bx	lr

080219d6 <__sfputs_r>:
 80219d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219d8:	4606      	mov	r6, r0
 80219da:	460f      	mov	r7, r1
 80219dc:	4614      	mov	r4, r2
 80219de:	18d5      	adds	r5, r2, r3
 80219e0:	42ac      	cmp	r4, r5
 80219e2:	d101      	bne.n	80219e8 <__sfputs_r+0x12>
 80219e4:	2000      	movs	r0, #0
 80219e6:	e007      	b.n	80219f8 <__sfputs_r+0x22>
 80219e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80219ec:	463a      	mov	r2, r7
 80219ee:	4630      	mov	r0, r6
 80219f0:	f7ff ffda 	bl	80219a8 <__sfputc_r>
 80219f4:	1c43      	adds	r3, r0, #1
 80219f6:	d1f3      	bne.n	80219e0 <__sfputs_r+0xa>
 80219f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080219fc <_vfiprintf_r>:
 80219fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a00:	460d      	mov	r5, r1
 8021a02:	b09d      	sub	sp, #116	@ 0x74
 8021a04:	4614      	mov	r4, r2
 8021a06:	4698      	mov	r8, r3
 8021a08:	4606      	mov	r6, r0
 8021a0a:	b118      	cbz	r0, 8021a14 <_vfiprintf_r+0x18>
 8021a0c:	6a03      	ldr	r3, [r0, #32]
 8021a0e:	b90b      	cbnz	r3, 8021a14 <_vfiprintf_r+0x18>
 8021a10:	f7ff fd5c 	bl	80214cc <__sinit>
 8021a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a16:	07d9      	lsls	r1, r3, #31
 8021a18:	d405      	bmi.n	8021a26 <_vfiprintf_r+0x2a>
 8021a1a:	89ab      	ldrh	r3, [r5, #12]
 8021a1c:	059a      	lsls	r2, r3, #22
 8021a1e:	d402      	bmi.n	8021a26 <_vfiprintf_r+0x2a>
 8021a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a22:	f7ff ff0a 	bl	802183a <__retarget_lock_acquire_recursive>
 8021a26:	89ab      	ldrh	r3, [r5, #12]
 8021a28:	071b      	lsls	r3, r3, #28
 8021a2a:	d501      	bpl.n	8021a30 <_vfiprintf_r+0x34>
 8021a2c:	692b      	ldr	r3, [r5, #16]
 8021a2e:	b99b      	cbnz	r3, 8021a58 <_vfiprintf_r+0x5c>
 8021a30:	4629      	mov	r1, r5
 8021a32:	4630      	mov	r0, r6
 8021a34:	f000 fb70 	bl	8022118 <__swsetup_r>
 8021a38:	b170      	cbz	r0, 8021a58 <_vfiprintf_r+0x5c>
 8021a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021a3c:	07dc      	lsls	r4, r3, #31
 8021a3e:	d504      	bpl.n	8021a4a <_vfiprintf_r+0x4e>
 8021a40:	f04f 30ff 	mov.w	r0, #4294967295
 8021a44:	b01d      	add	sp, #116	@ 0x74
 8021a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a4a:	89ab      	ldrh	r3, [r5, #12]
 8021a4c:	0598      	lsls	r0, r3, #22
 8021a4e:	d4f7      	bmi.n	8021a40 <_vfiprintf_r+0x44>
 8021a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021a52:	f7ff fef3 	bl	802183c <__retarget_lock_release_recursive>
 8021a56:	e7f3      	b.n	8021a40 <_vfiprintf_r+0x44>
 8021a58:	2300      	movs	r3, #0
 8021a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a5c:	2320      	movs	r3, #32
 8021a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a66:	2330      	movs	r3, #48	@ 0x30
 8021a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021c18 <_vfiprintf_r+0x21c>
 8021a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021a70:	f04f 0901 	mov.w	r9, #1
 8021a74:	4623      	mov	r3, r4
 8021a76:	469a      	mov	sl, r3
 8021a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a7c:	b10a      	cbz	r2, 8021a82 <_vfiprintf_r+0x86>
 8021a7e:	2a25      	cmp	r2, #37	@ 0x25
 8021a80:	d1f9      	bne.n	8021a76 <_vfiprintf_r+0x7a>
 8021a82:	ebba 0b04 	subs.w	fp, sl, r4
 8021a86:	d00b      	beq.n	8021aa0 <_vfiprintf_r+0xa4>
 8021a88:	465b      	mov	r3, fp
 8021a8a:	4622      	mov	r2, r4
 8021a8c:	4629      	mov	r1, r5
 8021a8e:	4630      	mov	r0, r6
 8021a90:	f7ff ffa1 	bl	80219d6 <__sfputs_r>
 8021a94:	3001      	adds	r0, #1
 8021a96:	f000 80a7 	beq.w	8021be8 <_vfiprintf_r+0x1ec>
 8021a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a9c:	445a      	add	r2, fp
 8021a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	f000 809f 	beq.w	8021be8 <_vfiprintf_r+0x1ec>
 8021aaa:	2300      	movs	r3, #0
 8021aac:	f04f 32ff 	mov.w	r2, #4294967295
 8021ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ab4:	f10a 0a01 	add.w	sl, sl, #1
 8021ab8:	9304      	str	r3, [sp, #16]
 8021aba:	9307      	str	r3, [sp, #28]
 8021abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8021ac2:	4654      	mov	r4, sl
 8021ac4:	2205      	movs	r2, #5
 8021ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021aca:	4853      	ldr	r0, [pc, #332]	@ (8021c18 <_vfiprintf_r+0x21c>)
 8021acc:	f7de fb90 	bl	80001f0 <memchr>
 8021ad0:	9a04      	ldr	r2, [sp, #16]
 8021ad2:	b9d8      	cbnz	r0, 8021b0c <_vfiprintf_r+0x110>
 8021ad4:	06d1      	lsls	r1, r2, #27
 8021ad6:	bf44      	itt	mi
 8021ad8:	2320      	movmi	r3, #32
 8021ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021ade:	0713      	lsls	r3, r2, #28
 8021ae0:	bf44      	itt	mi
 8021ae2:	232b      	movmi	r3, #43	@ 0x2b
 8021ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8021aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8021aee:	d015      	beq.n	8021b1c <_vfiprintf_r+0x120>
 8021af0:	9a07      	ldr	r2, [sp, #28]
 8021af2:	4654      	mov	r4, sl
 8021af4:	2000      	movs	r0, #0
 8021af6:	f04f 0c0a 	mov.w	ip, #10
 8021afa:	4621      	mov	r1, r4
 8021afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b00:	3b30      	subs	r3, #48	@ 0x30
 8021b02:	2b09      	cmp	r3, #9
 8021b04:	d94b      	bls.n	8021b9e <_vfiprintf_r+0x1a2>
 8021b06:	b1b0      	cbz	r0, 8021b36 <_vfiprintf_r+0x13a>
 8021b08:	9207      	str	r2, [sp, #28]
 8021b0a:	e014      	b.n	8021b36 <_vfiprintf_r+0x13a>
 8021b0c:	eba0 0308 	sub.w	r3, r0, r8
 8021b10:	fa09 f303 	lsl.w	r3, r9, r3
 8021b14:	4313      	orrs	r3, r2
 8021b16:	9304      	str	r3, [sp, #16]
 8021b18:	46a2      	mov	sl, r4
 8021b1a:	e7d2      	b.n	8021ac2 <_vfiprintf_r+0xc6>
 8021b1c:	9b03      	ldr	r3, [sp, #12]
 8021b1e:	1d19      	adds	r1, r3, #4
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	9103      	str	r1, [sp, #12]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	bfbb      	ittet	lt
 8021b28:	425b      	neglt	r3, r3
 8021b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8021b2e:	9307      	strge	r3, [sp, #28]
 8021b30:	9307      	strlt	r3, [sp, #28]
 8021b32:	bfb8      	it	lt
 8021b34:	9204      	strlt	r2, [sp, #16]
 8021b36:	7823      	ldrb	r3, [r4, #0]
 8021b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8021b3a:	d10a      	bne.n	8021b52 <_vfiprintf_r+0x156>
 8021b3c:	7863      	ldrb	r3, [r4, #1]
 8021b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b40:	d132      	bne.n	8021ba8 <_vfiprintf_r+0x1ac>
 8021b42:	9b03      	ldr	r3, [sp, #12]
 8021b44:	1d1a      	adds	r2, r3, #4
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	9203      	str	r2, [sp, #12]
 8021b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021b4e:	3402      	adds	r4, #2
 8021b50:	9305      	str	r3, [sp, #20]
 8021b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021c28 <_vfiprintf_r+0x22c>
 8021b56:	7821      	ldrb	r1, [r4, #0]
 8021b58:	2203      	movs	r2, #3
 8021b5a:	4650      	mov	r0, sl
 8021b5c:	f7de fb48 	bl	80001f0 <memchr>
 8021b60:	b138      	cbz	r0, 8021b72 <_vfiprintf_r+0x176>
 8021b62:	9b04      	ldr	r3, [sp, #16]
 8021b64:	eba0 000a 	sub.w	r0, r0, sl
 8021b68:	2240      	movs	r2, #64	@ 0x40
 8021b6a:	4082      	lsls	r2, r0
 8021b6c:	4313      	orrs	r3, r2
 8021b6e:	3401      	adds	r4, #1
 8021b70:	9304      	str	r3, [sp, #16]
 8021b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b76:	4829      	ldr	r0, [pc, #164]	@ (8021c1c <_vfiprintf_r+0x220>)
 8021b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021b7c:	2206      	movs	r2, #6
 8021b7e:	f7de fb37 	bl	80001f0 <memchr>
 8021b82:	2800      	cmp	r0, #0
 8021b84:	d03f      	beq.n	8021c06 <_vfiprintf_r+0x20a>
 8021b86:	4b26      	ldr	r3, [pc, #152]	@ (8021c20 <_vfiprintf_r+0x224>)
 8021b88:	bb1b      	cbnz	r3, 8021bd2 <_vfiprintf_r+0x1d6>
 8021b8a:	9b03      	ldr	r3, [sp, #12]
 8021b8c:	3307      	adds	r3, #7
 8021b8e:	f023 0307 	bic.w	r3, r3, #7
 8021b92:	3308      	adds	r3, #8
 8021b94:	9303      	str	r3, [sp, #12]
 8021b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b98:	443b      	add	r3, r7
 8021b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b9c:	e76a      	b.n	8021a74 <_vfiprintf_r+0x78>
 8021b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021ba2:	460c      	mov	r4, r1
 8021ba4:	2001      	movs	r0, #1
 8021ba6:	e7a8      	b.n	8021afa <_vfiprintf_r+0xfe>
 8021ba8:	2300      	movs	r3, #0
 8021baa:	3401      	adds	r4, #1
 8021bac:	9305      	str	r3, [sp, #20]
 8021bae:	4619      	mov	r1, r3
 8021bb0:	f04f 0c0a 	mov.w	ip, #10
 8021bb4:	4620      	mov	r0, r4
 8021bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021bba:	3a30      	subs	r2, #48	@ 0x30
 8021bbc:	2a09      	cmp	r2, #9
 8021bbe:	d903      	bls.n	8021bc8 <_vfiprintf_r+0x1cc>
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d0c6      	beq.n	8021b52 <_vfiprintf_r+0x156>
 8021bc4:	9105      	str	r1, [sp, #20]
 8021bc6:	e7c4      	b.n	8021b52 <_vfiprintf_r+0x156>
 8021bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8021bcc:	4604      	mov	r4, r0
 8021bce:	2301      	movs	r3, #1
 8021bd0:	e7f0      	b.n	8021bb4 <_vfiprintf_r+0x1b8>
 8021bd2:	ab03      	add	r3, sp, #12
 8021bd4:	9300      	str	r3, [sp, #0]
 8021bd6:	462a      	mov	r2, r5
 8021bd8:	4b12      	ldr	r3, [pc, #72]	@ (8021c24 <_vfiprintf_r+0x228>)
 8021bda:	a904      	add	r1, sp, #16
 8021bdc:	4630      	mov	r0, r6
 8021bde:	f3af 8000 	nop.w
 8021be2:	4607      	mov	r7, r0
 8021be4:	1c78      	adds	r0, r7, #1
 8021be6:	d1d6      	bne.n	8021b96 <_vfiprintf_r+0x19a>
 8021be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021bea:	07d9      	lsls	r1, r3, #31
 8021bec:	d405      	bmi.n	8021bfa <_vfiprintf_r+0x1fe>
 8021bee:	89ab      	ldrh	r3, [r5, #12]
 8021bf0:	059a      	lsls	r2, r3, #22
 8021bf2:	d402      	bmi.n	8021bfa <_vfiprintf_r+0x1fe>
 8021bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021bf6:	f7ff fe21 	bl	802183c <__retarget_lock_release_recursive>
 8021bfa:	89ab      	ldrh	r3, [r5, #12]
 8021bfc:	065b      	lsls	r3, r3, #25
 8021bfe:	f53f af1f 	bmi.w	8021a40 <_vfiprintf_r+0x44>
 8021c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021c04:	e71e      	b.n	8021a44 <_vfiprintf_r+0x48>
 8021c06:	ab03      	add	r3, sp, #12
 8021c08:	9300      	str	r3, [sp, #0]
 8021c0a:	462a      	mov	r2, r5
 8021c0c:	4b05      	ldr	r3, [pc, #20]	@ (8021c24 <_vfiprintf_r+0x228>)
 8021c0e:	a904      	add	r1, sp, #16
 8021c10:	4630      	mov	r0, r6
 8021c12:	f000 f879 	bl	8021d08 <_printf_i>
 8021c16:	e7e4      	b.n	8021be2 <_vfiprintf_r+0x1e6>
 8021c18:	08023e00 	.word	0x08023e00
 8021c1c:	08023e0a 	.word	0x08023e0a
 8021c20:	00000000 	.word	0x00000000
 8021c24:	080219d7 	.word	0x080219d7
 8021c28:	08023e06 	.word	0x08023e06

08021c2c <_printf_common>:
 8021c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c30:	4616      	mov	r6, r2
 8021c32:	4698      	mov	r8, r3
 8021c34:	688a      	ldr	r2, [r1, #8]
 8021c36:	690b      	ldr	r3, [r1, #16]
 8021c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021c3c:	4293      	cmp	r3, r2
 8021c3e:	bfb8      	it	lt
 8021c40:	4613      	movlt	r3, r2
 8021c42:	6033      	str	r3, [r6, #0]
 8021c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021c48:	4607      	mov	r7, r0
 8021c4a:	460c      	mov	r4, r1
 8021c4c:	b10a      	cbz	r2, 8021c52 <_printf_common+0x26>
 8021c4e:	3301      	adds	r3, #1
 8021c50:	6033      	str	r3, [r6, #0]
 8021c52:	6823      	ldr	r3, [r4, #0]
 8021c54:	0699      	lsls	r1, r3, #26
 8021c56:	bf42      	ittt	mi
 8021c58:	6833      	ldrmi	r3, [r6, #0]
 8021c5a:	3302      	addmi	r3, #2
 8021c5c:	6033      	strmi	r3, [r6, #0]
 8021c5e:	6825      	ldr	r5, [r4, #0]
 8021c60:	f015 0506 	ands.w	r5, r5, #6
 8021c64:	d106      	bne.n	8021c74 <_printf_common+0x48>
 8021c66:	f104 0a19 	add.w	sl, r4, #25
 8021c6a:	68e3      	ldr	r3, [r4, #12]
 8021c6c:	6832      	ldr	r2, [r6, #0]
 8021c6e:	1a9b      	subs	r3, r3, r2
 8021c70:	42ab      	cmp	r3, r5
 8021c72:	dc26      	bgt.n	8021cc2 <_printf_common+0x96>
 8021c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021c78:	6822      	ldr	r2, [r4, #0]
 8021c7a:	3b00      	subs	r3, #0
 8021c7c:	bf18      	it	ne
 8021c7e:	2301      	movne	r3, #1
 8021c80:	0692      	lsls	r2, r2, #26
 8021c82:	d42b      	bmi.n	8021cdc <_printf_common+0xb0>
 8021c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021c88:	4641      	mov	r1, r8
 8021c8a:	4638      	mov	r0, r7
 8021c8c:	47c8      	blx	r9
 8021c8e:	3001      	adds	r0, #1
 8021c90:	d01e      	beq.n	8021cd0 <_printf_common+0xa4>
 8021c92:	6823      	ldr	r3, [r4, #0]
 8021c94:	6922      	ldr	r2, [r4, #16]
 8021c96:	f003 0306 	and.w	r3, r3, #6
 8021c9a:	2b04      	cmp	r3, #4
 8021c9c:	bf02      	ittt	eq
 8021c9e:	68e5      	ldreq	r5, [r4, #12]
 8021ca0:	6833      	ldreq	r3, [r6, #0]
 8021ca2:	1aed      	subeq	r5, r5, r3
 8021ca4:	68a3      	ldr	r3, [r4, #8]
 8021ca6:	bf0c      	ite	eq
 8021ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021cac:	2500      	movne	r5, #0
 8021cae:	4293      	cmp	r3, r2
 8021cb0:	bfc4      	itt	gt
 8021cb2:	1a9b      	subgt	r3, r3, r2
 8021cb4:	18ed      	addgt	r5, r5, r3
 8021cb6:	2600      	movs	r6, #0
 8021cb8:	341a      	adds	r4, #26
 8021cba:	42b5      	cmp	r5, r6
 8021cbc:	d11a      	bne.n	8021cf4 <_printf_common+0xc8>
 8021cbe:	2000      	movs	r0, #0
 8021cc0:	e008      	b.n	8021cd4 <_printf_common+0xa8>
 8021cc2:	2301      	movs	r3, #1
 8021cc4:	4652      	mov	r2, sl
 8021cc6:	4641      	mov	r1, r8
 8021cc8:	4638      	mov	r0, r7
 8021cca:	47c8      	blx	r9
 8021ccc:	3001      	adds	r0, #1
 8021cce:	d103      	bne.n	8021cd8 <_printf_common+0xac>
 8021cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8021cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021cd8:	3501      	adds	r5, #1
 8021cda:	e7c6      	b.n	8021c6a <_printf_common+0x3e>
 8021cdc:	18e1      	adds	r1, r4, r3
 8021cde:	1c5a      	adds	r2, r3, #1
 8021ce0:	2030      	movs	r0, #48	@ 0x30
 8021ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021ce6:	4422      	add	r2, r4
 8021ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021cf0:	3302      	adds	r3, #2
 8021cf2:	e7c7      	b.n	8021c84 <_printf_common+0x58>
 8021cf4:	2301      	movs	r3, #1
 8021cf6:	4622      	mov	r2, r4
 8021cf8:	4641      	mov	r1, r8
 8021cfa:	4638      	mov	r0, r7
 8021cfc:	47c8      	blx	r9
 8021cfe:	3001      	adds	r0, #1
 8021d00:	d0e6      	beq.n	8021cd0 <_printf_common+0xa4>
 8021d02:	3601      	adds	r6, #1
 8021d04:	e7d9      	b.n	8021cba <_printf_common+0x8e>
	...

08021d08 <_printf_i>:
 8021d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021d0c:	7e0f      	ldrb	r7, [r1, #24]
 8021d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021d10:	2f78      	cmp	r7, #120	@ 0x78
 8021d12:	4691      	mov	r9, r2
 8021d14:	4680      	mov	r8, r0
 8021d16:	460c      	mov	r4, r1
 8021d18:	469a      	mov	sl, r3
 8021d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021d1e:	d807      	bhi.n	8021d30 <_printf_i+0x28>
 8021d20:	2f62      	cmp	r7, #98	@ 0x62
 8021d22:	d80a      	bhi.n	8021d3a <_printf_i+0x32>
 8021d24:	2f00      	cmp	r7, #0
 8021d26:	f000 80d1 	beq.w	8021ecc <_printf_i+0x1c4>
 8021d2a:	2f58      	cmp	r7, #88	@ 0x58
 8021d2c:	f000 80b8 	beq.w	8021ea0 <_printf_i+0x198>
 8021d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021d38:	e03a      	b.n	8021db0 <_printf_i+0xa8>
 8021d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021d3e:	2b15      	cmp	r3, #21
 8021d40:	d8f6      	bhi.n	8021d30 <_printf_i+0x28>
 8021d42:	a101      	add	r1, pc, #4	@ (adr r1, 8021d48 <_printf_i+0x40>)
 8021d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021d48:	08021da1 	.word	0x08021da1
 8021d4c:	08021db5 	.word	0x08021db5
 8021d50:	08021d31 	.word	0x08021d31
 8021d54:	08021d31 	.word	0x08021d31
 8021d58:	08021d31 	.word	0x08021d31
 8021d5c:	08021d31 	.word	0x08021d31
 8021d60:	08021db5 	.word	0x08021db5
 8021d64:	08021d31 	.word	0x08021d31
 8021d68:	08021d31 	.word	0x08021d31
 8021d6c:	08021d31 	.word	0x08021d31
 8021d70:	08021d31 	.word	0x08021d31
 8021d74:	08021eb3 	.word	0x08021eb3
 8021d78:	08021ddf 	.word	0x08021ddf
 8021d7c:	08021e6d 	.word	0x08021e6d
 8021d80:	08021d31 	.word	0x08021d31
 8021d84:	08021d31 	.word	0x08021d31
 8021d88:	08021ed5 	.word	0x08021ed5
 8021d8c:	08021d31 	.word	0x08021d31
 8021d90:	08021ddf 	.word	0x08021ddf
 8021d94:	08021d31 	.word	0x08021d31
 8021d98:	08021d31 	.word	0x08021d31
 8021d9c:	08021e75 	.word	0x08021e75
 8021da0:	6833      	ldr	r3, [r6, #0]
 8021da2:	1d1a      	adds	r2, r3, #4
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	6032      	str	r2, [r6, #0]
 8021da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021db0:	2301      	movs	r3, #1
 8021db2:	e09c      	b.n	8021eee <_printf_i+0x1e6>
 8021db4:	6833      	ldr	r3, [r6, #0]
 8021db6:	6820      	ldr	r0, [r4, #0]
 8021db8:	1d19      	adds	r1, r3, #4
 8021dba:	6031      	str	r1, [r6, #0]
 8021dbc:	0606      	lsls	r6, r0, #24
 8021dbe:	d501      	bpl.n	8021dc4 <_printf_i+0xbc>
 8021dc0:	681d      	ldr	r5, [r3, #0]
 8021dc2:	e003      	b.n	8021dcc <_printf_i+0xc4>
 8021dc4:	0645      	lsls	r5, r0, #25
 8021dc6:	d5fb      	bpl.n	8021dc0 <_printf_i+0xb8>
 8021dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021dcc:	2d00      	cmp	r5, #0
 8021dce:	da03      	bge.n	8021dd8 <_printf_i+0xd0>
 8021dd0:	232d      	movs	r3, #45	@ 0x2d
 8021dd2:	426d      	negs	r5, r5
 8021dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021dd8:	4858      	ldr	r0, [pc, #352]	@ (8021f3c <_printf_i+0x234>)
 8021dda:	230a      	movs	r3, #10
 8021ddc:	e011      	b.n	8021e02 <_printf_i+0xfa>
 8021dde:	6821      	ldr	r1, [r4, #0]
 8021de0:	6833      	ldr	r3, [r6, #0]
 8021de2:	0608      	lsls	r0, r1, #24
 8021de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8021de8:	d402      	bmi.n	8021df0 <_printf_i+0xe8>
 8021dea:	0649      	lsls	r1, r1, #25
 8021dec:	bf48      	it	mi
 8021dee:	b2ad      	uxthmi	r5, r5
 8021df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8021df2:	4852      	ldr	r0, [pc, #328]	@ (8021f3c <_printf_i+0x234>)
 8021df4:	6033      	str	r3, [r6, #0]
 8021df6:	bf14      	ite	ne
 8021df8:	230a      	movne	r3, #10
 8021dfa:	2308      	moveq	r3, #8
 8021dfc:	2100      	movs	r1, #0
 8021dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021e02:	6866      	ldr	r6, [r4, #4]
 8021e04:	60a6      	str	r6, [r4, #8]
 8021e06:	2e00      	cmp	r6, #0
 8021e08:	db05      	blt.n	8021e16 <_printf_i+0x10e>
 8021e0a:	6821      	ldr	r1, [r4, #0]
 8021e0c:	432e      	orrs	r6, r5
 8021e0e:	f021 0104 	bic.w	r1, r1, #4
 8021e12:	6021      	str	r1, [r4, #0]
 8021e14:	d04b      	beq.n	8021eae <_printf_i+0x1a6>
 8021e16:	4616      	mov	r6, r2
 8021e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8021e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8021e20:	5dc7      	ldrb	r7, [r0, r7]
 8021e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021e26:	462f      	mov	r7, r5
 8021e28:	42bb      	cmp	r3, r7
 8021e2a:	460d      	mov	r5, r1
 8021e2c:	d9f4      	bls.n	8021e18 <_printf_i+0x110>
 8021e2e:	2b08      	cmp	r3, #8
 8021e30:	d10b      	bne.n	8021e4a <_printf_i+0x142>
 8021e32:	6823      	ldr	r3, [r4, #0]
 8021e34:	07df      	lsls	r7, r3, #31
 8021e36:	d508      	bpl.n	8021e4a <_printf_i+0x142>
 8021e38:	6923      	ldr	r3, [r4, #16]
 8021e3a:	6861      	ldr	r1, [r4, #4]
 8021e3c:	4299      	cmp	r1, r3
 8021e3e:	bfde      	ittt	le
 8021e40:	2330      	movle	r3, #48	@ 0x30
 8021e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021e4a:	1b92      	subs	r2, r2, r6
 8021e4c:	6122      	str	r2, [r4, #16]
 8021e4e:	f8cd a000 	str.w	sl, [sp]
 8021e52:	464b      	mov	r3, r9
 8021e54:	aa03      	add	r2, sp, #12
 8021e56:	4621      	mov	r1, r4
 8021e58:	4640      	mov	r0, r8
 8021e5a:	f7ff fee7 	bl	8021c2c <_printf_common>
 8021e5e:	3001      	adds	r0, #1
 8021e60:	d14a      	bne.n	8021ef8 <_printf_i+0x1f0>
 8021e62:	f04f 30ff 	mov.w	r0, #4294967295
 8021e66:	b004      	add	sp, #16
 8021e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e6c:	6823      	ldr	r3, [r4, #0]
 8021e6e:	f043 0320 	orr.w	r3, r3, #32
 8021e72:	6023      	str	r3, [r4, #0]
 8021e74:	4832      	ldr	r0, [pc, #200]	@ (8021f40 <_printf_i+0x238>)
 8021e76:	2778      	movs	r7, #120	@ 0x78
 8021e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021e7c:	6823      	ldr	r3, [r4, #0]
 8021e7e:	6831      	ldr	r1, [r6, #0]
 8021e80:	061f      	lsls	r7, r3, #24
 8021e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8021e86:	d402      	bmi.n	8021e8e <_printf_i+0x186>
 8021e88:	065f      	lsls	r7, r3, #25
 8021e8a:	bf48      	it	mi
 8021e8c:	b2ad      	uxthmi	r5, r5
 8021e8e:	6031      	str	r1, [r6, #0]
 8021e90:	07d9      	lsls	r1, r3, #31
 8021e92:	bf44      	itt	mi
 8021e94:	f043 0320 	orrmi.w	r3, r3, #32
 8021e98:	6023      	strmi	r3, [r4, #0]
 8021e9a:	b11d      	cbz	r5, 8021ea4 <_printf_i+0x19c>
 8021e9c:	2310      	movs	r3, #16
 8021e9e:	e7ad      	b.n	8021dfc <_printf_i+0xf4>
 8021ea0:	4826      	ldr	r0, [pc, #152]	@ (8021f3c <_printf_i+0x234>)
 8021ea2:	e7e9      	b.n	8021e78 <_printf_i+0x170>
 8021ea4:	6823      	ldr	r3, [r4, #0]
 8021ea6:	f023 0320 	bic.w	r3, r3, #32
 8021eaa:	6023      	str	r3, [r4, #0]
 8021eac:	e7f6      	b.n	8021e9c <_printf_i+0x194>
 8021eae:	4616      	mov	r6, r2
 8021eb0:	e7bd      	b.n	8021e2e <_printf_i+0x126>
 8021eb2:	6833      	ldr	r3, [r6, #0]
 8021eb4:	6825      	ldr	r5, [r4, #0]
 8021eb6:	6961      	ldr	r1, [r4, #20]
 8021eb8:	1d18      	adds	r0, r3, #4
 8021eba:	6030      	str	r0, [r6, #0]
 8021ebc:	062e      	lsls	r6, r5, #24
 8021ebe:	681b      	ldr	r3, [r3, #0]
 8021ec0:	d501      	bpl.n	8021ec6 <_printf_i+0x1be>
 8021ec2:	6019      	str	r1, [r3, #0]
 8021ec4:	e002      	b.n	8021ecc <_printf_i+0x1c4>
 8021ec6:	0668      	lsls	r0, r5, #25
 8021ec8:	d5fb      	bpl.n	8021ec2 <_printf_i+0x1ba>
 8021eca:	8019      	strh	r1, [r3, #0]
 8021ecc:	2300      	movs	r3, #0
 8021ece:	6123      	str	r3, [r4, #16]
 8021ed0:	4616      	mov	r6, r2
 8021ed2:	e7bc      	b.n	8021e4e <_printf_i+0x146>
 8021ed4:	6833      	ldr	r3, [r6, #0]
 8021ed6:	1d1a      	adds	r2, r3, #4
 8021ed8:	6032      	str	r2, [r6, #0]
 8021eda:	681e      	ldr	r6, [r3, #0]
 8021edc:	6862      	ldr	r2, [r4, #4]
 8021ede:	2100      	movs	r1, #0
 8021ee0:	4630      	mov	r0, r6
 8021ee2:	f7de f985 	bl	80001f0 <memchr>
 8021ee6:	b108      	cbz	r0, 8021eec <_printf_i+0x1e4>
 8021ee8:	1b80      	subs	r0, r0, r6
 8021eea:	6060      	str	r0, [r4, #4]
 8021eec:	6863      	ldr	r3, [r4, #4]
 8021eee:	6123      	str	r3, [r4, #16]
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021ef6:	e7aa      	b.n	8021e4e <_printf_i+0x146>
 8021ef8:	6923      	ldr	r3, [r4, #16]
 8021efa:	4632      	mov	r2, r6
 8021efc:	4649      	mov	r1, r9
 8021efe:	4640      	mov	r0, r8
 8021f00:	47d0      	blx	sl
 8021f02:	3001      	adds	r0, #1
 8021f04:	d0ad      	beq.n	8021e62 <_printf_i+0x15a>
 8021f06:	6823      	ldr	r3, [r4, #0]
 8021f08:	079b      	lsls	r3, r3, #30
 8021f0a:	d413      	bmi.n	8021f34 <_printf_i+0x22c>
 8021f0c:	68e0      	ldr	r0, [r4, #12]
 8021f0e:	9b03      	ldr	r3, [sp, #12]
 8021f10:	4298      	cmp	r0, r3
 8021f12:	bfb8      	it	lt
 8021f14:	4618      	movlt	r0, r3
 8021f16:	e7a6      	b.n	8021e66 <_printf_i+0x15e>
 8021f18:	2301      	movs	r3, #1
 8021f1a:	4632      	mov	r2, r6
 8021f1c:	4649      	mov	r1, r9
 8021f1e:	4640      	mov	r0, r8
 8021f20:	47d0      	blx	sl
 8021f22:	3001      	adds	r0, #1
 8021f24:	d09d      	beq.n	8021e62 <_printf_i+0x15a>
 8021f26:	3501      	adds	r5, #1
 8021f28:	68e3      	ldr	r3, [r4, #12]
 8021f2a:	9903      	ldr	r1, [sp, #12]
 8021f2c:	1a5b      	subs	r3, r3, r1
 8021f2e:	42ab      	cmp	r3, r5
 8021f30:	dcf2      	bgt.n	8021f18 <_printf_i+0x210>
 8021f32:	e7eb      	b.n	8021f0c <_printf_i+0x204>
 8021f34:	2500      	movs	r5, #0
 8021f36:	f104 0619 	add.w	r6, r4, #25
 8021f3a:	e7f5      	b.n	8021f28 <_printf_i+0x220>
 8021f3c:	08023e11 	.word	0x08023e11
 8021f40:	08023e22 	.word	0x08023e22

08021f44 <__sflush_r>:
 8021f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f4c:	0716      	lsls	r6, r2, #28
 8021f4e:	4605      	mov	r5, r0
 8021f50:	460c      	mov	r4, r1
 8021f52:	d454      	bmi.n	8021ffe <__sflush_r+0xba>
 8021f54:	684b      	ldr	r3, [r1, #4]
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	dc02      	bgt.n	8021f60 <__sflush_r+0x1c>
 8021f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	dd48      	ble.n	8021ff2 <__sflush_r+0xae>
 8021f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021f62:	2e00      	cmp	r6, #0
 8021f64:	d045      	beq.n	8021ff2 <__sflush_r+0xae>
 8021f66:	2300      	movs	r3, #0
 8021f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021f6c:	682f      	ldr	r7, [r5, #0]
 8021f6e:	6a21      	ldr	r1, [r4, #32]
 8021f70:	602b      	str	r3, [r5, #0]
 8021f72:	d030      	beq.n	8021fd6 <__sflush_r+0x92>
 8021f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021f76:	89a3      	ldrh	r3, [r4, #12]
 8021f78:	0759      	lsls	r1, r3, #29
 8021f7a:	d505      	bpl.n	8021f88 <__sflush_r+0x44>
 8021f7c:	6863      	ldr	r3, [r4, #4]
 8021f7e:	1ad2      	subs	r2, r2, r3
 8021f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021f82:	b10b      	cbz	r3, 8021f88 <__sflush_r+0x44>
 8021f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021f86:	1ad2      	subs	r2, r2, r3
 8021f88:	2300      	movs	r3, #0
 8021f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021f8c:	6a21      	ldr	r1, [r4, #32]
 8021f8e:	4628      	mov	r0, r5
 8021f90:	47b0      	blx	r6
 8021f92:	1c43      	adds	r3, r0, #1
 8021f94:	89a3      	ldrh	r3, [r4, #12]
 8021f96:	d106      	bne.n	8021fa6 <__sflush_r+0x62>
 8021f98:	6829      	ldr	r1, [r5, #0]
 8021f9a:	291d      	cmp	r1, #29
 8021f9c:	d82b      	bhi.n	8021ff6 <__sflush_r+0xb2>
 8021f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8022048 <__sflush_r+0x104>)
 8021fa0:	40ca      	lsrs	r2, r1
 8021fa2:	07d6      	lsls	r6, r2, #31
 8021fa4:	d527      	bpl.n	8021ff6 <__sflush_r+0xb2>
 8021fa6:	2200      	movs	r2, #0
 8021fa8:	6062      	str	r2, [r4, #4]
 8021faa:	04d9      	lsls	r1, r3, #19
 8021fac:	6922      	ldr	r2, [r4, #16]
 8021fae:	6022      	str	r2, [r4, #0]
 8021fb0:	d504      	bpl.n	8021fbc <__sflush_r+0x78>
 8021fb2:	1c42      	adds	r2, r0, #1
 8021fb4:	d101      	bne.n	8021fba <__sflush_r+0x76>
 8021fb6:	682b      	ldr	r3, [r5, #0]
 8021fb8:	b903      	cbnz	r3, 8021fbc <__sflush_r+0x78>
 8021fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8021fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021fbe:	602f      	str	r7, [r5, #0]
 8021fc0:	b1b9      	cbz	r1, 8021ff2 <__sflush_r+0xae>
 8021fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021fc6:	4299      	cmp	r1, r3
 8021fc8:	d002      	beq.n	8021fd0 <__sflush_r+0x8c>
 8021fca:	4628      	mov	r0, r5
 8021fcc:	f7ff fca2 	bl	8021914 <_free_r>
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8021fd4:	e00d      	b.n	8021ff2 <__sflush_r+0xae>
 8021fd6:	2301      	movs	r3, #1
 8021fd8:	4628      	mov	r0, r5
 8021fda:	47b0      	blx	r6
 8021fdc:	4602      	mov	r2, r0
 8021fde:	1c50      	adds	r0, r2, #1
 8021fe0:	d1c9      	bne.n	8021f76 <__sflush_r+0x32>
 8021fe2:	682b      	ldr	r3, [r5, #0]
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d0c6      	beq.n	8021f76 <__sflush_r+0x32>
 8021fe8:	2b1d      	cmp	r3, #29
 8021fea:	d001      	beq.n	8021ff0 <__sflush_r+0xac>
 8021fec:	2b16      	cmp	r3, #22
 8021fee:	d11e      	bne.n	802202e <__sflush_r+0xea>
 8021ff0:	602f      	str	r7, [r5, #0]
 8021ff2:	2000      	movs	r0, #0
 8021ff4:	e022      	b.n	802203c <__sflush_r+0xf8>
 8021ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021ffa:	b21b      	sxth	r3, r3
 8021ffc:	e01b      	b.n	8022036 <__sflush_r+0xf2>
 8021ffe:	690f      	ldr	r7, [r1, #16]
 8022000:	2f00      	cmp	r7, #0
 8022002:	d0f6      	beq.n	8021ff2 <__sflush_r+0xae>
 8022004:	0793      	lsls	r3, r2, #30
 8022006:	680e      	ldr	r6, [r1, #0]
 8022008:	bf08      	it	eq
 802200a:	694b      	ldreq	r3, [r1, #20]
 802200c:	600f      	str	r7, [r1, #0]
 802200e:	bf18      	it	ne
 8022010:	2300      	movne	r3, #0
 8022012:	eba6 0807 	sub.w	r8, r6, r7
 8022016:	608b      	str	r3, [r1, #8]
 8022018:	f1b8 0f00 	cmp.w	r8, #0
 802201c:	dde9      	ble.n	8021ff2 <__sflush_r+0xae>
 802201e:	6a21      	ldr	r1, [r4, #32]
 8022020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022022:	4643      	mov	r3, r8
 8022024:	463a      	mov	r2, r7
 8022026:	4628      	mov	r0, r5
 8022028:	47b0      	blx	r6
 802202a:	2800      	cmp	r0, #0
 802202c:	dc08      	bgt.n	8022040 <__sflush_r+0xfc>
 802202e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022036:	81a3      	strh	r3, [r4, #12]
 8022038:	f04f 30ff 	mov.w	r0, #4294967295
 802203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022040:	4407      	add	r7, r0
 8022042:	eba8 0800 	sub.w	r8, r8, r0
 8022046:	e7e7      	b.n	8022018 <__sflush_r+0xd4>
 8022048:	20400001 	.word	0x20400001

0802204c <_fflush_r>:
 802204c:	b538      	push	{r3, r4, r5, lr}
 802204e:	690b      	ldr	r3, [r1, #16]
 8022050:	4605      	mov	r5, r0
 8022052:	460c      	mov	r4, r1
 8022054:	b913      	cbnz	r3, 802205c <_fflush_r+0x10>
 8022056:	2500      	movs	r5, #0
 8022058:	4628      	mov	r0, r5
 802205a:	bd38      	pop	{r3, r4, r5, pc}
 802205c:	b118      	cbz	r0, 8022066 <_fflush_r+0x1a>
 802205e:	6a03      	ldr	r3, [r0, #32]
 8022060:	b90b      	cbnz	r3, 8022066 <_fflush_r+0x1a>
 8022062:	f7ff fa33 	bl	80214cc <__sinit>
 8022066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802206a:	2b00      	cmp	r3, #0
 802206c:	d0f3      	beq.n	8022056 <_fflush_r+0xa>
 802206e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022070:	07d0      	lsls	r0, r2, #31
 8022072:	d404      	bmi.n	802207e <_fflush_r+0x32>
 8022074:	0599      	lsls	r1, r3, #22
 8022076:	d402      	bmi.n	802207e <_fflush_r+0x32>
 8022078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802207a:	f7ff fbde 	bl	802183a <__retarget_lock_acquire_recursive>
 802207e:	4628      	mov	r0, r5
 8022080:	4621      	mov	r1, r4
 8022082:	f7ff ff5f 	bl	8021f44 <__sflush_r>
 8022086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022088:	07da      	lsls	r2, r3, #31
 802208a:	4605      	mov	r5, r0
 802208c:	d4e4      	bmi.n	8022058 <_fflush_r+0xc>
 802208e:	89a3      	ldrh	r3, [r4, #12]
 8022090:	059b      	lsls	r3, r3, #22
 8022092:	d4e1      	bmi.n	8022058 <_fflush_r+0xc>
 8022094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022096:	f7ff fbd1 	bl	802183c <__retarget_lock_release_recursive>
 802209a:	e7dd      	b.n	8022058 <_fflush_r+0xc>

0802209c <__swbuf_r>:
 802209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802209e:	460e      	mov	r6, r1
 80220a0:	4614      	mov	r4, r2
 80220a2:	4605      	mov	r5, r0
 80220a4:	b118      	cbz	r0, 80220ae <__swbuf_r+0x12>
 80220a6:	6a03      	ldr	r3, [r0, #32]
 80220a8:	b90b      	cbnz	r3, 80220ae <__swbuf_r+0x12>
 80220aa:	f7ff fa0f 	bl	80214cc <__sinit>
 80220ae:	69a3      	ldr	r3, [r4, #24]
 80220b0:	60a3      	str	r3, [r4, #8]
 80220b2:	89a3      	ldrh	r3, [r4, #12]
 80220b4:	071a      	lsls	r2, r3, #28
 80220b6:	d501      	bpl.n	80220bc <__swbuf_r+0x20>
 80220b8:	6923      	ldr	r3, [r4, #16]
 80220ba:	b943      	cbnz	r3, 80220ce <__swbuf_r+0x32>
 80220bc:	4621      	mov	r1, r4
 80220be:	4628      	mov	r0, r5
 80220c0:	f000 f82a 	bl	8022118 <__swsetup_r>
 80220c4:	b118      	cbz	r0, 80220ce <__swbuf_r+0x32>
 80220c6:	f04f 37ff 	mov.w	r7, #4294967295
 80220ca:	4638      	mov	r0, r7
 80220cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220ce:	6823      	ldr	r3, [r4, #0]
 80220d0:	6922      	ldr	r2, [r4, #16]
 80220d2:	1a98      	subs	r0, r3, r2
 80220d4:	6963      	ldr	r3, [r4, #20]
 80220d6:	b2f6      	uxtb	r6, r6
 80220d8:	4283      	cmp	r3, r0
 80220da:	4637      	mov	r7, r6
 80220dc:	dc05      	bgt.n	80220ea <__swbuf_r+0x4e>
 80220de:	4621      	mov	r1, r4
 80220e0:	4628      	mov	r0, r5
 80220e2:	f7ff ffb3 	bl	802204c <_fflush_r>
 80220e6:	2800      	cmp	r0, #0
 80220e8:	d1ed      	bne.n	80220c6 <__swbuf_r+0x2a>
 80220ea:	68a3      	ldr	r3, [r4, #8]
 80220ec:	3b01      	subs	r3, #1
 80220ee:	60a3      	str	r3, [r4, #8]
 80220f0:	6823      	ldr	r3, [r4, #0]
 80220f2:	1c5a      	adds	r2, r3, #1
 80220f4:	6022      	str	r2, [r4, #0]
 80220f6:	701e      	strb	r6, [r3, #0]
 80220f8:	6962      	ldr	r2, [r4, #20]
 80220fa:	1c43      	adds	r3, r0, #1
 80220fc:	429a      	cmp	r2, r3
 80220fe:	d004      	beq.n	802210a <__swbuf_r+0x6e>
 8022100:	89a3      	ldrh	r3, [r4, #12]
 8022102:	07db      	lsls	r3, r3, #31
 8022104:	d5e1      	bpl.n	80220ca <__swbuf_r+0x2e>
 8022106:	2e0a      	cmp	r6, #10
 8022108:	d1df      	bne.n	80220ca <__swbuf_r+0x2e>
 802210a:	4621      	mov	r1, r4
 802210c:	4628      	mov	r0, r5
 802210e:	f7ff ff9d 	bl	802204c <_fflush_r>
 8022112:	2800      	cmp	r0, #0
 8022114:	d0d9      	beq.n	80220ca <__swbuf_r+0x2e>
 8022116:	e7d6      	b.n	80220c6 <__swbuf_r+0x2a>

08022118 <__swsetup_r>:
 8022118:	b538      	push	{r3, r4, r5, lr}
 802211a:	4b29      	ldr	r3, [pc, #164]	@ (80221c0 <__swsetup_r+0xa8>)
 802211c:	4605      	mov	r5, r0
 802211e:	6818      	ldr	r0, [r3, #0]
 8022120:	460c      	mov	r4, r1
 8022122:	b118      	cbz	r0, 802212c <__swsetup_r+0x14>
 8022124:	6a03      	ldr	r3, [r0, #32]
 8022126:	b90b      	cbnz	r3, 802212c <__swsetup_r+0x14>
 8022128:	f7ff f9d0 	bl	80214cc <__sinit>
 802212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022130:	0719      	lsls	r1, r3, #28
 8022132:	d422      	bmi.n	802217a <__swsetup_r+0x62>
 8022134:	06da      	lsls	r2, r3, #27
 8022136:	d407      	bmi.n	8022148 <__swsetup_r+0x30>
 8022138:	2209      	movs	r2, #9
 802213a:	602a      	str	r2, [r5, #0]
 802213c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022140:	81a3      	strh	r3, [r4, #12]
 8022142:	f04f 30ff 	mov.w	r0, #4294967295
 8022146:	e033      	b.n	80221b0 <__swsetup_r+0x98>
 8022148:	0758      	lsls	r0, r3, #29
 802214a:	d512      	bpl.n	8022172 <__swsetup_r+0x5a>
 802214c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802214e:	b141      	cbz	r1, 8022162 <__swsetup_r+0x4a>
 8022150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022154:	4299      	cmp	r1, r3
 8022156:	d002      	beq.n	802215e <__swsetup_r+0x46>
 8022158:	4628      	mov	r0, r5
 802215a:	f7ff fbdb 	bl	8021914 <_free_r>
 802215e:	2300      	movs	r3, #0
 8022160:	6363      	str	r3, [r4, #52]	@ 0x34
 8022162:	89a3      	ldrh	r3, [r4, #12]
 8022164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022168:	81a3      	strh	r3, [r4, #12]
 802216a:	2300      	movs	r3, #0
 802216c:	6063      	str	r3, [r4, #4]
 802216e:	6923      	ldr	r3, [r4, #16]
 8022170:	6023      	str	r3, [r4, #0]
 8022172:	89a3      	ldrh	r3, [r4, #12]
 8022174:	f043 0308 	orr.w	r3, r3, #8
 8022178:	81a3      	strh	r3, [r4, #12]
 802217a:	6923      	ldr	r3, [r4, #16]
 802217c:	b94b      	cbnz	r3, 8022192 <__swsetup_r+0x7a>
 802217e:	89a3      	ldrh	r3, [r4, #12]
 8022180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022188:	d003      	beq.n	8022192 <__swsetup_r+0x7a>
 802218a:	4621      	mov	r1, r4
 802218c:	4628      	mov	r0, r5
 802218e:	f000 f83f 	bl	8022210 <__smakebuf_r>
 8022192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022196:	f013 0201 	ands.w	r2, r3, #1
 802219a:	d00a      	beq.n	80221b2 <__swsetup_r+0x9a>
 802219c:	2200      	movs	r2, #0
 802219e:	60a2      	str	r2, [r4, #8]
 80221a0:	6962      	ldr	r2, [r4, #20]
 80221a2:	4252      	negs	r2, r2
 80221a4:	61a2      	str	r2, [r4, #24]
 80221a6:	6922      	ldr	r2, [r4, #16]
 80221a8:	b942      	cbnz	r2, 80221bc <__swsetup_r+0xa4>
 80221aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80221ae:	d1c5      	bne.n	802213c <__swsetup_r+0x24>
 80221b0:	bd38      	pop	{r3, r4, r5, pc}
 80221b2:	0799      	lsls	r1, r3, #30
 80221b4:	bf58      	it	pl
 80221b6:	6962      	ldrpl	r2, [r4, #20]
 80221b8:	60a2      	str	r2, [r4, #8]
 80221ba:	e7f4      	b.n	80221a6 <__swsetup_r+0x8e>
 80221bc:	2000      	movs	r0, #0
 80221be:	e7f7      	b.n	80221b0 <__swsetup_r+0x98>
 80221c0:	200000a4 	.word	0x200000a4

080221c4 <__swhatbuf_r>:
 80221c4:	b570      	push	{r4, r5, r6, lr}
 80221c6:	460c      	mov	r4, r1
 80221c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221cc:	2900      	cmp	r1, #0
 80221ce:	b096      	sub	sp, #88	@ 0x58
 80221d0:	4615      	mov	r5, r2
 80221d2:	461e      	mov	r6, r3
 80221d4:	da0d      	bge.n	80221f2 <__swhatbuf_r+0x2e>
 80221d6:	89a3      	ldrh	r3, [r4, #12]
 80221d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80221dc:	f04f 0100 	mov.w	r1, #0
 80221e0:	bf14      	ite	ne
 80221e2:	2340      	movne	r3, #64	@ 0x40
 80221e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80221e8:	2000      	movs	r0, #0
 80221ea:	6031      	str	r1, [r6, #0]
 80221ec:	602b      	str	r3, [r5, #0]
 80221ee:	b016      	add	sp, #88	@ 0x58
 80221f0:	bd70      	pop	{r4, r5, r6, pc}
 80221f2:	466a      	mov	r2, sp
 80221f4:	f000 f848 	bl	8022288 <_fstat_r>
 80221f8:	2800      	cmp	r0, #0
 80221fa:	dbec      	blt.n	80221d6 <__swhatbuf_r+0x12>
 80221fc:	9901      	ldr	r1, [sp, #4]
 80221fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022206:	4259      	negs	r1, r3
 8022208:	4159      	adcs	r1, r3
 802220a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802220e:	e7eb      	b.n	80221e8 <__swhatbuf_r+0x24>

08022210 <__smakebuf_r>:
 8022210:	898b      	ldrh	r3, [r1, #12]
 8022212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022214:	079d      	lsls	r5, r3, #30
 8022216:	4606      	mov	r6, r0
 8022218:	460c      	mov	r4, r1
 802221a:	d507      	bpl.n	802222c <__smakebuf_r+0x1c>
 802221c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022220:	6023      	str	r3, [r4, #0]
 8022222:	6123      	str	r3, [r4, #16]
 8022224:	2301      	movs	r3, #1
 8022226:	6163      	str	r3, [r4, #20]
 8022228:	b003      	add	sp, #12
 802222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802222c:	ab01      	add	r3, sp, #4
 802222e:	466a      	mov	r2, sp
 8022230:	f7ff ffc8 	bl	80221c4 <__swhatbuf_r>
 8022234:	9f00      	ldr	r7, [sp, #0]
 8022236:	4605      	mov	r5, r0
 8022238:	4639      	mov	r1, r7
 802223a:	4630      	mov	r0, r6
 802223c:	f7ff f820 	bl	8021280 <_malloc_r>
 8022240:	b948      	cbnz	r0, 8022256 <__smakebuf_r+0x46>
 8022242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022246:	059a      	lsls	r2, r3, #22
 8022248:	d4ee      	bmi.n	8022228 <__smakebuf_r+0x18>
 802224a:	f023 0303 	bic.w	r3, r3, #3
 802224e:	f043 0302 	orr.w	r3, r3, #2
 8022252:	81a3      	strh	r3, [r4, #12]
 8022254:	e7e2      	b.n	802221c <__smakebuf_r+0xc>
 8022256:	89a3      	ldrh	r3, [r4, #12]
 8022258:	6020      	str	r0, [r4, #0]
 802225a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802225e:	81a3      	strh	r3, [r4, #12]
 8022260:	9b01      	ldr	r3, [sp, #4]
 8022262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022266:	b15b      	cbz	r3, 8022280 <__smakebuf_r+0x70>
 8022268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802226c:	4630      	mov	r0, r6
 802226e:	f000 f81d 	bl	80222ac <_isatty_r>
 8022272:	b128      	cbz	r0, 8022280 <__smakebuf_r+0x70>
 8022274:	89a3      	ldrh	r3, [r4, #12]
 8022276:	f023 0303 	bic.w	r3, r3, #3
 802227a:	f043 0301 	orr.w	r3, r3, #1
 802227e:	81a3      	strh	r3, [r4, #12]
 8022280:	89a3      	ldrh	r3, [r4, #12]
 8022282:	431d      	orrs	r5, r3
 8022284:	81a5      	strh	r5, [r4, #12]
 8022286:	e7cf      	b.n	8022228 <__smakebuf_r+0x18>

08022288 <_fstat_r>:
 8022288:	b538      	push	{r3, r4, r5, lr}
 802228a:	4d07      	ldr	r5, [pc, #28]	@ (80222a8 <_fstat_r+0x20>)
 802228c:	2300      	movs	r3, #0
 802228e:	4604      	mov	r4, r0
 8022290:	4608      	mov	r0, r1
 8022292:	4611      	mov	r1, r2
 8022294:	602b      	str	r3, [r5, #0]
 8022296:	f7df f9eb 	bl	8001670 <_fstat>
 802229a:	1c43      	adds	r3, r0, #1
 802229c:	d102      	bne.n	80222a4 <_fstat_r+0x1c>
 802229e:	682b      	ldr	r3, [r5, #0]
 80222a0:	b103      	cbz	r3, 80222a4 <_fstat_r+0x1c>
 80222a2:	6023      	str	r3, [r4, #0]
 80222a4:	bd38      	pop	{r3, r4, r5, pc}
 80222a6:	bf00      	nop
 80222a8:	2002bbc4 	.word	0x2002bbc4

080222ac <_isatty_r>:
 80222ac:	b538      	push	{r3, r4, r5, lr}
 80222ae:	4d06      	ldr	r5, [pc, #24]	@ (80222c8 <_isatty_r+0x1c>)
 80222b0:	2300      	movs	r3, #0
 80222b2:	4604      	mov	r4, r0
 80222b4:	4608      	mov	r0, r1
 80222b6:	602b      	str	r3, [r5, #0]
 80222b8:	f7df f9ea 	bl	8001690 <_isatty>
 80222bc:	1c43      	adds	r3, r0, #1
 80222be:	d102      	bne.n	80222c6 <_isatty_r+0x1a>
 80222c0:	682b      	ldr	r3, [r5, #0]
 80222c2:	b103      	cbz	r3, 80222c6 <_isatty_r+0x1a>
 80222c4:	6023      	str	r3, [r4, #0]
 80222c6:	bd38      	pop	{r3, r4, r5, pc}
 80222c8:	2002bbc4 	.word	0x2002bbc4

080222cc <_init>:
 80222cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ce:	bf00      	nop
 80222d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222d2:	bc08      	pop	{r3}
 80222d4:	469e      	mov	lr, r3
 80222d6:	4770      	bx	lr

080222d8 <_fini>:
 80222d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222da:	bf00      	nop
 80222dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222de:	bc08      	pop	{r3}
 80222e0:	469e      	mov	lr, r3
 80222e2:	4770      	bx	lr
