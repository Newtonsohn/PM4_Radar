
Firmware_roh_PM3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea6c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c08  0800ec20  0800ec20  0000fc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012828  08012828  000142d0  2**0
                  CONTENTS
  4 .ARM          00000008  08012828  08012828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012830  08012830  000142d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012830  08012830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012834  08012834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08012838  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  200002d0  08012b08  000142d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  08012b08  000149cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169da  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b69  00000000  00000000  0002acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001177  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027629  00000000  00000000  00031077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b705  00000000  00000000  000586a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1445  00000000  00000000  00073da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001551ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e8  00000000  00000000  00155230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ec04 	.word	0x0800ec04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	0800ec04 	.word	0x0800ec04

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <calculate_moving_mean>:
 *
 * @return The moving mean as a float. Returns 0.0f for invalid channel input.
 *
 ******************************************************************************
 */
float calculate_moving_mean(float new_value, int channel) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a01 	vstr	s0, [r7, #4]
 800100e:	6038      	str	r0, [r7, #0]
    float *buffer;
    int *index;

    // Select the appropriate buffer and index based on the channel
    if (channel == 0) {  // Left channel
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <calculate_moving_mean+0x1c>
        buffer = rms_buffer_left;
 8001016:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <calculate_moving_mean+0xb0>)
 8001018:	617b      	str	r3, [r7, #20]
        index = &rms_buffer_index_left;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <calculate_moving_mean+0xb4>)
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	e00a      	b.n	8001036 <calculate_moving_mean+0x32>
    } else if (channel == 1) {  // Right channel
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d104      	bne.n	8001030 <calculate_moving_mean+0x2c>
        buffer = rms_buffer_right;
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <calculate_moving_mean+0xb8>)
 8001028:	617b      	str	r3, [r7, #20]
        index = &rms_buffer_index_right;
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <calculate_moving_mean+0xbc>)
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e002      	b.n	8001036 <calculate_moving_mean+0x32>
    } else {
        return 0.0f;  // Invalid channel
 8001030:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80010c4 <calculate_moving_mean+0xc0>
 8001034:	e034      	b.n	80010a0 <calculate_moving_mean+0x9c>
    }

    // Add the new value to the buffer
    buffer[*index] = new_value;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	4413      	add	r3, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	601a      	str	r2, [r3, #0]

    // Increment the index in a circular manner
    *index = (*index + 1) % RMS_WINDOW_SIZE;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <calculate_moving_mean+0xc4>)
 800104c:	fb83 2301 	smull	r2, r3, r3, r1
 8001050:	109a      	asrs	r2, r3, #2
 8001052:	17cb      	asrs	r3, r1, #31
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	1aca      	subs	r2, r1, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	601a      	str	r2, [r3, #0]

    // Calculate the mean
    float sum = 0;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < RMS_WINDOW_SIZE; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e00e      	b.n	800108e <calculate_moving_mean+0x8a>
        sum += buffer[i];
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4413      	add	r3, r2
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < RMS_WINDOW_SIZE; i++) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b09      	cmp	r3, #9
 8001092:	dded      	ble.n	8001070 <calculate_moving_mean+0x6c>
    }

    return sum / RMS_WINDOW_SIZE;
 8001094:	edd7 7a03 	vldr	s15, [r7, #12]
 8001098:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800109c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 80010a0:	eef0 7a47 	vmov.f32	s15, s14
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200002ec 	.word	0x200002ec
 80010b8:	2000033c 	.word	0x2000033c
 80010bc:	20000314 	.word	0x20000314
 80010c0:	20000340 	.word	0x20000340
 80010c4:	00000000 	.word	0x00000000
 80010c8:	66666667 	.word	0x66666667

080010cc <rms>:
 *                be stored:
 *                - results[0]: RMS value for the left channel
 *                - results[1]: RMS value for the right channel
 ******************************************************************************
 */
void rms(uint32_t *results) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    uint32_t sum_left = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    uint32_t sum_right = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    uint16_t adc_offset = 2048;  // DC offset in ADC units (1.65V for a 3.3V, 12-bit ADC)
 80010dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010e0:	827b      	strh	r3, [r7, #18]

    for (uint32_t i = 0; i < ADC_NUMS; i += 2) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e021      	b.n	800112c <rms+0x60>
        // Remove offset from raw ADC values and square the result
        int32_t adjusted_left = (int32_t)ADC_samples[i] - adc_offset;
 80010e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001194 <rms+0xc8>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	461a      	mov	r2, r3
 80010f2:	8a7b      	ldrh	r3, [r7, #18]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	60fb      	str	r3, [r7, #12]
        int32_t adjusted_right = (int32_t)ADC_samples[i + 1] - adc_offset;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a25      	ldr	r2, [pc, #148]	@ (8001194 <rms+0xc8>)
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	461a      	mov	r2, r3
 8001104:	8a7b      	ldrh	r3, [r7, #18]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	60bb      	str	r3, [r7, #8]

        sum_left += adjusted_left * adjusted_left;  // Sum of squared deviations
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	fb03 f303 	mul.w	r3, r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	4413      	add	r3, r2
 8001116:	61fb      	str	r3, [r7, #28]
        sum_right += adjusted_right * adjusted_right;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	fb03 f303 	mul.w	r3, r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < ADC_NUMS; i += 2) {
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3302      	adds	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001130:	d9da      	bls.n	80010e8 <rms+0x1c>
    }

    // Compute RMS (in ADC units)
    results[0] = sqrt(sum_left / (ADC_NUMS / 2));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <rms+0xcc>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f1 	bl	8000524 <__aeabi_ui2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	ec43 2b10 	vmov	d0, r2, r3
 800114a:	f00d fa83 	bl	800e654 <sqrt>
 800114e:	ec53 2b10 	vmov	r2, r3, d0
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd37 	bl	8000bc8 <__aeabi_d2uiz>
 800115a:	4602      	mov	r2, r0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	601a      	str	r2, [r3, #0]
    results[1] = sqrt(sum_right / (ADC_NUMS / 2));
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <rms+0xcc>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_ui2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	ec43 2b10 	vmov	d0, r2, r3
 8001178:	f00d fa6c 	bl	800e654 <sqrt>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1d1c      	adds	r4, r3, #4
 8001184:	f7ff fd20 	bl	8000bc8 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	6023      	str	r3, [r4, #0]
}
 800118c:	bf00      	nop
 800118e:	3724      	adds	r7, #36	@ 0x24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000394 	.word	0x20000394
 8001198:	88888889 	.word	0x88888889

0800119c <calculate_current>:
 *           point for 0 Amps.
 *         - 5.0 if the RMS value is greater than or equal to the calibration
 *           point for 5 Amps.
 ******************************************************************************
 */
float calculate_current(float rms) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Define calibration points: RMS at 0 Amps and RMS at 5 Amps
    const float rms_0_amps = 250;   // RMS value for 0 Amps
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <calculate_current+0xa4>)
 80011a8:	60fb      	str	r3, [r7, #12]
    const float rms_5_amps = 520;  // RMS value for 5 Amps
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <calculate_current+0xa8>)
 80011ac:	60bb      	str	r3, [r7, #8]

    // Ensure the RMS value is within the valid range
    if (rms <= rms_0_amps) {
 80011ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d802      	bhi.n	80011c6 <calculate_current+0x2a>
        return 0.0; // Below or equal to 0 Amps
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e034      	b.n	8001230 <calculate_current+0x94>
    } else if (rms >= rms_5_amps) {
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	db01      	blt.n	80011dc <calculate_current+0x40>
        return 5.0; // Above or equal to 5 Amps
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <calculate_current+0xac>)
 80011da:	e029      	b.n	8001230 <calculate_current+0x94>
    }

    // Linearly interpolate the current
    return 5.0 * (rms - rms_0_amps) / (rms_5_amps - rms_0_amps);
 80011dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	ee17 0a90 	vmov	r0, s15
 80011ec:	f7ff f9bc 	bl	8000568 <__aeabi_f2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <calculate_current+0xb0>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4614      	mov	r4, r2
 8001200:	461d      	mov	r5, r3
 8001202:	ed97 7a02 	vldr	s14, [r7, #8]
 8001206:	edd7 7a03 	vldr	s15, [r7, #12]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	ee17 0a90 	vmov	r0, s15
 8001212:	f7ff f9a9 	bl	8000568 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fb25 	bl	800086c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fced 	bl	8000c08 <__aeabi_d2f>
 800122e:	4603      	mov	r3, r0
}
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb0 0a67 	vmov.f32	s0, s15
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	437a0000 	.word	0x437a0000
 8001244:	44020000 	.word	0x44020000
 8001248:	40a00000 	.word	0x40a00000
 800124c:	40140000 	.word	0x40140000

08001250 <calculate_distance>:
 * @return The calculated distance in centimeters. Returns:
 *         - 0.0 if the RMS value is greater than the calibration point for 0 cm.
 *         - 10.0 if the RMS value is less than the calibration point for 10 cm.
 ******************************************************************************
 */
float calculate_distance(float rms) {
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
    // Define calibration points: {RMS at 0 cm, RMS at 10 cm}
    const float rms_0_cm = 950;  // RMS value at 0 cm
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <calculate_distance+0xa4>)
 800125c:	60fb      	str	r3, [r7, #12]
    const float rms_10_cm = 400; // RMS value at 10 cm
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <calculate_distance+0xa8>)
 8001260:	60bb      	str	r3, [r7, #8]

    // Ensure the RMS value is within the valid range
    if (rms > rms_0_cm) {
 8001262:	ed97 7a01 	vldr	s14, [r7, #4]
 8001266:	edd7 7a03 	vldr	s15, [r7, #12]
 800126a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	dd02      	ble.n	800127a <calculate_distance+0x2a>
        return 0.0; // Closer than 0 cm
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e034      	b.n	80012e4 <calculate_distance+0x94>
    } else if (rms < rms_10_cm) {
 800127a:	ed97 7a01 	vldr	s14, [r7, #4]
 800127e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d501      	bpl.n	8001290 <calculate_distance+0x40>
        return 10.0; // Farther than 10 cm
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <calculate_distance+0xac>)
 800128e:	e029      	b.n	80012e4 <calculate_distance+0x94>
    }

    // Linearly interpolate the distance
    return 10.0 * (rms_0_cm - rms) / (rms_0_cm - rms_10_cm);
 8001290:	ed97 7a03 	vldr	s14, [r7, #12]
 8001294:	edd7 7a01 	vldr	s15, [r7, #4]
 8001298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129c:	ee17 0a90 	vmov	r0, s15
 80012a0:	f7ff f962 	bl	8000568 <__aeabi_f2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <calculate_distance+0xb0>)
 80012aa:	f7ff f9b5 	bl	8000618 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	ee17 0a90 	vmov	r0, s15
 80012c6:	f7ff f94f 	bl	8000568 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7ff facb 	bl	800086c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc93 	bl	8000c08 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	446d8000 	.word	0x446d8000
 80012f8:	43c80000 	.word	0x43c80000
 80012fc:	41200000 	.word	0x41200000
 8001300:	40240000 	.word	0x40240000
 8001304:	00000000 	.word	0x00000000

08001308 <calculate_angle>:
 * @param distance_left The measured distance to the left pad in centimeters.
 * @param distance_right The measured distance to the right pad in centimeters.
 * @return The calculated angle in degrees.
 ******************************************************************************
 */
float calculate_angle(float distance_left, float distance_right) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	edc7 0a00 	vstr	s1, [r7]
    const float BASELINE = 5.0;  // Fixed distance between copper pads in cm
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <calculate_angle+0x88>)
 8001318:	617b      	str	r3, [r7, #20]

    // Calculate the angle in radians
    float angle_radians = atan((distance_left - distance_right) / BASELINE);
 800131a:	ed97 7a01 	vldr	s14, [r7, #4]
 800131e:	edd7 7a00 	vldr	s15, [r7]
 8001322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f919 	bl	8000568 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b10 	vmov	d0, r2, r3
 800133e:	f00d f9b7 	bl	800e6b0 <atan>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fc5d 	bl	8000c08 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	613b      	str	r3, [r7, #16]

    // Convert to degrees
    float angle_degrees = angle_radians * (180.0 / M_PI);
 8001352:	6938      	ldr	r0, [r7, #16]
 8001354:	f7ff f908 	bl	8000568 <__aeabi_f2d>
 8001358:	a30b      	add	r3, pc, #44	@ (adr r3, 8001388 <calculate_angle+0x80>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f95b 	bl	8000618 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fc4d 	bl	8000c08 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	60fb      	str	r3, [r7, #12]

    return angle_degrees;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	1a63c1f8 	.word	0x1a63c1f8
 800138c:	404ca5dc 	.word	0x404ca5dc
 8001390:	40a00000 	.word	0x40a00000

08001394 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b091      	sub	sp, #68	@ 0x44
 8001398:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800139a:	f003 fe55 	bl	8005048 <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 800139e:	f000 f95d 	bl	800165c <SystemClock_Config>
	MX_GPIO_Init();
 80013a2:	f000 fa85 	bl	80018b0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80013a6:	f000 fa53 	bl	8001850 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 80013aa:	2306      	movs	r3, #6
 80013ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
#else
	BSP_LCD_Init();						// Initialize the LCD display
 80013b0:	f002 fda0 	bl	8003ef4 <BSP_LCD_Init>
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80013b4:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80013b8:	2001      	movs	r0, #1
 80013ba:	f002 fe1d 	bl	8003ff8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80013be:	2001      	movs	r0, #1
 80013c0:	f002 fe7e 	bl	80040c0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80013c4:	f003 f94e 	bl	8004664 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f002 fed4 	bl	8004178 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80013d0:	f002 fdfa 	bl	8003fc8 <BSP_LCD_GetXSize>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29c      	uxth	r4, r3
 80013d8:	f002 fe02 	bl	8003fe0 <BSP_LCD_GetYSize>
 80013dc:	4603      	mov	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	4620      	mov	r0, r4
 80013e4:	f003 fd2c 	bl	8004e40 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */

	PB_init();							// Initialize the user pushbutton
 80013e8:	f001 fbda 	bl	8002ba0 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80013ec:	f001 fbf8 	bl	8002be0 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80013f0:	2000      	movs	r0, #0
 80013f2:	f002 f983 	bl	80036fc <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80013f6:	2001      	movs	r0, #1
 80013f8:	f002 f980 	bl	80036fc <BSP_LED_Init>
	BSP_LED_On(LED3);					// Set power LED and Enable pin on
 80013fc:	2000      	movs	r0, #0
 80013fe:	f002 f9d1 	bl	80037a4 <BSP_LED_On>

	MENU_draw();						// Draw the menu
 8001402:	f001 f9ed 	bl	80027e0 <MENU_draw>
	MENU_hint();						// Show hint at startup
 8001406:	f001 fa95 	bl	8002934 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 800140a:	f000 f9a5 	bl	8001758 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 800140e:	f000 fac9 	bl	80019a4 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8001412:	f000 fbaf 	bl	8001b74 <MEAS_timer_init>

    uint32_t last_time = HAL_GetTick(); // Tracks the last update time
 8001416:	f003 fe7d 	bl	8005114 <HAL_GetTick>
 800141a:	63b8      	str	r0, [r7, #56]	@ 0x38

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function

		current_time = HAL_GetTick(); // Get the current time
 800141c:	f003 fe7a 	bl	8005114 <HAL_GetTick>
 8001420:	4603      	mov	r3, r0
 8001422:	4a81      	ldr	r2, [pc, #516]	@ (8001628 <main+0x294>)
 8001424:	6013      	str	r3, [r2, #0]

        // Check for menu activity
        if (previous_menu != active_menu) {
 8001426:	4b81      	ldr	r3, [pc, #516]	@ (800162c <main+0x298>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800142e:	429a      	cmp	r2, r3
 8001430:	d007      	beq.n	8001442 <main+0xae>
            inactivity_timer = 0;  // Reset the inactivity timer
 8001432:	4b7f      	ldr	r3, [pc, #508]	@ (8001630 <main+0x29c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
            previous_menu = active_menu;  // Update the previous menu
 8001438:	4b7c      	ldr	r3, [pc, #496]	@ (800162c <main+0x298>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001440:	e008      	b.n	8001454 <main+0xc0>
        } else {
            inactivity_timer += current_time - last_time; // Increment timer
 8001442:	4b79      	ldr	r3, [pc, #484]	@ (8001628 <main+0x294>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001448:	1ad2      	subs	r2, r2, r3
 800144a:	4b79      	ldr	r3, [pc, #484]	@ (8001630 <main+0x29c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a77      	ldr	r2, [pc, #476]	@ (8001630 <main+0x29c>)
 8001452:	6013      	str	r3, [r2, #0]
        }

        last_time = current_time; // Update the last update time
 8001454:	4b74      	ldr	r3, [pc, #464]	@ (8001628 <main+0x294>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Shutdown condition: 1 minute of inactivity
        if (inactivity_timer >= 60000) {
 800145a:	4b75      	ldr	r3, [pc, #468]	@ (8001630 <main+0x29c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001462:	4293      	cmp	r3, r2
 8001464:	d916      	bls.n	8001494 <main+0x100>
            sprintf(msg, "Auto-shutdown due to inactivity\r\n");
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4972      	ldr	r1, [pc, #456]	@ (8001634 <main+0x2a0>)
 800146a:	4618      	mov	r0, r3
 800146c:	f009 fcb8 	bl	800ade0 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ff0c 	bl	8000290 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	1d39      	adds	r1, r7, #4
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	486d      	ldr	r0, [pc, #436]	@ (8001638 <main+0x2a4>)
 8001484:	f007 fe57 	bl	8009136 <HAL_UART_Transmit>

            BSP_LED_Off(LED3);  // Turn off LEDs
 8001488:	2000      	movs	r0, #0
 800148a:	f002 f9a5 	bl	80037d8 <BSP_LED_Off>
            BSP_LED_Off(LED4);
 800148e:	2001      	movs	r0, #1
 8001490:	f002 f9a2 	bl	80037d8 <BSP_LED_Off>

        }

	    sprintf(msg, "MEAS_data_ready: %d\r\n", MEAS_data_ready);    // Convert MEAS_data_ready to a string
 8001494:	4b69      	ldr	r3, [pc, #420]	@ (800163c <main+0x2a8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4968      	ldr	r1, [pc, #416]	@ (8001640 <main+0x2ac>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f009 fc9e 	bl	800ade0 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fef2 	bl	8000290 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	1d39      	adds	r1, r7, #4
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	4860      	ldr	r0, [pc, #384]	@ (8001638 <main+0x2a4>)
 80014b8:	f007 fe3d 	bl	8009136 <HAL_UART_Transmit>
	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 80014bc:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <main+0x298>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	495f      	ldr	r1, [pc, #380]	@ (8001644 <main+0x2b0>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f009 fc8a 	bl	800ade0 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fede 	bl	8000290 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	1d39      	adds	r1, r7, #4
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	4856      	ldr	r0, [pc, #344]	@ (8001638 <main+0x2a4>)
 80014e0:	f007 fe29 	bl	8009136 <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 80014e4:	4b55      	ldr	r3, [pc, #340]	@ (800163c <main+0x2a8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <main+0x18c>
			MEAS_data_ready = false;
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <main+0x2a8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

			if(active_menu == MENU_ZERO){
 80014f2:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <main+0x298>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d112      	bne.n	8001520 <main+0x18c>
			    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4952      	ldr	r1, [pc, #328]	@ (8001648 <main+0x2b4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fc6e 	bl	800ade0 <siprintf>
			    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fec2 	bl	8000290 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	1d39      	adds	r1, r7, #4
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	4848      	ldr	r0, [pc, #288]	@ (8001638 <main+0x2a4>)
 8001518:	f007 fe0d 	bl	8009136 <HAL_UART_Transmit>
			    show_data_menu_zero();
 800151c:	f000 fe26 	bl	800216c <show_data_menu_zero>

	        }

		}

		if (active_menu == MENU_ONE) {
 8001520:	4b42      	ldr	r3, [pc, #264]	@ (800162c <main+0x298>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <main+0x198>
			show_data_menu_one();
 8001528:	f000 fff0 	bl	800250c <show_data_menu_one>
			}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800152c:	f001 fb8a 	bl	8002c44 <PB_pressed>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01d      	beq.n	8001572 <main+0x1de>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8001536:	4b45      	ldr	r3, [pc, #276]	@ (800164c <main+0x2b8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <main+0x2b8>)
 8001552:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8001554:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <main+0x2b8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <main+0x1d4>
				DAC_init();
 800155c:	f000 faae 	bl	8001abc <DAC_init>
				BSP_LED_On(LED4);
 8001560:	2001      	movs	r0, #1
 8001562:	f002 f91f 	bl	80037a4 <BSP_LED_On>
 8001566:	e004      	b.n	8001572 <main+0x1de>
			} else {
				DAC_reset();
 8001568:	f000 fa92 	bl	8001a90 <DAC_reset>
				BSP_LED_Off(LED4);
 800156c:	2001      	movs	r0, #1
 800156e:	f002 f933 	bl	80037d8 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8001572:	f001 fa39 	bl	80029e8 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8001576:	f001 fa2b 	bl	80029d0 <MENU_get_transition>
 800157a:	4603      	mov	r3, r0
 800157c:	2b06      	cmp	r3, #6
 800157e:	d006      	beq.n	800158e <main+0x1fa>
 8001580:	2b06      	cmp	r3, #6
 8001582:	dc18      	bgt.n	80015b6 <main+0x222>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <main+0x202>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d00c      	beq.n	80015a6 <main+0x212>
 800158c:	e013      	b.n	80015b6 <main+0x222>
			case MENU_NONE:					// No transition => do nothing
	            active_menu = MENU_NONE;
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <main+0x298>)
 8001590:	2206      	movs	r2, #6
 8001592:	701a      	strb	r2, [r3, #0]

				break;
 8001594:	e021      	b.n	80015da <main+0x246>

			case MENU_ZERO:
	            active_menu = MENU_ZERO;
 8001596:	4b25      	ldr	r3, [pc, #148]	@ (800162c <main+0x298>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]

	            ADC3_IN13_IN4_scan_init();
 800159c:	f000 fb20 	bl	8001be0 <ADC3_IN13_IN4_scan_init>
		        ADC3_IN13_IN4_scan_start();
 80015a0:	f000 fc5e 	bl	8001e60 <ADC3_IN13_IN4_scan_start>
			break;
 80015a4:	e019      	b.n	80015da <main+0x246>

			case MENU_ONE:
	            active_menu = MENU_ONE;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <main+0x298>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
		        ADC3_IN11_IN6_scan_init();
 80015ac:	f000 fbb8 	bl	8001d20 <ADC3_IN11_IN6_scan_init>
		        ADC3_IN11_IN6_scan_start();
 80015b0:	f000 fc78 	bl	8001ea4 <ADC3_IN11_IN6_scan_start>
				break;
 80015b4:	e011      	b.n	80015da <main+0x246>
		default:						// Should never occur
			sprintf(msg, "Skipped While loop\r\n");
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4925      	ldr	r1, [pc, #148]	@ (8001650 <main+0x2bc>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f009 fc10 	bl	800ade0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe64 	bl	8000290 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	4819      	ldr	r0, [pc, #100]	@ (8001638 <main+0x2a4>)
 80015d4:	f007 fdaf 	bl	8009136 <HAL_UART_Transmit>
			break;
 80015d8:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep; Thomas: increased to 2000 for printing, you can change back to 200
 80015da:	20c8      	movs	r0, #200	@ 0xc8
 80015dc:	f003 fda6 	bl	800512c <HAL_Delay>
	    sprintf(msg, "CYCLE END: \r\n");
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	491c      	ldr	r1, [pc, #112]	@ (8001654 <main+0x2c0>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f009 fbfb 	bl	800ade0 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe4f 	bl	8000290 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	1d39      	adds	r1, r7, #4
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	480e      	ldr	r0, [pc, #56]	@ (8001638 <main+0x2a4>)
 80015fe:	f007 fd9a 	bl	8009136 <HAL_UART_Transmit>
	    sprintf(msg, "---------------------------------------------\r\n\n\n");
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4914      	ldr	r1, [pc, #80]	@ (8001658 <main+0x2c4>)
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fbea 	bl	800ade0 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe3e 	bl	8000290 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <main+0x2a4>)
 8001620:	f007 fd89 	bl	8009136 <HAL_UART_Transmit>
		current_time = HAL_GetTick(); // Get the current time
 8001624:	e6fa      	b.n	800141c <main+0x88>
 8001626:	bf00      	nop
 8001628:	20000348 	.word	0x20000348
 800162c:	20000000 	.word	0x20000000
 8001630:	20000344 	.word	0x20000344
 8001634:	0800ec20 	.word	0x0800ec20
 8001638:	2000034c 	.word	0x2000034c
 800163c:	2000038c 	.word	0x2000038c
 8001640:	0800ec44 	.word	0x0800ec44
 8001644:	0800ec5c 	.word	0x0800ec5c
 8001648:	0800ec70 	.word	0x0800ec70
 800164c:	2000038d 	.word	0x2000038d
 8001650:	0800ec80 	.word	0x0800ec80
 8001654:	0800ec98 	.word	0x0800ec98
 8001658:	0800eca8 	.word	0x0800eca8

0800165c <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b0a0      	sub	sp, #128	@ 0x80
 8001660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001666:	2230      	movs	r2, #48	@ 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f009 fc1b 	bl	800aea6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2230      	movs	r2, #48	@ 0x30
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f009 fc0c 	bl	800aea6 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <SystemClock_Config+0xf0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <SystemClock_Config+0xf0>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <SystemClock_Config+0xf0>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <SystemClock_Config+0xf4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <SystemClock_Config+0xf4>)
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <SystemClock_Config+0xf4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ce:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016da:	2308      	movs	r3, #8
 80016dc:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80016de:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016e2:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e8:	2307      	movs	r3, #7
 80016ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 ff53 	bl	800759c <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016f6:	230f      	movs	r3, #15
 80016f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2302      	movs	r3, #2
 80016fc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800170e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001712:	2105      	movs	r1, #5
 8001714:	4618      	mov	r0, r3
 8001716:	f006 f9af 	bl	8007a78 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800171a:	2308      	movs	r3, #8
 800171c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800171e:	23c0      	movs	r3, #192	@ 0xc0
 8001720:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001722:	2304      	movs	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001726:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fbc1 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <SystemClock_Config+0xf8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a06      	ldr	r2, [pc, #24]	@ (8001754 <SystemClock_Config+0xf8>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001740:	6053      	str	r3, [r2, #4]
}
 8001742:	bf00      	nop
 8001744:	3780      	adds	r7, #128	@ 0x80
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	40012300 	.word	0x40012300

08001758 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <gyro_disable+0xb4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a29      	ldr	r2, [pc, #164]	@ (800180c <gyro_disable+0xb4>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <gyro_disable+0xb4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <gyro_disable+0xb8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <gyro_disable+0xb8>)
 8001780:	f023 030c 	bic.w	r3, r3, #12
 8001784:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <gyro_disable+0xb8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <gyro_disable+0xb8>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <gyro_disable+0xb8>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <gyro_disable+0xb8>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 800179e:	200a      	movs	r0, #10
 80017a0:	f003 fcc4 	bl	800512c <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <gyro_disable+0xb8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <gyro_disable+0xb8>)
 80017aa:	f043 030c 	orr.w	r3, r3, #12
 80017ae:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <gyro_disable+0xb4>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <gyro_disable+0xb4>)
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <gyro_disable+0xb4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <gyro_disable+0xbc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <gyro_disable+0xbc>)
 80017d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80017d6:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <gyro_disable+0xbc>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <gyro_disable+0xbc>)
 80017de:	f023 030f 	bic.w	r3, r3, #15
 80017e2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <gyro_disable+0xbc>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <gyro_disable+0xbc>)
 80017ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80017ee:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 80017f0:	200a      	movs	r0, #10
 80017f2:	f003 fc9b 	bl	800512c <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <gyro_disable+0xbc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <gyro_disable+0xbc>)
 80017fc:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40020800 	.word	0x40020800
 8001814:	40021400 	.word	0x40021400

08001818 <_close>:


// Default function implementations required to prevent build errors.
__attribute__((weak)) void _close(void){}
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_read>:
__attribute__((weak)) void _read(void){}
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_write>:
__attribute__((weak)) void _write(void){}
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <MX_USART1_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_USART1_UART_Init+0x4c>)
 8001888:	f007 fc08 	bl	800909c <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f000 f807 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	40011000 	.word	0x40011000

080018a4 <Error_Handler>:
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_GPIO_Init+0x30>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <MX_GPIO_Init+0x30>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_GPIO_Init+0x30>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db12      	blt.n	8001958 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	490a      	ldr	r1, [pc, #40]	@ (8001964 <__NVIC_DisableIRQ+0x44>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	3320      	adds	r3, #32
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
}
 8001950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001952:	f3bf 8f6f 	isb	sy
}
 8001956:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0c      	blt.n	8001994 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <__NVIC_ClearPendingIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	3360      	adds	r3, #96	@ 0x60
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a33      	ldr	r2, [pc, #204]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019b4:	f043 0320 	orr.w	r3, r3, #32
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80019c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <MEAS_GPIO_analog_init+0xe0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001a84 <MEAS_GPIO_analog_init+0xe0>)
 80019cc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80019d0:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <MEAS_GPIO_analog_init+0xe4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <MEAS_GPIO_analog_init+0xe4>)
 80019f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80019f8:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MEAS_GPIO_analog_init+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <MEAS_GPIO_analog_init+0xe8>)
 8001a1c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001a20:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MEAS_GPIO_analog_init+0xe0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a10      	ldr	r2, [pc, #64]	@ (8001a84 <MEAS_GPIO_analog_init+0xe0>)
 8001a44:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001a48:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MEAS_GPIO_analog_init+0xdc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <MEAS_GPIO_analog_init+0xe4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <MEAS_GPIO_analog_init+0xe4>)
 8001a6c:	f043 030c 	orr.w	r3, r3, #12
 8001a70:	6013      	str	r3, [r2, #0]

}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <DAC_reset+0x28>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <DAC_reset+0x28>)
 8001a9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a9e:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <DAC_reset+0x28>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <DAC_reset+0x28>)
 8001aa6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001aaa:	6213      	str	r3, [r2, #32]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <DAC_init+0x3c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <DAC_init+0x3c>)
 8001acc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <DAC_init+0x3c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <DAC_init+0x40>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <DAC_init+0x40>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007400 	.word	0x40007400

08001b00 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <DAC_increment+0x30>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <DAC_increment+0x30>)
 8001b0c:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <DAC_increment+0x30>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b16:	d302      	bcc.n	8001b1e <DAC_increment+0x1e>
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <DAC_increment+0x30>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <DAC_increment+0x34>)
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <DAC_increment+0x30>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6153      	str	r3, [r2, #20]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	20000574 	.word	0x20000574
 8001b34:	40007400 	.word	0x40007400

08001b38 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <ADC_reset+0x38>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <ADC_reset+0x38>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <ADC_reset+0x38>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <ADC_reset+0x38>)
 8001b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b52:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001b54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MEAS_timer_init+0x68>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <MEAS_timer_init+0x68>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MEAS_timer_init+0x68>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9a:	f243 62af 	movw	r2, #13999	@ 0x36af
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001ba0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ba4:	2209      	movs	r2, #9
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f7ff fecd 	bl	8001968 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001bce:	201c      	movs	r0, #28
 8001bd0:	f7ff fe88 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800

08001be0 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	MEAS_input_count = 2;				// 2 inputs are converted
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x124>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf4:	4a44      	ldr	r2, [pc, #272]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfc:	4b42      	ldr	r3, [pc, #264]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001c14:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	4a3c      	ldr	r2, [pc, #240]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c1a:	f043 030d 	orr.w	r3, r3, #13
 8001c1e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001c20:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	4a39      	ldr	r2, [pc, #228]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001c2c:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a36      	ldr	r2, [pc, #216]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c36:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001c38:	4b34      	ldr	r3, [pc, #208]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a33      	ldr	r2, [pc, #204]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001c44:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c4a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001c4e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001c50:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	4a28      	ldr	r2, [pc, #160]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001c84:	bf00      	nop
 8001c86:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <ADC3_IN13_IN4_scan_init+0x134>)
 8001c98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c9c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ca8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a15      	ldr	r2, [pc, #84]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ccc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce8:	2278      	movs	r2, #120	@ 0x78
 8001cea:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <ADC3_IN13_IN4_scan_init+0x138>)
 8001cf0:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cf4:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <ADC3_IN13_IN4_scan_init+0x13c>)
 8001cf6:	60da      	str	r2, [r3, #12]

}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20000004 	.word	0x20000004
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40012200 	.word	0x40012200
 8001d10:	40026428 	.word	0x40026428
 8001d14:	40026400 	.word	0x40026400
 8001d18:	4001224c 	.word	0x4001224c
 8001d1c:	20000394 	.word	0x20000394

08001d20 <ADC3_IN11_IN6_scan_init>:

//COIL LEFT AND RIGHT
void ADC3_IN11_IN6_scan_init(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001d26:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x124>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b45      	ldr	r3, [pc, #276]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	4a44      	ldr	r2, [pc, #272]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3c:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001d48:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 8001d54:	4b3d      	ldr	r3, [pc, #244]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d58:	4a3c      	ldr	r2, [pc, #240]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d5a:	f043 030b 	orr.w	r3, r3, #11
 8001d5e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (6UL << ADC_SQR3_SQ2_Pos);	// Input 6 = second conversion
 8001d60:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d64:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d6a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001d6c:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a36      	ldr	r2, [pc, #216]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d76:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a33      	ldr	r2, [pc, #204]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a30      	ldr	r2, [pc, #192]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d8a:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001d8e:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001da6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x128>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001dc4:	bf00      	nop
 8001dc6:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <ADC3_IN11_IN6_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <ADC3_IN11_IN6_scan_init+0x134>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <ADC3_IN11_IN6_scan_init+0x134>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ddc:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001de4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001de8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e00:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e0c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0f      	ldr	r2, [pc, #60]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e18:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e28:	2278      	movs	r2, #120	@ 0x78
 8001e2a:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <ADC3_IN11_IN6_scan_init+0x138>)
 8001e30:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e34:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <ADC3_IN11_IN6_scan_init+0x13c>)
 8001e36:	60da      	str	r2, [r3, #12]

}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20000004 	.word	0x20000004
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40012200 	.word	0x40012200
 8001e50:	40026428 	.word	0x40026428
 8001e54:	40026400 	.word	0x40026400
 8001e58:	4001224c 	.word	0x4001224c
 8001e5c:	20000394 	.word	0x20000394

08001e60 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001e70:	2039      	movs	r0, #57	@ 0x39
 8001e72:	f7ff fd79 	bl	8001968 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001e76:	2039      	movs	r0, #57	@ 0x39
 8001e78:	f7ff fd34 	bl	80018e4 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001e88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40026428 	.word	0x40026428
 8001ea0:	40012200 	.word	0x40012200

08001ea4 <ADC3_IN11_IN6_scan_start>:
//COIL Left and right
void ADC3_IN11_IN6_scan_start(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <ADC3_IN11_IN6_scan_start+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <ADC3_IN11_IN6_scan_start+0x3c>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001eb4:	2039      	movs	r0, #57	@ 0x39
 8001eb6:	f7ff fd57 	bl	8001968 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001eba:	2039      	movs	r0, #57	@ 0x39
 8001ebc:	f7ff fd12 	bl	80018e4 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <ADC3_IN11_IN6_scan_start+0x40>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <ADC3_IN11_IN6_scan_start+0x40>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001ecc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40026428 	.word	0x40026428
 8001ee4:	40012200 	.word	0x40012200

08001ee8 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001eec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <TIM2_IRQHandler+0x24>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001f04:	f7ff fdfc 	bl	8001b00 <DAC_increment>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000038d 	.word	0x2000038d

08001f10 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <ADC_IRQHandler+0x58>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001f20:	4911      	ldr	r1, [pc, #68]	@ (8001f68 <ADC_IRQHandler+0x58>)
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <ADC_IRQHandler+0x5c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <ADC_IRQHandler+0x5c>)
 8001f2a:	6002      	str	r2, [r0, #0]
 8001f2c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001f2e:	4910      	ldr	r1, [pc, #64]	@ (8001f70 <ADC_IRQHandler+0x60>)
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <ADC_IRQHandler+0x5c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f3a:	d912      	bls.n	8001f62 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001f3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <ADC_IRQHandler+0x58>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <ADC_IRQHandler+0x58>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001f58:	f7ff fdee 	bl	8001b38 <ADC_reset>
			MEAS_data_ready = true;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <ADC_IRQHandler+0x64>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40012200 	.word	0x40012200
 8001f6c:	20000390 	.word	0x20000390
 8001f70:	20000394 	.word	0x20000394
 8001f74:	2000038c 	.word	0x2000038c

08001f78 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x78>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001f88:	2039      	movs	r0, #57	@ 0x39
 8001f8a:	f7ff fcc9 	bl	8001920 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001f8e:	2039      	movs	r0, #57	@ 0x39
 8001f90:	f7ff fcea 	bl	8001968 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <DMA2_Stream1_IRQHandler+0x7c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a16      	ldr	r2, [pc, #88]	@ (8001ff4 <DMA2_Stream1_IRQHandler+0x7c>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001fa0:	bf00      	nop
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <DMA2_Stream1_IRQHandler+0x7c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x78>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x78>)
 8001fb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb8:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <DMA2_Stream1_IRQHandler+0x80>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <DMA2_Stream1_IRQHandler+0x80>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <DMA2_Stream1_IRQHandler+0x80>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <DMA2_Stream1_IRQHandler+0x80>)
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe0:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001fe2:	f7ff fda9 	bl	8001b38 <ADC_reset>
		MEAS_data_ready = true;
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <DMA2_Stream1_IRQHandler+0x84>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
	}
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40026400 	.word	0x40026400
 8001ff4:	40026428 	.word	0x40026428
 8001ff8:	40012200 	.word	0x40012200
 8001ffc:	2000038c 	.word	0x2000038c

08002000 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <DMA2_Stream3_IRQHandler+0x78>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d031      	beq.n	8002074 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8002010:	203b      	movs	r0, #59	@ 0x3b
 8002012:	f7ff fc85 	bl	8001920 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8002016:	203b      	movs	r0, #59	@ 0x3b
 8002018:	f7ff fca6 	bl	8001968 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <DMA2_Stream3_IRQHandler+0x7c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a16      	ldr	r2, [pc, #88]	@ (800207c <DMA2_Stream3_IRQHandler+0x7c>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8002028:	bf00      	nop
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <DMA2_Stream3_IRQHandler+0x7c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <DMA2_Stream3_IRQHandler+0x78>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <DMA2_Stream3_IRQHandler+0x78>)
 800203c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002040:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8002042:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <DMA2_Stream3_IRQHandler+0x80>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <DMA2_Stream3_IRQHandler+0x80>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <DMA2_Stream3_IRQHandler+0x80>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <DMA2_Stream3_IRQHandler+0x80>)
 8002064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002068:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800206a:	f7ff fd65 	bl	8001b38 <ADC_reset>
		MEAS_data_ready = true;
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <DMA2_Stream3_IRQHandler+0x84>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
	}
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40026400 	.word	0x40026400
 800207c:	40026458 	.word	0x40026458
 8002080:	40012100 	.word	0x40012100
 8002084:	2000038c 	.word	0x2000038c

08002088 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <DMA2_Stream4_IRQHandler+0xc8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d055      	beq.n	8002146 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 800209a:	203c      	movs	r0, #60	@ 0x3c
 800209c:	f7ff fc40 	bl	8001920 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 80020a0:	203c      	movs	r0, #60	@ 0x3c
 80020a2:	f7ff fc61 	bl	8001968 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <DMA2_Stream4_IRQHandler+0xcc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002154 <DMA2_Stream4_IRQHandler+0xcc>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80020b2:	bf00      	nop
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <DMA2_Stream4_IRQHandler+0xcc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <DMA2_Stream4_IRQHandler+0xc8>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <DMA2_Stream4_IRQHandler+0xc8>)
 80020c6:	f043 0320 	orr.w	r3, r3, #32
 80020ca:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80020cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <DMA2_Stream4_IRQHandler+0xd0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <DMA2_Stream4_IRQHandler+0xd0>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <DMA2_Stream4_IRQHandler+0xd4>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <DMA2_Stream4_IRQHandler+0xd4>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <DMA2_Stream4_IRQHandler+0xd8>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a19      	ldr	r2, [pc, #100]	@ (8002160 <DMA2_Stream4_IRQHandler+0xd8>)
 80020fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80020fe:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002100:	233b      	movs	r3, #59	@ 0x3b
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e017      	b.n	8002136 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <DMA2_Stream4_IRQHandler+0xdc>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	3301      	adds	r3, #1
 8002114:	0c12      	lsrs	r2, r2, #16
 8002116:	4913      	ldr	r1, [pc, #76]	@ (8002164 <DMA2_Stream4_IRQHandler+0xdc>)
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 800211c:	4a11      	ldr	r2, [pc, #68]	@ (8002164 <DMA2_Stream4_IRQHandler+0xdc>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	b292      	uxth	r2, r2
 800212a:	490e      	ldr	r1, [pc, #56]	@ (8002164 <DMA2_Stream4_IRQHandler+0xdc>)
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	dae4      	bge.n	8002106 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 800213c:	f7ff fcfc 	bl	8001b38 <ADC_reset>
		MEAS_data_ready = true;
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <DMA2_Stream4_IRQHandler+0xe0>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
	}
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40026400 	.word	0x40026400
 8002154:	40026470 	.word	0x40026470
 8002158:	40012000 	.word	0x40012000
 800215c:	40012100 	.word	0x40012100
 8002160:	40012300 	.word	0x40012300
 8002164:	20000394 	.word	0x20000394
 8002168:	2000038c 	.word	0x2000038c

0800216c <show_data_menu_zero>:
 *   to prevent system crashes.
 *
 ******************************************************************************
 */
void show_data_menu_zero(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b0ad      	sub	sp, #180	@ 0xb4
 8002170:	af02      	add	r7, sp, #8
	const uint32_t Y_OFFSET = 220;
 8002172:	23dc      	movs	r3, #220	@ 0xdc
 8002174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const uint32_t X_SIZE = 240;
 8002178:	23f0      	movs	r3, #240	@ 0xf0
 800217a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 800217e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002182:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t mean_results[2];
    float cable_distances[2];  // To store calculated distances

	char msg [50];
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f001 ffa4 	bl	80040e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8002198:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800219c:	b29a      	uxth	r2, r3
 800219e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	2000      	movs	r0, #0
 80021ac:	f002 f9d8 	bl	8004560 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 80021b0:	48c9      	ldr	r0, [pc, #804]	@ (80024d8 <show_data_menu_zero+0x36c>)
 80021b2:	f001 ffc7 	bl	8004144 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80021b6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ba:	f001 ffa9 	bl	8004110 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021be:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80021c2:	f001 ff8d 	bl	80040e0 <BSP_LCD_SetTextColor>
    char text[50];

    rms(rms_results);
 80021c6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff7e 	bl	80010cc <rms>
    // Calculate moving mean for each channel
    mean_results[0] = calculate_moving_mean(rms_results[0], 0); // Left channel
 80021d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	2000      	movs	r0, #0
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	f7fe ff10 	bl	8001004 <calculate_moving_mean>
 80021e4:	eef0 7a40 	vmov.f32	s15, s0
 80021e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ec:	ee17 3a90 	vmov	r3, s15
 80021f0:	677b      	str	r3, [r7, #116]	@ 0x74
    mean_results[1] = calculate_moving_mean(rms_results[1], 1); // Right channel
 80021f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	2001      	movs	r0, #1
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	f7fe fefe 	bl	8001004 <calculate_moving_mean>
 8002208:	eef0 7a40 	vmov.f32	s15, s0
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	67bb      	str	r3, [r7, #120]	@ 0x78
    cable_distances[0] = calculate_distance(mean_results[0]);
 8002216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002220:	eeb0 0a67 	vmov.f32	s0, s15
 8002224:	f7ff f814 	bl	8001250 <calculate_distance>
 8002228:	eef0 7a40 	vmov.f32	s15, s0
 800222c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    cable_distances[1] = calculate_distance(mean_results[1]);
 8002230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	f7ff f807 	bl	8001250 <calculate_distance>
 8002242:	eef0 7a40 	vmov.f32	s15, s0
 8002246:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float angle_to_wire = calculate_angle(cable_distances[0], cable_distances[1]);     // Calculate the angle
 800224a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800224e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002252:	eef0 0a47 	vmov.f32	s1, s14
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	f7ff f855 	bl	8001308 <calculate_angle>
 800225e:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

    // Display left RMS
    snprintf(text, 50, "rms left: %lu", rms_results[0]);
 8002262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002264:	1d38      	adds	r0, r7, #4
 8002266:	4a9d      	ldr	r2, [pc, #628]	@ (80024dc <show_data_menu_zero+0x370>)
 8002268:	2132      	movs	r1, #50	@ 0x32
 800226a:	f008 fd85 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)text, LEFT_MODE);
 800226e:	1d3a      	adds	r2, r7, #4
 8002270:	2303      	movs	r3, #3
 8002272:	2105      	movs	r1, #5
 8002274:	2000      	movs	r0, #0
 8002276:	f001 ffeb 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "rms right: %lu", rms_results[1]);
 800227a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800227e:	1d38      	adds	r0, r7, #4
 8002280:	4a97      	ldr	r2, [pc, #604]	@ (80024e0 <show_data_menu_zero+0x374>)
 8002282:	2132      	movs	r1, #50	@ 0x32
 8002284:	f008 fd78 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 8002288:	1d3a      	adds	r2, r7, #4
 800228a:	2303      	movs	r3, #3
 800228c:	2114      	movs	r1, #20
 800228e:	2000      	movs	r0, #0
 8002290:	f001 ffde 	bl	8004250 <BSP_LCD_DisplayStringAt>

    //Display distance
    snprintf(text, 50, "dist right: %.1f cm", cable_distances[0]);
 8002294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f966 	bl	8000568 <__aeabi_f2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	1d38      	adds	r0, r7, #4
 80022a2:	e9cd 2300 	strd	r2, r3, [sp]
 80022a6:	4a8f      	ldr	r2, [pc, #572]	@ (80024e4 <show_data_menu_zero+0x378>)
 80022a8:	2132      	movs	r1, #50	@ 0x32
 80022aa:	f008 fd65 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)text, LEFT_MODE);
 80022ae:	1d3a      	adds	r2, r7, #4
 80022b0:	2303      	movs	r3, #3
 80022b2:	2123      	movs	r1, #35	@ 0x23
 80022b4:	2000      	movs	r0, #0
 80022b6:	f001 ffcb 	bl	8004250 <BSP_LCD_DisplayStringAt>
    snprintf(text, 50, "dist left: %.1f cm", cable_distances[1]);
 80022ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f953 	bl	8000568 <__aeabi_f2d>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	1d38      	adds	r0, r7, #4
 80022c8:	e9cd 2300 	strd	r2, r3, [sp]
 80022cc:	4a86      	ldr	r2, [pc, #536]	@ (80024e8 <show_data_menu_zero+0x37c>)
 80022ce:	2132      	movs	r1, #50	@ 0x32
 80022d0:	f008 fd52 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 80022d4:	1d3a      	adds	r2, r7, #4
 80022d6:	2303      	movs	r3, #3
 80022d8:	2132      	movs	r1, #50	@ 0x32
 80022da:	2000      	movs	r0, #0
 80022dc:	f001 ffb8 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display the angle
    snprintf(msg, 50, "Angle: %.1f deg", angle_to_wire);
 80022e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80022e4:	f7fe f940 	bl	8000568 <__aeabi_f2d>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80022f0:	e9cd 2300 	strd	r2, r3, [sp]
 80022f4:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <show_data_menu_zero+0x380>)
 80022f6:	2132      	movs	r1, #50	@ 0x32
 80022f8:	f008 fd3e 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 65, (uint8_t *)msg, LEFT_MODE);
 80022fc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002300:	2303      	movs	r3, #3
 8002302:	2141      	movs	r1, #65	@ 0x41
 8002304:	2000      	movs	r0, #0
 8002306:	f001 ffa3 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display left RMS
    snprintf(text, 50, "mean left: %lu", mean_results[0]);
 800230a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800230c:	1d38      	adds	r0, r7, #4
 800230e:	4a78      	ldr	r2, [pc, #480]	@ (80024f0 <show_data_menu_zero+0x384>)
 8002310:	2132      	movs	r1, #50	@ 0x32
 8002312:	f008 fd31 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 135, (uint8_t *)text, LEFT_MODE);
 8002316:	1d3a      	adds	r2, r7, #4
 8002318:	2303      	movs	r3, #3
 800231a:	2187      	movs	r1, #135	@ 0x87
 800231c:	2000      	movs	r0, #0
 800231e:	f001 ff97 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "mean right: %lu", mean_results[1]);
 8002322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002324:	1d38      	adds	r0, r7, #4
 8002326:	4a73      	ldr	r2, [pc, #460]	@ (80024f4 <show_data_menu_zero+0x388>)
 8002328:	2132      	movs	r1, #50	@ 0x32
 800232a:	f008 fd25 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, LEFT_MODE);
 800232e:	1d3a      	adds	r2, r7, #4
 8002330:	2303      	movs	r3, #3
 8002332:	2196      	movs	r1, #150	@ 0x96
 8002334:	2000      	movs	r0, #0
 8002336:	f001 ff8b 	bl	8004250 <BSP_LCD_DisplayStringAt>

	// Draw the  values of input channel 1 as a curve
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800233a:	486f      	ldr	r0, [pc, #444]	@ (80024f8 <show_data_menu_zero+0x38c>)
 800233c:	f001 fed0 	bl	80040e0 <BSP_LCD_SetTextColor>

	data = ADC_samples[MEAS_input_count*0] / f;
 8002340:	4b6e      	ldr	r3, [pc, #440]	@ (80024fc <show_data_menu_zero+0x390>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002350:	2301      	movs	r3, #1
 8002352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002356:	e03f      	b.n	80023d8 <show_data_menu_zero+0x26c>
		data_last = data;
 8002358:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8002360:	4b67      	ldr	r3, [pc, #412]	@ (8002500 <show_data_menu_zero+0x394>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	4a63      	ldr	r2, [pc, #396]	@ (80024fc <show_data_menu_zero+0x390>)
 800236e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 800237e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002386:	429a      	cmp	r2, r3
 8002388:	d903      	bls.n	8002392 <show_data_menu_zero+0x226>
 800238a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8002392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002396:	3b01      	subs	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	b298      	uxth	r0, r3
 800239e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b299      	uxth	r1, r3
 80023ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	b29c      	uxth	r4, r3
 80023b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4622      	mov	r2, r4
 80023ca:	f001 ffff 	bl	80043cc <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80023ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023d2:	3301      	adds	r3, #1
 80023d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80023de:	d9bb      	bls.n	8002358 <show_data_menu_zero+0x1ec>
	}
	// Draw the  values of input channel 2 (if present) as a curve
	if (MEAS_input_count == 2) {
 80023e0:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <show_data_menu_zero+0x394>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d153      	bne.n	8002490 <show_data_menu_zero+0x324>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023e8:	4846      	ldr	r0, [pc, #280]	@ (8002504 <show_data_menu_zero+0x398>)
 80023ea:	f001 fe79 	bl	80040e0 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 80023ee:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <show_data_menu_zero+0x390>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80023fe:	2301      	movs	r3, #1
 8002400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002404:	e040      	b.n	8002488 <show_data_menu_zero+0x31c>
			data_last = data;
 8002406:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800240a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 800240e:	4b3c      	ldr	r3, [pc, #240]	@ (8002500 <show_data_menu_zero+0x394>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	3301      	adds	r3, #1
 800241c:	4a37      	ldr	r2, [pc, #220]	@ (80024fc <show_data_menu_zero+0x390>)
 800241e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 800242e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002432:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002436:	429a      	cmp	r2, r3
 8002438:	d903      	bls.n	8002442 <show_data_menu_zero+0x2d6>
 800243a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8002442:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002446:	3b01      	subs	r3, #1
 8002448:	b29b      	uxth	r3, r3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	b298      	uxth	r0, r3
 800244e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002452:	b29a      	uxth	r2, r3
 8002454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002458:	b29b      	uxth	r3, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	b299      	uxth	r1, r3
 800245e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002462:	b29b      	uxth	r3, r3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	b29c      	uxth	r4, r3
 8002468:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800246c:	b29a      	uxth	r2, r3
 800246e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002472:	b29b      	uxth	r3, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b29b      	uxth	r3, r3
 8002478:	4622      	mov	r2, r4
 800247a:	f001 ffa7 	bl	80043cc <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 800247e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002482:	3301      	adds	r3, #1
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800248c:	2b3b      	cmp	r3, #59	@ 0x3b
 800248e:	d9ba      	bls.n	8002406 <show_data_menu_zero+0x29a>
		}
	}

	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002496:	e013      	b.n	80024c0 <show_data_menu_zero+0x354>
		ADC_samples[2*i] = 0;
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <show_data_menu_zero+0x390>)
 80024a0:	2100      	movs	r1, #0
 80024a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 80024a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a13      	ldr	r2, [pc, #76]	@ (80024fc <show_data_menu_zero+0x390>)
 80024b0:	2100      	movs	r1, #0
 80024b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80024b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80024c6:	d9e7      	bls.n	8002498 <show_data_menu_zero+0x32c>
	}
	ADC_sample_count = 0;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <show_data_menu_zero+0x39c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	37ac      	adds	r7, #172	@ 0xac
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200000e4 	.word	0x200000e4
 80024dc:	0800ecdc 	.word	0x0800ecdc
 80024e0:	0800ecec 	.word	0x0800ecec
 80024e4:	0800ecfc 	.word	0x0800ecfc
 80024e8:	0800ed10 	.word	0x0800ed10
 80024ec:	0800ed24 	.word	0x0800ed24
 80024f0:	0800ed34 	.word	0x0800ed34
 80024f4:	0800ed44 	.word	0x0800ed44
 80024f8:	ff0000ff 	.word	0xff0000ff
 80024fc:	20000394 	.word	0x20000394
 8002500:	20000004 	.word	0x20000004
 8002504:	ffff0000 	.word	0xffff0000
 8002508:	20000390 	.word	0x20000390

0800250c <show_data_menu_one>:
 * - Ensure that all drawing operations remain within the display boundaries
 *   to prevent system crashes.
 *
 ******************************************************************************
 */
void show_data_menu_one(void) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b09f      	sub	sp, #124	@ 0x7c
 8002510:	af02      	add	r7, sp, #8
	const uint32_t Y_OFFSET = 220;
 8002512:	23dc      	movs	r3, #220	@ 0xdc
 8002514:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const uint32_t X_SIZE = 240;
 8002516:	23f0      	movs	r3, #240	@ 0xf0
 8002518:	65bb      	str	r3, [r7, #88]	@ 0x58
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 800251a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	3301      	adds	r3, #1
 8002526:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t rms_results[2];
    uint32_t mean_results[2];
    float cable_current[2];
    float cable_current_avg;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f001 fdd8 	bl	80040e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8002530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002532:	b29a      	uxth	r2, r3
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	b29b      	uxth	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	b29b      	uxth	r3, r3
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f002 f80e 	bl	8004560 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8002544:	489b      	ldr	r0, [pc, #620]	@ (80027b4 <show_data_menu_one+0x2a8>)
 8002546:	f001 fdfd 	bl	8004144 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f001 fddf 	bl	8004110 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002552:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002556:	f001 fdc3 	bl	80040e0 <BSP_LCD_SetTextColor>
	char text[50];

    rms(rms_results);
 800255a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fdb4 	bl	80010cc <rms>
    mean_results[0] = calculate_moving_mean(rms_results[0], 0); // Left channel
 8002564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256e:	2000      	movs	r0, #0
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f7fe fd46 	bl	8001004 <calculate_moving_mean>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c
    mean_results[1] = calculate_moving_mean(rms_results[1], 1); // Right channel
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002590:	2001      	movs	r0, #1
 8002592:	eeb0 0a67 	vmov.f32	s0, s15
 8002596:	f7fe fd35 	bl	8001004 <calculate_moving_mean>
 800259a:	eef0 7a40 	vmov.f32	s15, s0
 800259e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a2:	ee17 3a90 	vmov	r3, s15
 80025a6:	643b      	str	r3, [r7, #64]	@ 0x40
    cable_current[0] = calculate_current(mean_results[0]);
 80025a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	f7fe fdf1 	bl	800119c <calculate_current>
 80025ba:	eef0 7a40 	vmov.f32	s15, s0
 80025be:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    cable_current[1] = calculate_current(mean_results[1]);
 80025c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	f7fe fde4 	bl	800119c <calculate_current>
 80025d4:	eef0 7a40 	vmov.f32	s15, s0
 80025d8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    cable_current_avg = (cable_current[0] + cable_current[1])/2;
 80025dc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80025e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80025ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    // Display left RMS
    snprintf(text, 50, "rms left: %lu", rms_results[0]);
 80025f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f6:	4638      	mov	r0, r7
 80025f8:	4a6f      	ldr	r2, [pc, #444]	@ (80027b8 <show_data_menu_one+0x2ac>)
 80025fa:	2132      	movs	r1, #50	@ 0x32
 80025fc:	f008 fbbc 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)text, LEFT_MODE);
 8002600:	463a      	mov	r2, r7
 8002602:	2303      	movs	r3, #3
 8002604:	2105      	movs	r1, #5
 8002606:	2000      	movs	r0, #0
 8002608:	f001 fe22 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "rms right: %lu", rms_results[1]);
 800260c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800260e:	4638      	mov	r0, r7
 8002610:	4a6a      	ldr	r2, [pc, #424]	@ (80027bc <show_data_menu_one+0x2b0>)
 8002612:	2132      	movs	r1, #50	@ 0x32
 8002614:	f008 fbb0 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 8002618:	463a      	mov	r2, r7
 800261a:	2303      	movs	r3, #3
 800261c:	2114      	movs	r1, #20
 800261e:	2000      	movs	r0, #0
 8002620:	f001 fe16 	bl	8004250 <BSP_LCD_DisplayStringAt>

    snprintf(text, 50, "Meas current: %.1f A", cable_current_avg);
 8002624:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002626:	f7fd ff9f 	bl	8000568 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4638      	mov	r0, r7
 8002630:	e9cd 2300 	strd	r2, r3, [sp]
 8002634:	4a62      	ldr	r2, [pc, #392]	@ (80027c0 <show_data_menu_one+0x2b4>)
 8002636:	2132      	movs	r1, #50	@ 0x32
 8002638:	f008 fb9e 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)text, LEFT_MODE);
 800263c:	463a      	mov	r2, r7
 800263e:	2303      	movs	r3, #3
 8002640:	2123      	movs	r1, #35	@ 0x23
 8002642:	2000      	movs	r0, #0
 8002644:	f001 fe04 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display left RMS
    snprintf(text, 50, "mean left: %lu", mean_results[0]);
 8002648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264a:	4638      	mov	r0, r7
 800264c:	4a5d      	ldr	r2, [pc, #372]	@ (80027c4 <show_data_menu_one+0x2b8>)
 800264e:	2132      	movs	r1, #50	@ 0x32
 8002650:	f008 fb92 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 135, (uint8_t *)text, LEFT_MODE);
 8002654:	463a      	mov	r2, r7
 8002656:	2303      	movs	r3, #3
 8002658:	2187      	movs	r1, #135	@ 0x87
 800265a:	2000      	movs	r0, #0
 800265c:	f001 fdf8 	bl	8004250 <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "mean right: %lu", mean_results[1]);
 8002660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002662:	4638      	mov	r0, r7
 8002664:	4a58      	ldr	r2, [pc, #352]	@ (80027c8 <show_data_menu_one+0x2bc>)
 8002666:	2132      	movs	r1, #50	@ 0x32
 8002668:	f008 fb86 	bl	800ad78 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, LEFT_MODE);
 800266c:	463a      	mov	r2, r7
 800266e:	2303      	movs	r3, #3
 8002670:	2196      	movs	r1, #150	@ 0x96
 8002672:	2000      	movs	r0, #0
 8002674:	f001 fdec 	bl	8004250 <BSP_LCD_DisplayStringAt>

	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002678:	4854      	ldr	r0, [pc, #336]	@ (80027cc <show_data_menu_one+0x2c0>)
 800267a:	f001 fd31 	bl	80040e0 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 800267e:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <show_data_menu_one+0x2c4>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	66fb      	str	r3, [r7, #108]	@ 0x6c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800268a:	2301      	movs	r3, #1
 800268c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800268e:	e02e      	b.n	80026ee <show_data_menu_one+0x1e2>
		data_last = data;
 8002690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002692:	64fb      	str	r3, [r7, #76]	@ 0x4c
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8002694:	4b4f      	ldr	r3, [pc, #316]	@ (80027d4 <show_data_menu_one+0x2c8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a4c      	ldr	r2, [pc, #304]	@ (80027d0 <show_data_menu_one+0x2c4>)
 80026a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 80026ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d901      	bls.n	80026b8 <show_data_menu_one+0x1ac>
 80026b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 80026b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29b      	uxth	r3, r3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	b298      	uxth	r0, r3
 80026c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b299      	uxth	r1, r3
 80026ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	b29c      	uxth	r4, r3
 80026d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026dc:	b29b      	uxth	r3, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4622      	mov	r2, r4
 80026e4:	f001 fe72 	bl	80043cc <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80026e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ea:	3301      	adds	r3, #1
 80026ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80026f2:	d9cd      	bls.n	8002690 <show_data_menu_one+0x184>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 80026f4:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <show_data_menu_one+0x2c8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d13e      	bne.n	800277a <show_data_menu_one+0x26e>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80026fc:	4836      	ldr	r0, [pc, #216]	@ (80027d8 <show_data_menu_one+0x2cc>)
 80026fe:	f001 fcef 	bl	80040e0 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8002702:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <show_data_menu_one+0x2c4>)
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 800270e:	2301      	movs	r3, #1
 8002710:	667b      	str	r3, [r7, #100]	@ 0x64
 8002712:	e02f      	b.n	8002774 <show_data_menu_one+0x268>
			data_last = data;
 8002714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <show_data_menu_one+0x2c8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	3301      	adds	r3, #1
 8002724:	4a2a      	ldr	r2, [pc, #168]	@ (80027d0 <show_data_menu_one+0x2c4>)
 8002726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800272a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8002732:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002736:	429a      	cmp	r2, r3
 8002738:	d901      	bls.n	800273e <show_data_menu_one+0x232>
 800273a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800273c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800273e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002740:	3b01      	subs	r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	b298      	uxth	r0, r3
 8002748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800274a:	b29a      	uxth	r2, r3
 800274c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800274e:	b29b      	uxth	r3, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b299      	uxth	r1, r3
 8002754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002756:	b29b      	uxth	r3, r3
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	b29c      	uxth	r4, r3
 800275c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275e:	b29a      	uxth	r2, r3
 8002760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002762:	b29b      	uxth	r3, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	4622      	mov	r2, r4
 800276a:	f001 fe2f 	bl	80043cc <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 800276e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002770:	3301      	adds	r3, #1
 8002772:	667b      	str	r3, [r7, #100]	@ 0x64
 8002774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002776:	2b3b      	cmp	r3, #59	@ 0x3b
 8002778:	d9cc      	bls.n	8002714 <show_data_menu_one+0x208>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 800277a:	2300      	movs	r3, #0
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
 800277e:	e00f      	b.n	80027a0 <show_data_menu_one+0x294>
		ADC_samples[2*i] = 0;
 8002780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <show_data_menu_one+0x2c4>)
 8002786:	2100      	movs	r1, #0
 8002788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 800278c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	3301      	adds	r3, #1
 8002792:	4a0f      	ldr	r2, [pc, #60]	@ (80027d0 <show_data_menu_one+0x2c4>)
 8002794:	2100      	movs	r1, #0
 8002796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 800279a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800279c:	3301      	adds	r3, #1
 800279e:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80027a4:	d9ec      	bls.n	8002780 <show_data_menu_one+0x274>
	}
	ADC_sample_count = 0;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <show_data_menu_one+0x2d0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3774      	adds	r7, #116	@ 0x74
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	200000e4 	.word	0x200000e4
 80027b8:	0800ecdc 	.word	0x0800ecdc
 80027bc:	0800ecec 	.word	0x0800ecec
 80027c0:	0800ed54 	.word	0x0800ed54
 80027c4:	0800ed34 	.word	0x0800ed34
 80027c8:	0800ed44 	.word	0x0800ed44
 80027cc:	ff0000ff 	.word	0xff0000ff
 80027d0:	20000394 	.word	0x20000394
 80027d4:	20000004 	.word	0x20000004
 80027d8:	ffff0000 	.word	0xffff0000
 80027dc:	20000390 	.word	0x20000390

080027e0 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 80027e6:	4851      	ldr	r0, [pc, #324]	@ (800292c <MENU_draw+0x14c>)
 80027e8:	f001 fcac 	bl	8004144 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 80027ec:	f001 fbf8 	bl	8003fe0 <BSP_LCD_GetYSize>
 80027f0:	4603      	mov	r3, r0
 80027f2:	3b5a      	subs	r3, #90	@ 0x5a
 80027f4:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 80027f6:	2302      	movs	r3, #2
 80027f8:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 80027fa:	f001 fbe5 	bl	8003fc8 <BSP_LCD_GetXSize>
 80027fe:	4603      	mov	r3, r0
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8002804:	235a      	movs	r3, #90	@ 0x5a
 8002806:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e084      	b.n	8002918 <MENU_draw+0x138>
		x = i*w;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8002818:	4945      	ldr	r1, [pc, #276]	@ (8002930 <MENU_draw+0x150>)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3324      	adds	r3, #36	@ 0x24
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fc58 	bl	80040e0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b298      	uxth	r0, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b299      	uxth	r1, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	b29b      	uxth	r3, r3
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	b29b      	uxth	r3, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	b29c      	uxth	r4, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	b29b      	uxth	r3, r3
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b29b      	uxth	r3, r3
 8002868:	4622      	mov	r2, r4
 800286a:	f001 fe79 	bl	8004560 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 800286e:	4930      	ldr	r1, [pc, #192]	@ (8002930 <MENU_draw+0x150>)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	3324      	adds	r3, #36	@ 0x24
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fc45 	bl	8004110 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8002886:	492a      	ldr	r1, [pc, #168]	@ (8002930 <MENU_draw+0x150>)
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	3320      	adds	r3, #32
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f001 fc21 	bl	80040e0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	b298      	uxth	r0, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <MENU_draw+0x150>)
 80028d2:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80028d4:	2303      	movs	r3, #3
 80028d6:	f001 fcbb 	bl	8004250 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	0052      	lsls	r2, r2, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	b298      	uxth	r0, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	3310      	adds	r3, #16
 8002908:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <MENU_draw+0x150>)
 800290a:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 800290c:	2303      	movs	r3, #3
 800290e:	f001 fc9f 	bl	8004250 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f67f af77 	bls.w	800280e <MENU_draw+0x2e>
	}
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	200000dc 	.word	0x200000dc
 8002930:	2000000c 	.word	0x2000000c

08002934 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f001 fbe8 	bl	8004110 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002940:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002944:	f001 fbcc 	bl	80040e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002948:	4818      	ldr	r0, [pc, #96]	@ (80029ac <MENU_hint+0x78>)
 800294a:	f001 fbfb 	bl	8004144 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable-Monitor", LEFT_MODE);
 800294e:	2303      	movs	r3, #3
 8002950:	4a17      	ldr	r2, [pc, #92]	@ (80029b0 <MENU_hint+0x7c>)
 8002952:	210a      	movs	r1, #10
 8002954:	2005      	movs	r0, #5
 8002956:	f001 fc7b 	bl	8004250 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 800295a:	4816      	ldr	r0, [pc, #88]	@ (80029b4 <MENU_hint+0x80>)
 800295c:	f001 fbf2 	bl	8004144 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item to", LEFT_MODE);
 8002960:	2303      	movs	r3, #3
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <MENU_hint+0x84>)
 8002964:	213c      	movs	r1, #60	@ 0x3c
 8002966:	2005      	movs	r0, #5
 8002968:	f001 fc72 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"start cable monitor", LEFT_MODE);
 800296c:	2303      	movs	r3, #3
 800296e:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <MENU_hint+0x88>)
 8002970:	2150      	movs	r1, #80	@ 0x50
 8002972:	2005      	movs	r0, #5
 8002974:	f001 fc6c 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 8002978:	2303      	movs	r3, #3
 800297a:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <MENU_hint+0x8c>)
 800297c:	216e      	movs	r1, #110	@ 0x6e
 800297e:	2005      	movs	r0, #5
 8002980:	f001 fc66 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8002984:	2303      	movs	r3, #3
 8002986:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <MENU_hint+0x90>)
 8002988:	2182      	movs	r1, #130	@ 0x82
 800298a:	2005      	movs	r0, #5
 800298c:	f001 fc60 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c)roggeluc, linortho", LEFT_MODE);
 8002990:	2303      	movs	r3, #3
 8002992:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <MENU_hint+0x94>)
 8002994:	21a0      	movs	r1, #160	@ 0xa0
 8002996:	2005      	movs	r0, #5
 8002998:	f001 fc5a 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 180, (uint8_t *)"Version 01.12.2024", LEFT_MODE);
 800299c:	2303      	movs	r3, #3
 800299e:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <MENU_hint+0x98>)
 80029a0:	21b4      	movs	r1, #180	@ 0xb4
 80029a2:	2005      	movs	r0, #5
 80029a4:	f001 fc54 	bl	8004250 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
*/

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200000d4 	.word	0x200000d4
 80029b0:	0800ed6c 	.word	0x0800ed6c
 80029b4:	200000e4 	.word	0x200000e4
 80029b8:	0800ed7c 	.word	0x0800ed7c
 80029bc:	0800ed94 	.word	0x0800ed94
 80029c0:	0800eda8 	.word	0x0800eda8
 80029c4:	0800edbc 	.word	0x0800edbc
 80029c8:	0800edd4 	.word	0x0800edd4
 80029cc:	0800edec 	.word	0x0800edec

080029d0 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <MENU_get_transition+0x14>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008

080029e8 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 80029e8:	b598      	push	{r3, r4, r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 80029ec:	4834      	ldr	r0, [pc, #208]	@ (8002ac0 <MENU_check_transition+0xd8>)
 80029ee:	f002 fa6d 	bl	8004ecc <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80029f2:	f001 faf5 	bl	8003fe0 <BSP_LCD_GetYSize>
 80029f6:	4603      	mov	r3, r0
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b31      	ldr	r3, [pc, #196]	@ (8002ac0 <MENU_check_transition+0xd8>)
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <MENU_check_transition+0xd8>)
 8002a04:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002a06:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <MENU_check_transition+0xd8>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d047      	beq.n	8002a9e <MENU_check_transition+0xb6>
		current_time = 0;
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac4 <MENU_check_transition+0xdc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
		sprintf(msg, "Touch detected\r\n");
 8002a14:	492c      	ldr	r1, [pc, #176]	@ (8002ac8 <MENU_check_transition+0xe0>)
 8002a16:	482d      	ldr	r0, [pc, #180]	@ (8002acc <MENU_check_transition+0xe4>)
 8002a18:	f008 f9e2 	bl	800ade0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002a1c:	482b      	ldr	r0, [pc, #172]	@ (8002acc <MENU_check_transition+0xe4>)
 8002a1e:	f7fd fc37 	bl	8000290 <strlen>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	4928      	ldr	r1, [pc, #160]	@ (8002acc <MENU_check_transition+0xe4>)
 8002a2c:	4828      	ldr	r0, [pc, #160]	@ (8002ad0 <MENU_check_transition+0xe8>)
 8002a2e:	f006 fb82 	bl	8009136 <HAL_UART_Transmit>
					MENU_transition = item_old;
				}
			}
		}*/

        item_old = item_new;           // Update old item
 8002a32:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <MENU_check_transition+0xf0>)
 8002a38:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8002a3a:	f001 fad1 	bl	8003fe0 <BSP_LCD_GetYSize>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	3b5a      	subs	r3, #90	@ 0x5a
 8002a42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <MENU_check_transition+0xd8>)
 8002a44:	8892      	ldrh	r2, [r2, #4]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d238      	bcs.n	8002abc <MENU_check_transition+0xd4>
 8002a4a:	f001 fac9 	bl	8003fe0 <BSP_LCD_GetYSize>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <MENU_check_transition+0xd8>)
 8002a52:	8892      	ldrh	r2, [r2, #4]
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d931      	bls.n	8002abc <MENU_check_transition+0xd4>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <MENU_check_transition+0xd8>)
 8002a5a:	885b      	ldrh	r3, [r3, #2]
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	f001 fab3 	bl	8003fc8 <BSP_LCD_GetXSize>
 8002a62:	4603      	mov	r3, r0
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a6e:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d902      	bls.n	8002a7e <MENU_check_transition+0x96>
                item_new = MENU_NONE;  // Out of bounds
 8002a78:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MENU_check_transition+0xf0>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d104      	bne.n	8002a94 <MENU_check_transition+0xac>
                MENU_transition = item_old;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <MENU_check_transition+0xf0>)
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MENU_check_transition+0xf4>)
 8002a90:	701a      	strb	r2, [r3, #0]
	} else {
		sprintf(msg, "No touch detected\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 8002a92:	e013      	b.n	8002abc <MENU_check_transition+0xd4>
                MENU_transition = item_new;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MENU_check_transition+0xec>)
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <MENU_check_transition+0xf4>)
 8002a9a:	701a      	strb	r2, [r3, #0]
}
 8002a9c:	e00e      	b.n	8002abc <MENU_check_transition+0xd4>
		sprintf(msg, "No touch detected\r\n");
 8002a9e:	4910      	ldr	r1, [pc, #64]	@ (8002ae0 <MENU_check_transition+0xf8>)
 8002aa0:	480a      	ldr	r0, [pc, #40]	@ (8002acc <MENU_check_transition+0xe4>)
 8002aa2:	f008 f99d 	bl	800ade0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002aa6:	4809      	ldr	r0, [pc, #36]	@ (8002acc <MENU_check_transition+0xe4>)
 8002aa8:	f7fd fbf2 	bl	8000290 <strlen>
 8002aac:	4603      	mov	r3, r0
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	4905      	ldr	r1, [pc, #20]	@ (8002acc <MENU_check_transition+0xe4>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	@ (8002ad0 <MENU_check_transition+0xe8>)
 8002ab8:	f006 fb3d 	bl	8009136 <HAL_UART_Transmit>
}
 8002abc:	bf00      	nop
 8002abe:	bd98      	pop	{r3, r4, r7, pc}
 8002ac0:	200005ac 	.word	0x200005ac
 8002ac4:	20000348 	.word	0x20000348
 8002ac8:	0800ee00 	.word	0x0800ee00
 8002acc:	20000578 	.word	0x20000578
 8002ad0:	2000034c 	.word	0x2000034c
 8002ad4:	2000005c 	.word	0x2000005c
 8002ad8:	2000005d 	.word	0x2000005d
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	0800ee14 	.word	0x0800ee14

08002ae4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <EXTI15_10_IRQHandler+0x40>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <EXTI15_10_IRQHandler+0x40>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <EXTI15_10_IRQHandler+0x40>)
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002afe:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002b00:	f002 f9d8 	bl	8004eb4 <BSP_TS_ITGetStatus>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8002b0a:	f002 fa91 	bl	8005030 <BSP_TS_ITClear>
			MENU_check_transition();
 8002b0e:	f7ff ff6b 	bl	80029e8 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002b12:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <EXTI15_10_IRQHandler+0x40>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4a03      	ldr	r2, [pc, #12]	@ (8002b24 <EXTI15_10_IRQHandler+0x40>)
 8002b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1c:	6153      	str	r3, [r2, #20]
	}
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <__NVIC_EnableIRQ>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	@ (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_ClearPendingIRQ>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0c      	blt.n	8002b90 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <__NVIC_ClearPendingIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	3360      	adds	r3, #96	@ 0x60
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <PB_init+0x38>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <PB_init+0x38>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <PB_init+0x38>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <PB_init+0x3c>)
 8002bc4:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <PB_init+0x3c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6013      	str	r3, [r2, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000

08002be0 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <PB_enableIRQ+0x58>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <PB_enableIRQ+0x58>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <PB_enableIRQ+0x58>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <PB_enableIRQ+0x5c>)
 8002c04:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <PB_enableIRQ+0x5c>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <PB_enableIRQ+0x60>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c40 <PB_enableIRQ+0x60>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <PB_enableIRQ+0x60>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <PB_enableIRQ+0x60>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002c22:	2006      	movs	r0, #6
 8002c24:	f7ff ff9e 	bl	8002b64 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002c28:	2006      	movs	r0, #6
 8002c2a:	f7ff ff7d 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <PB_pressed+0x20>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002c50:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <PB_pressed+0x20>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002c56:	79fb      	ldrb	r3, [r7, #7]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	200005b4 	.word	0x200005b4

08002c68 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <EXTI0_IRQHandler+0x2c>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <EXTI0_IRQHandler+0x2c>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <EXTI0_IRQHandler+0x2c>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <EXTI0_IRQHandler+0x30>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
	}
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40013c00 	.word	0x40013c00
 8002c98:	200005b4 	.word	0x200005b4

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_MspInit+0x4c>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <HAL_UART_MspInit+0x94>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d134      	bne.n	8002d78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a1b      	ldr	r2, [pc, #108]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a14      	ldr	r2, [pc, #80]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_UART_MspInit+0x98>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4809      	ldr	r0, [pc, #36]	@ (8002d88 <HAL_UART_MspInit+0x9c>)
 8002d64:	f002 ff6c 	bl	8005c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2025      	movs	r0, #37	@ 0x25
 8002d6e:	f002 fadc 	bl	800532a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d72:	2025      	movs	r0, #37	@ 0x25
 8002d74:	f002 faf5 	bl	8005362 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d78:	bf00      	nop
 8002d7a:	3728      	adds	r7, #40	@ 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002d9e:	bf00      	nop
 8002da0:	e7fd      	b.n	8002d9e <HardFault_Handler+0x4>

08002da2 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <MemManage_Handler+0x4>

08002daa <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <BusFault_Handler+0x4>

08002db2 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002de8:	f002 f980 	bl	80050ec <HAL_IncTick>
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df4:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <SystemInit+0x60>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	4a15      	ldr	r2, [pc, #84]	@ (8002e50 <SystemInit+0x60>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <SystemInit+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <SystemInit+0x64>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e10:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <SystemInit+0x64>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <SystemInit+0x64>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e54 <SystemInit+0x64>)
 8002e1c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <SystemInit+0x64>)
 8002e28:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <SystemInit+0x68>)
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <SystemInit+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a08      	ldr	r2, [pc, #32]	@ (8002e54 <SystemInit+0x64>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <SystemInit+0x64>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <SystemInit+0x60>)
 8002e40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e44:	609a      	str	r2, [r3, #8]
#endif
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	24003010 	.word	0x24003010

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e94 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e62:	e003      	b.n	8002e6c <LoopCopyDataInit>

08002e64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e6a:	3104      	adds	r1, #4

08002e6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e6c:	480b      	ldr	r0, [pc, #44]	@ (8002e9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e74:	d3f6      	bcc.n	8002e64 <CopyDataInit>
  ldr  r2, =_sbss
 8002e76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e78:	e002      	b.n	8002e80 <LoopFillZerobss>

08002e7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e7c:	f842 3b04 	str.w	r3, [r2], #4

08002e80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e84:	d3f9      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e86:	f7ff ffb3 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f008 f85f 	bl	800af4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7fe fa81 	bl	8001394 <main>
  bx  lr    
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002e98:	08012838 	.word	0x08012838
  ldr  r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ea0:	200002d0 	.word	0x200002d0
  ldr  r2, =_sbss
 8002ea4:	200002d0 	.word	0x200002d0
  ldr  r3, = _ebss
 8002ea8:	200009cc 	.word	0x200009cc

08002eac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <CAN1_RX0_IRQHandler>

08002eae <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002eb2:	f000 fed3 	bl	8003c5c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002eb6:	20ca      	movs	r0, #202	@ 0xca
 8002eb8:	f000 f95d 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002ebc:	20c3      	movs	r0, #195	@ 0xc3
 8002ebe:	f000 f967 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002ec2:	2008      	movs	r0, #8
 8002ec4:	f000 f964 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002ec8:	2050      	movs	r0, #80	@ 0x50
 8002eca:	f000 f961 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002ece:	20cf      	movs	r0, #207	@ 0xcf
 8002ed0:	f000 f951 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f000 f95b 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002eda:	20c1      	movs	r0, #193	@ 0xc1
 8002edc:	f000 f958 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002ee0:	2030      	movs	r0, #48	@ 0x30
 8002ee2:	f000 f955 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002ee6:	20ed      	movs	r0, #237	@ 0xed
 8002ee8:	f000 f945 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002eec:	2064      	movs	r0, #100	@ 0x64
 8002eee:	f000 f94f 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f000 f94c 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002ef8:	2012      	movs	r0, #18
 8002efa:	f000 f949 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002efe:	2081      	movs	r0, #129	@ 0x81
 8002f00:	f000 f946 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002f04:	20e8      	movs	r0, #232	@ 0xe8
 8002f06:	f000 f936 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002f0a:	2085      	movs	r0, #133	@ 0x85
 8002f0c:	f000 f940 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 f93d 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002f16:	2078      	movs	r0, #120	@ 0x78
 8002f18:	f000 f93a 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002f1c:	20cb      	movs	r0, #203	@ 0xcb
 8002f1e:	f000 f92a 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002f22:	2039      	movs	r0, #57	@ 0x39
 8002f24:	f000 f934 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002f28:	202c      	movs	r0, #44	@ 0x2c
 8002f2a:	f000 f931 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f92e 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002f34:	2034      	movs	r0, #52	@ 0x34
 8002f36:	f000 f92b 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002f3a:	2002      	movs	r0, #2
 8002f3c:	f000 f928 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002f40:	20f7      	movs	r0, #247	@ 0xf7
 8002f42:	f000 f918 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002f46:	2020      	movs	r0, #32
 8002f48:	f000 f922 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002f4c:	20ea      	movs	r0, #234	@ 0xea
 8002f4e:	f000 f912 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 f91c 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f000 f919 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002f5e:	20b1      	movs	r0, #177	@ 0xb1
 8002f60:	f000 f909 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f000 f913 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002f6a:	201b      	movs	r0, #27
 8002f6c:	f000 f910 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f70:	20b6      	movs	r0, #182	@ 0xb6
 8002f72:	f000 f900 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f76:	200a      	movs	r0, #10
 8002f78:	f000 f90a 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002f7c:	20a2      	movs	r0, #162	@ 0xa2
 8002f7e:	f000 f907 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002f82:	20c0      	movs	r0, #192	@ 0xc0
 8002f84:	f000 f8f7 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002f88:	2010      	movs	r0, #16
 8002f8a:	f000 f901 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002f8e:	20c1      	movs	r0, #193	@ 0xc1
 8002f90:	f000 f8f1 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002f94:	2010      	movs	r0, #16
 8002f96:	f000 f8fb 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002f9a:	20c5      	movs	r0, #197	@ 0xc5
 8002f9c:	f000 f8eb 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002fa0:	2045      	movs	r0, #69	@ 0x45
 8002fa2:	f000 f8f5 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002fa6:	2015      	movs	r0, #21
 8002fa8:	f000 f8f2 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002fac:	20c7      	movs	r0, #199	@ 0xc7
 8002fae:	f000 f8e2 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002fb2:	2090      	movs	r0, #144	@ 0x90
 8002fb4:	f000 f8ec 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002fb8:	2036      	movs	r0, #54	@ 0x36
 8002fba:	f000 f8dc 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002fbe:	20c8      	movs	r0, #200	@ 0xc8
 8002fc0:	f000 f8e6 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002fc4:	20f2      	movs	r0, #242	@ 0xf2
 8002fc6:	f000 f8d6 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f000 f8e0 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002fd0:	20b0      	movs	r0, #176	@ 0xb0
 8002fd2:	f000 f8d0 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002fd6:	20c2      	movs	r0, #194	@ 0xc2
 8002fd8:	f000 f8da 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002fdc:	20b6      	movs	r0, #182	@ 0xb6
 8002fde:	f000 f8ca 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002fe2:	200a      	movs	r0, #10
 8002fe4:	f000 f8d4 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002fe8:	20a7      	movs	r0, #167	@ 0xa7
 8002fea:	f000 f8d1 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002fee:	2027      	movs	r0, #39	@ 0x27
 8002ff0:	f000 f8ce 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002ff4:	2004      	movs	r0, #4
 8002ff6:	f000 f8cb 	bl	8003190 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002ffa:	202a      	movs	r0, #42	@ 0x2a
 8002ffc:	f000 f8bb 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f000 f8c5 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f000 f8c2 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f000 f8bf 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003012:	20ef      	movs	r0, #239	@ 0xef
 8003014:	f000 f8bc 	bl	8003190 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003018:	202b      	movs	r0, #43	@ 0x2b
 800301a:	f000 f8ac 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800301e:	2000      	movs	r0, #0
 8003020:	f000 f8b6 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f000 f8b3 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 f8b0 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003030:	203f      	movs	r0, #63	@ 0x3f
 8003032:	f000 f8ad 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003036:	20f6      	movs	r0, #246	@ 0xf6
 8003038:	f000 f89d 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800303c:	2001      	movs	r0, #1
 800303e:	f000 f8a7 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003042:	2000      	movs	r0, #0
 8003044:	f000 f8a4 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003048:	2006      	movs	r0, #6
 800304a:	f000 f8a1 	bl	8003190 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800304e:	202c      	movs	r0, #44	@ 0x2c
 8003050:	f000 f891 	bl	8003176 <ili9341_WriteReg>
  LCD_Delay(200);
 8003054:	20c8      	movs	r0, #200	@ 0xc8
 8003056:	f000 feef 	bl	8003e38 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800305a:	2026      	movs	r0, #38	@ 0x26
 800305c:	f000 f88b 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003060:	2001      	movs	r0, #1
 8003062:	f000 f895 	bl	8003190 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003066:	20e0      	movs	r0, #224	@ 0xe0
 8003068:	f000 f885 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800306c:	200f      	movs	r0, #15
 800306e:	f000 f88f 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003072:	2029      	movs	r0, #41	@ 0x29
 8003074:	f000 f88c 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003078:	2024      	movs	r0, #36	@ 0x24
 800307a:	f000 f889 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800307e:	200c      	movs	r0, #12
 8003080:	f000 f886 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003084:	200e      	movs	r0, #14
 8003086:	f000 f883 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800308a:	2009      	movs	r0, #9
 800308c:	f000 f880 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003090:	204e      	movs	r0, #78	@ 0x4e
 8003092:	f000 f87d 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003096:	2078      	movs	r0, #120	@ 0x78
 8003098:	f000 f87a 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800309c:	203c      	movs	r0, #60	@ 0x3c
 800309e:	f000 f877 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80030a2:	2009      	movs	r0, #9
 80030a4:	f000 f874 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80030a8:	2013      	movs	r0, #19
 80030aa:	f000 f871 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80030ae:	2005      	movs	r0, #5
 80030b0:	f000 f86e 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80030b4:	2017      	movs	r0, #23
 80030b6:	f000 f86b 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80030ba:	2011      	movs	r0, #17
 80030bc:	f000 f868 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f000 f865 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80030c6:	20e1      	movs	r0, #225	@ 0xe1
 80030c8:	f000 f855 	bl	8003176 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 f85f 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80030d2:	2016      	movs	r0, #22
 80030d4:	f000 f85c 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80030d8:	201b      	movs	r0, #27
 80030da:	f000 f859 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80030de:	2004      	movs	r0, #4
 80030e0:	f000 f856 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80030e4:	2011      	movs	r0, #17
 80030e6:	f000 f853 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80030ea:	2007      	movs	r0, #7
 80030ec:	f000 f850 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80030f0:	2031      	movs	r0, #49	@ 0x31
 80030f2:	f000 f84d 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80030f6:	2033      	movs	r0, #51	@ 0x33
 80030f8:	f000 f84a 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80030fc:	2042      	movs	r0, #66	@ 0x42
 80030fe:	f000 f847 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003102:	2005      	movs	r0, #5
 8003104:	f000 f844 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003108:	200c      	movs	r0, #12
 800310a:	f000 f841 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800310e:	200a      	movs	r0, #10
 8003110:	f000 f83e 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003114:	2028      	movs	r0, #40	@ 0x28
 8003116:	f000 f83b 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800311a:	202f      	movs	r0, #47	@ 0x2f
 800311c:	f000 f838 	bl	8003190 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003120:	200f      	movs	r0, #15
 8003122:	f000 f835 	bl	8003190 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003126:	2011      	movs	r0, #17
 8003128:	f000 f825 	bl	8003176 <ili9341_WriteReg>
  LCD_Delay(200);
 800312c:	20c8      	movs	r0, #200	@ 0xc8
 800312e:	f000 fe83 	bl	8003e38 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003132:	2029      	movs	r0, #41	@ 0x29
 8003134:	f000 f81f 	bl	8003176 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003138:	202c      	movs	r0, #44	@ 0x2c
 800313a:	f000 f81c 	bl	8003176 <ili9341_WriteReg>
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}

08003142 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003146:	f000 fd89 	bl	8003c5c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800314a:	2103      	movs	r1, #3
 800314c:	20d3      	movs	r0, #211	@ 0xd3
 800314e:	f000 f82c 	bl	80031aa <ili9341_ReadData>
 8003152:	4603      	mov	r3, r0
 8003154:	b29b      	uxth	r3, r3
}
 8003156:	4618      	mov	r0, r3
 8003158:	bd80      	pop	{r7, pc}

0800315a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800315e:	2029      	movs	r0, #41	@ 0x29
 8003160:	f000 f809 	bl	8003176 <ili9341_WriteReg>
}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}

08003168 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800316c:	2028      	movs	r0, #40	@ 0x28
 800316e:	f000 f802 	bl	8003176 <ili9341_WriteReg>
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}

08003176 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fe04 	bl	8003d90 <LCD_IO_WriteReg>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fdd5 	bl	8003d4c <LCD_IO_WriteData>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	460a      	mov	r2, r1
 80031b4:	80fb      	strh	r3, [r7, #6]
 80031b6:	4613      	mov	r3, r2
 80031b8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80031ba:	797a      	ldrb	r2, [r7, #5]
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fe07 	bl	8003dd4 <LCD_IO_ReadData>
 80031c6:	4603      	mov	r3, r0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80031d4:	23f0      	movs	r3, #240	@ 0xf0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80031e4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa59 	bl	80036b8 <stmpe811_GetInstance>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2bff      	cmp	r3, #255	@ 0xff
 800320e:	d112      	bne.n	8003236 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8003210:	2000      	movs	r0, #0
 8003212:	f000 fa51 	bl	80036b8 <stmpe811_GetInstance>
 8003216:	4603      	mov	r3, r0
 8003218:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800321a:	7bbb      	ldrb	r3, [r7, #14]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d80a      	bhi.n	8003236 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8003220:	7bbb      	ldrb	r3, [r7, #14]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	b2d1      	uxtb	r1, r2
 8003226:	4a06      	ldr	r2, [pc, #24]	@ (8003240 <stmpe811_Init+0x4c>)
 8003228:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800322a:	f000 fe10 	bl	8003e4e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f807 	bl	8003244 <stmpe811_Reset>
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200005b8 	.word	0x200005b8

08003244 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2202      	movs	r2, #2
 8003254:	2103      	movs	r1, #3
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fe05 	bl	8003e66 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800325c:	200a      	movs	r0, #10
 800325e:	f000 fe3e 	bl	8003ede <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2200      	movs	r2, #0
 8003268:	2103      	movs	r1, #3
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fdfb 	bl	8003e66 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8003270:	2002      	movs	r0, #2
 8003272:	f000 fe34 	bl	8003ede <IOE_Delay>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800327e:	b590      	push	{r4, r7, lr}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003288:	f000 fde1 	bl	8003e4e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fdfa 	bl	8003e8c <IOE_Read>
 8003298:	4603      	mov	r3, r0
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fdf1 	bl	8003e8c <IOE_Read>
 80032aa:	4603      	mov	r3, r0
 80032ac:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80032ae:	4323      	orrs	r3, r4
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	b29b      	uxth	r3, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}

080032bc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2109      	movs	r1, #9
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fddb 	bl	8003e8c <IOE_Read>
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	2109      	movs	r1, #9
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fdbb 	bl	8003e66 <IOE_Write>
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2109      	movs	r1, #9
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fdbd 	bl	8003e8c <IOE_Read>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	2109      	movs	r1, #9
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fd9d 	bl	8003e66 <IOE_Write>
    
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	460a      	mov	r2, r1
 800333e:	80fb      	strh	r3, [r7, #6]
 8003340:	4613      	mov	r3, r2
 8003342:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	210a      	movs	r1, #10
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fd9c 	bl	8003e8c <IOE_Read>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	797b      	ldrb	r3, [r7, #5]
 800335c:	4313      	orrs	r3, r2
 800335e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	210a      	movs	r1, #10
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fd7c 	bl	8003e66 <IOE_Write>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	460a      	mov	r2, r1
 8003380:	80fb      	strh	r3, [r7, #6]
 8003382:	4613      	mov	r3, r2
 8003384:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	210a      	movs	r1, #10
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd7b 	bl	8003e8c <IOE_Read>
 8003396:	4603      	mov	r3, r0
 8003398:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800339a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800339e:	43db      	mvns	r3, r3
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	210a      	movs	r1, #10
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd56 	bl	8003e66 <IOE_Write>
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	460a      	mov	r2, r1
 80033cc:	80fb      	strh	r3, [r7, #6]
 80033ce:	4613      	mov	r3, r2
 80033d0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	210b      	movs	r1, #11
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fd57 	bl	8003e8c <IOE_Read>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	797b      	ldrb	r3, [r7, #5]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	460a      	mov	r2, r1
 80033fa:	80fb      	strh	r3, [r7, #6]
 80033fc:	4613      	mov	r3, r2
 80033fe:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	797a      	ldrb	r2, [r7, #5]
 8003406:	210b      	movs	r1, #11
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd2c 	bl	8003e66 <IOE_Write>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	6039      	str	r1, [r7, #0]
 8003420:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2117      	movs	r1, #23
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fd2d 	bl	8003e8c <IOE_Read>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b25b      	sxtb	r3, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	b25a      	sxtb	r2, r3
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	4013      	ands	r3, r2
 8003444:	b25b      	sxtb	r3, r3
 8003446:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	2117      	movs	r1, #23
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fd08 	bl	8003e66 <IOE_Write>
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2104      	movs	r1, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fd0c 	bl	8003e8c <IOE_Read>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	f023 0304 	bic.w	r3, r3, #4
 800347e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	2104      	movs	r1, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fcec 	bl	8003e66 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	21f0      	movs	r1, #240	@ 0xf0
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ffbf 	bl	8003416 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	2104      	movs	r1, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fcdc 	bl	8003e66 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2249      	movs	r2, #73	@ 0x49
 80034b4:	2120      	movs	r1, #32
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fcd5 	bl	8003e66 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80034bc:	2002      	movs	r0, #2
 80034be:	f000 fd0e 	bl	8003ede <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2201      	movs	r2, #1
 80034c8:	2121      	movs	r1, #33	@ 0x21
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fccb 	bl	8003e66 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	229a      	movs	r2, #154	@ 0x9a
 80034d6:	2141      	movs	r1, #65	@ 0x41
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fcc4 	bl	8003e66 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	214a      	movs	r1, #74	@ 0x4a
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fcbd 	bl	8003e66 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2201      	movs	r2, #1
 80034f2:	214b      	movs	r1, #75	@ 0x4b
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fcb6 	bl	8003e66 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2200      	movs	r2, #0
 8003500:	214b      	movs	r1, #75	@ 0x4b
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fcaf 	bl	8003e66 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2201      	movs	r2, #1
 800350e:	2156      	movs	r1, #86	@ 0x56
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fca8 	bl	8003e66 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2201      	movs	r2, #1
 800351c:	2158      	movs	r1, #88	@ 0x58
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fca1 	bl	8003e66 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2201      	movs	r2, #1
 800352a:	2140      	movs	r1, #64	@ 0x40
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fc9a 	bl	8003e66 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	210b      	movs	r1, #11
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fc93 	bl	8003e66 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003540:	2002      	movs	r0, #2
 8003542:	f000 fccc 	bl	8003ede <IOE_Delay>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2140      	movs	r1, #64	@ 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fc92 	bl	8003e8c <IOE_Read>
 8003568:	4603      	mov	r3, r0
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800357a:	7bbb      	ldrb	r3, [r7, #14]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	214c      	movs	r1, #76	@ 0x4c
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fc80 	bl	8003e8c <IOE_Read>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e00d      	b.n	80035b4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2201      	movs	r2, #1
 800359e:	214b      	movs	r1, #75	@ 0x4b
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fc60 	bl	8003e66 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	214b      	movs	r1, #75	@ 0x4b
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fc59 	bl	8003e66 <IOE_Write>
  }
  
  return ret;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	f107 0210 	add.w	r2, r7, #16
 80035d4:	2304      	movs	r3, #4
 80035d6:	21d7      	movs	r1, #215	@ 0xd7
 80035d8:	f000 fc6b 	bl	8003eb2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80035dc:	7c3b      	ldrb	r3, [r7, #16]
 80035de:	061a      	lsls	r2, r3, #24
 80035e0:	7c7b      	ldrb	r3, [r7, #17]
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	7cbb      	ldrb	r3, [r7, #18]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4313      	orrs	r3, r2
 80035ec:	7cfa      	ldrb	r2, [r7, #19]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0d1b      	lsrs	r3, r3, #20
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800360c:	89fb      	ldrh	r3, [r7, #14]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2201      	movs	r2, #1
 8003612:	214b      	movs	r1, #75	@ 0x4b
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fc26 	bl	8003e66 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2200      	movs	r2, #0
 8003620:	214b      	movs	r1, #75	@ 0x4b
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fc1f 	bl	8003e66 <IOE_Write>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800363a:	f000 fc0e 	bl	8003e5a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	211f      	movs	r1, #31
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fe76 	bl	8003334 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fe36 	bl	80032bc <stmpe811_EnableGlobalIT>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fe47 	bl	80032f8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	211f      	movs	r1, #31
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fe81 	bl	8003376 <stmpe811_DisableITSource>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	211f      	movs	r1, #31
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fe99 	bl	80033c2 <stmpe811_ReadGITStatus>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	211f      	movs	r1, #31
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fea1 	bl	80033f0 <stmpe811_ClearGlobalIT>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e00b      	b.n	80036e4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <stmpe811_GetInstance+0x40>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	461a      	mov	r2, r3
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	e006      	b.n	80036ec <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3301      	adds	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d9f0      	bls.n	80036cc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80036ea:	23ff      	movs	r3, #255	@ 0xff
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	200005b8 	.word	0x200005b8

080036fc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10e      	bne.n	800372a <BSP_LED_Init+0x2e>
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <BSP_LED_Init+0x9c>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	4a20      	ldr	r2, [pc, #128]	@ (8003798 <BSP_LED_Init+0x9c>)
 8003716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800371a:	6313      	str	r3, [r2, #48]	@ 0x30
 800371c:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <BSP_LED_Init+0x9c>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	e010      	b.n	800374c <BSP_LED_Init+0x50>
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <BSP_LED_Init+0x50>
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <BSP_LED_Init+0x9c>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <BSP_LED_Init+0x9c>)
 800373a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003740:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <BSP_LED_Init+0x9c>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	4a13      	ldr	r2, [pc, #76]	@ (800379c <BSP_LED_Init+0xa0>)
 8003750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003756:	2301      	movs	r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375a:	2301      	movs	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800375e:	2302      	movs	r3, #2
 8003760:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	4a0e      	ldr	r2, [pc, #56]	@ (80037a0 <BSP_LED_Init+0xa4>)
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	f107 0214 	add.w	r2, r7, #20
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fa65 	bl	8005c40 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4a09      	ldr	r2, [pc, #36]	@ (80037a0 <BSP_LED_Init+0xa4>)
 800377a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	4a06      	ldr	r2, [pc, #24]	@ (800379c <BSP_LED_Init+0xa0>)
 8003782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003786:	2200      	movs	r2, #0
 8003788:	4619      	mov	r1, r3
 800378a:	f002 fc05 	bl	8005f98 <HAL_GPIO_WritePin>
}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	@ 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	0800ee40 	.word	0x0800ee40
 80037a0:	200000c4 	.word	0x200000c4

080037a4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <BSP_LED_On+0x2c>)
 80037b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <BSP_LED_On+0x30>)
 80037ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037be:	2201      	movs	r2, #1
 80037c0:	4619      	mov	r1, r3
 80037c2:	f002 fbe9 	bl	8005f98 <HAL_GPIO_WritePin>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200000c4 	.word	0x200000c4
 80037d4:	0800ee40 	.word	0x0800ee40

080037d8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a07      	ldr	r2, [pc, #28]	@ (8003804 <BSP_LED_Off+0x2c>)
 80037e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4a06      	ldr	r2, [pc, #24]	@ (8003808 <BSP_LED_Off+0x30>)
 80037ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	f002 fbcf 	bl	8005f98 <HAL_GPIO_WritePin>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200000c4 	.word	0x200000c4
 8003808:	0800ee40 	.word	0x0800ee40

0800380c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a33      	ldr	r2, [pc, #204]	@ (80038e8 <I2Cx_MspInit+0xdc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d15f      	bne.n	80038de <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b32      	ldr	r3, [pc, #200]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	4a31      	ldr	r2, [pc, #196]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6313      	str	r3, [r2, #48]	@ 0x30
 800382e:	4b2f      	ldr	r3, [pc, #188]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b2b      	ldr	r3, [pc, #172]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6313      	str	r3, [r2, #48]	@ 0x30
 800384a:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <I2Cx_MspInit+0xe0>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800385a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800385c:	2312      	movs	r3, #18
 800385e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003864:	2302      	movs	r3, #2
 8003866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003868:	2304      	movs	r3, #4
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4619      	mov	r1, r3
 8003872:	481f      	ldr	r0, [pc, #124]	@ (80038f0 <I2Cx_MspInit+0xe4>)
 8003874:	f002 f9e4 	bl	8005c40 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800387c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	4619      	mov	r1, r3
 8003884:	481b      	ldr	r0, [pc, #108]	@ (80038f4 <I2Cx_MspInit+0xe8>)
 8003886:	f002 f9db 	bl	8005c40 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b17      	ldr	r3, [pc, #92]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <I2Cx_MspInit+0xe0>)
 8003894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003898:	6413      	str	r3, [r2, #64]	@ 0x40
 800389a:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <I2Cx_MspInit+0xe0>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80038a6:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <I2Cx_MspInit+0xe0>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a10      	ldr	r2, [pc, #64]	@ (80038ec <I2Cx_MspInit+0xe0>)
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <I2Cx_MspInit+0xe0>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <I2Cx_MspInit+0xe0>)
 80038b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038bc:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	210f      	movs	r1, #15
 80038c2:	2048      	movs	r0, #72	@ 0x48
 80038c4:	f001 fd31 	bl	800532a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80038c8:	2048      	movs	r0, #72	@ 0x48
 80038ca:	f001 fd4a 	bl	8005362 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	210f      	movs	r1, #15
 80038d2:	2049      	movs	r0, #73	@ 0x49
 80038d4:	f001 fd29 	bl	800532a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80038d8:	2049      	movs	r0, #73	@ 0x49
 80038da:	f001 fd42 	bl	8005362 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	@ 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40005c00 	.word	0x40005c00
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020000 	.word	0x40020000
 80038f4:	40020800 	.word	0x40020800

080038f8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80038fc:	4814      	ldr	r0, [pc, #80]	@ (8003950 <I2Cx_Init+0x58>)
 80038fe:	f003 f80d 	bl	800691c <HAL_I2C_GetState>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d121      	bne.n	800394c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <I2Cx_Init+0x58>)
 800390a:	4a12      	ldr	r2, [pc, #72]	@ (8003954 <I2Cx_Init+0x5c>)
 800390c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800390e:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <I2Cx_Init+0x58>)
 8003910:	4a11      	ldr	r2, [pc, #68]	@ (8003958 <I2Cx_Init+0x60>)
 8003912:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003914:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <I2Cx_Init+0x58>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <I2Cx_Init+0x58>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <I2Cx_Init+0x58>)
 8003922:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003926:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <I2Cx_Init+0x58>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <I2Cx_Init+0x58>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003934:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <I2Cx_Init+0x58>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <I2Cx_Init+0x58>)
 800393c:	2200      	movs	r2, #0
 800393e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003940:	4803      	ldr	r0, [pc, #12]	@ (8003950 <I2Cx_Init+0x58>)
 8003942:	f7ff ff63 	bl	800380c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003946:	4802      	ldr	r0, [pc, #8]	@ (8003950 <I2Cx_Init+0x58>)
 8003948:	f002 fb40 	bl	8005fcc <HAL_I2C_Init>
  }
}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}
 8003950:	200005bc 	.word	0x200005bc
 8003954:	40005c00 	.word	0x40005c00
 8003958:	000186a0 	.word	0x000186a0

0800395c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4b13      	ldr	r3, [pc, #76]	@ (80039b4 <I2Cx_ITConfig+0x58>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <I2Cx_ITConfig+0x58>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <I2Cx_ITConfig+0x58>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800397e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003984:	2301      	movs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <I2Cx_ITConfig+0x5c>)
 800398e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4809      	ldr	r0, [pc, #36]	@ (80039bc <I2Cx_ITConfig+0x60>)
 8003996:	f002 f953 	bl	8005c40 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800399a:	2200      	movs	r2, #0
 800399c:	210f      	movs	r1, #15
 800399e:	2028      	movs	r0, #40	@ 0x28
 80039a0:	f001 fcc3 	bl	800532a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80039a4:	2028      	movs	r0, #40	@ 0x28
 80039a6:	f001 fcdc 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800
 80039b8:	10210000 	.word	0x10210000
 80039bc:	40020000 	.word	0x40020000

080039c0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
 80039ca:	460b      	mov	r3, r1
 80039cc:	71bb      	strb	r3, [r7, #6]
 80039ce:	4613      	mov	r3, r2
 80039d0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	b299      	uxth	r1, r3
 80039da:	79bb      	ldrb	r3, [r7, #6]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <I2Cx_WriteData+0x4c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	2301      	movs	r3, #1
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	1d7b      	adds	r3, r7, #5
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2301      	movs	r3, #1
 80039ee:	4808      	ldr	r0, [pc, #32]	@ (8003a10 <I2Cx_WriteData+0x50>)
 80039f0:	f002 fc74 	bl	80062dc <HAL_I2C_Mem_Write>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80039fe:	f000 f863 	bl	8003ac8 <I2Cx_Error>
  }        
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200000cc 	.word	0x200000cc
 8003a10:	200005bc 	.word	0x200005bc

08003a14 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	71fb      	strb	r3, [r7, #7]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	79bb      	ldrb	r3, [r7, #6]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <I2Cx_ReadData+0x50>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9302      	str	r3, [sp, #8]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	f107 030e 	add.w	r3, r7, #14
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2301      	movs	r3, #1
 8003a46:	4808      	ldr	r0, [pc, #32]	@ (8003a68 <I2Cx_ReadData+0x54>)
 8003a48:	f002 fd42 	bl	80064d0 <HAL_I2C_Mem_Read>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a56:	f000 f837 	bl	8003ac8 <I2Cx_Error>
  
  }
  return value;
 8003a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200000cc 	.word	0x200000cc
 8003a68:	200005bc 	.word	0x200005bc

08003a6c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	603a      	str	r2, [r7, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	71bb      	strb	r3, [r7, #6]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	79bb      	ldrb	r3, [r7, #6]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <I2Cx_ReadBuffer+0x54>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	88bb      	ldrh	r3, [r7, #4]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4809      	ldr	r0, [pc, #36]	@ (8003ac4 <I2Cx_ReadBuffer+0x58>)
 8003aa0:	f002 fd16 	bl	80064d0 <HAL_I2C_Mem_Read>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e002      	b.n	8003ab8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003ab2:	f000 f809 	bl	8003ac8 <I2Cx_Error>

    return 1;
 8003ab6:	2301      	movs	r3, #1
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200000cc 	.word	0x200000cc
 8003ac4:	200005bc 	.word	0x200005bc

08003ac8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003acc:	4803      	ldr	r0, [pc, #12]	@ (8003adc <I2Cx_Error+0x14>)
 8003ace:	f002 fbc1 	bl	8006254 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003ad2:	f7ff ff11 	bl	80038f8 <I2Cx_Init>
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200005bc 	.word	0x200005bc

08003ae0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003ae4:	4819      	ldr	r0, [pc, #100]	@ (8003b4c <SPIx_Init+0x6c>)
 8003ae6:	f005 f9ba 	bl	8008e5e <HAL_SPI_GetState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d12b      	bne.n	8003b48 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <SPIx_Init+0x6c>)
 8003af2:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <SPIx_Init+0x70>)
 8003af4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <SPIx_Init+0x6c>)
 8003af8:	2218      	movs	r2, #24
 8003afa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <SPIx_Init+0x6c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b08:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b16:	2207      	movs	r2, #7
 8003b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b2c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b36:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b3a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003b3c:	4803      	ldr	r0, [pc, #12]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b3e:	f000 f853 	bl	8003be8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003b42:	4802      	ldr	r0, [pc, #8]	@ (8003b4c <SPIx_Init+0x6c>)
 8003b44:	f004 fc01 	bl	800834a <HAL_SPI_Init>
  } 
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000610 	.word	0x20000610
 8003b50:	40015000 	.word	0x40015000

08003b54 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <SPIx_Read+0x38>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f107 0108 	add.w	r1, r7, #8
 8003b6e:	4808      	ldr	r0, [pc, #32]	@ (8003b90 <SPIx_Read+0x3c>)
 8003b70:	f004 fde8 	bl	8008744 <HAL_SPI_Receive>
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003b7e:	f000 f827 	bl	8003bd0 <SPIx_Error>
  }
  
  return readvalue;
 8003b82:	68bb      	ldr	r3, [r7, #8]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200000d0 	.word	0x200000d0
 8003b90:	20000610 	.word	0x20000610

08003b94 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <SPIx_Write+0x34>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1db9      	adds	r1, r7, #6
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4808      	ldr	r0, [pc, #32]	@ (8003bcc <SPIx_Write+0x38>)
 8003bac:	f004 fc74 	bl	8008498 <HAL_SPI_Transmit>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003bba:	f000 f809 	bl	8003bd0 <SPIx_Error>
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200000d0 	.word	0x200000d0
 8003bcc:	20000610 	.word	0x20000610

08003bd0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003bd4:	4803      	ldr	r0, [pc, #12]	@ (8003be4 <SPIx_Error+0x14>)
 8003bd6:	f004 fc23 	bl	8008420 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003bda:	f7ff ff81 	bl	8003ae0 <SPIx_Init>
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000610 	.word	0x20000610

08003be8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	@ 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	4b17      	ldr	r3, [pc, #92]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c00:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003c16:	f043 0320 	orr.w	r3, r3, #32
 8003c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <SPIx_MspInit+0x6c>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003c28:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003c32:	2302      	movs	r3, #2
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003c36:	2301      	movs	r3, #1
 8003c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <SPIx_MspInit+0x70>)
 8003c46:	f001 fffb 	bl	8005c40 <HAL_GPIO_Init>
}
 8003c4a:	bf00      	nop
 8003c4c:	3728      	adds	r7, #40	@ 0x28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40021400 	.word	0x40021400

08003c5c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003c62:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <LCD_IO_Init+0xe0>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d164      	bne.n	8003d34 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <LCD_IO_Init+0xe0>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	4b32      	ldr	r3, [pc, #200]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	4a31      	ldr	r2, [pc, #196]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c80:	4b2f      	ldr	r3, [pc, #188]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c92:	2301      	movs	r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4827      	ldr	r0, [pc, #156]	@ (8003d44 <LCD_IO_Init+0xe8>)
 8003ca6:	f001 ffcb 	bl	8005c40 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	4a23      	ldr	r2, [pc, #140]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cba:	4b21      	ldr	r3, [pc, #132]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4819      	ldr	r0, [pc, #100]	@ (8003d44 <LCD_IO_Init+0xe8>)
 8003ce0:	f001 ffae 	bl	8005c40 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <LCD_IO_Init+0xe4>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003d00:	2304      	movs	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d04:	2301      	movs	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	4619      	mov	r1, r3
 8003d16:	480c      	ldr	r0, [pc, #48]	@ (8003d48 <LCD_IO_Init+0xec>)
 8003d18:	f001 ff92 	bl	8005c40 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2104      	movs	r1, #4
 8003d20:	4809      	ldr	r0, [pc, #36]	@ (8003d48 <LCD_IO_Init+0xec>)
 8003d22:	f002 f939 	bl	8005f98 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003d26:	2201      	movs	r2, #1
 8003d28:	2104      	movs	r1, #4
 8003d2a:	4807      	ldr	r0, [pc, #28]	@ (8003d48 <LCD_IO_Init+0xec>)
 8003d2c:	f002 f934 	bl	8005f98 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003d30:	f7ff fed6 	bl	8003ae0 <SPIx_Init>
  }
}
 8003d34:	bf00      	nop
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000668 	.word	0x20000668
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020c00 	.word	0x40020c00
 8003d48:	40020800 	.word	0x40020800

08003d4c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d56:	2201      	movs	r2, #1
 8003d58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d5c:	480a      	ldr	r0, [pc, #40]	@ (8003d88 <LCD_IO_WriteData+0x3c>)
 8003d5e:	f002 f91b 	bl	8005f98 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003d62:	2200      	movs	r2, #0
 8003d64:	2104      	movs	r1, #4
 8003d66:	4809      	ldr	r0, [pc, #36]	@ (8003d8c <LCD_IO_WriteData+0x40>)
 8003d68:	f002 f916 	bl	8005f98 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff10 	bl	8003b94 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003d74:	2201      	movs	r2, #1
 8003d76:	2104      	movs	r1, #4
 8003d78:	4804      	ldr	r0, [pc, #16]	@ (8003d8c <LCD_IO_WriteData+0x40>)
 8003d7a:	f002 f90d 	bl	8005f98 <HAL_GPIO_WritePin>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40020800 	.word	0x40020800

08003d90 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003da0:	480a      	ldr	r0, [pc, #40]	@ (8003dcc <LCD_IO_WriteReg+0x3c>)
 8003da2:	f002 f8f9 	bl	8005f98 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003da6:	2200      	movs	r2, #0
 8003da8:	2104      	movs	r1, #4
 8003daa:	4809      	ldr	r0, [pc, #36]	@ (8003dd0 <LCD_IO_WriteReg+0x40>)
 8003dac:	f002 f8f4 	bl	8005f98 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff feed 	bl	8003b94 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003dba:	2201      	movs	r2, #1
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	4804      	ldr	r0, [pc, #16]	@ (8003dd0 <LCD_IO_WriteReg+0x40>)
 8003dc0:	f002 f8ea 	bl	8005f98 <HAL_GPIO_WritePin>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460a      	mov	r2, r1
 8003dde:	80fb      	strh	r3, [r7, #6]
 8003de0:	4613      	mov	r3, r2
 8003de2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003de8:	2200      	movs	r2, #0
 8003dea:	2104      	movs	r1, #4
 8003dec:	4810      	ldr	r0, [pc, #64]	@ (8003e30 <LCD_IO_ReadData+0x5c>)
 8003dee:	f002 f8d3 	bl	8005f98 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003df8:	480e      	ldr	r0, [pc, #56]	@ (8003e34 <LCD_IO_ReadData+0x60>)
 8003dfa:	f002 f8cd 	bl	8005f98 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fec7 	bl	8003b94 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003e06:	797b      	ldrb	r3, [r7, #5]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fea3 	bl	8003b54 <SPIx_Read>
 8003e0e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003e10:	2201      	movs	r2, #1
 8003e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e16:	4807      	ldr	r0, [pc, #28]	@ (8003e34 <LCD_IO_ReadData+0x60>)
 8003e18:	f002 f8be 	bl	8005f98 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2104      	movs	r1, #4
 8003e20:	4803      	ldr	r0, [pc, #12]	@ (8003e30 <LCD_IO_ReadData+0x5c>)
 8003e22:	f002 f8b9 	bl	8005f98 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40020800 	.word	0x40020800
 8003e34:	40020c00 	.word	0x40020c00

08003e38 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f001 f973 	bl	800512c <HAL_Delay>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003e52:	f7ff fd51 	bl	80038f8 <I2Cx_Init>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003e5e:	f7ff fd7d 	bl	800395c <I2Cx_ITConfig>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]
 8003e70:	460b      	mov	r3, r1
 8003e72:	71bb      	strb	r3, [r7, #6]
 8003e74:	4613      	mov	r3, r2
 8003e76:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003e78:	797a      	ldrb	r2, [r7, #5]
 8003e7a:	79b9      	ldrb	r1, [r7, #6]
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fd9e 	bl	80039c0 <I2Cx_WriteData>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	460a      	mov	r2, r1
 8003e96:	71fb      	strb	r3, [r7, #7]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003e9c:	79ba      	ldrb	r2, [r7, #6]
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fdb6 	bl	8003a14 <I2Cx_ReadData>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	603a      	str	r2, [r7, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	71bb      	strb	r3, [r7, #6]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003ec8:	88bb      	ldrh	r3, [r7, #4]
 8003eca:	79b9      	ldrb	r1, [r7, #6]
 8003ecc:	79f8      	ldrb	r0, [r7, #7]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	f7ff fdcc 	bl	8003a6c <I2Cx_ReadBuffer>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f001 f920 	bl	800512c <HAL_Delay>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003efa:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb4 <BSP_LCD_Init+0xc0>)
 8003efc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003efe:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f00:	2209      	movs	r2, #9
 8003f02:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003f04:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003f0a:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f0c:	221d      	movs	r2, #29
 8003f0e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003f10:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f12:	2203      	movs	r2, #3
 8003f14:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003f16:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f18:	f240 120d 	movw	r2, #269	@ 0x10d
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003f1e:	4b24      	ldr	r3, [pc, #144]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f20:	f240 1243 	movw	r2, #323	@ 0x143
 8003f24:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003f26:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f28:	f240 1217 	movw	r2, #279	@ 0x117
 8003f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f30:	f240 1247 	movw	r2, #327	@ 0x147
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <BSP_LCD_Init+0xc4>)
 8003f50:	2208      	movs	r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003f54:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <BSP_LCD_Init+0xc4>)
 8003f56:	22c0      	movs	r2, #192	@ 0xc0
 8003f58:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003f5a:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <BSP_LCD_Init+0xc4>)
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f60:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <BSP_LCD_Init+0xc4>)
 8003f62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003f68:	4813      	ldr	r0, [pc, #76]	@ (8003fb8 <BSP_LCD_Init+0xc4>)
 8003f6a:	f003 ffa5 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003f86:	f000 fb7d 	bl	8004684 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003f8a:	4809      	ldr	r0, [pc, #36]	@ (8003fb0 <BSP_LCD_Init+0xbc>)
 8003f8c:	f003 f82c 	bl	8006fe8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <BSP_LCD_Init+0xc8>)
 8003f92:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc0 <BSP_LCD_Init+0xcc>)
 8003f94:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <BSP_LCD_Init+0xc8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003f9e:	f000 fd85 	bl	8004aac <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003fa2:	4808      	ldr	r0, [pc, #32]	@ (8003fc4 <BSP_LCD_Init+0xd0>)
 8003fa4:	f000 f8ce 	bl	8004144 <BSP_LCD_SetFont>

  return LCD_OK;
 8003fa8:	2300      	movs	r3, #0
}  
 8003faa:	4618      	mov	r0, r3
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	2000066c 	.word	0x2000066c
 8003fb4:	40016800 	.word	0x40016800
 8003fb8:	20000754 	.word	0x20000754
 8003fbc:	200007a0 	.word	0x200007a0
 8003fc0:	20000064 	.word	0x20000064
 8003fc4:	200000d4 	.word	0x200000d4

08003fc8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003fcc:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <BSP_LCD_GetXSize+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	4798      	blx	r3
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200007a0 	.word	0x200007a0

08003fe0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <BSP_LCD_GetYSize+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4798      	blx	r3
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200007a0 	.word	0x200007a0

08003ff8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b090      	sub	sp, #64	@ 0x40
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004008:	f7ff ffde 	bl	8003fc8 <BSP_LCD_GetXSize>
 800400c:	4603      	mov	r3, r0
 800400e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004014:	f7ff ffe4 	bl	8003fe0 <BSP_LCD_GetYSize>
 8004018:	4603      	mov	r3, r0
 800401a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004024:	23ff      	movs	r3, #255	@ 0xff
 8004026:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800403e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004044:	2307      	movs	r3, #7
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004048:	f7ff ffbe 	bl	8003fc8 <BSP_LCD_GetXSize>
 800404c:	4603      	mov	r3, r0
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004050:	f7ff ffc6 	bl	8003fe0 <BSP_LCD_GetYSize>
 8004054:	4603      	mov	r3, r0
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	4619      	mov	r1, r3
 8004060:	4814      	ldr	r0, [pc, #80]	@ (80040b4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004062:	f003 f89b 	bl	800719c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	4913      	ldr	r1, [pc, #76]	@ (80040b8 <BSP_LCD_LayerDefaultInit+0xc0>)
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3304      	adds	r3, #4
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	490e      	ldr	r1, [pc, #56]	@ (80040b8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3308      	adds	r3, #8
 800408c:	4a0b      	ldr	r2, [pc, #44]	@ (80040bc <BSP_LCD_LayerDefaultInit+0xc4>)
 800408e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	4909      	ldr	r1, [pc, #36]	@ (80040b8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80040a2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80040a4:	4803      	ldr	r0, [pc, #12]	@ (80040b4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040a6:	f003 f8b7 	bl	8007218 <HAL_LTDC_EnableDither>
}
 80040aa:	bf00      	nop
 80040ac:	3740      	adds	r7, #64	@ 0x40
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000066c 	.word	0x2000066c
 80040b8:	20000788 	.word	0x20000788
 80040bc:	200000d4 	.word	0x200000d4

080040c0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80040c8:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <BSP_LCD_SelectLayer+0x1c>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000784 	.word	0x20000784

080040e0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80040e8:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <BSP_LCD_SetTextColor+0x28>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4907      	ldr	r1, [pc, #28]	@ (800410c <BSP_LCD_SetTextColor+0x2c>)
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000784 	.word	0x20000784
 800410c:	20000788 	.word	0x20000788

08004110 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004118:	4b08      	ldr	r3, [pc, #32]	@ (800413c <BSP_LCD_SetBackColor+0x2c>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4908      	ldr	r1, [pc, #32]	@ (8004140 <BSP_LCD_SetBackColor+0x30>)
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3304      	adds	r3, #4
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000784 	.word	0x20000784
 8004140:	20000788 	.word	0x20000788

08004144 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <BSP_LCD_SetFont+0x2c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4908      	ldr	r1, [pc, #32]	@ (8004174 <BSP_LCD_SetFont+0x30>)
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3308      	adds	r3, #8
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000784 	.word	0x20000784
 8004174:	20000788 	.word	0x20000788

08004178 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af02      	add	r7, sp, #8
 800417e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004180:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <BSP_LCD_Clear+0x48>)
 8004182:	681c      	ldr	r4, [r3, #0]
 8004184:	4b0e      	ldr	r3, [pc, #56]	@ (80041c0 <BSP_LCD_Clear+0x48>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <BSP_LCD_Clear+0x4c>)
 800418a:	2134      	movs	r1, #52	@ 0x34
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	335c      	adds	r3, #92	@ 0x5c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461e      	mov	r6, r3
 8004198:	f7ff ff16 	bl	8003fc8 <BSP_LCD_GetXSize>
 800419c:	4605      	mov	r5, r0
 800419e:	f7ff ff1f 	bl	8003fe0 <BSP_LCD_GetYSize>
 80041a2:	4602      	mov	r2, r0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	462a      	mov	r2, r5
 80041b0:	4631      	mov	r1, r6
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 fc42 	bl	8004a3c <FillBuffer>
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c0:	20000784 	.word	0x20000784
 80041c4:	2000066c 	.word	0x2000066c

080041c8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
 80041d2:	460b      	mov	r3, r1
 80041d4:	80bb      	strh	r3, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <BSP_LCD_DisplayChar+0x80>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	491b      	ldr	r1, [pc, #108]	@ (800424c <BSP_LCD_DisplayChar+0x84>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3308      	adds	r3, #8
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80041f6:	4b14      	ldr	r3, [pc, #80]	@ (8004248 <BSP_LCD_DisplayChar+0x80>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4c14      	ldr	r4, [pc, #80]	@ (800424c <BSP_LCD_DisplayChar+0x84>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4423      	add	r3, r4
 8004206:	3308      	adds	r3, #8
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800420c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004210:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <BSP_LCD_DisplayChar+0x80>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4c0d      	ldr	r4, [pc, #52]	@ (800424c <BSP_LCD_DisplayChar+0x84>)
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4423      	add	r3, r4
 8004220:	3308      	adds	r3, #8
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	889b      	ldrh	r3, [r3, #4]
 8004226:	3307      	adds	r3, #7
 8004228:	2b00      	cmp	r3, #0
 800422a:	da00      	bge.n	800422e <BSP_LCD_DisplayChar+0x66>
 800422c:	3307      	adds	r3, #7
 800422e:	10db      	asrs	r3, r3, #3
 8004230:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004234:	18ca      	adds	r2, r1, r3
 8004236:	88b9      	ldrh	r1, [r7, #4]
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb44 	bl	80048c8 <DrawChar>
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}
 8004248:	20000784 	.word	0x20000784
 800424c:	20000788 	.word	0x20000788

08004250 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	60ba      	str	r2, [r7, #8]
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	81fb      	strh	r3, [r7, #14]
 800425e:	460b      	mov	r3, r1
 8004260:	81bb      	strh	r3, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004266:	2301      	movs	r3, #1
 8004268:	83fb      	strh	r3, [r7, #30]
 800426a:	2300      	movs	r3, #0
 800426c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800427a:	e002      	b.n	8004282 <BSP_LCD_DisplayStringAt+0x32>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	3301      	adds	r3, #1
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	617a      	str	r2, [r7, #20]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f6      	bne.n	800427c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800428e:	f7ff fe9b 	bl	8003fc8 <BSP_LCD_GetXSize>
 8004292:	4601      	mov	r1, r0
 8004294:	4b4b      	ldr	r3, [pc, #300]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	484b      	ldr	r0, [pc, #300]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4403      	add	r3, r0
 80042a4:	3308      	adds	r3, #8
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	889b      	ldrh	r3, [r3, #4]
 80042aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ae:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d01c      	beq.n	80042f0 <BSP_LCD_DisplayStringAt+0xa0>
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	dc33      	bgt.n	8004322 <BSP_LCD_DisplayStringAt+0xd2>
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <BSP_LCD_DisplayStringAt+0x74>
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d019      	beq.n	80042f6 <BSP_LCD_DisplayStringAt+0xa6>
 80042c2:	e02e      	b.n	8004322 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	1ad1      	subs	r1, r2, r3
 80042ca:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	483e      	ldr	r0, [pc, #248]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4403      	add	r3, r0
 80042da:	3308      	adds	r3, #8
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	889b      	ldrh	r3, [r3, #4]
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	4413      	add	r3, r2
 80042ec:	83fb      	strh	r3, [r7, #30]
      break;
 80042ee:	e01b      	b.n	8004328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	83fb      	strh	r3, [r7, #30]
      break;
 80042f4:	e018      	b.n	8004328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b299      	uxth	r1, r3
 80042fe:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4831      	ldr	r0, [pc, #196]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	3308      	adds	r3, #8
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	889b      	ldrh	r3, [r3, #4]
 8004314:	fb11 f303 	smulbb	r3, r1, r3
 8004318:	b29a      	uxth	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	4413      	add	r3, r2
 800431e:	83fb      	strh	r3, [r7, #30]
      break;
 8004320:	e002      	b.n	8004328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	83fb      	strh	r3, [r7, #30]
      break;
 8004326:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004328:	e01a      	b.n	8004360 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	89b9      	ldrh	r1, [r7, #12]
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff48 	bl	80041c8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004338:	4b22      	ldr	r3, [pc, #136]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4922      	ldr	r1, [pc, #136]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3308      	adds	r3, #8
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	889a      	ldrh	r2, [r3, #4]
 800434e:	8bfb      	ldrh	r3, [r7, #30]
 8004350:	4413      	add	r3, r2
 8004352:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
    i++;
 800435a:	8bbb      	ldrh	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2dc      	uxtb	r4, r3
 800436e:	f7ff fe2b 	bl	8003fc8 <BSP_LCD_GetXSize>
 8004372:	8bb9      	ldrh	r1, [r7, #28]
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4d13      	ldr	r5, [pc, #76]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	442b      	add	r3, r5
 8004384:	3308      	adds	r3, #8
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	889b      	ldrh	r3, [r3, #4]
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	1ac3      	subs	r3, r0, r3
 8004390:	b299      	uxth	r1, r3
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <BSP_LCD_DisplayStringAt+0x174>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	480c      	ldr	r0, [pc, #48]	@ (80043c8 <BSP_LCD_DisplayStringAt+0x178>)
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4403      	add	r3, r0
 80043a2:	3308      	adds	r3, #8
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	889b      	ldrh	r3, [r3, #4]
 80043a8:	4299      	cmp	r1, r3
 80043aa:	bf2c      	ite	cs
 80043ac:	2301      	movcs	r3, #1
 80043ae:	2300      	movcc	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4023      	ands	r3, r4
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1b7      	bne.n	800432a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}
 80043c4:	20000784 	.word	0x20000784
 80043c8:	20000788 	.word	0x20000788

080043cc <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b08b      	sub	sp, #44	@ 0x2c
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	80fb      	strh	r3, [r7, #6]
 80043de:	4603      	mov	r3, r0
 80043e0:	80bb      	strh	r3, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
 80043e6:	4613      	mov	r3, r2
 80043e8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80043ea:	2300      	movs	r3, #0
 80043ec:	823b      	strh	r3, [r7, #16]
 80043ee:	2300      	movs	r3, #0
 80043f0:	81fb      	strh	r3, [r7, #14]
 80043f2:	2300      	movs	r3, #0
 80043f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80043f6:	2300      	movs	r3, #0
 80043f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043fa:	2300      	movs	r3, #0
 80043fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80043fe:	2300      	movs	r3, #0
 8004400:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004402:	2300      	movs	r3, #0
 8004404:	83fb      	strh	r3, [r7, #30]
 8004406:	2300      	movs	r3, #0
 8004408:	83bb      	strh	r3, [r7, #28]
 800440a:	2300      	movs	r3, #0
 800440c:	837b      	strh	r3, [r7, #26]
 800440e:	2300      	movs	r3, #0
 8004410:	833b      	strh	r3, [r7, #24]
 8004412:	2300      	movs	r3, #0
 8004414:	82fb      	strh	r3, [r7, #22]
 8004416:	2300      	movs	r3, #0
 8004418:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bfb8      	it	lt
 8004428:	425b      	neglt	r3, r3
 800442a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800442c:	883a      	ldrh	r2, [r7, #0]
 800442e:	88bb      	ldrh	r3, [r7, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bfb8      	it	lt
 8004436:	425b      	neglt	r3, r3
 8004438:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800443e:	88bb      	ldrh	r3, [r7, #4]
 8004440:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	429a      	cmp	r2, r3
 8004448:	d304      	bcc.n	8004454 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800444a:	2301      	movs	r3, #1
 800444c:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	843b      	strh	r3, [r7, #32]
 8004452:	e005      	b.n	8004460 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004454:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004458:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 800445a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800445e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8004460:	883a      	ldrh	r2, [r7, #0]
 8004462:	88bb      	ldrh	r3, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d304      	bcc.n	8004472 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8004468:	2301      	movs	r3, #1
 800446a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800446c:	2301      	movs	r3, #1
 800446e:	83bb      	strh	r3, [r7, #28]
 8004470:	e005      	b.n	800447e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004476:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800447c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800447e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004486:	429a      	cmp	r2, r3
 8004488:	db10      	blt.n	80044ac <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800448a:	2300      	movs	r3, #0
 800448c:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800448e:	2300      	movs	r3, #0
 8004490:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004492:	8a3b      	ldrh	r3, [r7, #16]
 8004494:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004496:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800449a:	0fda      	lsrs	r2, r3, #31
 800449c:	4413      	add	r3, r2
 800449e:	105b      	asrs	r3, r3, #1
 80044a0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80044a2:	89fb      	ldrh	r3, [r7, #14]
 80044a4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80044a6:	8a3b      	ldrh	r3, [r7, #16]
 80044a8:	82bb      	strh	r3, [r7, #20]
 80044aa:	e00f      	b.n	80044cc <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80044ac:	2300      	movs	r3, #0
 80044ae:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80044b0:	2300      	movs	r3, #0
 80044b2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80044b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044bc:	0fda      	lsrs	r2, r3, #31
 80044be:	4413      	add	r3, r2
 80044c0:	105b      	asrs	r3, r3, #1
 80044c2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80044c4:	8a3b      	ldrh	r3, [r7, #16]
 80044c6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	827b      	strh	r3, [r7, #18]
 80044d0:	e037      	b.n	8004542 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80044d2:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80044d4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80044d6:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <BSP_LCD_DrawLine+0x18c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4c20      	ldr	r4, [pc, #128]	@ (800455c <BSP_LCD_DrawLine+0x190>)
 80044dc:	4613      	mov	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4423      	add	r3, r4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	f000 f9a1 	bl	8004830 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80044ee:	8b3a      	ldrh	r2, [r7, #24]
 80044f0:	8afb      	ldrh	r3, [r7, #22]
 80044f2:	4413      	add	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80044f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004500:	429a      	cmp	r2, r3
 8004502:	db0e      	blt.n	8004522 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004504:	8b3a      	ldrh	r2, [r7, #24]
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800450e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004510:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004512:	4413      	add	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004518:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800451a:	8bfb      	ldrh	r3, [r7, #30]
 800451c:	4413      	add	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004524:	8c3b      	ldrh	r3, [r7, #32]
 8004526:	4413      	add	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800452c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800452e:	8bbb      	ldrh	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800453a:	b29b      	uxth	r3, r3
 800453c:	3301      	adds	r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	827b      	strh	r3, [r7, #18]
 8004542:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800454a:	429a      	cmp	r2, r3
 800454c:	ddc1      	ble.n	80044d2 <BSP_LCD_DrawLine+0x106>
  }
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	372c      	adds	r7, #44	@ 0x2c
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	20000784 	.word	0x20000784
 800455c:	20000788 	.word	0x20000788

08004560 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af02      	add	r7, sp, #8
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	461a      	mov	r2, r3
 8004570:	4623      	mov	r3, r4
 8004572:	80fb      	strh	r3, [r7, #6]
 8004574:	4603      	mov	r3, r0
 8004576:	80bb      	strh	r3, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004584:	4b33      	ldr	r3, [pc, #204]	@ (8004654 <BSP_LCD_FillRect+0xf4>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4933      	ldr	r1, [pc, #204]	@ (8004658 <BSP_LCD_FillRect+0xf8>)
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fda2 	bl	80040e0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 800459c:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <BSP_LCD_FillRect+0xfc>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d022      	beq.n	80045ea <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 80045a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <BSP_LCD_FillRect+0xf4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004660 <BSP_LCD_FillRect+0x100>)
 80045aa:	2134      	movs	r1, #52	@ 0x34
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	335c      	adds	r3, #92	@ 0x5c
 80045b4:	681c      	ldr	r4, [r3, #0]
 80045b6:	f7ff fd07 	bl	8003fc8 <BSP_LCD_GetXSize>
 80045ba:	4603      	mov	r3, r0
 80045bc:	425b      	negs	r3, r3
 80045be:	88b9      	ldrh	r1, [r7, #4]
 80045c0:	883a      	ldrh	r2, [r7, #0]
 80045c2:	440a      	add	r2, r1
 80045c4:	fb02 f503 	mul.w	r5, r2, r3
 80045c8:	f7ff fcfe 	bl	8003fc8 <BSP_LCD_GetXSize>
 80045cc:	4606      	mov	r6, r0
 80045ce:	f7ff fd07 	bl	8003fe0 <BSP_LCD_GetYSize>
 80045d2:	4603      	mov	r3, r0
 80045d4:	fb06 f303 	mul.w	r3, r6, r3
 80045d8:	442b      	add	r3, r5
 80045da:	88f9      	ldrh	r1, [r7, #6]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	440a      	add	r2, r1
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4423      	add	r3, r4
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e013      	b.n	8004612 <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <BSP_LCD_FillRect+0xf4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <BSP_LCD_FillRect+0x100>)
 80045f0:	2134      	movs	r1, #52	@ 0x34
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	335c      	adds	r3, #92	@ 0x5c
 80045fa:	681c      	ldr	r4, [r3, #0]
 80045fc:	f7ff fce4 	bl	8003fc8 <BSP_LCD_GetXSize>
 8004600:	4602      	mov	r2, r0
 8004602:	88bb      	ldrh	r3, [r7, #4]
 8004604:	fb03 f202 	mul.w	r2, r3, r2
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4423      	add	r3, r4
 8004610:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004612:	4b10      	ldr	r3, [pc, #64]	@ (8004654 <BSP_LCD_FillRect+0xf4>)
 8004614:	681c      	ldr	r4, [r3, #0]
 8004616:	68fd      	ldr	r5, [r7, #12]
 8004618:	887e      	ldrh	r6, [r7, #2]
 800461a:	f8b7 8000 	ldrh.w	r8, [r7]
 800461e:	f7ff fcd3 	bl	8003fc8 <BSP_LCD_GetXSize>
 8004622:	4602      	mov	r2, r0
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	1ad1      	subs	r1, r2, r3
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <BSP_LCD_FillRect+0xf4>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	480a      	ldr	r0, [pc, #40]	@ (8004658 <BSP_LCD_FillRect+0xf8>)
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4403      	add	r3, r0
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	9100      	str	r1, [sp, #0]
 800463e:	4643      	mov	r3, r8
 8004640:	4632      	mov	r2, r6
 8004642:	4629      	mov	r1, r5
 8004644:	4620      	mov	r0, r4
 8004646:	f000 f9f9 	bl	8004a3c <FillBuffer>
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	20000784 	.word	0x20000784
 8004658:	20000788 	.word	0x20000788
 800465c:	200007a4 	.word	0x200007a4
 8004660:	2000066c 	.word	0x2000066c

08004664 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <BSP_LCD_DisplayOn+0x1c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004672:	4b03      	ldr	r3, [pc, #12]	@ (8004680 <BSP_LCD_DisplayOn+0x1c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4798      	blx	r3
  }
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200007a0 	.word	0x200007a0

08004684 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	@ 0x38
 8004688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	4b61      	ldr	r3, [pc, #388]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	4a60      	ldr	r2, [pc, #384]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004694:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004698:	6453      	str	r3, [r2, #68]	@ 0x44
 800469a:	4b5e      	ldr	r3, [pc, #376]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046a2:	623b      	str	r3, [r7, #32]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	4a59      	ldr	r2, [pc, #356]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046b6:	4b57      	ldr	r3, [pc, #348]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	4b53      	ldr	r3, [pc, #332]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	4a52      	ldr	r2, [pc, #328]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d2:	4b50      	ldr	r3, [pc, #320]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ee:	4b49      	ldr	r3, [pc, #292]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	4b45      	ldr	r3, [pc, #276]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	4a44      	ldr	r2, [pc, #272]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	6313      	str	r3, [r2, #48]	@ 0x30
 800470a:	4b42      	ldr	r3, [pc, #264]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	4b3e      	ldr	r3, [pc, #248]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	4a3d      	ldr	r2, [pc, #244]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	6313      	str	r3, [r2, #48]	@ 0x30
 8004726:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	4b37      	ldr	r3, [pc, #220]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4a36      	ldr	r2, [pc, #216]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 800473c:	f043 0320 	orr.w	r3, r3, #32
 8004740:	6313      	str	r3, [r2, #48]	@ 0x30
 8004742:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	4b30      	ldr	r3, [pc, #192]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	4a2f      	ldr	r2, [pc, #188]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800475c:	6313      	str	r3, [r2, #48]	@ 0x30
 800475e:	4b2d      	ldr	r3, [pc, #180]	@ (8004814 <BSP_LCD_MspInit+0x190>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800476a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004778:	2302      	movs	r3, #2
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800477c:	230e      	movs	r3, #14
 800477e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004784:	4619      	mov	r1, r3
 8004786:	4824      	ldr	r0, [pc, #144]	@ (8004818 <BSP_LCD_MspInit+0x194>)
 8004788:	f001 fa5a 	bl	8005c40 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800478c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004796:	4619      	mov	r1, r3
 8004798:	4820      	ldr	r0, [pc, #128]	@ (800481c <BSP_LCD_MspInit+0x198>)
 800479a:	f001 fa51 	bl	8005c40 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800479e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80047a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047a8:	4619      	mov	r1, r3
 80047aa:	481d      	ldr	r0, [pc, #116]	@ (8004820 <BSP_LCD_MspInit+0x19c>)
 80047ac:	f001 fa48 	bl	8005c40 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80047b0:	2348      	movs	r3, #72	@ 0x48
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80047b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047b8:	4619      	mov	r1, r3
 80047ba:	481a      	ldr	r0, [pc, #104]	@ (8004824 <BSP_LCD_MspInit+0x1a0>)
 80047bc:	f001 fa40 	bl	8005c40 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80047c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80047c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ca:	4619      	mov	r1, r3
 80047cc:	4816      	ldr	r0, [pc, #88]	@ (8004828 <BSP_LCD_MspInit+0x1a4>)
 80047ce:	f001 fa37 	bl	8005c40 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80047d2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80047d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047dc:	4619      	mov	r1, r3
 80047de:	4813      	ldr	r0, [pc, #76]	@ (800482c <BSP_LCD_MspInit+0x1a8>)
 80047e0:	f001 fa2e 	bl	8005c40 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80047e4:	2303      	movs	r3, #3
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80047e8:	2309      	movs	r3, #9
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80047ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f0:	4619      	mov	r1, r3
 80047f2:	480a      	ldr	r0, [pc, #40]	@ (800481c <BSP_LCD_MspInit+0x198>)
 80047f4:	f001 fa24 	bl	8005c40 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80047f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80047fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004802:	4619      	mov	r1, r3
 8004804:	4809      	ldr	r0, [pc, #36]	@ (800482c <BSP_LCD_MspInit+0x1a8>)
 8004806:	f001 fa1b 	bl	8005c40 <HAL_GPIO_Init>
}
 800480a:	bf00      	nop
 800480c:	3738      	adds	r7, #56	@ 0x38
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800
 8004824:	40020c00 	.word	0x40020c00
 8004828:	40021400 	.word	0x40021400
 800482c:	40021800 	.word	0x40021800

08004830 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	603a      	str	r2, [r7, #0]
 800483a:	80fb      	strh	r3, [r7, #6]
 800483c:	460b      	mov	r3, r1
 800483e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8004840:	4b1e      	ldr	r3, [pc, #120]	@ (80048bc <BSP_LCD_DrawPixel+0x8c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01f      	beq.n	8004888 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <BSP_LCD_DrawPixel+0x90>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <BSP_LCD_DrawPixel+0x94>)
 800484e:	2134      	movs	r1, #52	@ 0x34
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	335c      	adds	r3, #92	@ 0x5c
 8004858:	681c      	ldr	r4, [r3, #0]
 800485a:	f7ff fbb5 	bl	8003fc8 <BSP_LCD_GetXSize>
 800485e:	4605      	mov	r5, r0
 8004860:	f7ff fbbe 	bl	8003fe0 <BSP_LCD_GetYSize>
 8004864:	4603      	mov	r3, r0
 8004866:	fb03 f205 	mul.w	r2, r3, r5
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	1ad5      	subs	r5, r2, r3
 800486e:	f7ff fbab 	bl	8003fc8 <BSP_LCD_GetXSize>
 8004872:	4602      	mov	r2, r0
 8004874:	88bb      	ldrh	r3, [r7, #4]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	1aeb      	subs	r3, r5, r3
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4423      	add	r3, r4
 8004880:	461a      	mov	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004886:	e015      	b.n	80048b4 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004888:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <BSP_LCD_DrawPixel+0x90>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <BSP_LCD_DrawPixel+0x94>)
 800488e:	2134      	movs	r1, #52	@ 0x34
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	335c      	adds	r3, #92	@ 0x5c
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	88bd      	ldrh	r5, [r7, #4]
 800489c:	f7ff fb94 	bl	8003fc8 <BSP_LCD_GetXSize>
 80048a0:	4603      	mov	r3, r0
 80048a2:	fb03 f205 	mul.w	r2, r3, r5
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4423      	add	r3, r4
 80048ae:	461a      	mov	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}
 80048bc:	200007a4 	.word	0x200007a4
 80048c0:	20000784 	.word	0x20000784
 80048c4:	2000066c 	.word	0x2000066c

080048c8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	603a      	str	r2, [r7, #0]
 80048d2:	80fb      	strh	r3, [r7, #6]
 80048d4:	460b      	mov	r3, r1
 80048d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80048e4:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <DrawChar+0x16c>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4953      	ldr	r1, [pc, #332]	@ (8004a38 <DrawChar+0x170>)
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3308      	adds	r3, #8
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	88db      	ldrh	r3, [r3, #6]
 80048fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80048fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a34 <DrawChar+0x16c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	494d      	ldr	r1, [pc, #308]	@ (8004a38 <DrawChar+0x170>)
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3308      	adds	r3, #8
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	889b      	ldrh	r3, [r3, #4]
 8004912:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004914:	8a3b      	ldrh	r3, [r7, #16]
 8004916:	3307      	adds	r3, #7
 8004918:	2b00      	cmp	r3, #0
 800491a:	da00      	bge.n	800491e <DrawChar+0x56>
 800491c:	3307      	adds	r3, #7
 800491e:	10db      	asrs	r3, r3, #3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	b2da      	uxtb	r2, r3
 8004926:	8a3b      	ldrh	r3, [r7, #16]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e076      	b.n	8004a22 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004934:	8a3b      	ldrh	r3, [r7, #16]
 8004936:	3307      	adds	r3, #7
 8004938:	2b00      	cmp	r3, #0
 800493a:	da00      	bge.n	800493e <DrawChar+0x76>
 800493c:	3307      	adds	r3, #7
 800493e:	10db      	asrs	r3, r3, #3
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800494e:	8a3b      	ldrh	r3, [r7, #16]
 8004950:	3307      	adds	r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	da00      	bge.n	8004958 <DrawChar+0x90>
 8004956:	3307      	adds	r3, #7
 8004958:	10db      	asrs	r3, r3, #3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d002      	beq.n	8004964 <DrawChar+0x9c>
 800495e:	2b02      	cmp	r3, #2
 8004960:	d004      	beq.n	800496c <DrawChar+0xa4>
 8004962:	e00c      	b.n	800497e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]
      break;
 800496a:	e016      	b.n	800499a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	3201      	adds	r2, #1
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
      break;
 800497c:	e00d      	b.n	800499a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	041a      	lsls	r2, r3, #16
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3301      	adds	r3, #1
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	4313      	orrs	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	3202      	adds	r2, #2
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
      break;
 8004998:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e036      	b.n	8004a0e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80049a0:	8a3a      	ldrh	r2, [r7, #16]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	1ad2      	subs	r2, r2, r3
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	4413      	add	r3, r2
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	4413      	add	r3, r2
 80049c4:	b298      	uxth	r0, r3
 80049c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a34 <DrawChar+0x16c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	491b      	ldr	r1, [pc, #108]	@ (8004a38 <DrawChar+0x170>)
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	f7ff ff28 	bl	8004830 <BSP_LCD_DrawPixel>
 80049e0:	e012      	b.n	8004a08 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	4413      	add	r3, r2
 80049ea:	b298      	uxth	r0, r3
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <DrawChar+0x16c>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4911      	ldr	r1, [pc, #68]	@ (8004a38 <DrawChar+0x170>)
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3304      	adds	r3, #4
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	88bb      	ldrh	r3, [r7, #4]
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7ff ff14 	bl	8004830 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	8a3b      	ldrh	r3, [r7, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3c4      	bcc.n	80049a0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	8a7b      	ldrh	r3, [r7, #18]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d384      	bcc.n	8004934 <DrawChar+0x6c>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000784 	.word	0x20000784
 8004a38:	20000788 	.word	0x20000788

08004a3c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004a4a:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <FillBuffer+0x68>)
 8004a4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a50:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004a52:	4b14      	ldr	r3, [pc, #80]	@ (8004aa4 <FillBuffer+0x68>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004a58:	4a12      	ldr	r2, [pc, #72]	@ (8004aa4 <FillBuffer+0x68>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004a5e:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <FillBuffer+0x68>)
 8004a60:	4a11      	ldr	r2, [pc, #68]	@ (8004aa8 <FillBuffer+0x6c>)
 8004a62:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004a64:	480f      	ldr	r0, [pc, #60]	@ (8004aa4 <FillBuffer+0x68>)
 8004a66:	f000 fe55 	bl	8005714 <HAL_DMA2D_Init>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d115      	bne.n	8004a9c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	480c      	ldr	r0, [pc, #48]	@ (8004aa4 <FillBuffer+0x68>)
 8004a74:	f000 ffb6 	bl	80059e4 <HAL_DMA2D_ConfigLayer>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	4806      	ldr	r0, [pc, #24]	@ (8004aa4 <FillBuffer+0x68>)
 8004a8a:	f000 fe96 	bl	80057ba <HAL_DMA2D_Start>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004a94:	210a      	movs	r1, #10
 8004a96:	4803      	ldr	r0, [pc, #12]	@ (8004aa4 <FillBuffer+0x68>)
 8004a98:	f000 feba 	bl	8005810 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000714 	.word	0x20000714
 8004aa8:	4002b000 	.word	0x4002b000

08004aac <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004ab0:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b5c <BSP_SDRAM_Init+0xb0>)
 8004ab4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ab8:	2202      	movs	r2, #2
 8004aba:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004abc:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004abe:	2207      	movs	r2, #7
 8004ac0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004ac2:	4b27      	ldr	r3, [pc, #156]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004ac8:	4b25      	ldr	r3, [pc, #148]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004aca:	2207      	movs	r2, #7
 8004acc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004ace:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004ad4:	4b22      	ldr	r3, [pc, #136]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004ada:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004adc:	2202      	movs	r2, #2
 8004ade:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004aee:	2204      	movs	r2, #4
 8004af0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004af2:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004af4:	2210      	movs	r2, #16
 8004af6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004af8:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004afa:	2240      	movs	r2, #64	@ 0x40
 8004afc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004afe:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b00:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004b04:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004b0c:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b12:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004b14:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004b22:	2100      	movs	r1, #0
 8004b24:	480c      	ldr	r0, [pc, #48]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b26:	f000 f87f 	bl	8004c28 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004b2a:	490d      	ldr	r1, [pc, #52]	@ (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004b2c:	480a      	ldr	r0, [pc, #40]	@ (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b2e:	f003 fb83 	bl	8008238 <HAL_SDRAM_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004b38:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004b40:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004b46:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004b4a:	f000 f80d 	bl	8004b68 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200007a8 	.word	0x200007a8
 8004b5c:	a0000140 	.word	0xa0000140
 8004b60:	200007dc 	.word	0x200007dc
 8004b64:	200000ec 	.word	0x200000ec

08004b68 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004b74:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004b7a:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004b80:	4b27      	ldr	r3, [pc, #156]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b90:	4923      	ldr	r1, [pc, #140]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b92:	4824      	ldr	r0, [pc, #144]	@ (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b94:	f003 fb8e 	bl	80082b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f000 fac7 	bl	800512c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004b9e:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004baa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bba:	4919      	ldr	r1, [pc, #100]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bbc:	4819      	ldr	r0, [pc, #100]	@ (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bbe:	f003 fb79 	bl	80082b4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004bc2:	4b17      	ldr	r3, [pc, #92]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004bc8:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bca:	2208      	movs	r2, #8
 8004bcc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004bce:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004bd4:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bde:	4910      	ldr	r1, [pc, #64]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be0:	4810      	ldr	r0, [pc, #64]	@ (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004be2:	f003 fb67 	bl	80082b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004be6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004bea:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004bec:	4b0c      	ldr	r3, [pc, #48]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bee:	2204      	movs	r2, #4
 8004bf0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c02:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c08:	4905      	ldr	r1, [pc, #20]	@ (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c0a:	4806      	ldr	r0, [pc, #24]	@ (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c0c:	f003 fb52 	bl	80082b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4804      	ldr	r0, [pc, #16]	@ (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c14:	f003 fb79 	bl	800830a <HAL_SDRAM_ProgramRefreshRate>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	200007f8 	.word	0x200007f8
 8004c24:	200007a8 	.word	0x200007a8

08004c28 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b090      	sub	sp, #64	@ 0x40
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80ec 	beq.w	8004e12 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3e:	4b77      	ldr	r3, [pc, #476]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	4a76      	ldr	r2, [pc, #472]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6393      	str	r3, [r2, #56]	@ 0x38
 8004c4a:	4b74      	ldr	r3, [pc, #464]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5a:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	4b69      	ldr	r3, [pc, #420]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	4a68      	ldr	r2, [pc, #416]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c82:	4b66      	ldr	r3, [pc, #408]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	4b62      	ldr	r3, [pc, #392]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	4a61      	ldr	r2, [pc, #388]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	4b5b      	ldr	r3, [pc, #364]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	4a5a      	ldr	r2, [pc, #360]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cb4:	f043 0308 	orr.w	r3, r3, #8
 8004cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cba:	4b58      	ldr	r3, [pc, #352]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	4b54      	ldr	r3, [pc, #336]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	4a53      	ldr	r2, [pc, #332]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cd0:	f043 0310 	orr.w	r3, r3, #16
 8004cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd6:	4b51      	ldr	r3, [pc, #324]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cea:	4a4c      	ldr	r2, [pc, #304]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	4b46      	ldr	r3, [pc, #280]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d06:	4a45      	ldr	r2, [pc, #276]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d0e:	4b43      	ldr	r3, [pc, #268]	@ (8004e1c <BSP_SDRAM_MspInit+0x1f4>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004d26:	230c      	movs	r3, #12
 8004d28:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004d2a:	2360      	movs	r3, #96	@ 0x60
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d32:	4619      	mov	r1, r3
 8004d34:	483a      	ldr	r0, [pc, #232]	@ (8004e20 <BSP_SDRAM_MspInit+0x1f8>)
 8004d36:	f000 ff83 	bl	8005c40 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d42:	4619      	mov	r1, r3
 8004d44:	4837      	ldr	r0, [pc, #220]	@ (8004e24 <BSP_SDRAM_MspInit+0x1fc>)
 8004d46:	f000 ff7b 	bl	8005c40 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004d4a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	4834      	ldr	r0, [pc, #208]	@ (8004e28 <BSP_SDRAM_MspInit+0x200>)
 8004d58:	f000 ff72 	bl	8005c40 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004d5c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d66:	4619      	mov	r1, r3
 8004d68:	4830      	ldr	r0, [pc, #192]	@ (8004e2c <BSP_SDRAM_MspInit+0x204>)
 8004d6a:	f000 ff69 	bl	8005c40 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004d6e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d78:	4619      	mov	r1, r3
 8004d7a:	482d      	ldr	r0, [pc, #180]	@ (8004e30 <BSP_SDRAM_MspInit+0x208>)
 8004d7c:	f000 ff60 	bl	8005c40 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004d80:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4829      	ldr	r0, [pc, #164]	@ (8004e34 <BSP_SDRAM_MspInit+0x20c>)
 8004d8e:	f000 ff57 	bl	8005c40 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004d98:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004d9a:	2280      	movs	r2, #128	@ 0x80
 8004d9c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004d9e:	4b26      	ldr	r3, [pc, #152]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004da4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004da6:	4b24      	ldr	r3, [pc, #144]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dac:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dae:	4b22      	ldr	r3, [pc, #136]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004db0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004db4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004db6:	4b20      	ldr	r3, [pc, #128]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004db8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004dbc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004dca:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004dd2:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004dd8:	4b17      	ldr	r3, [pc, #92]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004dde:	4b16      	ldr	r3, [pc, #88]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004de6:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <BSP_SDRAM_MspInit+0x214>)
 8004de8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a12      	ldr	r2, [pc, #72]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004df0:	4a11      	ldr	r2, [pc, #68]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004df6:	4810      	ldr	r0, [pc, #64]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004df8:	f000 fb7c 	bl	80054f4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004dfc:	480e      	ldr	r0, [pc, #56]	@ (8004e38 <BSP_SDRAM_MspInit+0x210>)
 8004dfe:	f000 facb 	bl	8005398 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	210f      	movs	r1, #15
 8004e06:	2038      	movs	r0, #56	@ 0x38
 8004e08:	f000 fa8f 	bl	800532a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004e0c:	2038      	movs	r0, #56	@ 0x38
 8004e0e:	f000 faa8 	bl	8005362 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004e12:	bf00      	nop
 8004e14:	3740      	adds	r7, #64	@ 0x40
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40020400 	.word	0x40020400
 8004e24:	40020800 	.word	0x40020800
 8004e28:	40020c00 	.word	0x40020c00
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40021400 	.word	0x40021400
 8004e34:	40021800 	.word	0x40021800
 8004e38:	20000808 	.word	0x20000808
 8004e3c:	40026410 	.word	0x40026410

08004e40 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	460a      	mov	r2, r1
 8004e4a:	80fb      	strh	r3, [r7, #6]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <BSP_TS_Init+0x64>)
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004e5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ea8 <BSP_TS_Init+0x68>)
 8004e5c:	88bb      	ldrh	r3, [r7, #4]
 8004e5e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004e60:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <BSP_TS_Init+0x6c>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2082      	movs	r0, #130	@ 0x82
 8004e66:	4798      	blx	r3
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f640 0311 	movw	r3, #2065	@ 0x811
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d104      	bne.n	8004e7e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004e74:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <BSP_TS_Init+0x70>)
 8004e76:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <BSP_TS_Init+0x6c>)
 8004e78:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <BSP_TS_Init+0x70>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2082      	movs	r0, #130	@ 0x82
 8004e8c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <BSP_TS_Init+0x70>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2082      	movs	r0, #130	@ 0x82
 8004e96:	4798      	blx	r3
  }

  return ret;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	2000086c 	.word	0x2000086c
 8004ea8:	2000086e 	.word	0x2000086e
 8004eac:	2000009c 	.word	0x2000009c
 8004eb0:	20000868 	.word	0x20000868

08004eb4 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <BSP_TS_ITGetStatus+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	2082      	movs	r0, #130	@ 0x82
 8004ec0:	4798      	blx	r3
 8004ec2:	4603      	mov	r3, r0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000868 	.word	0x20000868

08004ecc <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8005014 <BSP_TS_GetState+0x148>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2082      	movs	r0, #130	@ 0x82
 8004edc:	4798      	blx	r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 808d 	beq.w	800500a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004ef0:	4b48      	ldr	r3, [pc, #288]	@ (8005014 <BSP_TS_GetState+0x148>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f107 020c 	add.w	r2, r7, #12
 8004efa:	f107 010e 	add.w	r1, r7, #14
 8004efe:	2082      	movs	r0, #130	@ 0x82
 8004f00:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004f02:	89bb      	ldrh	r3, [r7, #12]
 8004f04:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004f0c:	89bb      	ldrh	r3, [r7, #12]
 8004f0e:	4a42      	ldr	r2, [pc, #264]	@ (8005018 <BSP_TS_GetState+0x14c>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004f18:	8abb      	ldrh	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	82bb      	strh	r3, [r7, #20]
 8004f22:	e008      	b.n	8004f36 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004f24:	4b3d      	ldr	r3, [pc, #244]	@ (800501c <BSP_TS_GetState+0x150>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	8aba      	ldrh	r2, [r7, #20]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d903      	bls.n	8004f36 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <BSP_TS_GetState+0x150>)
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004f36:	8abb      	ldrh	r3, [r7, #20]
 8004f38:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d806      	bhi.n	8004f52 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004f4a:	330e      	adds	r3, #14
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	81fb      	strh	r3, [r7, #14]
 8004f50:	e005      	b.n	8004f5e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004f58:	3308      	adds	r3, #8
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	4a2f      	ldr	r2, [pc, #188]	@ (8005020 <BSP_TS_GetState+0x154>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004f6a:	8afb      	ldrh	r3, [r7, #22]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	82fb      	strh	r3, [r7, #22]
 8004f74:	e008      	b.n	8004f88 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004f76:	4b2b      	ldr	r3, [pc, #172]	@ (8005024 <BSP_TS_GetState+0x158>)
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	8afa      	ldrh	r2, [r7, #22]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d903      	bls.n	8004f88 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004f80:	4b28      	ldr	r3, [pc, #160]	@ (8005024 <BSP_TS_GetState+0x158>)
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004f88:	8afb      	ldrh	r3, [r7, #22]
 8004f8a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <BSP_TS_GetState+0x15c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d906      	bls.n	8004fa6 <BSP_TS_GetState+0xda>
 8004f98:	89fa      	ldrh	r2, [r7, #14]
 8004f9a:	4b23      	ldr	r3, [pc, #140]	@ (8005028 <BSP_TS_GetState+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	e005      	b.n	8004fb2 <BSP_TS_GetState+0xe6>
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <BSP_TS_GetState+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004fb4:	89bb      	ldrh	r3, [r7, #12]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800502c <BSP_TS_GetState+0x160>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d906      	bls.n	8004fce <BSP_TS_GetState+0x102>
 8004fc0:	89ba      	ldrh	r2, [r7, #12]
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <BSP_TS_GetState+0x160>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	e005      	b.n	8004fda <BSP_TS_GetState+0x10e>
 8004fce:	4b17      	ldr	r3, [pc, #92]	@ (800502c <BSP_TS_GetState+0x160>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	89bb      	ldrh	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004fdc:	8a7a      	ldrh	r2, [r7, #18]
 8004fde:	8a3b      	ldrh	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	dd07      	ble.n	8004ff6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004fe6:	89fb      	ldrh	r3, [r7, #14]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b0f      	ldr	r3, [pc, #60]	@ (8005028 <BSP_TS_GetState+0x15c>)
 8004fec:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004fee:	89bb      	ldrh	r3, [r7, #12]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <BSP_TS_GetState+0x160>)
 8004ff4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <BSP_TS_GetState+0x15c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8005000:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <BSP_TS_GetState+0x160>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	809a      	strh	r2, [r3, #4]
  }
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000868 	.word	0x20000868
 8005018:	ba2e8ba3 	.word	0xba2e8ba3
 800501c:	2000086e 	.word	0x2000086e
 8005020:	88888889 	.word	0x88888889
 8005024:	2000086c 	.word	0x2000086c
 8005028:	20000870 	.word	0x20000870
 800502c:	20000874 	.word	0x20000874

08005030 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <BSP_TS_ITClear+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	2082      	movs	r0, #130	@ 0x82
 800503c:	4798      	blx	r3
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000868 	.word	0x20000868

08005048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800504c:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <HAL_Init+0x40>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <HAL_Init+0x40>)
 8005052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005058:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_Init+0x40>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	@ (8005088 <HAL_Init+0x40>)
 800505e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005064:	4b08      	ldr	r3, [pc, #32]	@ (8005088 <HAL_Init+0x40>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a07      	ldr	r2, [pc, #28]	@ (8005088 <HAL_Init+0x40>)
 800506a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005070:	2003      	movs	r0, #3
 8005072:	f000 f94f 	bl	8005314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005076:	200f      	movs	r0, #15
 8005078:	f000 f808 	bl	800508c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800507c:	f7fd fe0e 	bl	8002c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00

0800508c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005094:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <HAL_InitTick+0x54>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <HAL_InitTick+0x58>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	4619      	mov	r1, r3
 800509e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f967 	bl	800537e <HAL_SYSTICK_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e00e      	b.n	80050d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b0f      	cmp	r3, #15
 80050be:	d80a      	bhi.n	80050d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050c0:	2200      	movs	r2, #0
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	f000 f92f 	bl	800532a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050cc:	4a06      	ldr	r2, [pc, #24]	@ (80050e8 <HAL_InitTick+0x5c>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e000      	b.n	80050d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000060 	.word	0x20000060
 80050e4:	200000f4 	.word	0x200000f4
 80050e8:	200000f0 	.word	0x200000f0

080050ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050f0:	4b06      	ldr	r3, [pc, #24]	@ (800510c <HAL_IncTick+0x20>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_IncTick+0x24>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4413      	add	r3, r2
 80050fc:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <HAL_IncTick+0x24>)
 80050fe:	6013      	str	r3, [r2, #0]
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	200000f4 	.word	0x200000f4
 8005110:	20000878 	.word	0x20000878

08005114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return uwTick;
 8005118:	4b03      	ldr	r3, [pc, #12]	@ (8005128 <HAL_GetTick+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000878 	.word	0x20000878

0800512c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7ff ffee 	bl	8005114 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d005      	beq.n	8005152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005146:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <HAL_Delay+0x44>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005152:	bf00      	nop
 8005154:	f7ff ffde 	bl	8005114 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d8f7      	bhi.n	8005154 <HAL_Delay+0x28>
  {
  }
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200000f4 	.word	0x200000f4

08005174 <__NVIC_SetPriorityGrouping>:
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005184:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005190:	4013      	ands	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800519c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051a6:	4a04      	ldr	r2, [pc, #16]	@ (80051b8 <__NVIC_SetPriorityGrouping+0x44>)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	60d3      	str	r3, [r2, #12]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000ed00 	.word	0xe000ed00

080051bc <__NVIC_GetPriorityGrouping>:
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c0:	4b04      	ldr	r3, [pc, #16]	@ (80051d4 <__NVIC_GetPriorityGrouping+0x18>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 0307 	and.w	r3, r3, #7
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <__NVIC_EnableIRQ>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	db0b      	blt.n	8005202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	f003 021f 	and.w	r2, r3, #31
 80051f0:	4907      	ldr	r1, [pc, #28]	@ (8005210 <__NVIC_EnableIRQ+0x38>)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2001      	movs	r0, #1
 80051fa:	fa00 f202 	lsl.w	r2, r0, r2
 80051fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000e100 	.word	0xe000e100

08005214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005224:	2b00      	cmp	r3, #0
 8005226:	db0a      	blt.n	800523e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	490c      	ldr	r1, [pc, #48]	@ (8005260 <__NVIC_SetPriority+0x4c>)
 800522e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005232:	0112      	lsls	r2, r2, #4
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	440b      	add	r3, r1
 8005238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800523c:	e00a      	b.n	8005254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4908      	ldr	r1, [pc, #32]	@ (8005264 <__NVIC_SetPriority+0x50>)
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	3b04      	subs	r3, #4
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	440b      	add	r3, r1
 8005252:	761a      	strb	r2, [r3, #24]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000e100 	.word	0xe000e100
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	@ 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f1c3 0307 	rsb	r3, r3, #7
 8005282:	2b04      	cmp	r3, #4
 8005284:	bf28      	it	cs
 8005286:	2304      	movcs	r3, #4
 8005288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3304      	adds	r3, #4
 800528e:	2b06      	cmp	r3, #6
 8005290:	d902      	bls.n	8005298 <NVIC_EncodePriority+0x30>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3b03      	subs	r3, #3
 8005296:	e000      	b.n	800529a <NVIC_EncodePriority+0x32>
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800529c:	f04f 32ff 	mov.w	r2, #4294967295
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	401a      	ands	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b0:	f04f 31ff 	mov.w	r1, #4294967295
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	43d9      	mvns	r1, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c0:	4313      	orrs	r3, r2
         );
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3724      	adds	r7, #36	@ 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e0:	d301      	bcc.n	80052e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052e2:	2301      	movs	r3, #1
 80052e4:	e00f      	b.n	8005306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <SysTick_Config+0x40>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052ee:	210f      	movs	r1, #15
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	f7ff ff8e 	bl	8005214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <SysTick_Config+0x40>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052fe:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <SysTick_Config+0x40>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010

08005314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff29 	bl	8005174 <__NVIC_SetPriorityGrouping>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	4603      	mov	r3, r0
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800533c:	f7ff ff3e 	bl	80051bc <__NVIC_GetPriorityGrouping>
 8005340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	6978      	ldr	r0, [r7, #20]
 8005348:	f7ff ff8e 	bl	8005268 <NVIC_EncodePriority>
 800534c:	4602      	mov	r2, r0
 800534e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ff5d 	bl	8005214 <__NVIC_SetPriority>
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	4603      	mov	r3, r0
 800536a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800536c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff ff31 	bl	80051d8 <__NVIC_EnableIRQ>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ffa2 	bl	80052d0 <SysTick_Config>
 800538c:	4603      	mov	r3, r0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7ff feb6 	bl	8005114 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e099      	b.n	80054e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053d4:	e00f      	b.n	80053f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053d6:	f7ff fe9d 	bl	8005114 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d908      	bls.n	80053f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2203      	movs	r2, #3
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e078      	b.n	80054e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e8      	bne.n	80053d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_DMA_Init+0x158>)
 8005410:	4013      	ands	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800542e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800543a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	2b04      	cmp	r3, #4
 800544e:	d107      	bne.n	8005460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	4313      	orrs	r3, r2
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0307 	bic.w	r3, r3, #7
 8005476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	2b04      	cmp	r3, #4
 8005488:	d117      	bne.n	80054ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8bd 	bl	800561c <DMA_CheckFifoParam>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2240      	movs	r2, #64	@ 0x40
 80054ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80054b6:	2301      	movs	r3, #1
 80054b8:	e016      	b.n	80054e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f874 	bl	80055b0 <DMA_CalcBaseAndBitshift>
 80054c8:	4603      	mov	r3, r0
 80054ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	223f      	movs	r2, #63	@ 0x3f
 80054d2:	409a      	lsls	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	f010803f 	.word	0xf010803f

080054f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e050      	b.n	80055a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d101      	bne.n	8005516 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
 8005514:	e048      	b.n	80055a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2221      	movs	r2, #33	@ 0x21
 8005554:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f82a 	bl	80055b0 <DMA_CalcBaseAndBitshift>
 800555c:	4603      	mov	r3, r0
 800555e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	223f      	movs	r2, #63	@ 0x3f
 800558a:	409a      	lsls	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	3b10      	subs	r3, #16
 80055c0:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <DMA_CalcBaseAndBitshift+0x64>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055ca:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <DMA_CalcBaseAndBitshift+0x68>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d909      	bls.n	80055f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80055f0:	e007      	b.n	8005602 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	aaaaaaab 	.word	0xaaaaaaab
 8005618:	080123b4 	.word	0x080123b4

0800561c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11f      	bne.n	8005676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b03      	cmp	r3, #3
 800563a:	d856      	bhi.n	80056ea <DMA_CheckFifoParam+0xce>
 800563c:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <DMA_CheckFifoParam+0x28>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005655 	.word	0x08005655
 8005648:	08005667 	.word	0x08005667
 800564c:	08005655 	.word	0x08005655
 8005650:	080056eb 	.word	0x080056eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d046      	beq.n	80056ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005664:	e043      	b.n	80056ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800566e:	d140      	bne.n	80056f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005674:	e03d      	b.n	80056f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567e:	d121      	bne.n	80056c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d837      	bhi.n	80056f6 <DMA_CheckFifoParam+0xda>
 8005686:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <DMA_CheckFifoParam+0x70>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056a3 	.word	0x080056a3
 8005694:	0800569d 	.word	0x0800569d
 8005698:	080056b5 	.word	0x080056b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
      break;
 80056a0:	e030      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d025      	beq.n	80056fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b2:	e022      	b.n	80056fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056bc:	d11f      	bne.n	80056fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056c2:	e01c      	b.n	80056fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d903      	bls.n	80056d2 <DMA_CheckFifoParam+0xb6>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d003      	beq.n	80056d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056d0:	e018      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
      break;
 80056d6:	e015      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00e      	beq.n	8005702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      break;
 80056e8:	e00b      	b.n	8005702 <DMA_CheckFifoParam+0xe6>
      break;
 80056ea:	bf00      	nop
 80056ec:	e00a      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;
 80056ee:	bf00      	nop
 80056f0:	e008      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;
 80056f2:	bf00      	nop
 80056f4:	e006      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;
 80056f6:	bf00      	nop
 80056f8:	e004      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;   
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <DMA_CheckFifoParam+0xe8>
      break;
 8005702:	bf00      	nop
    }
  } 
  
  return status; 
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop

08005714 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e03b      	b.n	800579e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f833 	bl	80057a6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	f023 0107 	bic.w	r1, r3, #7
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800577e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68d1      	ldr	r1, [r2, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	430b      	orrs	r3, r1
 800578c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b086      	sub	sp, #24
 80057be:	af02      	add	r7, sp, #8
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA2D_Start+0x1c>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e018      	b.n	8005808 <HAL_DMA2D_Start+0x4e>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f989 	bl	8005b08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d056      	beq.n	80058da <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800582c:	f7ff fc72 	bl	8005114 <HAL_GetTick>
 8005830:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005832:	e04b      	b.n	80058cc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005842:	2b00      	cmp	r3, #0
 8005844:	d023      	beq.n	800588e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	f043 0202 	orr.w	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586a:	f043 0201 	orr.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2221      	movs	r2, #33	@ 0x21
 8005878:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0a5      	b.n	80059da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d01a      	beq.n	80058cc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005896:	f7ff fc3d 	bl	8005114 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <HAL_DMA2D_PollForTransfer+0x9c>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10f      	bne.n	80058cc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	f043 0220 	orr.w	r2, r3, #32
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2203      	movs	r2, #3
 80058bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e086      	b.n	80059da <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ac      	beq.n	8005834 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d061      	beq.n	80059c0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80058fc:	f7ff fc0a 	bl	8005114 <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005902:	e056      	b.n	80059b2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02e      	beq.n	8005974 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	f043 0204 	orr.w	r2, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	f043 0202 	orr.w	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2229      	movs	r2, #41	@ 0x29
 800595e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e032      	b.n	80059da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d01a      	beq.n	80059b2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800597c:	f7ff fbca 	bl	8005114 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <HAL_DMA2D_PollForTransfer+0x182>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2203      	movs	r2, #3
 80059a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e013      	b.n	80059da <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0a1      	beq.n	8005904 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2212      	movs	r2, #18
 80059c6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_DMA2D_ConfigLayer+0x20>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e079      	b.n	8005af8 <HAL_DMA2D_ConfigLayer+0x114>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3318      	adds	r3, #24
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005a2e:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <HAL_DMA2D_ConfigLayer+0x120>)
 8005a30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b0a      	cmp	r3, #10
 8005a38:	d003      	beq.n	8005a42 <HAL_DMA2D_ConfigLayer+0x5e>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b09      	cmp	r3, #9
 8005a40:	d107      	bne.n	8005a52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	e005      	b.n	8005a5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d120      	bne.n	8005aa6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	ea02 0103 	and.w	r1, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b0a      	cmp	r3, #10
 8005a8c:	d003      	beq.n	8005a96 <HAL_DMA2D_ConfigLayer+0xb2>
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d127      	bne.n	8005ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa4:	e01f      	b.n	8005ae6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	ea02 0103 	and.w	r1, r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b0a      	cmp	r3, #10
 8005ace:	d003      	beq.n	8005ad8 <HAL_DMA2D_ConfigLayer+0xf4>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b09      	cmp	r3, #9
 8005ad6:	d106      	bne.n	8005ae6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ae4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	ff03000f 	.word	0xff03000f

08005b08 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b08b      	sub	sp, #44	@ 0x2c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	041a      	lsls	r2, r3, #16
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	431a      	orrs	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b40:	d174      	bne.n	8005c2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005b48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b78:	e053      	b.n	8005c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d106      	bne.n	8005b90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8e:	e048      	b.n	8005c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d111      	bne.n	8005bbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	0cdb      	lsrs	r3, r3, #19
 8005b9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	0a9b      	lsrs	r3, r3, #10
 8005ba2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	08db      	lsrs	r3, r3, #3
 8005ba8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	02db      	lsls	r3, r3, #11
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bba:	e032      	b.n	8005c22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d117      	bne.n	8005bf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	0fdb      	lsrs	r3, r3, #31
 8005bc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	0cdb      	lsrs	r3, r3, #19
 8005bce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	0adb      	lsrs	r3, r3, #11
 8005bd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	431a      	orrs	r2, r3
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	03db      	lsls	r3, r3, #15
 8005bea:	4313      	orrs	r3, r2
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf2:	e016      	b.n	8005c22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	0f1b      	lsrs	r3, r3, #28
 8005bf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	0d1b      	lsrs	r3, r3, #20
 8005bfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	0b1b      	lsrs	r3, r3, #12
 8005c04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	011a      	lsls	r2, r3, #4
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	431a      	orrs	r2, r3
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c28:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c2a:	e003      	b.n	8005c34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	60da      	str	r2, [r3, #12]
}
 8005c34:	bf00      	nop
 8005c36:	372c      	adds	r7, #44	@ 0x2c
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	@ 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e177      	b.n	8005f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	f040 8166 	bne.w	8005f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d00b      	beq.n	8005c9a <HAL_GPIO_Init+0x5a>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d007      	beq.n	8005c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c8e:	2b11      	cmp	r3, #17
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b12      	cmp	r3, #18
 8005c98:	d130      	bne.n	8005cfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 0201 	and.w	r2, r3, #1
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0xfc>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b12      	cmp	r3, #18
 8005d3a:	d123      	bne.n	8005d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	08da      	lsrs	r2, r3, #3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3208      	adds	r2, #8
 8005d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	220f      	movs	r2, #15
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	08da      	lsrs	r2, r3, #3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3208      	adds	r2, #8
 8005d7e:	69b9      	ldr	r1, [r7, #24]
 8005d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	2203      	movs	r2, #3
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f003 0203 	and.w	r2, r3, #3
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80c0 	beq.w	8005f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	4b66      	ldr	r3, [pc, #408]	@ (8005f64 <HAL_GPIO_Init+0x324>)
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dce:	4a65      	ldr	r2, [pc, #404]	@ (8005f64 <HAL_GPIO_Init+0x324>)
 8005dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dd6:	4b63      	ldr	r3, [pc, #396]	@ (8005f64 <HAL_GPIO_Init+0x324>)
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005de2:	4a61      	ldr	r2, [pc, #388]	@ (8005f68 <HAL_GPIO_Init+0x328>)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	3302      	adds	r3, #2
 8005dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	220f      	movs	r2, #15
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a58      	ldr	r2, [pc, #352]	@ (8005f6c <HAL_GPIO_Init+0x32c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d037      	beq.n	8005e7e <HAL_GPIO_Init+0x23e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a57      	ldr	r2, [pc, #348]	@ (8005f70 <HAL_GPIO_Init+0x330>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_GPIO_Init+0x23a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a56      	ldr	r2, [pc, #344]	@ (8005f74 <HAL_GPIO_Init+0x334>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d02b      	beq.n	8005e76 <HAL_GPIO_Init+0x236>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a55      	ldr	r2, [pc, #340]	@ (8005f78 <HAL_GPIO_Init+0x338>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d025      	beq.n	8005e72 <HAL_GPIO_Init+0x232>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a54      	ldr	r2, [pc, #336]	@ (8005f7c <HAL_GPIO_Init+0x33c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01f      	beq.n	8005e6e <HAL_GPIO_Init+0x22e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a53      	ldr	r2, [pc, #332]	@ (8005f80 <HAL_GPIO_Init+0x340>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d019      	beq.n	8005e6a <HAL_GPIO_Init+0x22a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a52      	ldr	r2, [pc, #328]	@ (8005f84 <HAL_GPIO_Init+0x344>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_GPIO_Init+0x226>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a51      	ldr	r2, [pc, #324]	@ (8005f88 <HAL_GPIO_Init+0x348>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00d      	beq.n	8005e62 <HAL_GPIO_Init+0x222>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a50      	ldr	r2, [pc, #320]	@ (8005f8c <HAL_GPIO_Init+0x34c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <HAL_GPIO_Init+0x21e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a4f      	ldr	r2, [pc, #316]	@ (8005f90 <HAL_GPIO_Init+0x350>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d101      	bne.n	8005e5a <HAL_GPIO_Init+0x21a>
 8005e56:	2309      	movs	r3, #9
 8005e58:	e012      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	e010      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	e00e      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e62:	2307      	movs	r3, #7
 8005e64:	e00c      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e66:	2306      	movs	r3, #6
 8005e68:	e00a      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e6a:	2305      	movs	r3, #5
 8005e6c:	e008      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e006      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e72:	2303      	movs	r3, #3
 8005e74:	e004      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e002      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	f002 0203 	and.w	r2, r2, #3
 8005e86:	0092      	lsls	r2, r2, #2
 8005e88:	4093      	lsls	r3, r2
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e90:	4935      	ldr	r1, [pc, #212]	@ (8005f68 <HAL_GPIO_Init+0x328>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	3302      	adds	r3, #2
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ec2:	4a34      	ldr	r2, [pc, #208]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ec8:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eec:	4a29      	ldr	r2, [pc, #164]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ef2:	4b28      	ldr	r3, [pc, #160]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f16:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f40:	4a14      	ldr	r2, [pc, #80]	@ (8005f94 <HAL_GPIO_Init+0x354>)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	f67f ae84 	bls.w	8005c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	3724      	adds	r7, #36	@ 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40020000 	.word	0x40020000
 8005f70:	40020400 	.word	0x40020400
 8005f74:	40020800 	.word	0x40020800
 8005f78:	40020c00 	.word	0x40020c00
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40021400 	.word	0x40021400
 8005f84:	40021800 	.word	0x40021800
 8005f88:	40021c00 	.word	0x40021c00
 8005f8c:	40022000 	.word	0x40022000
 8005f90:	40022400 	.word	0x40022400
 8005f94:	40013c00 	.word	0x40013c00

08005f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fa8:	787b      	ldrb	r3, [r7, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fb4:	e003      	b.n	8005fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	041a      	lsls	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	619a      	str	r2, [r3, #24]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e12b      	b.n	8006236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f95d 	bl	80062b2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	@ 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800601e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800602e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006030:	f001 ff1a 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8006034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4a81      	ldr	r2, [pc, #516]	@ (8006240 <HAL_I2C_Init+0x274>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d807      	bhi.n	8006050 <HAL_I2C_Init+0x84>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a80      	ldr	r2, [pc, #512]	@ (8006244 <HAL_I2C_Init+0x278>)
 8006044:	4293      	cmp	r3, r2
 8006046:	bf94      	ite	ls
 8006048:	2301      	movls	r3, #1
 800604a:	2300      	movhi	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e006      	b.n	800605e <HAL_I2C_Init+0x92>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a7d      	ldr	r2, [pc, #500]	@ (8006248 <HAL_I2C_Init+0x27c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	bf94      	ite	ls
 8006058:	2301      	movls	r3, #1
 800605a:	2300      	movhi	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0e7      	b.n	8006236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a78      	ldr	r2, [pc, #480]	@ (800624c <HAL_I2C_Init+0x280>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	0c9b      	lsrs	r3, r3, #18
 8006070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4a6a      	ldr	r2, [pc, #424]	@ (8006240 <HAL_I2C_Init+0x274>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d802      	bhi.n	80060a0 <HAL_I2C_Init+0xd4>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3301      	adds	r3, #1
 800609e:	e009      	b.n	80060b4 <HAL_I2C_Init+0xe8>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	4a69      	ldr	r2, [pc, #420]	@ (8006250 <HAL_I2C_Init+0x284>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	3301      	adds	r3, #1
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80060c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	495c      	ldr	r1, [pc, #368]	@ (8006240 <HAL_I2C_Init+0x274>)
 80060d0:	428b      	cmp	r3, r1
 80060d2:	d819      	bhi.n	8006108 <HAL_I2C_Init+0x13c>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	1e59      	subs	r1, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	fbb1 f3f3 	udiv	r3, r1, r3
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80060e8:	400b      	ands	r3, r1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <HAL_I2C_Init+0x138>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1e59      	subs	r1, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fc:	3301      	adds	r3, #1
 80060fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006102:	e051      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006104:	2304      	movs	r3, #4
 8006106:	e04f      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d111      	bne.n	8006134 <HAL_I2C_Init+0x168>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1e58      	subs	r0, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6859      	ldr	r1, [r3, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	440b      	add	r3, r1
 800611e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006122:	3301      	adds	r3, #1
 8006124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e012      	b.n	800615a <HAL_I2C_Init+0x18e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1e58      	subs	r0, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	0099      	lsls	r1, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	fbb0 f3f3 	udiv	r3, r0, r3
 800614a:	3301      	adds	r3, #1
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Init+0x196>
 800615e:	2301      	movs	r3, #1
 8006160:	e022      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <HAL_I2C_Init+0x1bc>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1e58      	subs	r0, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	440b      	add	r3, r1
 8006178:	fbb0 f3f3 	udiv	r3, r0, r3
 800617c:	3301      	adds	r3, #1
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006186:	e00f      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1e58      	subs	r0, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	0099      	lsls	r1, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	fbb0 f3f3 	udiv	r3, r0, r3
 800619e:	3301      	adds	r3, #1
 80061a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	6809      	ldr	r1, [r1, #0]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6911      	ldr	r1, [r2, #16]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68d2      	ldr	r2, [r2, #12]
 80061e2:	4311      	orrs	r1, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	000186a0 	.word	0x000186a0
 8006244:	001e847f 	.word	0x001e847f
 8006248:	003d08ff 	.word	0x003d08ff
 800624c:	431bde83 	.word	0x431bde83
 8006250:	10624dd3 	.word	0x10624dd3

08006254 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e021      	b.n	80062aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2224      	movs	r2, #36	@ 0x24
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f821 	bl	80062c6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	817b      	strh	r3, [r7, #10]
 80062ee:	460b      	mov	r3, r1
 80062f0:	813b      	strh	r3, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062f6:	f7fe ff0d 	bl	8005114 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b20      	cmp	r3, #32
 8006306:	f040 80d9 	bne.w	80064bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	2319      	movs	r3, #25
 8006310:	2201      	movs	r2, #1
 8006312:	496d      	ldr	r1, [pc, #436]	@ (80064c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fc89 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
 8006322:	e0cc      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_I2C_Mem_Write+0x56>
 800632e:	2302      	movs	r3, #2
 8006330:	e0c5      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d007      	beq.n	8006358 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006366:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2221      	movs	r2, #33	@ 0x21
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4a4d      	ldr	r2, [pc, #308]	@ (80064cc <HAL_I2C_Mem_Write+0x1f0>)
 8006398:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800639a:	88f8      	ldrh	r0, [r7, #6]
 800639c:	893a      	ldrh	r2, [r7, #8]
 800639e:	8979      	ldrh	r1, [r7, #10]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4603      	mov	r3, r0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fac4 	bl	8006938 <I2C_RequestMemoryWrite>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d052      	beq.n	800645c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e081      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fd0a 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d107      	bne.n	80063e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e06b      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d11b      	bne.n	800645c <HAL_I2C_Mem_Write+0x180>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006428:	2b00      	cmp	r3, #0
 800642a:	d017      	beq.n	800645c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1aa      	bne.n	80063ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 fcf6 	bl	8006e5a <I2C_WaitOnBTFFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	2b04      	cmp	r3, #4
 800647a:	d107      	bne.n	800648c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e016      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800649e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	00100002 	.word	0x00100002
 80064cc:	ffff0000 	.word	0xffff0000

080064d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	@ 0x30
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	817b      	strh	r3, [r7, #10]
 80064e2:	460b      	mov	r3, r1
 80064e4:	813b      	strh	r3, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064ea:	f7fe fe13 	bl	8005114 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	f040 8208 	bne.w	800690e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	2319      	movs	r3, #25
 8006504:	2201      	movs	r2, #1
 8006506:	497b      	ldr	r1, [pc, #492]	@ (80066f4 <HAL_I2C_Mem_Read+0x224>)
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fb8f 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
 8006516:	e1fb      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_I2C_Mem_Read+0x56>
 8006522:	2302      	movs	r3, #2
 8006524:	e1f4      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d007      	beq.n	800654c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800655a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2222      	movs	r2, #34	@ 0x22
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2240      	movs	r2, #64	@ 0x40
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006576:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800657c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a5b      	ldr	r2, [pc, #364]	@ (80066f8 <HAL_I2C_Mem_Read+0x228>)
 800658c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800658e:	88f8      	ldrh	r0, [r7, #6]
 8006590:	893a      	ldrh	r2, [r7, #8]
 8006592:	8979      	ldrh	r1, [r7, #10]
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4603      	mov	r3, r0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fa5e 	bl	8006a60 <I2C_RequestMemoryRead>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e1b0      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d113      	bne.n	80065de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b6:	2300      	movs	r3, #0
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e184      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d11b      	bne.n	800661e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e164      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006622:	2b02      	cmp	r3, #2
 8006624:	d11b      	bne.n	800665e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006634:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	e144      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006674:	e138      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667a:	2b03      	cmp	r3, #3
 800667c:	f200 80f1 	bhi.w	8006862 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006684:	2b01      	cmp	r3, #1
 8006686:	d123      	bne.n	80066d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fc25 	bl	8006edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e139      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066ce:	e10b      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d14e      	bne.n	8006776 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	2200      	movs	r2, #0
 80066e0:	4906      	ldr	r1, [pc, #24]	@ (80066fc <HAL_I2C_Mem_Read+0x22c>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 faa2 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e10e      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
 80066f2:	bf00      	nop
 80066f4:	00100002 	.word	0x00100002
 80066f8:	ffff0000 	.word	0xffff0000
 80066fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800670e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006774:	e0b8      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	2200      	movs	r2, #0
 800677e:	4966      	ldr	r1, [pc, #408]	@ (8006918 <HAL_I2C_Mem_Read+0x448>)
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fa53 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0bf      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	2200      	movs	r2, #0
 80067da:	494f      	ldr	r1, [pc, #316]	@ (8006918 <HAL_I2C_Mem_Read+0x448>)
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fa25 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e091      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006860:	e042      	b.n	80068e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fb38 	bl	8006edc <I2C_WaitOnRXNEFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e04c      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d118      	bne.n	80068e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f aec2 	bne.w	8006676 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e000      	b.n	8006910 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800690e:	2302      	movs	r3, #2
  }
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	@ 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	00010004 	.word	0x00010004

0800691c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800692a:	b2db      	uxtb	r3, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	461a      	mov	r2, r3
 8006946:	4603      	mov	r3, r0
 8006948:	817b      	strh	r3, [r7, #10]
 800694a:	460b      	mov	r3, r1
 800694c:	813b      	strh	r3, [r7, #8]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	2200      	movs	r2, #0
 800696a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f95c 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e05f      	b.n	8006a54 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006994:	897b      	ldrh	r3, [r7, #10]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	6a3a      	ldr	r2, [r7, #32]
 80069a8:	492c      	ldr	r1, [pc, #176]	@ (8006a5c <I2C_RequestMemoryWrite+0x124>)
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f995 	bl	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e04c      	b.n	8006a54 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d2:	6a39      	ldr	r1, [r7, #32]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f9ff 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d107      	bne.n	80069f8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e02b      	b.n	8006a54 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	611a      	str	r2, [r3, #16]
 8006a0c:	e021      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a0e:	893b      	ldrh	r3, [r7, #8]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1e:	6a39      	ldr	r1, [r7, #32]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f9d9 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d107      	bne.n	8006a44 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e005      	b.n	8006a54 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a48:	893b      	ldrh	r3, [r7, #8]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	00010002 	.word	0x00010002

08006a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f8c0 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0a9      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006acc:	897b      	ldrh	r3, [r7, #10]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	4951      	ldr	r1, [pc, #324]	@ (8006c28 <I2C_RequestMemoryRead+0x1c8>)
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f8f9 	bl	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e096      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0a:	6a39      	ldr	r1, [r7, #32]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f963 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00d      	beq.n	8006b34 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d107      	bne.n	8006b30 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e075      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d105      	bne.n	8006b46 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b3a:	893b      	ldrh	r3, [r7, #8]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	611a      	str	r2, [r3, #16]
 8006b44:	e021      	b.n	8006b8a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b56:	6a39      	ldr	r1, [r7, #32]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f93d 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d107      	bne.n	8006b7c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04f      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b80:	893b      	ldrh	r3, [r7, #8]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8c:	6a39      	ldr	r1, [r7, #32]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f922 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d107      	bne.n	8006bb2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e034      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f82a 	bl	8006c2c <I2C_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00c      	beq.n	8006bf8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e013      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bf8:	897b      	ldrh	r3, [r7, #10]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	4906      	ldr	r1, [pc, #24]	@ (8006c28 <I2C_RequestMemoryRead+0x1c8>)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f863 	bl	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	00010002 	.word	0x00010002

08006c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c3c:	e025      	b.n	8006c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d021      	beq.n	8006c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fe fa65 	bl	8005114 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d302      	bcc.n	8006c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d116      	bne.n	8006c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	f043 0220 	orr.w	r2, r3, #32
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e023      	b.n	8006cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	0c1b      	lsrs	r3, r3, #16
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10d      	bne.n	8006cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	43da      	mvns	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	bf0c      	ite	eq
 8006ca6:	2301      	moveq	r3, #1
 8006ca8:	2300      	movne	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	e00c      	b.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf0c      	ite	eq
 8006cc2:	2301      	moveq	r3, #1
 8006cc4:	2300      	movne	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d0b6      	beq.n	8006c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
 8006ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ce8:	e051      	b.n	8006d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf8:	d123      	bne.n	8006d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e046      	b.n	8006dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d021      	beq.n	8006d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4a:	f7fe f9e3 	bl	8005114 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d302      	bcc.n	8006d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d116      	bne.n	8006d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7a:	f043 0220 	orr.w	r2, r3, #32
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e020      	b.n	8006dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10c      	bne.n	8006db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4013      	ands	r3, r2
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf14      	ite	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	2300      	moveq	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	e00b      	b.n	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	43da      	mvns	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf14      	ite	ne
 8006dc4:	2301      	movne	r3, #1
 8006dc6:	2300      	moveq	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d18d      	bne.n	8006cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006de4:	e02d      	b.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f8ce 	bl	8006f88 <I2C_IsAcknowledgeFailed>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e02d      	b.n	8006e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d021      	beq.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfe:	f7fe f989 	bl	8005114 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d116      	bne.n	8006e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f043 0220 	orr.w	r2, r3, #32
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e007      	b.n	8006e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4c:	2b80      	cmp	r3, #128	@ 0x80
 8006e4e:	d1ca      	bne.n	8006de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e66:	e02d      	b.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f88d 	bl	8006f88 <I2C_IsAcknowledgeFailed>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e02d      	b.n	8006ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d021      	beq.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e80:	f7fe f948 	bl	8005114 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb0:	f043 0220 	orr.w	r2, r3, #32
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e007      	b.n	8006ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d1ca      	bne.n	8006e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ee8:	e042      	b.n	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d119      	bne.n	8006f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0210 	mvn.w	r2, #16
 8006f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e029      	b.n	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2c:	f7fe f8f2 	bl	8005114 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d116      	bne.n	8006f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e007      	b.n	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7a:	2b40      	cmp	r3, #64	@ 0x40
 8006f7c:	d1b5      	bne.n	8006eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9e:	d11b      	bne.n	8006fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e000      	b.n	8006fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0bf      	b.n	800717a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8ba 	bl	8007188 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800702a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6999      	ldr	r1, [r3, #24]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007040:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6899      	ldr	r1, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b4a      	ldr	r3, [pc, #296]	@ (8007184 <HAL_LTDC_Init+0x19c>)
 800705c:	400b      	ands	r3, r1
 800705e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6899      	ldr	r1, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68d9      	ldr	r1, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b3e      	ldr	r3, [pc, #248]	@ (8007184 <HAL_LTDC_Init+0x19c>)
 800708a:	400b      	ands	r3, r1
 800708c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	041b      	lsls	r3, r3, #16
 8007094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68d9      	ldr	r1, [r3, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1a      	ldr	r2, [r3, #32]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6919      	ldr	r1, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b33      	ldr	r3, [pc, #204]	@ (8007184 <HAL_LTDC_Init+0x19c>)
 80070b8:	400b      	ands	r3, r1
 80070ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6919      	ldr	r1, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6959      	ldr	r1, [r3, #20]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b27      	ldr	r3, [pc, #156]	@ (8007184 <HAL_LTDC_Init+0x19c>)
 80070e6:	400b      	ands	r3, r1
 80070e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6959      	ldr	r1, [r3, #20]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0206 	orr.w	r2, r2, #6
 8007156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	f000f800 	.word	0xf000f800

08007188 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800719c:	b5b0      	push	{r4, r5, r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_LTDC_ConfigLayer+0x1a>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e02c      	b.n	8007210 <HAL_LTDC_ConfigLayer+0x74>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2134      	movs	r1, #52	@ 0x34
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4614      	mov	r4, r2
 80071da:	461d      	mov	r5, r3
 80071dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f83b 	bl	800726c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2201      	movs	r2, #1
 80071fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bdb0      	pop	{r4, r5, r7, pc}

08007218 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_LTDC_EnableDither+0x16>
 800722a:	2302      	movs	r3, #2
 800722c:	e016      	b.n	800725c <HAL_LTDC_EnableDither+0x44>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800723e:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <HAL_LTDC_EnableDither+0x50>)
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	4a09      	ldr	r2, [pc, #36]	@ (8007268 <HAL_LTDC_EnableDither+0x50>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007248:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40016800 	.word	0x40016800

0800726c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	@ 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007288:	4413      	add	r3, r2
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	4413      	add	r3, r2
 800729a:	3384      	adds	r3, #132	@ 0x84
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	4611      	mov	r1, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	01d2      	lsls	r2, r2, #7
 80072a8:	440a      	add	r2, r1
 80072aa:	3284      	adds	r2, #132	@ 0x84
 80072ac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80072b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c2:	4413      	add	r3, r2
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	01db      	lsls	r3, r3, #7
 80072d0:	440b      	add	r3, r1
 80072d2:	3384      	adds	r3, #132	@ 0x84
 80072d4:	4619      	mov	r1, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4313      	orrs	r3, r2
 80072da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ea:	4413      	add	r3, r2
 80072ec:	041b      	lsls	r3, r3, #16
 80072ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	01db      	lsls	r3, r3, #7
 80072fa:	4413      	add	r3, r2
 80072fc:	3384      	adds	r3, #132	@ 0x84
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	4611      	mov	r1, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	01d2      	lsls	r2, r2, #7
 800730a:	440a      	add	r2, r1
 800730c:	3284      	adds	r2, #132	@ 0x84
 800730e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007312:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007322:	4413      	add	r3, r2
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4619      	mov	r1, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	440b      	add	r3, r1
 8007332:	3384      	adds	r3, #132	@ 0x84
 8007334:	4619      	mov	r1, r3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4313      	orrs	r3, r2
 800733a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	01db      	lsls	r3, r3, #7
 8007346:	4413      	add	r3, r2
 8007348:	3384      	adds	r3, #132	@ 0x84
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	4611      	mov	r1, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	01d2      	lsls	r2, r2, #7
 8007356:	440a      	add	r2, r1
 8007358:	3284      	adds	r2, #132	@ 0x84
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	01db      	lsls	r3, r3, #7
 800736a:	4413      	add	r3, r2
 800736c:	3384      	adds	r3, #132	@ 0x84
 800736e:	461a      	mov	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	061b      	lsls	r3, r3, #24
 8007390:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4413      	add	r3, r2
 800739e:	3384      	adds	r3, #132	@ 0x84
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	01db      	lsls	r3, r3, #7
 80073ac:	4413      	add	r3, r2
 80073ae:	3384      	adds	r3, #132	@ 0x84
 80073b0:	461a      	mov	r2, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80073bc:	461a      	mov	r2, r3
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4619      	mov	r1, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	01db      	lsls	r3, r3, #7
 80073d0:	440b      	add	r3, r1
 80073d2:	3384      	adds	r3, #132	@ 0x84
 80073d4:	4619      	mov	r1, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	01db      	lsls	r3, r3, #7
 80073e6:	4413      	add	r3, r2
 80073e8:	3384      	adds	r3, #132	@ 0x84
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	4611      	mov	r1, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	01d2      	lsls	r2, r2, #7
 80073f6:	440a      	add	r2, r1
 80073f8:	3284      	adds	r2, #132	@ 0x84
 80073fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80073fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	01db      	lsls	r3, r3, #7
 800740a:	4413      	add	r3, r2
 800740c:	3384      	adds	r3, #132	@ 0x84
 800740e:	461a      	mov	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	4413      	add	r3, r2
 8007422:	3384      	adds	r3, #132	@ 0x84
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	4611      	mov	r1, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	01d2      	lsls	r2, r2, #7
 8007430:	440a      	add	r2, r1
 8007432:	3284      	adds	r2, #132	@ 0x84
 8007434:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007438:	f023 0307 	bic.w	r3, r3, #7
 800743c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	6809      	ldr	r1, [r1, #0]
 800744a:	4608      	mov	r0, r1
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	01c9      	lsls	r1, r1, #7
 8007450:	4401      	add	r1, r0
 8007452:	3184      	adds	r1, #132	@ 0x84
 8007454:	4313      	orrs	r3, r2
 8007456:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	01db      	lsls	r3, r3, #7
 8007462:	4413      	add	r3, r2
 8007464:	3384      	adds	r3, #132	@ 0x84
 8007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	4413      	add	r3, r2
 8007474:	3384      	adds	r3, #132	@ 0x84
 8007476:	461a      	mov	r2, r3
 8007478:	2300      	movs	r3, #0
 800747a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	01db      	lsls	r3, r3, #7
 8007486:	4413      	add	r3, r2
 8007488:	3384      	adds	r3, #132	@ 0x84
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d102      	bne.n	80074a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800749a:	2304      	movs	r3, #4
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	e01b      	b.n	80074d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d102      	bne.n	80074ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80074a8:	2303      	movs	r3, #3
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e014      	b.n	80074d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d00b      	beq.n	80074ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d007      	beq.n	80074ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d003      	beq.n	80074ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074ca:	2b07      	cmp	r3, #7
 80074cc:	d102      	bne.n	80074d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80074ce:	2302      	movs	r3, #2
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	e001      	b.n	80074d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80074d4:	2301      	movs	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	01db      	lsls	r3, r3, #7
 80074e2:	4413      	add	r3, r2
 80074e4:	3384      	adds	r3, #132	@ 0x84
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	4611      	mov	r1, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	01d2      	lsls	r2, r2, #7
 80074f2:	440a      	add	r2, r1
 80074f4:	3284      	adds	r2, #132	@ 0x84
 80074f6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80074fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	041a      	lsls	r2, r3, #16
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	1acb      	subs	r3, r1, r3
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	fb01 f303 	mul.w	r3, r1, r3
 8007518:	3303      	adds	r3, #3
 800751a:	68f9      	ldr	r1, [r7, #12]
 800751c:	6809      	ldr	r1, [r1, #0]
 800751e:	4608      	mov	r0, r1
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	01c9      	lsls	r1, r1, #7
 8007524:	4401      	add	r1, r0
 8007526:	3184      	adds	r1, #132	@ 0x84
 8007528:	4313      	orrs	r3, r2
 800752a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	01db      	lsls	r3, r3, #7
 8007536:	4413      	add	r3, r2
 8007538:	3384      	adds	r3, #132	@ 0x84
 800753a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	4611      	mov	r1, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	01d2      	lsls	r2, r2, #7
 8007546:	440a      	add	r2, r1
 8007548:	3284      	adds	r2, #132	@ 0x84
 800754a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	01db      	lsls	r3, r3, #7
 800755e:	4413      	add	r3, r2
 8007560:	3384      	adds	r3, #132	@ 0x84
 8007562:	461a      	mov	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	01db      	lsls	r3, r3, #7
 8007574:	4413      	add	r3, r2
 8007576:	3384      	adds	r3, #132	@ 0x84
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	4611      	mov	r1, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	01d2      	lsls	r2, r2, #7
 8007584:	440a      	add	r2, r1
 8007586:	3284      	adds	r2, #132	@ 0x84
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	6013      	str	r3, [r2, #0]
}
 800758e:	bf00      	nop
 8007590:	3724      	adds	r7, #36	@ 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e25e      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d075      	beq.n	80076a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ba:	4b88      	ldr	r3, [pc, #544]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 030c 	and.w	r3, r3, #12
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d00c      	beq.n	80075e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075c6:	4b85      	ldr	r3, [pc, #532]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ce:	2b08      	cmp	r3, #8
 80075d0:	d112      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075d2:	4b82      	ldr	r3, [pc, #520]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075de:	d10b      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	4b7e      	ldr	r3, [pc, #504]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d05b      	beq.n	80076a4 <HAL_RCC_OscConfig+0x108>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d157      	bne.n	80076a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e239      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d106      	bne.n	8007610 <HAL_RCC_OscConfig+0x74>
 8007602:	4b76      	ldr	r3, [pc, #472]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a75      	ldr	r2, [pc, #468]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e01d      	b.n	800764c <HAL_RCC_OscConfig+0xb0>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007618:	d10c      	bne.n	8007634 <HAL_RCC_OscConfig+0x98>
 800761a:	4b70      	ldr	r3, [pc, #448]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6f      	ldr	r2, [pc, #444]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	4b6d      	ldr	r3, [pc, #436]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6c      	ldr	r2, [pc, #432]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 800762c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	e00b      	b.n	800764c <HAL_RCC_OscConfig+0xb0>
 8007634:	4b69      	ldr	r3, [pc, #420]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a68      	ldr	r2, [pc, #416]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 800763a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b66      	ldr	r3, [pc, #408]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a65      	ldr	r2, [pc, #404]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800764a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d013      	beq.n	800767c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fd fd5e 	bl	8005114 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800765c:	f7fd fd5a 	bl	8005114 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	@ 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e1fe      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766e:	4b5b      	ldr	r3, [pc, #364]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0xc0>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fd fd4a 	bl	8005114 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007684:	f7fd fd46 	bl	8005114 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	@ 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e1ea      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007696:	4b51      	ldr	r3, [pc, #324]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0xe8>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d063      	beq.n	800777a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076b2:	4b4a      	ldr	r3, [pc, #296]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076be:	4b47      	ldr	r3, [pc, #284]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d11c      	bne.n	8007704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d116      	bne.n	8007704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d6:	4b41      	ldr	r3, [pc, #260]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_RCC_OscConfig+0x152>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d001      	beq.n	80076ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e1be      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ee:	4b3b      	ldr	r3, [pc, #236]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4937      	ldr	r1, [pc, #220]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007702:	e03a      	b.n	800777a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d020      	beq.n	800774e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800770c:	4b34      	ldr	r3, [pc, #208]	@ (80077e0 <HAL_RCC_OscConfig+0x244>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007712:	f7fd fcff 	bl	8005114 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800771a:	f7fd fcfb 	bl	8005114 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e19f      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772c:	4b2b      	ldr	r3, [pc, #172]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007738:	4b28      	ldr	r3, [pc, #160]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	4925      	ldr	r1, [pc, #148]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007748:	4313      	orrs	r3, r2
 800774a:	600b      	str	r3, [r1, #0]
 800774c:	e015      	b.n	800777a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800774e:	4b24      	ldr	r3, [pc, #144]	@ (80077e0 <HAL_RCC_OscConfig+0x244>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007754:	f7fd fcde 	bl	8005114 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800775c:	f7fd fcda 	bl	8005114 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e17e      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800776e:	4b1b      	ldr	r3, [pc, #108]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f0      	bne.n	800775c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d036      	beq.n	80077f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d016      	beq.n	80077bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800778e:	4b15      	ldr	r3, [pc, #84]	@ (80077e4 <HAL_RCC_OscConfig+0x248>)
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fd fcbe 	bl	8005114 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779c:	f7fd fcba 	bl	8005114 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e15e      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ae:	4b0b      	ldr	r3, [pc, #44]	@ (80077dc <HAL_RCC_OscConfig+0x240>)
 80077b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0f0      	beq.n	800779c <HAL_RCC_OscConfig+0x200>
 80077ba:	e01b      	b.n	80077f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077bc:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <HAL_RCC_OscConfig+0x248>)
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c2:	f7fd fca7 	bl	8005114 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c8:	e00e      	b.n	80077e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ca:	f7fd fca3 	bl	8005114 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d907      	bls.n	80077e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e147      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
 80077dc:	40023800 	.word	0x40023800
 80077e0:	42470000 	.word	0x42470000
 80077e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077e8:	4b88      	ldr	r3, [pc, #544]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80077ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1ea      	bne.n	80077ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8097 	beq.w	8007930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007806:	4b81      	ldr	r3, [pc, #516]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	4b7d      	ldr	r3, [pc, #500]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	4a7c      	ldr	r2, [pc, #496]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	@ 0x40
 8007822:	4b7a      	ldr	r3, [pc, #488]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007832:	4b77      	ldr	r3, [pc, #476]	@ (8007a10 <HAL_RCC_OscConfig+0x474>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d118      	bne.n	8007870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800783e:	4b74      	ldr	r3, [pc, #464]	@ (8007a10 <HAL_RCC_OscConfig+0x474>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a73      	ldr	r2, [pc, #460]	@ (8007a10 <HAL_RCC_OscConfig+0x474>)
 8007844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784a:	f7fd fc63 	bl	8005114 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007852:	f7fd fc5f 	bl	8005114 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e103      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007864:	4b6a      	ldr	r3, [pc, #424]	@ (8007a10 <HAL_RCC_OscConfig+0x474>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <HAL_RCC_OscConfig+0x2ea>
 8007878:	4b64      	ldr	r3, [pc, #400]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787c:	4a63      	ldr	r2, [pc, #396]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	@ 0x70
 8007884:	e01c      	b.n	80078c0 <HAL_RCC_OscConfig+0x324>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b05      	cmp	r3, #5
 800788c:	d10c      	bne.n	80078a8 <HAL_RCC_OscConfig+0x30c>
 800788e:	4b5f      	ldr	r3, [pc, #380]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007892:	4a5e      	ldr	r2, [pc, #376]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007894:	f043 0304 	orr.w	r3, r3, #4
 8007898:	6713      	str	r3, [r2, #112]	@ 0x70
 800789a:	4b5c      	ldr	r3, [pc, #368]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789e:	4a5b      	ldr	r2, [pc, #364]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80078a6:	e00b      	b.n	80078c0 <HAL_RCC_OscConfig+0x324>
 80078a8:	4b58      	ldr	r3, [pc, #352]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ac:	4a57      	ldr	r2, [pc, #348]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078b4:	4b55      	ldr	r3, [pc, #340]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	4a54      	ldr	r2, [pc, #336]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078ba:	f023 0304 	bic.w	r3, r3, #4
 80078be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d015      	beq.n	80078f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c8:	f7fd fc24 	bl	8005114 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fd fc20 	bl	8005114 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e0c2      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e6:	4b49      	ldr	r3, [pc, #292]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0ee      	beq.n	80078d0 <HAL_RCC_OscConfig+0x334>
 80078f2:	e014      	b.n	800791e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078f4:	f7fd fc0e 	bl	8005114 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078fa:	e00a      	b.n	8007912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078fc:	f7fd fc0a 	bl	8005114 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e0ac      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007912:	4b3e      	ldr	r3, [pc, #248]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ee      	bne.n	80078fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d105      	bne.n	8007930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007924:	4b39      	ldr	r3, [pc, #228]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007928:	4a38      	ldr	r2, [pc, #224]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800792a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800792e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8098 	beq.w	8007a6a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800793a:	4b34      	ldr	r3, [pc, #208]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 030c 	and.w	r3, r3, #12
 8007942:	2b08      	cmp	r3, #8
 8007944:	d05c      	beq.n	8007a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d141      	bne.n	80079d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794e:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <HAL_RCC_OscConfig+0x478>)
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007954:	f7fd fbde 	bl	8005114 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800795c:	f7fd fbda 	bl	8005114 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e07e      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796e:	4b27      	ldr	r3, [pc, #156]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69da      	ldr	r2, [r3, #28]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	019b      	lsls	r3, r3, #6
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	3b01      	subs	r3, #1
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	491b      	ldr	r1, [pc, #108]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <HAL_RCC_OscConfig+0x478>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079aa:	f7fd fbb3 	bl	8005114 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b2:	f7fd fbaf 	bl	8005114 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e053      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079c4:	4b11      	ldr	r3, [pc, #68]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <HAL_RCC_OscConfig+0x416>
 80079d0:	e04b      	b.n	8007a6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <HAL_RCC_OscConfig+0x478>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7fd fb9c 	bl	8005114 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e0:	f7fd fb98 	bl	8005114 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e03c      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f2:	4b06      	ldr	r3, [pc, #24]	@ (8007a0c <HAL_RCC_OscConfig+0x470>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x444>
 80079fe:	e034      	b.n	8007a6a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d107      	bne.n	8007a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e02f      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	40007000 	.word	0x40007000
 8007a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a18:	4b16      	ldr	r3, [pc, #88]	@ (8007a74 <HAL_RCC_OscConfig+0x4d8>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d11c      	bne.n	8007a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d115      	bne.n	8007a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a40:	4013      	ands	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d10d      	bne.n	8007a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d106      	bne.n	8007a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d001      	beq.n	8007a6a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40023800 	.word	0x40023800

08007a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0cc      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b68      	ldr	r3, [pc, #416]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d90c      	bls.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b65      	ldr	r3, [pc, #404]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa2:	4b63      	ldr	r3, [pc, #396]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d001      	beq.n	8007ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0b8      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d020      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007acc:	4b59      	ldr	r3, [pc, #356]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a58      	ldr	r2, [pc, #352]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ae4:	4b53      	ldr	r3, [pc, #332]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4a52      	ldr	r2, [pc, #328]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007aea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af0:	4b50      	ldr	r3, [pc, #320]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	494d      	ldr	r1, [pc, #308]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d044      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b16:	4b47      	ldr	r3, [pc, #284]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d119      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e07f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b36:	4b3f      	ldr	r3, [pc, #252]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e06f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b3b      	ldr	r3, [pc, #236]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e067      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b56:	4b37      	ldr	r3, [pc, #220]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0203 	bic.w	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4934      	ldr	r1, [pc, #208]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b68:	f7fd fad4 	bl	8005114 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fd fad0 	bl	8005114 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e04f      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	4b2b      	ldr	r3, [pc, #172]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 020c 	and.w	r2, r3, #12
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1eb      	bne.n	8007b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4b25      	ldr	r3, [pc, #148]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d20c      	bcs.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b20      	ldr	r3, [pc, #128]	@ (8007c30 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e032      	b.n	8007c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bcc:	4b19      	ldr	r3, [pc, #100]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4916      	ldr	r1, [pc, #88]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bea:	4b12      	ldr	r3, [pc, #72]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	490e      	ldr	r1, [pc, #56]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bfe:	f000 f821 	bl	8007c44 <HAL_RCC_GetSysClockFreq>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <HAL_RCC_ClockConfig+0x1bc>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	490a      	ldr	r1, [pc, #40]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c0>)
 8007c10:	5ccb      	ldrb	r3, [r1, r3]
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	4a09      	ldr	r2, [pc, #36]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c1a:	4b09      	ldr	r3, [pc, #36]	@ (8007c40 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fa34 	bl	800508c <HAL_InitTick>

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40023c00 	.word	0x40023c00
 8007c34:	40023800 	.word	0x40023800
 8007c38:	0800ee28 	.word	0x0800ee28
 8007c3c:	20000060 	.word	0x20000060
 8007c40:	200000f0 	.word	0x200000f0

08007c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c48:	b094      	sub	sp, #80	@ 0x50
 8007c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c50:	2300      	movs	r3, #0
 8007c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c54:	2300      	movs	r3, #0
 8007c56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c5c:	4b79      	ldr	r3, [pc, #484]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 030c 	and.w	r3, r3, #12
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d00d      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0x40>
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	f200 80e1 	bhi.w	8007e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <HAL_RCC_GetSysClockFreq+0x34>
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d003      	beq.n	8007c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c76:	e0db      	b.n	8007e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c78:	4b73      	ldr	r3, [pc, #460]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007c7c:	e0db      	b.n	8007e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c7e:	4b73      	ldr	r3, [pc, #460]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8007c80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c82:	e0d8      	b.n	8007e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c84:	4b6f      	ldr	r3, [pc, #444]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d063      	beq.n	8007d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	099b      	lsrs	r3, r3, #6
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ca4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cae:	2300      	movs	r3, #0
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	f04f 0000 	mov.w	r0, #0
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	0159      	lsls	r1, r3, #5
 8007cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cc8:	0150      	lsls	r0, r2, #5
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4621      	mov	r1, r4
 8007cd0:	1a51      	subs	r1, r2, r1
 8007cd2:	6139      	str	r1, [r7, #16]
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ce8:	4659      	mov	r1, fp
 8007cea:	018b      	lsls	r3, r1, #6
 8007cec:	4651      	mov	r1, sl
 8007cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	018a      	lsls	r2, r1, #6
 8007cf6:	4651      	mov	r1, sl
 8007cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d16:	4690      	mov	r8, r2
 8007d18:	4699      	mov	r9, r3
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	eb18 0303 	adds.w	r3, r8, r3
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	462b      	mov	r3, r5
 8007d24:	eb49 0303 	adc.w	r3, r9, r3
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d36:	4629      	mov	r1, r5
 8007d38:	024b      	lsls	r3, r1, #9
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d40:	4621      	mov	r1, r4
 8007d42:	024a      	lsls	r2, r1, #9
 8007d44:	4610      	mov	r0, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d54:	f7f8 ffa8 	bl	8000ca8 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d60:	e058      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d62:	4b38      	ldr	r3, [pc, #224]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d72:	623b      	str	r3, [r7, #32]
 8007d74:	2300      	movs	r3, #0
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	f04f 0000 	mov.w	r0, #0
 8007d84:	f04f 0100 	mov.w	r1, #0
 8007d88:	0159      	lsls	r1, r3, #5
 8007d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d8e:	0150      	lsls	r0, r2, #5
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4641      	mov	r1, r8
 8007d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007db4:	ebb2 040a 	subs.w	r4, r2, sl
 8007db8:	eb63 050b 	sbc.w	r5, r3, fp
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	00eb      	lsls	r3, r5, #3
 8007dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dca:	00e2      	lsls	r2, r4, #3
 8007dcc:	4614      	mov	r4, r2
 8007dce:	461d      	mov	r5, r3
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	18e3      	adds	r3, r4, r3
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	eb45 0303 	adc.w	r3, r5, r3
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007dea:	4629      	mov	r1, r5
 8007dec:	028b      	lsls	r3, r1, #10
 8007dee:	4621      	mov	r1, r4
 8007df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007df4:	4621      	mov	r1, r4
 8007df6:	028a      	lsls	r2, r1, #10
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dfe:	2200      	movs	r2, #0
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	61fa      	str	r2, [r7, #28]
 8007e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e08:	f7f8 ff4e 	bl	8000ca8 <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4613      	mov	r3, r2
 8007e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	0c1b      	lsrs	r3, r3, #16
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	3301      	adds	r3, #1
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007e24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e2e:	e002      	b.n	8007e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3750      	adds	r7, #80	@ 0x50
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	40023800 	.word	0x40023800
 8007e48:	00f42400 	.word	0x00f42400
 8007e4c:	007a1200 	.word	0x007a1200

08007e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e54:	4b03      	ldr	r3, [pc, #12]	@ (8007e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e56:	681b      	ldr	r3, [r3, #0]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000060 	.word	0x20000060

08007e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e6c:	f7ff fff0 	bl	8007e50 <HAL_RCC_GetHCLKFreq>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	0a9b      	lsrs	r3, r3, #10
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	4903      	ldr	r1, [pc, #12]	@ (8007e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e7e:	5ccb      	ldrb	r3, [r1, r3]
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	0800ee38 	.word	0x0800ee38

08007e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e94:	f7ff ffdc 	bl	8007e50 <HAL_RCC_GetHCLKFreq>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	0b5b      	lsrs	r3, r3, #13
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	4903      	ldr	r1, [pc, #12]	@ (8007eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ea6:	5ccb      	ldrb	r3, [r1, r3]
 8007ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	0800ee38 	.word	0x0800ee38

08007eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d075      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007eec:	4b91      	ldr	r3, [pc, #580]	@ (8008134 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ef2:	f7fd f90f 	bl	8005114 <HAL_GetTick>
 8007ef6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ef8:	e008      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007efa:	f7fd f90b 	bl	8005114 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e189      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f0      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d009      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	019a      	lsls	r2, r3, #6
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	071b      	lsls	r3, r3, #28
 8007f30:	4981      	ldr	r1, [pc, #516]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01f      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f44:	4b7c      	ldr	r3, [pc, #496]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f4a:	0f1b      	lsrs	r3, r3, #28
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	019a      	lsls	r2, r3, #6
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	061b      	lsls	r3, r3, #24
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	071b      	lsls	r3, r3, #28
 8007f64:	4974      	ldr	r1, [pc, #464]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f6c:	4b72      	ldr	r3, [pc, #456]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f72:	f023 021f 	bic.w	r2, r3, #31
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	496e      	ldr	r1, [pc, #440]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00d      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	019a      	lsls	r2, r3, #6
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	071b      	lsls	r3, r3, #28
 8007fa4:	4964      	ldr	r1, [pc, #400]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fac:	4b61      	ldr	r3, [pc, #388]	@ (8008134 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb2:	f7fd f8af 	bl	8005114 <HAL_GetTick>
 8007fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fba:	f7fd f8ab 	bl	8005114 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e129      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d079      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ff0:	4b52      	ldr	r3, [pc, #328]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ff6:	f7fd f88d 	bl	8005114 <HAL_GetTick>
 8007ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ffc:	e008      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007ffe:	f7fd f889 	bl	8005114 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e107      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008010:	4b49      	ldr	r3, [pc, #292]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800801c:	d0ef      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d020      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800802a:	4b43      	ldr	r3, [pc, #268]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008030:	0f1b      	lsrs	r3, r3, #28
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	019a      	lsls	r2, r3, #6
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	061b      	lsls	r3, r3, #24
 8008044:	431a      	orrs	r2, r3
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	071b      	lsls	r3, r3, #28
 800804a:	493b      	ldr	r1, [pc, #236]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008052:	4b39      	ldr	r3, [pc, #228]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008058:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	3b01      	subs	r3, #1
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	4934      	ldr	r1, [pc, #208]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01e      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008078:	4b2f      	ldr	r3, [pc, #188]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807e:	0e1b      	lsrs	r3, r3, #24
 8008080:	f003 030f 	and.w	r3, r3, #15
 8008084:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	019a      	lsls	r2, r3, #6
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	071b      	lsls	r3, r3, #28
 8008098:	4927      	ldr	r1, [pc, #156]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080a0:	4b25      	ldr	r3, [pc, #148]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	4922      	ldr	r1, [pc, #136]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080b6:	4b21      	ldr	r3, [pc, #132]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080bc:	f7fd f82a 	bl	8005114 <HAL_GetTick>
 80080c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80080c4:	f7fd f826 	bl	8005114 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e0a4      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080d6:	4b18      	ldr	r3, [pc, #96]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e2:	d1ef      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 808b 	beq.w	8008208 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	4b10      	ldr	r3, [pc, #64]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fa:	4a0f      	ldr	r2, [pc, #60]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008100:	6413      	str	r3, [r2, #64]	@ 0x40
 8008102:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800810e:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a0b      	ldr	r2, [pc, #44]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008118:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800811a:	f7fc fffb 	bl	8005114 <HAL_GetTick>
 800811e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008120:	e010      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008122:	f7fc fff7 	bl	8005114 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d909      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e075      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008134:	42470068 	.word	0x42470068
 8008138:	40023800 	.word	0x40023800
 800813c:	42470070 	.word	0x42470070
 8008140:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008144:	4b38      	ldr	r3, [pc, #224]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0e8      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008150:	4b36      	ldr	r3, [pc, #216]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008158:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d02f      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d028      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800816e:	4b2f      	ldr	r3, [pc, #188]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008176:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008178:	4b2d      	ldr	r3, [pc, #180]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800817e:	4b2c      	ldr	r3, [pc, #176]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008184:	4a29      	ldr	r2, [pc, #164]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800818a:	4b28      	ldr	r3, [pc, #160]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d114      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008196:	f7fc ffbd 	bl	8005114 <HAL_GetTick>
 800819a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800819c:	e00a      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800819e:	f7fc ffb9 	bl	8005114 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e035      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b4:	4b1d      	ldr	r3, [pc, #116]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0ee      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081cc:	d10d      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80081ce:	4b17      	ldr	r3, [pc, #92]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80081de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e2:	4912      	ldr	r1, [pc, #72]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	608b      	str	r3, [r1, #8]
 80081e8:	e005      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80081ea:	4b10      	ldr	r3, [pc, #64]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4a0f      	ldr	r2, [pc, #60]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	4b0d      	ldr	r3, [pc, #52]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008202:	490a      	ldr	r1, [pc, #40]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008204:	4313      	orrs	r3, r2
 8008206:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800821a:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800821c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40007000 	.word	0x40007000
 800822c:	40023800 	.word	0x40023800
 8008230:	42470e40 	.word	0x42470e40
 8008234:	424711e0 	.word	0x424711e0

08008238 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e025      	b.n	8008298 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f81d 	bl	80082a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f001 fd0f 	bl	8009c9c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	461a      	mov	r2, r3
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	f001 fd7a 	bl	8009d82 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d101      	bne.n	80082d0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80082cc:	2302      	movs	r3, #2
 80082ce:	e018      	b.n	8008302 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 fdcd 	bl	8009e80 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d104      	bne.n	80082f8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2205      	movs	r2, #5
 80082f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80082f6:	e003      	b.n	8008300 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d101      	bne.n	8008324 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008320:	2302      	movs	r3, #2
 8008322:	e00e      	b.n	8008342 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fde0 	bl	8009ef8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e05d      	b.n	8008418 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f87d 	bl	8008470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800838c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	ea42 0103 	orr.w	r1, r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	f003 0104 	and.w	r1, r3, #4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ec:	d104      	bne.n	80083f8 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80083f6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008406:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e01a      	b.n	8008468 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008448:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f81a 	bl	8008484 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d101      	bne.n	80084ba <HAL_SPI_Transmit+0x22>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e140      	b.n	800873c <HAL_SPI_Transmit+0x2a4>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084c2:	f7fc fe27 	bl	8005114 <HAL_GetTick>
 80084c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084c8:	88fb      	ldrh	r3, [r7, #6]
 80084ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d002      	beq.n	80084de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084d8:	2302      	movs	r3, #2
 80084da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084dc:	e125      	b.n	800872a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <HAL_SPI_Transmit+0x52>
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084ee:	e11c      	b.n	800872a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2203      	movs	r2, #3
 80084f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	88fa      	ldrh	r2, [r7, #6]
 800850e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008536:	d107      	bne.n	8008548 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008546:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008550:	d10f      	bne.n	8008572 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008570:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857c:	2b40      	cmp	r3, #64	@ 0x40
 800857e:	d007      	beq.n	8008590 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800858e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008598:	d14b      	bne.n	8008632 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <HAL_SPI_Transmit+0x110>
 80085a2:	8afb      	ldrh	r3, [r7, #22]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d13e      	bne.n	8008626 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ac:	881a      	ldrh	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b8:	1c9a      	adds	r2, r3, #2
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085cc:	e02b      	b.n	8008626 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d112      	bne.n	8008602 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e0:	881a      	ldrh	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	1c9a      	adds	r2, r3, #2
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008600:	e011      	b.n	8008626 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008602:	f7fc fd87 	bl	8005114 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d803      	bhi.n	800861a <HAL_SPI_Transmit+0x182>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d102      	bne.n	8008620 <HAL_SPI_Transmit+0x188>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008624:	e081      	b.n	800872a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ce      	bne.n	80085ce <HAL_SPI_Transmit+0x136>
 8008630:	e04c      	b.n	80086cc <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_SPI_Transmit+0x1a8>
 800863a:	8afb      	ldrh	r3, [r7, #22]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d140      	bne.n	80086c2 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008666:	e02c      	b.n	80086c2 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b02      	cmp	r3, #2
 8008674:	d113      	bne.n	800869e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800869c:	e011      	b.n	80086c2 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800869e:	f7fc fd39 	bl	8005114 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d803      	bhi.n	80086b6 <HAL_SPI_Transmit+0x21e>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d102      	bne.n	80086bc <HAL_SPI_Transmit+0x224>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086c0:	e033      	b.n	800872a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1cd      	bne.n	8008668 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086d4:	d107      	bne.n	80086e6 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086e4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 fc94 	bl	8009018 <SPI_EndRxTxTransaction>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2220      	movs	r2, #32
 80086fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e000      	b.n	800872a <HAL_SPI_Transmit+0x292>
  }

error:
 8008728:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800873a:	7ffb      	ldrb	r3, [r7, #31]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3720      	adds	r7, #32
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008760:	d112      	bne.n	8008788 <HAL_SPI_Receive+0x44>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10e      	bne.n	8008788 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2204      	movs	r2, #4
 800876e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4613      	mov	r3, r2
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f95f 	bl	8008a42 <HAL_SPI_TransmitReceive>
 8008784:	4603      	mov	r3, r0
 8008786:	e158      	b.n	8008a3a <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_SPI_Receive+0x52>
 8008792:	2302      	movs	r3, #2
 8008794:	e151      	b.n	8008a3a <HAL_SPI_Receive+0x2f6>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800879e:	f7fc fcb9 	bl	8005114 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d002      	beq.n	80087b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80087b0:	2302      	movs	r3, #2
 80087b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087b4:	e138      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_SPI_Receive+0x7e>
 80087bc:	88fb      	ldrh	r3, [r7, #6]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087c6:	e12f      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2204      	movs	r2, #4
 80087cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	88fa      	ldrh	r2, [r7, #6]
 80087e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800880e:	d116      	bne.n	800883e <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800882e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008846:	d107      	bne.n	8008858 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008856:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008862:	2b40      	cmp	r3, #64	@ 0x40
 8008864:	d007      	beq.n	8008876 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008874:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d162      	bne.n	8008944 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800887e:	e02e      	b.n	80088de <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b01      	cmp	r3, #1
 800888c:	d115      	bne.n	80088ba <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f103 020c 	add.w	r2, r3, #12
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80088b8:	e011      	b.n	80088de <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ba:	f7fc fc2b 	bl	8005114 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d803      	bhi.n	80088d2 <HAL_SPI_Receive+0x18e>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d102      	bne.n	80088d8 <HAL_SPI_Receive+0x194>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088dc:	e0a4      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1cb      	bne.n	8008880 <HAL_SPI_Receive+0x13c>
 80088e8:	e031      	b.n	800894e <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d113      	bne.n	8008920 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008902:	b292      	uxth	r2, r2
 8008904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	1c9a      	adds	r2, r3, #2
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800891e:	e011      	b.n	8008944 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008920:	f7fc fbf8 	bl	8005114 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d803      	bhi.n	8008938 <HAL_SPI_Receive+0x1f4>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d102      	bne.n	800893e <HAL_SPI_Receive+0x1fa>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008942:	e071      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1cd      	bne.n	80088ea <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008956:	d142      	bne.n	80089de <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008966:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2201      	movs	r2, #1
 8008970:	2101      	movs	r1, #1
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fa81 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008982:	e051      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800898c:	d107      	bne.n	800899e <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008998:	b292      	uxth	r2, r2
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e008      	b.n	80089b0 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f103 020c 	add.w	r2, r3, #12
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	7812      	ldrb	r2, [r2, #0]
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2201      	movs	r2, #1
 80089b8:	2101      	movs	r1, #1
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fa5d 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ca:	f043 0202 	orr.w	r2, r3, #2
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	75fb      	strb	r3, [r7, #23]
      goto error;
 80089d6:	e027      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fab3 	bl	8008f4e <SPI_EndRxTransaction>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d10a      	bne.n	8008a18 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a06:	f043 0202 	orr.w	r2, r3, #2
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008a16:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
 8008a24:	e000      	b.n	8008a28 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08e      	sub	sp, #56	@ 0x38
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a50:	2301      	movs	r3, #1
 8008a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_SPI_TransmitReceive+0x26>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e1f6      	b.n	8008e56 <HAL_SPI_TransmitReceive+0x414>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a70:	f7fc fb50 	bl	8005114 <HAL_GetTick>
 8008a74:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a86:	887b      	ldrh	r3, [r7, #2]
 8008a88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d00f      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x70>
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a98:	d107      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x68>
 8008aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d003      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008ab0:	e1c7      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <HAL_SPI_TransmitReceive+0x82>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_SPI_TransmitReceive+0x82>
 8008abe:	887b      	ldrh	r3, [r7, #2]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008aca:	e1ba      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d003      	beq.n	8008ae0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2205      	movs	r2, #5
 8008adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	887a      	ldrh	r2, [r7, #2]
 8008af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	887a      	ldrh	r2, [r7, #2]
 8008af6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	887a      	ldrh	r2, [r7, #2]
 8008b02:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	887a      	ldrh	r2, [r7, #2]
 8008b08:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b1e:	d10f      	bne.n	8008b40 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b3e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4a:	2b40      	cmp	r3, #64	@ 0x40
 8008b4c:	d007      	beq.n	8008b5e <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b66:	f040 808b 	bne.w	8008c80 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_SPI_TransmitReceive+0x136>
 8008b72:	8b7b      	ldrh	r3, [r7, #26]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d178      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b88:	1c9a      	adds	r2, r3, #2
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b9c:	e065      	b.n	8008c6a <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d12d      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x1c6>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d028      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x1c6>
 8008bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d125      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10c      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x1c6>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf6:	d107      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c06:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d119      	bne.n	8008c4a <HAL_SPI_TransmitReceive+0x208>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d014      	beq.n	8008c4a <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c32:	1c9a      	adds	r2, r3, #2
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c46:	2301      	movs	r3, #1
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c4a:	f7fc fa63 	bl	8005114 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d807      	bhi.n	8008c6a <HAL_SPI_TransmitReceive+0x228>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c60:	d003      	beq.n	8008c6a <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008c68:	e0eb      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d194      	bne.n	8008b9e <HAL_SPI_TransmitReceive+0x15c>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d18f      	bne.n	8008b9e <HAL_SPI_TransmitReceive+0x15c>
 8008c7e:	e08e      	b.n	8008d9e <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <HAL_SPI_TransmitReceive+0x24c>
 8008c88:	8b7b      	ldrh	r3, [r7, #26]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d17d      	bne.n	8008d8a <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	330c      	adds	r3, #12
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cb4:	e069      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d12e      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x2e0>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d029      	beq.n	8008d22 <HAL_SPI_TransmitReceive+0x2e0>
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d126      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	7812      	ldrb	r2, [r2, #0]
 8008ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10c      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x2e0>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d10:	d107      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d20:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d119      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x322>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d014      	beq.n	8008d64 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d60:	2301      	movs	r3, #1
 8008d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d64:	f7fc f9d6 	bl	8005114 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d803      	bhi.n	8008d7c <HAL_SPI_TransmitReceive+0x33a>
 8008d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d102      	bne.n	8008d82 <HAL_SPI_TransmitReceive+0x340>
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d103      	bne.n	8008d8a <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008d88:	e05b      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d190      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x274>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d18b      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da6:	d117      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dae:	2201      	movs	r2, #1
 8008db0:	2101      	movs	r1, #1
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f861 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc2:	f043 0202 	orr.w	r2, r3, #2
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008dd0:	e037      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0310 	and.w	r3, r3, #16
 8008de2:	2b10      	cmp	r3, #16
 8008de4:	d10d      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dea:	f043 0202 	orr.w	r2, r3, #2
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008dfa:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f906 	bl	8009018 <SPI_EndRxTxTransaction>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d006      	beq.n	8008e20 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008e1e:	e010      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10b      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	e000      	b.n	8008e42 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	@ 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e6c:	b2db      	uxtb	r3, r3
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	603b      	str	r3, [r7, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e8a:	e04c      	b.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d048      	beq.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008e94:	f7fc f93e 	bl	8005114 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d902      	bls.n	8008eaa <SPI_WaitFlagStateUntilTimeout+0x30>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d13d      	bne.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ec2:	d111      	bne.n	8008ee8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ecc:	d004      	beq.n	8008ed8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed6:	d107      	bne.n	8008ee8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef0:	d10f      	bne.n	8008f12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e00f      	b.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	bf0c      	ite	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	2300      	movne	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d1a3      	bne.n	8008e8c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af02      	add	r7, sp, #8
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f62:	d111      	bne.n	8008f88 <SPI_EndRxTransaction+0x3a>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f6c:	d004      	beq.n	8008f78 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f76:	d107      	bne.n	8008f88 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f86:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f90:	d12a      	bne.n	8008fe8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9a:	d012      	beq.n	8008fc2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2180      	movs	r1, #128	@ 0x80
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff ff67 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d02d      	beq.n	800900e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb6:	f043 0220 	orr.w	r2, r3, #32
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e026      	b.n	8009010 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2101      	movs	r1, #1
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff ff54 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01a      	beq.n	800900e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fdc:	f043 0220 	orr.w	r2, r3, #32
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e013      	b.n	8009010 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7ff ff41 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009002:	f043 0220 	orr.w	r2, r3, #32
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e000      	b.n	8009010 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af02      	add	r7, sp, #8
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009024:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <SPI_EndRxTxTransaction+0x7c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1b      	ldr	r2, [pc, #108]	@ (8009098 <SPI_EndRxTxTransaction+0x80>)
 800902a:	fba2 2303 	umull	r2, r3, r2, r3
 800902e:	0d5b      	lsrs	r3, r3, #21
 8009030:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009034:	fb02 f303 	mul.w	r3, r2, r3
 8009038:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009042:	d112      	bne.n	800906a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	2180      	movs	r1, #128	@ 0x80
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff ff13 	bl	8008e7a <SPI_WaitFlagStateUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d016      	beq.n	8009088 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905e:	f043 0220 	orr.w	r2, r3, #32
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e00f      	b.n	800908a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	3b01      	subs	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009080:	2b80      	cmp	r3, #128	@ 0x80
 8009082:	d0f2      	beq.n	800906a <SPI_EndRxTxTransaction+0x52>
 8009084:	e000      	b.n	8009088 <SPI_EndRxTxTransaction+0x70>
        break;
 8009086:	bf00      	nop
  }

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000060 	.word	0x20000060
 8009098:	165e9f81 	.word	0x165e9f81

0800909c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e03f      	b.n	800912e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 fe12 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2224      	movs	r2, #36	@ 0x24
 80090cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f90b 	bl	80092fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b088      	sub	sp, #32
 800913a:	af02      	add	r7, sp, #8
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	603b      	str	r3, [r7, #0]
 8009142:	4613      	mov	r3, r2
 8009144:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b20      	cmp	r3, #32
 8009154:	f040 8083 	bne.w	800925e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_UART_Transmit+0x2e>
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e07b      	b.n	8009260 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_UART_Transmit+0x40>
 8009172:	2302      	movs	r3, #2
 8009174:	e074      	b.n	8009260 <HAL_UART_Transmit+0x12a>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2221      	movs	r2, #33	@ 0x21
 8009188:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800918c:	f7fb ffc2 	bl	8005114 <HAL_GetTick>
 8009190:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80091a6:	e042      	b.n	800922e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091be:	d122      	bne.n	8009206 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2200      	movs	r2, #0
 80091c8:	2180      	movs	r1, #128	@ 0x80
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f84c 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e042      	b.n	8009260 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d103      	bne.n	80091fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3302      	adds	r3, #2
 80091fa:	60bb      	str	r3, [r7, #8]
 80091fc:	e017      	b.n	800922e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3301      	adds	r3, #1
 8009202:	60bb      	str	r3, [r7, #8]
 8009204:	e013      	b.n	800922e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2200      	movs	r2, #0
 800920e:	2180      	movs	r1, #128	@ 0x80
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f829 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e01f      	b.n	8009260 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	60ba      	str	r2, [r7, #8]
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1b7      	bne.n	80091a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2200      	movs	r2, #0
 8009240:	2140      	movs	r1, #64	@ 0x40
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f810 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e006      	b.n	8009260 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	e000      	b.n	8009260 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800925e:	2302      	movs	r3, #2
  }
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4613      	mov	r3, r2
 8009276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009278:	e02c      	b.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d028      	beq.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <UART_WaitOnFlagUntilTimeout+0x30>
 8009288:	f7fb ff44 	bl	8005114 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	429a      	cmp	r2, r3
 8009296:	d21d      	bcs.n	80092d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80092a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e00f      	b.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4013      	ands	r3, r2
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	bf0c      	ite	eq
 80092e4:	2301      	moveq	r3, #1
 80092e6:	2300      	movne	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d0c3      	beq.n	800927a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009300:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8009304:	af00      	add	r7, sp, #0
 8009306:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800930a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009316:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800931a:	68d9      	ldr	r1, [r3, #12]
 800931c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	ea40 0301 	orr.w	r3, r0, r1
 8009326:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009328:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	431a      	orrs	r2, r3
 8009336:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	431a      	orrs	r2, r3
 800933e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	4313      	orrs	r3, r2
 8009346:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800934a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009356:	f021 010c 	bic.w	r1, r1, #12
 800935a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8009364:	430b      	orrs	r3, r1
 8009366:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009368:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009378:	6999      	ldr	r1, [r3, #24]
 800937a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	ea40 0301 	orr.w	r3, r0, r1
 8009384:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009386:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009390:	f040 824a 	bne.w	8009828 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009394:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4b96      	ldr	r3, [pc, #600]	@ (80095f4 <UART_SetConfig+0x2f8>)
 800939c:	429a      	cmp	r2, r3
 800939e:	d006      	beq.n	80093ae <UART_SetConfig+0xb2>
 80093a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4b94      	ldr	r3, [pc, #592]	@ (80095f8 <UART_SetConfig+0x2fc>)
 80093a8:	429a      	cmp	r2, r3
 80093aa:	f040 8129 	bne.w	8009600 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093ae:	f7fe fd6f 	bl	8007e90 <HAL_RCC_GetPCLK2Freq>
 80093b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80093c0:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80093c4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	1891      	adds	r1, r2, r2
 80093ce:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80093d2:	415b      	adcs	r3, r3
 80093d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093d8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80093dc:	4621      	mov	r1, r4
 80093de:	1851      	adds	r1, r2, r1
 80093e0:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80093e4:	4629      	mov	r1, r5
 80093e6:	414b      	adcs	r3, r1
 80093e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80093f8:	4649      	mov	r1, r9
 80093fa:	00cb      	lsls	r3, r1, #3
 80093fc:	4641      	mov	r1, r8
 80093fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009402:	4641      	mov	r1, r8
 8009404:	00ca      	lsls	r2, r1, #3
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	4603      	mov	r3, r0
 800940c:	4622      	mov	r2, r4
 800940e:	189b      	adds	r3, r3, r2
 8009410:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8009414:	462b      	mov	r3, r5
 8009416:	460a      	mov	r2, r1
 8009418:	eb42 0303 	adc.w	r3, r2, r3
 800941c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8009420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800942c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8009430:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8009434:	460b      	mov	r3, r1
 8009436:	18db      	adds	r3, r3, r3
 8009438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800943c:	4613      	mov	r3, r2
 800943e:	eb42 0303 	adc.w	r3, r2, r3
 8009442:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009446:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800944a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800944e:	f7f7 fc2b 	bl	8000ca8 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4b69      	ldr	r3, [pc, #420]	@ (80095fc <UART_SetConfig+0x300>)
 8009458:	fba3 2302 	umull	r2, r3, r3, r2
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	011c      	lsls	r4, r3, #4
 8009460:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800946a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800946e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8009472:	4642      	mov	r2, r8
 8009474:	464b      	mov	r3, r9
 8009476:	1891      	adds	r1, r2, r2
 8009478:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800947c:	415b      	adcs	r3, r3
 800947e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009482:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8009486:	4641      	mov	r1, r8
 8009488:	1851      	adds	r1, r2, r1
 800948a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800948e:	4649      	mov	r1, r9
 8009490:	414b      	adcs	r3, r1
 8009492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80094a2:	4659      	mov	r1, fp
 80094a4:	00cb      	lsls	r3, r1, #3
 80094a6:	4651      	mov	r1, sl
 80094a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ac:	4651      	mov	r1, sl
 80094ae:	00ca      	lsls	r2, r1, #3
 80094b0:	4610      	mov	r0, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	4642      	mov	r2, r8
 80094b8:	189b      	adds	r3, r3, r2
 80094ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80094be:	464b      	mov	r3, r9
 80094c0:	460a      	mov	r2, r1
 80094c2:	eb42 0303 	adc.w	r3, r2, r3
 80094c6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80094ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80094d6:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80094da:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80094de:	460b      	mov	r3, r1
 80094e0:	18db      	adds	r3, r3, r3
 80094e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094e6:	4613      	mov	r3, r2
 80094e8:	eb42 0303 	adc.w	r3, r2, r3
 80094ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80094f4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80094f8:	f7f7 fbd6 	bl	8000ca8 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4611      	mov	r1, r2
 8009502:	4b3e      	ldr	r3, [pc, #248]	@ (80095fc <UART_SetConfig+0x300>)
 8009504:	fba3 2301 	umull	r2, r3, r3, r1
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	2264      	movs	r2, #100	@ 0x64
 800950c:	fb02 f303 	mul.w	r3, r2, r3
 8009510:	1acb      	subs	r3, r1, r3
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009518:	4b38      	ldr	r3, [pc, #224]	@ (80095fc <UART_SetConfig+0x300>)
 800951a:	fba3 2302 	umull	r2, r3, r3, r2
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009526:	441c      	add	r4, r3
 8009528:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800952c:	2200      	movs	r2, #0
 800952e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8009532:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8009536:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800953a:	4642      	mov	r2, r8
 800953c:	464b      	mov	r3, r9
 800953e:	1891      	adds	r1, r2, r2
 8009540:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8009544:	415b      	adcs	r3, r3
 8009546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800954a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800954e:	4641      	mov	r1, r8
 8009550:	1851      	adds	r1, r2, r1
 8009552:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8009556:	4649      	mov	r1, r9
 8009558:	414b      	adcs	r3, r1
 800955a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800956a:	4659      	mov	r1, fp
 800956c:	00cb      	lsls	r3, r1, #3
 800956e:	4651      	mov	r1, sl
 8009570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009574:	4651      	mov	r1, sl
 8009576:	00ca      	lsls	r2, r1, #3
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	4603      	mov	r3, r0
 800957e:	4642      	mov	r2, r8
 8009580:	189b      	adds	r3, r3, r2
 8009582:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8009586:	464b      	mov	r3, r9
 8009588:	460a      	mov	r2, r1
 800958a:	eb42 0303 	adc.w	r3, r2, r3
 800958e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8009592:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800959e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80095a2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80095a6:	460b      	mov	r3, r1
 80095a8:	18db      	adds	r3, r3, r3
 80095aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095ae:	4613      	mov	r3, r2
 80095b0:	eb42 0303 	adc.w	r3, r2, r3
 80095b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095b8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80095bc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80095c0:	f7f7 fb72 	bl	8000ca8 <__aeabi_uldivmod>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4b0c      	ldr	r3, [pc, #48]	@ (80095fc <UART_SetConfig+0x300>)
 80095ca:	fba3 1302 	umull	r1, r3, r3, r2
 80095ce:	095b      	lsrs	r3, r3, #5
 80095d0:	2164      	movs	r1, #100	@ 0x64
 80095d2:	fb01 f303 	mul.w	r3, r1, r3
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	3332      	adds	r3, #50	@ 0x32
 80095dc:	4a07      	ldr	r2, [pc, #28]	@ (80095fc <UART_SetConfig+0x300>)
 80095de:	fba2 2303 	umull	r2, r3, r2, r3
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	f003 0207 	and.w	r2, r3, #7
 80095e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4422      	add	r2, r4
 80095f0:	609a      	str	r2, [r3, #8]
 80095f2:	e34a      	b.n	8009c8a <UART_SetConfig+0x98e>
 80095f4:	40011000 	.word	0x40011000
 80095f8:	40011400 	.word	0x40011400
 80095fc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009600:	f7fe fc32 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8009604:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009608:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800960c:	2200      	movs	r2, #0
 800960e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8009612:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8009616:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800961a:	4622      	mov	r2, r4
 800961c:	462b      	mov	r3, r5
 800961e:	1891      	adds	r1, r2, r2
 8009620:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009624:	415b      	adcs	r3, r3
 8009626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800962a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800962e:	4621      	mov	r1, r4
 8009630:	eb12 0a01 	adds.w	sl, r2, r1
 8009634:	4629      	mov	r1, r5
 8009636:	eb43 0b01 	adc.w	fp, r3, r1
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009646:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800964a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800964e:	4692      	mov	sl, r2
 8009650:	469b      	mov	fp, r3
 8009652:	4623      	mov	r3, r4
 8009654:	eb1a 0303 	adds.w	r3, sl, r3
 8009658:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800965c:	462b      	mov	r3, r5
 800965e:	eb4b 0303 	adc.w	r3, fp, r3
 8009662:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8009666:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8009672:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8009676:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800967a:	460b      	mov	r3, r1
 800967c:	18db      	adds	r3, r3, r3
 800967e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009682:	4613      	mov	r3, r2
 8009684:	eb42 0303 	adc.w	r3, r2, r3
 8009688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800968c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009690:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8009694:	f7f7 fb08 	bl	8000ca8 <__aeabi_uldivmod>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4b61      	ldr	r3, [pc, #388]	@ (8009824 <UART_SetConfig+0x528>)
 800969e:	fba3 2302 	umull	r2, r3, r3, r2
 80096a2:	095b      	lsrs	r3, r3, #5
 80096a4:	011c      	lsls	r4, r3, #4
 80096a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80096b0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80096b4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	1891      	adds	r1, r2, r2
 80096be:	67b9      	str	r1, [r7, #120]	@ 0x78
 80096c0:	415b      	adcs	r3, r3
 80096c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80096c8:	4641      	mov	r1, r8
 80096ca:	1851      	adds	r1, r2, r1
 80096cc:	6739      	str	r1, [r7, #112]	@ 0x70
 80096ce:	4649      	mov	r1, r9
 80096d0:	414b      	adcs	r3, r1
 80096d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80096e0:	4659      	mov	r1, fp
 80096e2:	00cb      	lsls	r3, r1, #3
 80096e4:	4651      	mov	r1, sl
 80096e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ea:	4651      	mov	r1, sl
 80096ec:	00ca      	lsls	r2, r1, #3
 80096ee:	4610      	mov	r0, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	4642      	mov	r2, r8
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80096fc:	464b      	mov	r3, r9
 80096fe:	460a      	mov	r2, r1
 8009700:	eb42 0303 	adc.w	r3, r2, r3
 8009704:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8009708:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8009714:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8009718:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800971c:	460b      	mov	r3, r1
 800971e:	18db      	adds	r3, r3, r3
 8009720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009722:	4613      	mov	r3, r2
 8009724:	eb42 0303 	adc.w	r3, r2, r3
 8009728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800972a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800972e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8009732:	f7f7 fab9 	bl	8000ca8 <__aeabi_uldivmod>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4611      	mov	r1, r2
 800973c:	4b39      	ldr	r3, [pc, #228]	@ (8009824 <UART_SetConfig+0x528>)
 800973e:	fba3 2301 	umull	r2, r3, r3, r1
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	2264      	movs	r2, #100	@ 0x64
 8009746:	fb02 f303 	mul.w	r3, r2, r3
 800974a:	1acb      	subs	r3, r1, r3
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009752:	4b34      	ldr	r3, [pc, #208]	@ (8009824 <UART_SetConfig+0x528>)
 8009754:	fba3 2302 	umull	r2, r3, r3, r2
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009760:	441c      	add	r4, r3
 8009762:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800976c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8009770:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	1891      	adds	r1, r2, r2
 800977a:	6639      	str	r1, [r7, #96]	@ 0x60
 800977c:	415b      	adcs	r3, r3
 800977e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009780:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009784:	4641      	mov	r1, r8
 8009786:	1851      	adds	r1, r2, r1
 8009788:	65b9      	str	r1, [r7, #88]	@ 0x58
 800978a:	4649      	mov	r1, r9
 800978c:	414b      	adcs	r3, r1
 800978e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800979c:	4659      	mov	r1, fp
 800979e:	00cb      	lsls	r3, r1, #3
 80097a0:	4651      	mov	r1, sl
 80097a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a6:	4651      	mov	r1, sl
 80097a8:	00ca      	lsls	r2, r1, #3
 80097aa:	4610      	mov	r0, r2
 80097ac:	4619      	mov	r1, r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	4642      	mov	r2, r8
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80097b8:	464b      	mov	r3, r9
 80097ba:	460a      	mov	r2, r1
 80097bc:	eb42 0303 	adc.w	r3, r2, r3
 80097c0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80097c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80097d0:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80097d4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80097d8:	460b      	mov	r3, r1
 80097da:	18db      	adds	r3, r3, r3
 80097dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80097de:	4613      	mov	r3, r2
 80097e0:	eb42 0303 	adc.w	r3, r2, r3
 80097e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80097e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80097ea:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80097ee:	f7f7 fa5b 	bl	8000ca8 <__aeabi_uldivmod>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <UART_SetConfig+0x528>)
 80097f8:	fba3 1302 	umull	r1, r3, r3, r2
 80097fc:	095b      	lsrs	r3, r3, #5
 80097fe:	2164      	movs	r1, #100	@ 0x64
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	3332      	adds	r3, #50	@ 0x32
 800980a:	4a06      	ldr	r2, [pc, #24]	@ (8009824 <UART_SetConfig+0x528>)
 800980c:	fba2 2303 	umull	r2, r3, r2, r3
 8009810:	095b      	lsrs	r3, r3, #5
 8009812:	f003 0207 	and.w	r2, r3, #7
 8009816:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4422      	add	r2, r4
 800981e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009820:	e233      	b.n	8009c8a <UART_SetConfig+0x98e>
 8009822:	bf00      	nop
 8009824:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009828:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b8d      	ldr	r3, [pc, #564]	@ (8009a64 <UART_SetConfig+0x768>)
 8009830:	429a      	cmp	r2, r3
 8009832:	d006      	beq.n	8009842 <UART_SetConfig+0x546>
 8009834:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b8b      	ldr	r3, [pc, #556]	@ (8009a68 <UART_SetConfig+0x76c>)
 800983c:	429a      	cmp	r2, r3
 800983e:	f040 8117 	bne.w	8009a70 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009842:	f7fe fb25 	bl	8007e90 <HAL_RCC_GetPCLK2Freq>
 8009846:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800984a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800984e:	2200      	movs	r2, #0
 8009850:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009854:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009858:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800985c:	4622      	mov	r2, r4
 800985e:	462b      	mov	r3, r5
 8009860:	1891      	adds	r1, r2, r2
 8009862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009864:	415b      	adcs	r3, r3
 8009866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800986c:	4621      	mov	r1, r4
 800986e:	eb12 0801 	adds.w	r8, r2, r1
 8009872:	4629      	mov	r1, r5
 8009874:	eb43 0901 	adc.w	r9, r3, r1
 8009878:	f04f 0200 	mov.w	r2, #0
 800987c:	f04f 0300 	mov.w	r3, #0
 8009880:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009884:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009888:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800988c:	4690      	mov	r8, r2
 800988e:	4699      	mov	r9, r3
 8009890:	4623      	mov	r3, r4
 8009892:	eb18 0303 	adds.w	r3, r8, r3
 8009896:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800989a:	462b      	mov	r3, r5
 800989c:	eb49 0303 	adc.w	r3, r9, r3
 80098a0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80098a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80098b0:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80098c0:	4629      	mov	r1, r5
 80098c2:	008b      	lsls	r3, r1, #2
 80098c4:	4621      	mov	r1, r4
 80098c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ca:	4621      	mov	r1, r4
 80098cc:	008a      	lsls	r2, r1, #2
 80098ce:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80098d2:	f7f7 f9e9 	bl	8000ca8 <__aeabi_uldivmod>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4b64      	ldr	r3, [pc, #400]	@ (8009a6c <UART_SetConfig+0x770>)
 80098dc:	fba3 2302 	umull	r2, r3, r3, r2
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	011c      	lsls	r4, r3, #4
 80098e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80098e8:	2200      	movs	r2, #0
 80098ea:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80098ee:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80098f2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	1891      	adds	r1, r2, r2
 80098fc:	6439      	str	r1, [r7, #64]	@ 0x40
 80098fe:	415b      	adcs	r3, r3
 8009900:	647b      	str	r3, [r7, #68]	@ 0x44
 8009902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009906:	4641      	mov	r1, r8
 8009908:	1851      	adds	r1, r2, r1
 800990a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800990c:	4649      	mov	r1, r9
 800990e:	414b      	adcs	r3, r1
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800991e:	4659      	mov	r1, fp
 8009920:	00cb      	lsls	r3, r1, #3
 8009922:	4651      	mov	r1, sl
 8009924:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009928:	4651      	mov	r1, sl
 800992a:	00ca      	lsls	r2, r1, #3
 800992c:	4610      	mov	r0, r2
 800992e:	4619      	mov	r1, r3
 8009930:	4603      	mov	r3, r0
 8009932:	4642      	mov	r2, r8
 8009934:	189b      	adds	r3, r3, r2
 8009936:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800993a:	464b      	mov	r3, r9
 800993c:	460a      	mov	r2, r1
 800993e:	eb42 0303 	adc.w	r3, r2, r3
 8009942:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009946:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009952:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	f04f 0300 	mov.w	r3, #0
 800995e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8009962:	4649      	mov	r1, r9
 8009964:	008b      	lsls	r3, r1, #2
 8009966:	4641      	mov	r1, r8
 8009968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800996c:	4641      	mov	r1, r8
 800996e:	008a      	lsls	r2, r1, #2
 8009970:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8009974:	f7f7 f998 	bl	8000ca8 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4611      	mov	r1, r2
 800997e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a6c <UART_SetConfig+0x770>)
 8009980:	fba3 2301 	umull	r2, r3, r3, r1
 8009984:	095b      	lsrs	r3, r3, #5
 8009986:	2264      	movs	r2, #100	@ 0x64
 8009988:	fb02 f303 	mul.w	r3, r2, r3
 800998c:	1acb      	subs	r3, r1, r3
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	3332      	adds	r3, #50	@ 0x32
 8009992:	4a36      	ldr	r2, [pc, #216]	@ (8009a6c <UART_SetConfig+0x770>)
 8009994:	fba2 2303 	umull	r2, r3, r2, r3
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800999e:	441c      	add	r4, r3
 80099a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80099aa:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80099ae:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80099b2:	4642      	mov	r2, r8
 80099b4:	464b      	mov	r3, r9
 80099b6:	1891      	adds	r1, r2, r2
 80099b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80099ba:	415b      	adcs	r3, r3
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80099c2:	4641      	mov	r1, r8
 80099c4:	1851      	adds	r1, r2, r1
 80099c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80099c8:	4649      	mov	r1, r9
 80099ca:	414b      	adcs	r3, r1
 80099cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80099da:	4659      	mov	r1, fp
 80099dc:	00cb      	lsls	r3, r1, #3
 80099de:	4651      	mov	r1, sl
 80099e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099e4:	4651      	mov	r1, sl
 80099e6:	00ca      	lsls	r2, r1, #3
 80099e8:	4610      	mov	r0, r2
 80099ea:	4619      	mov	r1, r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	4642      	mov	r2, r8
 80099f0:	189b      	adds	r3, r3, r2
 80099f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80099f6:	464b      	mov	r3, r9
 80099f8:	460a      	mov	r2, r1
 80099fa:	eb42 0303 	adc.w	r3, r2, r3
 80099fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009a02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009a0e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	f04f 0300 	mov.w	r3, #0
 8009a1a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8009a1e:	4649      	mov	r1, r9
 8009a20:	008b      	lsls	r3, r1, #2
 8009a22:	4641      	mov	r1, r8
 8009a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a28:	4641      	mov	r1, r8
 8009a2a:	008a      	lsls	r2, r1, #2
 8009a2c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009a30:	f7f7 f93a 	bl	8000ca8 <__aeabi_uldivmod>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4b0c      	ldr	r3, [pc, #48]	@ (8009a6c <UART_SetConfig+0x770>)
 8009a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009a3e:	095b      	lsrs	r3, r3, #5
 8009a40:	2164      	movs	r1, #100	@ 0x64
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	3332      	adds	r3, #50	@ 0x32
 8009a4c:	4a07      	ldr	r2, [pc, #28]	@ (8009a6c <UART_SetConfig+0x770>)
 8009a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4422      	add	r2, r4
 8009a60:	609a      	str	r2, [r3, #8]
 8009a62:	e112      	b.n	8009c8a <UART_SetConfig+0x98e>
 8009a64:	40011000 	.word	0x40011000
 8009a68:	40011400 	.word	0x40011400
 8009a6c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a70:	f7fe f9fa 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8009a74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009a82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009a86:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	1891      	adds	r1, r2, r2
 8009a90:	6239      	str	r1, [r7, #32]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	1854      	adds	r4, r2, r1
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	eb43 0501 	adc.w	r5, r3, r1
 8009aa4:	f04f 0200 	mov.w	r2, #0
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	00eb      	lsls	r3, r5, #3
 8009aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ab2:	00e2      	lsls	r2, r4, #3
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	4643      	mov	r3, r8
 8009aba:	18e3      	adds	r3, r4, r3
 8009abc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	eb45 0303 	adc.w	r3, r5, r3
 8009ac6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8009aca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009ad6:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	008b      	lsls	r3, r1, #2
 8009aea:	4621      	mov	r1, r4
 8009aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009af0:	4621      	mov	r1, r4
 8009af2:	008a      	lsls	r2, r1, #2
 8009af4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8009af8:	f7f7 f8d6 	bl	8000ca8 <__aeabi_uldivmod>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4b65      	ldr	r3, [pc, #404]	@ (8009c98 <UART_SetConfig+0x99c>)
 8009b02:	fba3 2302 	umull	r2, r3, r3, r2
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	011c      	lsls	r4, r3, #4
 8009b0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b14:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009b18:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	1891      	adds	r1, r2, r2
 8009b22:	61b9      	str	r1, [r7, #24]
 8009b24:	415b      	adcs	r3, r3
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	1851      	adds	r1, r2, r1
 8009b30:	6139      	str	r1, [r7, #16]
 8009b32:	4649      	mov	r1, r9
 8009b34:	414b      	adcs	r3, r1
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b44:	4659      	mov	r1, fp
 8009b46:	00cb      	lsls	r3, r1, #3
 8009b48:	4651      	mov	r1, sl
 8009b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b4e:	4651      	mov	r1, sl
 8009b50:	00ca      	lsls	r2, r1, #3
 8009b52:	4610      	mov	r0, r2
 8009b54:	4619      	mov	r1, r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	4642      	mov	r2, r8
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b60:	464b      	mov	r3, r9
 8009b62:	460a      	mov	r2, r1
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009b88:	4649      	mov	r1, r9
 8009b8a:	008b      	lsls	r3, r1, #2
 8009b8c:	4641      	mov	r1, r8
 8009b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b92:	4641      	mov	r1, r8
 8009b94:	008a      	lsls	r2, r1, #2
 8009b96:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009b9a:	f7f7 f885 	bl	8000ca8 <__aeabi_uldivmod>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8009c98 <UART_SetConfig+0x99c>)
 8009ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8009baa:	095b      	lsrs	r3, r3, #5
 8009bac:	2264      	movs	r2, #100	@ 0x64
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	1acb      	subs	r3, r1, r3
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	3332      	adds	r3, #50	@ 0x32
 8009bb8:	4a37      	ldr	r2, [pc, #220]	@ (8009c98 <UART_SetConfig+0x99c>)
 8009bba:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bc4:	441c      	add	r4, r3
 8009bc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bd0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bd4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	1891      	adds	r1, r2, r2
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	415b      	adcs	r3, r3
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009be8:	4641      	mov	r1, r8
 8009bea:	1851      	adds	r1, r2, r1
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	4649      	mov	r1, r9
 8009bf0:	414b      	adcs	r3, r1
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	f04f 0200 	mov.w	r2, #0
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c00:	4659      	mov	r1, fp
 8009c02:	00cb      	lsls	r3, r1, #3
 8009c04:	4651      	mov	r1, sl
 8009c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c0a:	4651      	mov	r1, sl
 8009c0c:	00ca      	lsls	r2, r1, #3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	4619      	mov	r1, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	4642      	mov	r2, r8
 8009c16:	189b      	adds	r3, r3, r2
 8009c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	460a      	mov	r2, r1
 8009c20:	eb42 0303 	adc.w	r3, r2, r3
 8009c24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c34:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c38:	f04f 0200 	mov.w	r2, #0
 8009c3c:	f04f 0300 	mov.w	r3, #0
 8009c40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009c44:	4649      	mov	r1, r9
 8009c46:	008b      	lsls	r3, r1, #2
 8009c48:	4641      	mov	r1, r8
 8009c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c4e:	4641      	mov	r1, r8
 8009c50:	008a      	lsls	r2, r1, #2
 8009c52:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c56:	f7f7 f827 	bl	8000ca8 <__aeabi_uldivmod>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <UART_SetConfig+0x99c>)
 8009c60:	fba3 1302 	umull	r1, r3, r3, r2
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	2164      	movs	r1, #100	@ 0x64
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	011b      	lsls	r3, r3, #4
 8009c70:	3332      	adds	r3, #50	@ 0x32
 8009c72:	4a09      	ldr	r2, [pc, #36]	@ (8009c98 <UART_SetConfig+0x99c>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	095b      	lsrs	r3, r3, #5
 8009c7a:	f003 020f 	and.w	r2, r3, #15
 8009c7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4422      	add	r2, r4
 8009c86:	609a      	str	r2, [r3, #8]
}
 8009c88:	e7ff      	b.n	8009c8a <UART_SetConfig+0x98e>
 8009c8a:	bf00      	nop
 8009c8c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009c90:	46bd      	mov	sp, r7
 8009c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c96:	bf00      	nop
 8009c98:	51eb851f 	.word	0x51eb851f

08009c9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d029      	beq.n	8009d0a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009cc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cc6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cd0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009cd6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009cdc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009ce2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009ce8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009cee:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009cf4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 8009cfa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	e034      	b.n	8009d74 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009d16:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d20:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8009d26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009d3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009d4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009d54:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009d5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009d60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b087      	sub	sp, #28
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d02e      	beq.n	8009dfa <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009da8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009db8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009dc2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009dcc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009dd6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009de0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009dea:	4313      	orrs	r3, r2
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	609a      	str	r2, [r3, #8]
 8009df8:	e03b      	b.n	8009e72 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e0a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009e30:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009e40:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009e4a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009e54:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009e9c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009ea6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009eb8:	f7fb f92c 	bl	8005114 <HAL_GetTick>
 8009ebc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ebe:	e010      	b.n	8009ee2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d00c      	beq.n	8009ee2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <FMC_SDRAM_SendCommand+0x5e>
 8009ece:	f7fb f921 	bl	8005114 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d201      	bcs.n	8009ee2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e006      	b.n	8009ef0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d0e8      	beq.n	8009ec0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	695a      	ldr	r2, [r3, #20]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <__cvt>:
 8009f1e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f22:	ec57 6b10 	vmov	r6, r7, d0
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	bfbb      	ittet	lt
 8009f30:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f34:	461f      	movlt	r7, r3
 8009f36:	2300      	movge	r3, #0
 8009f38:	232d      	movlt	r3, #45	@ 0x2d
 8009f3a:	700b      	strb	r3, [r1, #0]
 8009f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f3e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f42:	4691      	mov	r9, r2
 8009f44:	f023 0820 	bic.w	r8, r3, #32
 8009f48:	bfbc      	itt	lt
 8009f4a:	4632      	movlt	r2, r6
 8009f4c:	4616      	movlt	r6, r2
 8009f4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f52:	d005      	beq.n	8009f60 <__cvt+0x42>
 8009f54:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f58:	d100      	bne.n	8009f5c <__cvt+0x3e>
 8009f5a:	3401      	adds	r4, #1
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	e000      	b.n	8009f62 <__cvt+0x44>
 8009f60:	2103      	movs	r1, #3
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	ab02      	add	r3, sp, #8
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	ec47 6b10 	vmov	d0, r6, r7
 8009f6e:	4653      	mov	r3, sl
 8009f70:	4622      	mov	r2, r4
 8009f72:	f001 f8a1 	bl	800b0b8 <_dtoa_r>
 8009f76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	d119      	bne.n	8009fb2 <__cvt+0x94>
 8009f7e:	f019 0f01 	tst.w	r9, #1
 8009f82:	d00e      	beq.n	8009fa2 <__cvt+0x84>
 8009f84:	eb00 0904 	add.w	r9, r0, r4
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 fdaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f94:	b108      	cbz	r0, 8009f9a <__cvt+0x7c>
 8009f96:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f9a:	2230      	movs	r2, #48	@ 0x30
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	454b      	cmp	r3, r9
 8009fa0:	d31e      	bcc.n	8009fe0 <__cvt+0xc2>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fa6:	1b5b      	subs	r3, r3, r5
 8009fa8:	4628      	mov	r0, r5
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	b004      	add	sp, #16
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fb6:	eb00 0904 	add.w	r9, r0, r4
 8009fba:	d1e5      	bne.n	8009f88 <__cvt+0x6a>
 8009fbc:	7803      	ldrb	r3, [r0, #0]
 8009fbe:	2b30      	cmp	r3, #48	@ 0x30
 8009fc0:	d10a      	bne.n	8009fd8 <__cvt+0xba>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 fd8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fce:	b918      	cbnz	r0, 8009fd8 <__cvt+0xba>
 8009fd0:	f1c4 0401 	rsb	r4, r4, #1
 8009fd4:	f8ca 4000 	str.w	r4, [sl]
 8009fd8:	f8da 3000 	ldr.w	r3, [sl]
 8009fdc:	4499      	add	r9, r3
 8009fde:	e7d3      	b.n	8009f88 <__cvt+0x6a>
 8009fe0:	1c59      	adds	r1, r3, #1
 8009fe2:	9103      	str	r1, [sp, #12]
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	e7d9      	b.n	8009f9c <__cvt+0x7e>

08009fe8 <__exponent>:
 8009fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fea:	2900      	cmp	r1, #0
 8009fec:	bfba      	itte	lt
 8009fee:	4249      	neglt	r1, r1
 8009ff0:	232d      	movlt	r3, #45	@ 0x2d
 8009ff2:	232b      	movge	r3, #43	@ 0x2b
 8009ff4:	2909      	cmp	r1, #9
 8009ff6:	7002      	strb	r2, [r0, #0]
 8009ff8:	7043      	strb	r3, [r0, #1]
 8009ffa:	dd29      	ble.n	800a050 <__exponent+0x68>
 8009ffc:	f10d 0307 	add.w	r3, sp, #7
 800a000:	461d      	mov	r5, r3
 800a002:	270a      	movs	r7, #10
 800a004:	461a      	mov	r2, r3
 800a006:	fbb1 f6f7 	udiv	r6, r1, r7
 800a00a:	fb07 1416 	mls	r4, r7, r6, r1
 800a00e:	3430      	adds	r4, #48	@ 0x30
 800a010:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a014:	460c      	mov	r4, r1
 800a016:	2c63      	cmp	r4, #99	@ 0x63
 800a018:	f103 33ff 	add.w	r3, r3, #4294967295
 800a01c:	4631      	mov	r1, r6
 800a01e:	dcf1      	bgt.n	800a004 <__exponent+0x1c>
 800a020:	3130      	adds	r1, #48	@ 0x30
 800a022:	1e94      	subs	r4, r2, #2
 800a024:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a028:	1c41      	adds	r1, r0, #1
 800a02a:	4623      	mov	r3, r4
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	d30a      	bcc.n	800a046 <__exponent+0x5e>
 800a030:	f10d 0309 	add.w	r3, sp, #9
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	42ac      	cmp	r4, r5
 800a038:	bf88      	it	hi
 800a03a:	2300      	movhi	r3, #0
 800a03c:	3302      	adds	r3, #2
 800a03e:	4403      	add	r3, r0
 800a040:	1a18      	subs	r0, r3, r0
 800a042:	b003      	add	sp, #12
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a046:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a04a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a04e:	e7ed      	b.n	800a02c <__exponent+0x44>
 800a050:	2330      	movs	r3, #48	@ 0x30
 800a052:	3130      	adds	r1, #48	@ 0x30
 800a054:	7083      	strb	r3, [r0, #2]
 800a056:	70c1      	strb	r1, [r0, #3]
 800a058:	1d03      	adds	r3, r0, #4
 800a05a:	e7f1      	b.n	800a040 <__exponent+0x58>

0800a05c <_printf_float>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	b08d      	sub	sp, #52	@ 0x34
 800a062:	460c      	mov	r4, r1
 800a064:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a068:	4616      	mov	r6, r2
 800a06a:	461f      	mov	r7, r3
 800a06c:	4605      	mov	r5, r0
 800a06e:	f000 ff23 	bl	800aeb8 <_localeconv_r>
 800a072:	6803      	ldr	r3, [r0, #0]
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	4618      	mov	r0, r3
 800a078:	f7f6 f90a 	bl	8000290 <strlen>
 800a07c:	2300      	movs	r3, #0
 800a07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a080:	f8d8 3000 	ldr.w	r3, [r8]
 800a084:	9005      	str	r0, [sp, #20]
 800a086:	3307      	adds	r3, #7
 800a088:	f023 0307 	bic.w	r3, r3, #7
 800a08c:	f103 0208 	add.w	r2, r3, #8
 800a090:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a094:	f8d4 b000 	ldr.w	fp, [r4]
 800a098:	f8c8 2000 	str.w	r2, [r8]
 800a09c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0a4:	9307      	str	r3, [sp, #28]
 800a0a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0b2:	4b9c      	ldr	r3, [pc, #624]	@ (800a324 <_printf_float+0x2c8>)
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	f7f6 fd48 	bl	8000b4c <__aeabi_dcmpun>
 800a0bc:	bb70      	cbnz	r0, 800a11c <_printf_float+0xc0>
 800a0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c2:	4b98      	ldr	r3, [pc, #608]	@ (800a324 <_printf_float+0x2c8>)
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	f7f6 fd22 	bl	8000b10 <__aeabi_dcmple>
 800a0cc:	bb30      	cbnz	r0, 800a11c <_printf_float+0xc0>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fd11 	bl	8000afc <__aeabi_dcmplt>
 800a0da:	b110      	cbz	r0, 800a0e2 <_printf_float+0x86>
 800a0dc:	232d      	movs	r3, #45	@ 0x2d
 800a0de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e2:	4a91      	ldr	r2, [pc, #580]	@ (800a328 <_printf_float+0x2cc>)
 800a0e4:	4b91      	ldr	r3, [pc, #580]	@ (800a32c <_printf_float+0x2d0>)
 800a0e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ea:	bf94      	ite	ls
 800a0ec:	4690      	movls	r8, r2
 800a0ee:	4698      	movhi	r8, r3
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f02b 0304 	bic.w	r3, fp, #4
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	f04f 0900 	mov.w	r9, #0
 800a0fe:	9700      	str	r7, [sp, #0]
 800a100:	4633      	mov	r3, r6
 800a102:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f9d2 	bl	800a4b0 <_printf_common>
 800a10c:	3001      	adds	r0, #1
 800a10e:	f040 808d 	bne.w	800a22c <_printf_float+0x1d0>
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	b00d      	add	sp, #52	@ 0x34
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	4642      	mov	r2, r8
 800a11e:	464b      	mov	r3, r9
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 fd12 	bl	8000b4c <__aeabi_dcmpun>
 800a128:	b140      	cbz	r0, 800a13c <_printf_float+0xe0>
 800a12a:	464b      	mov	r3, r9
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbc      	itt	lt
 800a130:	232d      	movlt	r3, #45	@ 0x2d
 800a132:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a136:	4a7e      	ldr	r2, [pc, #504]	@ (800a330 <_printf_float+0x2d4>)
 800a138:	4b7e      	ldr	r3, [pc, #504]	@ (800a334 <_printf_float+0x2d8>)
 800a13a:	e7d4      	b.n	800a0e6 <_printf_float+0x8a>
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a142:	9206      	str	r2, [sp, #24]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	d13b      	bne.n	800a1c0 <_printf_float+0x164>
 800a148:	2306      	movs	r3, #6
 800a14a:	6063      	str	r3, [r4, #4]
 800a14c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a150:	2300      	movs	r3, #0
 800a152:	6022      	str	r2, [r4, #0]
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	ab0a      	add	r3, sp, #40	@ 0x28
 800a158:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a15c:	ab09      	add	r3, sp, #36	@ 0x24
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	ec49 8b10 	vmov	d0, r8, r9
 800a166:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7ff fed7 	bl	8009f1e <__cvt>
 800a170:	9b06      	ldr	r3, [sp, #24]
 800a172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a174:	2b47      	cmp	r3, #71	@ 0x47
 800a176:	4680      	mov	r8, r0
 800a178:	d129      	bne.n	800a1ce <_printf_float+0x172>
 800a17a:	1cc8      	adds	r0, r1, #3
 800a17c:	db02      	blt.n	800a184 <_printf_float+0x128>
 800a17e:	6863      	ldr	r3, [r4, #4]
 800a180:	4299      	cmp	r1, r3
 800a182:	dd41      	ble.n	800a208 <_printf_float+0x1ac>
 800a184:	f1aa 0a02 	sub.w	sl, sl, #2
 800a188:	fa5f fa8a 	uxtb.w	sl, sl
 800a18c:	3901      	subs	r1, #1
 800a18e:	4652      	mov	r2, sl
 800a190:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a194:	9109      	str	r1, [sp, #36]	@ 0x24
 800a196:	f7ff ff27 	bl	8009fe8 <__exponent>
 800a19a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a19c:	1813      	adds	r3, r2, r0
 800a19e:	2a01      	cmp	r2, #1
 800a1a0:	4681      	mov	r9, r0
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	dc02      	bgt.n	800a1ac <_printf_float+0x150>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	07d2      	lsls	r2, r2, #31
 800a1aa:	d501      	bpl.n	800a1b0 <_printf_float+0x154>
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0a2      	beq.n	800a0fe <_printf_float+0xa2>
 800a1b8:	232d      	movs	r3, #45	@ 0x2d
 800a1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1be:	e79e      	b.n	800a0fe <_printf_float+0xa2>
 800a1c0:	9a06      	ldr	r2, [sp, #24]
 800a1c2:	2a47      	cmp	r2, #71	@ 0x47
 800a1c4:	d1c2      	bne.n	800a14c <_printf_float+0xf0>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1c0      	bne.n	800a14c <_printf_float+0xf0>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e7bd      	b.n	800a14a <_printf_float+0xee>
 800a1ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1d2:	d9db      	bls.n	800a18c <_printf_float+0x130>
 800a1d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1d8:	d118      	bne.n	800a20c <_printf_float+0x1b0>
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	dd0b      	ble.n	800a1f8 <_printf_float+0x19c>
 800a1e0:	6121      	str	r1, [r4, #16]
 800a1e2:	b913      	cbnz	r3, 800a1ea <_printf_float+0x18e>
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	07d0      	lsls	r0, r2, #31
 800a1e8:	d502      	bpl.n	800a1f0 <_printf_float+0x194>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	440b      	add	r3, r1
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1f2:	f04f 0900 	mov.w	r9, #0
 800a1f6:	e7db      	b.n	800a1b0 <_printf_float+0x154>
 800a1f8:	b913      	cbnz	r3, 800a200 <_printf_float+0x1a4>
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	07d2      	lsls	r2, r2, #31
 800a1fe:	d501      	bpl.n	800a204 <_printf_float+0x1a8>
 800a200:	3302      	adds	r3, #2
 800a202:	e7f4      	b.n	800a1ee <_printf_float+0x192>
 800a204:	2301      	movs	r3, #1
 800a206:	e7f2      	b.n	800a1ee <_printf_float+0x192>
 800a208:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20e:	4299      	cmp	r1, r3
 800a210:	db05      	blt.n	800a21e <_printf_float+0x1c2>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	6121      	str	r1, [r4, #16]
 800a216:	07d8      	lsls	r0, r3, #31
 800a218:	d5ea      	bpl.n	800a1f0 <_printf_float+0x194>
 800a21a:	1c4b      	adds	r3, r1, #1
 800a21c:	e7e7      	b.n	800a1ee <_printf_float+0x192>
 800a21e:	2900      	cmp	r1, #0
 800a220:	bfd4      	ite	le
 800a222:	f1c1 0202 	rsble	r2, r1, #2
 800a226:	2201      	movgt	r2, #1
 800a228:	4413      	add	r3, r2
 800a22a:	e7e0      	b.n	800a1ee <_printf_float+0x192>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	055a      	lsls	r2, r3, #21
 800a230:	d407      	bmi.n	800a242 <_printf_float+0x1e6>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	4642      	mov	r2, r8
 800a236:	4631      	mov	r1, r6
 800a238:	4628      	mov	r0, r5
 800a23a:	47b8      	blx	r7
 800a23c:	3001      	adds	r0, #1
 800a23e:	d12b      	bne.n	800a298 <_printf_float+0x23c>
 800a240:	e767      	b.n	800a112 <_printf_float+0xb6>
 800a242:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a246:	f240 80dd 	bls.w	800a404 <_printf_float+0x3a8>
 800a24a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	f7f6 fc49 	bl	8000ae8 <__aeabi_dcmpeq>
 800a256:	2800      	cmp	r0, #0
 800a258:	d033      	beq.n	800a2c2 <_printf_float+0x266>
 800a25a:	4a37      	ldr	r2, [pc, #220]	@ (800a338 <_printf_float+0x2dc>)
 800a25c:	2301      	movs	r3, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f af54 	beq.w	800a112 <_printf_float+0xb6>
 800a26a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a26e:	4543      	cmp	r3, r8
 800a270:	db02      	blt.n	800a278 <_printf_float+0x21c>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	07d8      	lsls	r0, r3, #31
 800a276:	d50f      	bpl.n	800a298 <_printf_float+0x23c>
 800a278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af45 	beq.w	800a112 <_printf_float+0xb6>
 800a288:	f04f 0900 	mov.w	r9, #0
 800a28c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a290:	f104 0a1a 	add.w	sl, r4, #26
 800a294:	45c8      	cmp	r8, r9
 800a296:	dc09      	bgt.n	800a2ac <_printf_float+0x250>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	079b      	lsls	r3, r3, #30
 800a29c:	f100 8103 	bmi.w	800a4a6 <_printf_float+0x44a>
 800a2a0:	68e0      	ldr	r0, [r4, #12]
 800a2a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	bfb8      	it	lt
 800a2a8:	4618      	movlt	r0, r3
 800a2aa:	e734      	b.n	800a116 <_printf_float+0xba>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af2b 	beq.w	800a112 <_printf_float+0xb6>
 800a2bc:	f109 0901 	add.w	r9, r9, #1
 800a2c0:	e7e8      	b.n	800a294 <_printf_float+0x238>
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc39      	bgt.n	800a33c <_printf_float+0x2e0>
 800a2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a338 <_printf_float+0x2dc>)
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af1d 	beq.w	800a112 <_printf_float+0xb6>
 800a2d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2dc:	ea59 0303 	orrs.w	r3, r9, r3
 800a2e0:	d102      	bne.n	800a2e8 <_printf_float+0x28c>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	07d9      	lsls	r1, r3, #31
 800a2e6:	d5d7      	bpl.n	800a298 <_printf_float+0x23c>
 800a2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f af0d 	beq.w	800a112 <_printf_float+0xb6>
 800a2f8:	f04f 0a00 	mov.w	sl, #0
 800a2fc:	f104 0b1a 	add.w	fp, r4, #26
 800a300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a302:	425b      	negs	r3, r3
 800a304:	4553      	cmp	r3, sl
 800a306:	dc01      	bgt.n	800a30c <_printf_float+0x2b0>
 800a308:	464b      	mov	r3, r9
 800a30a:	e793      	b.n	800a234 <_printf_float+0x1d8>
 800a30c:	2301      	movs	r3, #1
 800a30e:	465a      	mov	r2, fp
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f aefb 	beq.w	800a112 <_printf_float+0xb6>
 800a31c:	f10a 0a01 	add.w	sl, sl, #1
 800a320:	e7ee      	b.n	800a300 <_printf_float+0x2a4>
 800a322:	bf00      	nop
 800a324:	7fefffff 	.word	0x7fefffff
 800a328:	080123bc 	.word	0x080123bc
 800a32c:	080123c0 	.word	0x080123c0
 800a330:	080123c4 	.word	0x080123c4
 800a334:	080123c8 	.word	0x080123c8
 800a338:	080123cc 	.word	0x080123cc
 800a33c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a33e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a342:	4553      	cmp	r3, sl
 800a344:	bfa8      	it	ge
 800a346:	4653      	movge	r3, sl
 800a348:	2b00      	cmp	r3, #0
 800a34a:	4699      	mov	r9, r3
 800a34c:	dc36      	bgt.n	800a3bc <_printf_float+0x360>
 800a34e:	f04f 0b00 	mov.w	fp, #0
 800a352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a356:	f104 021a 	add.w	r2, r4, #26
 800a35a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a35c:	9306      	str	r3, [sp, #24]
 800a35e:	eba3 0309 	sub.w	r3, r3, r9
 800a362:	455b      	cmp	r3, fp
 800a364:	dc31      	bgt.n	800a3ca <_printf_float+0x36e>
 800a366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a368:	459a      	cmp	sl, r3
 800a36a:	dc3a      	bgt.n	800a3e2 <_printf_float+0x386>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07da      	lsls	r2, r3, #31
 800a370:	d437      	bmi.n	800a3e2 <_printf_float+0x386>
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	ebaa 0903 	sub.w	r9, sl, r3
 800a378:	9b06      	ldr	r3, [sp, #24]
 800a37a:	ebaa 0303 	sub.w	r3, sl, r3
 800a37e:	4599      	cmp	r9, r3
 800a380:	bfa8      	it	ge
 800a382:	4699      	movge	r9, r3
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	dc33      	bgt.n	800a3f2 <_printf_float+0x396>
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a392:	f104 0b1a 	add.w	fp, r4, #26
 800a396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a398:	ebaa 0303 	sub.w	r3, sl, r3
 800a39c:	eba3 0309 	sub.w	r3, r3, r9
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	f77f af79 	ble.w	800a298 <_printf_float+0x23c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	465a      	mov	r2, fp
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f aeae 	beq.w	800a112 <_printf_float+0xb6>
 800a3b6:	f108 0801 	add.w	r8, r8, #1
 800a3ba:	e7ec      	b.n	800a396 <_printf_float+0x33a>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1c2      	bne.n	800a34e <_printf_float+0x2f2>
 800a3c8:	e6a3      	b.n	800a112 <_printf_float+0xb6>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	9206      	str	r2, [sp, #24]
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f ae9c 	beq.w	800a112 <_printf_float+0xb6>
 800a3da:	9a06      	ldr	r2, [sp, #24]
 800a3dc:	f10b 0b01 	add.w	fp, fp, #1
 800a3e0:	e7bb      	b.n	800a35a <_printf_float+0x2fe>
 800a3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d1c0      	bne.n	800a372 <_printf_float+0x316>
 800a3f0:	e68f      	b.n	800a112 <_printf_float+0xb6>
 800a3f2:	9a06      	ldr	r2, [sp, #24]
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	4442      	add	r2, r8
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	47b8      	blx	r7
 800a3fe:	3001      	adds	r0, #1
 800a400:	d1c3      	bne.n	800a38a <_printf_float+0x32e>
 800a402:	e686      	b.n	800a112 <_printf_float+0xb6>
 800a404:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a408:	f1ba 0f01 	cmp.w	sl, #1
 800a40c:	dc01      	bgt.n	800a412 <_printf_float+0x3b6>
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d536      	bpl.n	800a480 <_printf_float+0x424>
 800a412:	2301      	movs	r3, #1
 800a414:	4642      	mov	r2, r8
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae78 	beq.w	800a112 <_printf_float+0xb6>
 800a422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae70 	beq.w	800a112 <_printf_float+0xb6>
 800a432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a436:	2200      	movs	r2, #0
 800a438:	2300      	movs	r3, #0
 800a43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43e:	f7f6 fb53 	bl	8000ae8 <__aeabi_dcmpeq>
 800a442:	b9c0      	cbnz	r0, 800a476 <_printf_float+0x41a>
 800a444:	4653      	mov	r3, sl
 800a446:	f108 0201 	add.w	r2, r8, #1
 800a44a:	4631      	mov	r1, r6
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b8      	blx	r7
 800a450:	3001      	adds	r0, #1
 800a452:	d10c      	bne.n	800a46e <_printf_float+0x412>
 800a454:	e65d      	b.n	800a112 <_printf_float+0xb6>
 800a456:	2301      	movs	r3, #1
 800a458:	465a      	mov	r2, fp
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f ae56 	beq.w	800a112 <_printf_float+0xb6>
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	45d0      	cmp	r8, sl
 800a46c:	dbf3      	blt.n	800a456 <_printf_float+0x3fa>
 800a46e:	464b      	mov	r3, r9
 800a470:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a474:	e6df      	b.n	800a236 <_printf_float+0x1da>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	f104 0b1a 	add.w	fp, r4, #26
 800a47e:	e7f4      	b.n	800a46a <_printf_float+0x40e>
 800a480:	2301      	movs	r3, #1
 800a482:	4642      	mov	r2, r8
 800a484:	e7e1      	b.n	800a44a <_printf_float+0x3ee>
 800a486:	2301      	movs	r3, #1
 800a488:	464a      	mov	r2, r9
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	f43f ae3e 	beq.w	800a112 <_printf_float+0xb6>
 800a496:	f108 0801 	add.w	r8, r8, #1
 800a49a:	68e3      	ldr	r3, [r4, #12]
 800a49c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a49e:	1a5b      	subs	r3, r3, r1
 800a4a0:	4543      	cmp	r3, r8
 800a4a2:	dcf0      	bgt.n	800a486 <_printf_float+0x42a>
 800a4a4:	e6fc      	b.n	800a2a0 <_printf_float+0x244>
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	f104 0919 	add.w	r9, r4, #25
 800a4ae:	e7f4      	b.n	800a49a <_printf_float+0x43e>

0800a4b0 <_printf_common>:
 800a4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	4698      	mov	r8, r3
 800a4b8:	688a      	ldr	r2, [r1, #8]
 800a4ba:	690b      	ldr	r3, [r1, #16]
 800a4bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	bfb8      	it	lt
 800a4c4:	4613      	movlt	r3, r2
 800a4c6:	6033      	str	r3, [r6, #0]
 800a4c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	b10a      	cbz	r2, 800a4d6 <_printf_common+0x26>
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	6033      	str	r3, [r6, #0]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	0699      	lsls	r1, r3, #26
 800a4da:	bf42      	ittt	mi
 800a4dc:	6833      	ldrmi	r3, [r6, #0]
 800a4de:	3302      	addmi	r3, #2
 800a4e0:	6033      	strmi	r3, [r6, #0]
 800a4e2:	6825      	ldr	r5, [r4, #0]
 800a4e4:	f015 0506 	ands.w	r5, r5, #6
 800a4e8:	d106      	bne.n	800a4f8 <_printf_common+0x48>
 800a4ea:	f104 0a19 	add.w	sl, r4, #25
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	6832      	ldr	r2, [r6, #0]
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	42ab      	cmp	r3, r5
 800a4f6:	dc26      	bgt.n	800a546 <_printf_common+0x96>
 800a4f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4fc:	6822      	ldr	r2, [r4, #0]
 800a4fe:	3b00      	subs	r3, #0
 800a500:	bf18      	it	ne
 800a502:	2301      	movne	r3, #1
 800a504:	0692      	lsls	r2, r2, #26
 800a506:	d42b      	bmi.n	800a560 <_printf_common+0xb0>
 800a508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a50c:	4641      	mov	r1, r8
 800a50e:	4638      	mov	r0, r7
 800a510:	47c8      	blx	r9
 800a512:	3001      	adds	r0, #1
 800a514:	d01e      	beq.n	800a554 <_printf_common+0xa4>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	f003 0306 	and.w	r3, r3, #6
 800a51e:	2b04      	cmp	r3, #4
 800a520:	bf02      	ittt	eq
 800a522:	68e5      	ldreq	r5, [r4, #12]
 800a524:	6833      	ldreq	r3, [r6, #0]
 800a526:	1aed      	subeq	r5, r5, r3
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	bf0c      	ite	eq
 800a52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a530:	2500      	movne	r5, #0
 800a532:	4293      	cmp	r3, r2
 800a534:	bfc4      	itt	gt
 800a536:	1a9b      	subgt	r3, r3, r2
 800a538:	18ed      	addgt	r5, r5, r3
 800a53a:	2600      	movs	r6, #0
 800a53c:	341a      	adds	r4, #26
 800a53e:	42b5      	cmp	r5, r6
 800a540:	d11a      	bne.n	800a578 <_printf_common+0xc8>
 800a542:	2000      	movs	r0, #0
 800a544:	e008      	b.n	800a558 <_printf_common+0xa8>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4641      	mov	r1, r8
 800a54c:	4638      	mov	r0, r7
 800a54e:	47c8      	blx	r9
 800a550:	3001      	adds	r0, #1
 800a552:	d103      	bne.n	800a55c <_printf_common+0xac>
 800a554:	f04f 30ff 	mov.w	r0, #4294967295
 800a558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55c:	3501      	adds	r5, #1
 800a55e:	e7c6      	b.n	800a4ee <_printf_common+0x3e>
 800a560:	18e1      	adds	r1, r4, r3
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	2030      	movs	r0, #48	@ 0x30
 800a566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a56a:	4422      	add	r2, r4
 800a56c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a574:	3302      	adds	r3, #2
 800a576:	e7c7      	b.n	800a508 <_printf_common+0x58>
 800a578:	2301      	movs	r3, #1
 800a57a:	4622      	mov	r2, r4
 800a57c:	4641      	mov	r1, r8
 800a57e:	4638      	mov	r0, r7
 800a580:	47c8      	blx	r9
 800a582:	3001      	adds	r0, #1
 800a584:	d0e6      	beq.n	800a554 <_printf_common+0xa4>
 800a586:	3601      	adds	r6, #1
 800a588:	e7d9      	b.n	800a53e <_printf_common+0x8e>
	...

0800a58c <_printf_i>:
 800a58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	7e0f      	ldrb	r7, [r1, #24]
 800a592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a594:	2f78      	cmp	r7, #120	@ 0x78
 800a596:	4691      	mov	r9, r2
 800a598:	4680      	mov	r8, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	469a      	mov	sl, r3
 800a59e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5a2:	d807      	bhi.n	800a5b4 <_printf_i+0x28>
 800a5a4:	2f62      	cmp	r7, #98	@ 0x62
 800a5a6:	d80a      	bhi.n	800a5be <_printf_i+0x32>
 800a5a8:	2f00      	cmp	r7, #0
 800a5aa:	f000 80d2 	beq.w	800a752 <_printf_i+0x1c6>
 800a5ae:	2f58      	cmp	r7, #88	@ 0x58
 800a5b0:	f000 80b9 	beq.w	800a726 <_printf_i+0x19a>
 800a5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5bc:	e03a      	b.n	800a634 <_printf_i+0xa8>
 800a5be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5c2:	2b15      	cmp	r3, #21
 800a5c4:	d8f6      	bhi.n	800a5b4 <_printf_i+0x28>
 800a5c6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5cc <_printf_i+0x40>)
 800a5c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5cc:	0800a625 	.word	0x0800a625
 800a5d0:	0800a639 	.word	0x0800a639
 800a5d4:	0800a5b5 	.word	0x0800a5b5
 800a5d8:	0800a5b5 	.word	0x0800a5b5
 800a5dc:	0800a5b5 	.word	0x0800a5b5
 800a5e0:	0800a5b5 	.word	0x0800a5b5
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a5b5 	.word	0x0800a5b5
 800a5ec:	0800a5b5 	.word	0x0800a5b5
 800a5f0:	0800a5b5 	.word	0x0800a5b5
 800a5f4:	0800a5b5 	.word	0x0800a5b5
 800a5f8:	0800a739 	.word	0x0800a739
 800a5fc:	0800a663 	.word	0x0800a663
 800a600:	0800a6f3 	.word	0x0800a6f3
 800a604:	0800a5b5 	.word	0x0800a5b5
 800a608:	0800a5b5 	.word	0x0800a5b5
 800a60c:	0800a75b 	.word	0x0800a75b
 800a610:	0800a5b5 	.word	0x0800a5b5
 800a614:	0800a663 	.word	0x0800a663
 800a618:	0800a5b5 	.word	0x0800a5b5
 800a61c:	0800a5b5 	.word	0x0800a5b5
 800a620:	0800a6fb 	.word	0x0800a6fb
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6032      	str	r2, [r6, #0]
 800a62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a634:	2301      	movs	r3, #1
 800a636:	e09d      	b.n	800a774 <_printf_i+0x1e8>
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	6820      	ldr	r0, [r4, #0]
 800a63c:	1d19      	adds	r1, r3, #4
 800a63e:	6031      	str	r1, [r6, #0]
 800a640:	0606      	lsls	r6, r0, #24
 800a642:	d501      	bpl.n	800a648 <_printf_i+0xbc>
 800a644:	681d      	ldr	r5, [r3, #0]
 800a646:	e003      	b.n	800a650 <_printf_i+0xc4>
 800a648:	0645      	lsls	r5, r0, #25
 800a64a:	d5fb      	bpl.n	800a644 <_printf_i+0xb8>
 800a64c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a650:	2d00      	cmp	r5, #0
 800a652:	da03      	bge.n	800a65c <_printf_i+0xd0>
 800a654:	232d      	movs	r3, #45	@ 0x2d
 800a656:	426d      	negs	r5, r5
 800a658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a65c:	4859      	ldr	r0, [pc, #356]	@ (800a7c4 <_printf_i+0x238>)
 800a65e:	230a      	movs	r3, #10
 800a660:	e011      	b.n	800a686 <_printf_i+0xfa>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	6833      	ldr	r3, [r6, #0]
 800a666:	0608      	lsls	r0, r1, #24
 800a668:	f853 5b04 	ldr.w	r5, [r3], #4
 800a66c:	d402      	bmi.n	800a674 <_printf_i+0xe8>
 800a66e:	0649      	lsls	r1, r1, #25
 800a670:	bf48      	it	mi
 800a672:	b2ad      	uxthmi	r5, r5
 800a674:	2f6f      	cmp	r7, #111	@ 0x6f
 800a676:	4853      	ldr	r0, [pc, #332]	@ (800a7c4 <_printf_i+0x238>)
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	bf14      	ite	ne
 800a67c:	230a      	movne	r3, #10
 800a67e:	2308      	moveq	r3, #8
 800a680:	2100      	movs	r1, #0
 800a682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a686:	6866      	ldr	r6, [r4, #4]
 800a688:	60a6      	str	r6, [r4, #8]
 800a68a:	2e00      	cmp	r6, #0
 800a68c:	bfa2      	ittt	ge
 800a68e:	6821      	ldrge	r1, [r4, #0]
 800a690:	f021 0104 	bicge.w	r1, r1, #4
 800a694:	6021      	strge	r1, [r4, #0]
 800a696:	b90d      	cbnz	r5, 800a69c <_printf_i+0x110>
 800a698:	2e00      	cmp	r6, #0
 800a69a:	d04b      	beq.n	800a734 <_printf_i+0x1a8>
 800a69c:	4616      	mov	r6, r2
 800a69e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6a2:	fb03 5711 	mls	r7, r3, r1, r5
 800a6a6:	5dc7      	ldrb	r7, [r0, r7]
 800a6a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6ac:	462f      	mov	r7, r5
 800a6ae:	42bb      	cmp	r3, r7
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	d9f4      	bls.n	800a69e <_printf_i+0x112>
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d10b      	bne.n	800a6d0 <_printf_i+0x144>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	07df      	lsls	r7, r3, #31
 800a6bc:	d508      	bpl.n	800a6d0 <_printf_i+0x144>
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	6861      	ldr	r1, [r4, #4]
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	bfde      	ittt	le
 800a6c6:	2330      	movle	r3, #48	@ 0x30
 800a6c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6d0:	1b92      	subs	r2, r2, r6
 800a6d2:	6122      	str	r2, [r4, #16]
 800a6d4:	f8cd a000 	str.w	sl, [sp]
 800a6d8:	464b      	mov	r3, r9
 800a6da:	aa03      	add	r2, sp, #12
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4640      	mov	r0, r8
 800a6e0:	f7ff fee6 	bl	800a4b0 <_printf_common>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d14a      	bne.n	800a77e <_printf_i+0x1f2>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	b004      	add	sp, #16
 800a6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	f043 0320 	orr.w	r3, r3, #32
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	4833      	ldr	r0, [pc, #204]	@ (800a7c8 <_printf_i+0x23c>)
 800a6fc:	2778      	movs	r7, #120	@ 0x78
 800a6fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	6831      	ldr	r1, [r6, #0]
 800a706:	061f      	lsls	r7, r3, #24
 800a708:	f851 5b04 	ldr.w	r5, [r1], #4
 800a70c:	d402      	bmi.n	800a714 <_printf_i+0x188>
 800a70e:	065f      	lsls	r7, r3, #25
 800a710:	bf48      	it	mi
 800a712:	b2ad      	uxthmi	r5, r5
 800a714:	6031      	str	r1, [r6, #0]
 800a716:	07d9      	lsls	r1, r3, #31
 800a718:	bf44      	itt	mi
 800a71a:	f043 0320 	orrmi.w	r3, r3, #32
 800a71e:	6023      	strmi	r3, [r4, #0]
 800a720:	b11d      	cbz	r5, 800a72a <_printf_i+0x19e>
 800a722:	2310      	movs	r3, #16
 800a724:	e7ac      	b.n	800a680 <_printf_i+0xf4>
 800a726:	4827      	ldr	r0, [pc, #156]	@ (800a7c4 <_printf_i+0x238>)
 800a728:	e7e9      	b.n	800a6fe <_printf_i+0x172>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	f023 0320 	bic.w	r3, r3, #32
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	e7f6      	b.n	800a722 <_printf_i+0x196>
 800a734:	4616      	mov	r6, r2
 800a736:	e7bd      	b.n	800a6b4 <_printf_i+0x128>
 800a738:	6833      	ldr	r3, [r6, #0]
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	6961      	ldr	r1, [r4, #20]
 800a73e:	1d18      	adds	r0, r3, #4
 800a740:	6030      	str	r0, [r6, #0]
 800a742:	062e      	lsls	r6, r5, #24
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	d501      	bpl.n	800a74c <_printf_i+0x1c0>
 800a748:	6019      	str	r1, [r3, #0]
 800a74a:	e002      	b.n	800a752 <_printf_i+0x1c6>
 800a74c:	0668      	lsls	r0, r5, #25
 800a74e:	d5fb      	bpl.n	800a748 <_printf_i+0x1bc>
 800a750:	8019      	strh	r1, [r3, #0]
 800a752:	2300      	movs	r3, #0
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	4616      	mov	r6, r2
 800a758:	e7bc      	b.n	800a6d4 <_printf_i+0x148>
 800a75a:	6833      	ldr	r3, [r6, #0]
 800a75c:	1d1a      	adds	r2, r3, #4
 800a75e:	6032      	str	r2, [r6, #0]
 800a760:	681e      	ldr	r6, [r3, #0]
 800a762:	6862      	ldr	r2, [r4, #4]
 800a764:	2100      	movs	r1, #0
 800a766:	4630      	mov	r0, r6
 800a768:	f7f5 fd42 	bl	80001f0 <memchr>
 800a76c:	b108      	cbz	r0, 800a772 <_printf_i+0x1e6>
 800a76e:	1b80      	subs	r0, r0, r6
 800a770:	6060      	str	r0, [r4, #4]
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	2300      	movs	r3, #0
 800a778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a77c:	e7aa      	b.n	800a6d4 <_printf_i+0x148>
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	4632      	mov	r2, r6
 800a782:	4649      	mov	r1, r9
 800a784:	4640      	mov	r0, r8
 800a786:	47d0      	blx	sl
 800a788:	3001      	adds	r0, #1
 800a78a:	d0ad      	beq.n	800a6e8 <_printf_i+0x15c>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	079b      	lsls	r3, r3, #30
 800a790:	d413      	bmi.n	800a7ba <_printf_i+0x22e>
 800a792:	68e0      	ldr	r0, [r4, #12]
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	4298      	cmp	r0, r3
 800a798:	bfb8      	it	lt
 800a79a:	4618      	movlt	r0, r3
 800a79c:	e7a6      	b.n	800a6ec <_printf_i+0x160>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	47d0      	blx	sl
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d09d      	beq.n	800a6e8 <_printf_i+0x15c>
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	68e3      	ldr	r3, [r4, #12]
 800a7b0:	9903      	ldr	r1, [sp, #12]
 800a7b2:	1a5b      	subs	r3, r3, r1
 800a7b4:	42ab      	cmp	r3, r5
 800a7b6:	dcf2      	bgt.n	800a79e <_printf_i+0x212>
 800a7b8:	e7eb      	b.n	800a792 <_printf_i+0x206>
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	f104 0619 	add.w	r6, r4, #25
 800a7c0:	e7f5      	b.n	800a7ae <_printf_i+0x222>
 800a7c2:	bf00      	nop
 800a7c4:	080123ce 	.word	0x080123ce
 800a7c8:	080123df 	.word	0x080123df

0800a7cc <_scanf_float>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	4617      	mov	r7, r2
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	688b      	ldr	r3, [r1, #8]
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7de:	bf81      	itttt	hi
 800a7e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7e4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7ec:	608b      	strhi	r3, [r1, #8]
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	460a      	mov	r2, r1
 800a7f2:	f04f 0500 	mov.w	r5, #0
 800a7f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a7fa:	f842 3b1c 	str.w	r3, [r2], #28
 800a7fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a802:	4680      	mov	r8, r0
 800a804:	460c      	mov	r4, r1
 800a806:	bf98      	it	ls
 800a808:	f04f 0b00 	movls.w	fp, #0
 800a80c:	9201      	str	r2, [sp, #4]
 800a80e:	4616      	mov	r6, r2
 800a810:	46aa      	mov	sl, r5
 800a812:	46a9      	mov	r9, r5
 800a814:	9502      	str	r5, [sp, #8]
 800a816:	68a2      	ldr	r2, [r4, #8]
 800a818:	b152      	cbz	r2, 800a830 <_scanf_float+0x64>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a820:	d864      	bhi.n	800a8ec <_scanf_float+0x120>
 800a822:	2b40      	cmp	r3, #64	@ 0x40
 800a824:	d83c      	bhi.n	800a8a0 <_scanf_float+0xd4>
 800a826:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a82a:	b2c8      	uxtb	r0, r1
 800a82c:	280e      	cmp	r0, #14
 800a82e:	d93a      	bls.n	800a8a6 <_scanf_float+0xda>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	d003      	beq.n	800a83e <_scanf_float+0x72>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a842:	f1ba 0f01 	cmp.w	sl, #1
 800a846:	f200 8117 	bhi.w	800aa78 <_scanf_float+0x2ac>
 800a84a:	9b01      	ldr	r3, [sp, #4]
 800a84c:	429e      	cmp	r6, r3
 800a84e:	f200 8108 	bhi.w	800aa62 <_scanf_float+0x296>
 800a852:	2001      	movs	r0, #1
 800a854:	b007      	add	sp, #28
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a85e:	2a0d      	cmp	r2, #13
 800a860:	d8e6      	bhi.n	800a830 <_scanf_float+0x64>
 800a862:	a101      	add	r1, pc, #4	@ (adr r1, 800a868 <_scanf_float+0x9c>)
 800a864:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a868:	0800a9af 	.word	0x0800a9af
 800a86c:	0800a831 	.word	0x0800a831
 800a870:	0800a831 	.word	0x0800a831
 800a874:	0800a831 	.word	0x0800a831
 800a878:	0800aa0f 	.word	0x0800aa0f
 800a87c:	0800a9e7 	.word	0x0800a9e7
 800a880:	0800a831 	.word	0x0800a831
 800a884:	0800a831 	.word	0x0800a831
 800a888:	0800a9bd 	.word	0x0800a9bd
 800a88c:	0800a831 	.word	0x0800a831
 800a890:	0800a831 	.word	0x0800a831
 800a894:	0800a831 	.word	0x0800a831
 800a898:	0800a831 	.word	0x0800a831
 800a89c:	0800a975 	.word	0x0800a975
 800a8a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8a4:	e7db      	b.n	800a85e <_scanf_float+0x92>
 800a8a6:	290e      	cmp	r1, #14
 800a8a8:	d8c2      	bhi.n	800a830 <_scanf_float+0x64>
 800a8aa:	a001      	add	r0, pc, #4	@ (adr r0, 800a8b0 <_scanf_float+0xe4>)
 800a8ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8b0:	0800a965 	.word	0x0800a965
 800a8b4:	0800a831 	.word	0x0800a831
 800a8b8:	0800a965 	.word	0x0800a965
 800a8bc:	0800a9fb 	.word	0x0800a9fb
 800a8c0:	0800a831 	.word	0x0800a831
 800a8c4:	0800a90d 	.word	0x0800a90d
 800a8c8:	0800a94b 	.word	0x0800a94b
 800a8cc:	0800a94b 	.word	0x0800a94b
 800a8d0:	0800a94b 	.word	0x0800a94b
 800a8d4:	0800a94b 	.word	0x0800a94b
 800a8d8:	0800a94b 	.word	0x0800a94b
 800a8dc:	0800a94b 	.word	0x0800a94b
 800a8e0:	0800a94b 	.word	0x0800a94b
 800a8e4:	0800a94b 	.word	0x0800a94b
 800a8e8:	0800a94b 	.word	0x0800a94b
 800a8ec:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8ee:	d809      	bhi.n	800a904 <_scanf_float+0x138>
 800a8f0:	2b60      	cmp	r3, #96	@ 0x60
 800a8f2:	d8b2      	bhi.n	800a85a <_scanf_float+0x8e>
 800a8f4:	2b54      	cmp	r3, #84	@ 0x54
 800a8f6:	d07b      	beq.n	800a9f0 <_scanf_float+0x224>
 800a8f8:	2b59      	cmp	r3, #89	@ 0x59
 800a8fa:	d199      	bne.n	800a830 <_scanf_float+0x64>
 800a8fc:	2d07      	cmp	r5, #7
 800a8fe:	d197      	bne.n	800a830 <_scanf_float+0x64>
 800a900:	2508      	movs	r5, #8
 800a902:	e02c      	b.n	800a95e <_scanf_float+0x192>
 800a904:	2b74      	cmp	r3, #116	@ 0x74
 800a906:	d073      	beq.n	800a9f0 <_scanf_float+0x224>
 800a908:	2b79      	cmp	r3, #121	@ 0x79
 800a90a:	e7f6      	b.n	800a8fa <_scanf_float+0x12e>
 800a90c:	6821      	ldr	r1, [r4, #0]
 800a90e:	05c8      	lsls	r0, r1, #23
 800a910:	d51b      	bpl.n	800a94a <_scanf_float+0x17e>
 800a912:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a916:	6021      	str	r1, [r4, #0]
 800a918:	f109 0901 	add.w	r9, r9, #1
 800a91c:	f1bb 0f00 	cmp.w	fp, #0
 800a920:	d003      	beq.n	800a92a <_scanf_float+0x15e>
 800a922:	3201      	adds	r2, #1
 800a924:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a928:	60a2      	str	r2, [r4, #8]
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3b01      	subs	r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	f340 8087 	ble.w	800aa50 <_scanf_float+0x284>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	e765      	b.n	800a816 <_scanf_float+0x4a>
 800a94a:	eb1a 0105 	adds.w	r1, sl, r5
 800a94e:	f47f af6f 	bne.w	800a830 <_scanf_float+0x64>
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a958:	6022      	str	r2, [r4, #0]
 800a95a:	460d      	mov	r5, r1
 800a95c:	468a      	mov	sl, r1
 800a95e:	f806 3b01 	strb.w	r3, [r6], #1
 800a962:	e7e2      	b.n	800a92a <_scanf_float+0x15e>
 800a964:	6822      	ldr	r2, [r4, #0]
 800a966:	0610      	lsls	r0, r2, #24
 800a968:	f57f af62 	bpl.w	800a830 <_scanf_float+0x64>
 800a96c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a970:	6022      	str	r2, [r4, #0]
 800a972:	e7f4      	b.n	800a95e <_scanf_float+0x192>
 800a974:	f1ba 0f00 	cmp.w	sl, #0
 800a978:	d10e      	bne.n	800a998 <_scanf_float+0x1cc>
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	d10e      	bne.n	800a99e <_scanf_float+0x1d2>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a986:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a98a:	d108      	bne.n	800a99e <_scanf_float+0x1d2>
 800a98c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	f04f 0a01 	mov.w	sl, #1
 800a996:	e7e2      	b.n	800a95e <_scanf_float+0x192>
 800a998:	f1ba 0f02 	cmp.w	sl, #2
 800a99c:	d055      	beq.n	800aa4a <_scanf_float+0x27e>
 800a99e:	2d01      	cmp	r5, #1
 800a9a0:	d002      	beq.n	800a9a8 <_scanf_float+0x1dc>
 800a9a2:	2d04      	cmp	r5, #4
 800a9a4:	f47f af44 	bne.w	800a830 <_scanf_float+0x64>
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	b2ed      	uxtb	r5, r5
 800a9ac:	e7d7      	b.n	800a95e <_scanf_float+0x192>
 800a9ae:	f1ba 0f01 	cmp.w	sl, #1
 800a9b2:	f47f af3d 	bne.w	800a830 <_scanf_float+0x64>
 800a9b6:	f04f 0a02 	mov.w	sl, #2
 800a9ba:	e7d0      	b.n	800a95e <_scanf_float+0x192>
 800a9bc:	b97d      	cbnz	r5, 800a9de <_scanf_float+0x212>
 800a9be:	f1b9 0f00 	cmp.w	r9, #0
 800a9c2:	f47f af38 	bne.w	800a836 <_scanf_float+0x6a>
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9d0:	f040 8108 	bne.w	800abe4 <_scanf_float+0x418>
 800a9d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	2501      	movs	r5, #1
 800a9dc:	e7bf      	b.n	800a95e <_scanf_float+0x192>
 800a9de:	2d03      	cmp	r5, #3
 800a9e0:	d0e2      	beq.n	800a9a8 <_scanf_float+0x1dc>
 800a9e2:	2d05      	cmp	r5, #5
 800a9e4:	e7de      	b.n	800a9a4 <_scanf_float+0x1d8>
 800a9e6:	2d02      	cmp	r5, #2
 800a9e8:	f47f af22 	bne.w	800a830 <_scanf_float+0x64>
 800a9ec:	2503      	movs	r5, #3
 800a9ee:	e7b6      	b.n	800a95e <_scanf_float+0x192>
 800a9f0:	2d06      	cmp	r5, #6
 800a9f2:	f47f af1d 	bne.w	800a830 <_scanf_float+0x64>
 800a9f6:	2507      	movs	r5, #7
 800a9f8:	e7b1      	b.n	800a95e <_scanf_float+0x192>
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	0591      	lsls	r1, r2, #22
 800a9fe:	f57f af17 	bpl.w	800a830 <_scanf_float+0x64>
 800aa02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa06:	6022      	str	r2, [r4, #0]
 800aa08:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa0c:	e7a7      	b.n	800a95e <_scanf_float+0x192>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa18:	d006      	beq.n	800aa28 <_scanf_float+0x25c>
 800aa1a:	0550      	lsls	r0, r2, #21
 800aa1c:	f57f af08 	bpl.w	800a830 <_scanf_float+0x64>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	f000 80de 	beq.w	800abe4 <_scanf_float+0x418>
 800aa28:	0591      	lsls	r1, r2, #22
 800aa2a:	bf58      	it	pl
 800aa2c:	9902      	ldrpl	r1, [sp, #8]
 800aa2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa32:	bf58      	it	pl
 800aa34:	eba9 0101 	subpl.w	r1, r9, r1
 800aa38:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa3c:	bf58      	it	pl
 800aa3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	f04f 0900 	mov.w	r9, #0
 800aa48:	e789      	b.n	800a95e <_scanf_float+0x192>
 800aa4a:	f04f 0a03 	mov.w	sl, #3
 800aa4e:	e786      	b.n	800a95e <_scanf_float+0x192>
 800aa50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa54:	4639      	mov	r1, r7
 800aa56:	4640      	mov	r0, r8
 800aa58:	4798      	blx	r3
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f43f aedb 	beq.w	800a816 <_scanf_float+0x4a>
 800aa60:	e6e6      	b.n	800a830 <_scanf_float+0x64>
 800aa62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4798      	blx	r3
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	e6e8      	b.n	800a84a <_scanf_float+0x7e>
 800aa78:	1e6b      	subs	r3, r5, #1
 800aa7a:	2b06      	cmp	r3, #6
 800aa7c:	d824      	bhi.n	800aac8 <_scanf_float+0x2fc>
 800aa7e:	2d02      	cmp	r5, #2
 800aa80:	d836      	bhi.n	800aaf0 <_scanf_float+0x324>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	429e      	cmp	r6, r3
 800aa86:	f67f aee4 	bls.w	800a852 <_scanf_float+0x86>
 800aa8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa92:	463a      	mov	r2, r7
 800aa94:	4640      	mov	r0, r8
 800aa96:	4798      	blx	r3
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	e7f0      	b.n	800aa82 <_scanf_float+0x2b6>
 800aaa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaa4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aaa8:	463a      	mov	r2, r7
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4798      	blx	r3
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aab8:	fa5f fa8a 	uxtb.w	sl, sl
 800aabc:	f1ba 0f02 	cmp.w	sl, #2
 800aac0:	d1ee      	bne.n	800aaa0 <_scanf_float+0x2d4>
 800aac2:	3d03      	subs	r5, #3
 800aac4:	b2ed      	uxtb	r5, r5
 800aac6:	1b76      	subs	r6, r6, r5
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	05da      	lsls	r2, r3, #23
 800aacc:	d530      	bpl.n	800ab30 <_scanf_float+0x364>
 800aace:	055b      	lsls	r3, r3, #21
 800aad0:	d511      	bpl.n	800aaf6 <_scanf_float+0x32a>
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	429e      	cmp	r6, r3
 800aad6:	f67f aebc 	bls.w	800a852 <_scanf_float+0x86>
 800aada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aae2:	463a      	mov	r2, r7
 800aae4:	4640      	mov	r0, r8
 800aae6:	4798      	blx	r3
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	e7f0      	b.n	800aad2 <_scanf_float+0x306>
 800aaf0:	46aa      	mov	sl, r5
 800aaf2:	46b3      	mov	fp, r6
 800aaf4:	e7de      	b.n	800aab4 <_scanf_float+0x2e8>
 800aaf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	2965      	cmp	r1, #101	@ 0x65
 800aafe:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab02:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	d00c      	beq.n	800ab24 <_scanf_float+0x358>
 800ab0a:	2945      	cmp	r1, #69	@ 0x45
 800ab0c:	d00a      	beq.n	800ab24 <_scanf_float+0x358>
 800ab0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab12:	463a      	mov	r2, r7
 800ab14:	4640      	mov	r0, r8
 800ab16:	4798      	blx	r3
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	1eb5      	subs	r5, r6, #2
 800ab22:	6123      	str	r3, [r4, #16]
 800ab24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4798      	blx	r3
 800ab2e:	462e      	mov	r6, r5
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	f012 0210 	ands.w	r2, r2, #16
 800ab36:	d001      	beq.n	800ab3c <_scanf_float+0x370>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e68b      	b.n	800a854 <_scanf_float+0x88>
 800ab3c:	7032      	strb	r2, [r6, #0]
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab48:	d11c      	bne.n	800ab84 <_scanf_float+0x3b8>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	454b      	cmp	r3, r9
 800ab4e:	eba3 0209 	sub.w	r2, r3, r9
 800ab52:	d123      	bne.n	800ab9c <_scanf_float+0x3d0>
 800ab54:	9901      	ldr	r1, [sp, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	4640      	mov	r0, r8
 800ab5a:	f002 fc25 	bl	800d3a8 <_strtod_r>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	6821      	ldr	r1, [r4, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f011 0f02 	tst.w	r1, #2
 800ab68:	ec57 6b10 	vmov	r6, r7, d0
 800ab6c:	f103 0204 	add.w	r2, r3, #4
 800ab70:	d01f      	beq.n	800abb2 <_scanf_float+0x3e6>
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	600a      	str	r2, [r1, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	e9c3 6700 	strd	r6, r7, [r3]
 800ab7c:	68e3      	ldr	r3, [r4, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60e3      	str	r3, [r4, #12]
 800ab82:	e7d9      	b.n	800ab38 <_scanf_float+0x36c>
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0e4      	beq.n	800ab54 <_scanf_float+0x388>
 800ab8a:	9905      	ldr	r1, [sp, #20]
 800ab8c:	230a      	movs	r3, #10
 800ab8e:	3101      	adds	r1, #1
 800ab90:	4640      	mov	r0, r8
 800ab92:	f002 fc89 	bl	800d4a8 <_strtol_r>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	9e05      	ldr	r6, [sp, #20]
 800ab9a:	1ac2      	subs	r2, r0, r3
 800ab9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aba0:	429e      	cmp	r6, r3
 800aba2:	bf28      	it	cs
 800aba4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aba8:	4910      	ldr	r1, [pc, #64]	@ (800abec <_scanf_float+0x420>)
 800abaa:	4630      	mov	r0, r6
 800abac:	f000 f918 	bl	800ade0 <siprintf>
 800abb0:	e7d0      	b.n	800ab54 <_scanf_float+0x388>
 800abb2:	f011 0f04 	tst.w	r1, #4
 800abb6:	9903      	ldr	r1, [sp, #12]
 800abb8:	600a      	str	r2, [r1, #0]
 800abba:	d1dc      	bne.n	800ab76 <_scanf_float+0x3aa>
 800abbc:	681d      	ldr	r5, [r3, #0]
 800abbe:	4632      	mov	r2, r6
 800abc0:	463b      	mov	r3, r7
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7f5 ffc1 	bl	8000b4c <__aeabi_dcmpun>
 800abca:	b128      	cbz	r0, 800abd8 <_scanf_float+0x40c>
 800abcc:	4808      	ldr	r0, [pc, #32]	@ (800abf0 <_scanf_float+0x424>)
 800abce:	f000 f9e5 	bl	800af9c <nanf>
 800abd2:	ed85 0a00 	vstr	s0, [r5]
 800abd6:	e7d1      	b.n	800ab7c <_scanf_float+0x3b0>
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f6 f814 	bl	8000c08 <__aeabi_d2f>
 800abe0:	6028      	str	r0, [r5, #0]
 800abe2:	e7cb      	b.n	800ab7c <_scanf_float+0x3b0>
 800abe4:	f04f 0900 	mov.w	r9, #0
 800abe8:	e629      	b.n	800a83e <_scanf_float+0x72>
 800abea:	bf00      	nop
 800abec:	080123f0 	.word	0x080123f0
 800abf0:	08012785 	.word	0x08012785

0800abf4 <std>:
 800abf4:	2300      	movs	r3, #0
 800abf6:	b510      	push	{r4, lr}
 800abf8:	4604      	mov	r4, r0
 800abfa:	e9c0 3300 	strd	r3, r3, [r0]
 800abfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac02:	6083      	str	r3, [r0, #8]
 800ac04:	8181      	strh	r1, [r0, #12]
 800ac06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac08:	81c2      	strh	r2, [r0, #14]
 800ac0a:	6183      	str	r3, [r0, #24]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	2208      	movs	r2, #8
 800ac10:	305c      	adds	r0, #92	@ 0x5c
 800ac12:	f000 f948 	bl	800aea6 <memset>
 800ac16:	4b0d      	ldr	r3, [pc, #52]	@ (800ac4c <std+0x58>)
 800ac18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <std+0x5c>)
 800ac1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <std+0x60>)
 800ac20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <std+0x64>)
 800ac24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <std+0x68>)
 800ac28:	6224      	str	r4, [r4, #32]
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d006      	beq.n	800ac3c <std+0x48>
 800ac2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac32:	4294      	cmp	r4, r2
 800ac34:	d002      	beq.n	800ac3c <std+0x48>
 800ac36:	33d0      	adds	r3, #208	@ 0xd0
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d105      	bne.n	800ac48 <std+0x54>
 800ac3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac44:	f000 b9a6 	b.w	800af94 <__retarget_lock_init_recursive>
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800ae21 	.word	0x0800ae21
 800ac50:	0800ae43 	.word	0x0800ae43
 800ac54:	0800ae7b 	.word	0x0800ae7b
 800ac58:	0800ae9f 	.word	0x0800ae9f
 800ac5c:	2000087c 	.word	0x2000087c

0800ac60 <stdio_exit_handler>:
 800ac60:	4a02      	ldr	r2, [pc, #8]	@ (800ac6c <stdio_exit_handler+0xc>)
 800ac62:	4903      	ldr	r1, [pc, #12]	@ (800ac70 <stdio_exit_handler+0x10>)
 800ac64:	4803      	ldr	r0, [pc, #12]	@ (800ac74 <stdio_exit_handler+0x14>)
 800ac66:	f000 b869 	b.w	800ad3c <_fwalk_sglue>
 800ac6a:	bf00      	nop
 800ac6c:	200000f8 	.word	0x200000f8
 800ac70:	0800d865 	.word	0x0800d865
 800ac74:	20000108 	.word	0x20000108

0800ac78 <cleanup_stdio>:
 800ac78:	6841      	ldr	r1, [r0, #4]
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	@ (800acac <cleanup_stdio+0x34>)
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	4604      	mov	r4, r0
 800ac82:	d001      	beq.n	800ac88 <cleanup_stdio+0x10>
 800ac84:	f002 fdee 	bl	800d864 <_fflush_r>
 800ac88:	68a1      	ldr	r1, [r4, #8]
 800ac8a:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <cleanup_stdio+0x38>)
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d002      	beq.n	800ac96 <cleanup_stdio+0x1e>
 800ac90:	4620      	mov	r0, r4
 800ac92:	f002 fde7 	bl	800d864 <_fflush_r>
 800ac96:	68e1      	ldr	r1, [r4, #12]
 800ac98:	4b06      	ldr	r3, [pc, #24]	@ (800acb4 <cleanup_stdio+0x3c>)
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	d004      	beq.n	800aca8 <cleanup_stdio+0x30>
 800ac9e:	4620      	mov	r0, r4
 800aca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca4:	f002 bdde 	b.w	800d864 <_fflush_r>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	bf00      	nop
 800acac:	2000087c 	.word	0x2000087c
 800acb0:	200008e4 	.word	0x200008e4
 800acb4:	2000094c 	.word	0x2000094c

0800acb8 <global_stdio_init.part.0>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	4b0b      	ldr	r3, [pc, #44]	@ (800ace8 <global_stdio_init.part.0+0x30>)
 800acbc:	4c0b      	ldr	r4, [pc, #44]	@ (800acec <global_stdio_init.part.0+0x34>)
 800acbe:	4a0c      	ldr	r2, [pc, #48]	@ (800acf0 <global_stdio_init.part.0+0x38>)
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	4620      	mov	r0, r4
 800acc4:	2200      	movs	r2, #0
 800acc6:	2104      	movs	r1, #4
 800acc8:	f7ff ff94 	bl	800abf4 <std>
 800accc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800acd0:	2201      	movs	r2, #1
 800acd2:	2109      	movs	r1, #9
 800acd4:	f7ff ff8e 	bl	800abf4 <std>
 800acd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acdc:	2202      	movs	r2, #2
 800acde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace2:	2112      	movs	r1, #18
 800ace4:	f7ff bf86 	b.w	800abf4 <std>
 800ace8:	200009b4 	.word	0x200009b4
 800acec:	2000087c 	.word	0x2000087c
 800acf0:	0800ac61 	.word	0x0800ac61

0800acf4 <__sfp_lock_acquire>:
 800acf4:	4801      	ldr	r0, [pc, #4]	@ (800acfc <__sfp_lock_acquire+0x8>)
 800acf6:	f000 b94e 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800acfa:	bf00      	nop
 800acfc:	200009bd 	.word	0x200009bd

0800ad00 <__sfp_lock_release>:
 800ad00:	4801      	ldr	r0, [pc, #4]	@ (800ad08 <__sfp_lock_release+0x8>)
 800ad02:	f000 b949 	b.w	800af98 <__retarget_lock_release_recursive>
 800ad06:	bf00      	nop
 800ad08:	200009bd 	.word	0x200009bd

0800ad0c <__sinit>:
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	4604      	mov	r4, r0
 800ad10:	f7ff fff0 	bl	800acf4 <__sfp_lock_acquire>
 800ad14:	6a23      	ldr	r3, [r4, #32]
 800ad16:	b11b      	cbz	r3, 800ad20 <__sinit+0x14>
 800ad18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1c:	f7ff bff0 	b.w	800ad00 <__sfp_lock_release>
 800ad20:	4b04      	ldr	r3, [pc, #16]	@ (800ad34 <__sinit+0x28>)
 800ad22:	6223      	str	r3, [r4, #32]
 800ad24:	4b04      	ldr	r3, [pc, #16]	@ (800ad38 <__sinit+0x2c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1f5      	bne.n	800ad18 <__sinit+0xc>
 800ad2c:	f7ff ffc4 	bl	800acb8 <global_stdio_init.part.0>
 800ad30:	e7f2      	b.n	800ad18 <__sinit+0xc>
 800ad32:	bf00      	nop
 800ad34:	0800ac79 	.word	0x0800ac79
 800ad38:	200009b4 	.word	0x200009b4

0800ad3c <_fwalk_sglue>:
 800ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4607      	mov	r7, r0
 800ad42:	4688      	mov	r8, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	2600      	movs	r6, #0
 800ad48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ad50:	d505      	bpl.n	800ad5e <_fwalk_sglue+0x22>
 800ad52:	6824      	ldr	r4, [r4, #0]
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	d1f7      	bne.n	800ad48 <_fwalk_sglue+0xc>
 800ad58:	4630      	mov	r0, r6
 800ad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d907      	bls.n	800ad74 <_fwalk_sglue+0x38>
 800ad64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	d003      	beq.n	800ad74 <_fwalk_sglue+0x38>
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	4638      	mov	r0, r7
 800ad70:	47c0      	blx	r8
 800ad72:	4306      	orrs	r6, r0
 800ad74:	3568      	adds	r5, #104	@ 0x68
 800ad76:	e7e9      	b.n	800ad4c <_fwalk_sglue+0x10>

0800ad78 <sniprintf>:
 800ad78:	b40c      	push	{r2, r3}
 800ad7a:	b530      	push	{r4, r5, lr}
 800ad7c:	4b17      	ldr	r3, [pc, #92]	@ (800addc <sniprintf+0x64>)
 800ad7e:	1e0c      	subs	r4, r1, #0
 800ad80:	681d      	ldr	r5, [r3, #0]
 800ad82:	b09d      	sub	sp, #116	@ 0x74
 800ad84:	da08      	bge.n	800ad98 <sniprintf+0x20>
 800ad86:	238b      	movs	r3, #139	@ 0x8b
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8e:	b01d      	add	sp, #116	@ 0x74
 800ad90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad94:	b002      	add	sp, #8
 800ad96:	4770      	bx	lr
 800ad98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ada0:	bf14      	ite	ne
 800ada2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ada6:	4623      	moveq	r3, r4
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	9307      	str	r3, [sp, #28]
 800adac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9006      	str	r0, [sp, #24]
 800adb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adba:	ab21      	add	r3, sp, #132	@ 0x84
 800adbc:	a902      	add	r1, sp, #8
 800adbe:	4628      	mov	r0, r5
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f002 fbcf 	bl	800d564 <_svfiprintf_r>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	bfbc      	itt	lt
 800adca:	238b      	movlt	r3, #139	@ 0x8b
 800adcc:	602b      	strlt	r3, [r5, #0]
 800adce:	2c00      	cmp	r4, #0
 800add0:	d0dd      	beq.n	800ad8e <sniprintf+0x16>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	e7d9      	b.n	800ad8e <sniprintf+0x16>
 800adda:	bf00      	nop
 800addc:	20000104 	.word	0x20000104

0800ade0 <siprintf>:
 800ade0:	b40e      	push	{r1, r2, r3}
 800ade2:	b500      	push	{lr}
 800ade4:	b09c      	sub	sp, #112	@ 0x70
 800ade6:	ab1d      	add	r3, sp, #116	@ 0x74
 800ade8:	9002      	str	r0, [sp, #8]
 800adea:	9006      	str	r0, [sp, #24]
 800adec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adf0:	4809      	ldr	r0, [pc, #36]	@ (800ae18 <siprintf+0x38>)
 800adf2:	9107      	str	r1, [sp, #28]
 800adf4:	9104      	str	r1, [sp, #16]
 800adf6:	4909      	ldr	r1, [pc, #36]	@ (800ae1c <siprintf+0x3c>)
 800adf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfc:	9105      	str	r1, [sp, #20]
 800adfe:	6800      	ldr	r0, [r0, #0]
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	a902      	add	r1, sp, #8
 800ae04:	f002 fbae 	bl	800d564 <_svfiprintf_r>
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	701a      	strb	r2, [r3, #0]
 800ae0e:	b01c      	add	sp, #112	@ 0x70
 800ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae14:	b003      	add	sp, #12
 800ae16:	4770      	bx	lr
 800ae18:	20000104 	.word	0x20000104
 800ae1c:	ffff0208 	.word	0xffff0208

0800ae20 <__sread>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	460c      	mov	r4, r1
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	f000 f86c 	bl	800af04 <_read_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	bfab      	itete	ge
 800ae30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae32:	89a3      	ldrhlt	r3, [r4, #12]
 800ae34:	181b      	addge	r3, r3, r0
 800ae36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae3a:	bfac      	ite	ge
 800ae3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae3e:	81a3      	strhlt	r3, [r4, #12]
 800ae40:	bd10      	pop	{r4, pc}

0800ae42 <__swrite>:
 800ae42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	461f      	mov	r7, r3
 800ae48:	898b      	ldrh	r3, [r1, #12]
 800ae4a:	05db      	lsls	r3, r3, #23
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	4616      	mov	r6, r2
 800ae52:	d505      	bpl.n	800ae60 <__swrite+0x1e>
 800ae54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae58:	2302      	movs	r3, #2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f000 f840 	bl	800aee0 <_lseek_r>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	463b      	mov	r3, r7
 800ae70:	4628      	mov	r0, r5
 800ae72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	f000 b857 	b.w	800af28 <_write_r>

0800ae7a <__sseek>:
 800ae7a:	b510      	push	{r4, lr}
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae82:	f000 f82d 	bl	800aee0 <_lseek_r>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	bf15      	itete	ne
 800ae8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae96:	81a3      	strheq	r3, [r4, #12]
 800ae98:	bf18      	it	ne
 800ae9a:	81a3      	strhne	r3, [r4, #12]
 800ae9c:	bd10      	pop	{r4, pc}

0800ae9e <__sclose>:
 800ae9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea2:	f000 b80d 	b.w	800aec0 <_close_r>

0800aea6 <memset>:
 800aea6:	4402      	add	r2, r0
 800aea8:	4603      	mov	r3, r0
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d100      	bne.n	800aeb0 <memset+0xa>
 800aeae:	4770      	bx	lr
 800aeb0:	f803 1b01 	strb.w	r1, [r3], #1
 800aeb4:	e7f9      	b.n	800aeaa <memset+0x4>
	...

0800aeb8 <_localeconv_r>:
 800aeb8:	4800      	ldr	r0, [pc, #0]	@ (800aebc <_localeconv_r+0x4>)
 800aeba:	4770      	bx	lr
 800aebc:	20000244 	.word	0x20000244

0800aec0 <_close_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d06      	ldr	r5, [pc, #24]	@ (800aedc <_close_r+0x1c>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	602b      	str	r3, [r5, #0]
 800aecc:	f7f6 fca4 	bl	8001818 <_close>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	d102      	bne.n	800aeda <_close_r+0x1a>
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	b103      	cbz	r3, 800aeda <_close_r+0x1a>
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	200009b8 	.word	0x200009b8

0800aee0 <_lseek_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d07      	ldr	r5, [pc, #28]	@ (800af00 <_lseek_r+0x20>)
 800aee4:	4604      	mov	r4, r0
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	602a      	str	r2, [r5, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f7f6 fc99 	bl	8001826 <_lseek>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_lseek_r+0x1e>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_lseek_r+0x1e>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	200009b8 	.word	0x200009b8

0800af04 <_read_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d07      	ldr	r5, [pc, #28]	@ (800af24 <_read_r+0x20>)
 800af08:	4604      	mov	r4, r0
 800af0a:	4608      	mov	r0, r1
 800af0c:	4611      	mov	r1, r2
 800af0e:	2200      	movs	r2, #0
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7f6 fc8e 	bl	8001834 <_read>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_read_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_read_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	200009b8 	.word	0x200009b8

0800af28 <_write_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	@ (800af48 <_write_r+0x20>)
 800af2c:	4604      	mov	r4, r0
 800af2e:	4608      	mov	r0, r1
 800af30:	4611      	mov	r1, r2
 800af32:	2200      	movs	r2, #0
 800af34:	602a      	str	r2, [r5, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	f7f6 fc83 	bl	8001842 <_write>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_write_r+0x1e>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_write_r+0x1e>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	200009b8 	.word	0x200009b8

0800af4c <__libc_init_array>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4d0d      	ldr	r5, [pc, #52]	@ (800af84 <__libc_init_array+0x38>)
 800af50:	4c0d      	ldr	r4, [pc, #52]	@ (800af88 <__libc_init_array+0x3c>)
 800af52:	1b64      	subs	r4, r4, r5
 800af54:	10a4      	asrs	r4, r4, #2
 800af56:	2600      	movs	r6, #0
 800af58:	42a6      	cmp	r6, r4
 800af5a:	d109      	bne.n	800af70 <__libc_init_array+0x24>
 800af5c:	4d0b      	ldr	r5, [pc, #44]	@ (800af8c <__libc_init_array+0x40>)
 800af5e:	4c0c      	ldr	r4, [pc, #48]	@ (800af90 <__libc_init_array+0x44>)
 800af60:	f003 fe50 	bl	800ec04 <_init>
 800af64:	1b64      	subs	r4, r4, r5
 800af66:	10a4      	asrs	r4, r4, #2
 800af68:	2600      	movs	r6, #0
 800af6a:	42a6      	cmp	r6, r4
 800af6c:	d105      	bne.n	800af7a <__libc_init_array+0x2e>
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	f855 3b04 	ldr.w	r3, [r5], #4
 800af74:	4798      	blx	r3
 800af76:	3601      	adds	r6, #1
 800af78:	e7ee      	b.n	800af58 <__libc_init_array+0xc>
 800af7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af7e:	4798      	blx	r3
 800af80:	3601      	adds	r6, #1
 800af82:	e7f2      	b.n	800af6a <__libc_init_array+0x1e>
 800af84:	08012830 	.word	0x08012830
 800af88:	08012830 	.word	0x08012830
 800af8c:	08012830 	.word	0x08012830
 800af90:	08012834 	.word	0x08012834

0800af94 <__retarget_lock_init_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_acquire_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__retarget_lock_release_recursive>:
 800af98:	4770      	bx	lr
	...

0800af9c <nanf>:
 800af9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800afa4 <nanf+0x8>
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	7fc00000 	.word	0x7fc00000

0800afa8 <quorem>:
 800afa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	6903      	ldr	r3, [r0, #16]
 800afae:	690c      	ldr	r4, [r1, #16]
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	4607      	mov	r7, r0
 800afb4:	db7e      	blt.n	800b0b4 <quorem+0x10c>
 800afb6:	3c01      	subs	r4, #1
 800afb8:	f101 0814 	add.w	r8, r1, #20
 800afbc:	00a3      	lsls	r3, r4, #2
 800afbe:	f100 0514 	add.w	r5, r0, #20
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd2:	3301      	adds	r3, #1
 800afd4:	429a      	cmp	r2, r3
 800afd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afda:	fbb2 f6f3 	udiv	r6, r2, r3
 800afde:	d32e      	bcc.n	800b03e <quorem+0x96>
 800afe0:	f04f 0a00 	mov.w	sl, #0
 800afe4:	46c4      	mov	ip, r8
 800afe6:	46ae      	mov	lr, r5
 800afe8:	46d3      	mov	fp, sl
 800afea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afee:	b298      	uxth	r0, r3
 800aff0:	fb06 a000 	mla	r0, r6, r0, sl
 800aff4:	0c02      	lsrs	r2, r0, #16
 800aff6:	0c1b      	lsrs	r3, r3, #16
 800aff8:	fb06 2303 	mla	r3, r6, r3, r2
 800affc:	f8de 2000 	ldr.w	r2, [lr]
 800b000:	b280      	uxth	r0, r0
 800b002:	b292      	uxth	r2, r2
 800b004:	1a12      	subs	r2, r2, r0
 800b006:	445a      	add	r2, fp
 800b008:	f8de 0000 	ldr.w	r0, [lr]
 800b00c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b010:	b29b      	uxth	r3, r3
 800b012:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b016:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b01a:	b292      	uxth	r2, r2
 800b01c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b020:	45e1      	cmp	r9, ip
 800b022:	f84e 2b04 	str.w	r2, [lr], #4
 800b026:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b02a:	d2de      	bcs.n	800afea <quorem+0x42>
 800b02c:	9b00      	ldr	r3, [sp, #0]
 800b02e:	58eb      	ldr	r3, [r5, r3]
 800b030:	b92b      	cbnz	r3, 800b03e <quorem+0x96>
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	3b04      	subs	r3, #4
 800b036:	429d      	cmp	r5, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	d32f      	bcc.n	800b09c <quorem+0xf4>
 800b03c:	613c      	str	r4, [r7, #16]
 800b03e:	4638      	mov	r0, r7
 800b040:	f001 f9c2 	bl	800c3c8 <__mcmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	db25      	blt.n	800b094 <quorem+0xec>
 800b048:	4629      	mov	r1, r5
 800b04a:	2000      	movs	r0, #0
 800b04c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b050:	f8d1 c000 	ldr.w	ip, [r1]
 800b054:	fa1f fe82 	uxth.w	lr, r2
 800b058:	fa1f f38c 	uxth.w	r3, ip
 800b05c:	eba3 030e 	sub.w	r3, r3, lr
 800b060:	4403      	add	r3, r0
 800b062:	0c12      	lsrs	r2, r2, #16
 800b064:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b068:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b072:	45c1      	cmp	r9, r8
 800b074:	f841 3b04 	str.w	r3, [r1], #4
 800b078:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b07c:	d2e6      	bcs.n	800b04c <quorem+0xa4>
 800b07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b086:	b922      	cbnz	r2, 800b092 <quorem+0xea>
 800b088:	3b04      	subs	r3, #4
 800b08a:	429d      	cmp	r5, r3
 800b08c:	461a      	mov	r2, r3
 800b08e:	d30b      	bcc.n	800b0a8 <quorem+0x100>
 800b090:	613c      	str	r4, [r7, #16]
 800b092:	3601      	adds	r6, #1
 800b094:	4630      	mov	r0, r6
 800b096:	b003      	add	sp, #12
 800b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	6812      	ldr	r2, [r2, #0]
 800b09e:	3b04      	subs	r3, #4
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	d1cb      	bne.n	800b03c <quorem+0x94>
 800b0a4:	3c01      	subs	r4, #1
 800b0a6:	e7c6      	b.n	800b036 <quorem+0x8e>
 800b0a8:	6812      	ldr	r2, [r2, #0]
 800b0aa:	3b04      	subs	r3, #4
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	d1ef      	bne.n	800b090 <quorem+0xe8>
 800b0b0:	3c01      	subs	r4, #1
 800b0b2:	e7ea      	b.n	800b08a <quorem+0xe2>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7ee      	b.n	800b096 <quorem+0xee>

0800b0b8 <_dtoa_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	69c7      	ldr	r7, [r0, #28]
 800b0be:	b099      	sub	sp, #100	@ 0x64
 800b0c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0c4:	ec55 4b10 	vmov	r4, r5, d0
 800b0c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b0ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0cc:	4683      	mov	fp, r0
 800b0ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0d2:	b97f      	cbnz	r7, 800b0f4 <_dtoa_r+0x3c>
 800b0d4:	2010      	movs	r0, #16
 800b0d6:	f000 fdfd 	bl	800bcd4 <malloc>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0e0:	b920      	cbnz	r0, 800b0ec <_dtoa_r+0x34>
 800b0e2:	4ba7      	ldr	r3, [pc, #668]	@ (800b380 <_dtoa_r+0x2c8>)
 800b0e4:	21ef      	movs	r1, #239	@ 0xef
 800b0e6:	48a7      	ldr	r0, [pc, #668]	@ (800b384 <_dtoa_r+0x2cc>)
 800b0e8:	f002 fc3e 	bl	800d968 <__assert_func>
 800b0ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0f0:	6007      	str	r7, [r0, #0]
 800b0f2:	60c7      	str	r7, [r0, #12]
 800b0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0f8:	6819      	ldr	r1, [r3, #0]
 800b0fa:	b159      	cbz	r1, 800b114 <_dtoa_r+0x5c>
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	604a      	str	r2, [r1, #4]
 800b100:	2301      	movs	r3, #1
 800b102:	4093      	lsls	r3, r2
 800b104:	608b      	str	r3, [r1, #8]
 800b106:	4658      	mov	r0, fp
 800b108:	f000 feda 	bl	800bec0 <_Bfree>
 800b10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	1e2b      	subs	r3, r5, #0
 800b116:	bfb9      	ittee	lt
 800b118:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b11c:	9303      	strlt	r3, [sp, #12]
 800b11e:	2300      	movge	r3, #0
 800b120:	6033      	strge	r3, [r6, #0]
 800b122:	9f03      	ldr	r7, [sp, #12]
 800b124:	4b98      	ldr	r3, [pc, #608]	@ (800b388 <_dtoa_r+0x2d0>)
 800b126:	bfbc      	itt	lt
 800b128:	2201      	movlt	r2, #1
 800b12a:	6032      	strlt	r2, [r6, #0]
 800b12c:	43bb      	bics	r3, r7
 800b12e:	d112      	bne.n	800b156 <_dtoa_r+0x9e>
 800b130:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b132:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b13c:	4323      	orrs	r3, r4
 800b13e:	f000 854d 	beq.w	800bbdc <_dtoa_r+0xb24>
 800b142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b144:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b39c <_dtoa_r+0x2e4>
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 854f 	beq.w	800bbec <_dtoa_r+0xb34>
 800b14e:	f10a 0303 	add.w	r3, sl, #3
 800b152:	f000 bd49 	b.w	800bbe8 <_dtoa_r+0xb30>
 800b156:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b15a:	2200      	movs	r2, #0
 800b15c:	ec51 0b17 	vmov	r0, r1, d7
 800b160:	2300      	movs	r3, #0
 800b162:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b166:	f7f5 fcbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800b16a:	4680      	mov	r8, r0
 800b16c:	b158      	cbz	r0, 800b186 <_dtoa_r+0xce>
 800b16e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b170:	2301      	movs	r3, #1
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b176:	b113      	cbz	r3, 800b17e <_dtoa_r+0xc6>
 800b178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b17a:	4b84      	ldr	r3, [pc, #528]	@ (800b38c <_dtoa_r+0x2d4>)
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b3a0 <_dtoa_r+0x2e8>
 800b182:	f000 bd33 	b.w	800bbec <_dtoa_r+0xb34>
 800b186:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b18a:	aa16      	add	r2, sp, #88	@ 0x58
 800b18c:	a917      	add	r1, sp, #92	@ 0x5c
 800b18e:	4658      	mov	r0, fp
 800b190:	f001 fa3a 	bl	800c608 <__d2b>
 800b194:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b198:	4681      	mov	r9, r0
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d077      	beq.n	800b28e <_dtoa_r+0x1d6>
 800b19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4b74      	ldr	r3, [pc, #464]	@ (800b390 <_dtoa_r+0x2d8>)
 800b1be:	f7f5 f873 	bl	80002a8 <__aeabi_dsub>
 800b1c2:	a369      	add	r3, pc, #420	@ (adr r3, 800b368 <_dtoa_r+0x2b0>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 fa26 	bl	8000618 <__aeabi_dmul>
 800b1cc:	a368      	add	r3, pc, #416	@ (adr r3, 800b370 <_dtoa_r+0x2b8>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f7f5 f86b 	bl	80002ac <__adddf3>
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	460d      	mov	r5, r1
 800b1dc:	f7f5 f9b2 	bl	8000544 <__aeabi_i2d>
 800b1e0:	a365      	add	r3, pc, #404	@ (adr r3, 800b378 <_dtoa_r+0x2c0>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 fa17 	bl	8000618 <__aeabi_dmul>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 f85b 	bl	80002ac <__adddf3>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	f7f5 fcbd 	bl	8000b78 <__aeabi_d2iz>
 800b1fe:	2200      	movs	r2, #0
 800b200:	4607      	mov	r7, r0
 800b202:	2300      	movs	r3, #0
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 fc78 	bl	8000afc <__aeabi_dcmplt>
 800b20c:	b140      	cbz	r0, 800b220 <_dtoa_r+0x168>
 800b20e:	4638      	mov	r0, r7
 800b210:	f7f5 f998 	bl	8000544 <__aeabi_i2d>
 800b214:	4622      	mov	r2, r4
 800b216:	462b      	mov	r3, r5
 800b218:	f7f5 fc66 	bl	8000ae8 <__aeabi_dcmpeq>
 800b21c:	b900      	cbnz	r0, 800b220 <_dtoa_r+0x168>
 800b21e:	3f01      	subs	r7, #1
 800b220:	2f16      	cmp	r7, #22
 800b222:	d851      	bhi.n	800b2c8 <_dtoa_r+0x210>
 800b224:	4b5b      	ldr	r3, [pc, #364]	@ (800b394 <_dtoa_r+0x2dc>)
 800b226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b232:	f7f5 fc63 	bl	8000afc <__aeabi_dcmplt>
 800b236:	2800      	cmp	r0, #0
 800b238:	d048      	beq.n	800b2cc <_dtoa_r+0x214>
 800b23a:	3f01      	subs	r7, #1
 800b23c:	2300      	movs	r3, #0
 800b23e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b240:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b242:	1b9b      	subs	r3, r3, r6
 800b244:	1e5a      	subs	r2, r3, #1
 800b246:	bf44      	itt	mi
 800b248:	f1c3 0801 	rsbmi	r8, r3, #1
 800b24c:	2300      	movmi	r3, #0
 800b24e:	9208      	str	r2, [sp, #32]
 800b250:	bf54      	ite	pl
 800b252:	f04f 0800 	movpl.w	r8, #0
 800b256:	9308      	strmi	r3, [sp, #32]
 800b258:	2f00      	cmp	r7, #0
 800b25a:	db39      	blt.n	800b2d0 <_dtoa_r+0x218>
 800b25c:	9b08      	ldr	r3, [sp, #32]
 800b25e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b260:	443b      	add	r3, r7
 800b262:	9308      	str	r3, [sp, #32]
 800b264:	2300      	movs	r3, #0
 800b266:	930a      	str	r3, [sp, #40]	@ 0x28
 800b268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d864      	bhi.n	800b338 <_dtoa_r+0x280>
 800b26e:	2b05      	cmp	r3, #5
 800b270:	bfc4      	itt	gt
 800b272:	3b04      	subgt	r3, #4
 800b274:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b278:	f1a3 0302 	sub.w	r3, r3, #2
 800b27c:	bfcc      	ite	gt
 800b27e:	2400      	movgt	r4, #0
 800b280:	2401      	movle	r4, #1
 800b282:	2b03      	cmp	r3, #3
 800b284:	d863      	bhi.n	800b34e <_dtoa_r+0x296>
 800b286:	e8df f003 	tbb	[pc, r3]
 800b28a:	372a      	.short	0x372a
 800b28c:	5535      	.short	0x5535
 800b28e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b292:	441e      	add	r6, r3
 800b294:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b298:	2b20      	cmp	r3, #32
 800b29a:	bfc1      	itttt	gt
 800b29c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2a0:	409f      	lslgt	r7, r3
 800b2a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b2aa:	bfd6      	itet	le
 800b2ac:	f1c3 0320 	rsble	r3, r3, #32
 800b2b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b2b4:	fa04 f003 	lslle.w	r0, r4, r3
 800b2b8:	f7f5 f934 	bl	8000524 <__aeabi_ui2d>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b2c2:	3e01      	subs	r6, #1
 800b2c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b2c6:	e777      	b.n	800b1b8 <_dtoa_r+0x100>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e7b8      	b.n	800b23e <_dtoa_r+0x186>
 800b2cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b2ce:	e7b7      	b.n	800b240 <_dtoa_r+0x188>
 800b2d0:	427b      	negs	r3, r7
 800b2d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	eba8 0807 	sub.w	r8, r8, r7
 800b2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2dc:	e7c4      	b.n	800b268 <_dtoa_r+0x1b0>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dc35      	bgt.n	800b354 <_dtoa_r+0x29c>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	9307      	str	r3, [sp, #28]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2f2:	e00b      	b.n	800b30c <_dtoa_r+0x254>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e7f3      	b.n	800b2e0 <_dtoa_r+0x228>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	2b01      	cmp	r3, #1
 800b306:	9307      	str	r3, [sp, #28]
 800b308:	bfb8      	it	lt
 800b30a:	2301      	movlt	r3, #1
 800b30c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b310:	2100      	movs	r1, #0
 800b312:	2204      	movs	r2, #4
 800b314:	f102 0514 	add.w	r5, r2, #20
 800b318:	429d      	cmp	r5, r3
 800b31a:	d91f      	bls.n	800b35c <_dtoa_r+0x2a4>
 800b31c:	6041      	str	r1, [r0, #4]
 800b31e:	4658      	mov	r0, fp
 800b320:	f000 fd8e 	bl	800be40 <_Balloc>
 800b324:	4682      	mov	sl, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	d13c      	bne.n	800b3a4 <_dtoa_r+0x2ec>
 800b32a:	4b1b      	ldr	r3, [pc, #108]	@ (800b398 <_dtoa_r+0x2e0>)
 800b32c:	4602      	mov	r2, r0
 800b32e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b332:	e6d8      	b.n	800b0e6 <_dtoa_r+0x2e>
 800b334:	2301      	movs	r3, #1
 800b336:	e7e0      	b.n	800b2fa <_dtoa_r+0x242>
 800b338:	2401      	movs	r4, #1
 800b33a:	2300      	movs	r3, #0
 800b33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b340:	f04f 33ff 	mov.w	r3, #4294967295
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	9307      	str	r3, [sp, #28]
 800b348:	2200      	movs	r2, #0
 800b34a:	2312      	movs	r3, #18
 800b34c:	e7d0      	b.n	800b2f0 <_dtoa_r+0x238>
 800b34e:	2301      	movs	r3, #1
 800b350:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b352:	e7f5      	b.n	800b340 <_dtoa_r+0x288>
 800b354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	9307      	str	r3, [sp, #28]
 800b35a:	e7d7      	b.n	800b30c <_dtoa_r+0x254>
 800b35c:	3101      	adds	r1, #1
 800b35e:	0052      	lsls	r2, r2, #1
 800b360:	e7d8      	b.n	800b314 <_dtoa_r+0x25c>
 800b362:	bf00      	nop
 800b364:	f3af 8000 	nop.w
 800b368:	636f4361 	.word	0x636f4361
 800b36c:	3fd287a7 	.word	0x3fd287a7
 800b370:	8b60c8b3 	.word	0x8b60c8b3
 800b374:	3fc68a28 	.word	0x3fc68a28
 800b378:	509f79fb 	.word	0x509f79fb
 800b37c:	3fd34413 	.word	0x3fd34413
 800b380:	08012402 	.word	0x08012402
 800b384:	08012419 	.word	0x08012419
 800b388:	7ff00000 	.word	0x7ff00000
 800b38c:	080123cd 	.word	0x080123cd
 800b390:	3ff80000 	.word	0x3ff80000
 800b394:	08012510 	.word	0x08012510
 800b398:	08012471 	.word	0x08012471
 800b39c:	080123fe 	.word	0x080123fe
 800b3a0:	080123cc 	.word	0x080123cc
 800b3a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3a8:	6018      	str	r0, [r3, #0]
 800b3aa:	9b07      	ldr	r3, [sp, #28]
 800b3ac:	2b0e      	cmp	r3, #14
 800b3ae:	f200 80a4 	bhi.w	800b4fa <_dtoa_r+0x442>
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	f000 80a1 	beq.w	800b4fa <_dtoa_r+0x442>
 800b3b8:	2f00      	cmp	r7, #0
 800b3ba:	dd33      	ble.n	800b424 <_dtoa_r+0x36c>
 800b3bc:	4bad      	ldr	r3, [pc, #692]	@ (800b674 <_dtoa_r+0x5bc>)
 800b3be:	f007 020f 	and.w	r2, r7, #15
 800b3c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3c6:	ed93 7b00 	vldr	d7, [r3]
 800b3ca:	05f8      	lsls	r0, r7, #23
 800b3cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b3d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3d4:	d516      	bpl.n	800b404 <_dtoa_r+0x34c>
 800b3d6:	4ba8      	ldr	r3, [pc, #672]	@ (800b678 <_dtoa_r+0x5c0>)
 800b3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3e0:	f7f5 fa44 	bl	800086c <__aeabi_ddiv>
 800b3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e8:	f004 040f 	and.w	r4, r4, #15
 800b3ec:	2603      	movs	r6, #3
 800b3ee:	4da2      	ldr	r5, [pc, #648]	@ (800b678 <_dtoa_r+0x5c0>)
 800b3f0:	b954      	cbnz	r4, 800b408 <_dtoa_r+0x350>
 800b3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3fa:	f7f5 fa37 	bl	800086c <__aeabi_ddiv>
 800b3fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b402:	e028      	b.n	800b456 <_dtoa_r+0x39e>
 800b404:	2602      	movs	r6, #2
 800b406:	e7f2      	b.n	800b3ee <_dtoa_r+0x336>
 800b408:	07e1      	lsls	r1, r4, #31
 800b40a:	d508      	bpl.n	800b41e <_dtoa_r+0x366>
 800b40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b410:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b414:	f7f5 f900 	bl	8000618 <__aeabi_dmul>
 800b418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b41c:	3601      	adds	r6, #1
 800b41e:	1064      	asrs	r4, r4, #1
 800b420:	3508      	adds	r5, #8
 800b422:	e7e5      	b.n	800b3f0 <_dtoa_r+0x338>
 800b424:	f000 80d2 	beq.w	800b5cc <_dtoa_r+0x514>
 800b428:	427c      	negs	r4, r7
 800b42a:	4b92      	ldr	r3, [pc, #584]	@ (800b674 <_dtoa_r+0x5bc>)
 800b42c:	4d92      	ldr	r5, [pc, #584]	@ (800b678 <_dtoa_r+0x5c0>)
 800b42e:	f004 020f 	and.w	r2, r4, #15
 800b432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b43e:	f7f5 f8eb 	bl	8000618 <__aeabi_dmul>
 800b442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b446:	1124      	asrs	r4, r4, #4
 800b448:	2300      	movs	r3, #0
 800b44a:	2602      	movs	r6, #2
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	f040 80b2 	bne.w	800b5b6 <_dtoa_r+0x4fe>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1d3      	bne.n	800b3fe <_dtoa_r+0x346>
 800b456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b458:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 80b7 	beq.w	800b5d0 <_dtoa_r+0x518>
 800b462:	4b86      	ldr	r3, [pc, #536]	@ (800b67c <_dtoa_r+0x5c4>)
 800b464:	2200      	movs	r2, #0
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f5 fb47 	bl	8000afc <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	f000 80ae 	beq.w	800b5d0 <_dtoa_r+0x518>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 80aa 	beq.w	800b5d0 <_dtoa_r+0x518>
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd37      	ble.n	800b4f2 <_dtoa_r+0x43a>
 800b482:	1e7b      	subs	r3, r7, #1
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	4620      	mov	r0, r4
 800b488:	4b7d      	ldr	r3, [pc, #500]	@ (800b680 <_dtoa_r+0x5c8>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f5 f8c3 	bl	8000618 <__aeabi_dmul>
 800b492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b496:	9c00      	ldr	r4, [sp, #0]
 800b498:	3601      	adds	r6, #1
 800b49a:	4630      	mov	r0, r6
 800b49c:	f7f5 f852 	bl	8000544 <__aeabi_i2d>
 800b4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4a4:	f7f5 f8b8 	bl	8000618 <__aeabi_dmul>
 800b4a8:	4b76      	ldr	r3, [pc, #472]	@ (800b684 <_dtoa_r+0x5cc>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f7f4 fefe 	bl	80002ac <__adddf3>
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4b6:	2c00      	cmp	r4, #0
 800b4b8:	f040 808d 	bne.w	800b5d6 <_dtoa_r+0x51e>
 800b4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c0:	4b71      	ldr	r3, [pc, #452]	@ (800b688 <_dtoa_r+0x5d0>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f7f4 fef0 	bl	80002a8 <__aeabi_dsub>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4d0:	462a      	mov	r2, r5
 800b4d2:	4633      	mov	r3, r6
 800b4d4:	f7f5 fb30 	bl	8000b38 <__aeabi_dcmpgt>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f040 828b 	bne.w	800b9f4 <_dtoa_r+0x93c>
 800b4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4e8:	f7f5 fb08 	bl	8000afc <__aeabi_dcmplt>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	f040 8128 	bne.w	800b742 <_dtoa_r+0x68a>
 800b4f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f2c0 815a 	blt.w	800b7b6 <_dtoa_r+0x6fe>
 800b502:	2f0e      	cmp	r7, #14
 800b504:	f300 8157 	bgt.w	800b7b6 <_dtoa_r+0x6fe>
 800b508:	4b5a      	ldr	r3, [pc, #360]	@ (800b674 <_dtoa_r+0x5bc>)
 800b50a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b50e:	ed93 7b00 	vldr	d7, [r3]
 800b512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b514:	2b00      	cmp	r3, #0
 800b516:	ed8d 7b00 	vstr	d7, [sp]
 800b51a:	da03      	bge.n	800b524 <_dtoa_r+0x46c>
 800b51c:	9b07      	ldr	r3, [sp, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f340 8101 	ble.w	800b726 <_dtoa_r+0x66e>
 800b524:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b528:	4656      	mov	r6, sl
 800b52a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b52e:	4620      	mov	r0, r4
 800b530:	4629      	mov	r1, r5
 800b532:	f7f5 f99b 	bl	800086c <__aeabi_ddiv>
 800b536:	f7f5 fb1f 	bl	8000b78 <__aeabi_d2iz>
 800b53a:	4680      	mov	r8, r0
 800b53c:	f7f5 f802 	bl	8000544 <__aeabi_i2d>
 800b540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b544:	f7f5 f868 	bl	8000618 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4620      	mov	r0, r4
 800b54e:	4629      	mov	r1, r5
 800b550:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b554:	f7f4 fea8 	bl	80002a8 <__aeabi_dsub>
 800b558:	f806 4b01 	strb.w	r4, [r6], #1
 800b55c:	9d07      	ldr	r5, [sp, #28]
 800b55e:	eba6 040a 	sub.w	r4, r6, sl
 800b562:	42a5      	cmp	r5, r4
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	f040 8117 	bne.w	800b79a <_dtoa_r+0x6e2>
 800b56c:	f7f4 fe9e 	bl	80002ac <__adddf3>
 800b570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	f7f5 fade 	bl	8000b38 <__aeabi_dcmpgt>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f040 80f9 	bne.w	800b774 <_dtoa_r+0x6bc>
 800b582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b586:	4620      	mov	r0, r4
 800b588:	4629      	mov	r1, r5
 800b58a:	f7f5 faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800b58e:	b118      	cbz	r0, 800b598 <_dtoa_r+0x4e0>
 800b590:	f018 0f01 	tst.w	r8, #1
 800b594:	f040 80ee 	bne.w	800b774 <_dtoa_r+0x6bc>
 800b598:	4649      	mov	r1, r9
 800b59a:	4658      	mov	r0, fp
 800b59c:	f000 fc90 	bl	800bec0 <_Bfree>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	7033      	strb	r3, [r6, #0]
 800b5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5a6:	3701      	adds	r7, #1
 800b5a8:	601f      	str	r7, [r3, #0]
 800b5aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 831d 	beq.w	800bbec <_dtoa_r+0xb34>
 800b5b2:	601e      	str	r6, [r3, #0]
 800b5b4:	e31a      	b.n	800bbec <_dtoa_r+0xb34>
 800b5b6:	07e2      	lsls	r2, r4, #31
 800b5b8:	d505      	bpl.n	800b5c6 <_dtoa_r+0x50e>
 800b5ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5be:	f7f5 f82b 	bl	8000618 <__aeabi_dmul>
 800b5c2:	3601      	adds	r6, #1
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	1064      	asrs	r4, r4, #1
 800b5c8:	3508      	adds	r5, #8
 800b5ca:	e73f      	b.n	800b44c <_dtoa_r+0x394>
 800b5cc:	2602      	movs	r6, #2
 800b5ce:	e742      	b.n	800b456 <_dtoa_r+0x39e>
 800b5d0:	9c07      	ldr	r4, [sp, #28]
 800b5d2:	9704      	str	r7, [sp, #16]
 800b5d4:	e761      	b.n	800b49a <_dtoa_r+0x3e2>
 800b5d6:	4b27      	ldr	r3, [pc, #156]	@ (800b674 <_dtoa_r+0x5bc>)
 800b5d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5e2:	4454      	add	r4, sl
 800b5e4:	2900      	cmp	r1, #0
 800b5e6:	d053      	beq.n	800b690 <_dtoa_r+0x5d8>
 800b5e8:	4928      	ldr	r1, [pc, #160]	@ (800b68c <_dtoa_r+0x5d4>)
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f7f5 f93e 	bl	800086c <__aeabi_ddiv>
 800b5f0:	4633      	mov	r3, r6
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	f7f4 fe58 	bl	80002a8 <__aeabi_dsub>
 800b5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5fc:	4656      	mov	r6, sl
 800b5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b602:	f7f5 fab9 	bl	8000b78 <__aeabi_d2iz>
 800b606:	4605      	mov	r5, r0
 800b608:	f7f4 ff9c 	bl	8000544 <__aeabi_i2d>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b614:	f7f4 fe48 	bl	80002a8 <__aeabi_dsub>
 800b618:	3530      	adds	r5, #48	@ 0x30
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b622:	f806 5b01 	strb.w	r5, [r6], #1
 800b626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b62a:	f7f5 fa67 	bl	8000afc <__aeabi_dcmplt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d171      	bne.n	800b716 <_dtoa_r+0x65e>
 800b632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b636:	4911      	ldr	r1, [pc, #68]	@ (800b67c <_dtoa_r+0x5c4>)
 800b638:	2000      	movs	r0, #0
 800b63a:	f7f4 fe35 	bl	80002a8 <__aeabi_dsub>
 800b63e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b642:	f7f5 fa5b 	bl	8000afc <__aeabi_dcmplt>
 800b646:	2800      	cmp	r0, #0
 800b648:	f040 8095 	bne.w	800b776 <_dtoa_r+0x6be>
 800b64c:	42a6      	cmp	r6, r4
 800b64e:	f43f af50 	beq.w	800b4f2 <_dtoa_r+0x43a>
 800b652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b656:	4b0a      	ldr	r3, [pc, #40]	@ (800b680 <_dtoa_r+0x5c8>)
 800b658:	2200      	movs	r2, #0
 800b65a:	f7f4 ffdd 	bl	8000618 <__aeabi_dmul>
 800b65e:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <_dtoa_r+0x5c8>)
 800b660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b664:	2200      	movs	r2, #0
 800b666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66a:	f7f4 ffd5 	bl	8000618 <__aeabi_dmul>
 800b66e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b672:	e7c4      	b.n	800b5fe <_dtoa_r+0x546>
 800b674:	08012510 	.word	0x08012510
 800b678:	080124e8 	.word	0x080124e8
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	40240000 	.word	0x40240000
 800b684:	401c0000 	.word	0x401c0000
 800b688:	40140000 	.word	0x40140000
 800b68c:	3fe00000 	.word	0x3fe00000
 800b690:	4631      	mov	r1, r6
 800b692:	4628      	mov	r0, r5
 800b694:	f7f4 ffc0 	bl	8000618 <__aeabi_dmul>
 800b698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b69c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b69e:	4656      	mov	r6, sl
 800b6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a4:	f7f5 fa68 	bl	8000b78 <__aeabi_d2iz>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	f7f4 ff4b 	bl	8000544 <__aeabi_i2d>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b6:	f7f4 fdf7 	bl	80002a8 <__aeabi_dsub>
 800b6ba:	3530      	adds	r5, #48	@ 0x30
 800b6bc:	f806 5b01 	strb.w	r5, [r6], #1
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	42a6      	cmp	r6, r4
 800b6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ca:	f04f 0200 	mov.w	r2, #0
 800b6ce:	d124      	bne.n	800b71a <_dtoa_r+0x662>
 800b6d0:	4bac      	ldr	r3, [pc, #688]	@ (800b984 <_dtoa_r+0x8cc>)
 800b6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6d6:	f7f4 fde9 	bl	80002ac <__adddf3>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e2:	f7f5 fa29 	bl	8000b38 <__aeabi_dcmpgt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d145      	bne.n	800b776 <_dtoa_r+0x6be>
 800b6ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ee:	49a5      	ldr	r1, [pc, #660]	@ (800b984 <_dtoa_r+0x8cc>)
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f7f4 fdd9 	bl	80002a8 <__aeabi_dsub>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6fe:	f7f5 f9fd 	bl	8000afc <__aeabi_dcmplt>
 800b702:	2800      	cmp	r0, #0
 800b704:	f43f aef5 	beq.w	800b4f2 <_dtoa_r+0x43a>
 800b708:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b70a:	1e73      	subs	r3, r6, #1
 800b70c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b70e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b712:	2b30      	cmp	r3, #48	@ 0x30
 800b714:	d0f8      	beq.n	800b708 <_dtoa_r+0x650>
 800b716:	9f04      	ldr	r7, [sp, #16]
 800b718:	e73e      	b.n	800b598 <_dtoa_r+0x4e0>
 800b71a:	4b9b      	ldr	r3, [pc, #620]	@ (800b988 <_dtoa_r+0x8d0>)
 800b71c:	f7f4 ff7c 	bl	8000618 <__aeabi_dmul>
 800b720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b724:	e7bc      	b.n	800b6a0 <_dtoa_r+0x5e8>
 800b726:	d10c      	bne.n	800b742 <_dtoa_r+0x68a>
 800b728:	4b98      	ldr	r3, [pc, #608]	@ (800b98c <_dtoa_r+0x8d4>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b730:	f7f4 ff72 	bl	8000618 <__aeabi_dmul>
 800b734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b738:	f7f5 f9f4 	bl	8000b24 <__aeabi_dcmpge>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f000 8157 	beq.w	800b9f0 <_dtoa_r+0x938>
 800b742:	2400      	movs	r4, #0
 800b744:	4625      	mov	r5, r4
 800b746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b748:	43db      	mvns	r3, r3
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	4656      	mov	r6, sl
 800b74e:	2700      	movs	r7, #0
 800b750:	4621      	mov	r1, r4
 800b752:	4658      	mov	r0, fp
 800b754:	f000 fbb4 	bl	800bec0 <_Bfree>
 800b758:	2d00      	cmp	r5, #0
 800b75a:	d0dc      	beq.n	800b716 <_dtoa_r+0x65e>
 800b75c:	b12f      	cbz	r7, 800b76a <_dtoa_r+0x6b2>
 800b75e:	42af      	cmp	r7, r5
 800b760:	d003      	beq.n	800b76a <_dtoa_r+0x6b2>
 800b762:	4639      	mov	r1, r7
 800b764:	4658      	mov	r0, fp
 800b766:	f000 fbab 	bl	800bec0 <_Bfree>
 800b76a:	4629      	mov	r1, r5
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fba7 	bl	800bec0 <_Bfree>
 800b772:	e7d0      	b.n	800b716 <_dtoa_r+0x65e>
 800b774:	9704      	str	r7, [sp, #16]
 800b776:	4633      	mov	r3, r6
 800b778:	461e      	mov	r6, r3
 800b77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b77e:	2a39      	cmp	r2, #57	@ 0x39
 800b780:	d107      	bne.n	800b792 <_dtoa_r+0x6da>
 800b782:	459a      	cmp	sl, r3
 800b784:	d1f8      	bne.n	800b778 <_dtoa_r+0x6c0>
 800b786:	9a04      	ldr	r2, [sp, #16]
 800b788:	3201      	adds	r2, #1
 800b78a:	9204      	str	r2, [sp, #16]
 800b78c:	2230      	movs	r2, #48	@ 0x30
 800b78e:	f88a 2000 	strb.w	r2, [sl]
 800b792:	781a      	ldrb	r2, [r3, #0]
 800b794:	3201      	adds	r2, #1
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	e7bd      	b.n	800b716 <_dtoa_r+0x65e>
 800b79a:	4b7b      	ldr	r3, [pc, #492]	@ (800b988 <_dtoa_r+0x8d0>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	f7f4 ff3b 	bl	8000618 <__aeabi_dmul>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	f7f5 f99d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f43f aebb 	beq.w	800b52a <_dtoa_r+0x472>
 800b7b4:	e6f0      	b.n	800b598 <_dtoa_r+0x4e0>
 800b7b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	f000 80db 	beq.w	800b974 <_dtoa_r+0x8bc>
 800b7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c0:	2a01      	cmp	r2, #1
 800b7c2:	f300 80bf 	bgt.w	800b944 <_dtoa_r+0x88c>
 800b7c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	f000 80b7 	beq.w	800b93c <_dtoa_r+0x884>
 800b7ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b7d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7d4:	4646      	mov	r6, r8
 800b7d6:	9a08      	ldr	r2, [sp, #32]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	441a      	add	r2, r3
 800b7dc:	4658      	mov	r0, fp
 800b7de:	4498      	add	r8, r3
 800b7e0:	9208      	str	r2, [sp, #32]
 800b7e2:	f000 fc6b 	bl	800c0bc <__i2b>
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	b15e      	cbz	r6, 800b802 <_dtoa_r+0x74a>
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dd08      	ble.n	800b802 <_dtoa_r+0x74a>
 800b7f0:	42b3      	cmp	r3, r6
 800b7f2:	9a08      	ldr	r2, [sp, #32]
 800b7f4:	bfa8      	it	ge
 800b7f6:	4633      	movge	r3, r6
 800b7f8:	eba8 0803 	sub.w	r8, r8, r3
 800b7fc:	1af6      	subs	r6, r6, r3
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	9308      	str	r3, [sp, #32]
 800b802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b804:	b1f3      	cbz	r3, 800b844 <_dtoa_r+0x78c>
 800b806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80b7 	beq.w	800b97c <_dtoa_r+0x8c4>
 800b80e:	b18c      	cbz	r4, 800b834 <_dtoa_r+0x77c>
 800b810:	4629      	mov	r1, r5
 800b812:	4622      	mov	r2, r4
 800b814:	4658      	mov	r0, fp
 800b816:	f000 fd11 	bl	800c23c <__pow5mult>
 800b81a:	464a      	mov	r2, r9
 800b81c:	4601      	mov	r1, r0
 800b81e:	4605      	mov	r5, r0
 800b820:	4658      	mov	r0, fp
 800b822:	f000 fc61 	bl	800c0e8 <__multiply>
 800b826:	4649      	mov	r1, r9
 800b828:	9004      	str	r0, [sp, #16]
 800b82a:	4658      	mov	r0, fp
 800b82c:	f000 fb48 	bl	800bec0 <_Bfree>
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	4699      	mov	r9, r3
 800b834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b836:	1b1a      	subs	r2, r3, r4
 800b838:	d004      	beq.n	800b844 <_dtoa_r+0x78c>
 800b83a:	4649      	mov	r1, r9
 800b83c:	4658      	mov	r0, fp
 800b83e:	f000 fcfd 	bl	800c23c <__pow5mult>
 800b842:	4681      	mov	r9, r0
 800b844:	2101      	movs	r1, #1
 800b846:	4658      	mov	r0, fp
 800b848:	f000 fc38 	bl	800c0bc <__i2b>
 800b84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b84e:	4604      	mov	r4, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 81cf 	beq.w	800bbf4 <_dtoa_r+0xb3c>
 800b856:	461a      	mov	r2, r3
 800b858:	4601      	mov	r1, r0
 800b85a:	4658      	mov	r0, fp
 800b85c:	f000 fcee 	bl	800c23c <__pow5mult>
 800b860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b862:	2b01      	cmp	r3, #1
 800b864:	4604      	mov	r4, r0
 800b866:	f300 8095 	bgt.w	800b994 <_dtoa_r+0x8dc>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f040 8087 	bne.w	800b980 <_dtoa_r+0x8c8>
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f040 8089 	bne.w	800b990 <_dtoa_r+0x8d8>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	0d1b      	lsrs	r3, r3, #20
 800b886:	051b      	lsls	r3, r3, #20
 800b888:	b12b      	cbz	r3, 800b896 <_dtoa_r+0x7de>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	3301      	adds	r3, #1
 800b88e:	9308      	str	r3, [sp, #32]
 800b890:	f108 0801 	add.w	r8, r8, #1
 800b894:	2301      	movs	r3, #1
 800b896:	930a      	str	r3, [sp, #40]	@ 0x28
 800b898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 81b0 	beq.w	800bc00 <_dtoa_r+0xb48>
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8a6:	6918      	ldr	r0, [r3, #16]
 800b8a8:	f000 fbbc 	bl	800c024 <__hi0bits>
 800b8ac:	f1c0 0020 	rsb	r0, r0, #32
 800b8b0:	9b08      	ldr	r3, [sp, #32]
 800b8b2:	4418      	add	r0, r3
 800b8b4:	f010 001f 	ands.w	r0, r0, #31
 800b8b8:	d077      	beq.n	800b9aa <_dtoa_r+0x8f2>
 800b8ba:	f1c0 0320 	rsb	r3, r0, #32
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	dd6b      	ble.n	800b99a <_dtoa_r+0x8e2>
 800b8c2:	9b08      	ldr	r3, [sp, #32]
 800b8c4:	f1c0 001c 	rsb	r0, r0, #28
 800b8c8:	4403      	add	r3, r0
 800b8ca:	4480      	add	r8, r0
 800b8cc:	4406      	add	r6, r0
 800b8ce:	9308      	str	r3, [sp, #32]
 800b8d0:	f1b8 0f00 	cmp.w	r8, #0
 800b8d4:	dd05      	ble.n	800b8e2 <_dtoa_r+0x82a>
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	4642      	mov	r2, r8
 800b8da:	4658      	mov	r0, fp
 800b8dc:	f000 fd08 	bl	800c2f0 <__lshift>
 800b8e0:	4681      	mov	r9, r0
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	dd05      	ble.n	800b8f4 <_dtoa_r+0x83c>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4658      	mov	r0, fp
 800b8ee:	f000 fcff 	bl	800c2f0 <__lshift>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d059      	beq.n	800b9ae <_dtoa_r+0x8f6>
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4648      	mov	r0, r9
 800b8fe:	f000 fd63 	bl	800c3c8 <__mcmp>
 800b902:	2800      	cmp	r0, #0
 800b904:	da53      	bge.n	800b9ae <_dtoa_r+0x8f6>
 800b906:	1e7b      	subs	r3, r7, #1
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	4649      	mov	r1, r9
 800b90c:	2300      	movs	r3, #0
 800b90e:	220a      	movs	r2, #10
 800b910:	4658      	mov	r0, fp
 800b912:	f000 faf7 	bl	800bf04 <__multadd>
 800b916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b918:	4681      	mov	r9, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 8172 	beq.w	800bc04 <_dtoa_r+0xb4c>
 800b920:	2300      	movs	r3, #0
 800b922:	4629      	mov	r1, r5
 800b924:	220a      	movs	r2, #10
 800b926:	4658      	mov	r0, fp
 800b928:	f000 faec 	bl	800bf04 <__multadd>
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	4605      	mov	r5, r0
 800b932:	dc67      	bgt.n	800ba04 <_dtoa_r+0x94c>
 800b934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b936:	2b02      	cmp	r3, #2
 800b938:	dc41      	bgt.n	800b9be <_dtoa_r+0x906>
 800b93a:	e063      	b.n	800ba04 <_dtoa_r+0x94c>
 800b93c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b93e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b942:	e746      	b.n	800b7d2 <_dtoa_r+0x71a>
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	1e5c      	subs	r4, r3, #1
 800b948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94a:	42a3      	cmp	r3, r4
 800b94c:	bfbf      	itttt	lt
 800b94e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b950:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b952:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b954:	1ae3      	sublt	r3, r4, r3
 800b956:	bfb4      	ite	lt
 800b958:	18d2      	addlt	r2, r2, r3
 800b95a:	1b1c      	subge	r4, r3, r4
 800b95c:	9b07      	ldr	r3, [sp, #28]
 800b95e:	bfbc      	itt	lt
 800b960:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b962:	2400      	movlt	r4, #0
 800b964:	2b00      	cmp	r3, #0
 800b966:	bfb5      	itete	lt
 800b968:	eba8 0603 	sublt.w	r6, r8, r3
 800b96c:	9b07      	ldrge	r3, [sp, #28]
 800b96e:	2300      	movlt	r3, #0
 800b970:	4646      	movge	r6, r8
 800b972:	e730      	b.n	800b7d6 <_dtoa_r+0x71e>
 800b974:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b976:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b978:	4646      	mov	r6, r8
 800b97a:	e735      	b.n	800b7e8 <_dtoa_r+0x730>
 800b97c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b97e:	e75c      	b.n	800b83a <_dtoa_r+0x782>
 800b980:	2300      	movs	r3, #0
 800b982:	e788      	b.n	800b896 <_dtoa_r+0x7de>
 800b984:	3fe00000 	.word	0x3fe00000
 800b988:	40240000 	.word	0x40240000
 800b98c:	40140000 	.word	0x40140000
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	e780      	b.n	800b896 <_dtoa_r+0x7de>
 800b994:	2300      	movs	r3, #0
 800b996:	930a      	str	r3, [sp, #40]	@ 0x28
 800b998:	e782      	b.n	800b8a0 <_dtoa_r+0x7e8>
 800b99a:	d099      	beq.n	800b8d0 <_dtoa_r+0x818>
 800b99c:	9a08      	ldr	r2, [sp, #32]
 800b99e:	331c      	adds	r3, #28
 800b9a0:	441a      	add	r2, r3
 800b9a2:	4498      	add	r8, r3
 800b9a4:	441e      	add	r6, r3
 800b9a6:	9208      	str	r2, [sp, #32]
 800b9a8:	e792      	b.n	800b8d0 <_dtoa_r+0x818>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	e7f6      	b.n	800b99c <_dtoa_r+0x8e4>
 800b9ae:	9b07      	ldr	r3, [sp, #28]
 800b9b0:	9704      	str	r7, [sp, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dc20      	bgt.n	800b9f8 <_dtoa_r+0x940>
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	dd1e      	ble.n	800b9fc <_dtoa_r+0x944>
 800b9be:	9b00      	ldr	r3, [sp, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f47f aec0 	bne.w	800b746 <_dtoa_r+0x68e>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	2205      	movs	r2, #5
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f000 fa9a 	bl	800bf04 <__multadd>
 800b9d0:	4601      	mov	r1, r0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 fcf7 	bl	800c3c8 <__mcmp>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	f77f aeb3 	ble.w	800b746 <_dtoa_r+0x68e>
 800b9e0:	4656      	mov	r6, sl
 800b9e2:	2331      	movs	r3, #49	@ 0x31
 800b9e4:	f806 3b01 	strb.w	r3, [r6], #1
 800b9e8:	9b04      	ldr	r3, [sp, #16]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	e6ae      	b.n	800b74e <_dtoa_r+0x696>
 800b9f0:	9c07      	ldr	r4, [sp, #28]
 800b9f2:	9704      	str	r7, [sp, #16]
 800b9f4:	4625      	mov	r5, r4
 800b9f6:	e7f3      	b.n	800b9e0 <_dtoa_r+0x928>
 800b9f8:	9b07      	ldr	r3, [sp, #28]
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 8104 	beq.w	800bc0c <_dtoa_r+0xb54>
 800ba04:	2e00      	cmp	r6, #0
 800ba06:	dd05      	ble.n	800ba14 <_dtoa_r+0x95c>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	4658      	mov	r0, fp
 800ba0e:	f000 fc6f 	bl	800c2f0 <__lshift>
 800ba12:	4605      	mov	r5, r0
 800ba14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d05a      	beq.n	800bad0 <_dtoa_r+0xa18>
 800ba1a:	6869      	ldr	r1, [r5, #4]
 800ba1c:	4658      	mov	r0, fp
 800ba1e:	f000 fa0f 	bl	800be40 <_Balloc>
 800ba22:	4606      	mov	r6, r0
 800ba24:	b928      	cbnz	r0, 800ba32 <_dtoa_r+0x97a>
 800ba26:	4b84      	ldr	r3, [pc, #528]	@ (800bc38 <_dtoa_r+0xb80>)
 800ba28:	4602      	mov	r2, r0
 800ba2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba2e:	f7ff bb5a 	b.w	800b0e6 <_dtoa_r+0x2e>
 800ba32:	692a      	ldr	r2, [r5, #16]
 800ba34:	3202      	adds	r2, #2
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	f105 010c 	add.w	r1, r5, #12
 800ba3c:	300c      	adds	r0, #12
 800ba3e:	f001 ff7b 	bl	800d938 <memcpy>
 800ba42:	2201      	movs	r2, #1
 800ba44:	4631      	mov	r1, r6
 800ba46:	4658      	mov	r0, fp
 800ba48:	f000 fc52 	bl	800c2f0 <__lshift>
 800ba4c:	f10a 0301 	add.w	r3, sl, #1
 800ba50:	9307      	str	r3, [sp, #28]
 800ba52:	9b00      	ldr	r3, [sp, #0]
 800ba54:	4453      	add	r3, sl
 800ba56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	462f      	mov	r7, r5
 800ba60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba62:	4605      	mov	r5, r0
 800ba64:	9b07      	ldr	r3, [sp, #28]
 800ba66:	4621      	mov	r1, r4
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	f7ff fa9b 	bl	800afa8 <quorem>
 800ba72:	4639      	mov	r1, r7
 800ba74:	9002      	str	r0, [sp, #8]
 800ba76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	f000 fca4 	bl	800c3c8 <__mcmp>
 800ba80:	462a      	mov	r2, r5
 800ba82:	9008      	str	r0, [sp, #32]
 800ba84:	4621      	mov	r1, r4
 800ba86:	4658      	mov	r0, fp
 800ba88:	f000 fcba 	bl	800c400 <__mdiff>
 800ba8c:	68c2      	ldr	r2, [r0, #12]
 800ba8e:	4606      	mov	r6, r0
 800ba90:	bb02      	cbnz	r2, 800bad4 <_dtoa_r+0xa1c>
 800ba92:	4601      	mov	r1, r0
 800ba94:	4648      	mov	r0, r9
 800ba96:	f000 fc97 	bl	800c3c8 <__mcmp>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4658      	mov	r0, fp
 800baa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800baa2:	f000 fa0d 	bl	800bec0 <_Bfree>
 800baa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baaa:	9e07      	ldr	r6, [sp, #28]
 800baac:	ea43 0102 	orr.w	r1, r3, r2
 800bab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab2:	4319      	orrs	r1, r3
 800bab4:	d110      	bne.n	800bad8 <_dtoa_r+0xa20>
 800bab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800baba:	d029      	beq.n	800bb10 <_dtoa_r+0xa58>
 800babc:	9b08      	ldr	r3, [sp, #32]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	dd02      	ble.n	800bac8 <_dtoa_r+0xa10>
 800bac2:	9b02      	ldr	r3, [sp, #8]
 800bac4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bac8:	9b00      	ldr	r3, [sp, #0]
 800baca:	f883 8000 	strb.w	r8, [r3]
 800bace:	e63f      	b.n	800b750 <_dtoa_r+0x698>
 800bad0:	4628      	mov	r0, r5
 800bad2:	e7bb      	b.n	800ba4c <_dtoa_r+0x994>
 800bad4:	2201      	movs	r2, #1
 800bad6:	e7e1      	b.n	800ba9c <_dtoa_r+0x9e4>
 800bad8:	9b08      	ldr	r3, [sp, #32]
 800bada:	2b00      	cmp	r3, #0
 800badc:	db04      	blt.n	800bae8 <_dtoa_r+0xa30>
 800bade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bae0:	430b      	orrs	r3, r1
 800bae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bae4:	430b      	orrs	r3, r1
 800bae6:	d120      	bne.n	800bb2a <_dtoa_r+0xa72>
 800bae8:	2a00      	cmp	r2, #0
 800baea:	dded      	ble.n	800bac8 <_dtoa_r+0xa10>
 800baec:	4649      	mov	r1, r9
 800baee:	2201      	movs	r2, #1
 800baf0:	4658      	mov	r0, fp
 800baf2:	f000 fbfd 	bl	800c2f0 <__lshift>
 800baf6:	4621      	mov	r1, r4
 800baf8:	4681      	mov	r9, r0
 800bafa:	f000 fc65 	bl	800c3c8 <__mcmp>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	dc03      	bgt.n	800bb0a <_dtoa_r+0xa52>
 800bb02:	d1e1      	bne.n	800bac8 <_dtoa_r+0xa10>
 800bb04:	f018 0f01 	tst.w	r8, #1
 800bb08:	d0de      	beq.n	800bac8 <_dtoa_r+0xa10>
 800bb0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb0e:	d1d8      	bne.n	800bac2 <_dtoa_r+0xa0a>
 800bb10:	9a00      	ldr	r2, [sp, #0]
 800bb12:	2339      	movs	r3, #57	@ 0x39
 800bb14:	7013      	strb	r3, [r2, #0]
 800bb16:	4633      	mov	r3, r6
 800bb18:	461e      	mov	r6, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb20:	2a39      	cmp	r2, #57	@ 0x39
 800bb22:	d052      	beq.n	800bbca <_dtoa_r+0xb12>
 800bb24:	3201      	adds	r2, #1
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	e612      	b.n	800b750 <_dtoa_r+0x698>
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	dd07      	ble.n	800bb3e <_dtoa_r+0xa86>
 800bb2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb32:	d0ed      	beq.n	800bb10 <_dtoa_r+0xa58>
 800bb34:	9a00      	ldr	r2, [sp, #0]
 800bb36:	f108 0301 	add.w	r3, r8, #1
 800bb3a:	7013      	strb	r3, [r2, #0]
 800bb3c:	e608      	b.n	800b750 <_dtoa_r+0x698>
 800bb3e:	9b07      	ldr	r3, [sp, #28]
 800bb40:	9a07      	ldr	r2, [sp, #28]
 800bb42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d028      	beq.n	800bb9e <_dtoa_r+0xae6>
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	2300      	movs	r3, #0
 800bb50:	220a      	movs	r2, #10
 800bb52:	4658      	mov	r0, fp
 800bb54:	f000 f9d6 	bl	800bf04 <__multadd>
 800bb58:	42af      	cmp	r7, r5
 800bb5a:	4681      	mov	r9, r0
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	f04f 020a 	mov.w	r2, #10
 800bb64:	4639      	mov	r1, r7
 800bb66:	4658      	mov	r0, fp
 800bb68:	d107      	bne.n	800bb7a <_dtoa_r+0xac2>
 800bb6a:	f000 f9cb 	bl	800bf04 <__multadd>
 800bb6e:	4607      	mov	r7, r0
 800bb70:	4605      	mov	r5, r0
 800bb72:	9b07      	ldr	r3, [sp, #28]
 800bb74:	3301      	adds	r3, #1
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	e774      	b.n	800ba64 <_dtoa_r+0x9ac>
 800bb7a:	f000 f9c3 	bl	800bf04 <__multadd>
 800bb7e:	4629      	mov	r1, r5
 800bb80:	4607      	mov	r7, r0
 800bb82:	2300      	movs	r3, #0
 800bb84:	220a      	movs	r2, #10
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 f9bc 	bl	800bf04 <__multadd>
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	e7f0      	b.n	800bb72 <_dtoa_r+0xaba>
 800bb90:	9b00      	ldr	r3, [sp, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bfcc      	ite	gt
 800bb96:	461e      	movgt	r6, r3
 800bb98:	2601      	movle	r6, #1
 800bb9a:	4456      	add	r6, sl
 800bb9c:	2700      	movs	r7, #0
 800bb9e:	4649      	mov	r1, r9
 800bba0:	2201      	movs	r2, #1
 800bba2:	4658      	mov	r0, fp
 800bba4:	f000 fba4 	bl	800c2f0 <__lshift>
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4681      	mov	r9, r0
 800bbac:	f000 fc0c 	bl	800c3c8 <__mcmp>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	dcb0      	bgt.n	800bb16 <_dtoa_r+0xa5e>
 800bbb4:	d102      	bne.n	800bbbc <_dtoa_r+0xb04>
 800bbb6:	f018 0f01 	tst.w	r8, #1
 800bbba:	d1ac      	bne.n	800bb16 <_dtoa_r+0xa5e>
 800bbbc:	4633      	mov	r3, r6
 800bbbe:	461e      	mov	r6, r3
 800bbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbc4:	2a30      	cmp	r2, #48	@ 0x30
 800bbc6:	d0fa      	beq.n	800bbbe <_dtoa_r+0xb06>
 800bbc8:	e5c2      	b.n	800b750 <_dtoa_r+0x698>
 800bbca:	459a      	cmp	sl, r3
 800bbcc:	d1a4      	bne.n	800bb18 <_dtoa_r+0xa60>
 800bbce:	9b04      	ldr	r3, [sp, #16]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	9304      	str	r3, [sp, #16]
 800bbd4:	2331      	movs	r3, #49	@ 0x31
 800bbd6:	f88a 3000 	strb.w	r3, [sl]
 800bbda:	e5b9      	b.n	800b750 <_dtoa_r+0x698>
 800bbdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc3c <_dtoa_r+0xb84>
 800bbe2:	b11b      	cbz	r3, 800bbec <_dtoa_r+0xb34>
 800bbe4:	f10a 0308 	add.w	r3, sl, #8
 800bbe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	4650      	mov	r0, sl
 800bbee:	b019      	add	sp, #100	@ 0x64
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	f77f ae37 	ble.w	800b86a <_dtoa_r+0x7b2>
 800bbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc00:	2001      	movs	r0, #1
 800bc02:	e655      	b.n	800b8b0 <_dtoa_r+0x7f8>
 800bc04:	9b00      	ldr	r3, [sp, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f77f aed6 	ble.w	800b9b8 <_dtoa_r+0x900>
 800bc0c:	4656      	mov	r6, sl
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4648      	mov	r0, r9
 800bc12:	f7ff f9c9 	bl	800afa8 <quorem>
 800bc16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc1a:	f806 8b01 	strb.w	r8, [r6], #1
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	eba6 020a 	sub.w	r2, r6, sl
 800bc24:	4293      	cmp	r3, r2
 800bc26:	ddb3      	ble.n	800bb90 <_dtoa_r+0xad8>
 800bc28:	4649      	mov	r1, r9
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4658      	mov	r0, fp
 800bc30:	f000 f968 	bl	800bf04 <__multadd>
 800bc34:	4681      	mov	r9, r0
 800bc36:	e7ea      	b.n	800bc0e <_dtoa_r+0xb56>
 800bc38:	08012471 	.word	0x08012471
 800bc3c:	080123f5 	.word	0x080123f5

0800bc40 <_free_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4605      	mov	r5, r0
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d041      	beq.n	800bccc <_free_r+0x8c>
 800bc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc4c:	1f0c      	subs	r4, r1, #4
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfb8      	it	lt
 800bc52:	18e4      	addlt	r4, r4, r3
 800bc54:	f000 f8e8 	bl	800be28 <__malloc_lock>
 800bc58:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd0 <_free_r+0x90>)
 800bc5a:	6813      	ldr	r3, [r2, #0]
 800bc5c:	b933      	cbnz	r3, 800bc6c <_free_r+0x2c>
 800bc5e:	6063      	str	r3, [r4, #4]
 800bc60:	6014      	str	r4, [r2, #0]
 800bc62:	4628      	mov	r0, r5
 800bc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc68:	f000 b8e4 	b.w	800be34 <__malloc_unlock>
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	d908      	bls.n	800bc82 <_free_r+0x42>
 800bc70:	6820      	ldr	r0, [r4, #0]
 800bc72:	1821      	adds	r1, r4, r0
 800bc74:	428b      	cmp	r3, r1
 800bc76:	bf01      	itttt	eq
 800bc78:	6819      	ldreq	r1, [r3, #0]
 800bc7a:	685b      	ldreq	r3, [r3, #4]
 800bc7c:	1809      	addeq	r1, r1, r0
 800bc7e:	6021      	streq	r1, [r4, #0]
 800bc80:	e7ed      	b.n	800bc5e <_free_r+0x1e>
 800bc82:	461a      	mov	r2, r3
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	b10b      	cbz	r3, 800bc8c <_free_r+0x4c>
 800bc88:	42a3      	cmp	r3, r4
 800bc8a:	d9fa      	bls.n	800bc82 <_free_r+0x42>
 800bc8c:	6811      	ldr	r1, [r2, #0]
 800bc8e:	1850      	adds	r0, r2, r1
 800bc90:	42a0      	cmp	r0, r4
 800bc92:	d10b      	bne.n	800bcac <_free_r+0x6c>
 800bc94:	6820      	ldr	r0, [r4, #0]
 800bc96:	4401      	add	r1, r0
 800bc98:	1850      	adds	r0, r2, r1
 800bc9a:	4283      	cmp	r3, r0
 800bc9c:	6011      	str	r1, [r2, #0]
 800bc9e:	d1e0      	bne.n	800bc62 <_free_r+0x22>
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	6053      	str	r3, [r2, #4]
 800bca6:	4408      	add	r0, r1
 800bca8:	6010      	str	r0, [r2, #0]
 800bcaa:	e7da      	b.n	800bc62 <_free_r+0x22>
 800bcac:	d902      	bls.n	800bcb4 <_free_r+0x74>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	e7d6      	b.n	800bc62 <_free_r+0x22>
 800bcb4:	6820      	ldr	r0, [r4, #0]
 800bcb6:	1821      	adds	r1, r4, r0
 800bcb8:	428b      	cmp	r3, r1
 800bcba:	bf04      	itt	eq
 800bcbc:	6819      	ldreq	r1, [r3, #0]
 800bcbe:	685b      	ldreq	r3, [r3, #4]
 800bcc0:	6063      	str	r3, [r4, #4]
 800bcc2:	bf04      	itt	eq
 800bcc4:	1809      	addeq	r1, r1, r0
 800bcc6:	6021      	streq	r1, [r4, #0]
 800bcc8:	6054      	str	r4, [r2, #4]
 800bcca:	e7ca      	b.n	800bc62 <_free_r+0x22>
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	200009c4 	.word	0x200009c4

0800bcd4 <malloc>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	@ (800bce0 <malloc+0xc>)
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f000 b825 	b.w	800bd28 <_malloc_r>
 800bcde:	bf00      	nop
 800bce0:	20000104 	.word	0x20000104

0800bce4 <sbrk_aligned>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	4e0f      	ldr	r6, [pc, #60]	@ (800bd24 <sbrk_aligned+0x40>)
 800bce8:	460c      	mov	r4, r1
 800bcea:	6831      	ldr	r1, [r6, #0]
 800bcec:	4605      	mov	r5, r0
 800bcee:	b911      	cbnz	r1, 800bcf6 <sbrk_aligned+0x12>
 800bcf0:	f001 fe0c 	bl	800d90c <_sbrk_r>
 800bcf4:	6030      	str	r0, [r6, #0]
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f001 fe07 	bl	800d90c <_sbrk_r>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d103      	bne.n	800bd0a <sbrk_aligned+0x26>
 800bd02:	f04f 34ff 	mov.w	r4, #4294967295
 800bd06:	4620      	mov	r0, r4
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
 800bd0a:	1cc4      	adds	r4, r0, #3
 800bd0c:	f024 0403 	bic.w	r4, r4, #3
 800bd10:	42a0      	cmp	r0, r4
 800bd12:	d0f8      	beq.n	800bd06 <sbrk_aligned+0x22>
 800bd14:	1a21      	subs	r1, r4, r0
 800bd16:	4628      	mov	r0, r5
 800bd18:	f001 fdf8 	bl	800d90c <_sbrk_r>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d1f2      	bne.n	800bd06 <sbrk_aligned+0x22>
 800bd20:	e7ef      	b.n	800bd02 <sbrk_aligned+0x1e>
 800bd22:	bf00      	nop
 800bd24:	200009c0 	.word	0x200009c0

0800bd28 <_malloc_r>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	1ccd      	adds	r5, r1, #3
 800bd2e:	f025 0503 	bic.w	r5, r5, #3
 800bd32:	3508      	adds	r5, #8
 800bd34:	2d0c      	cmp	r5, #12
 800bd36:	bf38      	it	cc
 800bd38:	250c      	movcc	r5, #12
 800bd3a:	2d00      	cmp	r5, #0
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	db01      	blt.n	800bd44 <_malloc_r+0x1c>
 800bd40:	42a9      	cmp	r1, r5
 800bd42:	d904      	bls.n	800bd4e <_malloc_r+0x26>
 800bd44:	230c      	movs	r3, #12
 800bd46:	6033      	str	r3, [r6, #0]
 800bd48:	2000      	movs	r0, #0
 800bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be24 <_malloc_r+0xfc>
 800bd52:	f000 f869 	bl	800be28 <__malloc_lock>
 800bd56:	f8d8 3000 	ldr.w	r3, [r8]
 800bd5a:	461c      	mov	r4, r3
 800bd5c:	bb44      	cbnz	r4, 800bdb0 <_malloc_r+0x88>
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7ff ffbf 	bl	800bce4 <sbrk_aligned>
 800bd66:	1c43      	adds	r3, r0, #1
 800bd68:	4604      	mov	r4, r0
 800bd6a:	d158      	bne.n	800be1e <_malloc_r+0xf6>
 800bd6c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd70:	4627      	mov	r7, r4
 800bd72:	2f00      	cmp	r7, #0
 800bd74:	d143      	bne.n	800bdfe <_malloc_r+0xd6>
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	d04b      	beq.n	800be12 <_malloc_r+0xea>
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	4630      	mov	r0, r6
 800bd80:	eb04 0903 	add.w	r9, r4, r3
 800bd84:	f001 fdc2 	bl	800d90c <_sbrk_r>
 800bd88:	4581      	cmp	r9, r0
 800bd8a:	d142      	bne.n	800be12 <_malloc_r+0xea>
 800bd8c:	6821      	ldr	r1, [r4, #0]
 800bd8e:	1a6d      	subs	r5, r5, r1
 800bd90:	4629      	mov	r1, r5
 800bd92:	4630      	mov	r0, r6
 800bd94:	f7ff ffa6 	bl	800bce4 <sbrk_aligned>
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d03a      	beq.n	800be12 <_malloc_r+0xea>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	442b      	add	r3, r5
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	f8d8 3000 	ldr.w	r3, [r8]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	bb62      	cbnz	r2, 800be04 <_malloc_r+0xdc>
 800bdaa:	f8c8 7000 	str.w	r7, [r8]
 800bdae:	e00f      	b.n	800bdd0 <_malloc_r+0xa8>
 800bdb0:	6822      	ldr	r2, [r4, #0]
 800bdb2:	1b52      	subs	r2, r2, r5
 800bdb4:	d420      	bmi.n	800bdf8 <_malloc_r+0xd0>
 800bdb6:	2a0b      	cmp	r2, #11
 800bdb8:	d917      	bls.n	800bdea <_malloc_r+0xc2>
 800bdba:	1961      	adds	r1, r4, r5
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	6025      	str	r5, [r4, #0]
 800bdc0:	bf18      	it	ne
 800bdc2:	6059      	strne	r1, [r3, #4]
 800bdc4:	6863      	ldr	r3, [r4, #4]
 800bdc6:	bf08      	it	eq
 800bdc8:	f8c8 1000 	streq.w	r1, [r8]
 800bdcc:	5162      	str	r2, [r4, r5]
 800bdce:	604b      	str	r3, [r1, #4]
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f000 f82f 	bl	800be34 <__malloc_unlock>
 800bdd6:	f104 000b 	add.w	r0, r4, #11
 800bdda:	1d23      	adds	r3, r4, #4
 800bddc:	f020 0007 	bic.w	r0, r0, #7
 800bde0:	1ac2      	subs	r2, r0, r3
 800bde2:	bf1c      	itt	ne
 800bde4:	1a1b      	subne	r3, r3, r0
 800bde6:	50a3      	strne	r3, [r4, r2]
 800bde8:	e7af      	b.n	800bd4a <_malloc_r+0x22>
 800bdea:	6862      	ldr	r2, [r4, #4]
 800bdec:	42a3      	cmp	r3, r4
 800bdee:	bf0c      	ite	eq
 800bdf0:	f8c8 2000 	streq.w	r2, [r8]
 800bdf4:	605a      	strne	r2, [r3, #4]
 800bdf6:	e7eb      	b.n	800bdd0 <_malloc_r+0xa8>
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	6864      	ldr	r4, [r4, #4]
 800bdfc:	e7ae      	b.n	800bd5c <_malloc_r+0x34>
 800bdfe:	463c      	mov	r4, r7
 800be00:	687f      	ldr	r7, [r7, #4]
 800be02:	e7b6      	b.n	800bd72 <_malloc_r+0x4a>
 800be04:	461a      	mov	r2, r3
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d1fb      	bne.n	800be04 <_malloc_r+0xdc>
 800be0c:	2300      	movs	r3, #0
 800be0e:	6053      	str	r3, [r2, #4]
 800be10:	e7de      	b.n	800bdd0 <_malloc_r+0xa8>
 800be12:	230c      	movs	r3, #12
 800be14:	6033      	str	r3, [r6, #0]
 800be16:	4630      	mov	r0, r6
 800be18:	f000 f80c 	bl	800be34 <__malloc_unlock>
 800be1c:	e794      	b.n	800bd48 <_malloc_r+0x20>
 800be1e:	6005      	str	r5, [r0, #0]
 800be20:	e7d6      	b.n	800bdd0 <_malloc_r+0xa8>
 800be22:	bf00      	nop
 800be24:	200009c4 	.word	0x200009c4

0800be28 <__malloc_lock>:
 800be28:	4801      	ldr	r0, [pc, #4]	@ (800be30 <__malloc_lock+0x8>)
 800be2a:	f7ff b8b4 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	200009bc 	.word	0x200009bc

0800be34 <__malloc_unlock>:
 800be34:	4801      	ldr	r0, [pc, #4]	@ (800be3c <__malloc_unlock+0x8>)
 800be36:	f7ff b8af 	b.w	800af98 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	200009bc 	.word	0x200009bc

0800be40 <_Balloc>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	69c6      	ldr	r6, [r0, #28]
 800be44:	4604      	mov	r4, r0
 800be46:	460d      	mov	r5, r1
 800be48:	b976      	cbnz	r6, 800be68 <_Balloc+0x28>
 800be4a:	2010      	movs	r0, #16
 800be4c:	f7ff ff42 	bl	800bcd4 <malloc>
 800be50:	4602      	mov	r2, r0
 800be52:	61e0      	str	r0, [r4, #28]
 800be54:	b920      	cbnz	r0, 800be60 <_Balloc+0x20>
 800be56:	4b18      	ldr	r3, [pc, #96]	@ (800beb8 <_Balloc+0x78>)
 800be58:	4818      	ldr	r0, [pc, #96]	@ (800bebc <_Balloc+0x7c>)
 800be5a:	216b      	movs	r1, #107	@ 0x6b
 800be5c:	f001 fd84 	bl	800d968 <__assert_func>
 800be60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be64:	6006      	str	r6, [r0, #0]
 800be66:	60c6      	str	r6, [r0, #12]
 800be68:	69e6      	ldr	r6, [r4, #28]
 800be6a:	68f3      	ldr	r3, [r6, #12]
 800be6c:	b183      	cbz	r3, 800be90 <_Balloc+0x50>
 800be6e:	69e3      	ldr	r3, [r4, #28]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be76:	b9b8      	cbnz	r0, 800bea8 <_Balloc+0x68>
 800be78:	2101      	movs	r1, #1
 800be7a:	fa01 f605 	lsl.w	r6, r1, r5
 800be7e:	1d72      	adds	r2, r6, #5
 800be80:	0092      	lsls	r2, r2, #2
 800be82:	4620      	mov	r0, r4
 800be84:	f001 fd8e 	bl	800d9a4 <_calloc_r>
 800be88:	b160      	cbz	r0, 800bea4 <_Balloc+0x64>
 800be8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be8e:	e00e      	b.n	800beae <_Balloc+0x6e>
 800be90:	2221      	movs	r2, #33	@ 0x21
 800be92:	2104      	movs	r1, #4
 800be94:	4620      	mov	r0, r4
 800be96:	f001 fd85 	bl	800d9a4 <_calloc_r>
 800be9a:	69e3      	ldr	r3, [r4, #28]
 800be9c:	60f0      	str	r0, [r6, #12]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1e4      	bne.n	800be6e <_Balloc+0x2e>
 800bea4:	2000      	movs	r0, #0
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
 800bea8:	6802      	ldr	r2, [r0, #0]
 800beaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beae:	2300      	movs	r3, #0
 800beb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800beb4:	e7f7      	b.n	800bea6 <_Balloc+0x66>
 800beb6:	bf00      	nop
 800beb8:	08012402 	.word	0x08012402
 800bebc:	08012482 	.word	0x08012482

0800bec0 <_Bfree>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	69c6      	ldr	r6, [r0, #28]
 800bec4:	4605      	mov	r5, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	b976      	cbnz	r6, 800bee8 <_Bfree+0x28>
 800beca:	2010      	movs	r0, #16
 800becc:	f7ff ff02 	bl	800bcd4 <malloc>
 800bed0:	4602      	mov	r2, r0
 800bed2:	61e8      	str	r0, [r5, #28]
 800bed4:	b920      	cbnz	r0, 800bee0 <_Bfree+0x20>
 800bed6:	4b09      	ldr	r3, [pc, #36]	@ (800befc <_Bfree+0x3c>)
 800bed8:	4809      	ldr	r0, [pc, #36]	@ (800bf00 <_Bfree+0x40>)
 800beda:	218f      	movs	r1, #143	@ 0x8f
 800bedc:	f001 fd44 	bl	800d968 <__assert_func>
 800bee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bee4:	6006      	str	r6, [r0, #0]
 800bee6:	60c6      	str	r6, [r0, #12]
 800bee8:	b13c      	cbz	r4, 800befa <_Bfree+0x3a>
 800beea:	69eb      	ldr	r3, [r5, #28]
 800beec:	6862      	ldr	r2, [r4, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bef4:	6021      	str	r1, [r4, #0]
 800bef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	08012402 	.word	0x08012402
 800bf00:	08012482 	.word	0x08012482

0800bf04 <__multadd>:
 800bf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf08:	690d      	ldr	r5, [r1, #16]
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	461e      	mov	r6, r3
 800bf10:	f101 0c14 	add.w	ip, r1, #20
 800bf14:	2000      	movs	r0, #0
 800bf16:	f8dc 3000 	ldr.w	r3, [ip]
 800bf1a:	b299      	uxth	r1, r3
 800bf1c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf20:	0c1e      	lsrs	r6, r3, #16
 800bf22:	0c0b      	lsrs	r3, r1, #16
 800bf24:	fb02 3306 	mla	r3, r2, r6, r3
 800bf28:	b289      	uxth	r1, r1
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf30:	4285      	cmp	r5, r0
 800bf32:	f84c 1b04 	str.w	r1, [ip], #4
 800bf36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf3a:	dcec      	bgt.n	800bf16 <__multadd+0x12>
 800bf3c:	b30e      	cbz	r6, 800bf82 <__multadd+0x7e>
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	42ab      	cmp	r3, r5
 800bf42:	dc19      	bgt.n	800bf78 <__multadd+0x74>
 800bf44:	6861      	ldr	r1, [r4, #4]
 800bf46:	4638      	mov	r0, r7
 800bf48:	3101      	adds	r1, #1
 800bf4a:	f7ff ff79 	bl	800be40 <_Balloc>
 800bf4e:	4680      	mov	r8, r0
 800bf50:	b928      	cbnz	r0, 800bf5e <__multadd+0x5a>
 800bf52:	4602      	mov	r2, r0
 800bf54:	4b0c      	ldr	r3, [pc, #48]	@ (800bf88 <__multadd+0x84>)
 800bf56:	480d      	ldr	r0, [pc, #52]	@ (800bf8c <__multadd+0x88>)
 800bf58:	21ba      	movs	r1, #186	@ 0xba
 800bf5a:	f001 fd05 	bl	800d968 <__assert_func>
 800bf5e:	6922      	ldr	r2, [r4, #16]
 800bf60:	3202      	adds	r2, #2
 800bf62:	f104 010c 	add.w	r1, r4, #12
 800bf66:	0092      	lsls	r2, r2, #2
 800bf68:	300c      	adds	r0, #12
 800bf6a:	f001 fce5 	bl	800d938 <memcpy>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7ff ffa5 	bl	800bec0 <_Bfree>
 800bf76:	4644      	mov	r4, r8
 800bf78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf7c:	3501      	adds	r5, #1
 800bf7e:	615e      	str	r6, [r3, #20]
 800bf80:	6125      	str	r5, [r4, #16]
 800bf82:	4620      	mov	r0, r4
 800bf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf88:	08012471 	.word	0x08012471
 800bf8c:	08012482 	.word	0x08012482

0800bf90 <__s2b>:
 800bf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf94:	460c      	mov	r4, r1
 800bf96:	4615      	mov	r5, r2
 800bf98:	461f      	mov	r7, r3
 800bf9a:	2209      	movs	r2, #9
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	db09      	blt.n	800bfc0 <__s2b+0x30>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ff47 	bl	800be40 <_Balloc>
 800bfb2:	b940      	cbnz	r0, 800bfc6 <__s2b+0x36>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	4b19      	ldr	r3, [pc, #100]	@ (800c01c <__s2b+0x8c>)
 800bfb8:	4819      	ldr	r0, [pc, #100]	@ (800c020 <__s2b+0x90>)
 800bfba:	21d3      	movs	r1, #211	@ 0xd3
 800bfbc:	f001 fcd4 	bl	800d968 <__assert_func>
 800bfc0:	0052      	lsls	r2, r2, #1
 800bfc2:	3101      	adds	r1, #1
 800bfc4:	e7f0      	b.n	800bfa8 <__s2b+0x18>
 800bfc6:	9b08      	ldr	r3, [sp, #32]
 800bfc8:	6143      	str	r3, [r0, #20]
 800bfca:	2d09      	cmp	r5, #9
 800bfcc:	f04f 0301 	mov.w	r3, #1
 800bfd0:	6103      	str	r3, [r0, #16]
 800bfd2:	dd16      	ble.n	800c002 <__s2b+0x72>
 800bfd4:	f104 0909 	add.w	r9, r4, #9
 800bfd8:	46c8      	mov	r8, r9
 800bfda:	442c      	add	r4, r5
 800bfdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	3b30      	subs	r3, #48	@ 0x30
 800bfe4:	220a      	movs	r2, #10
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7ff ff8c 	bl	800bf04 <__multadd>
 800bfec:	45a0      	cmp	r8, r4
 800bfee:	d1f5      	bne.n	800bfdc <__s2b+0x4c>
 800bff0:	f1a5 0408 	sub.w	r4, r5, #8
 800bff4:	444c      	add	r4, r9
 800bff6:	1b2d      	subs	r5, r5, r4
 800bff8:	1963      	adds	r3, r4, r5
 800bffa:	42bb      	cmp	r3, r7
 800bffc:	db04      	blt.n	800c008 <__s2b+0x78>
 800bffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c002:	340a      	adds	r4, #10
 800c004:	2509      	movs	r5, #9
 800c006:	e7f6      	b.n	800bff6 <__s2b+0x66>
 800c008:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c00c:	4601      	mov	r1, r0
 800c00e:	3b30      	subs	r3, #48	@ 0x30
 800c010:	220a      	movs	r2, #10
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ff76 	bl	800bf04 <__multadd>
 800c018:	e7ee      	b.n	800bff8 <__s2b+0x68>
 800c01a:	bf00      	nop
 800c01c:	08012471 	.word	0x08012471
 800c020:	08012482 	.word	0x08012482

0800c024 <__hi0bits>:
 800c024:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c028:	4603      	mov	r3, r0
 800c02a:	bf36      	itet	cc
 800c02c:	0403      	lslcc	r3, r0, #16
 800c02e:	2000      	movcs	r0, #0
 800c030:	2010      	movcc	r0, #16
 800c032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c036:	bf3c      	itt	cc
 800c038:	021b      	lslcc	r3, r3, #8
 800c03a:	3008      	addcc	r0, #8
 800c03c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c040:	bf3c      	itt	cc
 800c042:	011b      	lslcc	r3, r3, #4
 800c044:	3004      	addcc	r0, #4
 800c046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c04a:	bf3c      	itt	cc
 800c04c:	009b      	lslcc	r3, r3, #2
 800c04e:	3002      	addcc	r0, #2
 800c050:	2b00      	cmp	r3, #0
 800c052:	db05      	blt.n	800c060 <__hi0bits+0x3c>
 800c054:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c058:	f100 0001 	add.w	r0, r0, #1
 800c05c:	bf08      	it	eq
 800c05e:	2020      	moveq	r0, #32
 800c060:	4770      	bx	lr

0800c062 <__lo0bits>:
 800c062:	6803      	ldr	r3, [r0, #0]
 800c064:	4602      	mov	r2, r0
 800c066:	f013 0007 	ands.w	r0, r3, #7
 800c06a:	d00b      	beq.n	800c084 <__lo0bits+0x22>
 800c06c:	07d9      	lsls	r1, r3, #31
 800c06e:	d421      	bmi.n	800c0b4 <__lo0bits+0x52>
 800c070:	0798      	lsls	r0, r3, #30
 800c072:	bf49      	itett	mi
 800c074:	085b      	lsrmi	r3, r3, #1
 800c076:	089b      	lsrpl	r3, r3, #2
 800c078:	2001      	movmi	r0, #1
 800c07a:	6013      	strmi	r3, [r2, #0]
 800c07c:	bf5c      	itt	pl
 800c07e:	6013      	strpl	r3, [r2, #0]
 800c080:	2002      	movpl	r0, #2
 800c082:	4770      	bx	lr
 800c084:	b299      	uxth	r1, r3
 800c086:	b909      	cbnz	r1, 800c08c <__lo0bits+0x2a>
 800c088:	0c1b      	lsrs	r3, r3, #16
 800c08a:	2010      	movs	r0, #16
 800c08c:	b2d9      	uxtb	r1, r3
 800c08e:	b909      	cbnz	r1, 800c094 <__lo0bits+0x32>
 800c090:	3008      	adds	r0, #8
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	0719      	lsls	r1, r3, #28
 800c096:	bf04      	itt	eq
 800c098:	091b      	lsreq	r3, r3, #4
 800c09a:	3004      	addeq	r0, #4
 800c09c:	0799      	lsls	r1, r3, #30
 800c09e:	bf04      	itt	eq
 800c0a0:	089b      	lsreq	r3, r3, #2
 800c0a2:	3002      	addeq	r0, #2
 800c0a4:	07d9      	lsls	r1, r3, #31
 800c0a6:	d403      	bmi.n	800c0b0 <__lo0bits+0x4e>
 800c0a8:	085b      	lsrs	r3, r3, #1
 800c0aa:	f100 0001 	add.w	r0, r0, #1
 800c0ae:	d003      	beq.n	800c0b8 <__lo0bits+0x56>
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	4770      	bx	lr
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4770      	bx	lr
 800c0b8:	2020      	movs	r0, #32
 800c0ba:	4770      	bx	lr

0800c0bc <__i2b>:
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	460c      	mov	r4, r1
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	f7ff febd 	bl	800be40 <_Balloc>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	b928      	cbnz	r0, 800c0d6 <__i2b+0x1a>
 800c0ca:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <__i2b+0x24>)
 800c0cc:	4805      	ldr	r0, [pc, #20]	@ (800c0e4 <__i2b+0x28>)
 800c0ce:	f240 1145 	movw	r1, #325	@ 0x145
 800c0d2:	f001 fc49 	bl	800d968 <__assert_func>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	6144      	str	r4, [r0, #20]
 800c0da:	6103      	str	r3, [r0, #16]
 800c0dc:	bd10      	pop	{r4, pc}
 800c0de:	bf00      	nop
 800c0e0:	08012471 	.word	0x08012471
 800c0e4:	08012482 	.word	0x08012482

0800c0e8 <__multiply>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	690a      	ldr	r2, [r1, #16]
 800c0f0:	6923      	ldr	r3, [r4, #16]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	bfa8      	it	ge
 800c0f6:	4623      	movge	r3, r4
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	bfa4      	itt	ge
 800c0fc:	460c      	movge	r4, r1
 800c0fe:	461f      	movge	r7, r3
 800c100:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c104:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	6861      	ldr	r1, [r4, #4]
 800c10c:	eb0a 0609 	add.w	r6, sl, r9
 800c110:	42b3      	cmp	r3, r6
 800c112:	b085      	sub	sp, #20
 800c114:	bfb8      	it	lt
 800c116:	3101      	addlt	r1, #1
 800c118:	f7ff fe92 	bl	800be40 <_Balloc>
 800c11c:	b930      	cbnz	r0, 800c12c <__multiply+0x44>
 800c11e:	4602      	mov	r2, r0
 800c120:	4b44      	ldr	r3, [pc, #272]	@ (800c234 <__multiply+0x14c>)
 800c122:	4845      	ldr	r0, [pc, #276]	@ (800c238 <__multiply+0x150>)
 800c124:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c128:	f001 fc1e 	bl	800d968 <__assert_func>
 800c12c:	f100 0514 	add.w	r5, r0, #20
 800c130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c134:	462b      	mov	r3, r5
 800c136:	2200      	movs	r2, #0
 800c138:	4543      	cmp	r3, r8
 800c13a:	d321      	bcc.n	800c180 <__multiply+0x98>
 800c13c:	f107 0114 	add.w	r1, r7, #20
 800c140:	f104 0214 	add.w	r2, r4, #20
 800c144:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c148:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c14c:	9302      	str	r3, [sp, #8]
 800c14e:	1b13      	subs	r3, r2, r4
 800c150:	3b15      	subs	r3, #21
 800c152:	f023 0303 	bic.w	r3, r3, #3
 800c156:	3304      	adds	r3, #4
 800c158:	f104 0715 	add.w	r7, r4, #21
 800c15c:	42ba      	cmp	r2, r7
 800c15e:	bf38      	it	cc
 800c160:	2304      	movcc	r3, #4
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	9103      	str	r1, [sp, #12]
 800c168:	428b      	cmp	r3, r1
 800c16a:	d80c      	bhi.n	800c186 <__multiply+0x9e>
 800c16c:	2e00      	cmp	r6, #0
 800c16e:	dd03      	ble.n	800c178 <__multiply+0x90>
 800c170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c174:	2b00      	cmp	r3, #0
 800c176:	d05b      	beq.n	800c230 <__multiply+0x148>
 800c178:	6106      	str	r6, [r0, #16]
 800c17a:	b005      	add	sp, #20
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	f843 2b04 	str.w	r2, [r3], #4
 800c184:	e7d8      	b.n	800c138 <__multiply+0x50>
 800c186:	f8b1 a000 	ldrh.w	sl, [r1]
 800c18a:	f1ba 0f00 	cmp.w	sl, #0
 800c18e:	d024      	beq.n	800c1da <__multiply+0xf2>
 800c190:	f104 0e14 	add.w	lr, r4, #20
 800c194:	46a9      	mov	r9, r5
 800c196:	f04f 0c00 	mov.w	ip, #0
 800c19a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c19e:	f8d9 3000 	ldr.w	r3, [r9]
 800c1a2:	fa1f fb87 	uxth.w	fp, r7
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1b0:	f8d9 7000 	ldr.w	r7, [r9]
 800c1b4:	4463      	add	r3, ip
 800c1b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1c8:	4572      	cmp	r2, lr
 800c1ca:	f849 3b04 	str.w	r3, [r9], #4
 800c1ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1d2:	d8e2      	bhi.n	800c19a <__multiply+0xb2>
 800c1d4:	9b01      	ldr	r3, [sp, #4]
 800c1d6:	f845 c003 	str.w	ip, [r5, r3]
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1e0:	3104      	adds	r1, #4
 800c1e2:	f1b9 0f00 	cmp.w	r9, #0
 800c1e6:	d021      	beq.n	800c22c <__multiply+0x144>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	f104 0c14 	add.w	ip, r4, #20
 800c1ee:	46ae      	mov	lr, r5
 800c1f0:	f04f 0a00 	mov.w	sl, #0
 800c1f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c1f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1fc:	fb09 770b 	mla	r7, r9, fp, r7
 800c200:	4457      	add	r7, sl
 800c202:	b29b      	uxth	r3, r3
 800c204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c208:	f84e 3b04 	str.w	r3, [lr], #4
 800c20c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c210:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c214:	f8be 3000 	ldrh.w	r3, [lr]
 800c218:	fb09 330a 	mla	r3, r9, sl, r3
 800c21c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c220:	4562      	cmp	r2, ip
 800c222:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c226:	d8e5      	bhi.n	800c1f4 <__multiply+0x10c>
 800c228:	9f01      	ldr	r7, [sp, #4]
 800c22a:	51eb      	str	r3, [r5, r7]
 800c22c:	3504      	adds	r5, #4
 800c22e:	e799      	b.n	800c164 <__multiply+0x7c>
 800c230:	3e01      	subs	r6, #1
 800c232:	e79b      	b.n	800c16c <__multiply+0x84>
 800c234:	08012471 	.word	0x08012471
 800c238:	08012482 	.word	0x08012482

0800c23c <__pow5mult>:
 800c23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c240:	4615      	mov	r5, r2
 800c242:	f012 0203 	ands.w	r2, r2, #3
 800c246:	4607      	mov	r7, r0
 800c248:	460e      	mov	r6, r1
 800c24a:	d007      	beq.n	800c25c <__pow5mult+0x20>
 800c24c:	4c25      	ldr	r4, [pc, #148]	@ (800c2e4 <__pow5mult+0xa8>)
 800c24e:	3a01      	subs	r2, #1
 800c250:	2300      	movs	r3, #0
 800c252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c256:	f7ff fe55 	bl	800bf04 <__multadd>
 800c25a:	4606      	mov	r6, r0
 800c25c:	10ad      	asrs	r5, r5, #2
 800c25e:	d03d      	beq.n	800c2dc <__pow5mult+0xa0>
 800c260:	69fc      	ldr	r4, [r7, #28]
 800c262:	b97c      	cbnz	r4, 800c284 <__pow5mult+0x48>
 800c264:	2010      	movs	r0, #16
 800c266:	f7ff fd35 	bl	800bcd4 <malloc>
 800c26a:	4602      	mov	r2, r0
 800c26c:	61f8      	str	r0, [r7, #28]
 800c26e:	b928      	cbnz	r0, 800c27c <__pow5mult+0x40>
 800c270:	4b1d      	ldr	r3, [pc, #116]	@ (800c2e8 <__pow5mult+0xac>)
 800c272:	481e      	ldr	r0, [pc, #120]	@ (800c2ec <__pow5mult+0xb0>)
 800c274:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c278:	f001 fb76 	bl	800d968 <__assert_func>
 800c27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c280:	6004      	str	r4, [r0, #0]
 800c282:	60c4      	str	r4, [r0, #12]
 800c284:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c28c:	b94c      	cbnz	r4, 800c2a2 <__pow5mult+0x66>
 800c28e:	f240 2171 	movw	r1, #625	@ 0x271
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff ff12 	bl	800c0bc <__i2b>
 800c298:	2300      	movs	r3, #0
 800c29a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c29e:	4604      	mov	r4, r0
 800c2a0:	6003      	str	r3, [r0, #0]
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	07eb      	lsls	r3, r5, #31
 800c2a8:	d50a      	bpl.n	800c2c0 <__pow5mult+0x84>
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7ff ff1a 	bl	800c0e8 <__multiply>
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff fe01 	bl	800bec0 <_Bfree>
 800c2be:	4646      	mov	r6, r8
 800c2c0:	106d      	asrs	r5, r5, #1
 800c2c2:	d00b      	beq.n	800c2dc <__pow5mult+0xa0>
 800c2c4:	6820      	ldr	r0, [r4, #0]
 800c2c6:	b938      	cbnz	r0, 800c2d8 <__pow5mult+0x9c>
 800c2c8:	4622      	mov	r2, r4
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	f7ff ff0b 	bl	800c0e8 <__multiply>
 800c2d2:	6020      	str	r0, [r4, #0]
 800c2d4:	f8c0 9000 	str.w	r9, [r0]
 800c2d8:	4604      	mov	r4, r0
 800c2da:	e7e4      	b.n	800c2a6 <__pow5mult+0x6a>
 800c2dc:	4630      	mov	r0, r6
 800c2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e2:	bf00      	nop
 800c2e4:	080124dc 	.word	0x080124dc
 800c2e8:	08012402 	.word	0x08012402
 800c2ec:	08012482 	.word	0x08012482

0800c2f0 <__lshift>:
 800c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	6849      	ldr	r1, [r1, #4]
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	4607      	mov	r7, r0
 800c302:	4691      	mov	r9, r2
 800c304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c308:	f108 0601 	add.w	r6, r8, #1
 800c30c:	42b3      	cmp	r3, r6
 800c30e:	db0b      	blt.n	800c328 <__lshift+0x38>
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff fd95 	bl	800be40 <_Balloc>
 800c316:	4605      	mov	r5, r0
 800c318:	b948      	cbnz	r0, 800c32e <__lshift+0x3e>
 800c31a:	4602      	mov	r2, r0
 800c31c:	4b28      	ldr	r3, [pc, #160]	@ (800c3c0 <__lshift+0xd0>)
 800c31e:	4829      	ldr	r0, [pc, #164]	@ (800c3c4 <__lshift+0xd4>)
 800c320:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c324:	f001 fb20 	bl	800d968 <__assert_func>
 800c328:	3101      	adds	r1, #1
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	e7ee      	b.n	800c30c <__lshift+0x1c>
 800c32e:	2300      	movs	r3, #0
 800c330:	f100 0114 	add.w	r1, r0, #20
 800c334:	f100 0210 	add.w	r2, r0, #16
 800c338:	4618      	mov	r0, r3
 800c33a:	4553      	cmp	r3, sl
 800c33c:	db33      	blt.n	800c3a6 <__lshift+0xb6>
 800c33e:	6920      	ldr	r0, [r4, #16]
 800c340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c344:	f104 0314 	add.w	r3, r4, #20
 800c348:	f019 091f 	ands.w	r9, r9, #31
 800c34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c354:	d02b      	beq.n	800c3ae <__lshift+0xbe>
 800c356:	f1c9 0e20 	rsb	lr, r9, #32
 800c35a:	468a      	mov	sl, r1
 800c35c:	2200      	movs	r2, #0
 800c35e:	6818      	ldr	r0, [r3, #0]
 800c360:	fa00 f009 	lsl.w	r0, r0, r9
 800c364:	4310      	orrs	r0, r2
 800c366:	f84a 0b04 	str.w	r0, [sl], #4
 800c36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c36e:	459c      	cmp	ip, r3
 800c370:	fa22 f20e 	lsr.w	r2, r2, lr
 800c374:	d8f3      	bhi.n	800c35e <__lshift+0x6e>
 800c376:	ebac 0304 	sub.w	r3, ip, r4
 800c37a:	3b15      	subs	r3, #21
 800c37c:	f023 0303 	bic.w	r3, r3, #3
 800c380:	3304      	adds	r3, #4
 800c382:	f104 0015 	add.w	r0, r4, #21
 800c386:	4584      	cmp	ip, r0
 800c388:	bf38      	it	cc
 800c38a:	2304      	movcc	r3, #4
 800c38c:	50ca      	str	r2, [r1, r3]
 800c38e:	b10a      	cbz	r2, 800c394 <__lshift+0xa4>
 800c390:	f108 0602 	add.w	r6, r8, #2
 800c394:	3e01      	subs	r6, #1
 800c396:	4638      	mov	r0, r7
 800c398:	612e      	str	r6, [r5, #16]
 800c39a:	4621      	mov	r1, r4
 800c39c:	f7ff fd90 	bl	800bec0 <_Bfree>
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	e7c5      	b.n	800c33a <__lshift+0x4a>
 800c3ae:	3904      	subs	r1, #4
 800c3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3b8:	459c      	cmp	ip, r3
 800c3ba:	d8f9      	bhi.n	800c3b0 <__lshift+0xc0>
 800c3bc:	e7ea      	b.n	800c394 <__lshift+0xa4>
 800c3be:	bf00      	nop
 800c3c0:	08012471 	.word	0x08012471
 800c3c4:	08012482 	.word	0x08012482

0800c3c8 <__mcmp>:
 800c3c8:	690a      	ldr	r2, [r1, #16]
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	6900      	ldr	r0, [r0, #16]
 800c3ce:	1a80      	subs	r0, r0, r2
 800c3d0:	b530      	push	{r4, r5, lr}
 800c3d2:	d10e      	bne.n	800c3f2 <__mcmp+0x2a>
 800c3d4:	3314      	adds	r3, #20
 800c3d6:	3114      	adds	r1, #20
 800c3d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3e8:	4295      	cmp	r5, r2
 800c3ea:	d003      	beq.n	800c3f4 <__mcmp+0x2c>
 800c3ec:	d205      	bcs.n	800c3fa <__mcmp+0x32>
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	bd30      	pop	{r4, r5, pc}
 800c3f4:	42a3      	cmp	r3, r4
 800c3f6:	d3f3      	bcc.n	800c3e0 <__mcmp+0x18>
 800c3f8:	e7fb      	b.n	800c3f2 <__mcmp+0x2a>
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	e7f9      	b.n	800c3f2 <__mcmp+0x2a>
	...

0800c400 <__mdiff>:
 800c400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	4689      	mov	r9, r1
 800c406:	4606      	mov	r6, r0
 800c408:	4611      	mov	r1, r2
 800c40a:	4648      	mov	r0, r9
 800c40c:	4614      	mov	r4, r2
 800c40e:	f7ff ffdb 	bl	800c3c8 <__mcmp>
 800c412:	1e05      	subs	r5, r0, #0
 800c414:	d112      	bne.n	800c43c <__mdiff+0x3c>
 800c416:	4629      	mov	r1, r5
 800c418:	4630      	mov	r0, r6
 800c41a:	f7ff fd11 	bl	800be40 <_Balloc>
 800c41e:	4602      	mov	r2, r0
 800c420:	b928      	cbnz	r0, 800c42e <__mdiff+0x2e>
 800c422:	4b3f      	ldr	r3, [pc, #252]	@ (800c520 <__mdiff+0x120>)
 800c424:	f240 2137 	movw	r1, #567	@ 0x237
 800c428:	483e      	ldr	r0, [pc, #248]	@ (800c524 <__mdiff+0x124>)
 800c42a:	f001 fa9d 	bl	800d968 <__assert_func>
 800c42e:	2301      	movs	r3, #1
 800c430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c434:	4610      	mov	r0, r2
 800c436:	b003      	add	sp, #12
 800c438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43c:	bfbc      	itt	lt
 800c43e:	464b      	movlt	r3, r9
 800c440:	46a1      	movlt	r9, r4
 800c442:	4630      	mov	r0, r6
 800c444:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c448:	bfba      	itte	lt
 800c44a:	461c      	movlt	r4, r3
 800c44c:	2501      	movlt	r5, #1
 800c44e:	2500      	movge	r5, #0
 800c450:	f7ff fcf6 	bl	800be40 <_Balloc>
 800c454:	4602      	mov	r2, r0
 800c456:	b918      	cbnz	r0, 800c460 <__mdiff+0x60>
 800c458:	4b31      	ldr	r3, [pc, #196]	@ (800c520 <__mdiff+0x120>)
 800c45a:	f240 2145 	movw	r1, #581	@ 0x245
 800c45e:	e7e3      	b.n	800c428 <__mdiff+0x28>
 800c460:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c464:	6926      	ldr	r6, [r4, #16]
 800c466:	60c5      	str	r5, [r0, #12]
 800c468:	f109 0310 	add.w	r3, r9, #16
 800c46c:	f109 0514 	add.w	r5, r9, #20
 800c470:	f104 0e14 	add.w	lr, r4, #20
 800c474:	f100 0b14 	add.w	fp, r0, #20
 800c478:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c47c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	46d9      	mov	r9, fp
 800c484:	f04f 0c00 	mov.w	ip, #0
 800c488:	9b01      	ldr	r3, [sp, #4]
 800c48a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c48e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	fa1f f38a 	uxth.w	r3, sl
 800c498:	4619      	mov	r1, r3
 800c49a:	b283      	uxth	r3, r0
 800c49c:	1acb      	subs	r3, r1, r3
 800c49e:	0c00      	lsrs	r0, r0, #16
 800c4a0:	4463      	add	r3, ip
 800c4a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4b0:	4576      	cmp	r6, lr
 800c4b2:	f849 3b04 	str.w	r3, [r9], #4
 800c4b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4ba:	d8e5      	bhi.n	800c488 <__mdiff+0x88>
 800c4bc:	1b33      	subs	r3, r6, r4
 800c4be:	3b15      	subs	r3, #21
 800c4c0:	f023 0303 	bic.w	r3, r3, #3
 800c4c4:	3415      	adds	r4, #21
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	42a6      	cmp	r6, r4
 800c4ca:	bf38      	it	cc
 800c4cc:	2304      	movcc	r3, #4
 800c4ce:	441d      	add	r5, r3
 800c4d0:	445b      	add	r3, fp
 800c4d2:	461e      	mov	r6, r3
 800c4d4:	462c      	mov	r4, r5
 800c4d6:	4544      	cmp	r4, r8
 800c4d8:	d30e      	bcc.n	800c4f8 <__mdiff+0xf8>
 800c4da:	f108 0103 	add.w	r1, r8, #3
 800c4de:	1b49      	subs	r1, r1, r5
 800c4e0:	f021 0103 	bic.w	r1, r1, #3
 800c4e4:	3d03      	subs	r5, #3
 800c4e6:	45a8      	cmp	r8, r5
 800c4e8:	bf38      	it	cc
 800c4ea:	2100      	movcc	r1, #0
 800c4ec:	440b      	add	r3, r1
 800c4ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4f2:	b191      	cbz	r1, 800c51a <__mdiff+0x11a>
 800c4f4:	6117      	str	r7, [r2, #16]
 800c4f6:	e79d      	b.n	800c434 <__mdiff+0x34>
 800c4f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4fc:	46e6      	mov	lr, ip
 800c4fe:	0c08      	lsrs	r0, r1, #16
 800c500:	fa1c fc81 	uxtah	ip, ip, r1
 800c504:	4471      	add	r1, lr
 800c506:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c50a:	b289      	uxth	r1, r1
 800c50c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c510:	f846 1b04 	str.w	r1, [r6], #4
 800c514:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c518:	e7dd      	b.n	800c4d6 <__mdiff+0xd6>
 800c51a:	3f01      	subs	r7, #1
 800c51c:	e7e7      	b.n	800c4ee <__mdiff+0xee>
 800c51e:	bf00      	nop
 800c520:	08012471 	.word	0x08012471
 800c524:	08012482 	.word	0x08012482

0800c528 <__ulp>:
 800c528:	b082      	sub	sp, #8
 800c52a:	ed8d 0b00 	vstr	d0, [sp]
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	4b0f      	ldr	r3, [pc, #60]	@ (800c570 <__ulp+0x48>)
 800c532:	4013      	ands	r3, r2
 800c534:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dc08      	bgt.n	800c54e <__ulp+0x26>
 800c53c:	425b      	negs	r3, r3
 800c53e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c542:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c546:	da04      	bge.n	800c552 <__ulp+0x2a>
 800c548:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c54c:	4113      	asrs	r3, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	e008      	b.n	800c564 <__ulp+0x3c>
 800c552:	f1a2 0314 	sub.w	r3, r2, #20
 800c556:	2b1e      	cmp	r3, #30
 800c558:	bfda      	itte	le
 800c55a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c55e:	40da      	lsrle	r2, r3
 800c560:	2201      	movgt	r2, #1
 800c562:	2300      	movs	r3, #0
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	ec41 0b10 	vmov	d0, r0, r1
 800c56c:	b002      	add	sp, #8
 800c56e:	4770      	bx	lr
 800c570:	7ff00000 	.word	0x7ff00000

0800c574 <__b2d>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	6906      	ldr	r6, [r0, #16]
 800c57a:	f100 0814 	add.w	r8, r0, #20
 800c57e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c582:	1f37      	subs	r7, r6, #4
 800c584:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c588:	4610      	mov	r0, r2
 800c58a:	f7ff fd4b 	bl	800c024 <__hi0bits>
 800c58e:	f1c0 0320 	rsb	r3, r0, #32
 800c592:	280a      	cmp	r0, #10
 800c594:	600b      	str	r3, [r1, #0]
 800c596:	491b      	ldr	r1, [pc, #108]	@ (800c604 <__b2d+0x90>)
 800c598:	dc15      	bgt.n	800c5c6 <__b2d+0x52>
 800c59a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c59e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c5a2:	45b8      	cmp	r8, r7
 800c5a4:	ea43 0501 	orr.w	r5, r3, r1
 800c5a8:	bf34      	ite	cc
 800c5aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5ae:	2300      	movcs	r3, #0
 800c5b0:	3015      	adds	r0, #21
 800c5b2:	fa02 f000 	lsl.w	r0, r2, r0
 800c5b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5ba:	4303      	orrs	r3, r0
 800c5bc:	461c      	mov	r4, r3
 800c5be:	ec45 4b10 	vmov	d0, r4, r5
 800c5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c6:	45b8      	cmp	r8, r7
 800c5c8:	bf3a      	itte	cc
 800c5ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5d2:	2300      	movcs	r3, #0
 800c5d4:	380b      	subs	r0, #11
 800c5d6:	d012      	beq.n	800c5fe <__b2d+0x8a>
 800c5d8:	f1c0 0120 	rsb	r1, r0, #32
 800c5dc:	fa23 f401 	lsr.w	r4, r3, r1
 800c5e0:	4082      	lsls	r2, r0
 800c5e2:	4322      	orrs	r2, r4
 800c5e4:	4547      	cmp	r7, r8
 800c5e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5ea:	bf8c      	ite	hi
 800c5ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5f0:	2200      	movls	r2, #0
 800c5f2:	4083      	lsls	r3, r0
 800c5f4:	40ca      	lsrs	r2, r1
 800c5f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	e7de      	b.n	800c5bc <__b2d+0x48>
 800c5fe:	ea42 0501 	orr.w	r5, r2, r1
 800c602:	e7db      	b.n	800c5bc <__b2d+0x48>
 800c604:	3ff00000 	.word	0x3ff00000

0800c608 <__d2b>:
 800c608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	460f      	mov	r7, r1
 800c60e:	2101      	movs	r1, #1
 800c610:	ec59 8b10 	vmov	r8, r9, d0
 800c614:	4616      	mov	r6, r2
 800c616:	f7ff fc13 	bl	800be40 <_Balloc>
 800c61a:	4604      	mov	r4, r0
 800c61c:	b930      	cbnz	r0, 800c62c <__d2b+0x24>
 800c61e:	4602      	mov	r2, r0
 800c620:	4b23      	ldr	r3, [pc, #140]	@ (800c6b0 <__d2b+0xa8>)
 800c622:	4824      	ldr	r0, [pc, #144]	@ (800c6b4 <__d2b+0xac>)
 800c624:	f240 310f 	movw	r1, #783	@ 0x30f
 800c628:	f001 f99e 	bl	800d968 <__assert_func>
 800c62c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c634:	b10d      	cbz	r5, 800c63a <__d2b+0x32>
 800c636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	f1b8 0300 	subs.w	r3, r8, #0
 800c640:	d023      	beq.n	800c68a <__d2b+0x82>
 800c642:	4668      	mov	r0, sp
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	f7ff fd0c 	bl	800c062 <__lo0bits>
 800c64a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c64e:	b1d0      	cbz	r0, 800c686 <__d2b+0x7e>
 800c650:	f1c0 0320 	rsb	r3, r0, #32
 800c654:	fa02 f303 	lsl.w	r3, r2, r3
 800c658:	430b      	orrs	r3, r1
 800c65a:	40c2      	lsrs	r2, r0
 800c65c:	6163      	str	r3, [r4, #20]
 800c65e:	9201      	str	r2, [sp, #4]
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	61a3      	str	r3, [r4, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	bf0c      	ite	eq
 800c668:	2201      	moveq	r2, #1
 800c66a:	2202      	movne	r2, #2
 800c66c:	6122      	str	r2, [r4, #16]
 800c66e:	b1a5      	cbz	r5, 800c69a <__d2b+0x92>
 800c670:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c674:	4405      	add	r5, r0
 800c676:	603d      	str	r5, [r7, #0]
 800c678:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c67c:	6030      	str	r0, [r6, #0]
 800c67e:	4620      	mov	r0, r4
 800c680:	b003      	add	sp, #12
 800c682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c686:	6161      	str	r1, [r4, #20]
 800c688:	e7ea      	b.n	800c660 <__d2b+0x58>
 800c68a:	a801      	add	r0, sp, #4
 800c68c:	f7ff fce9 	bl	800c062 <__lo0bits>
 800c690:	9b01      	ldr	r3, [sp, #4]
 800c692:	6163      	str	r3, [r4, #20]
 800c694:	3020      	adds	r0, #32
 800c696:	2201      	movs	r2, #1
 800c698:	e7e8      	b.n	800c66c <__d2b+0x64>
 800c69a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c69e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6a2:	6038      	str	r0, [r7, #0]
 800c6a4:	6918      	ldr	r0, [r3, #16]
 800c6a6:	f7ff fcbd 	bl	800c024 <__hi0bits>
 800c6aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6ae:	e7e5      	b.n	800c67c <__d2b+0x74>
 800c6b0:	08012471 	.word	0x08012471
 800c6b4:	08012482 	.word	0x08012482

0800c6b8 <__ratio>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	b085      	sub	sp, #20
 800c6be:	e9cd 1000 	strd	r1, r0, [sp]
 800c6c2:	a902      	add	r1, sp, #8
 800c6c4:	f7ff ff56 	bl	800c574 <__b2d>
 800c6c8:	9800      	ldr	r0, [sp, #0]
 800c6ca:	a903      	add	r1, sp, #12
 800c6cc:	ec55 4b10 	vmov	r4, r5, d0
 800c6d0:	f7ff ff50 	bl	800c574 <__b2d>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	6919      	ldr	r1, [r3, #16]
 800c6d8:	9b00      	ldr	r3, [sp, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	1ac9      	subs	r1, r1, r3
 800c6de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6e2:	1a9b      	subs	r3, r3, r2
 800c6e4:	ec5b ab10 	vmov	sl, fp, d0
 800c6e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bfce      	itee	gt
 800c6f0:	462a      	movgt	r2, r5
 800c6f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6f6:	465a      	movle	r2, fp
 800c6f8:	462f      	mov	r7, r5
 800c6fa:	46d9      	mov	r9, fp
 800c6fc:	bfcc      	ite	gt
 800c6fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c702:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c706:	464b      	mov	r3, r9
 800c708:	4652      	mov	r2, sl
 800c70a:	4620      	mov	r0, r4
 800c70c:	4639      	mov	r1, r7
 800c70e:	f7f4 f8ad 	bl	800086c <__aeabi_ddiv>
 800c712:	ec41 0b10 	vmov	d0, r0, r1
 800c716:	b005      	add	sp, #20
 800c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c71c <__copybits>:
 800c71c:	3901      	subs	r1, #1
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	1149      	asrs	r1, r1, #5
 800c722:	6914      	ldr	r4, [r2, #16]
 800c724:	3101      	adds	r1, #1
 800c726:	f102 0314 	add.w	r3, r2, #20
 800c72a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c72e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c732:	1f05      	subs	r5, r0, #4
 800c734:	42a3      	cmp	r3, r4
 800c736:	d30c      	bcc.n	800c752 <__copybits+0x36>
 800c738:	1aa3      	subs	r3, r4, r2
 800c73a:	3b11      	subs	r3, #17
 800c73c:	f023 0303 	bic.w	r3, r3, #3
 800c740:	3211      	adds	r2, #17
 800c742:	42a2      	cmp	r2, r4
 800c744:	bf88      	it	hi
 800c746:	2300      	movhi	r3, #0
 800c748:	4418      	add	r0, r3
 800c74a:	2300      	movs	r3, #0
 800c74c:	4288      	cmp	r0, r1
 800c74e:	d305      	bcc.n	800c75c <__copybits+0x40>
 800c750:	bd70      	pop	{r4, r5, r6, pc}
 800c752:	f853 6b04 	ldr.w	r6, [r3], #4
 800c756:	f845 6f04 	str.w	r6, [r5, #4]!
 800c75a:	e7eb      	b.n	800c734 <__copybits+0x18>
 800c75c:	f840 3b04 	str.w	r3, [r0], #4
 800c760:	e7f4      	b.n	800c74c <__copybits+0x30>

0800c762 <__any_on>:
 800c762:	f100 0214 	add.w	r2, r0, #20
 800c766:	6900      	ldr	r0, [r0, #16]
 800c768:	114b      	asrs	r3, r1, #5
 800c76a:	4298      	cmp	r0, r3
 800c76c:	b510      	push	{r4, lr}
 800c76e:	db11      	blt.n	800c794 <__any_on+0x32>
 800c770:	dd0a      	ble.n	800c788 <__any_on+0x26>
 800c772:	f011 011f 	ands.w	r1, r1, #31
 800c776:	d007      	beq.n	800c788 <__any_on+0x26>
 800c778:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c77c:	fa24 f001 	lsr.w	r0, r4, r1
 800c780:	fa00 f101 	lsl.w	r1, r0, r1
 800c784:	428c      	cmp	r4, r1
 800c786:	d10b      	bne.n	800c7a0 <__any_on+0x3e>
 800c788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d803      	bhi.n	800c798 <__any_on+0x36>
 800c790:	2000      	movs	r0, #0
 800c792:	bd10      	pop	{r4, pc}
 800c794:	4603      	mov	r3, r0
 800c796:	e7f7      	b.n	800c788 <__any_on+0x26>
 800c798:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c79c:	2900      	cmp	r1, #0
 800c79e:	d0f5      	beq.n	800c78c <__any_on+0x2a>
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	e7f6      	b.n	800c792 <__any_on+0x30>

0800c7a4 <sulp>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	ec45 4b10 	vmov	d0, r4, r5
 800c7ae:	4616      	mov	r6, r2
 800c7b0:	f7ff feba 	bl	800c528 <__ulp>
 800c7b4:	ec51 0b10 	vmov	r0, r1, d0
 800c7b8:	b17e      	cbz	r6, 800c7da <sulp+0x36>
 800c7ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dd09      	ble.n	800c7da <sulp+0x36>
 800c7c6:	051b      	lsls	r3, r3, #20
 800c7c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c7cc:	2400      	movs	r4, #0
 800c7ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	f7f3 ff1f 	bl	8000618 <__aeabi_dmul>
 800c7da:	ec41 0b10 	vmov	d0, r0, r1
 800c7de:	bd70      	pop	{r4, r5, r6, pc}

0800c7e0 <_strtod_l>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	b09f      	sub	sp, #124	@ 0x7c
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800c7ee:	9005      	str	r0, [sp, #20]
 800c7f0:	f04f 0a00 	mov.w	sl, #0
 800c7f4:	f04f 0b00 	mov.w	fp, #0
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7fc:	7811      	ldrb	r1, [r2, #0]
 800c7fe:	292b      	cmp	r1, #43	@ 0x2b
 800c800:	d04a      	beq.n	800c898 <_strtod_l+0xb8>
 800c802:	d838      	bhi.n	800c876 <_strtod_l+0x96>
 800c804:	290d      	cmp	r1, #13
 800c806:	d832      	bhi.n	800c86e <_strtod_l+0x8e>
 800c808:	2908      	cmp	r1, #8
 800c80a:	d832      	bhi.n	800c872 <_strtod_l+0x92>
 800c80c:	2900      	cmp	r1, #0
 800c80e:	d03b      	beq.n	800c888 <_strtod_l+0xa8>
 800c810:	2200      	movs	r2, #0
 800c812:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c814:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c816:	782a      	ldrb	r2, [r5, #0]
 800c818:	2a30      	cmp	r2, #48	@ 0x30
 800c81a:	f040 80b3 	bne.w	800c984 <_strtod_l+0x1a4>
 800c81e:	786a      	ldrb	r2, [r5, #1]
 800c820:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c824:	2a58      	cmp	r2, #88	@ 0x58
 800c826:	d16e      	bne.n	800c906 <_strtod_l+0x126>
 800c828:	9302      	str	r3, [sp, #8]
 800c82a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	4a8e      	ldr	r2, [pc, #568]	@ (800ca6c <_strtod_l+0x28c>)
 800c834:	9805      	ldr	r0, [sp, #20]
 800c836:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c838:	a919      	add	r1, sp, #100	@ 0x64
 800c83a:	f001 f92f 	bl	800da9c <__gethex>
 800c83e:	f010 060f 	ands.w	r6, r0, #15
 800c842:	4604      	mov	r4, r0
 800c844:	d005      	beq.n	800c852 <_strtod_l+0x72>
 800c846:	2e06      	cmp	r6, #6
 800c848:	d128      	bne.n	800c89c <_strtod_l+0xbc>
 800c84a:	3501      	adds	r5, #1
 800c84c:	2300      	movs	r3, #0
 800c84e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c852:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 858e 	bne.w	800d376 <_strtod_l+0xb96>
 800c85a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c85c:	b1cb      	cbz	r3, 800c892 <_strtod_l+0xb2>
 800c85e:	4652      	mov	r2, sl
 800c860:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c864:	ec43 2b10 	vmov	d0, r2, r3
 800c868:	b01f      	add	sp, #124	@ 0x7c
 800c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86e:	2920      	cmp	r1, #32
 800c870:	d1ce      	bne.n	800c810 <_strtod_l+0x30>
 800c872:	3201      	adds	r2, #1
 800c874:	e7c1      	b.n	800c7fa <_strtod_l+0x1a>
 800c876:	292d      	cmp	r1, #45	@ 0x2d
 800c878:	d1ca      	bne.n	800c810 <_strtod_l+0x30>
 800c87a:	2101      	movs	r1, #1
 800c87c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c87e:	1c51      	adds	r1, r2, #1
 800c880:	9119      	str	r1, [sp, #100]	@ 0x64
 800c882:	7852      	ldrb	r2, [r2, #1]
 800c884:	2a00      	cmp	r2, #0
 800c886:	d1c5      	bne.n	800c814 <_strtod_l+0x34>
 800c888:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c88a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f040 8570 	bne.w	800d372 <_strtod_l+0xb92>
 800c892:	4652      	mov	r2, sl
 800c894:	465b      	mov	r3, fp
 800c896:	e7e5      	b.n	800c864 <_strtod_l+0x84>
 800c898:	2100      	movs	r1, #0
 800c89a:	e7ef      	b.n	800c87c <_strtod_l+0x9c>
 800c89c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c89e:	b13a      	cbz	r2, 800c8b0 <_strtod_l+0xd0>
 800c8a0:	2135      	movs	r1, #53	@ 0x35
 800c8a2:	a81c      	add	r0, sp, #112	@ 0x70
 800c8a4:	f7ff ff3a 	bl	800c71c <__copybits>
 800c8a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8aa:	9805      	ldr	r0, [sp, #20]
 800c8ac:	f7ff fb08 	bl	800bec0 <_Bfree>
 800c8b0:	3e01      	subs	r6, #1
 800c8b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8b4:	2e04      	cmp	r6, #4
 800c8b6:	d806      	bhi.n	800c8c6 <_strtod_l+0xe6>
 800c8b8:	e8df f006 	tbb	[pc, r6]
 800c8bc:	201d0314 	.word	0x201d0314
 800c8c0:	14          	.byte	0x14
 800c8c1:	00          	.byte	0x00
 800c8c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c8c6:	05e1      	lsls	r1, r4, #23
 800c8c8:	bf48      	it	mi
 800c8ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c8ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8d2:	0d1b      	lsrs	r3, r3, #20
 800c8d4:	051b      	lsls	r3, r3, #20
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1bb      	bne.n	800c852 <_strtod_l+0x72>
 800c8da:	f001 f827 	bl	800d92c <__errno>
 800c8de:	2322      	movs	r3, #34	@ 0x22
 800c8e0:	6003      	str	r3, [r0, #0]
 800c8e2:	e7b6      	b.n	800c852 <_strtod_l+0x72>
 800c8e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c8e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c8f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c8f4:	e7e7      	b.n	800c8c6 <_strtod_l+0xe6>
 800c8f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ca74 <_strtod_l+0x294>
 800c8fa:	e7e4      	b.n	800c8c6 <_strtod_l+0xe6>
 800c8fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c900:	f04f 3aff 	mov.w	sl, #4294967295
 800c904:	e7df      	b.n	800c8c6 <_strtod_l+0xe6>
 800c906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c90c:	785b      	ldrb	r3, [r3, #1]
 800c90e:	2b30      	cmp	r3, #48	@ 0x30
 800c910:	d0f9      	beq.n	800c906 <_strtod_l+0x126>
 800c912:	2b00      	cmp	r3, #0
 800c914:	d09d      	beq.n	800c852 <_strtod_l+0x72>
 800c916:	2301      	movs	r3, #1
 800c918:	9309      	str	r3, [sp, #36]	@ 0x24
 800c91a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c91c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c91e:	2300      	movs	r3, #0
 800c920:	9308      	str	r3, [sp, #32]
 800c922:	930a      	str	r3, [sp, #40]	@ 0x28
 800c924:	461f      	mov	r7, r3
 800c926:	220a      	movs	r2, #10
 800c928:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c92a:	7805      	ldrb	r5, [r0, #0]
 800c92c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c930:	b2d9      	uxtb	r1, r3
 800c932:	2909      	cmp	r1, #9
 800c934:	d928      	bls.n	800c988 <_strtod_l+0x1a8>
 800c936:	494e      	ldr	r1, [pc, #312]	@ (800ca70 <_strtod_l+0x290>)
 800c938:	2201      	movs	r2, #1
 800c93a:	f000 ffd5 	bl	800d8e8 <strncmp>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d032      	beq.n	800c9a8 <_strtod_l+0x1c8>
 800c942:	2000      	movs	r0, #0
 800c944:	462a      	mov	r2, r5
 800c946:	4681      	mov	r9, r0
 800c948:	463d      	mov	r5, r7
 800c94a:	4603      	mov	r3, r0
 800c94c:	2a65      	cmp	r2, #101	@ 0x65
 800c94e:	d001      	beq.n	800c954 <_strtod_l+0x174>
 800c950:	2a45      	cmp	r2, #69	@ 0x45
 800c952:	d114      	bne.n	800c97e <_strtod_l+0x19e>
 800c954:	b91d      	cbnz	r5, 800c95e <_strtod_l+0x17e>
 800c956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c958:	4302      	orrs	r2, r0
 800c95a:	d095      	beq.n	800c888 <_strtod_l+0xa8>
 800c95c:	2500      	movs	r5, #0
 800c95e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c960:	1c62      	adds	r2, r4, #1
 800c962:	9219      	str	r2, [sp, #100]	@ 0x64
 800c964:	7862      	ldrb	r2, [r4, #1]
 800c966:	2a2b      	cmp	r2, #43	@ 0x2b
 800c968:	d077      	beq.n	800ca5a <_strtod_l+0x27a>
 800c96a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c96c:	d07b      	beq.n	800ca66 <_strtod_l+0x286>
 800c96e:	f04f 0c00 	mov.w	ip, #0
 800c972:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c976:	2909      	cmp	r1, #9
 800c978:	f240 8082 	bls.w	800ca80 <_strtod_l+0x2a0>
 800c97c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c97e:	f04f 0800 	mov.w	r8, #0
 800c982:	e0a2      	b.n	800caca <_strtod_l+0x2ea>
 800c984:	2300      	movs	r3, #0
 800c986:	e7c7      	b.n	800c918 <_strtod_l+0x138>
 800c988:	2f08      	cmp	r7, #8
 800c98a:	bfd5      	itete	le
 800c98c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c98e:	9908      	ldrgt	r1, [sp, #32]
 800c990:	fb02 3301 	mlale	r3, r2, r1, r3
 800c994:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c998:	f100 0001 	add.w	r0, r0, #1
 800c99c:	bfd4      	ite	le
 800c99e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c9a0:	9308      	strgt	r3, [sp, #32]
 800c9a2:	3701      	adds	r7, #1
 800c9a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9a6:	e7bf      	b.n	800c928 <_strtod_l+0x148>
 800c9a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ae:	785a      	ldrb	r2, [r3, #1]
 800c9b0:	b37f      	cbz	r7, 800ca12 <_strtod_l+0x232>
 800c9b2:	4681      	mov	r9, r0
 800c9b4:	463d      	mov	r5, r7
 800c9b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c9ba:	2b09      	cmp	r3, #9
 800c9bc:	d912      	bls.n	800c9e4 <_strtod_l+0x204>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e7c4      	b.n	800c94c <_strtod_l+0x16c>
 800c9c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9c8:	785a      	ldrb	r2, [r3, #1]
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	2a30      	cmp	r2, #48	@ 0x30
 800c9ce:	d0f8      	beq.n	800c9c2 <_strtod_l+0x1e2>
 800c9d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c9d4:	2b08      	cmp	r3, #8
 800c9d6:	f200 84d3 	bhi.w	800d380 <_strtod_l+0xba0>
 800c9da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9de:	4681      	mov	r9, r0
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	3a30      	subs	r2, #48	@ 0x30
 800c9e6:	f100 0301 	add.w	r3, r0, #1
 800c9ea:	d02a      	beq.n	800ca42 <_strtod_l+0x262>
 800c9ec:	4499      	add	r9, r3
 800c9ee:	eb00 0c05 	add.w	ip, r0, r5
 800c9f2:	462b      	mov	r3, r5
 800c9f4:	210a      	movs	r1, #10
 800c9f6:	4563      	cmp	r3, ip
 800c9f8:	d10d      	bne.n	800ca16 <_strtod_l+0x236>
 800c9fa:	1c69      	adds	r1, r5, #1
 800c9fc:	4401      	add	r1, r0
 800c9fe:	4428      	add	r0, r5
 800ca00:	2808      	cmp	r0, #8
 800ca02:	dc16      	bgt.n	800ca32 <_strtod_l+0x252>
 800ca04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca06:	230a      	movs	r3, #10
 800ca08:	fb03 2300 	mla	r3, r3, r0, r2
 800ca0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e018      	b.n	800ca44 <_strtod_l+0x264>
 800ca12:	4638      	mov	r0, r7
 800ca14:	e7da      	b.n	800c9cc <_strtod_l+0x1ec>
 800ca16:	2b08      	cmp	r3, #8
 800ca18:	f103 0301 	add.w	r3, r3, #1
 800ca1c:	dc03      	bgt.n	800ca26 <_strtod_l+0x246>
 800ca1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca20:	434e      	muls	r6, r1
 800ca22:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca24:	e7e7      	b.n	800c9f6 <_strtod_l+0x216>
 800ca26:	2b10      	cmp	r3, #16
 800ca28:	bfde      	ittt	le
 800ca2a:	9e08      	ldrle	r6, [sp, #32]
 800ca2c:	434e      	mulle	r6, r1
 800ca2e:	9608      	strle	r6, [sp, #32]
 800ca30:	e7e1      	b.n	800c9f6 <_strtod_l+0x216>
 800ca32:	280f      	cmp	r0, #15
 800ca34:	dceb      	bgt.n	800ca0e <_strtod_l+0x22e>
 800ca36:	9808      	ldr	r0, [sp, #32]
 800ca38:	230a      	movs	r3, #10
 800ca3a:	fb03 2300 	mla	r3, r3, r0, r2
 800ca3e:	9308      	str	r3, [sp, #32]
 800ca40:	e7e5      	b.n	800ca0e <_strtod_l+0x22e>
 800ca42:	4629      	mov	r1, r5
 800ca44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca46:	1c50      	adds	r0, r2, #1
 800ca48:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca4a:	7852      	ldrb	r2, [r2, #1]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	460d      	mov	r5, r1
 800ca50:	e7b1      	b.n	800c9b6 <_strtod_l+0x1d6>
 800ca52:	f04f 0900 	mov.w	r9, #0
 800ca56:	2301      	movs	r3, #1
 800ca58:	e77d      	b.n	800c956 <_strtod_l+0x176>
 800ca5a:	f04f 0c00 	mov.w	ip, #0
 800ca5e:	1ca2      	adds	r2, r4, #2
 800ca60:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca62:	78a2      	ldrb	r2, [r4, #2]
 800ca64:	e785      	b.n	800c972 <_strtod_l+0x192>
 800ca66:	f04f 0c01 	mov.w	ip, #1
 800ca6a:	e7f8      	b.n	800ca5e <_strtod_l+0x27e>
 800ca6c:	080125f0 	.word	0x080125f0
 800ca70:	080125d8 	.word	0x080125d8
 800ca74:	7ff00000 	.word	0x7ff00000
 800ca78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca7a:	1c51      	adds	r1, r2, #1
 800ca7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca7e:	7852      	ldrb	r2, [r2, #1]
 800ca80:	2a30      	cmp	r2, #48	@ 0x30
 800ca82:	d0f9      	beq.n	800ca78 <_strtod_l+0x298>
 800ca84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ca88:	2908      	cmp	r1, #8
 800ca8a:	f63f af78 	bhi.w	800c97e <_strtod_l+0x19e>
 800ca8e:	3a30      	subs	r2, #48	@ 0x30
 800ca90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca96:	f04f 080a 	mov.w	r8, #10
 800ca9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca9c:	1c56      	adds	r6, r2, #1
 800ca9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800caa0:	7852      	ldrb	r2, [r2, #1]
 800caa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800caa6:	f1be 0f09 	cmp.w	lr, #9
 800caaa:	d939      	bls.n	800cb20 <_strtod_l+0x340>
 800caac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800caae:	1a76      	subs	r6, r6, r1
 800cab0:	2e08      	cmp	r6, #8
 800cab2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cab6:	dc03      	bgt.n	800cac0 <_strtod_l+0x2e0>
 800cab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800caba:	4588      	cmp	r8, r1
 800cabc:	bfa8      	it	ge
 800cabe:	4688      	movge	r8, r1
 800cac0:	f1bc 0f00 	cmp.w	ip, #0
 800cac4:	d001      	beq.n	800caca <_strtod_l+0x2ea>
 800cac6:	f1c8 0800 	rsb	r8, r8, #0
 800caca:	2d00      	cmp	r5, #0
 800cacc:	d14e      	bne.n	800cb6c <_strtod_l+0x38c>
 800cace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cad0:	4308      	orrs	r0, r1
 800cad2:	f47f aebe 	bne.w	800c852 <_strtod_l+0x72>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f47f aed6 	bne.w	800c888 <_strtod_l+0xa8>
 800cadc:	2a69      	cmp	r2, #105	@ 0x69
 800cade:	d028      	beq.n	800cb32 <_strtod_l+0x352>
 800cae0:	dc25      	bgt.n	800cb2e <_strtod_l+0x34e>
 800cae2:	2a49      	cmp	r2, #73	@ 0x49
 800cae4:	d025      	beq.n	800cb32 <_strtod_l+0x352>
 800cae6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cae8:	f47f aece 	bne.w	800c888 <_strtod_l+0xa8>
 800caec:	499b      	ldr	r1, [pc, #620]	@ (800cd5c <_strtod_l+0x57c>)
 800caee:	a819      	add	r0, sp, #100	@ 0x64
 800caf0:	f001 f9f6 	bl	800dee0 <__match>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f aec7 	beq.w	800c888 <_strtod_l+0xa8>
 800cafa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b28      	cmp	r3, #40	@ 0x28
 800cb00:	d12e      	bne.n	800cb60 <_strtod_l+0x380>
 800cb02:	4997      	ldr	r1, [pc, #604]	@ (800cd60 <_strtod_l+0x580>)
 800cb04:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb06:	a819      	add	r0, sp, #100	@ 0x64
 800cb08:	f001 f9fe 	bl	800df08 <__hexnan>
 800cb0c:	2805      	cmp	r0, #5
 800cb0e:	d127      	bne.n	800cb60 <_strtod_l+0x380>
 800cb10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb1e:	e698      	b.n	800c852 <_strtod_l+0x72>
 800cb20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb22:	fb08 2101 	mla	r1, r8, r1, r2
 800cb26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb2c:	e7b5      	b.n	800ca9a <_strtod_l+0x2ba>
 800cb2e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb30:	e7da      	b.n	800cae8 <_strtod_l+0x308>
 800cb32:	498c      	ldr	r1, [pc, #560]	@ (800cd64 <_strtod_l+0x584>)
 800cb34:	a819      	add	r0, sp, #100	@ 0x64
 800cb36:	f001 f9d3 	bl	800dee0 <__match>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	f43f aea4 	beq.w	800c888 <_strtod_l+0xa8>
 800cb40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb42:	4989      	ldr	r1, [pc, #548]	@ (800cd68 <_strtod_l+0x588>)
 800cb44:	3b01      	subs	r3, #1
 800cb46:	a819      	add	r0, sp, #100	@ 0x64
 800cb48:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb4a:	f001 f9c9 	bl	800dee0 <__match>
 800cb4e:	b910      	cbnz	r0, 800cb56 <_strtod_l+0x376>
 800cb50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb52:	3301      	adds	r3, #1
 800cb54:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cd78 <_strtod_l+0x598>
 800cb5a:	f04f 0a00 	mov.w	sl, #0
 800cb5e:	e678      	b.n	800c852 <_strtod_l+0x72>
 800cb60:	4882      	ldr	r0, [pc, #520]	@ (800cd6c <_strtod_l+0x58c>)
 800cb62:	f000 fef9 	bl	800d958 <nan>
 800cb66:	ec5b ab10 	vmov	sl, fp, d0
 800cb6a:	e672      	b.n	800c852 <_strtod_l+0x72>
 800cb6c:	eba8 0309 	sub.w	r3, r8, r9
 800cb70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb72:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb74:	2f00      	cmp	r7, #0
 800cb76:	bf08      	it	eq
 800cb78:	462f      	moveq	r7, r5
 800cb7a:	2d10      	cmp	r5, #16
 800cb7c:	462c      	mov	r4, r5
 800cb7e:	bfa8      	it	ge
 800cb80:	2410      	movge	r4, #16
 800cb82:	f7f3 fccf 	bl	8000524 <__aeabi_ui2d>
 800cb86:	2d09      	cmp	r5, #9
 800cb88:	4682      	mov	sl, r0
 800cb8a:	468b      	mov	fp, r1
 800cb8c:	dc13      	bgt.n	800cbb6 <_strtod_l+0x3d6>
 800cb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f43f ae5e 	beq.w	800c852 <_strtod_l+0x72>
 800cb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb98:	dd78      	ble.n	800cc8c <_strtod_l+0x4ac>
 800cb9a:	2b16      	cmp	r3, #22
 800cb9c:	dc5f      	bgt.n	800cc5e <_strtod_l+0x47e>
 800cb9e:	4974      	ldr	r1, [pc, #464]	@ (800cd70 <_strtod_l+0x590>)
 800cba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cba8:	4652      	mov	r2, sl
 800cbaa:	465b      	mov	r3, fp
 800cbac:	f7f3 fd34 	bl	8000618 <__aeabi_dmul>
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	468b      	mov	fp, r1
 800cbb4:	e64d      	b.n	800c852 <_strtod_l+0x72>
 800cbb6:	4b6e      	ldr	r3, [pc, #440]	@ (800cd70 <_strtod_l+0x590>)
 800cbb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cbc0:	f7f3 fd2a 	bl	8000618 <__aeabi_dmul>
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	9808      	ldr	r0, [sp, #32]
 800cbc8:	468b      	mov	fp, r1
 800cbca:	f7f3 fcab 	bl	8000524 <__aeabi_ui2d>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	4659      	mov	r1, fp
 800cbd6:	f7f3 fb69 	bl	80002ac <__adddf3>
 800cbda:	2d0f      	cmp	r5, #15
 800cbdc:	4682      	mov	sl, r0
 800cbde:	468b      	mov	fp, r1
 800cbe0:	ddd5      	ble.n	800cb8e <_strtod_l+0x3ae>
 800cbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe4:	1b2c      	subs	r4, r5, r4
 800cbe6:	441c      	add	r4, r3
 800cbe8:	2c00      	cmp	r4, #0
 800cbea:	f340 8096 	ble.w	800cd1a <_strtod_l+0x53a>
 800cbee:	f014 030f 	ands.w	r3, r4, #15
 800cbf2:	d00a      	beq.n	800cc0a <_strtod_l+0x42a>
 800cbf4:	495e      	ldr	r1, [pc, #376]	@ (800cd70 <_strtod_l+0x590>)
 800cbf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	465b      	mov	r3, fp
 800cbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc02:	f7f3 fd09 	bl	8000618 <__aeabi_dmul>
 800cc06:	4682      	mov	sl, r0
 800cc08:	468b      	mov	fp, r1
 800cc0a:	f034 040f 	bics.w	r4, r4, #15
 800cc0e:	d073      	beq.n	800ccf8 <_strtod_l+0x518>
 800cc10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc14:	dd48      	ble.n	800cca8 <_strtod_l+0x4c8>
 800cc16:	2400      	movs	r4, #0
 800cc18:	46a0      	mov	r8, r4
 800cc1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc1c:	46a1      	mov	r9, r4
 800cc1e:	9a05      	ldr	r2, [sp, #20]
 800cc20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cd78 <_strtod_l+0x598>
 800cc24:	2322      	movs	r3, #34	@ 0x22
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	f04f 0a00 	mov.w	sl, #0
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f43f ae0f 	beq.w	800c852 <_strtod_l+0x72>
 800cc34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc36:	9805      	ldr	r0, [sp, #20]
 800cc38:	f7ff f942 	bl	800bec0 <_Bfree>
 800cc3c:	9805      	ldr	r0, [sp, #20]
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7ff f93e 	bl	800bec0 <_Bfree>
 800cc44:	9805      	ldr	r0, [sp, #20]
 800cc46:	4641      	mov	r1, r8
 800cc48:	f7ff f93a 	bl	800bec0 <_Bfree>
 800cc4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc4e:	9805      	ldr	r0, [sp, #20]
 800cc50:	f7ff f936 	bl	800bec0 <_Bfree>
 800cc54:	9805      	ldr	r0, [sp, #20]
 800cc56:	4621      	mov	r1, r4
 800cc58:	f7ff f932 	bl	800bec0 <_Bfree>
 800cc5c:	e5f9      	b.n	800c852 <_strtod_l+0x72>
 800cc5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cc64:	4293      	cmp	r3, r2
 800cc66:	dbbc      	blt.n	800cbe2 <_strtod_l+0x402>
 800cc68:	4c41      	ldr	r4, [pc, #260]	@ (800cd70 <_strtod_l+0x590>)
 800cc6a:	f1c5 050f 	rsb	r5, r5, #15
 800cc6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc72:	4652      	mov	r2, sl
 800cc74:	465b      	mov	r3, fp
 800cc76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc7a:	f7f3 fccd 	bl	8000618 <__aeabi_dmul>
 800cc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc80:	1b5d      	subs	r5, r3, r5
 800cc82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc8a:	e78f      	b.n	800cbac <_strtod_l+0x3cc>
 800cc8c:	3316      	adds	r3, #22
 800cc8e:	dba8      	blt.n	800cbe2 <_strtod_l+0x402>
 800cc90:	4b37      	ldr	r3, [pc, #220]	@ (800cd70 <_strtod_l+0x590>)
 800cc92:	eba9 0808 	sub.w	r8, r9, r8
 800cc96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cc9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cc9e:	4650      	mov	r0, sl
 800cca0:	4659      	mov	r1, fp
 800cca2:	f7f3 fde3 	bl	800086c <__aeabi_ddiv>
 800cca6:	e783      	b.n	800cbb0 <_strtod_l+0x3d0>
 800cca8:	4b32      	ldr	r3, [pc, #200]	@ (800cd74 <_strtod_l+0x594>)
 800ccaa:	9308      	str	r3, [sp, #32]
 800ccac:	2300      	movs	r3, #0
 800ccae:	1124      	asrs	r4, r4, #4
 800ccb0:	4650      	mov	r0, sl
 800ccb2:	4659      	mov	r1, fp
 800ccb4:	461e      	mov	r6, r3
 800ccb6:	2c01      	cmp	r4, #1
 800ccb8:	dc21      	bgt.n	800ccfe <_strtod_l+0x51e>
 800ccba:	b10b      	cbz	r3, 800ccc0 <_strtod_l+0x4e0>
 800ccbc:	4682      	mov	sl, r0
 800ccbe:	468b      	mov	fp, r1
 800ccc0:	492c      	ldr	r1, [pc, #176]	@ (800cd74 <_strtod_l+0x594>)
 800ccc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ccc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ccca:	4652      	mov	r2, sl
 800cccc:	465b      	mov	r3, fp
 800ccce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd2:	f7f3 fca1 	bl	8000618 <__aeabi_dmul>
 800ccd6:	4b28      	ldr	r3, [pc, #160]	@ (800cd78 <_strtod_l+0x598>)
 800ccd8:	460a      	mov	r2, r1
 800ccda:	400b      	ands	r3, r1
 800ccdc:	4927      	ldr	r1, [pc, #156]	@ (800cd7c <_strtod_l+0x59c>)
 800ccde:	428b      	cmp	r3, r1
 800cce0:	4682      	mov	sl, r0
 800cce2:	d898      	bhi.n	800cc16 <_strtod_l+0x436>
 800cce4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cce8:	428b      	cmp	r3, r1
 800ccea:	bf86      	itte	hi
 800ccec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cd80 <_strtod_l+0x5a0>
 800ccf0:	f04f 3aff 	movhi.w	sl, #4294967295
 800ccf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9308      	str	r3, [sp, #32]
 800ccfc:	e07a      	b.n	800cdf4 <_strtod_l+0x614>
 800ccfe:	07e2      	lsls	r2, r4, #31
 800cd00:	d505      	bpl.n	800cd0e <_strtod_l+0x52e>
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fc86 	bl	8000618 <__aeabi_dmul>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	9a08      	ldr	r2, [sp, #32]
 800cd10:	3208      	adds	r2, #8
 800cd12:	3601      	adds	r6, #1
 800cd14:	1064      	asrs	r4, r4, #1
 800cd16:	9208      	str	r2, [sp, #32]
 800cd18:	e7cd      	b.n	800ccb6 <_strtod_l+0x4d6>
 800cd1a:	d0ed      	beq.n	800ccf8 <_strtod_l+0x518>
 800cd1c:	4264      	negs	r4, r4
 800cd1e:	f014 020f 	ands.w	r2, r4, #15
 800cd22:	d00a      	beq.n	800cd3a <_strtod_l+0x55a>
 800cd24:	4b12      	ldr	r3, [pc, #72]	@ (800cd70 <_strtod_l+0x590>)
 800cd26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd2a:	4650      	mov	r0, sl
 800cd2c:	4659      	mov	r1, fp
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 fd9b 	bl	800086c <__aeabi_ddiv>
 800cd36:	4682      	mov	sl, r0
 800cd38:	468b      	mov	fp, r1
 800cd3a:	1124      	asrs	r4, r4, #4
 800cd3c:	d0dc      	beq.n	800ccf8 <_strtod_l+0x518>
 800cd3e:	2c1f      	cmp	r4, #31
 800cd40:	dd20      	ble.n	800cd84 <_strtod_l+0x5a4>
 800cd42:	2400      	movs	r4, #0
 800cd44:	46a0      	mov	r8, r4
 800cd46:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd48:	46a1      	mov	r9, r4
 800cd4a:	9a05      	ldr	r2, [sp, #20]
 800cd4c:	2322      	movs	r3, #34	@ 0x22
 800cd4e:	f04f 0a00 	mov.w	sl, #0
 800cd52:	f04f 0b00 	mov.w	fp, #0
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	e768      	b.n	800cc2c <_strtod_l+0x44c>
 800cd5a:	bf00      	nop
 800cd5c:	080123c9 	.word	0x080123c9
 800cd60:	080125dc 	.word	0x080125dc
 800cd64:	080123c1 	.word	0x080123c1
 800cd68:	080123f8 	.word	0x080123f8
 800cd6c:	08012785 	.word	0x08012785
 800cd70:	08012510 	.word	0x08012510
 800cd74:	080124e8 	.word	0x080124e8
 800cd78:	7ff00000 	.word	0x7ff00000
 800cd7c:	7ca00000 	.word	0x7ca00000
 800cd80:	7fefffff 	.word	0x7fefffff
 800cd84:	f014 0310 	ands.w	r3, r4, #16
 800cd88:	bf18      	it	ne
 800cd8a:	236a      	movne	r3, #106	@ 0x6a
 800cd8c:	4ea9      	ldr	r6, [pc, #676]	@ (800d034 <_strtod_l+0x854>)
 800cd8e:	9308      	str	r3, [sp, #32]
 800cd90:	4650      	mov	r0, sl
 800cd92:	4659      	mov	r1, fp
 800cd94:	2300      	movs	r3, #0
 800cd96:	07e2      	lsls	r2, r4, #31
 800cd98:	d504      	bpl.n	800cda4 <_strtod_l+0x5c4>
 800cd9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd9e:	f7f3 fc3b 	bl	8000618 <__aeabi_dmul>
 800cda2:	2301      	movs	r3, #1
 800cda4:	1064      	asrs	r4, r4, #1
 800cda6:	f106 0608 	add.w	r6, r6, #8
 800cdaa:	d1f4      	bne.n	800cd96 <_strtod_l+0x5b6>
 800cdac:	b10b      	cbz	r3, 800cdb2 <_strtod_l+0x5d2>
 800cdae:	4682      	mov	sl, r0
 800cdb0:	468b      	mov	fp, r1
 800cdb2:	9b08      	ldr	r3, [sp, #32]
 800cdb4:	b1b3      	cbz	r3, 800cde4 <_strtod_l+0x604>
 800cdb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	4659      	mov	r1, fp
 800cdc2:	dd0f      	ble.n	800cde4 <_strtod_l+0x604>
 800cdc4:	2b1f      	cmp	r3, #31
 800cdc6:	dd55      	ble.n	800ce74 <_strtod_l+0x694>
 800cdc8:	2b34      	cmp	r3, #52	@ 0x34
 800cdca:	bfde      	ittt	le
 800cdcc:	f04f 33ff 	movle.w	r3, #4294967295
 800cdd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cdd4:	4093      	lslle	r3, r2
 800cdd6:	f04f 0a00 	mov.w	sl, #0
 800cdda:	bfcc      	ite	gt
 800cddc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cde0:	ea03 0b01 	andle.w	fp, r3, r1
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	4650      	mov	r0, sl
 800cdea:	4659      	mov	r1, fp
 800cdec:	f7f3 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1a6      	bne.n	800cd42 <_strtod_l+0x562>
 800cdf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cdfa:	9805      	ldr	r0, [sp, #20]
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	463a      	mov	r2, r7
 800ce00:	f7ff f8c6 	bl	800bf90 <__s2b>
 800ce04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f43f af05 	beq.w	800cc16 <_strtod_l+0x436>
 800ce0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce0e:	2a00      	cmp	r2, #0
 800ce10:	eba9 0308 	sub.w	r3, r9, r8
 800ce14:	bfa8      	it	ge
 800ce16:	2300      	movge	r3, #0
 800ce18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce1a:	2400      	movs	r4, #0
 800ce1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce20:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce22:	46a0      	mov	r8, r4
 800ce24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce26:	9805      	ldr	r0, [sp, #20]
 800ce28:	6859      	ldr	r1, [r3, #4]
 800ce2a:	f7ff f809 	bl	800be40 <_Balloc>
 800ce2e:	4681      	mov	r9, r0
 800ce30:	2800      	cmp	r0, #0
 800ce32:	f43f aef4 	beq.w	800cc1e <_strtod_l+0x43e>
 800ce36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce38:	691a      	ldr	r2, [r3, #16]
 800ce3a:	3202      	adds	r2, #2
 800ce3c:	f103 010c 	add.w	r1, r3, #12
 800ce40:	0092      	lsls	r2, r2, #2
 800ce42:	300c      	adds	r0, #12
 800ce44:	f000 fd78 	bl	800d938 <memcpy>
 800ce48:	ec4b ab10 	vmov	d0, sl, fp
 800ce4c:	9805      	ldr	r0, [sp, #20]
 800ce4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce50:	a91b      	add	r1, sp, #108	@ 0x6c
 800ce52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce56:	f7ff fbd7 	bl	800c608 <__d2b>
 800ce5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f43f aede 	beq.w	800cc1e <_strtod_l+0x43e>
 800ce62:	9805      	ldr	r0, [sp, #20]
 800ce64:	2101      	movs	r1, #1
 800ce66:	f7ff f929 	bl	800c0bc <__i2b>
 800ce6a:	4680      	mov	r8, r0
 800ce6c:	b948      	cbnz	r0, 800ce82 <_strtod_l+0x6a2>
 800ce6e:	f04f 0800 	mov.w	r8, #0
 800ce72:	e6d4      	b.n	800cc1e <_strtod_l+0x43e>
 800ce74:	f04f 32ff 	mov.w	r2, #4294967295
 800ce78:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ce80:	e7b0      	b.n	800cde4 <_strtod_l+0x604>
 800ce82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ce84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	bfab      	itete	ge
 800ce8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ce8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ce8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ce90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ce92:	bfac      	ite	ge
 800ce94:	18ef      	addge	r7, r5, r3
 800ce96:	1b5e      	sublt	r6, r3, r5
 800ce98:	9b08      	ldr	r3, [sp, #32]
 800ce9a:	1aed      	subs	r5, r5, r3
 800ce9c:	4415      	add	r5, r2
 800ce9e:	4b66      	ldr	r3, [pc, #408]	@ (800d038 <_strtod_l+0x858>)
 800cea0:	3d01      	subs	r5, #1
 800cea2:	429d      	cmp	r5, r3
 800cea4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cea8:	da50      	bge.n	800cf4c <_strtod_l+0x76c>
 800ceaa:	1b5b      	subs	r3, r3, r5
 800ceac:	2b1f      	cmp	r3, #31
 800ceae:	eba2 0203 	sub.w	r2, r2, r3
 800ceb2:	f04f 0101 	mov.w	r1, #1
 800ceb6:	dc3d      	bgt.n	800cf34 <_strtod_l+0x754>
 800ceb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cebc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cebe:	2300      	movs	r3, #0
 800cec0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cec2:	18bd      	adds	r5, r7, r2
 800cec4:	9b08      	ldr	r3, [sp, #32]
 800cec6:	42af      	cmp	r7, r5
 800cec8:	4416      	add	r6, r2
 800ceca:	441e      	add	r6, r3
 800cecc:	463b      	mov	r3, r7
 800cece:	bfa8      	it	ge
 800ced0:	462b      	movge	r3, r5
 800ced2:	42b3      	cmp	r3, r6
 800ced4:	bfa8      	it	ge
 800ced6:	4633      	movge	r3, r6
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	bfc2      	ittt	gt
 800cedc:	1aed      	subgt	r5, r5, r3
 800cede:	1af6      	subgt	r6, r6, r3
 800cee0:	1aff      	subgt	r7, r7, r3
 800cee2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	dd16      	ble.n	800cf16 <_strtod_l+0x736>
 800cee8:	4641      	mov	r1, r8
 800ceea:	9805      	ldr	r0, [sp, #20]
 800ceec:	461a      	mov	r2, r3
 800ceee:	f7ff f9a5 	bl	800c23c <__pow5mult>
 800cef2:	4680      	mov	r8, r0
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d0ba      	beq.n	800ce6e <_strtod_l+0x68e>
 800cef8:	4601      	mov	r1, r0
 800cefa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	f7ff f8f3 	bl	800c0e8 <__multiply>
 800cf02:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f43f ae8a 	beq.w	800cc1e <_strtod_l+0x43e>
 800cf0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf0c:	9805      	ldr	r0, [sp, #20]
 800cf0e:	f7fe ffd7 	bl	800bec0 <_Bfree>
 800cf12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf14:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	dc1d      	bgt.n	800cf56 <_strtod_l+0x776>
 800cf1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	dd23      	ble.n	800cf68 <_strtod_l+0x788>
 800cf20:	4649      	mov	r1, r9
 800cf22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf24:	9805      	ldr	r0, [sp, #20]
 800cf26:	f7ff f989 	bl	800c23c <__pow5mult>
 800cf2a:	4681      	mov	r9, r0
 800cf2c:	b9e0      	cbnz	r0, 800cf68 <_strtod_l+0x788>
 800cf2e:	f04f 0900 	mov.w	r9, #0
 800cf32:	e674      	b.n	800cc1e <_strtod_l+0x43e>
 800cf34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf40:	35e2      	adds	r5, #226	@ 0xe2
 800cf42:	fa01 f305 	lsl.w	r3, r1, r5
 800cf46:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf4a:	e7ba      	b.n	800cec2 <_strtod_l+0x6e2>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf50:	2301      	movs	r3, #1
 800cf52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf54:	e7b5      	b.n	800cec2 <_strtod_l+0x6e2>
 800cf56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf58:	9805      	ldr	r0, [sp, #20]
 800cf5a:	462a      	mov	r2, r5
 800cf5c:	f7ff f9c8 	bl	800c2f0 <__lshift>
 800cf60:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d1d9      	bne.n	800cf1a <_strtod_l+0x73a>
 800cf66:	e65a      	b.n	800cc1e <_strtod_l+0x43e>
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	dd07      	ble.n	800cf7c <_strtod_l+0x79c>
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	9805      	ldr	r0, [sp, #20]
 800cf70:	4632      	mov	r2, r6
 800cf72:	f7ff f9bd 	bl	800c2f0 <__lshift>
 800cf76:	4681      	mov	r9, r0
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d0d8      	beq.n	800cf2e <_strtod_l+0x74e>
 800cf7c:	2f00      	cmp	r7, #0
 800cf7e:	dd08      	ble.n	800cf92 <_strtod_l+0x7b2>
 800cf80:	4641      	mov	r1, r8
 800cf82:	9805      	ldr	r0, [sp, #20]
 800cf84:	463a      	mov	r2, r7
 800cf86:	f7ff f9b3 	bl	800c2f0 <__lshift>
 800cf8a:	4680      	mov	r8, r0
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f43f ae46 	beq.w	800cc1e <_strtod_l+0x43e>
 800cf92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf94:	9805      	ldr	r0, [sp, #20]
 800cf96:	464a      	mov	r2, r9
 800cf98:	f7ff fa32 	bl	800c400 <__mdiff>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f43f ae3d 	beq.w	800cc1e <_strtod_l+0x43e>
 800cfa4:	68c3      	ldr	r3, [r0, #12]
 800cfa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60c3      	str	r3, [r0, #12]
 800cfac:	4641      	mov	r1, r8
 800cfae:	f7ff fa0b 	bl	800c3c8 <__mcmp>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	da46      	bge.n	800d044 <_strtod_l+0x864>
 800cfb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfb8:	ea53 030a 	orrs.w	r3, r3, sl
 800cfbc:	d16c      	bne.n	800d098 <_strtod_l+0x8b8>
 800cfbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d168      	bne.n	800d098 <_strtod_l+0x8b8>
 800cfc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfca:	0d1b      	lsrs	r3, r3, #20
 800cfcc:	051b      	lsls	r3, r3, #20
 800cfce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cfd2:	d961      	bls.n	800d098 <_strtod_l+0x8b8>
 800cfd4:	6963      	ldr	r3, [r4, #20]
 800cfd6:	b913      	cbnz	r3, 800cfde <_strtod_l+0x7fe>
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	dd5c      	ble.n	800d098 <_strtod_l+0x8b8>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	9805      	ldr	r0, [sp, #20]
 800cfe4:	f7ff f984 	bl	800c2f0 <__lshift>
 800cfe8:	4641      	mov	r1, r8
 800cfea:	4604      	mov	r4, r0
 800cfec:	f7ff f9ec 	bl	800c3c8 <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	dd51      	ble.n	800d098 <_strtod_l+0x8b8>
 800cff4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cff8:	9a08      	ldr	r2, [sp, #32]
 800cffa:	0d1b      	lsrs	r3, r3, #20
 800cffc:	051b      	lsls	r3, r3, #20
 800cffe:	2a00      	cmp	r2, #0
 800d000:	d06b      	beq.n	800d0da <_strtod_l+0x8fa>
 800d002:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d006:	d868      	bhi.n	800d0da <_strtod_l+0x8fa>
 800d008:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d00c:	f67f ae9d 	bls.w	800cd4a <_strtod_l+0x56a>
 800d010:	4b0a      	ldr	r3, [pc, #40]	@ (800d03c <_strtod_l+0x85c>)
 800d012:	4650      	mov	r0, sl
 800d014:	4659      	mov	r1, fp
 800d016:	2200      	movs	r2, #0
 800d018:	f7f3 fafe 	bl	8000618 <__aeabi_dmul>
 800d01c:	4b08      	ldr	r3, [pc, #32]	@ (800d040 <_strtod_l+0x860>)
 800d01e:	400b      	ands	r3, r1
 800d020:	4682      	mov	sl, r0
 800d022:	468b      	mov	fp, r1
 800d024:	2b00      	cmp	r3, #0
 800d026:	f47f ae05 	bne.w	800cc34 <_strtod_l+0x454>
 800d02a:	9a05      	ldr	r2, [sp, #20]
 800d02c:	2322      	movs	r3, #34	@ 0x22
 800d02e:	6013      	str	r3, [r2, #0]
 800d030:	e600      	b.n	800cc34 <_strtod_l+0x454>
 800d032:	bf00      	nop
 800d034:	08012608 	.word	0x08012608
 800d038:	fffffc02 	.word	0xfffffc02
 800d03c:	39500000 	.word	0x39500000
 800d040:	7ff00000 	.word	0x7ff00000
 800d044:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d048:	d165      	bne.n	800d116 <_strtod_l+0x936>
 800d04a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d050:	b35a      	cbz	r2, 800d0aa <_strtod_l+0x8ca>
 800d052:	4a9f      	ldr	r2, [pc, #636]	@ (800d2d0 <_strtod_l+0xaf0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d12b      	bne.n	800d0b0 <_strtod_l+0x8d0>
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	4651      	mov	r1, sl
 800d05c:	b303      	cbz	r3, 800d0a0 <_strtod_l+0x8c0>
 800d05e:	4b9d      	ldr	r3, [pc, #628]	@ (800d2d4 <_strtod_l+0xaf4>)
 800d060:	465a      	mov	r2, fp
 800d062:	4013      	ands	r3, r2
 800d064:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d068:	f04f 32ff 	mov.w	r2, #4294967295
 800d06c:	d81b      	bhi.n	800d0a6 <_strtod_l+0x8c6>
 800d06e:	0d1b      	lsrs	r3, r3, #20
 800d070:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d074:	fa02 f303 	lsl.w	r3, r2, r3
 800d078:	4299      	cmp	r1, r3
 800d07a:	d119      	bne.n	800d0b0 <_strtod_l+0x8d0>
 800d07c:	4b96      	ldr	r3, [pc, #600]	@ (800d2d8 <_strtod_l+0xaf8>)
 800d07e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d080:	429a      	cmp	r2, r3
 800d082:	d102      	bne.n	800d08a <_strtod_l+0x8aa>
 800d084:	3101      	adds	r1, #1
 800d086:	f43f adca 	beq.w	800cc1e <_strtod_l+0x43e>
 800d08a:	4b92      	ldr	r3, [pc, #584]	@ (800d2d4 <_strtod_l+0xaf4>)
 800d08c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d08e:	401a      	ands	r2, r3
 800d090:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d094:	f04f 0a00 	mov.w	sl, #0
 800d098:	9b08      	ldr	r3, [sp, #32]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1b8      	bne.n	800d010 <_strtod_l+0x830>
 800d09e:	e5c9      	b.n	800cc34 <_strtod_l+0x454>
 800d0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a4:	e7e8      	b.n	800d078 <_strtod_l+0x898>
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	e7e6      	b.n	800d078 <_strtod_l+0x898>
 800d0aa:	ea53 030a 	orrs.w	r3, r3, sl
 800d0ae:	d0a1      	beq.n	800cff4 <_strtod_l+0x814>
 800d0b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0b2:	b1db      	cbz	r3, 800d0ec <_strtod_l+0x90c>
 800d0b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0b6:	4213      	tst	r3, r2
 800d0b8:	d0ee      	beq.n	800d098 <_strtod_l+0x8b8>
 800d0ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0bc:	9a08      	ldr	r2, [sp, #32]
 800d0be:	4650      	mov	r0, sl
 800d0c0:	4659      	mov	r1, fp
 800d0c2:	b1bb      	cbz	r3, 800d0f4 <_strtod_l+0x914>
 800d0c4:	f7ff fb6e 	bl	800c7a4 <sulp>
 800d0c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0cc:	ec53 2b10 	vmov	r2, r3, d0
 800d0d0:	f7f3 f8ec 	bl	80002ac <__adddf3>
 800d0d4:	4682      	mov	sl, r0
 800d0d6:	468b      	mov	fp, r1
 800d0d8:	e7de      	b.n	800d098 <_strtod_l+0x8b8>
 800d0da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d0de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d0e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d0e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d0ea:	e7d5      	b.n	800d098 <_strtod_l+0x8b8>
 800d0ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0ee:	ea13 0f0a 	tst.w	r3, sl
 800d0f2:	e7e1      	b.n	800d0b8 <_strtod_l+0x8d8>
 800d0f4:	f7ff fb56 	bl	800c7a4 <sulp>
 800d0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0fc:	ec53 2b10 	vmov	r2, r3, d0
 800d100:	f7f3 f8d2 	bl	80002a8 <__aeabi_dsub>
 800d104:	2200      	movs	r2, #0
 800d106:	2300      	movs	r3, #0
 800d108:	4682      	mov	sl, r0
 800d10a:	468b      	mov	fp, r1
 800d10c:	f7f3 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 800d110:	2800      	cmp	r0, #0
 800d112:	d0c1      	beq.n	800d098 <_strtod_l+0x8b8>
 800d114:	e619      	b.n	800cd4a <_strtod_l+0x56a>
 800d116:	4641      	mov	r1, r8
 800d118:	4620      	mov	r0, r4
 800d11a:	f7ff facd 	bl	800c6b8 <__ratio>
 800d11e:	ec57 6b10 	vmov	r6, r7, d0
 800d122:	2200      	movs	r2, #0
 800d124:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d128:	4630      	mov	r0, r6
 800d12a:	4639      	mov	r1, r7
 800d12c:	f7f3 fcf0 	bl	8000b10 <__aeabi_dcmple>
 800d130:	2800      	cmp	r0, #0
 800d132:	d06f      	beq.n	800d214 <_strtod_l+0xa34>
 800d134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d136:	2b00      	cmp	r3, #0
 800d138:	d17a      	bne.n	800d230 <_strtod_l+0xa50>
 800d13a:	f1ba 0f00 	cmp.w	sl, #0
 800d13e:	d158      	bne.n	800d1f2 <_strtod_l+0xa12>
 800d140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d146:	2b00      	cmp	r3, #0
 800d148:	d15a      	bne.n	800d200 <_strtod_l+0xa20>
 800d14a:	4b64      	ldr	r3, [pc, #400]	@ (800d2dc <_strtod_l+0xafc>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	4630      	mov	r0, r6
 800d150:	4639      	mov	r1, r7
 800d152:	f7f3 fcd3 	bl	8000afc <__aeabi_dcmplt>
 800d156:	2800      	cmp	r0, #0
 800d158:	d159      	bne.n	800d20e <_strtod_l+0xa2e>
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	4b60      	ldr	r3, [pc, #384]	@ (800d2e0 <_strtod_l+0xb00>)
 800d160:	2200      	movs	r2, #0
 800d162:	f7f3 fa59 	bl	8000618 <__aeabi_dmul>
 800d166:	4606      	mov	r6, r0
 800d168:	460f      	mov	r7, r1
 800d16a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d16e:	9606      	str	r6, [sp, #24]
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d176:	4d57      	ldr	r5, [pc, #348]	@ (800d2d4 <_strtod_l+0xaf4>)
 800d178:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d17c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d17e:	401d      	ands	r5, r3
 800d180:	4b58      	ldr	r3, [pc, #352]	@ (800d2e4 <_strtod_l+0xb04>)
 800d182:	429d      	cmp	r5, r3
 800d184:	f040 80b2 	bne.w	800d2ec <_strtod_l+0xb0c>
 800d188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d18a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d18e:	ec4b ab10 	vmov	d0, sl, fp
 800d192:	f7ff f9c9 	bl	800c528 <__ulp>
 800d196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d19a:	ec51 0b10 	vmov	r0, r1, d0
 800d19e:	f7f3 fa3b 	bl	8000618 <__aeabi_dmul>
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	465b      	mov	r3, fp
 800d1a6:	f7f3 f881 	bl	80002ac <__adddf3>
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4949      	ldr	r1, [pc, #292]	@ (800d2d4 <_strtod_l+0xaf4>)
 800d1ae:	4a4e      	ldr	r2, [pc, #312]	@ (800d2e8 <_strtod_l+0xb08>)
 800d1b0:	4019      	ands	r1, r3
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	d942      	bls.n	800d23e <_strtod_l+0xa5e>
 800d1b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1ba:	4b47      	ldr	r3, [pc, #284]	@ (800d2d8 <_strtod_l+0xaf8>)
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d103      	bne.n	800d1c8 <_strtod_l+0x9e8>
 800d1c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	f43f ad2b 	beq.w	800cc1e <_strtod_l+0x43e>
 800d1c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d2d8 <_strtod_l+0xaf8>
 800d1cc:	f04f 3aff 	mov.w	sl, #4294967295
 800d1d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d2:	9805      	ldr	r0, [sp, #20]
 800d1d4:	f7fe fe74 	bl	800bec0 <_Bfree>
 800d1d8:	9805      	ldr	r0, [sp, #20]
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7fe fe70 	bl	800bec0 <_Bfree>
 800d1e0:	9805      	ldr	r0, [sp, #20]
 800d1e2:	4641      	mov	r1, r8
 800d1e4:	f7fe fe6c 	bl	800bec0 <_Bfree>
 800d1e8:	9805      	ldr	r0, [sp, #20]
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	f7fe fe68 	bl	800bec0 <_Bfree>
 800d1f0:	e618      	b.n	800ce24 <_strtod_l+0x644>
 800d1f2:	f1ba 0f01 	cmp.w	sl, #1
 800d1f6:	d103      	bne.n	800d200 <_strtod_l+0xa20>
 800d1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f43f ada5 	beq.w	800cd4a <_strtod_l+0x56a>
 800d200:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d2b0 <_strtod_l+0xad0>
 800d204:	4f35      	ldr	r7, [pc, #212]	@ (800d2dc <_strtod_l+0xafc>)
 800d206:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d20a:	2600      	movs	r6, #0
 800d20c:	e7b1      	b.n	800d172 <_strtod_l+0x992>
 800d20e:	4f34      	ldr	r7, [pc, #208]	@ (800d2e0 <_strtod_l+0xb00>)
 800d210:	2600      	movs	r6, #0
 800d212:	e7aa      	b.n	800d16a <_strtod_l+0x98a>
 800d214:	4b32      	ldr	r3, [pc, #200]	@ (800d2e0 <_strtod_l+0xb00>)
 800d216:	4630      	mov	r0, r6
 800d218:	4639      	mov	r1, r7
 800d21a:	2200      	movs	r2, #0
 800d21c:	f7f3 f9fc 	bl	8000618 <__aeabi_dmul>
 800d220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d222:	4606      	mov	r6, r0
 800d224:	460f      	mov	r7, r1
 800d226:	2b00      	cmp	r3, #0
 800d228:	d09f      	beq.n	800d16a <_strtod_l+0x98a>
 800d22a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d22e:	e7a0      	b.n	800d172 <_strtod_l+0x992>
 800d230:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d2b8 <_strtod_l+0xad8>
 800d234:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d238:	ec57 6b17 	vmov	r6, r7, d7
 800d23c:	e799      	b.n	800d172 <_strtod_l+0x992>
 800d23e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d242:	9b08      	ldr	r3, [sp, #32]
 800d244:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1c1      	bne.n	800d1d0 <_strtod_l+0x9f0>
 800d24c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d250:	0d1b      	lsrs	r3, r3, #20
 800d252:	051b      	lsls	r3, r3, #20
 800d254:	429d      	cmp	r5, r3
 800d256:	d1bb      	bne.n	800d1d0 <_strtod_l+0x9f0>
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 fd3c 	bl	8000cd8 <__aeabi_d2lz>
 800d260:	f7f3 f9ac 	bl	80005bc <__aeabi_l2d>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f3 f81c 	bl	80002a8 <__aeabi_dsub>
 800d270:	460b      	mov	r3, r1
 800d272:	4602      	mov	r2, r0
 800d274:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d278:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27e:	ea46 060a 	orr.w	r6, r6, sl
 800d282:	431e      	orrs	r6, r3
 800d284:	d06f      	beq.n	800d366 <_strtod_l+0xb86>
 800d286:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2c0 <_strtod_l+0xae0>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	f7f3 fc36 	bl	8000afc <__aeabi_dcmplt>
 800d290:	2800      	cmp	r0, #0
 800d292:	f47f accf 	bne.w	800cc34 <_strtod_l+0x454>
 800d296:	a30c      	add	r3, pc, #48	@ (adr r3, 800d2c8 <_strtod_l+0xae8>)
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2a0:	f7f3 fc4a 	bl	8000b38 <__aeabi_dcmpgt>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d093      	beq.n	800d1d0 <_strtod_l+0x9f0>
 800d2a8:	e4c4      	b.n	800cc34 <_strtod_l+0x454>
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	00000000 	.word	0x00000000
 800d2b4:	bff00000 	.word	0xbff00000
 800d2b8:	00000000 	.word	0x00000000
 800d2bc:	3ff00000 	.word	0x3ff00000
 800d2c0:	94a03595 	.word	0x94a03595
 800d2c4:	3fdfffff 	.word	0x3fdfffff
 800d2c8:	35afe535 	.word	0x35afe535
 800d2cc:	3fe00000 	.word	0x3fe00000
 800d2d0:	000fffff 	.word	0x000fffff
 800d2d4:	7ff00000 	.word	0x7ff00000
 800d2d8:	7fefffff 	.word	0x7fefffff
 800d2dc:	3ff00000 	.word	0x3ff00000
 800d2e0:	3fe00000 	.word	0x3fe00000
 800d2e4:	7fe00000 	.word	0x7fe00000
 800d2e8:	7c9fffff 	.word	0x7c9fffff
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	b323      	cbz	r3, 800d33a <_strtod_l+0xb5a>
 800d2f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d2f4:	d821      	bhi.n	800d33a <_strtod_l+0xb5a>
 800d2f6:	a328      	add	r3, pc, #160	@ (adr r3, 800d398 <_strtod_l+0xbb8>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4639      	mov	r1, r7
 800d300:	f7f3 fc06 	bl	8000b10 <__aeabi_dcmple>
 800d304:	b1a0      	cbz	r0, 800d330 <_strtod_l+0xb50>
 800d306:	4639      	mov	r1, r7
 800d308:	4630      	mov	r0, r6
 800d30a:	f7f3 fc5d 	bl	8000bc8 <__aeabi_d2uiz>
 800d30e:	2801      	cmp	r0, #1
 800d310:	bf38      	it	cc
 800d312:	2001      	movcc	r0, #1
 800d314:	f7f3 f906 	bl	8000524 <__aeabi_ui2d>
 800d318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	b9fb      	cbnz	r3, 800d360 <_strtod_l+0xb80>
 800d320:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d324:	9014      	str	r0, [sp, #80]	@ 0x50
 800d326:	9315      	str	r3, [sp, #84]	@ 0x54
 800d328:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d32c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d330:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d332:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d336:	1b5b      	subs	r3, r3, r5
 800d338:	9311      	str	r3, [sp, #68]	@ 0x44
 800d33a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d33e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d342:	f7ff f8f1 	bl	800c528 <__ulp>
 800d346:	4650      	mov	r0, sl
 800d348:	ec53 2b10 	vmov	r2, r3, d0
 800d34c:	4659      	mov	r1, fp
 800d34e:	f7f3 f963 	bl	8000618 <__aeabi_dmul>
 800d352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d356:	f7f2 ffa9 	bl	80002ac <__adddf3>
 800d35a:	4682      	mov	sl, r0
 800d35c:	468b      	mov	fp, r1
 800d35e:	e770      	b.n	800d242 <_strtod_l+0xa62>
 800d360:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d364:	e7e0      	b.n	800d328 <_strtod_l+0xb48>
 800d366:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3a0 <_strtod_l+0xbc0>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f7f3 fbc6 	bl	8000afc <__aeabi_dcmplt>
 800d370:	e798      	b.n	800d2a4 <_strtod_l+0xac4>
 800d372:	2300      	movs	r3, #0
 800d374:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d376:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	f7ff ba6d 	b.w	800c85a <_strtod_l+0x7a>
 800d380:	2a65      	cmp	r2, #101	@ 0x65
 800d382:	f43f ab66 	beq.w	800ca52 <_strtod_l+0x272>
 800d386:	2a45      	cmp	r2, #69	@ 0x45
 800d388:	f43f ab63 	beq.w	800ca52 <_strtod_l+0x272>
 800d38c:	2301      	movs	r3, #1
 800d38e:	f7ff bb9e 	b.w	800cace <_strtod_l+0x2ee>
 800d392:	bf00      	nop
 800d394:	f3af 8000 	nop.w
 800d398:	ffc00000 	.word	0xffc00000
 800d39c:	41dfffff 	.word	0x41dfffff
 800d3a0:	94a03595 	.word	0x94a03595
 800d3a4:	3fcfffff 	.word	0x3fcfffff

0800d3a8 <_strtod_r>:
 800d3a8:	4b01      	ldr	r3, [pc, #4]	@ (800d3b0 <_strtod_r+0x8>)
 800d3aa:	f7ff ba19 	b.w	800c7e0 <_strtod_l>
 800d3ae:	bf00      	nop
 800d3b0:	20000154 	.word	0x20000154

0800d3b4 <_strtol_l.constprop.0>:
 800d3b4:	2b24      	cmp	r3, #36	@ 0x24
 800d3b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ba:	4686      	mov	lr, r0
 800d3bc:	4690      	mov	r8, r2
 800d3be:	d801      	bhi.n	800d3c4 <_strtol_l.constprop.0+0x10>
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d106      	bne.n	800d3d2 <_strtol_l.constprop.0+0x1e>
 800d3c4:	f000 fab2 	bl	800d92c <__errno>
 800d3c8:	2316      	movs	r3, #22
 800d3ca:	6003      	str	r3, [r0, #0]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d2:	4834      	ldr	r0, [pc, #208]	@ (800d4a4 <_strtol_l.constprop.0+0xf0>)
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	462a      	mov	r2, r5
 800d3d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3dc:	5d06      	ldrb	r6, [r0, r4]
 800d3de:	f016 0608 	ands.w	r6, r6, #8
 800d3e2:	d1f8      	bne.n	800d3d6 <_strtol_l.constprop.0+0x22>
 800d3e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d3e6:	d12d      	bne.n	800d444 <_strtol_l.constprop.0+0x90>
 800d3e8:	782c      	ldrb	r4, [r5, #0]
 800d3ea:	2601      	movs	r6, #1
 800d3ec:	1c95      	adds	r5, r2, #2
 800d3ee:	f033 0210 	bics.w	r2, r3, #16
 800d3f2:	d109      	bne.n	800d408 <_strtol_l.constprop.0+0x54>
 800d3f4:	2c30      	cmp	r4, #48	@ 0x30
 800d3f6:	d12a      	bne.n	800d44e <_strtol_l.constprop.0+0x9a>
 800d3f8:	782a      	ldrb	r2, [r5, #0]
 800d3fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d3fe:	2a58      	cmp	r2, #88	@ 0x58
 800d400:	d125      	bne.n	800d44e <_strtol_l.constprop.0+0x9a>
 800d402:	786c      	ldrb	r4, [r5, #1]
 800d404:	2310      	movs	r3, #16
 800d406:	3502      	adds	r5, #2
 800d408:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d40c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d410:	2200      	movs	r2, #0
 800d412:	fbbc f9f3 	udiv	r9, ip, r3
 800d416:	4610      	mov	r0, r2
 800d418:	fb03 ca19 	mls	sl, r3, r9, ip
 800d41c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d420:	2f09      	cmp	r7, #9
 800d422:	d81b      	bhi.n	800d45c <_strtol_l.constprop.0+0xa8>
 800d424:	463c      	mov	r4, r7
 800d426:	42a3      	cmp	r3, r4
 800d428:	dd27      	ble.n	800d47a <_strtol_l.constprop.0+0xc6>
 800d42a:	1c57      	adds	r7, r2, #1
 800d42c:	d007      	beq.n	800d43e <_strtol_l.constprop.0+0x8a>
 800d42e:	4581      	cmp	r9, r0
 800d430:	d320      	bcc.n	800d474 <_strtol_l.constprop.0+0xc0>
 800d432:	d101      	bne.n	800d438 <_strtol_l.constprop.0+0x84>
 800d434:	45a2      	cmp	sl, r4
 800d436:	db1d      	blt.n	800d474 <_strtol_l.constprop.0+0xc0>
 800d438:	fb00 4003 	mla	r0, r0, r3, r4
 800d43c:	2201      	movs	r2, #1
 800d43e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d442:	e7eb      	b.n	800d41c <_strtol_l.constprop.0+0x68>
 800d444:	2c2b      	cmp	r4, #43	@ 0x2b
 800d446:	bf04      	itt	eq
 800d448:	782c      	ldrbeq	r4, [r5, #0]
 800d44a:	1c95      	addeq	r5, r2, #2
 800d44c:	e7cf      	b.n	800d3ee <_strtol_l.constprop.0+0x3a>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1da      	bne.n	800d408 <_strtol_l.constprop.0+0x54>
 800d452:	2c30      	cmp	r4, #48	@ 0x30
 800d454:	bf0c      	ite	eq
 800d456:	2308      	moveq	r3, #8
 800d458:	230a      	movne	r3, #10
 800d45a:	e7d5      	b.n	800d408 <_strtol_l.constprop.0+0x54>
 800d45c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d460:	2f19      	cmp	r7, #25
 800d462:	d801      	bhi.n	800d468 <_strtol_l.constprop.0+0xb4>
 800d464:	3c37      	subs	r4, #55	@ 0x37
 800d466:	e7de      	b.n	800d426 <_strtol_l.constprop.0+0x72>
 800d468:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d46c:	2f19      	cmp	r7, #25
 800d46e:	d804      	bhi.n	800d47a <_strtol_l.constprop.0+0xc6>
 800d470:	3c57      	subs	r4, #87	@ 0x57
 800d472:	e7d8      	b.n	800d426 <_strtol_l.constprop.0+0x72>
 800d474:	f04f 32ff 	mov.w	r2, #4294967295
 800d478:	e7e1      	b.n	800d43e <_strtol_l.constprop.0+0x8a>
 800d47a:	1c53      	adds	r3, r2, #1
 800d47c:	d108      	bne.n	800d490 <_strtol_l.constprop.0+0xdc>
 800d47e:	2322      	movs	r3, #34	@ 0x22
 800d480:	f8ce 3000 	str.w	r3, [lr]
 800d484:	4660      	mov	r0, ip
 800d486:	f1b8 0f00 	cmp.w	r8, #0
 800d48a:	d0a0      	beq.n	800d3ce <_strtol_l.constprop.0+0x1a>
 800d48c:	1e69      	subs	r1, r5, #1
 800d48e:	e006      	b.n	800d49e <_strtol_l.constprop.0+0xea>
 800d490:	b106      	cbz	r6, 800d494 <_strtol_l.constprop.0+0xe0>
 800d492:	4240      	negs	r0, r0
 800d494:	f1b8 0f00 	cmp.w	r8, #0
 800d498:	d099      	beq.n	800d3ce <_strtol_l.constprop.0+0x1a>
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	d1f6      	bne.n	800d48c <_strtol_l.constprop.0+0xd8>
 800d49e:	f8c8 1000 	str.w	r1, [r8]
 800d4a2:	e794      	b.n	800d3ce <_strtol_l.constprop.0+0x1a>
 800d4a4:	08012631 	.word	0x08012631

0800d4a8 <_strtol_r>:
 800d4a8:	f7ff bf84 	b.w	800d3b4 <_strtol_l.constprop.0>

0800d4ac <__ssputs_r>:
 800d4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b0:	688e      	ldr	r6, [r1, #8]
 800d4b2:	461f      	mov	r7, r3
 800d4b4:	42be      	cmp	r6, r7
 800d4b6:	680b      	ldr	r3, [r1, #0]
 800d4b8:	4682      	mov	sl, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	4690      	mov	r8, r2
 800d4be:	d82d      	bhi.n	800d51c <__ssputs_r+0x70>
 800d4c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4c8:	d026      	beq.n	800d518 <__ssputs_r+0x6c>
 800d4ca:	6965      	ldr	r5, [r4, #20]
 800d4cc:	6909      	ldr	r1, [r1, #16]
 800d4ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4d2:	eba3 0901 	sub.w	r9, r3, r1
 800d4d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4da:	1c7b      	adds	r3, r7, #1
 800d4dc:	444b      	add	r3, r9
 800d4de:	106d      	asrs	r5, r5, #1
 800d4e0:	429d      	cmp	r5, r3
 800d4e2:	bf38      	it	cc
 800d4e4:	461d      	movcc	r5, r3
 800d4e6:	0553      	lsls	r3, r2, #21
 800d4e8:	d527      	bpl.n	800d53a <__ssputs_r+0x8e>
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f7fe fc1c 	bl	800bd28 <_malloc_r>
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	b360      	cbz	r0, 800d54e <__ssputs_r+0xa2>
 800d4f4:	6921      	ldr	r1, [r4, #16]
 800d4f6:	464a      	mov	r2, r9
 800d4f8:	f000 fa1e 	bl	800d938 <memcpy>
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d506:	81a3      	strh	r3, [r4, #12]
 800d508:	6126      	str	r6, [r4, #16]
 800d50a:	6165      	str	r5, [r4, #20]
 800d50c:	444e      	add	r6, r9
 800d50e:	eba5 0509 	sub.w	r5, r5, r9
 800d512:	6026      	str	r6, [r4, #0]
 800d514:	60a5      	str	r5, [r4, #8]
 800d516:	463e      	mov	r6, r7
 800d518:	42be      	cmp	r6, r7
 800d51a:	d900      	bls.n	800d51e <__ssputs_r+0x72>
 800d51c:	463e      	mov	r6, r7
 800d51e:	6820      	ldr	r0, [r4, #0]
 800d520:	4632      	mov	r2, r6
 800d522:	4641      	mov	r1, r8
 800d524:	f000 f9c6 	bl	800d8b4 <memmove>
 800d528:	68a3      	ldr	r3, [r4, #8]
 800d52a:	1b9b      	subs	r3, r3, r6
 800d52c:	60a3      	str	r3, [r4, #8]
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	4433      	add	r3, r6
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	2000      	movs	r0, #0
 800d536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53a:	462a      	mov	r2, r5
 800d53c:	f000 fd91 	bl	800e062 <_realloc_r>
 800d540:	4606      	mov	r6, r0
 800d542:	2800      	cmp	r0, #0
 800d544:	d1e0      	bne.n	800d508 <__ssputs_r+0x5c>
 800d546:	6921      	ldr	r1, [r4, #16]
 800d548:	4650      	mov	r0, sl
 800d54a:	f7fe fb79 	bl	800bc40 <_free_r>
 800d54e:	230c      	movs	r3, #12
 800d550:	f8ca 3000 	str.w	r3, [sl]
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d55a:	81a3      	strh	r3, [r4, #12]
 800d55c:	f04f 30ff 	mov.w	r0, #4294967295
 800d560:	e7e9      	b.n	800d536 <__ssputs_r+0x8a>
	...

0800d564 <_svfiprintf_r>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	4698      	mov	r8, r3
 800d56a:	898b      	ldrh	r3, [r1, #12]
 800d56c:	061b      	lsls	r3, r3, #24
 800d56e:	b09d      	sub	sp, #116	@ 0x74
 800d570:	4607      	mov	r7, r0
 800d572:	460d      	mov	r5, r1
 800d574:	4614      	mov	r4, r2
 800d576:	d510      	bpl.n	800d59a <_svfiprintf_r+0x36>
 800d578:	690b      	ldr	r3, [r1, #16]
 800d57a:	b973      	cbnz	r3, 800d59a <_svfiprintf_r+0x36>
 800d57c:	2140      	movs	r1, #64	@ 0x40
 800d57e:	f7fe fbd3 	bl	800bd28 <_malloc_r>
 800d582:	6028      	str	r0, [r5, #0]
 800d584:	6128      	str	r0, [r5, #16]
 800d586:	b930      	cbnz	r0, 800d596 <_svfiprintf_r+0x32>
 800d588:	230c      	movs	r3, #12
 800d58a:	603b      	str	r3, [r7, #0]
 800d58c:	f04f 30ff 	mov.w	r0, #4294967295
 800d590:	b01d      	add	sp, #116	@ 0x74
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d596:	2340      	movs	r3, #64	@ 0x40
 800d598:	616b      	str	r3, [r5, #20]
 800d59a:	2300      	movs	r3, #0
 800d59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d59e:	2320      	movs	r3, #32
 800d5a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5a8:	2330      	movs	r3, #48	@ 0x30
 800d5aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d748 <_svfiprintf_r+0x1e4>
 800d5ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5b2:	f04f 0901 	mov.w	r9, #1
 800d5b6:	4623      	mov	r3, r4
 800d5b8:	469a      	mov	sl, r3
 800d5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5be:	b10a      	cbz	r2, 800d5c4 <_svfiprintf_r+0x60>
 800d5c0:	2a25      	cmp	r2, #37	@ 0x25
 800d5c2:	d1f9      	bne.n	800d5b8 <_svfiprintf_r+0x54>
 800d5c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d5c8:	d00b      	beq.n	800d5e2 <_svfiprintf_r+0x7e>
 800d5ca:	465b      	mov	r3, fp
 800d5cc:	4622      	mov	r2, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	f7ff ff6b 	bl	800d4ac <__ssputs_r>
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	f000 80a7 	beq.w	800d72a <_svfiprintf_r+0x1c6>
 800d5dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5de:	445a      	add	r2, fp
 800d5e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f000 809f 	beq.w	800d72a <_svfiprintf_r+0x1c6>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f6:	f10a 0a01 	add.w	sl, sl, #1
 800d5fa:	9304      	str	r3, [sp, #16]
 800d5fc:	9307      	str	r3, [sp, #28]
 800d5fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d602:	931a      	str	r3, [sp, #104]	@ 0x68
 800d604:	4654      	mov	r4, sl
 800d606:	2205      	movs	r2, #5
 800d608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60c:	484e      	ldr	r0, [pc, #312]	@ (800d748 <_svfiprintf_r+0x1e4>)
 800d60e:	f7f2 fdef 	bl	80001f0 <memchr>
 800d612:	9a04      	ldr	r2, [sp, #16]
 800d614:	b9d8      	cbnz	r0, 800d64e <_svfiprintf_r+0xea>
 800d616:	06d0      	lsls	r0, r2, #27
 800d618:	bf44      	itt	mi
 800d61a:	2320      	movmi	r3, #32
 800d61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d620:	0711      	lsls	r1, r2, #28
 800d622:	bf44      	itt	mi
 800d624:	232b      	movmi	r3, #43	@ 0x2b
 800d626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d62a:	f89a 3000 	ldrb.w	r3, [sl]
 800d62e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d630:	d015      	beq.n	800d65e <_svfiprintf_r+0xfa>
 800d632:	9a07      	ldr	r2, [sp, #28]
 800d634:	4654      	mov	r4, sl
 800d636:	2000      	movs	r0, #0
 800d638:	f04f 0c0a 	mov.w	ip, #10
 800d63c:	4621      	mov	r1, r4
 800d63e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d642:	3b30      	subs	r3, #48	@ 0x30
 800d644:	2b09      	cmp	r3, #9
 800d646:	d94b      	bls.n	800d6e0 <_svfiprintf_r+0x17c>
 800d648:	b1b0      	cbz	r0, 800d678 <_svfiprintf_r+0x114>
 800d64a:	9207      	str	r2, [sp, #28]
 800d64c:	e014      	b.n	800d678 <_svfiprintf_r+0x114>
 800d64e:	eba0 0308 	sub.w	r3, r0, r8
 800d652:	fa09 f303 	lsl.w	r3, r9, r3
 800d656:	4313      	orrs	r3, r2
 800d658:	9304      	str	r3, [sp, #16]
 800d65a:	46a2      	mov	sl, r4
 800d65c:	e7d2      	b.n	800d604 <_svfiprintf_r+0xa0>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	1d19      	adds	r1, r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	9103      	str	r1, [sp, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfbb      	ittet	lt
 800d66a:	425b      	neglt	r3, r3
 800d66c:	f042 0202 	orrlt.w	r2, r2, #2
 800d670:	9307      	strge	r3, [sp, #28]
 800d672:	9307      	strlt	r3, [sp, #28]
 800d674:	bfb8      	it	lt
 800d676:	9204      	strlt	r2, [sp, #16]
 800d678:	7823      	ldrb	r3, [r4, #0]
 800d67a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d67c:	d10a      	bne.n	800d694 <_svfiprintf_r+0x130>
 800d67e:	7863      	ldrb	r3, [r4, #1]
 800d680:	2b2a      	cmp	r3, #42	@ 0x2a
 800d682:	d132      	bne.n	800d6ea <_svfiprintf_r+0x186>
 800d684:	9b03      	ldr	r3, [sp, #12]
 800d686:	1d1a      	adds	r2, r3, #4
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	9203      	str	r2, [sp, #12]
 800d68c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d690:	3402      	adds	r4, #2
 800d692:	9305      	str	r3, [sp, #20]
 800d694:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d758 <_svfiprintf_r+0x1f4>
 800d698:	7821      	ldrb	r1, [r4, #0]
 800d69a:	2203      	movs	r2, #3
 800d69c:	4650      	mov	r0, sl
 800d69e:	f7f2 fda7 	bl	80001f0 <memchr>
 800d6a2:	b138      	cbz	r0, 800d6b4 <_svfiprintf_r+0x150>
 800d6a4:	9b04      	ldr	r3, [sp, #16]
 800d6a6:	eba0 000a 	sub.w	r0, r0, sl
 800d6aa:	2240      	movs	r2, #64	@ 0x40
 800d6ac:	4082      	lsls	r2, r0
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	3401      	adds	r4, #1
 800d6b2:	9304      	str	r3, [sp, #16]
 800d6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b8:	4824      	ldr	r0, [pc, #144]	@ (800d74c <_svfiprintf_r+0x1e8>)
 800d6ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6be:	2206      	movs	r2, #6
 800d6c0:	f7f2 fd96 	bl	80001f0 <memchr>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d036      	beq.n	800d736 <_svfiprintf_r+0x1d2>
 800d6c8:	4b21      	ldr	r3, [pc, #132]	@ (800d750 <_svfiprintf_r+0x1ec>)
 800d6ca:	bb1b      	cbnz	r3, 800d714 <_svfiprintf_r+0x1b0>
 800d6cc:	9b03      	ldr	r3, [sp, #12]
 800d6ce:	3307      	adds	r3, #7
 800d6d0:	f023 0307 	bic.w	r3, r3, #7
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	9303      	str	r3, [sp, #12]
 800d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6da:	4433      	add	r3, r6
 800d6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6de:	e76a      	b.n	800d5b6 <_svfiprintf_r+0x52>
 800d6e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	e7a8      	b.n	800d63c <_svfiprintf_r+0xd8>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	3401      	adds	r4, #1
 800d6ee:	9305      	str	r3, [sp, #20]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	f04f 0c0a 	mov.w	ip, #10
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6fc:	3a30      	subs	r2, #48	@ 0x30
 800d6fe:	2a09      	cmp	r2, #9
 800d700:	d903      	bls.n	800d70a <_svfiprintf_r+0x1a6>
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0c6      	beq.n	800d694 <_svfiprintf_r+0x130>
 800d706:	9105      	str	r1, [sp, #20]
 800d708:	e7c4      	b.n	800d694 <_svfiprintf_r+0x130>
 800d70a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d70e:	4604      	mov	r4, r0
 800d710:	2301      	movs	r3, #1
 800d712:	e7f0      	b.n	800d6f6 <_svfiprintf_r+0x192>
 800d714:	ab03      	add	r3, sp, #12
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	462a      	mov	r2, r5
 800d71a:	4b0e      	ldr	r3, [pc, #56]	@ (800d754 <_svfiprintf_r+0x1f0>)
 800d71c:	a904      	add	r1, sp, #16
 800d71e:	4638      	mov	r0, r7
 800d720:	f7fc fc9c 	bl	800a05c <_printf_float>
 800d724:	1c42      	adds	r2, r0, #1
 800d726:	4606      	mov	r6, r0
 800d728:	d1d6      	bne.n	800d6d8 <_svfiprintf_r+0x174>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	065b      	lsls	r3, r3, #25
 800d72e:	f53f af2d 	bmi.w	800d58c <_svfiprintf_r+0x28>
 800d732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d734:	e72c      	b.n	800d590 <_svfiprintf_r+0x2c>
 800d736:	ab03      	add	r3, sp, #12
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	462a      	mov	r2, r5
 800d73c:	4b05      	ldr	r3, [pc, #20]	@ (800d754 <_svfiprintf_r+0x1f0>)
 800d73e:	a904      	add	r1, sp, #16
 800d740:	4638      	mov	r0, r7
 800d742:	f7fc ff23 	bl	800a58c <_printf_i>
 800d746:	e7ed      	b.n	800d724 <_svfiprintf_r+0x1c0>
 800d748:	08012731 	.word	0x08012731
 800d74c:	0801273b 	.word	0x0801273b
 800d750:	0800a05d 	.word	0x0800a05d
 800d754:	0800d4ad 	.word	0x0800d4ad
 800d758:	08012737 	.word	0x08012737

0800d75c <__sflush_r>:
 800d75c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d764:	0716      	lsls	r6, r2, #28
 800d766:	4605      	mov	r5, r0
 800d768:	460c      	mov	r4, r1
 800d76a:	d454      	bmi.n	800d816 <__sflush_r+0xba>
 800d76c:	684b      	ldr	r3, [r1, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dc02      	bgt.n	800d778 <__sflush_r+0x1c>
 800d772:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d774:	2b00      	cmp	r3, #0
 800d776:	dd48      	ble.n	800d80a <__sflush_r+0xae>
 800d778:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d77a:	2e00      	cmp	r6, #0
 800d77c:	d045      	beq.n	800d80a <__sflush_r+0xae>
 800d77e:	2300      	movs	r3, #0
 800d780:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d784:	682f      	ldr	r7, [r5, #0]
 800d786:	6a21      	ldr	r1, [r4, #32]
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	d030      	beq.n	800d7ee <__sflush_r+0x92>
 800d78c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	0759      	lsls	r1, r3, #29
 800d792:	d505      	bpl.n	800d7a0 <__sflush_r+0x44>
 800d794:	6863      	ldr	r3, [r4, #4]
 800d796:	1ad2      	subs	r2, r2, r3
 800d798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d79a:	b10b      	cbz	r3, 800d7a0 <__sflush_r+0x44>
 800d79c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7a4:	6a21      	ldr	r1, [r4, #32]
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	47b0      	blx	r6
 800d7aa:	1c43      	adds	r3, r0, #1
 800d7ac:	89a3      	ldrh	r3, [r4, #12]
 800d7ae:	d106      	bne.n	800d7be <__sflush_r+0x62>
 800d7b0:	6829      	ldr	r1, [r5, #0]
 800d7b2:	291d      	cmp	r1, #29
 800d7b4:	d82b      	bhi.n	800d80e <__sflush_r+0xb2>
 800d7b6:	4a2a      	ldr	r2, [pc, #168]	@ (800d860 <__sflush_r+0x104>)
 800d7b8:	410a      	asrs	r2, r1
 800d7ba:	07d6      	lsls	r6, r2, #31
 800d7bc:	d427      	bmi.n	800d80e <__sflush_r+0xb2>
 800d7be:	2200      	movs	r2, #0
 800d7c0:	6062      	str	r2, [r4, #4]
 800d7c2:	04d9      	lsls	r1, r3, #19
 800d7c4:	6922      	ldr	r2, [r4, #16]
 800d7c6:	6022      	str	r2, [r4, #0]
 800d7c8:	d504      	bpl.n	800d7d4 <__sflush_r+0x78>
 800d7ca:	1c42      	adds	r2, r0, #1
 800d7cc:	d101      	bne.n	800d7d2 <__sflush_r+0x76>
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b903      	cbnz	r3, 800d7d4 <__sflush_r+0x78>
 800d7d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7d6:	602f      	str	r7, [r5, #0]
 800d7d8:	b1b9      	cbz	r1, 800d80a <__sflush_r+0xae>
 800d7da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7de:	4299      	cmp	r1, r3
 800d7e0:	d002      	beq.n	800d7e8 <__sflush_r+0x8c>
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f7fe fa2c 	bl	800bc40 <_free_r>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7ec:	e00d      	b.n	800d80a <__sflush_r+0xae>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	47b0      	blx	r6
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	1c50      	adds	r0, r2, #1
 800d7f8:	d1c9      	bne.n	800d78e <__sflush_r+0x32>
 800d7fa:	682b      	ldr	r3, [r5, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0c6      	beq.n	800d78e <__sflush_r+0x32>
 800d800:	2b1d      	cmp	r3, #29
 800d802:	d001      	beq.n	800d808 <__sflush_r+0xac>
 800d804:	2b16      	cmp	r3, #22
 800d806:	d11e      	bne.n	800d846 <__sflush_r+0xea>
 800d808:	602f      	str	r7, [r5, #0]
 800d80a:	2000      	movs	r0, #0
 800d80c:	e022      	b.n	800d854 <__sflush_r+0xf8>
 800d80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d812:	b21b      	sxth	r3, r3
 800d814:	e01b      	b.n	800d84e <__sflush_r+0xf2>
 800d816:	690f      	ldr	r7, [r1, #16]
 800d818:	2f00      	cmp	r7, #0
 800d81a:	d0f6      	beq.n	800d80a <__sflush_r+0xae>
 800d81c:	0793      	lsls	r3, r2, #30
 800d81e:	680e      	ldr	r6, [r1, #0]
 800d820:	bf08      	it	eq
 800d822:	694b      	ldreq	r3, [r1, #20]
 800d824:	600f      	str	r7, [r1, #0]
 800d826:	bf18      	it	ne
 800d828:	2300      	movne	r3, #0
 800d82a:	eba6 0807 	sub.w	r8, r6, r7
 800d82e:	608b      	str	r3, [r1, #8]
 800d830:	f1b8 0f00 	cmp.w	r8, #0
 800d834:	dde9      	ble.n	800d80a <__sflush_r+0xae>
 800d836:	6a21      	ldr	r1, [r4, #32]
 800d838:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d83a:	4643      	mov	r3, r8
 800d83c:	463a      	mov	r2, r7
 800d83e:	4628      	mov	r0, r5
 800d840:	47b0      	blx	r6
 800d842:	2800      	cmp	r0, #0
 800d844:	dc08      	bgt.n	800d858 <__sflush_r+0xfc>
 800d846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	f04f 30ff 	mov.w	r0, #4294967295
 800d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d858:	4407      	add	r7, r0
 800d85a:	eba8 0800 	sub.w	r8, r8, r0
 800d85e:	e7e7      	b.n	800d830 <__sflush_r+0xd4>
 800d860:	dfbffffe 	.word	0xdfbffffe

0800d864 <_fflush_r>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	690b      	ldr	r3, [r1, #16]
 800d868:	4605      	mov	r5, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	b913      	cbnz	r3, 800d874 <_fflush_r+0x10>
 800d86e:	2500      	movs	r5, #0
 800d870:	4628      	mov	r0, r5
 800d872:	bd38      	pop	{r3, r4, r5, pc}
 800d874:	b118      	cbz	r0, 800d87e <_fflush_r+0x1a>
 800d876:	6a03      	ldr	r3, [r0, #32]
 800d878:	b90b      	cbnz	r3, 800d87e <_fflush_r+0x1a>
 800d87a:	f7fd fa47 	bl	800ad0c <__sinit>
 800d87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d0f3      	beq.n	800d86e <_fflush_r+0xa>
 800d886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d888:	07d0      	lsls	r0, r2, #31
 800d88a:	d404      	bmi.n	800d896 <_fflush_r+0x32>
 800d88c:	0599      	lsls	r1, r3, #22
 800d88e:	d402      	bmi.n	800d896 <_fflush_r+0x32>
 800d890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d892:	f7fd fb80 	bl	800af96 <__retarget_lock_acquire_recursive>
 800d896:	4628      	mov	r0, r5
 800d898:	4621      	mov	r1, r4
 800d89a:	f7ff ff5f 	bl	800d75c <__sflush_r>
 800d89e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8a0:	07da      	lsls	r2, r3, #31
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	d4e4      	bmi.n	800d870 <_fflush_r+0xc>
 800d8a6:	89a3      	ldrh	r3, [r4, #12]
 800d8a8:	059b      	lsls	r3, r3, #22
 800d8aa:	d4e1      	bmi.n	800d870 <_fflush_r+0xc>
 800d8ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ae:	f7fd fb73 	bl	800af98 <__retarget_lock_release_recursive>
 800d8b2:	e7dd      	b.n	800d870 <_fflush_r+0xc>

0800d8b4 <memmove>:
 800d8b4:	4288      	cmp	r0, r1
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	eb01 0402 	add.w	r4, r1, r2
 800d8bc:	d902      	bls.n	800d8c4 <memmove+0x10>
 800d8be:	4284      	cmp	r4, r0
 800d8c0:	4623      	mov	r3, r4
 800d8c2:	d807      	bhi.n	800d8d4 <memmove+0x20>
 800d8c4:	1e43      	subs	r3, r0, #1
 800d8c6:	42a1      	cmp	r1, r4
 800d8c8:	d008      	beq.n	800d8dc <memmove+0x28>
 800d8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8d2:	e7f8      	b.n	800d8c6 <memmove+0x12>
 800d8d4:	4402      	add	r2, r0
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	428a      	cmp	r2, r1
 800d8da:	d100      	bne.n	800d8de <memmove+0x2a>
 800d8dc:	bd10      	pop	{r4, pc}
 800d8de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8e6:	e7f7      	b.n	800d8d8 <memmove+0x24>

0800d8e8 <strncmp>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	b16a      	cbz	r2, 800d908 <strncmp+0x20>
 800d8ec:	3901      	subs	r1, #1
 800d8ee:	1884      	adds	r4, r0, r2
 800d8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d103      	bne.n	800d904 <strncmp+0x1c>
 800d8fc:	42a0      	cmp	r0, r4
 800d8fe:	d001      	beq.n	800d904 <strncmp+0x1c>
 800d900:	2a00      	cmp	r2, #0
 800d902:	d1f5      	bne.n	800d8f0 <strncmp+0x8>
 800d904:	1ad0      	subs	r0, r2, r3
 800d906:	bd10      	pop	{r4, pc}
 800d908:	4610      	mov	r0, r2
 800d90a:	e7fc      	b.n	800d906 <strncmp+0x1e>

0800d90c <_sbrk_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	4d06      	ldr	r5, [pc, #24]	@ (800d928 <_sbrk_r+0x1c>)
 800d910:	2300      	movs	r3, #0
 800d912:	4604      	mov	r4, r0
 800d914:	4608      	mov	r0, r1
 800d916:	602b      	str	r3, [r5, #0]
 800d918:	f001 f964 	bl	800ebe4 <_sbrk>
 800d91c:	1c43      	adds	r3, r0, #1
 800d91e:	d102      	bne.n	800d926 <_sbrk_r+0x1a>
 800d920:	682b      	ldr	r3, [r5, #0]
 800d922:	b103      	cbz	r3, 800d926 <_sbrk_r+0x1a>
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	bd38      	pop	{r3, r4, r5, pc}
 800d928:	200009b8 	.word	0x200009b8

0800d92c <__errno>:
 800d92c:	4b01      	ldr	r3, [pc, #4]	@ (800d934 <__errno+0x8>)
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000104 	.word	0x20000104

0800d938 <memcpy>:
 800d938:	440a      	add	r2, r1
 800d93a:	4291      	cmp	r1, r2
 800d93c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d940:	d100      	bne.n	800d944 <memcpy+0xc>
 800d942:	4770      	bx	lr
 800d944:	b510      	push	{r4, lr}
 800d946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d94e:	4291      	cmp	r1, r2
 800d950:	d1f9      	bne.n	800d946 <memcpy+0xe>
 800d952:	bd10      	pop	{r4, pc}
 800d954:	0000      	movs	r0, r0
	...

0800d958 <nan>:
 800d958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d960 <nan+0x8>
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	00000000 	.word	0x00000000
 800d964:	7ff80000 	.word	0x7ff80000

0800d968 <__assert_func>:
 800d968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d96a:	4614      	mov	r4, r2
 800d96c:	461a      	mov	r2, r3
 800d96e:	4b09      	ldr	r3, [pc, #36]	@ (800d994 <__assert_func+0x2c>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4605      	mov	r5, r0
 800d974:	68d8      	ldr	r0, [r3, #12]
 800d976:	b954      	cbnz	r4, 800d98e <__assert_func+0x26>
 800d978:	4b07      	ldr	r3, [pc, #28]	@ (800d998 <__assert_func+0x30>)
 800d97a:	461c      	mov	r4, r3
 800d97c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d980:	9100      	str	r1, [sp, #0]
 800d982:	462b      	mov	r3, r5
 800d984:	4905      	ldr	r1, [pc, #20]	@ (800d99c <__assert_func+0x34>)
 800d986:	f000 fba7 	bl	800e0d8 <fiprintf>
 800d98a:	f000 fbb7 	bl	800e0fc <abort>
 800d98e:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <__assert_func+0x38>)
 800d990:	e7f4      	b.n	800d97c <__assert_func+0x14>
 800d992:	bf00      	nop
 800d994:	20000104 	.word	0x20000104
 800d998:	08012785 	.word	0x08012785
 800d99c:	08012757 	.word	0x08012757
 800d9a0:	0801274a 	.word	0x0801274a

0800d9a4 <_calloc_r>:
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800d9aa:	b93c      	cbnz	r4, 800d9bc <_calloc_r+0x18>
 800d9ac:	4629      	mov	r1, r5
 800d9ae:	f7fe f9bb 	bl	800bd28 <_malloc_r>
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	b928      	cbnz	r0, 800d9c2 <_calloc_r+0x1e>
 800d9b6:	2600      	movs	r6, #0
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	220c      	movs	r2, #12
 800d9be:	6002      	str	r2, [r0, #0]
 800d9c0:	e7f9      	b.n	800d9b6 <_calloc_r+0x12>
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	f7fd fa6e 	bl	800aea6 <memset>
 800d9ca:	e7f5      	b.n	800d9b8 <_calloc_r+0x14>

0800d9cc <rshift>:
 800d9cc:	6903      	ldr	r3, [r0, #16]
 800d9ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9da:	f100 0414 	add.w	r4, r0, #20
 800d9de:	dd45      	ble.n	800da6c <rshift+0xa0>
 800d9e0:	f011 011f 	ands.w	r1, r1, #31
 800d9e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9ec:	d10c      	bne.n	800da08 <rshift+0x3c>
 800d9ee:	f100 0710 	add.w	r7, r0, #16
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	42b1      	cmp	r1, r6
 800d9f6:	d334      	bcc.n	800da62 <rshift+0x96>
 800d9f8:	1a9b      	subs	r3, r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	1eea      	subs	r2, r5, #3
 800d9fe:	4296      	cmp	r6, r2
 800da00:	bf38      	it	cc
 800da02:	2300      	movcc	r3, #0
 800da04:	4423      	add	r3, r4
 800da06:	e015      	b.n	800da34 <rshift+0x68>
 800da08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da0c:	f1c1 0820 	rsb	r8, r1, #32
 800da10:	40cf      	lsrs	r7, r1
 800da12:	f105 0e04 	add.w	lr, r5, #4
 800da16:	46a1      	mov	r9, r4
 800da18:	4576      	cmp	r6, lr
 800da1a:	46f4      	mov	ip, lr
 800da1c:	d815      	bhi.n	800da4a <rshift+0x7e>
 800da1e:	1a9a      	subs	r2, r3, r2
 800da20:	0092      	lsls	r2, r2, #2
 800da22:	3a04      	subs	r2, #4
 800da24:	3501      	adds	r5, #1
 800da26:	42ae      	cmp	r6, r5
 800da28:	bf38      	it	cc
 800da2a:	2200      	movcc	r2, #0
 800da2c:	18a3      	adds	r3, r4, r2
 800da2e:	50a7      	str	r7, [r4, r2]
 800da30:	b107      	cbz	r7, 800da34 <rshift+0x68>
 800da32:	3304      	adds	r3, #4
 800da34:	1b1a      	subs	r2, r3, r4
 800da36:	42a3      	cmp	r3, r4
 800da38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da3c:	bf08      	it	eq
 800da3e:	2300      	moveq	r3, #0
 800da40:	6102      	str	r2, [r0, #16]
 800da42:	bf08      	it	eq
 800da44:	6143      	streq	r3, [r0, #20]
 800da46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4a:	f8dc c000 	ldr.w	ip, [ip]
 800da4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800da52:	ea4c 0707 	orr.w	r7, ip, r7
 800da56:	f849 7b04 	str.w	r7, [r9], #4
 800da5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da5e:	40cf      	lsrs	r7, r1
 800da60:	e7da      	b.n	800da18 <rshift+0x4c>
 800da62:	f851 cb04 	ldr.w	ip, [r1], #4
 800da66:	f847 cf04 	str.w	ip, [r7, #4]!
 800da6a:	e7c3      	b.n	800d9f4 <rshift+0x28>
 800da6c:	4623      	mov	r3, r4
 800da6e:	e7e1      	b.n	800da34 <rshift+0x68>

0800da70 <__hexdig_fun>:
 800da70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da74:	2b09      	cmp	r3, #9
 800da76:	d802      	bhi.n	800da7e <__hexdig_fun+0xe>
 800da78:	3820      	subs	r0, #32
 800da7a:	b2c0      	uxtb	r0, r0
 800da7c:	4770      	bx	lr
 800da7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da82:	2b05      	cmp	r3, #5
 800da84:	d801      	bhi.n	800da8a <__hexdig_fun+0x1a>
 800da86:	3847      	subs	r0, #71	@ 0x47
 800da88:	e7f7      	b.n	800da7a <__hexdig_fun+0xa>
 800da8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d801      	bhi.n	800da96 <__hexdig_fun+0x26>
 800da92:	3827      	subs	r0, #39	@ 0x27
 800da94:	e7f1      	b.n	800da7a <__hexdig_fun+0xa>
 800da96:	2000      	movs	r0, #0
 800da98:	4770      	bx	lr
	...

0800da9c <__gethex>:
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	b085      	sub	sp, #20
 800daa2:	468a      	mov	sl, r1
 800daa4:	9302      	str	r3, [sp, #8]
 800daa6:	680b      	ldr	r3, [r1, #0]
 800daa8:	9001      	str	r0, [sp, #4]
 800daaa:	4690      	mov	r8, r2
 800daac:	1c9c      	adds	r4, r3, #2
 800daae:	46a1      	mov	r9, r4
 800dab0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dab4:	2830      	cmp	r0, #48	@ 0x30
 800dab6:	d0fa      	beq.n	800daae <__gethex+0x12>
 800dab8:	eba9 0303 	sub.w	r3, r9, r3
 800dabc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dac0:	f7ff ffd6 	bl	800da70 <__hexdig_fun>
 800dac4:	4605      	mov	r5, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d168      	bne.n	800db9c <__gethex+0x100>
 800daca:	49a0      	ldr	r1, [pc, #640]	@ (800dd4c <__gethex+0x2b0>)
 800dacc:	2201      	movs	r2, #1
 800dace:	4648      	mov	r0, r9
 800dad0:	f7ff ff0a 	bl	800d8e8 <strncmp>
 800dad4:	4607      	mov	r7, r0
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d167      	bne.n	800dbaa <__gethex+0x10e>
 800dada:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dade:	4626      	mov	r6, r4
 800dae0:	f7ff ffc6 	bl	800da70 <__hexdig_fun>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d062      	beq.n	800dbae <__gethex+0x112>
 800dae8:	4623      	mov	r3, r4
 800daea:	7818      	ldrb	r0, [r3, #0]
 800daec:	2830      	cmp	r0, #48	@ 0x30
 800daee:	4699      	mov	r9, r3
 800daf0:	f103 0301 	add.w	r3, r3, #1
 800daf4:	d0f9      	beq.n	800daea <__gethex+0x4e>
 800daf6:	f7ff ffbb 	bl	800da70 <__hexdig_fun>
 800dafa:	fab0 f580 	clz	r5, r0
 800dafe:	096d      	lsrs	r5, r5, #5
 800db00:	f04f 0b01 	mov.w	fp, #1
 800db04:	464a      	mov	r2, r9
 800db06:	4616      	mov	r6, r2
 800db08:	3201      	adds	r2, #1
 800db0a:	7830      	ldrb	r0, [r6, #0]
 800db0c:	f7ff ffb0 	bl	800da70 <__hexdig_fun>
 800db10:	2800      	cmp	r0, #0
 800db12:	d1f8      	bne.n	800db06 <__gethex+0x6a>
 800db14:	498d      	ldr	r1, [pc, #564]	@ (800dd4c <__gethex+0x2b0>)
 800db16:	2201      	movs	r2, #1
 800db18:	4630      	mov	r0, r6
 800db1a:	f7ff fee5 	bl	800d8e8 <strncmp>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d13f      	bne.n	800dba2 <__gethex+0x106>
 800db22:	b944      	cbnz	r4, 800db36 <__gethex+0x9a>
 800db24:	1c74      	adds	r4, r6, #1
 800db26:	4622      	mov	r2, r4
 800db28:	4616      	mov	r6, r2
 800db2a:	3201      	adds	r2, #1
 800db2c:	7830      	ldrb	r0, [r6, #0]
 800db2e:	f7ff ff9f 	bl	800da70 <__hexdig_fun>
 800db32:	2800      	cmp	r0, #0
 800db34:	d1f8      	bne.n	800db28 <__gethex+0x8c>
 800db36:	1ba4      	subs	r4, r4, r6
 800db38:	00a7      	lsls	r7, r4, #2
 800db3a:	7833      	ldrb	r3, [r6, #0]
 800db3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db40:	2b50      	cmp	r3, #80	@ 0x50
 800db42:	d13e      	bne.n	800dbc2 <__gethex+0x126>
 800db44:	7873      	ldrb	r3, [r6, #1]
 800db46:	2b2b      	cmp	r3, #43	@ 0x2b
 800db48:	d033      	beq.n	800dbb2 <__gethex+0x116>
 800db4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db4c:	d034      	beq.n	800dbb8 <__gethex+0x11c>
 800db4e:	1c71      	adds	r1, r6, #1
 800db50:	2400      	movs	r4, #0
 800db52:	7808      	ldrb	r0, [r1, #0]
 800db54:	f7ff ff8c 	bl	800da70 <__hexdig_fun>
 800db58:	1e43      	subs	r3, r0, #1
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b18      	cmp	r3, #24
 800db5e:	d830      	bhi.n	800dbc2 <__gethex+0x126>
 800db60:	f1a0 0210 	sub.w	r2, r0, #16
 800db64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db68:	f7ff ff82 	bl	800da70 <__hexdig_fun>
 800db6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db70:	fa5f fc8c 	uxtb.w	ip, ip
 800db74:	f1bc 0f18 	cmp.w	ip, #24
 800db78:	f04f 030a 	mov.w	r3, #10
 800db7c:	d91e      	bls.n	800dbbc <__gethex+0x120>
 800db7e:	b104      	cbz	r4, 800db82 <__gethex+0xe6>
 800db80:	4252      	negs	r2, r2
 800db82:	4417      	add	r7, r2
 800db84:	f8ca 1000 	str.w	r1, [sl]
 800db88:	b1ed      	cbz	r5, 800dbc6 <__gethex+0x12a>
 800db8a:	f1bb 0f00 	cmp.w	fp, #0
 800db8e:	bf0c      	ite	eq
 800db90:	2506      	moveq	r5, #6
 800db92:	2500      	movne	r5, #0
 800db94:	4628      	mov	r0, r5
 800db96:	b005      	add	sp, #20
 800db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9c:	2500      	movs	r5, #0
 800db9e:	462c      	mov	r4, r5
 800dba0:	e7b0      	b.n	800db04 <__gethex+0x68>
 800dba2:	2c00      	cmp	r4, #0
 800dba4:	d1c7      	bne.n	800db36 <__gethex+0x9a>
 800dba6:	4627      	mov	r7, r4
 800dba8:	e7c7      	b.n	800db3a <__gethex+0x9e>
 800dbaa:	464e      	mov	r6, r9
 800dbac:	462f      	mov	r7, r5
 800dbae:	2501      	movs	r5, #1
 800dbb0:	e7c3      	b.n	800db3a <__gethex+0x9e>
 800dbb2:	2400      	movs	r4, #0
 800dbb4:	1cb1      	adds	r1, r6, #2
 800dbb6:	e7cc      	b.n	800db52 <__gethex+0xb6>
 800dbb8:	2401      	movs	r4, #1
 800dbba:	e7fb      	b.n	800dbb4 <__gethex+0x118>
 800dbbc:	fb03 0002 	mla	r0, r3, r2, r0
 800dbc0:	e7ce      	b.n	800db60 <__gethex+0xc4>
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	e7de      	b.n	800db84 <__gethex+0xe8>
 800dbc6:	eba6 0309 	sub.w	r3, r6, r9
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	4629      	mov	r1, r5
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	dc0a      	bgt.n	800dbe8 <__gethex+0x14c>
 800dbd2:	9801      	ldr	r0, [sp, #4]
 800dbd4:	f7fe f934 	bl	800be40 <_Balloc>
 800dbd8:	4604      	mov	r4, r0
 800dbda:	b940      	cbnz	r0, 800dbee <__gethex+0x152>
 800dbdc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd50 <__gethex+0x2b4>)
 800dbde:	4602      	mov	r2, r0
 800dbe0:	21e4      	movs	r1, #228	@ 0xe4
 800dbe2:	485c      	ldr	r0, [pc, #368]	@ (800dd54 <__gethex+0x2b8>)
 800dbe4:	f7ff fec0 	bl	800d968 <__assert_func>
 800dbe8:	3101      	adds	r1, #1
 800dbea:	105b      	asrs	r3, r3, #1
 800dbec:	e7ef      	b.n	800dbce <__gethex+0x132>
 800dbee:	f100 0a14 	add.w	sl, r0, #20
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4655      	mov	r5, sl
 800dbf6:	469b      	mov	fp, r3
 800dbf8:	45b1      	cmp	r9, r6
 800dbfa:	d337      	bcc.n	800dc6c <__gethex+0x1d0>
 800dbfc:	f845 bb04 	str.w	fp, [r5], #4
 800dc00:	eba5 050a 	sub.w	r5, r5, sl
 800dc04:	10ad      	asrs	r5, r5, #2
 800dc06:	6125      	str	r5, [r4, #16]
 800dc08:	4658      	mov	r0, fp
 800dc0a:	f7fe fa0b 	bl	800c024 <__hi0bits>
 800dc0e:	016d      	lsls	r5, r5, #5
 800dc10:	f8d8 6000 	ldr.w	r6, [r8]
 800dc14:	1a2d      	subs	r5, r5, r0
 800dc16:	42b5      	cmp	r5, r6
 800dc18:	dd54      	ble.n	800dcc4 <__gethex+0x228>
 800dc1a:	1bad      	subs	r5, r5, r6
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f7fe fd9f 	bl	800c762 <__any_on>
 800dc24:	4681      	mov	r9, r0
 800dc26:	b178      	cbz	r0, 800dc48 <__gethex+0x1ac>
 800dc28:	1e6b      	subs	r3, r5, #1
 800dc2a:	1159      	asrs	r1, r3, #5
 800dc2c:	f003 021f 	and.w	r2, r3, #31
 800dc30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc34:	f04f 0901 	mov.w	r9, #1
 800dc38:	fa09 f202 	lsl.w	r2, r9, r2
 800dc3c:	420a      	tst	r2, r1
 800dc3e:	d003      	beq.n	800dc48 <__gethex+0x1ac>
 800dc40:	454b      	cmp	r3, r9
 800dc42:	dc36      	bgt.n	800dcb2 <__gethex+0x216>
 800dc44:	f04f 0902 	mov.w	r9, #2
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f7ff febe 	bl	800d9cc <rshift>
 800dc50:	442f      	add	r7, r5
 800dc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc56:	42bb      	cmp	r3, r7
 800dc58:	da42      	bge.n	800dce0 <__gethex+0x244>
 800dc5a:	9801      	ldr	r0, [sp, #4]
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	f7fe f92f 	bl	800bec0 <_Bfree>
 800dc62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc64:	2300      	movs	r3, #0
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	25a3      	movs	r5, #163	@ 0xa3
 800dc6a:	e793      	b.n	800db94 <__gethex+0xf8>
 800dc6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc70:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc72:	d012      	beq.n	800dc9a <__gethex+0x1fe>
 800dc74:	2b20      	cmp	r3, #32
 800dc76:	d104      	bne.n	800dc82 <__gethex+0x1e6>
 800dc78:	f845 bb04 	str.w	fp, [r5], #4
 800dc7c:	f04f 0b00 	mov.w	fp, #0
 800dc80:	465b      	mov	r3, fp
 800dc82:	7830      	ldrb	r0, [r6, #0]
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	f7ff fef3 	bl	800da70 <__hexdig_fun>
 800dc8a:	9b03      	ldr	r3, [sp, #12]
 800dc8c:	f000 000f 	and.w	r0, r0, #15
 800dc90:	4098      	lsls	r0, r3
 800dc92:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc96:	3304      	adds	r3, #4
 800dc98:	e7ae      	b.n	800dbf8 <__gethex+0x15c>
 800dc9a:	45b1      	cmp	r9, r6
 800dc9c:	d8ea      	bhi.n	800dc74 <__gethex+0x1d8>
 800dc9e:	492b      	ldr	r1, [pc, #172]	@ (800dd4c <__gethex+0x2b0>)
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	2201      	movs	r2, #1
 800dca4:	4630      	mov	r0, r6
 800dca6:	f7ff fe1f 	bl	800d8e8 <strncmp>
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d1e1      	bne.n	800dc74 <__gethex+0x1d8>
 800dcb0:	e7a2      	b.n	800dbf8 <__gethex+0x15c>
 800dcb2:	1ea9      	subs	r1, r5, #2
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7fe fd54 	bl	800c762 <__any_on>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	d0c2      	beq.n	800dc44 <__gethex+0x1a8>
 800dcbe:	f04f 0903 	mov.w	r9, #3
 800dcc2:	e7c1      	b.n	800dc48 <__gethex+0x1ac>
 800dcc4:	da09      	bge.n	800dcda <__gethex+0x23e>
 800dcc6:	1b75      	subs	r5, r6, r5
 800dcc8:	4621      	mov	r1, r4
 800dcca:	9801      	ldr	r0, [sp, #4]
 800dccc:	462a      	mov	r2, r5
 800dcce:	f7fe fb0f 	bl	800c2f0 <__lshift>
 800dcd2:	1b7f      	subs	r7, r7, r5
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	f100 0a14 	add.w	sl, r0, #20
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	e7b8      	b.n	800dc52 <__gethex+0x1b6>
 800dce0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dce4:	42bd      	cmp	r5, r7
 800dce6:	dd6f      	ble.n	800ddc8 <__gethex+0x32c>
 800dce8:	1bed      	subs	r5, r5, r7
 800dcea:	42ae      	cmp	r6, r5
 800dcec:	dc34      	bgt.n	800dd58 <__gethex+0x2bc>
 800dcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d022      	beq.n	800dd3c <__gethex+0x2a0>
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d024      	beq.n	800dd44 <__gethex+0x2a8>
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d115      	bne.n	800dd2a <__gethex+0x28e>
 800dcfe:	42ae      	cmp	r6, r5
 800dd00:	d113      	bne.n	800dd2a <__gethex+0x28e>
 800dd02:	2e01      	cmp	r6, #1
 800dd04:	d10b      	bne.n	800dd1e <__gethex+0x282>
 800dd06:	9a02      	ldr	r2, [sp, #8]
 800dd08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	2301      	movs	r3, #1
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	f8ca 3000 	str.w	r3, [sl]
 800dd16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd18:	2562      	movs	r5, #98	@ 0x62
 800dd1a:	601c      	str	r4, [r3, #0]
 800dd1c:	e73a      	b.n	800db94 <__gethex+0xf8>
 800dd1e:	1e71      	subs	r1, r6, #1
 800dd20:	4620      	mov	r0, r4
 800dd22:	f7fe fd1e 	bl	800c762 <__any_on>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d1ed      	bne.n	800dd06 <__gethex+0x26a>
 800dd2a:	9801      	ldr	r0, [sp, #4]
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	f7fe f8c7 	bl	800bec0 <_Bfree>
 800dd32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd34:	2300      	movs	r3, #0
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	2550      	movs	r5, #80	@ 0x50
 800dd3a:	e72b      	b.n	800db94 <__gethex+0xf8>
 800dd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f3      	bne.n	800dd2a <__gethex+0x28e>
 800dd42:	e7e0      	b.n	800dd06 <__gethex+0x26a>
 800dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1dd      	bne.n	800dd06 <__gethex+0x26a>
 800dd4a:	e7ee      	b.n	800dd2a <__gethex+0x28e>
 800dd4c:	080125d8 	.word	0x080125d8
 800dd50:	08012471 	.word	0x08012471
 800dd54:	08012786 	.word	0x08012786
 800dd58:	1e6f      	subs	r7, r5, #1
 800dd5a:	f1b9 0f00 	cmp.w	r9, #0
 800dd5e:	d130      	bne.n	800ddc2 <__gethex+0x326>
 800dd60:	b127      	cbz	r7, 800dd6c <__gethex+0x2d0>
 800dd62:	4639      	mov	r1, r7
 800dd64:	4620      	mov	r0, r4
 800dd66:	f7fe fcfc 	bl	800c762 <__any_on>
 800dd6a:	4681      	mov	r9, r0
 800dd6c:	117a      	asrs	r2, r7, #5
 800dd6e:	2301      	movs	r3, #1
 800dd70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd74:	f007 071f 	and.w	r7, r7, #31
 800dd78:	40bb      	lsls	r3, r7
 800dd7a:	4213      	tst	r3, r2
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4620      	mov	r0, r4
 800dd80:	bf18      	it	ne
 800dd82:	f049 0902 	orrne.w	r9, r9, #2
 800dd86:	f7ff fe21 	bl	800d9cc <rshift>
 800dd8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd8e:	1b76      	subs	r6, r6, r5
 800dd90:	2502      	movs	r5, #2
 800dd92:	f1b9 0f00 	cmp.w	r9, #0
 800dd96:	d047      	beq.n	800de28 <__gethex+0x38c>
 800dd98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d015      	beq.n	800ddcc <__gethex+0x330>
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d017      	beq.n	800ddd4 <__gethex+0x338>
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d109      	bne.n	800ddbc <__gethex+0x320>
 800dda8:	f019 0f02 	tst.w	r9, #2
 800ddac:	d006      	beq.n	800ddbc <__gethex+0x320>
 800ddae:	f8da 3000 	ldr.w	r3, [sl]
 800ddb2:	ea49 0903 	orr.w	r9, r9, r3
 800ddb6:	f019 0f01 	tst.w	r9, #1
 800ddba:	d10e      	bne.n	800ddda <__gethex+0x33e>
 800ddbc:	f045 0510 	orr.w	r5, r5, #16
 800ddc0:	e032      	b.n	800de28 <__gethex+0x38c>
 800ddc2:	f04f 0901 	mov.w	r9, #1
 800ddc6:	e7d1      	b.n	800dd6c <__gethex+0x2d0>
 800ddc8:	2501      	movs	r5, #1
 800ddca:	e7e2      	b.n	800dd92 <__gethex+0x2f6>
 800ddcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddce:	f1c3 0301 	rsb	r3, r3, #1
 800ddd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f0      	beq.n	800ddbc <__gethex+0x320>
 800ddda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddde:	f104 0314 	add.w	r3, r4, #20
 800dde2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dde6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddea:	f04f 0c00 	mov.w	ip, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ddf8:	d01b      	beq.n	800de32 <__gethex+0x396>
 800ddfa:	3201      	adds	r2, #1
 800ddfc:	6002      	str	r2, [r0, #0]
 800ddfe:	2d02      	cmp	r5, #2
 800de00:	f104 0314 	add.w	r3, r4, #20
 800de04:	d13c      	bne.n	800de80 <__gethex+0x3e4>
 800de06:	f8d8 2000 	ldr.w	r2, [r8]
 800de0a:	3a01      	subs	r2, #1
 800de0c:	42b2      	cmp	r2, r6
 800de0e:	d109      	bne.n	800de24 <__gethex+0x388>
 800de10:	1171      	asrs	r1, r6, #5
 800de12:	2201      	movs	r2, #1
 800de14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de18:	f006 061f 	and.w	r6, r6, #31
 800de1c:	fa02 f606 	lsl.w	r6, r2, r6
 800de20:	421e      	tst	r6, r3
 800de22:	d13a      	bne.n	800de9a <__gethex+0x3fe>
 800de24:	f045 0520 	orr.w	r5, r5, #32
 800de28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de2a:	601c      	str	r4, [r3, #0]
 800de2c:	9b02      	ldr	r3, [sp, #8]
 800de2e:	601f      	str	r7, [r3, #0]
 800de30:	e6b0      	b.n	800db94 <__gethex+0xf8>
 800de32:	4299      	cmp	r1, r3
 800de34:	f843 cc04 	str.w	ip, [r3, #-4]
 800de38:	d8d9      	bhi.n	800ddee <__gethex+0x352>
 800de3a:	68a3      	ldr	r3, [r4, #8]
 800de3c:	459b      	cmp	fp, r3
 800de3e:	db17      	blt.n	800de70 <__gethex+0x3d4>
 800de40:	6861      	ldr	r1, [r4, #4]
 800de42:	9801      	ldr	r0, [sp, #4]
 800de44:	3101      	adds	r1, #1
 800de46:	f7fd fffb 	bl	800be40 <_Balloc>
 800de4a:	4681      	mov	r9, r0
 800de4c:	b918      	cbnz	r0, 800de56 <__gethex+0x3ba>
 800de4e:	4b1a      	ldr	r3, [pc, #104]	@ (800deb8 <__gethex+0x41c>)
 800de50:	4602      	mov	r2, r0
 800de52:	2184      	movs	r1, #132	@ 0x84
 800de54:	e6c5      	b.n	800dbe2 <__gethex+0x146>
 800de56:	6922      	ldr	r2, [r4, #16]
 800de58:	3202      	adds	r2, #2
 800de5a:	f104 010c 	add.w	r1, r4, #12
 800de5e:	0092      	lsls	r2, r2, #2
 800de60:	300c      	adds	r0, #12
 800de62:	f7ff fd69 	bl	800d938 <memcpy>
 800de66:	4621      	mov	r1, r4
 800de68:	9801      	ldr	r0, [sp, #4]
 800de6a:	f7fe f829 	bl	800bec0 <_Bfree>
 800de6e:	464c      	mov	r4, r9
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de78:	6122      	str	r2, [r4, #16]
 800de7a:	2201      	movs	r2, #1
 800de7c:	615a      	str	r2, [r3, #20]
 800de7e:	e7be      	b.n	800ddfe <__gethex+0x362>
 800de80:	6922      	ldr	r2, [r4, #16]
 800de82:	455a      	cmp	r2, fp
 800de84:	dd0b      	ble.n	800de9e <__gethex+0x402>
 800de86:	2101      	movs	r1, #1
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff fd9f 	bl	800d9cc <rshift>
 800de8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de92:	3701      	adds	r7, #1
 800de94:	42bb      	cmp	r3, r7
 800de96:	f6ff aee0 	blt.w	800dc5a <__gethex+0x1be>
 800de9a:	2501      	movs	r5, #1
 800de9c:	e7c2      	b.n	800de24 <__gethex+0x388>
 800de9e:	f016 061f 	ands.w	r6, r6, #31
 800dea2:	d0fa      	beq.n	800de9a <__gethex+0x3fe>
 800dea4:	4453      	add	r3, sl
 800dea6:	f1c6 0620 	rsb	r6, r6, #32
 800deaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800deae:	f7fe f8b9 	bl	800c024 <__hi0bits>
 800deb2:	42b0      	cmp	r0, r6
 800deb4:	dbe7      	blt.n	800de86 <__gethex+0x3ea>
 800deb6:	e7f0      	b.n	800de9a <__gethex+0x3fe>
 800deb8:	08012471 	.word	0x08012471

0800debc <L_shift>:
 800debc:	f1c2 0208 	rsb	r2, r2, #8
 800dec0:	0092      	lsls	r2, r2, #2
 800dec2:	b570      	push	{r4, r5, r6, lr}
 800dec4:	f1c2 0620 	rsb	r6, r2, #32
 800dec8:	6843      	ldr	r3, [r0, #4]
 800deca:	6804      	ldr	r4, [r0, #0]
 800decc:	fa03 f506 	lsl.w	r5, r3, r6
 800ded0:	432c      	orrs	r4, r5
 800ded2:	40d3      	lsrs	r3, r2
 800ded4:	6004      	str	r4, [r0, #0]
 800ded6:	f840 3f04 	str.w	r3, [r0, #4]!
 800deda:	4288      	cmp	r0, r1
 800dedc:	d3f4      	bcc.n	800dec8 <L_shift+0xc>
 800dede:	bd70      	pop	{r4, r5, r6, pc}

0800dee0 <__match>:
 800dee0:	b530      	push	{r4, r5, lr}
 800dee2:	6803      	ldr	r3, [r0, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deea:	b914      	cbnz	r4, 800def2 <__match+0x12>
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	2001      	movs	r0, #1
 800def0:	bd30      	pop	{r4, r5, pc}
 800def2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800defa:	2d19      	cmp	r5, #25
 800defc:	bf98      	it	ls
 800defe:	3220      	addls	r2, #32
 800df00:	42a2      	cmp	r2, r4
 800df02:	d0f0      	beq.n	800dee6 <__match+0x6>
 800df04:	2000      	movs	r0, #0
 800df06:	e7f3      	b.n	800def0 <__match+0x10>

0800df08 <__hexnan>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	680b      	ldr	r3, [r1, #0]
 800df0e:	6801      	ldr	r1, [r0, #0]
 800df10:	115e      	asrs	r6, r3, #5
 800df12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df16:	f013 031f 	ands.w	r3, r3, #31
 800df1a:	b087      	sub	sp, #28
 800df1c:	bf18      	it	ne
 800df1e:	3604      	addne	r6, #4
 800df20:	2500      	movs	r5, #0
 800df22:	1f37      	subs	r7, r6, #4
 800df24:	4682      	mov	sl, r0
 800df26:	4690      	mov	r8, r2
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df2e:	46b9      	mov	r9, r7
 800df30:	463c      	mov	r4, r7
 800df32:	9502      	str	r5, [sp, #8]
 800df34:	46ab      	mov	fp, r5
 800df36:	784a      	ldrb	r2, [r1, #1]
 800df38:	1c4b      	adds	r3, r1, #1
 800df3a:	9303      	str	r3, [sp, #12]
 800df3c:	b342      	cbz	r2, 800df90 <__hexnan+0x88>
 800df3e:	4610      	mov	r0, r2
 800df40:	9105      	str	r1, [sp, #20]
 800df42:	9204      	str	r2, [sp, #16]
 800df44:	f7ff fd94 	bl	800da70 <__hexdig_fun>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d151      	bne.n	800dff0 <__hexnan+0xe8>
 800df4c:	9a04      	ldr	r2, [sp, #16]
 800df4e:	9905      	ldr	r1, [sp, #20]
 800df50:	2a20      	cmp	r2, #32
 800df52:	d818      	bhi.n	800df86 <__hexnan+0x7e>
 800df54:	9b02      	ldr	r3, [sp, #8]
 800df56:	459b      	cmp	fp, r3
 800df58:	dd13      	ble.n	800df82 <__hexnan+0x7a>
 800df5a:	454c      	cmp	r4, r9
 800df5c:	d206      	bcs.n	800df6c <__hexnan+0x64>
 800df5e:	2d07      	cmp	r5, #7
 800df60:	dc04      	bgt.n	800df6c <__hexnan+0x64>
 800df62:	462a      	mov	r2, r5
 800df64:	4649      	mov	r1, r9
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff ffa8 	bl	800debc <L_shift>
 800df6c:	4544      	cmp	r4, r8
 800df6e:	d952      	bls.n	800e016 <__hexnan+0x10e>
 800df70:	2300      	movs	r3, #0
 800df72:	f1a4 0904 	sub.w	r9, r4, #4
 800df76:	f844 3c04 	str.w	r3, [r4, #-4]
 800df7a:	f8cd b008 	str.w	fp, [sp, #8]
 800df7e:	464c      	mov	r4, r9
 800df80:	461d      	mov	r5, r3
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	e7d7      	b.n	800df36 <__hexnan+0x2e>
 800df86:	2a29      	cmp	r2, #41	@ 0x29
 800df88:	d157      	bne.n	800e03a <__hexnan+0x132>
 800df8a:	3102      	adds	r1, #2
 800df8c:	f8ca 1000 	str.w	r1, [sl]
 800df90:	f1bb 0f00 	cmp.w	fp, #0
 800df94:	d051      	beq.n	800e03a <__hexnan+0x132>
 800df96:	454c      	cmp	r4, r9
 800df98:	d206      	bcs.n	800dfa8 <__hexnan+0xa0>
 800df9a:	2d07      	cmp	r5, #7
 800df9c:	dc04      	bgt.n	800dfa8 <__hexnan+0xa0>
 800df9e:	462a      	mov	r2, r5
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7ff ff8a 	bl	800debc <L_shift>
 800dfa8:	4544      	cmp	r4, r8
 800dfaa:	d936      	bls.n	800e01a <__hexnan+0x112>
 800dfac:	f1a8 0204 	sub.w	r2, r8, #4
 800dfb0:	4623      	mov	r3, r4
 800dfb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfba:	429f      	cmp	r7, r3
 800dfbc:	d2f9      	bcs.n	800dfb2 <__hexnan+0xaa>
 800dfbe:	1b3b      	subs	r3, r7, r4
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	3401      	adds	r4, #1
 800dfc8:	3e03      	subs	r6, #3
 800dfca:	42b4      	cmp	r4, r6
 800dfcc:	bf88      	it	hi
 800dfce:	2304      	movhi	r3, #4
 800dfd0:	4443      	add	r3, r8
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f843 2b04 	str.w	r2, [r3], #4
 800dfd8:	429f      	cmp	r7, r3
 800dfda:	d2fb      	bcs.n	800dfd4 <__hexnan+0xcc>
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	b91b      	cbnz	r3, 800dfe8 <__hexnan+0xe0>
 800dfe0:	4547      	cmp	r7, r8
 800dfe2:	d128      	bne.n	800e036 <__hexnan+0x12e>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	603b      	str	r3, [r7, #0]
 800dfe8:	2005      	movs	r0, #5
 800dfea:	b007      	add	sp, #28
 800dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff0:	3501      	adds	r5, #1
 800dff2:	2d08      	cmp	r5, #8
 800dff4:	f10b 0b01 	add.w	fp, fp, #1
 800dff8:	dd06      	ble.n	800e008 <__hexnan+0x100>
 800dffa:	4544      	cmp	r4, r8
 800dffc:	d9c1      	bls.n	800df82 <__hexnan+0x7a>
 800dffe:	2300      	movs	r3, #0
 800e000:	f844 3c04 	str.w	r3, [r4, #-4]
 800e004:	2501      	movs	r5, #1
 800e006:	3c04      	subs	r4, #4
 800e008:	6822      	ldr	r2, [r4, #0]
 800e00a:	f000 000f 	and.w	r0, r0, #15
 800e00e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e012:	6020      	str	r0, [r4, #0]
 800e014:	e7b5      	b.n	800df82 <__hexnan+0x7a>
 800e016:	2508      	movs	r5, #8
 800e018:	e7b3      	b.n	800df82 <__hexnan+0x7a>
 800e01a:	9b01      	ldr	r3, [sp, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0dd      	beq.n	800dfdc <__hexnan+0xd4>
 800e020:	f1c3 0320 	rsb	r3, r3, #32
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	40da      	lsrs	r2, r3
 800e02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e02e:	4013      	ands	r3, r2
 800e030:	f846 3c04 	str.w	r3, [r6, #-4]
 800e034:	e7d2      	b.n	800dfdc <__hexnan+0xd4>
 800e036:	3f04      	subs	r7, #4
 800e038:	e7d0      	b.n	800dfdc <__hexnan+0xd4>
 800e03a:	2004      	movs	r0, #4
 800e03c:	e7d5      	b.n	800dfea <__hexnan+0xe2>

0800e03e <__ascii_mbtowc>:
 800e03e:	b082      	sub	sp, #8
 800e040:	b901      	cbnz	r1, 800e044 <__ascii_mbtowc+0x6>
 800e042:	a901      	add	r1, sp, #4
 800e044:	b142      	cbz	r2, 800e058 <__ascii_mbtowc+0x1a>
 800e046:	b14b      	cbz	r3, 800e05c <__ascii_mbtowc+0x1e>
 800e048:	7813      	ldrb	r3, [r2, #0]
 800e04a:	600b      	str	r3, [r1, #0]
 800e04c:	7812      	ldrb	r2, [r2, #0]
 800e04e:	1e10      	subs	r0, r2, #0
 800e050:	bf18      	it	ne
 800e052:	2001      	movne	r0, #1
 800e054:	b002      	add	sp, #8
 800e056:	4770      	bx	lr
 800e058:	4610      	mov	r0, r2
 800e05a:	e7fb      	b.n	800e054 <__ascii_mbtowc+0x16>
 800e05c:	f06f 0001 	mvn.w	r0, #1
 800e060:	e7f8      	b.n	800e054 <__ascii_mbtowc+0x16>

0800e062 <_realloc_r>:
 800e062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e066:	4680      	mov	r8, r0
 800e068:	4615      	mov	r5, r2
 800e06a:	460c      	mov	r4, r1
 800e06c:	b921      	cbnz	r1, 800e078 <_realloc_r+0x16>
 800e06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e072:	4611      	mov	r1, r2
 800e074:	f7fd be58 	b.w	800bd28 <_malloc_r>
 800e078:	b92a      	cbnz	r2, 800e086 <_realloc_r+0x24>
 800e07a:	f7fd fde1 	bl	800bc40 <_free_r>
 800e07e:	2400      	movs	r4, #0
 800e080:	4620      	mov	r0, r4
 800e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e086:	f000 f840 	bl	800e10a <_malloc_usable_size_r>
 800e08a:	4285      	cmp	r5, r0
 800e08c:	4606      	mov	r6, r0
 800e08e:	d802      	bhi.n	800e096 <_realloc_r+0x34>
 800e090:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e094:	d8f4      	bhi.n	800e080 <_realloc_r+0x1e>
 800e096:	4629      	mov	r1, r5
 800e098:	4640      	mov	r0, r8
 800e09a:	f7fd fe45 	bl	800bd28 <_malloc_r>
 800e09e:	4607      	mov	r7, r0
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d0ec      	beq.n	800e07e <_realloc_r+0x1c>
 800e0a4:	42b5      	cmp	r5, r6
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	bf28      	it	cs
 800e0ac:	4632      	movcs	r2, r6
 800e0ae:	f7ff fc43 	bl	800d938 <memcpy>
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	f7fd fdc3 	bl	800bc40 <_free_r>
 800e0ba:	463c      	mov	r4, r7
 800e0bc:	e7e0      	b.n	800e080 <_realloc_r+0x1e>

0800e0be <__ascii_wctomb>:
 800e0be:	4603      	mov	r3, r0
 800e0c0:	4608      	mov	r0, r1
 800e0c2:	b141      	cbz	r1, 800e0d6 <__ascii_wctomb+0x18>
 800e0c4:	2aff      	cmp	r2, #255	@ 0xff
 800e0c6:	d904      	bls.n	800e0d2 <__ascii_wctomb+0x14>
 800e0c8:	228a      	movs	r2, #138	@ 0x8a
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	4770      	bx	lr
 800e0d2:	700a      	strb	r2, [r1, #0]
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	4770      	bx	lr

0800e0d8 <fiprintf>:
 800e0d8:	b40e      	push	{r1, r2, r3}
 800e0da:	b503      	push	{r0, r1, lr}
 800e0dc:	4601      	mov	r1, r0
 800e0de:	ab03      	add	r3, sp, #12
 800e0e0:	4805      	ldr	r0, [pc, #20]	@ (800e0f8 <fiprintf+0x20>)
 800e0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e6:	6800      	ldr	r0, [r0, #0]
 800e0e8:	9301      	str	r3, [sp, #4]
 800e0ea:	f000 f83f 	bl	800e16c <_vfiprintf_r>
 800e0ee:	b002      	add	sp, #8
 800e0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0f4:	b003      	add	sp, #12
 800e0f6:	4770      	bx	lr
 800e0f8:	20000104 	.word	0x20000104

0800e0fc <abort>:
 800e0fc:	b508      	push	{r3, lr}
 800e0fe:	2006      	movs	r0, #6
 800e100:	f000 fa08 	bl	800e514 <raise>
 800e104:	2001      	movs	r0, #1
 800e106:	f000 fd7b 	bl	800ec00 <_exit>

0800e10a <_malloc_usable_size_r>:
 800e10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e10e:	1f18      	subs	r0, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	bfbc      	itt	lt
 800e114:	580b      	ldrlt	r3, [r1, r0]
 800e116:	18c0      	addlt	r0, r0, r3
 800e118:	4770      	bx	lr

0800e11a <__sfputc_r>:
 800e11a:	6893      	ldr	r3, [r2, #8]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	2b00      	cmp	r3, #0
 800e120:	b410      	push	{r4}
 800e122:	6093      	str	r3, [r2, #8]
 800e124:	da08      	bge.n	800e138 <__sfputc_r+0x1e>
 800e126:	6994      	ldr	r4, [r2, #24]
 800e128:	42a3      	cmp	r3, r4
 800e12a:	db01      	blt.n	800e130 <__sfputc_r+0x16>
 800e12c:	290a      	cmp	r1, #10
 800e12e:	d103      	bne.n	800e138 <__sfputc_r+0x1e>
 800e130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e134:	f000 b932 	b.w	800e39c <__swbuf_r>
 800e138:	6813      	ldr	r3, [r2, #0]
 800e13a:	1c58      	adds	r0, r3, #1
 800e13c:	6010      	str	r0, [r2, #0]
 800e13e:	7019      	strb	r1, [r3, #0]
 800e140:	4608      	mov	r0, r1
 800e142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <__sfputs_r>:
 800e148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e14a:	4606      	mov	r6, r0
 800e14c:	460f      	mov	r7, r1
 800e14e:	4614      	mov	r4, r2
 800e150:	18d5      	adds	r5, r2, r3
 800e152:	42ac      	cmp	r4, r5
 800e154:	d101      	bne.n	800e15a <__sfputs_r+0x12>
 800e156:	2000      	movs	r0, #0
 800e158:	e007      	b.n	800e16a <__sfputs_r+0x22>
 800e15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e15e:	463a      	mov	r2, r7
 800e160:	4630      	mov	r0, r6
 800e162:	f7ff ffda 	bl	800e11a <__sfputc_r>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d1f3      	bne.n	800e152 <__sfputs_r+0xa>
 800e16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e16c <_vfiprintf_r>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	460d      	mov	r5, r1
 800e172:	b09d      	sub	sp, #116	@ 0x74
 800e174:	4614      	mov	r4, r2
 800e176:	4698      	mov	r8, r3
 800e178:	4606      	mov	r6, r0
 800e17a:	b118      	cbz	r0, 800e184 <_vfiprintf_r+0x18>
 800e17c:	6a03      	ldr	r3, [r0, #32]
 800e17e:	b90b      	cbnz	r3, 800e184 <_vfiprintf_r+0x18>
 800e180:	f7fc fdc4 	bl	800ad0c <__sinit>
 800e184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e186:	07d9      	lsls	r1, r3, #31
 800e188:	d405      	bmi.n	800e196 <_vfiprintf_r+0x2a>
 800e18a:	89ab      	ldrh	r3, [r5, #12]
 800e18c:	059a      	lsls	r2, r3, #22
 800e18e:	d402      	bmi.n	800e196 <_vfiprintf_r+0x2a>
 800e190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e192:	f7fc ff00 	bl	800af96 <__retarget_lock_acquire_recursive>
 800e196:	89ab      	ldrh	r3, [r5, #12]
 800e198:	071b      	lsls	r3, r3, #28
 800e19a:	d501      	bpl.n	800e1a0 <_vfiprintf_r+0x34>
 800e19c:	692b      	ldr	r3, [r5, #16]
 800e19e:	b99b      	cbnz	r3, 800e1c8 <_vfiprintf_r+0x5c>
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f000 f938 	bl	800e418 <__swsetup_r>
 800e1a8:	b170      	cbz	r0, 800e1c8 <_vfiprintf_r+0x5c>
 800e1aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1ac:	07dc      	lsls	r4, r3, #31
 800e1ae:	d504      	bpl.n	800e1ba <_vfiprintf_r+0x4e>
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b4:	b01d      	add	sp, #116	@ 0x74
 800e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	89ab      	ldrh	r3, [r5, #12]
 800e1bc:	0598      	lsls	r0, r3, #22
 800e1be:	d4f7      	bmi.n	800e1b0 <_vfiprintf_r+0x44>
 800e1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1c2:	f7fc fee9 	bl	800af98 <__retarget_lock_release_recursive>
 800e1c6:	e7f3      	b.n	800e1b0 <_vfiprintf_r+0x44>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1cc:	2320      	movs	r3, #32
 800e1ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1d6:	2330      	movs	r3, #48	@ 0x30
 800e1d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e388 <_vfiprintf_r+0x21c>
 800e1dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1e0:	f04f 0901 	mov.w	r9, #1
 800e1e4:	4623      	mov	r3, r4
 800e1e6:	469a      	mov	sl, r3
 800e1e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ec:	b10a      	cbz	r2, 800e1f2 <_vfiprintf_r+0x86>
 800e1ee:	2a25      	cmp	r2, #37	@ 0x25
 800e1f0:	d1f9      	bne.n	800e1e6 <_vfiprintf_r+0x7a>
 800e1f2:	ebba 0b04 	subs.w	fp, sl, r4
 800e1f6:	d00b      	beq.n	800e210 <_vfiprintf_r+0xa4>
 800e1f8:	465b      	mov	r3, fp
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff ffa2 	bl	800e148 <__sfputs_r>
 800e204:	3001      	adds	r0, #1
 800e206:	f000 80a7 	beq.w	800e358 <_vfiprintf_r+0x1ec>
 800e20a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e20c:	445a      	add	r2, fp
 800e20e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e210:	f89a 3000 	ldrb.w	r3, [sl]
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 809f 	beq.w	800e358 <_vfiprintf_r+0x1ec>
 800e21a:	2300      	movs	r3, #0
 800e21c:	f04f 32ff 	mov.w	r2, #4294967295
 800e220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e224:	f10a 0a01 	add.w	sl, sl, #1
 800e228:	9304      	str	r3, [sp, #16]
 800e22a:	9307      	str	r3, [sp, #28]
 800e22c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e230:	931a      	str	r3, [sp, #104]	@ 0x68
 800e232:	4654      	mov	r4, sl
 800e234:	2205      	movs	r2, #5
 800e236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23a:	4853      	ldr	r0, [pc, #332]	@ (800e388 <_vfiprintf_r+0x21c>)
 800e23c:	f7f1 ffd8 	bl	80001f0 <memchr>
 800e240:	9a04      	ldr	r2, [sp, #16]
 800e242:	b9d8      	cbnz	r0, 800e27c <_vfiprintf_r+0x110>
 800e244:	06d1      	lsls	r1, r2, #27
 800e246:	bf44      	itt	mi
 800e248:	2320      	movmi	r3, #32
 800e24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e24e:	0713      	lsls	r3, r2, #28
 800e250:	bf44      	itt	mi
 800e252:	232b      	movmi	r3, #43	@ 0x2b
 800e254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e258:	f89a 3000 	ldrb.w	r3, [sl]
 800e25c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e25e:	d015      	beq.n	800e28c <_vfiprintf_r+0x120>
 800e260:	9a07      	ldr	r2, [sp, #28]
 800e262:	4654      	mov	r4, sl
 800e264:	2000      	movs	r0, #0
 800e266:	f04f 0c0a 	mov.w	ip, #10
 800e26a:	4621      	mov	r1, r4
 800e26c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e270:	3b30      	subs	r3, #48	@ 0x30
 800e272:	2b09      	cmp	r3, #9
 800e274:	d94b      	bls.n	800e30e <_vfiprintf_r+0x1a2>
 800e276:	b1b0      	cbz	r0, 800e2a6 <_vfiprintf_r+0x13a>
 800e278:	9207      	str	r2, [sp, #28]
 800e27a:	e014      	b.n	800e2a6 <_vfiprintf_r+0x13a>
 800e27c:	eba0 0308 	sub.w	r3, r0, r8
 800e280:	fa09 f303 	lsl.w	r3, r9, r3
 800e284:	4313      	orrs	r3, r2
 800e286:	9304      	str	r3, [sp, #16]
 800e288:	46a2      	mov	sl, r4
 800e28a:	e7d2      	b.n	800e232 <_vfiprintf_r+0xc6>
 800e28c:	9b03      	ldr	r3, [sp, #12]
 800e28e:	1d19      	adds	r1, r3, #4
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	9103      	str	r1, [sp, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	bfbb      	ittet	lt
 800e298:	425b      	neglt	r3, r3
 800e29a:	f042 0202 	orrlt.w	r2, r2, #2
 800e29e:	9307      	strge	r3, [sp, #28]
 800e2a0:	9307      	strlt	r3, [sp, #28]
 800e2a2:	bfb8      	it	lt
 800e2a4:	9204      	strlt	r2, [sp, #16]
 800e2a6:	7823      	ldrb	r3, [r4, #0]
 800e2a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2aa:	d10a      	bne.n	800e2c2 <_vfiprintf_r+0x156>
 800e2ac:	7863      	ldrb	r3, [r4, #1]
 800e2ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2b0:	d132      	bne.n	800e318 <_vfiprintf_r+0x1ac>
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	1d1a      	adds	r2, r3, #4
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	9203      	str	r2, [sp, #12]
 800e2ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2be:	3402      	adds	r4, #2
 800e2c0:	9305      	str	r3, [sp, #20]
 800e2c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e398 <_vfiprintf_r+0x22c>
 800e2c6:	7821      	ldrb	r1, [r4, #0]
 800e2c8:	2203      	movs	r2, #3
 800e2ca:	4650      	mov	r0, sl
 800e2cc:	f7f1 ff90 	bl	80001f0 <memchr>
 800e2d0:	b138      	cbz	r0, 800e2e2 <_vfiprintf_r+0x176>
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	eba0 000a 	sub.w	r0, r0, sl
 800e2d8:	2240      	movs	r2, #64	@ 0x40
 800e2da:	4082      	lsls	r2, r0
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	3401      	adds	r4, #1
 800e2e0:	9304      	str	r3, [sp, #16]
 800e2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e6:	4829      	ldr	r0, [pc, #164]	@ (800e38c <_vfiprintf_r+0x220>)
 800e2e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2ec:	2206      	movs	r2, #6
 800e2ee:	f7f1 ff7f 	bl	80001f0 <memchr>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d03f      	beq.n	800e376 <_vfiprintf_r+0x20a>
 800e2f6:	4b26      	ldr	r3, [pc, #152]	@ (800e390 <_vfiprintf_r+0x224>)
 800e2f8:	bb1b      	cbnz	r3, 800e342 <_vfiprintf_r+0x1d6>
 800e2fa:	9b03      	ldr	r3, [sp, #12]
 800e2fc:	3307      	adds	r3, #7
 800e2fe:	f023 0307 	bic.w	r3, r3, #7
 800e302:	3308      	adds	r3, #8
 800e304:	9303      	str	r3, [sp, #12]
 800e306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e308:	443b      	add	r3, r7
 800e30a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e30c:	e76a      	b.n	800e1e4 <_vfiprintf_r+0x78>
 800e30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e312:	460c      	mov	r4, r1
 800e314:	2001      	movs	r0, #1
 800e316:	e7a8      	b.n	800e26a <_vfiprintf_r+0xfe>
 800e318:	2300      	movs	r3, #0
 800e31a:	3401      	adds	r4, #1
 800e31c:	9305      	str	r3, [sp, #20]
 800e31e:	4619      	mov	r1, r3
 800e320:	f04f 0c0a 	mov.w	ip, #10
 800e324:	4620      	mov	r0, r4
 800e326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e32a:	3a30      	subs	r2, #48	@ 0x30
 800e32c:	2a09      	cmp	r2, #9
 800e32e:	d903      	bls.n	800e338 <_vfiprintf_r+0x1cc>
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0c6      	beq.n	800e2c2 <_vfiprintf_r+0x156>
 800e334:	9105      	str	r1, [sp, #20]
 800e336:	e7c4      	b.n	800e2c2 <_vfiprintf_r+0x156>
 800e338:	fb0c 2101 	mla	r1, ip, r1, r2
 800e33c:	4604      	mov	r4, r0
 800e33e:	2301      	movs	r3, #1
 800e340:	e7f0      	b.n	800e324 <_vfiprintf_r+0x1b8>
 800e342:	ab03      	add	r3, sp, #12
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	462a      	mov	r2, r5
 800e348:	4b12      	ldr	r3, [pc, #72]	@ (800e394 <_vfiprintf_r+0x228>)
 800e34a:	a904      	add	r1, sp, #16
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7fb fe85 	bl	800a05c <_printf_float>
 800e352:	4607      	mov	r7, r0
 800e354:	1c78      	adds	r0, r7, #1
 800e356:	d1d6      	bne.n	800e306 <_vfiprintf_r+0x19a>
 800e358:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e35a:	07d9      	lsls	r1, r3, #31
 800e35c:	d405      	bmi.n	800e36a <_vfiprintf_r+0x1fe>
 800e35e:	89ab      	ldrh	r3, [r5, #12]
 800e360:	059a      	lsls	r2, r3, #22
 800e362:	d402      	bmi.n	800e36a <_vfiprintf_r+0x1fe>
 800e364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e366:	f7fc fe17 	bl	800af98 <__retarget_lock_release_recursive>
 800e36a:	89ab      	ldrh	r3, [r5, #12]
 800e36c:	065b      	lsls	r3, r3, #25
 800e36e:	f53f af1f 	bmi.w	800e1b0 <_vfiprintf_r+0x44>
 800e372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e374:	e71e      	b.n	800e1b4 <_vfiprintf_r+0x48>
 800e376:	ab03      	add	r3, sp, #12
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	462a      	mov	r2, r5
 800e37c:	4b05      	ldr	r3, [pc, #20]	@ (800e394 <_vfiprintf_r+0x228>)
 800e37e:	a904      	add	r1, sp, #16
 800e380:	4630      	mov	r0, r6
 800e382:	f7fc f903 	bl	800a58c <_printf_i>
 800e386:	e7e4      	b.n	800e352 <_vfiprintf_r+0x1e6>
 800e388:	08012731 	.word	0x08012731
 800e38c:	0801273b 	.word	0x0801273b
 800e390:	0800a05d 	.word	0x0800a05d
 800e394:	0800e149 	.word	0x0800e149
 800e398:	08012737 	.word	0x08012737

0800e39c <__swbuf_r>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	460e      	mov	r6, r1
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	b118      	cbz	r0, 800e3ae <__swbuf_r+0x12>
 800e3a6:	6a03      	ldr	r3, [r0, #32]
 800e3a8:	b90b      	cbnz	r3, 800e3ae <__swbuf_r+0x12>
 800e3aa:	f7fc fcaf 	bl	800ad0c <__sinit>
 800e3ae:	69a3      	ldr	r3, [r4, #24]
 800e3b0:	60a3      	str	r3, [r4, #8]
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	071a      	lsls	r2, r3, #28
 800e3b6:	d501      	bpl.n	800e3bc <__swbuf_r+0x20>
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	b943      	cbnz	r3, 800e3ce <__swbuf_r+0x32>
 800e3bc:	4621      	mov	r1, r4
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f000 f82a 	bl	800e418 <__swsetup_r>
 800e3c4:	b118      	cbz	r0, 800e3ce <__swbuf_r+0x32>
 800e3c6:	f04f 37ff 	mov.w	r7, #4294967295
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	6922      	ldr	r2, [r4, #16]
 800e3d2:	1a98      	subs	r0, r3, r2
 800e3d4:	6963      	ldr	r3, [r4, #20]
 800e3d6:	b2f6      	uxtb	r6, r6
 800e3d8:	4283      	cmp	r3, r0
 800e3da:	4637      	mov	r7, r6
 800e3dc:	dc05      	bgt.n	800e3ea <__swbuf_r+0x4e>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f7ff fa3f 	bl	800d864 <_fflush_r>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d1ed      	bne.n	800e3c6 <__swbuf_r+0x2a>
 800e3ea:	68a3      	ldr	r3, [r4, #8]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	60a3      	str	r3, [r4, #8]
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	6022      	str	r2, [r4, #0]
 800e3f6:	701e      	strb	r6, [r3, #0]
 800e3f8:	6962      	ldr	r2, [r4, #20]
 800e3fa:	1c43      	adds	r3, r0, #1
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d004      	beq.n	800e40a <__swbuf_r+0x6e>
 800e400:	89a3      	ldrh	r3, [r4, #12]
 800e402:	07db      	lsls	r3, r3, #31
 800e404:	d5e1      	bpl.n	800e3ca <__swbuf_r+0x2e>
 800e406:	2e0a      	cmp	r6, #10
 800e408:	d1df      	bne.n	800e3ca <__swbuf_r+0x2e>
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f7ff fa29 	bl	800d864 <_fflush_r>
 800e412:	2800      	cmp	r0, #0
 800e414:	d0d9      	beq.n	800e3ca <__swbuf_r+0x2e>
 800e416:	e7d6      	b.n	800e3c6 <__swbuf_r+0x2a>

0800e418 <__swsetup_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4b29      	ldr	r3, [pc, #164]	@ (800e4c0 <__swsetup_r+0xa8>)
 800e41c:	4605      	mov	r5, r0
 800e41e:	6818      	ldr	r0, [r3, #0]
 800e420:	460c      	mov	r4, r1
 800e422:	b118      	cbz	r0, 800e42c <__swsetup_r+0x14>
 800e424:	6a03      	ldr	r3, [r0, #32]
 800e426:	b90b      	cbnz	r3, 800e42c <__swsetup_r+0x14>
 800e428:	f7fc fc70 	bl	800ad0c <__sinit>
 800e42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e430:	0719      	lsls	r1, r3, #28
 800e432:	d422      	bmi.n	800e47a <__swsetup_r+0x62>
 800e434:	06da      	lsls	r2, r3, #27
 800e436:	d407      	bmi.n	800e448 <__swsetup_r+0x30>
 800e438:	2209      	movs	r2, #9
 800e43a:	602a      	str	r2, [r5, #0]
 800e43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	f04f 30ff 	mov.w	r0, #4294967295
 800e446:	e033      	b.n	800e4b0 <__swsetup_r+0x98>
 800e448:	0758      	lsls	r0, r3, #29
 800e44a:	d512      	bpl.n	800e472 <__swsetup_r+0x5a>
 800e44c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e44e:	b141      	cbz	r1, 800e462 <__swsetup_r+0x4a>
 800e450:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e454:	4299      	cmp	r1, r3
 800e456:	d002      	beq.n	800e45e <__swsetup_r+0x46>
 800e458:	4628      	mov	r0, r5
 800e45a:	f7fd fbf1 	bl	800bc40 <_free_r>
 800e45e:	2300      	movs	r3, #0
 800e460:	6363      	str	r3, [r4, #52]	@ 0x34
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e468:	81a3      	strh	r3, [r4, #12]
 800e46a:	2300      	movs	r3, #0
 800e46c:	6063      	str	r3, [r4, #4]
 800e46e:	6923      	ldr	r3, [r4, #16]
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	f043 0308 	orr.w	r3, r3, #8
 800e478:	81a3      	strh	r3, [r4, #12]
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	b94b      	cbnz	r3, 800e492 <__swsetup_r+0x7a>
 800e47e:	89a3      	ldrh	r3, [r4, #12]
 800e480:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e488:	d003      	beq.n	800e492 <__swsetup_r+0x7a>
 800e48a:	4621      	mov	r1, r4
 800e48c:	4628      	mov	r0, r5
 800e48e:	f000 f883 	bl	800e598 <__smakebuf_r>
 800e492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e496:	f013 0201 	ands.w	r2, r3, #1
 800e49a:	d00a      	beq.n	800e4b2 <__swsetup_r+0x9a>
 800e49c:	2200      	movs	r2, #0
 800e49e:	60a2      	str	r2, [r4, #8]
 800e4a0:	6962      	ldr	r2, [r4, #20]
 800e4a2:	4252      	negs	r2, r2
 800e4a4:	61a2      	str	r2, [r4, #24]
 800e4a6:	6922      	ldr	r2, [r4, #16]
 800e4a8:	b942      	cbnz	r2, 800e4bc <__swsetup_r+0xa4>
 800e4aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e4ae:	d1c5      	bne.n	800e43c <__swsetup_r+0x24>
 800e4b0:	bd38      	pop	{r3, r4, r5, pc}
 800e4b2:	0799      	lsls	r1, r3, #30
 800e4b4:	bf58      	it	pl
 800e4b6:	6962      	ldrpl	r2, [r4, #20]
 800e4b8:	60a2      	str	r2, [r4, #8]
 800e4ba:	e7f4      	b.n	800e4a6 <__swsetup_r+0x8e>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	e7f7      	b.n	800e4b0 <__swsetup_r+0x98>
 800e4c0:	20000104 	.word	0x20000104

0800e4c4 <_raise_r>:
 800e4c4:	291f      	cmp	r1, #31
 800e4c6:	b538      	push	{r3, r4, r5, lr}
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	d904      	bls.n	800e4d8 <_raise_r+0x14>
 800e4ce:	2316      	movs	r3, #22
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d6:	bd38      	pop	{r3, r4, r5, pc}
 800e4d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e4da:	b112      	cbz	r2, 800e4e2 <_raise_r+0x1e>
 800e4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4e0:	b94b      	cbnz	r3, 800e4f6 <_raise_r+0x32>
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f000 f830 	bl	800e548 <_getpid_r>
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4f2:	f000 b817 	b.w	800e524 <_kill_r>
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d00a      	beq.n	800e510 <_raise_r+0x4c>
 800e4fa:	1c59      	adds	r1, r3, #1
 800e4fc:	d103      	bne.n	800e506 <_raise_r+0x42>
 800e4fe:	2316      	movs	r3, #22
 800e500:	6003      	str	r3, [r0, #0]
 800e502:	2001      	movs	r0, #1
 800e504:	e7e7      	b.n	800e4d6 <_raise_r+0x12>
 800e506:	2100      	movs	r1, #0
 800e508:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e50c:	4620      	mov	r0, r4
 800e50e:	4798      	blx	r3
 800e510:	2000      	movs	r0, #0
 800e512:	e7e0      	b.n	800e4d6 <_raise_r+0x12>

0800e514 <raise>:
 800e514:	4b02      	ldr	r3, [pc, #8]	@ (800e520 <raise+0xc>)
 800e516:	4601      	mov	r1, r0
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	f7ff bfd3 	b.w	800e4c4 <_raise_r>
 800e51e:	bf00      	nop
 800e520:	20000104 	.word	0x20000104

0800e524 <_kill_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d07      	ldr	r5, [pc, #28]	@ (800e544 <_kill_r+0x20>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	602b      	str	r3, [r5, #0]
 800e532:	f000 fb4f 	bl	800ebd4 <_kill>
 800e536:	1c43      	adds	r3, r0, #1
 800e538:	d102      	bne.n	800e540 <_kill_r+0x1c>
 800e53a:	682b      	ldr	r3, [r5, #0]
 800e53c:	b103      	cbz	r3, 800e540 <_kill_r+0x1c>
 800e53e:	6023      	str	r3, [r4, #0]
 800e540:	bd38      	pop	{r3, r4, r5, pc}
 800e542:	bf00      	nop
 800e544:	200009b8 	.word	0x200009b8

0800e548 <_getpid_r>:
 800e548:	f000 bb34 	b.w	800ebb4 <_getpid>

0800e54c <__swhatbuf_r>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	460c      	mov	r4, r1
 800e550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e554:	2900      	cmp	r1, #0
 800e556:	b096      	sub	sp, #88	@ 0x58
 800e558:	4615      	mov	r5, r2
 800e55a:	461e      	mov	r6, r3
 800e55c:	da0d      	bge.n	800e57a <__swhatbuf_r+0x2e>
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e564:	f04f 0100 	mov.w	r1, #0
 800e568:	bf14      	ite	ne
 800e56a:	2340      	movne	r3, #64	@ 0x40
 800e56c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e570:	2000      	movs	r0, #0
 800e572:	6031      	str	r1, [r6, #0]
 800e574:	602b      	str	r3, [r5, #0]
 800e576:	b016      	add	sp, #88	@ 0x58
 800e578:	bd70      	pop	{r4, r5, r6, pc}
 800e57a:	466a      	mov	r2, sp
 800e57c:	f000 f848 	bl	800e610 <_fstat_r>
 800e580:	2800      	cmp	r0, #0
 800e582:	dbec      	blt.n	800e55e <__swhatbuf_r+0x12>
 800e584:	9901      	ldr	r1, [sp, #4]
 800e586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e58a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e58e:	4259      	negs	r1, r3
 800e590:	4159      	adcs	r1, r3
 800e592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e596:	e7eb      	b.n	800e570 <__swhatbuf_r+0x24>

0800e598 <__smakebuf_r>:
 800e598:	898b      	ldrh	r3, [r1, #12]
 800e59a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e59c:	079d      	lsls	r5, r3, #30
 800e59e:	4606      	mov	r6, r0
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	d507      	bpl.n	800e5b4 <__smakebuf_r+0x1c>
 800e5a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	6123      	str	r3, [r4, #16]
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	6163      	str	r3, [r4, #20]
 800e5b0:	b003      	add	sp, #12
 800e5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b4:	ab01      	add	r3, sp, #4
 800e5b6:	466a      	mov	r2, sp
 800e5b8:	f7ff ffc8 	bl	800e54c <__swhatbuf_r>
 800e5bc:	9f00      	ldr	r7, [sp, #0]
 800e5be:	4605      	mov	r5, r0
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7fd fbb0 	bl	800bd28 <_malloc_r>
 800e5c8:	b948      	cbnz	r0, 800e5de <__smakebuf_r+0x46>
 800e5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ce:	059a      	lsls	r2, r3, #22
 800e5d0:	d4ee      	bmi.n	800e5b0 <__smakebuf_r+0x18>
 800e5d2:	f023 0303 	bic.w	r3, r3, #3
 800e5d6:	f043 0302 	orr.w	r3, r3, #2
 800e5da:	81a3      	strh	r3, [r4, #12]
 800e5dc:	e7e2      	b.n	800e5a4 <__smakebuf_r+0xc>
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	6020      	str	r0, [r4, #0]
 800e5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e6:	81a3      	strh	r3, [r4, #12]
 800e5e8:	9b01      	ldr	r3, [sp, #4]
 800e5ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5ee:	b15b      	cbz	r3, 800e608 <__smakebuf_r+0x70>
 800e5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f000 f81d 	bl	800e634 <_isatty_r>
 800e5fa:	b128      	cbz	r0, 800e608 <__smakebuf_r+0x70>
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	f023 0303 	bic.w	r3, r3, #3
 800e602:	f043 0301 	orr.w	r3, r3, #1
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	89a3      	ldrh	r3, [r4, #12]
 800e60a:	431d      	orrs	r5, r3
 800e60c:	81a5      	strh	r5, [r4, #12]
 800e60e:	e7cf      	b.n	800e5b0 <__smakebuf_r+0x18>

0800e610 <_fstat_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4d07      	ldr	r5, [pc, #28]	@ (800e630 <_fstat_r+0x20>)
 800e614:	2300      	movs	r3, #0
 800e616:	4604      	mov	r4, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	4611      	mov	r1, r2
 800e61c:	602b      	str	r3, [r5, #0]
 800e61e:	f000 fac1 	bl	800eba4 <_fstat>
 800e622:	1c43      	adds	r3, r0, #1
 800e624:	d102      	bne.n	800e62c <_fstat_r+0x1c>
 800e626:	682b      	ldr	r3, [r5, #0]
 800e628:	b103      	cbz	r3, 800e62c <_fstat_r+0x1c>
 800e62a:	6023      	str	r3, [r4, #0]
 800e62c:	bd38      	pop	{r3, r4, r5, pc}
 800e62e:	bf00      	nop
 800e630:	200009b8 	.word	0x200009b8

0800e634 <_isatty_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d06      	ldr	r5, [pc, #24]	@ (800e650 <_isatty_r+0x1c>)
 800e638:	2300      	movs	r3, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	4608      	mov	r0, r1
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	f000 fac0 	bl	800ebc4 <_isatty>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_isatty_r+0x1a>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_isatty_r+0x1a>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	200009b8 	.word	0x200009b8

0800e654 <sqrt>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	ed2d 8b02 	vpush	{d8}
 800e65a:	ec55 4b10 	vmov	r4, r5, d0
 800e65e:	f000 f9c7 	bl	800e9f0 <__ieee754_sqrt>
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	4620      	mov	r0, r4
 800e668:	4629      	mov	r1, r5
 800e66a:	eeb0 8a40 	vmov.f32	s16, s0
 800e66e:	eef0 8a60 	vmov.f32	s17, s1
 800e672:	f7f2 fa6b 	bl	8000b4c <__aeabi_dcmpun>
 800e676:	b990      	cbnz	r0, 800e69e <sqrt+0x4a>
 800e678:	2200      	movs	r2, #0
 800e67a:	2300      	movs	r3, #0
 800e67c:	4620      	mov	r0, r4
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f2 fa3c 	bl	8000afc <__aeabi_dcmplt>
 800e684:	b158      	cbz	r0, 800e69e <sqrt+0x4a>
 800e686:	f7ff f951 	bl	800d92c <__errno>
 800e68a:	2321      	movs	r3, #33	@ 0x21
 800e68c:	6003      	str	r3, [r0, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	2300      	movs	r3, #0
 800e692:	4610      	mov	r0, r2
 800e694:	4619      	mov	r1, r3
 800e696:	f7f2 f8e9 	bl	800086c <__aeabi_ddiv>
 800e69a:	ec41 0b18 	vmov	d8, r0, r1
 800e69e:	eeb0 0a48 	vmov.f32	s0, s16
 800e6a2:	eef0 0a68 	vmov.f32	s1, s17
 800e6a6:	ecbd 8b02 	vpop	{d8}
 800e6aa:	bd38      	pop	{r3, r4, r5, pc}
 800e6ac:	0000      	movs	r0, r0
	...

0800e6b0 <atan>:
 800e6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	ec55 4b10 	vmov	r4, r5, d0
 800e6b8:	4bbf      	ldr	r3, [pc, #764]	@ (800e9b8 <atan+0x308>)
 800e6ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e6be:	429e      	cmp	r6, r3
 800e6c0:	46ab      	mov	fp, r5
 800e6c2:	d918      	bls.n	800e6f6 <atan+0x46>
 800e6c4:	4bbd      	ldr	r3, [pc, #756]	@ (800e9bc <atan+0x30c>)
 800e6c6:	429e      	cmp	r6, r3
 800e6c8:	d801      	bhi.n	800e6ce <atan+0x1e>
 800e6ca:	d109      	bne.n	800e6e0 <atan+0x30>
 800e6cc:	b144      	cbz	r4, 800e6e0 <atan+0x30>
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	f7f1 fde9 	bl	80002ac <__adddf3>
 800e6da:	4604      	mov	r4, r0
 800e6dc:	460d      	mov	r5, r1
 800e6de:	e006      	b.n	800e6ee <atan+0x3e>
 800e6e0:	f1bb 0f00 	cmp.w	fp, #0
 800e6e4:	f340 812b 	ble.w	800e93e <atan+0x28e>
 800e6e8:	a597      	add	r5, pc, #604	@ (adr r5, 800e948 <atan+0x298>)
 800e6ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e6ee:	ec45 4b10 	vmov	d0, r4, r5
 800e6f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f6:	4bb2      	ldr	r3, [pc, #712]	@ (800e9c0 <atan+0x310>)
 800e6f8:	429e      	cmp	r6, r3
 800e6fa:	d813      	bhi.n	800e724 <atan+0x74>
 800e6fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e700:	429e      	cmp	r6, r3
 800e702:	d80c      	bhi.n	800e71e <atan+0x6e>
 800e704:	a392      	add	r3, pc, #584	@ (adr r3, 800e950 <atan+0x2a0>)
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	4620      	mov	r0, r4
 800e70c:	4629      	mov	r1, r5
 800e70e:	f7f1 fdcd 	bl	80002ac <__adddf3>
 800e712:	4bac      	ldr	r3, [pc, #688]	@ (800e9c4 <atan+0x314>)
 800e714:	2200      	movs	r2, #0
 800e716:	f7f2 fa0f 	bl	8000b38 <__aeabi_dcmpgt>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d1e7      	bne.n	800e6ee <atan+0x3e>
 800e71e:	f04f 3aff 	mov.w	sl, #4294967295
 800e722:	e029      	b.n	800e778 <atan+0xc8>
 800e724:	f000 f95c 	bl	800e9e0 <fabs>
 800e728:	4ba7      	ldr	r3, [pc, #668]	@ (800e9c8 <atan+0x318>)
 800e72a:	429e      	cmp	r6, r3
 800e72c:	ec55 4b10 	vmov	r4, r5, d0
 800e730:	f200 80bc 	bhi.w	800e8ac <atan+0x1fc>
 800e734:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e738:	429e      	cmp	r6, r3
 800e73a:	f200 809e 	bhi.w	800e87a <atan+0x1ca>
 800e73e:	4622      	mov	r2, r4
 800e740:	462b      	mov	r3, r5
 800e742:	4620      	mov	r0, r4
 800e744:	4629      	mov	r1, r5
 800e746:	f7f1 fdb1 	bl	80002ac <__adddf3>
 800e74a:	4b9e      	ldr	r3, [pc, #632]	@ (800e9c4 <atan+0x314>)
 800e74c:	2200      	movs	r2, #0
 800e74e:	f7f1 fdab 	bl	80002a8 <__aeabi_dsub>
 800e752:	2200      	movs	r2, #0
 800e754:	4606      	mov	r6, r0
 800e756:	460f      	mov	r7, r1
 800e758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f1 fda4 	bl	80002ac <__adddf3>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4630      	mov	r0, r6
 800e76a:	4639      	mov	r1, r7
 800e76c:	f7f2 f87e 	bl	800086c <__aeabi_ddiv>
 800e770:	f04f 0a00 	mov.w	sl, #0
 800e774:	4604      	mov	r4, r0
 800e776:	460d      	mov	r5, r1
 800e778:	4622      	mov	r2, r4
 800e77a:	462b      	mov	r3, r5
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 ff4a 	bl	8000618 <__aeabi_dmul>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4680      	mov	r8, r0
 800e78a:	4689      	mov	r9, r1
 800e78c:	f7f1 ff44 	bl	8000618 <__aeabi_dmul>
 800e790:	a371      	add	r3, pc, #452	@ (adr r3, 800e958 <atan+0x2a8>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	4606      	mov	r6, r0
 800e798:	460f      	mov	r7, r1
 800e79a:	f7f1 ff3d 	bl	8000618 <__aeabi_dmul>
 800e79e:	a370      	add	r3, pc, #448	@ (adr r3, 800e960 <atan+0x2b0>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	f7f1 fd82 	bl	80002ac <__adddf3>
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	f7f1 ff34 	bl	8000618 <__aeabi_dmul>
 800e7b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800e968 <atan+0x2b8>)
 800e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b6:	f7f1 fd79 	bl	80002ac <__adddf3>
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	463b      	mov	r3, r7
 800e7be:	f7f1 ff2b 	bl	8000618 <__aeabi_dmul>
 800e7c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e970 <atan+0x2c0>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	f7f1 fd70 	bl	80002ac <__adddf3>
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	463b      	mov	r3, r7
 800e7d0:	f7f1 ff22 	bl	8000618 <__aeabi_dmul>
 800e7d4:	a368      	add	r3, pc, #416	@ (adr r3, 800e978 <atan+0x2c8>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	f7f1 fd67 	bl	80002ac <__adddf3>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	f7f1 ff19 	bl	8000618 <__aeabi_dmul>
 800e7e6:	a366      	add	r3, pc, #408	@ (adr r3, 800e980 <atan+0x2d0>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f1 fd5e 	bl	80002ac <__adddf3>
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	f7f1 ff10 	bl	8000618 <__aeabi_dmul>
 800e7f8:	a363      	add	r3, pc, #396	@ (adr r3, 800e988 <atan+0x2d8>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	4680      	mov	r8, r0
 800e800:	4689      	mov	r9, r1
 800e802:	4630      	mov	r0, r6
 800e804:	4639      	mov	r1, r7
 800e806:	f7f1 ff07 	bl	8000618 <__aeabi_dmul>
 800e80a:	a361      	add	r3, pc, #388	@ (adr r3, 800e990 <atan+0x2e0>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 fd4a 	bl	80002a8 <__aeabi_dsub>
 800e814:	4632      	mov	r2, r6
 800e816:	463b      	mov	r3, r7
 800e818:	f7f1 fefe 	bl	8000618 <__aeabi_dmul>
 800e81c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e998 <atan+0x2e8>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f1 fd41 	bl	80002a8 <__aeabi_dsub>
 800e826:	4632      	mov	r2, r6
 800e828:	463b      	mov	r3, r7
 800e82a:	f7f1 fef5 	bl	8000618 <__aeabi_dmul>
 800e82e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e9a0 <atan+0x2f0>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fd38 	bl	80002a8 <__aeabi_dsub>
 800e838:	4632      	mov	r2, r6
 800e83a:	463b      	mov	r3, r7
 800e83c:	f7f1 feec 	bl	8000618 <__aeabi_dmul>
 800e840:	a359      	add	r3, pc, #356	@ (adr r3, 800e9a8 <atan+0x2f8>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 fd2f 	bl	80002a8 <__aeabi_dsub>
 800e84a:	4632      	mov	r2, r6
 800e84c:	463b      	mov	r3, r7
 800e84e:	f7f1 fee3 	bl	8000618 <__aeabi_dmul>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4640      	mov	r0, r8
 800e858:	4649      	mov	r1, r9
 800e85a:	f7f1 fd27 	bl	80002ac <__adddf3>
 800e85e:	4622      	mov	r2, r4
 800e860:	462b      	mov	r3, r5
 800e862:	f7f1 fed9 	bl	8000618 <__aeabi_dmul>
 800e866:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	d148      	bne.n	800e902 <atan+0x252>
 800e870:	4620      	mov	r0, r4
 800e872:	4629      	mov	r1, r5
 800e874:	f7f1 fd18 	bl	80002a8 <__aeabi_dsub>
 800e878:	e72f      	b.n	800e6da <atan+0x2a>
 800e87a:	4b52      	ldr	r3, [pc, #328]	@ (800e9c4 <atan+0x314>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	4620      	mov	r0, r4
 800e880:	4629      	mov	r1, r5
 800e882:	f7f1 fd11 	bl	80002a8 <__aeabi_dsub>
 800e886:	4b4f      	ldr	r3, [pc, #316]	@ (800e9c4 <atan+0x314>)
 800e888:	4606      	mov	r6, r0
 800e88a:	460f      	mov	r7, r1
 800e88c:	2200      	movs	r2, #0
 800e88e:	4620      	mov	r0, r4
 800e890:	4629      	mov	r1, r5
 800e892:	f7f1 fd0b 	bl	80002ac <__adddf3>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4630      	mov	r0, r6
 800e89c:	4639      	mov	r1, r7
 800e89e:	f7f1 ffe5 	bl	800086c <__aeabi_ddiv>
 800e8a2:	f04f 0a01 	mov.w	sl, #1
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	e765      	b.n	800e778 <atan+0xc8>
 800e8ac:	4b47      	ldr	r3, [pc, #284]	@ (800e9cc <atan+0x31c>)
 800e8ae:	429e      	cmp	r6, r3
 800e8b0:	d21c      	bcs.n	800e8ec <atan+0x23c>
 800e8b2:	4b47      	ldr	r3, [pc, #284]	@ (800e9d0 <atan+0x320>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f1 fcf5 	bl	80002a8 <__aeabi_dsub>
 800e8be:	4b44      	ldr	r3, [pc, #272]	@ (800e9d0 <atan+0x320>)
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	460f      	mov	r7, r1
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7f1 fea5 	bl	8000618 <__aeabi_dmul>
 800e8ce:	4b3d      	ldr	r3, [pc, #244]	@ (800e9c4 <atan+0x314>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f7f1 fceb 	bl	80002ac <__adddf3>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4630      	mov	r0, r6
 800e8dc:	4639      	mov	r1, r7
 800e8de:	f7f1 ffc5 	bl	800086c <__aeabi_ddiv>
 800e8e2:	f04f 0a02 	mov.w	sl, #2
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	460d      	mov	r5, r1
 800e8ea:	e745      	b.n	800e778 <atan+0xc8>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	4938      	ldr	r1, [pc, #224]	@ (800e9d4 <atan+0x324>)
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	f7f1 ffba 	bl	800086c <__aeabi_ddiv>
 800e8f8:	f04f 0a03 	mov.w	sl, #3
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	460d      	mov	r5, r1
 800e900:	e73a      	b.n	800e778 <atan+0xc8>
 800e902:	4b35      	ldr	r3, [pc, #212]	@ (800e9d8 <atan+0x328>)
 800e904:	4e35      	ldr	r6, [pc, #212]	@ (800e9dc <atan+0x32c>)
 800e906:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fccb 	bl	80002a8 <__aeabi_dsub>
 800e912:	4622      	mov	r2, r4
 800e914:	462b      	mov	r3, r5
 800e916:	f7f1 fcc7 	bl	80002a8 <__aeabi_dsub>
 800e91a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e926:	f7f1 fcbf 	bl	80002a8 <__aeabi_dsub>
 800e92a:	f1bb 0f00 	cmp.w	fp, #0
 800e92e:	4604      	mov	r4, r0
 800e930:	460d      	mov	r5, r1
 800e932:	f6bf aedc 	bge.w	800e6ee <atan+0x3e>
 800e936:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e93a:	461d      	mov	r5, r3
 800e93c:	e6d7      	b.n	800e6ee <atan+0x3e>
 800e93e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e9b0 <atan+0x300>)
 800e940:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e944:	e6d3      	b.n	800e6ee <atan+0x3e>
 800e946:	bf00      	nop
 800e948:	54442d18 	.word	0x54442d18
 800e94c:	3ff921fb 	.word	0x3ff921fb
 800e950:	8800759c 	.word	0x8800759c
 800e954:	7e37e43c 	.word	0x7e37e43c
 800e958:	e322da11 	.word	0xe322da11
 800e95c:	3f90ad3a 	.word	0x3f90ad3a
 800e960:	24760deb 	.word	0x24760deb
 800e964:	3fa97b4b 	.word	0x3fa97b4b
 800e968:	a0d03d51 	.word	0xa0d03d51
 800e96c:	3fb10d66 	.word	0x3fb10d66
 800e970:	c54c206e 	.word	0xc54c206e
 800e974:	3fb745cd 	.word	0x3fb745cd
 800e978:	920083ff 	.word	0x920083ff
 800e97c:	3fc24924 	.word	0x3fc24924
 800e980:	5555550d 	.word	0x5555550d
 800e984:	3fd55555 	.word	0x3fd55555
 800e988:	2c6a6c2f 	.word	0x2c6a6c2f
 800e98c:	bfa2b444 	.word	0xbfa2b444
 800e990:	52defd9a 	.word	0x52defd9a
 800e994:	3fadde2d 	.word	0x3fadde2d
 800e998:	af749a6d 	.word	0xaf749a6d
 800e99c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e9a0:	fe231671 	.word	0xfe231671
 800e9a4:	3fbc71c6 	.word	0x3fbc71c6
 800e9a8:	9998ebc4 	.word	0x9998ebc4
 800e9ac:	3fc99999 	.word	0x3fc99999
 800e9b0:	54442d18 	.word	0x54442d18
 800e9b4:	bff921fb 	.word	0xbff921fb
 800e9b8:	440fffff 	.word	0x440fffff
 800e9bc:	7ff00000 	.word	0x7ff00000
 800e9c0:	3fdbffff 	.word	0x3fdbffff
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	3ff2ffff 	.word	0x3ff2ffff
 800e9cc:	40038000 	.word	0x40038000
 800e9d0:	3ff80000 	.word	0x3ff80000
 800e9d4:	bff00000 	.word	0xbff00000
 800e9d8:	080127e8 	.word	0x080127e8
 800e9dc:	08012808 	.word	0x08012808

0800e9e0 <fabs>:
 800e9e0:	ec51 0b10 	vmov	r0, r1, d0
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e9ea:	ec43 2b10 	vmov	d0, r2, r3
 800e9ee:	4770      	bx	lr

0800e9f0 <__ieee754_sqrt>:
 800e9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	4a68      	ldr	r2, [pc, #416]	@ (800eb98 <__ieee754_sqrt+0x1a8>)
 800e9f6:	ec55 4b10 	vmov	r4, r5, d0
 800e9fa:	43aa      	bics	r2, r5
 800e9fc:	462b      	mov	r3, r5
 800e9fe:	4621      	mov	r1, r4
 800ea00:	d110      	bne.n	800ea24 <__ieee754_sqrt+0x34>
 800ea02:	4622      	mov	r2, r4
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fe06 	bl	8000618 <__aeabi_dmul>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4620      	mov	r0, r4
 800ea12:	4629      	mov	r1, r5
 800ea14:	f7f1 fc4a 	bl	80002ac <__adddf3>
 800ea18:	4604      	mov	r4, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	ec45 4b10 	vmov	d0, r4, r5
 800ea20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea24:	2d00      	cmp	r5, #0
 800ea26:	dc0e      	bgt.n	800ea46 <__ieee754_sqrt+0x56>
 800ea28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ea2c:	4322      	orrs	r2, r4
 800ea2e:	d0f5      	beq.n	800ea1c <__ieee754_sqrt+0x2c>
 800ea30:	b19d      	cbz	r5, 800ea5a <__ieee754_sqrt+0x6a>
 800ea32:	4622      	mov	r2, r4
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 fc36 	bl	80002a8 <__aeabi_dsub>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	f7f1 ff14 	bl	800086c <__aeabi_ddiv>
 800ea44:	e7e8      	b.n	800ea18 <__ieee754_sqrt+0x28>
 800ea46:	152a      	asrs	r2, r5, #20
 800ea48:	d115      	bne.n	800ea76 <__ieee754_sqrt+0x86>
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e009      	b.n	800ea62 <__ieee754_sqrt+0x72>
 800ea4e:	0acb      	lsrs	r3, r1, #11
 800ea50:	3a15      	subs	r2, #21
 800ea52:	0549      	lsls	r1, r1, #21
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d0fa      	beq.n	800ea4e <__ieee754_sqrt+0x5e>
 800ea58:	e7f7      	b.n	800ea4a <__ieee754_sqrt+0x5a>
 800ea5a:	462a      	mov	r2, r5
 800ea5c:	e7fa      	b.n	800ea54 <__ieee754_sqrt+0x64>
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	3001      	adds	r0, #1
 800ea62:	02dc      	lsls	r4, r3, #11
 800ea64:	d5fb      	bpl.n	800ea5e <__ieee754_sqrt+0x6e>
 800ea66:	1e44      	subs	r4, r0, #1
 800ea68:	1b12      	subs	r2, r2, r4
 800ea6a:	f1c0 0420 	rsb	r4, r0, #32
 800ea6e:	fa21 f404 	lsr.w	r4, r1, r4
 800ea72:	4323      	orrs	r3, r4
 800ea74:	4081      	lsls	r1, r0
 800ea76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ea7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea82:	07d2      	lsls	r2, r2, #31
 800ea84:	bf5c      	itt	pl
 800ea86:	005b      	lslpl	r3, r3, #1
 800ea88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ea8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea90:	bf58      	it	pl
 800ea92:	0049      	lslpl	r1, r1, #1
 800ea94:	2600      	movs	r6, #0
 800ea96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ea9a:	106d      	asrs	r5, r5, #1
 800ea9c:	0049      	lsls	r1, r1, #1
 800ea9e:	2016      	movs	r0, #22
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eaa6:	1917      	adds	r7, r2, r4
 800eaa8:	429f      	cmp	r7, r3
 800eaaa:	bfde      	ittt	le
 800eaac:	193a      	addle	r2, r7, r4
 800eaae:	1bdb      	suble	r3, r3, r7
 800eab0:	1936      	addle	r6, r6, r4
 800eab2:	0fcf      	lsrs	r7, r1, #31
 800eab4:	3801      	subs	r0, #1
 800eab6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800eaba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eabe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eac2:	d1f0      	bne.n	800eaa6 <__ieee754_sqrt+0xb6>
 800eac4:	4604      	mov	r4, r0
 800eac6:	2720      	movs	r7, #32
 800eac8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eacc:	429a      	cmp	r2, r3
 800eace:	eb00 0e0c 	add.w	lr, r0, ip
 800ead2:	db02      	blt.n	800eada <__ieee754_sqrt+0xea>
 800ead4:	d113      	bne.n	800eafe <__ieee754_sqrt+0x10e>
 800ead6:	458e      	cmp	lr, r1
 800ead8:	d811      	bhi.n	800eafe <__ieee754_sqrt+0x10e>
 800eada:	f1be 0f00 	cmp.w	lr, #0
 800eade:	eb0e 000c 	add.w	r0, lr, ip
 800eae2:	da42      	bge.n	800eb6a <__ieee754_sqrt+0x17a>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	db40      	blt.n	800eb6a <__ieee754_sqrt+0x17a>
 800eae8:	f102 0801 	add.w	r8, r2, #1
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	458e      	cmp	lr, r1
 800eaf0:	bf88      	it	hi
 800eaf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800eaf6:	eba1 010e 	sub.w	r1, r1, lr
 800eafa:	4464      	add	r4, ip
 800eafc:	4642      	mov	r2, r8
 800eafe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800eb02:	3f01      	subs	r7, #1
 800eb04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800eb08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eb10:	d1dc      	bne.n	800eacc <__ieee754_sqrt+0xdc>
 800eb12:	4319      	orrs	r1, r3
 800eb14:	d01b      	beq.n	800eb4e <__ieee754_sqrt+0x15e>
 800eb16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800eb9c <__ieee754_sqrt+0x1ac>
 800eb1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800eba0 <__ieee754_sqrt+0x1b0>
 800eb1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800eb22:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb26:	f7f1 fbbf 	bl	80002a8 <__aeabi_dsub>
 800eb2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4640      	mov	r0, r8
 800eb34:	4649      	mov	r1, r9
 800eb36:	f7f1 ffeb 	bl	8000b10 <__aeabi_dcmple>
 800eb3a:	b140      	cbz	r0, 800eb4e <__ieee754_sqrt+0x15e>
 800eb3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800eb40:	e9da 0100 	ldrd	r0, r1, [sl]
 800eb44:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb48:	d111      	bne.n	800eb6e <__ieee754_sqrt+0x17e>
 800eb4a:	3601      	adds	r6, #1
 800eb4c:	463c      	mov	r4, r7
 800eb4e:	1072      	asrs	r2, r6, #1
 800eb50:	0863      	lsrs	r3, r4, #1
 800eb52:	07f1      	lsls	r1, r6, #31
 800eb54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800eb58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800eb5c:	bf48      	it	mi
 800eb5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800eb62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800eb66:	4618      	mov	r0, r3
 800eb68:	e756      	b.n	800ea18 <__ieee754_sqrt+0x28>
 800eb6a:	4690      	mov	r8, r2
 800eb6c:	e7be      	b.n	800eaec <__ieee754_sqrt+0xfc>
 800eb6e:	f7f1 fb9d 	bl	80002ac <__adddf3>
 800eb72:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	4649      	mov	r1, r9
 800eb7e:	f7f1 ffbd 	bl	8000afc <__aeabi_dcmplt>
 800eb82:	b120      	cbz	r0, 800eb8e <__ieee754_sqrt+0x19e>
 800eb84:	1ca0      	adds	r0, r4, #2
 800eb86:	bf08      	it	eq
 800eb88:	3601      	addeq	r6, #1
 800eb8a:	3402      	adds	r4, #2
 800eb8c:	e7df      	b.n	800eb4e <__ieee754_sqrt+0x15e>
 800eb8e:	1c63      	adds	r3, r4, #1
 800eb90:	f023 0401 	bic.w	r4, r3, #1
 800eb94:	e7db      	b.n	800eb4e <__ieee754_sqrt+0x15e>
 800eb96:	bf00      	nop
 800eb98:	7ff00000 	.word	0x7ff00000
 800eb9c:	200002c8 	.word	0x200002c8
 800eba0:	200002c0 	.word	0x200002c0

0800eba4 <_fstat>:
 800eba4:	4b02      	ldr	r3, [pc, #8]	@ (800ebb0 <_fstat+0xc>)
 800eba6:	2258      	movs	r2, #88	@ 0x58
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebae:	4770      	bx	lr
 800ebb0:	200009b8 	.word	0x200009b8

0800ebb4 <_getpid>:
 800ebb4:	4b02      	ldr	r3, [pc, #8]	@ (800ebc0 <_getpid+0xc>)
 800ebb6:	2258      	movs	r2, #88	@ 0x58
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	4770      	bx	lr
 800ebc0:	200009b8 	.word	0x200009b8

0800ebc4 <_isatty>:
 800ebc4:	4b02      	ldr	r3, [pc, #8]	@ (800ebd0 <_isatty+0xc>)
 800ebc6:	2258      	movs	r2, #88	@ 0x58
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	2000      	movs	r0, #0
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	200009b8 	.word	0x200009b8

0800ebd4 <_kill>:
 800ebd4:	4b02      	ldr	r3, [pc, #8]	@ (800ebe0 <_kill+0xc>)
 800ebd6:	2258      	movs	r2, #88	@ 0x58
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	f04f 30ff 	mov.w	r0, #4294967295
 800ebde:	4770      	bx	lr
 800ebe0:	200009b8 	.word	0x200009b8

0800ebe4 <_sbrk>:
 800ebe4:	4a04      	ldr	r2, [pc, #16]	@ (800ebf8 <_sbrk+0x14>)
 800ebe6:	6811      	ldr	r1, [r2, #0]
 800ebe8:	4603      	mov	r3, r0
 800ebea:	b909      	cbnz	r1, 800ebf0 <_sbrk+0xc>
 800ebec:	4903      	ldr	r1, [pc, #12]	@ (800ebfc <_sbrk+0x18>)
 800ebee:	6011      	str	r1, [r2, #0]
 800ebf0:	6810      	ldr	r0, [r2, #0]
 800ebf2:	4403      	add	r3, r0
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	4770      	bx	lr
 800ebf8:	200009c8 	.word	0x200009c8
 800ebfc:	200009d0 	.word	0x200009d0

0800ec00 <_exit>:
 800ec00:	e7fe      	b.n	800ec00 <_exit>
	...

0800ec04 <_init>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	bf00      	nop
 800ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	4770      	bx	lr

0800ec10 <_fini>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	bf00      	nop
 800ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec16:	bc08      	pop	{r3}
 800ec18:	469e      	mov	lr, r3
 800ec1a:	4770      	bx	lr
