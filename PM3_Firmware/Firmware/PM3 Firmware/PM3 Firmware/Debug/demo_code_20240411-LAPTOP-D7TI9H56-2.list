
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eadc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c10  0800ec90  0800ec90  0000fc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128a0  080128a0  000142d0  2**0
                  CONTENTS
  4 .ARM          00000008  080128a0  080128a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128a8  080128a8  000142d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128a8  080128a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080128ac  080128ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  080128b0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200002d0  08012b80  000142d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08012b80  000149a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c35  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c59  00000000  00000000  0002af35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118a  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027604  00000000  00000000  000313ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b784  00000000  00000000  000589ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e152e  00000000  00000000  00074172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001556a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007658  00000000  00000000  001556e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015cd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ec74 	.word	0x0800ec74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	0800ec74 	.word	0x0800ec74

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <calculate_moving_mean>:
static float rms_buffer_left[RMS_WINDOW_SIZE] = {0};
static float rms_buffer_right[RMS_WINDOW_SIZE] = {0};
static int rms_buffer_index_left = 0;
static int rms_buffer_index_right = 0;

float calculate_moving_mean(float new_value, int channel) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a01 	vstr	s0, [r7, #4]
 800100e:	6038      	str	r0, [r7, #0]
    float *buffer;
    int *index;

    // Select the appropriate buffer and index based on the channel
    if (channel == 0) {  // Left channel
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <calculate_moving_mean+0x1c>
        buffer = rms_buffer_left;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <calculate_moving_mean+0xac>)
 8001018:	617b      	str	r3, [r7, #20]
        index = &rms_buffer_index_left;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <calculate_moving_mean+0xb0>)
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	e00a      	b.n	8001036 <calculate_moving_mean+0x32>
    } else if (channel == 1) {  // Right channel
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d104      	bne.n	8001030 <calculate_moving_mean+0x2c>
        buffer = rms_buffer_right;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <calculate_moving_mean+0xb4>)
 8001028:	617b      	str	r3, [r7, #20]
        index = &rms_buffer_index_right;
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <calculate_moving_mean+0xb8>)
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e002      	b.n	8001036 <calculate_moving_mean+0x32>
    } else {
        return 0.0f;  // Invalid channel
 8001030:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80010c0 <calculate_moving_mean+0xbc>
 8001034:	e033      	b.n	800109e <calculate_moving_mean+0x9a>
    }

    // Add the new value to the buffer
    buffer[*index] = new_value;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	4413      	add	r3, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	601a      	str	r2, [r3, #0]

    // Increment the index in a circular manner
    *index = (*index + 1) % RMS_WINDOW_SIZE;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <calculate_moving_mean+0xc0>)
 800104c:	fb83 2301 	smull	r2, r3, r3, r1
 8001050:	105a      	asrs	r2, r3, #1
 8001052:	17cb      	asrs	r3, r1, #31
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	1aca      	subs	r2, r1, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

    // Calculate the mean
    float sum = 0;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < RMS_WINDOW_SIZE; i++) {
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	e00e      	b.n	800108c <calculate_moving_mean+0x88>
        sum += buffer[i];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4413      	add	r3, r2
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed97 7a03 	vldr	s14, [r7, #12]
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < RMS_WINDOW_SIZE; i++) {
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3301      	adds	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b04      	cmp	r3, #4
 8001090:	dded      	ble.n	800106e <calculate_moving_mean+0x6a>
    }

    return sum / RMS_WINDOW_SIZE;
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800109a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800109e:	eef0 7a47 	vmov.f32	s15, s14
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200002ec 	.word	0x200002ec
 80010b4:	20000314 	.word	0x20000314
 80010b8:	20000300 	.word	0x20000300
 80010bc:	20000318 	.word	0x20000318
 80010c0:	00000000 	.word	0x00000000
 80010c4:	66666667 	.word	0x66666667

080010c8 <rms>:

void rms(uint32_t *results) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    uint32_t sum_left = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    uint32_t sum_right = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
    uint16_t adc_offset = 2048;  // DC offset in ADC units (1.65V for a 3.3V, 12-bit ADC)
 80010d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010dc:	827b      	strh	r3, [r7, #18]

    for (uint32_t i = 0; i < ADC_NUMS; i += 2) {
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e021      	b.n	8001128 <rms+0x60>
        // Remove offset from raw ADC values and square the result
        int32_t adjusted_left = (int32_t)ADC_samples[i] - adc_offset;
 80010e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001190 <rms+0xc8>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	461a      	mov	r2, r3
 80010ee:	8a7b      	ldrh	r3, [r7, #18]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	60fb      	str	r3, [r7, #12]
        int32_t adjusted_right = (int32_t)ADC_samples[i + 1] - adc_offset;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <rms+0xc8>)
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	461a      	mov	r2, r3
 8001100:	8a7b      	ldrh	r3, [r7, #18]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	60bb      	str	r3, [r7, #8]

        sum_left += adjusted_left * adjusted_left;  // Sum of squared deviations
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fb03 f303 	mul.w	r3, r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	4413      	add	r3, r2
 8001112:	61fb      	str	r3, [r7, #28]
        sum_right += adjusted_right * adjusted_right;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	fb03 f303 	mul.w	r3, r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4413      	add	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < ADC_NUMS; i += 2) {
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3302      	adds	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b3b      	cmp	r3, #59	@ 0x3b
 800112c:	d9da      	bls.n	80010e4 <rms+0x1c>
    }

    // Compute RMS (in ADC units)
    results[0] = sqrt(sum_left / (ADC_NUMS / 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <rms+0xcc>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f9f3 	bl	8000524 <__aeabi_ui2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	ec43 2b10 	vmov	d0, r2, r3
 8001146:	f00d fabd 	bl	800e6c4 <sqrt>
 800114a:	ec53 2b10 	vmov	r2, r3, d0
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd39 	bl	8000bc8 <__aeabi_d2uiz>
 8001156:	4602      	mov	r2, r0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]
    results[1] = sqrt(sum_right / (ADC_NUMS / 2));
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <rms+0xcc>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9dc 	bl	8000524 <__aeabi_ui2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	ec43 2b10 	vmov	d0, r2, r3
 8001174:	f00d faa6 	bl	800e6c4 <sqrt>
 8001178:	ec51 0b10 	vmov	r0, r1, d0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1d1c      	adds	r4, r3, #4
 8001180:	f7ff fd22 	bl	8000bc8 <__aeabi_d2uiz>
 8001184:	4603      	mov	r3, r0
 8001186:	6023      	str	r3, [r4, #0]
}
 8001188:	bf00      	nop
 800118a:	3724      	adds	r7, #36	@ 0x24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	2000036c 	.word	0x2000036c
 8001194:	88888889 	.word	0x88888889

08001198 <calculate_current>:




float calculate_current(float rms) {
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Define calibration points: RMS at 0 Amps and RMS at 5 Amps
    const float rms_0_amps = 265;   // RMS value for 0 Amps
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <calculate_current+0xa4>)
 80011a4:	60fb      	str	r3, [r7, #12]
    const float rms_5_amps = 572;  // RMS value for 5 Amps
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <calculate_current+0xa8>)
 80011a8:	60bb      	str	r3, [r7, #8]

    // Ensure the RMS value is within the valid range
    if (rms <= rms_0_amps) {
 80011aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d802      	bhi.n	80011c2 <calculate_current+0x2a>
        return 0.0; // Below or equal to 0 Amps
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e034      	b.n	800122c <calculate_current+0x94>
    } else if (rms >= rms_5_amps) {
 80011c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	db01      	blt.n	80011d8 <calculate_current+0x40>
        return 5.0; // Above or equal to 5 Amps
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <calculate_current+0xac>)
 80011d6:	e029      	b.n	800122c <calculate_current+0x94>
    }

    // Linearly interpolate the current
    return 5.0 * (rms - rms_0_amps) / (rms_5_amps - rms_0_amps);
 80011d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f9be 	bl	8000568 <__aeabi_f2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <calculate_current+0xb0>)
 80011f2:	f7ff fa11 	bl	8000618 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001202:	edd7 7a03 	vldr	s15, [r7, #12]
 8001206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120a:	ee17 0a90 	vmov	r0, s15
 800120e:	f7ff f9ab 	bl	8000568 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fb27 	bl	800086c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcef 	bl	8000c08 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
}
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bdb0      	pop	{r4, r5, r7, pc}
 800123a:	bf00      	nop
 800123c:	43848000 	.word	0x43848000
 8001240:	440f0000 	.word	0x440f0000
 8001244:	40a00000 	.word	0x40a00000
 8001248:	40140000 	.word	0x40140000

0800124c <calculate_distance>:


float calculate_distance(float rms) {
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
    // Define calibration points: {RMS at 0 cm, RMS at 10 cm}
    const float rms_0_cm = 1010;  // RMS value at 0 cm
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <calculate_distance+0xa4>)
 8001258:	60fb      	str	r3, [r7, #12]
    const float rms_10_cm = 475; // RMS value at 10 cm
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <calculate_distance+0xa8>)
 800125c:	60bb      	str	r3, [r7, #8]

    // Ensure the RMS value is within the valid range
    if (rms > rms_0_cm) {
 800125e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001262:	edd7 7a03 	vldr	s15, [r7, #12]
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd02      	ble.n	8001276 <calculate_distance+0x2a>
        return 0.0; // Closer than 0 cm
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e034      	b.n	80012e0 <calculate_distance+0x94>
    } else if (rms < rms_10_cm) {
 8001276:	ed97 7a01 	vldr	s14, [r7, #4]
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	d501      	bpl.n	800128c <calculate_distance+0x40>
        return 10.0; // Farther than 10 cm
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <calculate_distance+0xac>)
 800128a:	e029      	b.n	80012e0 <calculate_distance+0x94>
    }

    // Linearly interpolate the distance
    return 10.0 * (rms_0_cm - rms) / (rms_0_cm - rms_10_cm);
 800128c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001290:	edd7 7a01 	vldr	s15, [r7, #4]
 8001294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001298:	ee17 0a90 	vmov	r0, s15
 800129c:	f7ff f964 	bl	8000568 <__aeabi_f2d>
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <calculate_distance+0xb0>)
 80012a6:	f7ff f9b7 	bl	8000618 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	ee17 0a90 	vmov	r0, s15
 80012c2:	f7ff f951 	bl	8000568 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7ff facd 	bl	800086c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc95 	bl	8000c08 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	447c8000 	.word	0x447c8000
 80012f4:	43ed8000 	.word	0x43ed8000
 80012f8:	41200000 	.word	0x41200000
 80012fc:	40240000 	.word	0x40240000

08001300 <calculate_angle>:

float calculate_angle(float distance_left, float distance_right) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	ed87 0a01 	vstr	s0, [r7, #4]
 800130a:	edc7 0a00 	vstr	s1, [r7]
    const float BASELINE = 5.0;  // Fixed distance between copper pads in cm
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <calculate_angle+0x88>)
 8001310:	617b      	str	r3, [r7, #20]

    // Calculate the angle in radians
    float angle_radians = atan((distance_left - distance_right) / BASELINE);
 8001312:	ed97 7a01 	vldr	s14, [r7, #4]
 8001316:	edd7 7a00 	vldr	s15, [r7]
 800131a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001326:	ee16 0a90 	vmov	r0, s13
 800132a:	f7ff f91d 	bl	8000568 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f00d f9f3 	bl	800e720 <atan>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc61 	bl	8000c08 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	613b      	str	r3, [r7, #16]

    // Convert to degrees
    float angle_degrees = angle_radians * (180.0 / M_PI);
 800134a:	6938      	ldr	r0, [r7, #16]
 800134c:	f7ff f90c 	bl	8000568 <__aeabi_f2d>
 8001350:	a30b      	add	r3, pc, #44	@ (adr r3, 8001380 <calculate_angle+0x80>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff f95f 	bl	8000618 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc51 	bl	8000c08 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]

    return angle_degrees;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	ee07 3a90 	vmov	s15, r3
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	1a63c1f8 	.word	0x1a63c1f8
 8001384:	404ca5dc 	.word	0x404ca5dc
 8001388:	40a00000 	.word	0x40a00000

0800138c <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b091      	sub	sp, #68	@ 0x44
 8001390:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8001392:	f003 fe8f 	bl	80050b4 <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 8001396:	f000 f95d 	bl	8001654 <SystemClock_Config>
	MX_GPIO_Init();
 800139a:	f000 fa85 	bl	80018a8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800139e:	f000 fa53 	bl	8001848 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 80013a2:	2306      	movs	r3, #6
 80013a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
#else
	BSP_LCD_Init();						// Initialize the LCD display
 80013a8:	f002 fdda 	bl	8003f60 <BSP_LCD_Init>
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80013ac:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80013b0:	2001      	movs	r0, #1
 80013b2:	f002 fe57 	bl	8004064 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f002 feb8 	bl	800412c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80013bc:	f003 f988 	bl	80046d0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f002 ff0e 	bl	80041e4 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80013c8:	f002 fe34 	bl	8004034 <BSP_LCD_GetXSize>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29c      	uxth	r4, r3
 80013d0:	f002 fe3c 	bl	800404c <BSP_LCD_GetYSize>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f003 fd66 	bl	8004eac <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80013e0:	f001 fc14 	bl	8002c0c <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80013e4:	f001 fc32 	bl	8002c4c <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80013e8:	2000      	movs	r0, #0
 80013ea:	f002 f9bd 	bl	8003768 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80013ee:	2001      	movs	r0, #1
 80013f0:	f002 f9ba 	bl	8003768 <BSP_LED_Init>
	BSP_LED_On(LED3);					// Set power LED and Enable pin on
 80013f4:	2000      	movs	r0, #0
 80013f6:	f002 fa0b 	bl	8003810 <BSP_LED_On>

	MENU_draw();						// Draw the menu
 80013fa:	f001 fa27 	bl	800284c <MENU_draw>
	MENU_hint();						// Show hint at startup
 80013fe:	f001 facf 	bl	80029a0 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8001402:	f000 f9a5 	bl	8001750 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8001406:	f000 fac9 	bl	800199c <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 800140a:	f000 fbaf 	bl	8001b6c <MEAS_timer_init>

    uint32_t last_time = HAL_GetTick(); // Tracks the last update time
 800140e:	f003 feb7 	bl	8005180 <HAL_GetTick>
 8001412:	63b8      	str	r0, [r7, #56]	@ 0x38

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function

		current_time = HAL_GetTick(); // Get the current time
 8001414:	f003 feb4 	bl	8005180 <HAL_GetTick>
 8001418:	4603      	mov	r3, r0
 800141a:	4a80      	ldr	r2, [pc, #512]	@ (800161c <main+0x290>)
 800141c:	6013      	str	r3, [r2, #0]

        // Check for menu activity
        if (previous_menu != active_menu) {
 800141e:	4b80      	ldr	r3, [pc, #512]	@ (8001620 <main+0x294>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001426:	429a      	cmp	r2, r3
 8001428:	d007      	beq.n	800143a <main+0xae>
            inactivity_timer = 0;  // Reset the inactivity timer
 800142a:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <main+0x298>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
            previous_menu = active_menu;  // Update the previous menu
 8001430:	4b7b      	ldr	r3, [pc, #492]	@ (8001620 <main+0x294>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001438:	e008      	b.n	800144c <main+0xc0>
        } else {
            inactivity_timer += current_time - last_time; // Increment timer
 800143a:	4b78      	ldr	r3, [pc, #480]	@ (800161c <main+0x290>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001440:	1ad2      	subs	r2, r2, r3
 8001442:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <main+0x298>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a76      	ldr	r2, [pc, #472]	@ (8001624 <main+0x298>)
 800144a:	6013      	str	r3, [r2, #0]
        }

        last_time = current_time; // Update the last update time
 800144c:	4b73      	ldr	r3, [pc, #460]	@ (800161c <main+0x290>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Shutdown condition: 1 minute of inactivity
        if (inactivity_timer >= 300000) {
 8001452:	4b74      	ldr	r3, [pc, #464]	@ (8001624 <main+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a74      	ldr	r2, [pc, #464]	@ (8001628 <main+0x29c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d916      	bls.n	800148a <main+0xfe>
            sprintf(msg, "Auto-shutdown due to inactivity\r\n");
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4973      	ldr	r1, [pc, #460]	@ (800162c <main+0x2a0>)
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fcf3 	bl	800ae4c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ff11 	bl	8000290 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	1d39      	adds	r1, r7, #4
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	486d      	ldr	r0, [pc, #436]	@ (8001630 <main+0x2a4>)
 800147a:	f007 fe92 	bl	80091a2 <HAL_UART_Transmit>

            BSP_LED_Off(LED3);  // Turn off LEDs
 800147e:	2000      	movs	r0, #0
 8001480:	f002 f9e0 	bl	8003844 <BSP_LED_Off>
            BSP_LED_Off(LED4);
 8001484:	2001      	movs	r0, #1
 8001486:	f002 f9dd 	bl	8003844 <BSP_LED_Off>

        }

	    sprintf(msg, "MEAS_data_ready: %d\r\n", MEAS_data_ready);    // Convert MEAS_data_ready to a string
 800148a:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <main+0x2a8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4969      	ldr	r1, [pc, #420]	@ (8001638 <main+0x2ac>)
 8001494:	4618      	mov	r0, r3
 8001496:	f009 fcd9 	bl	800ae4c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fef7 	bl	8000290 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	1d39      	adds	r1, r7, #4
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	4860      	ldr	r0, [pc, #384]	@ (8001630 <main+0x2a4>)
 80014ae:	f007 fe78 	bl	80091a2 <HAL_UART_Transmit>
	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 80014b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001620 <main+0x294>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4960      	ldr	r1, [pc, #384]	@ (800163c <main+0x2b0>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 fcc5 	bl	800ae4c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fee3 	bl	8000290 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	1d39      	adds	r1, r7, #4
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	4856      	ldr	r0, [pc, #344]	@ (8001630 <main+0x2a4>)
 80014d6:	f007 fe64 	bl	80091a2 <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 80014da:	4b56      	ldr	r3, [pc, #344]	@ (8001634 <main+0x2a8>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d019      	beq.n	8001516 <main+0x18a>
			MEAS_data_ready = false;
 80014e2:	4b54      	ldr	r3, [pc, #336]	@ (8001634 <main+0x2a8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			//MEAS_show_data();

			if(active_menu == MENU_ZERO){
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <main+0x294>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d112      	bne.n	8001516 <main+0x18a>
			    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4953      	ldr	r1, [pc, #332]	@ (8001640 <main+0x2b4>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f009 fca9 	bl	800ae4c <siprintf>
			    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fec7 	bl	8000290 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	1d39      	adds	r1, r7, #4
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	4848      	ldr	r0, [pc, #288]	@ (8001630 <main+0x2a4>)
 800150e:	f007 fe48 	bl	80091a2 <HAL_UART_Transmit>
			    //process_sensor_data();
				//MEAS_show_data_II();
			    MEAS_show_data();
 8001512:	f000 fe27 	bl	8002164 <MEAS_show_data>
	        	}*/
			//MEAS_show_data_II();

		}

		if (active_menu == MENU_ONE) {
 8001516:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <main+0x294>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <main+0x196>
			show_data_menu_one();
 800151e:	f000 fff1 	bl	8002504 <show_data_menu_one>
			}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8001522:	f001 fbc5 	bl	8002cb0 <PB_pressed>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01d      	beq.n	8001568 <main+0x1dc>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <main+0x2b8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f083 0301 	eor.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <main+0x2b8>)
 8001548:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <main+0x2b8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <main+0x1d2>
				DAC_init();
 8001552:	f000 faaf 	bl	8001ab4 <DAC_init>
				BSP_LED_On(LED4);
 8001556:	2001      	movs	r0, #1
 8001558:	f002 f95a 	bl	8003810 <BSP_LED_On>
 800155c:	e004      	b.n	8001568 <main+0x1dc>
			} else {
				DAC_reset();
 800155e:	f000 fa93 	bl	8001a88 <DAC_reset>
				BSP_LED_Off(LED4);
 8001562:	2001      	movs	r0, #1
 8001564:	f002 f96e 	bl	8003844 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8001568:	f001 fa74 	bl	8002a54 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 800156c:	f001 fa66 	bl	8002a3c <MENU_get_transition>
 8001570:	4603      	mov	r3, r0
 8001572:	2b06      	cmp	r3, #6
 8001574:	d006      	beq.n	8001584 <main+0x1f8>
 8001576:	2b06      	cmp	r3, #6
 8001578:	dc18      	bgt.n	80015ac <main+0x220>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <main+0x200>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00c      	beq.n	800159c <main+0x210>
 8001582:	e013      	b.n	80015ac <main+0x220>
			case MENU_NONE:					// No transition => do nothing
		        //sprintf(msg, "Current Menu: MENU_NONE\r\n");
		        //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	            active_menu = MENU_NONE;
 8001584:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <main+0x294>)
 8001586:	2206      	movs	r2, #6
 8001588:	701a      	strb	r2, [r3, #0]

				break;
 800158a:	e021      	b.n	80015d0 <main+0x244>

			case MENU_ZERO:
				//continuously measures IN13(Pad right) and IN4(Pad left) on ADC3 (PAD LEFT & PAD RIGHT)
		        //sprintf(msg, "Current Menu: MENU_Location\r\n");
		        //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	            active_menu = MENU_ZERO;
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <main+0x294>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]


			    //sprintf(msg, "Showing rms %d\r\n", calculate_rms( Fill_ADC_buffer(), 100));    // Convert MEAS_data_ready to a string
			    //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART

	            ADC3_IN13_IN4_scan_init();
 8001592:	f000 fb21 	bl	8001bd8 <ADC3_IN13_IN4_scan_init>
		        ADC3_IN13_IN4_scan_start();
 8001596:	f000 fc5f 	bl	8001e58 <ADC3_IN13_IN4_scan_start>
			break;
 800159a:	e019      	b.n	80015d0 <main+0x244>
				//continuously measures IN11(Coil right) and IN6(Coil_left) on ADC3

				//sprintf(msg, "Current Menu: MENU_Current\r\n");
		        //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	            active_menu = MENU_ONE;
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <main+0x294>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
	            //ADC1_IN11_ADC3_IN6_dual_init();
	            //ADC1_IN11_ADC3_IN6_dual_start();
		        ADC3_IN11_IN6_scan_init();
 80015a2:	f000 fbb9 	bl	8001d18 <ADC3_IN11_IN6_scan_init>
		        ADC3_IN11_IN6_scan_start();
 80015a6:	f000 fc79 	bl	8001e9c <ADC3_IN11_IN6_scan_start>
				break;
 80015aa:	e011      	b.n	80015d0 <main+0x244>
			ADC3_IN13_IN4_scan_init();
			ADC3_IN13_IN4_scan_start();
			break;
			*/
		default:						// Should never occur
			sprintf(msg, "Skipped While loop\r\n");
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4926      	ldr	r1, [pc, #152]	@ (8001648 <main+0x2bc>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f009 fc4b 	bl	800ae4c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe69 	bl	8000290 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	1d39      	adds	r1, r7, #4
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	4819      	ldr	r0, [pc, #100]	@ (8001630 <main+0x2a4>)
 80015ca:	f007 fdea 	bl	80091a2 <HAL_UART_Transmit>
			break;
 80015ce:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep; Thomas: increased to 2000 for printing, you can change back to 200
 80015d0:	20c8      	movs	r0, #200	@ 0xc8
 80015d2:	f003 fde1 	bl	8005198 <HAL_Delay>
	    sprintf(msg, "CYCLE END: \r\n");
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	491c      	ldr	r1, [pc, #112]	@ (800164c <main+0x2c0>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f009 fc36 	bl	800ae4c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fe54 	bl	8000290 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	1d39      	adds	r1, r7, #4
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	480f      	ldr	r0, [pc, #60]	@ (8001630 <main+0x2a4>)
 80015f4:	f007 fdd5 	bl	80091a2 <HAL_UART_Transmit>
	    sprintf(msg, "------------------------------------------------\r\n\n\n");
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4915      	ldr	r1, [pc, #84]	@ (8001650 <main+0x2c4>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f009 fc25 	bl	800ae4c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe43 	bl	8000290 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	1d39      	adds	r1, r7, #4
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <main+0x2a4>)
 8001616:	f007 fdc4 	bl	80091a2 <HAL_UART_Transmit>
	while (1) {							// Infinitely loop in main function
 800161a:	e6fb      	b.n	8001414 <main+0x88>
 800161c:	20000320 	.word	0x20000320
 8001620:	20000000 	.word	0x20000000
 8001624:	2000031c 	.word	0x2000031c
 8001628:	000493df 	.word	0x000493df
 800162c:	0800ec90 	.word	0x0800ec90
 8001630:	20000324 	.word	0x20000324
 8001634:	20000364 	.word	0x20000364
 8001638:	0800ecb4 	.word	0x0800ecb4
 800163c:	0800eccc 	.word	0x0800eccc
 8001640:	0800ece0 	.word	0x0800ece0
 8001644:	20000365 	.word	0x20000365
 8001648:	0800ecf0 	.word	0x0800ecf0
 800164c:	0800ed08 	.word	0x0800ed08
 8001650:	0800ed18 	.word	0x0800ed18

08001654 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	b0a0      	sub	sp, #128	@ 0x80
 8001658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800165e:	2230      	movs	r2, #48	@ 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f009 fcea 	bl	800b03c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2230      	movs	r2, #48	@ 0x30
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fcdb 	bl	800b03c <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <SystemClock_Config+0xf0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <SystemClock_Config+0xf0>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <SystemClock_Config+0xf0>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <SystemClock_Config+0xf4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <SystemClock_Config+0xf4>)
 80016ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <SystemClock_Config+0xf4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016be:	2301      	movs	r3, #1
 80016c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016d2:	2308      	movs	r3, #8
 80016d4:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80016d6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016da:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e0:	2307      	movs	r3, #7
 80016e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 ff8d 	bl	8007608 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2302      	movs	r3, #2
 80016f4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001706:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800170a:	2105      	movs	r1, #5
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f9e9 	bl	8007ae4 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001712:	2308      	movs	r3, #8
 8001714:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001716:	23c0      	movs	r3, #192	@ 0xc0
 8001718:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800171a:	2304      	movs	r3, #4
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800171e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4618      	mov	r0, r3
 800172a:	f006 fbfb 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <SystemClock_Config+0xf8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a06      	ldr	r2, [pc, #24]	@ (800174c <SystemClock_Config+0xf8>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6053      	str	r3, [r2, #4]
}
 800173a:	bf00      	nop
 800173c:	3780      	adds	r7, #128	@ 0x80
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000
 800174c:	40012300 	.word	0x40012300

08001750 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <gyro_disable+0xb4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a29      	ldr	r2, [pc, #164]	@ (8001804 <gyro_disable+0xb4>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <gyro_disable+0xb4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <gyro_disable+0xb8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a24      	ldr	r2, [pc, #144]	@ (8001808 <gyro_disable+0xb8>)
 8001778:	f023 030c 	bic.w	r3, r3, #12
 800177c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <gyro_disable+0xb8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <gyro_disable+0xb8>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <gyro_disable+0xb8>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <gyro_disable+0xb8>)
 8001790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001794:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8001796:	200a      	movs	r0, #10
 8001798:	f003 fcfe 	bl	8005198 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <gyro_disable+0xb8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <gyro_disable+0xb8>)
 80017a2:	f043 030c 	orr.w	r3, r3, #12
 80017a6:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <gyro_disable+0xb4>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <gyro_disable+0xb4>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <gyro_disable+0xb4>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <gyro_disable+0xbc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a10      	ldr	r2, [pc, #64]	@ (800180c <gyro_disable+0xbc>)
 80017ca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80017ce:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <gyro_disable+0xbc>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <gyro_disable+0xbc>)
 80017d6:	f023 030f 	bic.w	r3, r3, #15
 80017da:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <gyro_disable+0xbc>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <gyro_disable+0xbc>)
 80017e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80017e6:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 80017e8:	200a      	movs	r0, #10
 80017ea:	f003 fcd5 	bl	8005198 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <gyro_disable+0xbc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a06      	ldr	r2, [pc, #24]	@ (800180c <gyro_disable+0xbc>)
 80017f4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020800 	.word	0x40020800
 800180c:	40021400 	.word	0x40021400

08001810 <_close>:


// Default function implementations required to prevent build errors.
__attribute__((weak)) void _close(void){}
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_lseek>:
__attribute__((weak)) void _lseek(void){}
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_read>:
__attribute__((weak)) void _read(void){}
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_write>:
__attribute__((weak)) void _write(void){}
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <MX_USART1_UART_Init+0x50>)
 8001850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_USART1_UART_Init+0x4c>)
 8001880:	f007 fc42 	bl	8009108 <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800188a:	f000 f807 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000324 	.word	0x20000324
 8001898:	40011000 	.word	0x40011000

0800189c <Error_Handler>:
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <Error_Handler+0x8>

080018a8 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_GPIO_Init+0x30>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <MX_GPIO_Init+0x30>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_GPIO_Init+0x30>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	@ (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db12      	blt.n	8001950 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	490a      	ldr	r1, [pc, #40]	@ (800195c <__NVIC_DisableIRQ+0x44>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	3320      	adds	r3, #32
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001944:	f3bf 8f4f 	dsb	sy
}
 8001948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800194a:	f3bf 8f6f 	isb	sy
}
 800194e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0c      	blt.n	800198c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <__NVIC_ClearPendingIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	3360      	adds	r3, #96	@ 0x60
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a33      	ldr	r2, [pc, #204]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80019be:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <MEAS_GPIO_analog_init+0xe0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <MEAS_GPIO_analog_init+0xe0>)
 80019c4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80019c8:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a29      	ldr	r2, [pc, #164]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80019e6:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <MEAS_GPIO_analog_init+0xe4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a25      	ldr	r2, [pc, #148]	@ (8001a80 <MEAS_GPIO_analog_init+0xe4>)
 80019ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80019f0:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <MEAS_GPIO_analog_init+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <MEAS_GPIO_analog_init+0xe8>)
 8001a14:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001a18:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();  // Enable Clock for GPIO port F
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a15      	ldr	r2, [pc, #84]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a24:	f043 0320 	orr.w	r3, r3, #32
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER8_Pos);  // Analog PF8 = ADC3_IN6
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <MEAS_GPIO_analog_init+0xe0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <MEAS_GPIO_analog_init+0xe0>)
 8001a3c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001a40:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();  // Enable Clock for GPIO port C
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MEAS_GPIO_analog_init+0xdc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER1_Pos);  // Analog PC1 = ADC3_IN11
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MEAS_GPIO_analog_init+0xe4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <MEAS_GPIO_analog_init+0xe4>)
 8001a64:	f043 030c 	orr.w	r3, r3, #12
 8001a68:	6013      	str	r3, [r2, #0]

}
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020000 	.word	0x40020000

08001a88 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <DAC_reset+0x28>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <DAC_reset+0x28>)
 8001a92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a96:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <DAC_reset+0x28>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <DAC_reset+0x28>)
 8001a9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001aa2:	6213      	str	r3, [r2, #32]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <DAC_init+0x3c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <DAC_init+0x3c>)
 8001ac4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <DAC_init+0x3c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <DAC_init+0x40>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <DAC_init+0x40>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007400 	.word	0x40007400

08001af8 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <DAC_increment+0x30>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3314      	adds	r3, #20
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <DAC_increment+0x30>)
 8001b04:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <DAC_increment+0x30>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b0e:	d302      	bcc.n	8001b16 <DAC_increment+0x1e>
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <DAC_increment+0x30>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <DAC_increment+0x34>)
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <DAC_increment+0x30>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6153      	str	r3, [r2, #20]
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	2000054c 	.word	0x2000054c
 8001b2c:	40007400 	.word	0x40007400

08001b30 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <ADC_reset+0x38>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <ADC_reset+0x38>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <ADC_reset+0x38>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <ADC_reset+0x38>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b4a:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <MEAS_timer_init+0x68>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <MEAS_timer_init+0x68>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <MEAS_timer_init+0x68>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8001b8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b92:	f243 62af 	movw	r2, #13999	@ 0x36af
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001b98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9c:	2209      	movs	r2, #9
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001ba0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001bb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001bc0:	201c      	movs	r0, #28
 8001bc2:	f7ff fecd 	bl	8001960 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f7ff fe88 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	MEAS_input_count = 2;				// 2 inputs are converted
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <ADC3_IN13_IN4_scan_init+0x124>)
 8001be0:	2202      	movs	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	4a44      	ldr	r2, [pc, #272]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf4:	4b42      	ldr	r3, [pc, #264]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001c00:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	4a3f      	ldr	r2, [pc, #252]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	4a3c      	ldr	r2, [pc, #240]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c12:	f043 030d 	orr.w	r3, r3, #13
 8001c16:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001c18:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1c:	4a39      	ldr	r2, [pc, #228]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c22:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a36      	ldr	r2, [pc, #216]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a33      	ldr	r2, [pc, #204]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c42:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001c46:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c52:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a28      	ldr	r2, [pc, #160]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <ADC3_IN13_IN4_scan_init+0x128>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001c7c:	bf00      	nop
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f9      	bne.n	8001c7e <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x134>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <ADC3_IN13_IN4_scan_init+0x134>)
 8001c90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c94:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001c9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ca0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0f      	ldr	r2, [pc, #60]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cd8:	f043 0310 	orr.w	r3, r3, #16
 8001cdc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce0:	2278      	movs	r2, #120	@ 0x78
 8001ce2:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <ADC3_IN13_IN4_scan_init+0x138>)
 8001ce8:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <ADC3_IN13_IN4_scan_init+0x130>)
 8001cec:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001cee:	60da      	str	r2, [r3, #12]

}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40012200 	.word	0x40012200
 8001d08:	40026428 	.word	0x40026428
 8001d0c:	40026400 	.word	0x40026400
 8001d10:	4001224c 	.word	0x4001224c
 8001d14:	2000036c 	.word	0x2000036c

08001d18 <ADC3_IN11_IN6_scan_init>:

//COIL LEFT AND RIGHT
void ADC3_IN11_IN6_scan_init(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001d1e:	4b47      	ldr	r3, [pc, #284]	@ (8001e3c <ADC3_IN11_IN6_scan_init+0x124>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	4a44      	ldr	r2, [pc, #272]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d34:	4b42      	ldr	r3, [pc, #264]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001d40:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	4a3f      	ldr	r2, [pc, #252]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d50:	4a3c      	ldr	r2, [pc, #240]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d52:	f043 030b 	orr.w	r3, r3, #11
 8001d56:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (6UL << ADC_SQR3_SQ2_Pos);	// Input 6 = second conversion
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5c:	4a39      	ldr	r2, [pc, #228]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d62:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001d64:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a36      	ldr	r2, [pc, #216]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a33      	ldr	r2, [pc, #204]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001d7c:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a30      	ldr	r2, [pc, #192]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d82:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001d86:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001d88:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e44 <ADC3_IN11_IN6_scan_init+0x12c>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001d94:	2300      	movs	r3, #0
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	4b29      	ldr	r3, [pc, #164]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4a28      	ldr	r2, [pc, #160]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <ADC3_IN11_IN6_scan_init+0x128>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001dbc:	bf00      	nop
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f9      	bne.n	8001dbe <ADC3_IN11_IN6_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x134>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <ADC3_IN11_IN6_scan_init+0x134>)
 8001dd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dd4:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001ddc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001de0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a18      	ldr	r2, [pc, #96]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dec:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e04:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e10:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e18:	f043 0310 	orr.w	r3, r3, #16
 8001e1c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e20:	2278      	movs	r2, #120	@ 0x78
 8001e22:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <ADC3_IN11_IN6_scan_init+0x138>)
 8001e28:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <ADC3_IN11_IN6_scan_init+0x130>)
 8001e2c:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <ADC3_IN11_IN6_scan_init+0x13c>)
 8001e2e:	60da      	str	r2, [r3, #12]

}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40012200 	.word	0x40012200
 8001e48:	40026428 	.word	0x40026428
 8001e4c:	40026400 	.word	0x40026400
 8001e50:	4001224c 	.word	0x4001224c
 8001e54:	2000036c 	.word	0x2000036c

08001e58 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0c      	ldr	r2, [pc, #48]	@ (8001e94 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001e68:	2039      	movs	r0, #57	@ 0x39
 8001e6a:	f7ff fd79 	bl	8001960 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001e6e:	2039      	movs	r0, #57	@ 0x39
 8001e70:	f7ff fd34 	bl	80018dc <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <ADC3_IN13_IN4_scan_start+0x40>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001e80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40026428 	.word	0x40026428
 8001e98:	40012200 	.word	0x40012200

08001e9c <ADC3_IN11_IN6_scan_start>:
//COIL Left and right
void ADC3_IN11_IN6_scan_start(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	//PAD LEFT AND RIGHT
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <ADC3_IN11_IN6_scan_start+0x3c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed8 <ADC3_IN11_IN6_scan_start+0x3c>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001eac:	2039      	movs	r0, #57	@ 0x39
 8001eae:	f7ff fd57 	bl	8001960 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001eb2:	2039      	movs	r0, #57	@ 0x39
 8001eb4:	f7ff fd12 	bl	80018dc <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <ADC3_IN11_IN6_scan_start+0x40>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <ADC3_IN11_IN6_scan_start+0x40>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40026428 	.word	0x40026428
 8001edc:	40012200 	.word	0x40012200

08001ee0 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001ee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <TIM2_IRQHandler+0x24>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001efc:	f7ff fdfc 	bl	8001af8 <DAC_increment>
	}
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000365 	.word	0x20000365

08001f08 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <ADC_IRQHandler+0x58>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001f18:	4911      	ldr	r1, [pc, #68]	@ (8001f60 <ADC_IRQHandler+0x58>)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <ADC_IRQHandler+0x5c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4810      	ldr	r0, [pc, #64]	@ (8001f64 <ADC_IRQHandler+0x5c>)
 8001f22:	6002      	str	r2, [r0, #0]
 8001f24:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001f26:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <ADC_IRQHandler+0x60>)
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <ADC_IRQHandler+0x5c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f32:	d912      	bls.n	8001f5a <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001f34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <ADC_IRQHandler+0x58>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <ADC_IRQHandler+0x58>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001f50:	f7ff fdee 	bl	8001b30 <ADC_reset>
			MEAS_data_ready = true;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <ADC_IRQHandler+0x64>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40012200 	.word	0x40012200
 8001f64:	20000368 	.word	0x20000368
 8001f68:	2000036c 	.word	0x2000036c
 8001f6c:	20000364 	.word	0x20000364

08001f70 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <DMA2_Stream1_IRQHandler+0x78>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d031      	beq.n	8001fe4 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001f80:	2039      	movs	r0, #57	@ 0x39
 8001f82:	f7ff fcc9 	bl	8001918 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001f86:	2039      	movs	r0, #57	@ 0x39
 8001f88:	f7ff fcea 	bl	8001960 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <DMA2_Stream1_IRQHandler+0x7c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <DMA2_Stream1_IRQHandler+0x7c>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001f98:	bf00      	nop
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <DMA2_Stream1_IRQHandler+0x7c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <DMA2_Stream1_IRQHandler+0x78>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <DMA2_Stream1_IRQHandler+0x78>)
 8001fac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb0:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001fb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x80>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x80>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x80>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <DMA2_Stream1_IRQHandler+0x80>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd8:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001fda:	f7ff fda9 	bl	8001b30 <ADC_reset>
		MEAS_data_ready = true;
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <DMA2_Stream1_IRQHandler+0x84>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40026400 	.word	0x40026400
 8001fec:	40026428 	.word	0x40026428
 8001ff0:	40012200 	.word	0x40012200
 8001ff4:	20000364 	.word	0x20000364

08001ff8 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <DMA2_Stream3_IRQHandler+0x78>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d031      	beq.n	800206c <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8002008:	203b      	movs	r0, #59	@ 0x3b
 800200a:	f7ff fc85 	bl	8001918 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 800200e:	203b      	movs	r0, #59	@ 0x3b
 8002010:	f7ff fca6 	bl	8001960 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8002014:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <DMA2_Stream3_IRQHandler+0x7c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <DMA2_Stream3_IRQHandler+0x7c>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8002020:	bf00      	nop
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <DMA2_Stream3_IRQHandler+0x7c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <DMA2_Stream3_IRQHandler+0x78>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <DMA2_Stream3_IRQHandler+0x78>)
 8002034:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002038:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800203a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <DMA2_Stream3_IRQHandler+0x80>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <DMA2_Stream3_IRQHandler+0x80>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <DMA2_Stream3_IRQHandler+0x80>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a07      	ldr	r2, [pc, #28]	@ (8002078 <DMA2_Stream3_IRQHandler+0x80>)
 800205c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002060:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8002062:	f7ff fd65 	bl	8001b30 <ADC_reset>
		MEAS_data_ready = true;
 8002066:	4b05      	ldr	r3, [pc, #20]	@ (800207c <DMA2_Stream3_IRQHandler+0x84>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
	}
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40026400 	.word	0x40026400
 8002074:	40026458 	.word	0x40026458
 8002078:	40012100 	.word	0x40012100
 800207c:	20000364 	.word	0x20000364

08002080 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8002086:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <DMA2_Stream4_IRQHandler+0xc8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d055      	beq.n	800213e <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8002092:	203c      	movs	r0, #60	@ 0x3c
 8002094:	f7ff fc40 	bl	8001918 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8002098:	203c      	movs	r0, #60	@ 0x3c
 800209a:	f7ff fc61 	bl	8001960 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <DMA2_Stream4_IRQHandler+0xcc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <DMA2_Stream4_IRQHandler+0xcc>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80020aa:	bf00      	nop
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <DMA2_Stream4_IRQHandler+0xcc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <DMA2_Stream4_IRQHandler+0xc8>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a22      	ldr	r2, [pc, #136]	@ (8002148 <DMA2_Stream4_IRQHandler+0xc8>)
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80020c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 80020d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <DMA2_Stream4_IRQHandler+0xd0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <DMA2_Stream4_IRQHandler+0xd0>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <DMA2_Stream4_IRQHandler+0xd4>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <DMA2_Stream4_IRQHandler+0xd4>)
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <DMA2_Stream4_IRQHandler+0xd8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <DMA2_Stream4_IRQHandler+0xd8>)
 80020f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80020f6:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80020f8:	233b      	movs	r3, #59	@ 0x3b
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e017      	b.n	800212e <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <DMA2_Stream4_IRQHandler+0xdc>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	3301      	adds	r3, #1
 800210c:	0c12      	lsrs	r2, r2, #16
 800210e:	4913      	ldr	r1, [pc, #76]	@ (800215c <DMA2_Stream4_IRQHandler+0xdc>)
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8002114:	4a11      	ldr	r2, [pc, #68]	@ (800215c <DMA2_Stream4_IRQHandler+0xdc>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	b292      	uxth	r2, r2
 8002122:	490e      	ldr	r1, [pc, #56]	@ (800215c <DMA2_Stream4_IRQHandler+0xdc>)
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dae4      	bge.n	80020fe <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8002134:	f7ff fcfc 	bl	8001b30 <ADC_reset>
		MEAS_data_ready = true;
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <DMA2_Stream4_IRQHandler+0xe0>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
	}
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40026400 	.word	0x40026400
 800214c:	40026470 	.word	0x40026470
 8002150:	40012000 	.word	0x40012000
 8002154:	40012100 	.word	0x40012100
 8002158:	40012300 	.word	0x40012300
 800215c:	2000036c 	.word	0x2000036c
 8002160:	20000364 	.word	0x20000364

08002164 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b0ad      	sub	sp, #180	@ 0xb4
 8002168:	af02      	add	r7, sp, #8
	const uint32_t Y_OFFSET = 220;
 800216a:	23dc      	movs	r3, #220	@ 0xdc
 800216c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const uint32_t X_SIZE = 240;
 8002170:	23f0      	movs	r3, #240	@ 0xf0
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8002176:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800217a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t mean_results[2];
    float cable_distances[2];  // To store calculated distances

	char msg [50];
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f001 ffde 	bl	800414c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8002190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002194:	b29a      	uxth	r2, r3
 8002196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800219a:	b29b      	uxth	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	2000      	movs	r0, #0
 80021a4:	f002 fa12 	bl	80045cc <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 80021a8:	48c9      	ldr	r0, [pc, #804]	@ (80024d0 <MEAS_show_data+0x36c>)
 80021aa:	f002 f801 	bl	80041b0 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	f001 ffe3 	bl	800417c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021b6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80021ba:	f001 ffc7 	bl	800414c <BSP_LCD_SetTextColor>
    char text[50];

    rms(rms_results);
 80021be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe ff80 	bl	80010c8 <rms>
    // Calculate moving mean for each channel
    mean_results[0] = calculate_moving_mean(rms_results[0], 0); // Left channel
 80021c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d2:	2000      	movs	r0, #0
 80021d4:	eeb0 0a67 	vmov.f32	s0, s15
 80021d8:	f7fe ff14 	bl	8001004 <calculate_moving_mean>
 80021dc:	eef0 7a40 	vmov.f32	s15, s0
 80021e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e4:	ee17 3a90 	vmov	r3, s15
 80021e8:	677b      	str	r3, [r7, #116]	@ 0x74
    mean_results[1] = calculate_moving_mean(rms_results[1], 1); // Right channel
 80021ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f6:	2001      	movs	r0, #1
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	f7fe ff02 	bl	8001004 <calculate_moving_mean>
 8002200:	eef0 7a40 	vmov.f32	s15, s0
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	ee17 3a90 	vmov	r3, s15
 800220c:	67bb      	str	r3, [r7, #120]	@ 0x78
    cable_distances[0] = calculate_distance(mean_results[0]);
 800220e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	f7ff f816 	bl	800124c <calculate_distance>
 8002220:	eef0 7a40 	vmov.f32	s15, s0
 8002224:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    cable_distances[1] = calculate_distance(mean_results[1]);
 8002228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	f7ff f809 	bl	800124c <calculate_distance>
 800223a:	eef0 7a40 	vmov.f32	s15, s0
 800223e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    float angle_to_wire = calculate_angle(cable_distances[0], cable_distances[1]);     // Calculate the angle
 8002242:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002246:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800224a:	eef0 0a47 	vmov.f32	s1, s14
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	f7ff f855 	bl	8001300 <calculate_angle>
 8002256:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

    // Display left RMS
    snprintf(text, 50, "rms left: %d", rms_results[0]);
 800225a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800225c:	1d38      	adds	r0, r7, #4
 800225e:	4a9d      	ldr	r2, [pc, #628]	@ (80024d4 <MEAS_show_data+0x370>)
 8002260:	2132      	movs	r1, #50	@ 0x32
 8002262:	f008 fdbf 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)text, LEFT_MODE);
 8002266:	1d3a      	adds	r2, r7, #4
 8002268:	2303      	movs	r3, #3
 800226a:	2105      	movs	r1, #5
 800226c:	2000      	movs	r0, #0
 800226e:	f002 f825 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "rms right: %d", rms_results[1]);
 8002272:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002276:	1d38      	adds	r0, r7, #4
 8002278:	4a97      	ldr	r2, [pc, #604]	@ (80024d8 <MEAS_show_data+0x374>)
 800227a:	2132      	movs	r1, #50	@ 0x32
 800227c:	f008 fdb2 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 8002280:	1d3a      	adds	r2, r7, #4
 8002282:	2303      	movs	r3, #3
 8002284:	2114      	movs	r1, #20
 8002286:	2000      	movs	r0, #0
 8002288:	f002 f818 	bl	80042bc <BSP_LCD_DisplayStringAt>

    //Display distance
    snprintf(text, 50, "dist right: %.1f cm", cable_distances[0]);
 800228c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f96a 	bl	8000568 <__aeabi_f2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	1d38      	adds	r0, r7, #4
 800229a:	e9cd 2300 	strd	r2, r3, [sp]
 800229e:	4a8f      	ldr	r2, [pc, #572]	@ (80024dc <MEAS_show_data+0x378>)
 80022a0:	2132      	movs	r1, #50	@ 0x32
 80022a2:	f008 fd9f 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)text, LEFT_MODE);
 80022a6:	1d3a      	adds	r2, r7, #4
 80022a8:	2303      	movs	r3, #3
 80022aa:	2123      	movs	r1, #35	@ 0x23
 80022ac:	2000      	movs	r0, #0
 80022ae:	f002 f805 	bl	80042bc <BSP_LCD_DisplayStringAt>
    snprintf(text, 50, "dist left: %.1f cm", cable_distances[1]);
 80022b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f957 	bl	8000568 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	1d38      	adds	r0, r7, #4
 80022c0:	e9cd 2300 	strd	r2, r3, [sp]
 80022c4:	4a86      	ldr	r2, [pc, #536]	@ (80024e0 <MEAS_show_data+0x37c>)
 80022c6:	2132      	movs	r1, #50	@ 0x32
 80022c8:	f008 fd8c 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 80022cc:	1d3a      	adds	r2, r7, #4
 80022ce:	2303      	movs	r3, #3
 80022d0:	2132      	movs	r1, #50	@ 0x32
 80022d2:	2000      	movs	r0, #0
 80022d4:	f001 fff2 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display the angle
    snprintf(msg, 50, "Angle: %.1f deg", angle_to_wire);
 80022d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80022dc:	f7fe f944 	bl	8000568 <__aeabi_f2d>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80022e8:	e9cd 2300 	strd	r2, r3, [sp]
 80022ec:	4a7d      	ldr	r2, [pc, #500]	@ (80024e4 <MEAS_show_data+0x380>)
 80022ee:	2132      	movs	r1, #50	@ 0x32
 80022f0:	f008 fd78 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 65, (uint8_t *)msg, LEFT_MODE);
 80022f4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80022f8:	2303      	movs	r3, #3
 80022fa:	2141      	movs	r1, #65	@ 0x41
 80022fc:	2000      	movs	r0, #0
 80022fe:	f001 ffdd 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display left RMS
    snprintf(text, 50, "mean left: %d", mean_results[0]);
 8002302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002304:	1d38      	adds	r0, r7, #4
 8002306:	4a78      	ldr	r2, [pc, #480]	@ (80024e8 <MEAS_show_data+0x384>)
 8002308:	2132      	movs	r1, #50	@ 0x32
 800230a:	f008 fd6b 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 135, (uint8_t *)text, LEFT_MODE);
 800230e:	1d3a      	adds	r2, r7, #4
 8002310:	2303      	movs	r3, #3
 8002312:	2187      	movs	r1, #135	@ 0x87
 8002314:	2000      	movs	r0, #0
 8002316:	f001 ffd1 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "mean right: %d", mean_results[1]);
 800231a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231c:	1d38      	adds	r0, r7, #4
 800231e:	4a73      	ldr	r2, [pc, #460]	@ (80024ec <MEAS_show_data+0x388>)
 8002320:	2132      	movs	r1, #50	@ 0x32
 8002322:	f008 fd5f 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, LEFT_MODE);
 8002326:	1d3a      	adds	r2, r7, #4
 8002328:	2303      	movs	r3, #3
 800232a:	2196      	movs	r1, #150	@ 0x96
 800232c:	2000      	movs	r0, #0
 800232e:	f001 ffc5 	bl	80042bc <BSP_LCD_DisplayStringAt>

	// Draw the  values of input channel 1 as a curve
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002332:	486f      	ldr	r0, [pc, #444]	@ (80024f0 <MEAS_show_data+0x38c>)
 8002334:	f001 ff0a 	bl	800414c <BSP_LCD_SetTextColor>

	data = ADC_samples[MEAS_input_count*0] / f;
 8002338:	4b6e      	ldr	r3, [pc, #440]	@ (80024f4 <MEAS_show_data+0x390>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002348:	2301      	movs	r3, #1
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800234e:	e03f      	b.n	80023d0 <MEAS_show_data+0x26c>
		data_last = data;
 8002350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8002358:	4b67      	ldr	r3, [pc, #412]	@ (80024f8 <MEAS_show_data+0x394>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	4a63      	ldr	r2, [pc, #396]	@ (80024f4 <MEAS_show_data+0x390>)
 8002366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800236a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8002376:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800237a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800237e:	429a      	cmp	r2, r3
 8002380:	d903      	bls.n	800238a <MEAS_show_data+0x226>
 8002382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800238a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800238e:	3b01      	subs	r3, #1
 8002390:	b29b      	uxth	r3, r3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	b298      	uxth	r0, r3
 8002396:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800239a:	b29a      	uxth	r2, r3
 800239c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b299      	uxth	r1, r3
 80023a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	b29c      	uxth	r4, r3
 80023b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4622      	mov	r2, r4
 80023c2:	f002 f839 	bl	8004438 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80023c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80023d6:	d9bb      	bls.n	8002350 <MEAS_show_data+0x1ec>
	}
	// Draw the  values of input channel 2 (if present) as a curve
	if (MEAS_input_count == 2) {
 80023d8:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <MEAS_show_data+0x394>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d153      	bne.n	8002488 <MEAS_show_data+0x324>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023e0:	4846      	ldr	r0, [pc, #280]	@ (80024fc <MEAS_show_data+0x398>)
 80023e2:	f001 feb3 	bl	800414c <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 80023e6:	4b43      	ldr	r3, [pc, #268]	@ (80024f4 <MEAS_show_data+0x390>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80023f6:	2301      	movs	r3, #1
 80023f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023fc:	e040      	b.n	8002480 <MEAS_show_data+0x31c>
			data_last = data;
 80023fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002402:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8002406:	4b3c      	ldr	r3, [pc, #240]	@ (80024f8 <MEAS_show_data+0x394>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	3301      	adds	r3, #1
 8002414:	4a37      	ldr	r2, [pc, #220]	@ (80024f4 <MEAS_show_data+0x390>)
 8002416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8002426:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800242a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800242e:	429a      	cmp	r2, r3
 8002430:	d903      	bls.n	800243a <MEAS_show_data+0x2d6>
 8002432:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800243a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800243e:	3b01      	subs	r3, #1
 8002440:	b29b      	uxth	r3, r3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	b298      	uxth	r0, r3
 8002446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800244a:	b29a      	uxth	r2, r3
 800244c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002450:	b29b      	uxth	r3, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	b299      	uxth	r1, r3
 8002456:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800245a:	b29b      	uxth	r3, r3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	b29c      	uxth	r4, r3
 8002460:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002464:	b29a      	uxth	r2, r3
 8002466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800246a:	b29b      	uxth	r3, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	4622      	mov	r2, r4
 8002472:	f001 ffe1 	bl	8004438 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002476:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800247a:	3301      	adds	r3, #1
 800247c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002484:	2b3b      	cmp	r3, #59	@ 0x3b
 8002486:	d9ba      	bls.n	80023fe <MEAS_show_data+0x29a>
		}
	}

	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800248e:	e013      	b.n	80024b8 <MEAS_show_data+0x354>
		ADC_samples[2*i] = 0;
 8002490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <MEAS_show_data+0x390>)
 8002498:	2100      	movs	r1, #0
 800249a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 800249e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a13      	ldr	r2, [pc, #76]	@ (80024f4 <MEAS_show_data+0x390>)
 80024a8:	2100      	movs	r1, #0
 80024aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80024ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80024be:	d9e7      	bls.n	8002490 <MEAS_show_data+0x32c>
	}
	ADC_sample_count = 0;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MEAS_show_data+0x39c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	37ac      	adds	r7, #172	@ 0xac
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200000e4 	.word	0x200000e4
 80024d4:	0800ed50 	.word	0x0800ed50
 80024d8:	0800ed60 	.word	0x0800ed60
 80024dc:	0800ed70 	.word	0x0800ed70
 80024e0:	0800ed84 	.word	0x0800ed84
 80024e4:	0800ed98 	.word	0x0800ed98
 80024e8:	0800eda8 	.word	0x0800eda8
 80024ec:	0800edb8 	.word	0x0800edb8
 80024f0:	ff0000ff 	.word	0xff0000ff
 80024f4:	2000036c 	.word	0x2000036c
 80024f8:	20000004 	.word	0x20000004
 80024fc:	ffff0000 	.word	0xffff0000
 8002500:	20000368 	.word	0x20000368

08002504 <show_data_menu_one>:


void show_data_menu_one(void) {
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b0ad      	sub	sp, #180	@ 0xb4
 8002508:	af02      	add	r7, sp, #8
	const uint32_t Y_OFFSET = 220;
 800250a:	23dc      	movs	r3, #220	@ 0xdc
 800250c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const uint32_t X_SIZE = 240;
 8002510:	23f0      	movs	r3, #240	@ 0xf0
 8002512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8002516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t mean_results[2];
    float cable_current[2];
    float cable_current_avg;
	char msg [50];
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f001 fe0e 	bl	800414c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8002530:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002534:	b29a      	uxth	r2, r3
 8002536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800253a:	b29b      	uxth	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	b29b      	uxth	r3, r3
 8002540:	2100      	movs	r1, #0
 8002542:	2000      	movs	r0, #0
 8002544:	f002 f842 	bl	80045cc <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8002548:	48b5      	ldr	r0, [pc, #724]	@ (8002820 <show_data_menu_one+0x31c>)
 800254a:	f001 fe31 	bl	80041b0 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800254e:	f04f 30ff 	mov.w	r0, #4294967295
 8002552:	f001 fe13 	bl	800417c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002556:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800255a:	f001 fdf7 	bl	800414c <BSP_LCD_SetTextColor>
	char text[50];

    rms(rms_results);
 800255e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fdb0 	bl	80010c8 <rms>
    mean_results[0] = calculate_moving_mean(rms_results[0], 0); // Left channel
 8002568:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	2000      	movs	r0, #0
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	f7fe fd44 	bl	8001004 <calculate_moving_mean>
 800257c:	eef0 7a40 	vmov.f32	s15, s0
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
    mean_results[1] = calculate_moving_mean(rms_results[1], 1); // Right channel
 800258a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002596:	2001      	movs	r0, #1
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	f7fe fd32 	bl	8001004 <calculate_moving_mean>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    cable_current[0] = calculate_current(mean_results[0]);
 80025ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b8:	eeb0 0a67 	vmov.f32	s0, s15
 80025bc:	f7fe fdec 	bl	8001198 <calculate_current>
 80025c0:	eef0 7a40 	vmov.f32	s15, s0
 80025c4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    cable_current[1] = calculate_current(mean_results[1]);
 80025c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	f7fe fddf 	bl	8001198 <calculate_current>
 80025da:	eef0 7a40 	vmov.f32	s15, s0
 80025de:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    cable_current_avg = (cable_current[0] + cable_current[1])/2;
 80025e2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80025e6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80025ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80025f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // Display left RMS
    snprintf(text, 50, "rms left: %d", rms_results[0]);
 80025fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025fc:	1d38      	adds	r0, r7, #4
 80025fe:	4a89      	ldr	r2, [pc, #548]	@ (8002824 <show_data_menu_one+0x320>)
 8002600:	2132      	movs	r1, #50	@ 0x32
 8002602:	f008 fbef 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 5, (uint8_t *)text, LEFT_MODE);
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	2303      	movs	r3, #3
 800260a:	2105      	movs	r1, #5
 800260c:	2000      	movs	r0, #0
 800260e:	f001 fe55 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "rms right: %d", rms_results[1]);
 8002612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002616:	1d38      	adds	r0, r7, #4
 8002618:	4a83      	ldr	r2, [pc, #524]	@ (8002828 <show_data_menu_one+0x324>)
 800261a:	2132      	movs	r1, #50	@ 0x32
 800261c:	f008 fbe2 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 8002620:	1d3a      	adds	r2, r7, #4
 8002622:	2303      	movs	r3, #3
 8002624:	2114      	movs	r1, #20
 8002626:	2000      	movs	r0, #0
 8002628:	f001 fe48 	bl	80042bc <BSP_LCD_DisplayStringAt>

    snprintf(text, 50, "Meas current: %.1f A", cable_current_avg);
 800262c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002630:	f7fd ff9a 	bl	8000568 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	1d38      	adds	r0, r7, #4
 800263a:	e9cd 2300 	strd	r2, r3, [sp]
 800263e:	4a7b      	ldr	r2, [pc, #492]	@ (800282c <show_data_menu_one+0x328>)
 8002640:	2132      	movs	r1, #50	@ 0x32
 8002642:	f008 fbcf 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)text, LEFT_MODE);
 8002646:	1d3a      	adds	r2, r7, #4
 8002648:	2303      	movs	r3, #3
 800264a:	2123      	movs	r1, #35	@ 0x23
 800264c:	2000      	movs	r0, #0
 800264e:	f001 fe35 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display left RMS
    snprintf(text, 50, "mean left: %d", mean_results[0]);
 8002652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002654:	1d38      	adds	r0, r7, #4
 8002656:	4a76      	ldr	r2, [pc, #472]	@ (8002830 <show_data_menu_one+0x32c>)
 8002658:	2132      	movs	r1, #50	@ 0x32
 800265a:	f008 fbc3 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 135, (uint8_t *)text, LEFT_MODE);
 800265e:	1d3a      	adds	r2, r7, #4
 8002660:	2303      	movs	r3, #3
 8002662:	2187      	movs	r1, #135	@ 0x87
 8002664:	2000      	movs	r0, #0
 8002666:	f001 fe29 	bl	80042bc <BSP_LCD_DisplayStringAt>

    // Display right RMS
    snprintf(text, 50, "mean right: %d", mean_results[1]);
 800266a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800266c:	1d38      	adds	r0, r7, #4
 800266e:	4a71      	ldr	r2, [pc, #452]	@ (8002834 <show_data_menu_one+0x330>)
 8002670:	2132      	movs	r1, #50	@ 0x32
 8002672:	f008 fbb7 	bl	800ade4 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, LEFT_MODE);
 8002676:	1d3a      	adds	r2, r7, #4
 8002678:	2303      	movs	r3, #3
 800267a:	2196      	movs	r1, #150	@ 0x96
 800267c:	2000      	movs	r0, #0
 800267e:	f001 fe1d 	bl	80042bc <BSP_LCD_DisplayStringAt>

	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002682:	486d      	ldr	r0, [pc, #436]	@ (8002838 <show_data_menu_one+0x334>)
 8002684:	f001 fd62 	bl	800414c <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8002688:	4b6c      	ldr	r3, [pc, #432]	@ (800283c <show_data_menu_one+0x338>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002698:	2301      	movs	r3, #1
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800269e:	e03f      	b.n	8002720 <show_data_menu_one+0x21c>
		data_last = data;
 80026a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		data = (ADC_samples[MEAS_input_count*i]) / f;
 80026a8:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <show_data_menu_one+0x33c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	4a61      	ldr	r2, [pc, #388]	@ (800283c <show_data_menu_one+0x338>)
 80026b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 80026c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80026ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d903      	bls.n	80026da <show_data_menu_one+0x1d6>
 80026d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 80026da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	b298      	uxth	r0, r3
 80026e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b299      	uxth	r1, r3
 80026f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	b29c      	uxth	r4, r3
 8002700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002704:	b29a      	uxth	r2, r3
 8002706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800270a:	b29b      	uxth	r3, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	4622      	mov	r2, r4
 8002712:	f001 fe91 	bl	8004438 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800271a:	3301      	adds	r3, #1
 800271c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002724:	2b3b      	cmp	r3, #59	@ 0x3b
 8002726:	d9bb      	bls.n	80026a0 <show_data_menu_one+0x19c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8002728:	4b45      	ldr	r3, [pc, #276]	@ (8002840 <show_data_menu_one+0x33c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d153      	bne.n	80027d8 <show_data_menu_one+0x2d4>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002730:	4844      	ldr	r0, [pc, #272]	@ (8002844 <show_data_menu_one+0x340>)
 8002732:	f001 fd0b 	bl	800414c <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8002736:	4b41      	ldr	r3, [pc, #260]	@ (800283c <show_data_menu_one+0x338>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002746:	2301      	movs	r3, #1
 8002748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800274c:	e040      	b.n	80027d0 <show_data_menu_one+0x2cc>
			data_last = data;
 800274e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <show_data_menu_one+0x33c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	3301      	adds	r3, #1
 8002764:	4a35      	ldr	r2, [pc, #212]	@ (800283c <show_data_menu_one+0x338>)
 8002766:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800276a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8002776:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800277a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800277e:	429a      	cmp	r2, r3
 8002780:	d903      	bls.n	800278a <show_data_menu_one+0x286>
 8002782:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800278a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800278e:	3b01      	subs	r3, #1
 8002790:	b29b      	uxth	r3, r3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	b298      	uxth	r0, r3
 8002796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800279a:	b29a      	uxth	r2, r3
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	b299      	uxth	r1, r3
 80027a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	b29c      	uxth	r4, r3
 80027b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4622      	mov	r2, r4
 80027c2:	f001 fe39 	bl	8004438 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80027c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ca:	3301      	adds	r3, #1
 80027cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80027d6:	d9ba      	bls.n	800274e <show_data_menu_one+0x24a>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027de:	e013      	b.n	8002808 <show_data_menu_one+0x304>
		ADC_samples[2*i] = 0;
 80027e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4a15      	ldr	r2, [pc, #84]	@ (800283c <show_data_menu_one+0x338>)
 80027e8:	2100      	movs	r1, #0
 80027ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 80027ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	3301      	adds	r3, #1
 80027f6:	4a11      	ldr	r2, [pc, #68]	@ (800283c <show_data_menu_one+0x338>)
 80027f8:	2100      	movs	r1, #0
 80027fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80027fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002802:	3301      	adds	r3, #1
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800280c:	2b3b      	cmp	r3, #59	@ 0x3b
 800280e:	d9e7      	bls.n	80027e0 <show_data_menu_one+0x2dc>
	}
	ADC_sample_count = 0;
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <show_data_menu_one+0x344>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	37ac      	adds	r7, #172	@ 0xac
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	200000e4 	.word	0x200000e4
 8002824:	0800ed50 	.word	0x0800ed50
 8002828:	0800ed60 	.word	0x0800ed60
 800282c:	0800edc8 	.word	0x0800edc8
 8002830:	0800eda8 	.word	0x0800eda8
 8002834:	0800edb8 	.word	0x0800edb8
 8002838:	ff0000ff 	.word	0xff0000ff
 800283c:	2000036c 	.word	0x2000036c
 8002840:	20000004 	.word	0x20000004
 8002844:	ffff0000 	.word	0xffff0000
 8002848:	20000368 	.word	0x20000368

0800284c <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8002852:	4851      	ldr	r0, [pc, #324]	@ (8002998 <MENU_draw+0x14c>)
 8002854:	f001 fcac 	bl	80041b0 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8002858:	f001 fbf8 	bl	800404c <BSP_LCD_GetYSize>
 800285c:	4603      	mov	r3, r0
 800285e:	3b5a      	subs	r3, #90	@ 0x5a
 8002860:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8002862:	2302      	movs	r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8002866:	f001 fbe5 	bl	8004034 <BSP_LCD_GetXSize>
 800286a:	4603      	mov	r3, r0
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8002870:	235a      	movs	r3, #90	@ 0x5a
 8002872:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e084      	b.n	8002984 <MENU_draw+0x138>
		x = i*w;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8002884:	4945      	ldr	r1, [pc, #276]	@ (800299c <MENU_draw+0x150>)
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	3324      	adds	r3, #36	@ 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fc58 	bl	800414c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	b298      	uxth	r0, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b299      	uxth	r1, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b29c      	uxth	r4, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4622      	mov	r2, r4
 80028d6:	f001 fe79 	bl	80045cc <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 80028da:	4930      	ldr	r1, [pc, #192]	@ (800299c <MENU_draw+0x150>)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3324      	adds	r3, #36	@ 0x24
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 fc45 	bl	800417c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 80028f2:	492a      	ldr	r1, [pc, #168]	@ (800299c <MENU_draw+0x150>)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3320      	adds	r3, #32
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fc21 	bl	800414c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	4413      	add	r3, r2
 8002914:	b29a      	uxth	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b298      	uxth	r0, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	0052      	lsls	r2, r2, #1
 8002926:	4413      	add	r3, r2
 8002928:	b29a      	uxth	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4413      	add	r3, r2
 8002930:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4a17      	ldr	r2, [pc, #92]	@ (800299c <MENU_draw+0x150>)
 800293e:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8002940:	2303      	movs	r3, #3
 8002942:	f001 fcbb 	bl	80042bc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	0052      	lsls	r2, r2, #1
 800294e:	4413      	add	r3, r2
 8002950:	b29a      	uxth	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b298      	uxth	r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	b29b      	uxth	r3, r3
 8002964:	4413      	add	r3, r2
 8002966:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	3310      	adds	r3, #16
 8002974:	4a09      	ldr	r2, [pc, #36]	@ (800299c <MENU_draw+0x150>)
 8002976:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8002978:	2303      	movs	r3, #3
 800297a:	f001 fc9f 	bl	80042bc <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	f67f af77 	bls.w	800287a <MENU_draw+0x2e>
	}
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	200000dc 	.word	0x200000dc
 800299c:	2000000c 	.word	0x2000000c

080029a0 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f001 fbe8 	bl	800417c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80029ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80029b0:	f001 fbcc 	bl	800414c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80029b4:	4818      	ldr	r0, [pc, #96]	@ (8002a18 <MENU_hint+0x78>)
 80029b6:	f001 fbfb 	bl	80041b0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable-Monitor", LEFT_MODE);
 80029ba:	2303      	movs	r3, #3
 80029bc:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <MENU_hint+0x7c>)
 80029be:	210a      	movs	r1, #10
 80029c0:	2005      	movs	r0, #5
 80029c2:	f001 fc7b 	bl	80042bc <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 80029c6:	4816      	ldr	r0, [pc, #88]	@ (8002a20 <MENU_hint+0x80>)
 80029c8:	f001 fbf2 	bl	80041b0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item to", LEFT_MODE);
 80029cc:	2303      	movs	r3, #3
 80029ce:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <MENU_hint+0x84>)
 80029d0:	213c      	movs	r1, #60	@ 0x3c
 80029d2:	2005      	movs	r0, #5
 80029d4:	f001 fc72 	bl	80042bc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"start cable monitor", LEFT_MODE);
 80029d8:	2303      	movs	r3, #3
 80029da:	4a13      	ldr	r2, [pc, #76]	@ (8002a28 <MENU_hint+0x88>)
 80029dc:	2150      	movs	r1, #80	@ 0x50
 80029de:	2005      	movs	r0, #5
 80029e0:	f001 fc6c 	bl	80042bc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80029e4:	2303      	movs	r3, #3
 80029e6:	4a11      	ldr	r2, [pc, #68]	@ (8002a2c <MENU_hint+0x8c>)
 80029e8:	216e      	movs	r1, #110	@ 0x6e
 80029ea:	2005      	movs	r0, #5
 80029ec:	f001 fc66 	bl	80042bc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 80029f0:	2303      	movs	r3, #3
 80029f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a30 <MENU_hint+0x90>)
 80029f4:	2182      	movs	r1, #130	@ 0x82
 80029f6:	2005      	movs	r0, #5
 80029f8:	f001 fc60 	bl	80042bc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c)roggeluc, linortho", LEFT_MODE);
 80029fc:	2303      	movs	r3, #3
 80029fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <MENU_hint+0x94>)
 8002a00:	21a0      	movs	r1, #160	@ 0xa0
 8002a02:	2005      	movs	r0, #5
 8002a04:	f001 fc5a 	bl	80042bc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 180, (uint8_t *)"Version 01.12.2024", LEFT_MODE);
 8002a08:	2303      	movs	r3, #3
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <MENU_hint+0x98>)
 8002a0c:	21b4      	movs	r1, #180	@ 0xb4
 8002a0e:	2005      	movs	r0, #5
 8002a10:	f001 fc54 	bl	80042bc <BSP_LCD_DisplayStringAt>

}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200000d4 	.word	0x200000d4
 8002a1c:	0800ede0 	.word	0x0800ede0
 8002a20:	200000e4 	.word	0x200000e4
 8002a24:	0800edf0 	.word	0x0800edf0
 8002a28:	0800ee08 	.word	0x0800ee08
 8002a2c:	0800ee1c 	.word	0x0800ee1c
 8002a30:	0800ee30 	.word	0x0800ee30
 8002a34:	0800ee48 	.word	0x0800ee48
 8002a38:	0800ee60 	.word	0x0800ee60

08002a3c <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <MENU_get_transition+0x14>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000008 	.word	0x20000008

08002a54 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8002a54:	b598      	push	{r3, r4, r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002a58:	4834      	ldr	r0, [pc, #208]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002a5a:	f002 fa6d 	bl	8004f38 <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002a5e:	f001 faf5 	bl	800404c <BSP_LCD_GetYSize>
 8002a62:	4603      	mov	r3, r0
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002a68:	889b      	ldrh	r3, [r3, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002a70:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002a72:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d047      	beq.n	8002b0a <MENU_check_transition+0xb6>
		current_time = 0;
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <MENU_check_transition+0xdc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		sprintf(msg, "Touch detected\r\n");
 8002a80:	492c      	ldr	r1, [pc, #176]	@ (8002b34 <MENU_check_transition+0xe0>)
 8002a82:	482d      	ldr	r0, [pc, #180]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002a84:	f008 f9e2 	bl	800ae4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002a88:	482b      	ldr	r0, [pc, #172]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002a8a:	f7fd fc01 	bl	8000290 <strlen>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	4928      	ldr	r1, [pc, #160]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002a98:	4828      	ldr	r0, [pc, #160]	@ (8002b3c <MENU_check_transition+0xe8>)
 8002a9a:	f006 fb82 	bl	80091a2 <HAL_UART_Transmit>

        item_old = item_new;           // Update old item
 8002a9e:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <MENU_check_transition+0xec>)
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <MENU_check_transition+0xf0>)
 8002aa4:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 8002aa6:	f001 fad1 	bl	800404c <BSP_LCD_GetYSize>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	3b5a      	subs	r3, #90	@ 0x5a
 8002aae:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002ab0:	8892      	ldrh	r2, [r2, #4]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d238      	bcs.n	8002b28 <MENU_check_transition+0xd4>
 8002ab6:	f001 fac9 	bl	800404c <BSP_LCD_GetYSize>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002abe:	8892      	ldrh	r2, [r2, #4]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d931      	bls.n	8002b28 <MENU_check_transition+0xd4>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <MENU_check_transition+0xd8>)
 8002ac6:	885b      	ldrh	r3, [r3, #2]
 8002ac8:	461c      	mov	r4, r3
 8002aca:	f001 fab3 	bl	8004034 <BSP_LCD_GetXSize>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <MENU_check_transition+0xec>)
 8002ada:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <MENU_check_transition+0xec>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d902      	bls.n	8002aea <MENU_check_transition+0x96>
                item_new = MENU_NONE;  // Out of bounds
 8002ae4:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <MENU_check_transition+0xec>)
 8002ae6:	2206      	movs	r2, #6
 8002ae8:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <MENU_check_transition+0xec>)
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <MENU_check_transition+0xf0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d104      	bne.n	8002b00 <MENU_check_transition+0xac>
                MENU_transition = item_old;
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <MENU_check_transition+0xf0>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <MENU_check_transition+0xf4>)
 8002afc:	701a      	strb	r2, [r3, #0]
	} else {
		sprintf(msg, "No touch detected\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 8002afe:	e013      	b.n	8002b28 <MENU_check_transition+0xd4>
                MENU_transition = item_new;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <MENU_check_transition+0xec>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <MENU_check_transition+0xf4>)
 8002b06:	701a      	strb	r2, [r3, #0]
}
 8002b08:	e00e      	b.n	8002b28 <MENU_check_transition+0xd4>
		sprintf(msg, "No touch detected\r\n");
 8002b0a:	4910      	ldr	r1, [pc, #64]	@ (8002b4c <MENU_check_transition+0xf8>)
 8002b0c:	480a      	ldr	r0, [pc, #40]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002b0e:	f008 f99d 	bl	800ae4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b12:	4809      	ldr	r0, [pc, #36]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002b14:	f7fd fbbc 	bl	8000290 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	4905      	ldr	r1, [pc, #20]	@ (8002b38 <MENU_check_transition+0xe4>)
 8002b22:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <MENU_check_transition+0xe8>)
 8002b24:	f006 fb3d 	bl	80091a2 <HAL_UART_Transmit>
}
 8002b28:	bf00      	nop
 8002b2a:	bd98      	pop	{r3, r4, r7, pc}
 8002b2c:	20000584 	.word	0x20000584
 8002b30:	20000320 	.word	0x20000320
 8002b34:	0800ee74 	.word	0x0800ee74
 8002b38:	20000550 	.word	0x20000550
 8002b3c:	20000324 	.word	0x20000324
 8002b40:	2000005c 	.word	0x2000005c
 8002b44:	2000005d 	.word	0x2000005d
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	0800ee88 	.word	0x0800ee88

08002b50 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <EXTI15_10_IRQHandler+0x40>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <EXTI15_10_IRQHandler+0x40>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <EXTI15_10_IRQHandler+0x40>)
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b6a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002b6c:	f002 f9d8 	bl	8004f20 <BSP_TS_ITGetStatus>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8002b76:	f002 fa91 	bl	800509c <BSP_TS_ITClear>
			MENU_check_transition();
 8002b7a:	f7ff ff6b 	bl	8002a54 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <EXTI15_10_IRQHandler+0x40>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a03      	ldr	r2, [pc, #12]	@ (8002b90 <EXTI15_10_IRQHandler+0x40>)
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b88:	6153      	str	r3, [r2, #20]
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <__NVIC_EnableIRQ>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	@ (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_ClearPendingIRQ>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0c      	blt.n	8002bfc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	@ (8002c08 <__NVIC_ClearPendingIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	3360      	adds	r3, #96	@ 0x60
 8002bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <PB_init+0x38>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <PB_init+0x38>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <PB_init+0x38>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <PB_init+0x3c>)
 8002c30:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <PB_init+0x3c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020000 	.word	0x40020000

08002c4c <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <PB_enableIRQ+0x58>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <PB_enableIRQ+0x58>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <PB_enableIRQ+0x58>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <PB_enableIRQ+0x5c>)
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <PB_enableIRQ+0x5c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <PB_enableIRQ+0x60>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <PB_enableIRQ+0x60>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <PB_enableIRQ+0x60>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <PB_enableIRQ+0x60>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002c8e:	2006      	movs	r0, #6
 8002c90:	f7ff ff9e 	bl	8002bd0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002c94:	2006      	movs	r0, #6
 8002c96:	f7ff ff7d 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40013c00 	.word	0x40013c00

08002cb0 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <PB_pressed+0x20>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002cbc:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <PB_pressed+0x20>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	2000058c 	.word	0x2000058c

08002cd4 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <EXTI0_IRQHandler+0x2c>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <EXTI0_IRQHandler+0x2c>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <EXTI0_IRQHandler+0x2c>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <EXTI0_IRQHandler+0x30>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
	}
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40013c00 	.word	0x40013c00
 8002d04:	2000058c 	.word	0x2000058c

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a0f      	ldr	r2, [pc, #60]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_MspInit+0x4c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <HAL_UART_MspInit+0x94>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d134      	bne.n	8002de4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002d84:	f043 0310 	orr.w	r3, r3, #16
 8002d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <HAL_UART_MspInit+0x98>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002db2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dc4:	2307      	movs	r3, #7
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4809      	ldr	r0, [pc, #36]	@ (8002df4 <HAL_UART_MspInit+0x9c>)
 8002dd0:	f002 ff6c 	bl	8005cac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2025      	movs	r0, #37	@ 0x25
 8002dda:	f002 fadc 	bl	8005396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dde:	2025      	movs	r0, #37	@ 0x25
 8002de0:	f002 faf5 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	@ 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020000 	.word	0x40020000

08002df8 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002e0a:	bf00      	nop
 8002e0c:	e7fd      	b.n	8002e0a <HardFault_Handler+0x4>

08002e0e <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002e12:	bf00      	nop
 8002e14:	e7fd      	b.n	8002e12 <MemManage_Handler+0x4>

08002e16 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <BusFault_Handler+0x4>

08002e1e <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002e22:	bf00      	nop
 8002e24:	e7fd      	b.n	8002e22 <UsageFault_Handler+0x4>

08002e26 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002e54:	f002 f980 	bl	8005158 <HAL_IncTick>
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <SystemInit+0x60>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <SystemInit+0x60>)
 8002e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <SystemInit+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <SystemInit+0x64>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e7c:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <SystemInit+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <SystemInit+0x64>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec0 <SystemInit+0x64>)
 8002e88:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <SystemInit+0x64>)
 8002e94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <SystemInit+0x68>)
 8002e96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <SystemInit+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <SystemInit+0x64>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <SystemInit+0x64>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <SystemInit+0x60>)
 8002eac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002eb0:	609a      	str	r2, [r3, #8]
#endif
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	24003010 	.word	0x24003010

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ece:	e003      	b.n	8002ed8 <LoopCopyDataInit>

08002ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ed6:	3104      	adds	r1, #4

08002ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ed8:	480b      	ldr	r0, [pc, #44]	@ (8002f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ee0:	d3f6      	bcc.n	8002ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8002f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ee4:	e002      	b.n	8002eec <LoopFillZerobss>

08002ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ee8:	f842 3b04 	str.w	r3, [r2], #4

08002eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ef0:	d3f9      	bcc.n	8002ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ef2:	f7ff ffb3 	bl	8002e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f008 f8f3 	bl	800b0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7fe fa47 	bl	800138c <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002f04:	080128b0 	.word	0x080128b0
  ldr  r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f0c:	200002d0 	.word	0x200002d0
  ldr  r2, =_sbss
 8002f10:	200002d0 	.word	0x200002d0
  ldr  r3, = _ebss
 8002f14:	200009a4 	.word	0x200009a4

08002f18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <CAN1_RX0_IRQHandler>

08002f1a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002f1e:	f000 fed3 	bl	8003cc8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002f22:	20ca      	movs	r0, #202	@ 0xca
 8002f24:	f000 f95d 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002f28:	20c3      	movs	r0, #195	@ 0xc3
 8002f2a:	f000 f967 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002f2e:	2008      	movs	r0, #8
 8002f30:	f000 f964 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002f34:	2050      	movs	r0, #80	@ 0x50
 8002f36:	f000 f961 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002f3a:	20cf      	movs	r0, #207	@ 0xcf
 8002f3c:	f000 f951 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f000 f95b 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002f46:	20c1      	movs	r0, #193	@ 0xc1
 8002f48:	f000 f958 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002f4c:	2030      	movs	r0, #48	@ 0x30
 8002f4e:	f000 f955 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002f52:	20ed      	movs	r0, #237	@ 0xed
 8002f54:	f000 f945 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002f58:	2064      	movs	r0, #100	@ 0x64
 8002f5a:	f000 f94f 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002f5e:	2003      	movs	r0, #3
 8002f60:	f000 f94c 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002f64:	2012      	movs	r0, #18
 8002f66:	f000 f949 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002f6a:	2081      	movs	r0, #129	@ 0x81
 8002f6c:	f000 f946 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002f70:	20e8      	movs	r0, #232	@ 0xe8
 8002f72:	f000 f936 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002f76:	2085      	movs	r0, #133	@ 0x85
 8002f78:	f000 f940 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 f93d 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002f82:	2078      	movs	r0, #120	@ 0x78
 8002f84:	f000 f93a 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002f88:	20cb      	movs	r0, #203	@ 0xcb
 8002f8a:	f000 f92a 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002f8e:	2039      	movs	r0, #57	@ 0x39
 8002f90:	f000 f934 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002f94:	202c      	movs	r0, #44	@ 0x2c
 8002f96:	f000 f931 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f92e 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002fa0:	2034      	movs	r0, #52	@ 0x34
 8002fa2:	f000 f92b 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f000 f928 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002fac:	20f7      	movs	r0, #247	@ 0xf7
 8002fae:	f000 f918 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002fb2:	2020      	movs	r0, #32
 8002fb4:	f000 f922 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002fb8:	20ea      	movs	r0, #234	@ 0xea
 8002fba:	f000 f912 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 f91c 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f000 f919 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002fca:	20b1      	movs	r0, #177	@ 0xb1
 8002fcc:	f000 f909 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f000 f913 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002fd6:	201b      	movs	r0, #27
 8002fd8:	f000 f910 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002fdc:	20b6      	movs	r0, #182	@ 0xb6
 8002fde:	f000 f900 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002fe2:	200a      	movs	r0, #10
 8002fe4:	f000 f90a 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002fe8:	20a2      	movs	r0, #162	@ 0xa2
 8002fea:	f000 f907 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002fee:	20c0      	movs	r0, #192	@ 0xc0
 8002ff0:	f000 f8f7 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ff4:	2010      	movs	r0, #16
 8002ff6:	f000 f901 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002ffa:	20c1      	movs	r0, #193	@ 0xc1
 8002ffc:	f000 f8f1 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003000:	2010      	movs	r0, #16
 8003002:	f000 f8fb 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003006:	20c5      	movs	r0, #197	@ 0xc5
 8003008:	f000 f8eb 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800300c:	2045      	movs	r0, #69	@ 0x45
 800300e:	f000 f8f5 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003012:	2015      	movs	r0, #21
 8003014:	f000 f8f2 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003018:	20c7      	movs	r0, #199	@ 0xc7
 800301a:	f000 f8e2 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800301e:	2090      	movs	r0, #144	@ 0x90
 8003020:	f000 f8ec 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003024:	2036      	movs	r0, #54	@ 0x36
 8003026:	f000 f8dc 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800302a:	20c8      	movs	r0, #200	@ 0xc8
 800302c:	f000 f8e6 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003030:	20f2      	movs	r0, #242	@ 0xf2
 8003032:	f000 f8d6 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003036:	2000      	movs	r0, #0
 8003038:	f000 f8e0 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800303c:	20b0      	movs	r0, #176	@ 0xb0
 800303e:	f000 f8d0 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003042:	20c2      	movs	r0, #194	@ 0xc2
 8003044:	f000 f8da 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003048:	20b6      	movs	r0, #182	@ 0xb6
 800304a:	f000 f8ca 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800304e:	200a      	movs	r0, #10
 8003050:	f000 f8d4 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003054:	20a7      	movs	r0, #167	@ 0xa7
 8003056:	f000 f8d1 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800305a:	2027      	movs	r0, #39	@ 0x27
 800305c:	f000 f8ce 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003060:	2004      	movs	r0, #4
 8003062:	f000 f8cb 	bl	80031fc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003066:	202a      	movs	r0, #42	@ 0x2a
 8003068:	f000 f8bb 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f000 f8c5 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f000 f8c2 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f000 f8bf 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800307e:	20ef      	movs	r0, #239	@ 0xef
 8003080:	f000 f8bc 	bl	80031fc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003084:	202b      	movs	r0, #43	@ 0x2b
 8003086:	f000 f8ac 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f000 f8b6 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f000 f8b3 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003096:	2001      	movs	r0, #1
 8003098:	f000 f8b0 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800309c:	203f      	movs	r0, #63	@ 0x3f
 800309e:	f000 f8ad 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80030a2:	20f6      	movs	r0, #246	@ 0xf6
 80030a4:	f000 f89d 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f000 f8a7 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 f8a4 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80030b4:	2006      	movs	r0, #6
 80030b6:	f000 f8a1 	bl	80031fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80030ba:	202c      	movs	r0, #44	@ 0x2c
 80030bc:	f000 f891 	bl	80031e2 <ili9341_WriteReg>
  LCD_Delay(200);
 80030c0:	20c8      	movs	r0, #200	@ 0xc8
 80030c2:	f000 feef 	bl	8003ea4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80030c6:	2026      	movs	r0, #38	@ 0x26
 80030c8:	f000 f88b 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f000 f895 	bl	80031fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80030d2:	20e0      	movs	r0, #224	@ 0xe0
 80030d4:	f000 f885 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80030d8:	200f      	movs	r0, #15
 80030da:	f000 f88f 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80030de:	2029      	movs	r0, #41	@ 0x29
 80030e0:	f000 f88c 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80030e4:	2024      	movs	r0, #36	@ 0x24
 80030e6:	f000 f889 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80030ea:	200c      	movs	r0, #12
 80030ec:	f000 f886 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80030f0:	200e      	movs	r0, #14
 80030f2:	f000 f883 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80030f6:	2009      	movs	r0, #9
 80030f8:	f000 f880 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80030fc:	204e      	movs	r0, #78	@ 0x4e
 80030fe:	f000 f87d 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003102:	2078      	movs	r0, #120	@ 0x78
 8003104:	f000 f87a 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003108:	203c      	movs	r0, #60	@ 0x3c
 800310a:	f000 f877 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800310e:	2009      	movs	r0, #9
 8003110:	f000 f874 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003114:	2013      	movs	r0, #19
 8003116:	f000 f871 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800311a:	2005      	movs	r0, #5
 800311c:	f000 f86e 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003120:	2017      	movs	r0, #23
 8003122:	f000 f86b 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003126:	2011      	movs	r0, #17
 8003128:	f000 f868 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f000 f865 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003132:	20e1      	movs	r0, #225	@ 0xe1
 8003134:	f000 f855 	bl	80031e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f000 f85f 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800313e:	2016      	movs	r0, #22
 8003140:	f000 f85c 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003144:	201b      	movs	r0, #27
 8003146:	f000 f859 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800314a:	2004      	movs	r0, #4
 800314c:	f000 f856 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003150:	2011      	movs	r0, #17
 8003152:	f000 f853 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003156:	2007      	movs	r0, #7
 8003158:	f000 f850 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800315c:	2031      	movs	r0, #49	@ 0x31
 800315e:	f000 f84d 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003162:	2033      	movs	r0, #51	@ 0x33
 8003164:	f000 f84a 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003168:	2042      	movs	r0, #66	@ 0x42
 800316a:	f000 f847 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800316e:	2005      	movs	r0, #5
 8003170:	f000 f844 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003174:	200c      	movs	r0, #12
 8003176:	f000 f841 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800317a:	200a      	movs	r0, #10
 800317c:	f000 f83e 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003180:	2028      	movs	r0, #40	@ 0x28
 8003182:	f000 f83b 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003186:	202f      	movs	r0, #47	@ 0x2f
 8003188:	f000 f838 	bl	80031fc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800318c:	200f      	movs	r0, #15
 800318e:	f000 f835 	bl	80031fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003192:	2011      	movs	r0, #17
 8003194:	f000 f825 	bl	80031e2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003198:	20c8      	movs	r0, #200	@ 0xc8
 800319a:	f000 fe83 	bl	8003ea4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800319e:	2029      	movs	r0, #41	@ 0x29
 80031a0:	f000 f81f 	bl	80031e2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80031a4:	202c      	movs	r0, #44	@ 0x2c
 80031a6:	f000 f81c 	bl	80031e2 <ili9341_WriteReg>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}

080031ae <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80031b2:	f000 fd89 	bl	8003cc8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80031b6:	2103      	movs	r1, #3
 80031b8:	20d3      	movs	r0, #211	@ 0xd3
 80031ba:	f000 f82c 	bl	8003216 <ili9341_ReadData>
 80031be:	4603      	mov	r3, r0
 80031c0:	b29b      	uxth	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80031ca:	2029      	movs	r0, #41	@ 0x29
 80031cc:	f000 f809 	bl	80031e2 <ili9341_WriteReg>
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80031d8:	2028      	movs	r0, #40	@ 0x28
 80031da:	f000 f802 	bl	80031e2 <ili9341_WriteReg>
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fe04 	bl	8003dfc <LCD_IO_WriteReg>
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fdd5 	bl	8003db8 <LCD_IO_WriteData>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	460a      	mov	r2, r1
 8003220:	80fb      	strh	r3, [r7, #6]
 8003222:	4613      	mov	r3, r2
 8003224:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003226:	797a      	ldrb	r2, [r7, #5]
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fe07 	bl	8003e40 <LCD_IO_ReadData>
 8003232:	4603      	mov	r3, r0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003240:	23f0      	movs	r3, #240	@ 0xf0
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003250:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fa59 	bl	8003724 <stmpe811_GetInstance>
 8003272:	4603      	mov	r3, r0
 8003274:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2bff      	cmp	r3, #255	@ 0xff
 800327a:	d112      	bne.n	80032a2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800327c:	2000      	movs	r0, #0
 800327e:	f000 fa51 	bl	8003724 <stmpe811_GetInstance>
 8003282:	4603      	mov	r3, r0
 8003284:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d80a      	bhi.n	80032a2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800328c:	7bbb      	ldrb	r3, [r7, #14]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	b2d1      	uxtb	r1, r2
 8003292:	4a06      	ldr	r2, [pc, #24]	@ (80032ac <stmpe811_Init+0x4c>)
 8003294:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003296:	f000 fe10 	bl	8003eba <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f807 	bl	80032b0 <stmpe811_Reset>
    }
  }
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000590 	.word	0x20000590

080032b0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2202      	movs	r2, #2
 80032c0:	2103      	movs	r1, #3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fe05 	bl	8003ed2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80032c8:	200a      	movs	r0, #10
 80032ca:	f000 fe3e 	bl	8003f4a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fdfb 	bl	8003ed2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80032dc:	2002      	movs	r0, #2
 80032de:	f000 fe34 	bl	8003f4a <IOE_Delay>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80032ea:	b590      	push	{r4, r7, lr}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80032f4:	f000 fde1 	bl	8003eba <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fdfa 	bl	8003ef8 <IOE_Read>
 8003304:	4603      	mov	r3, r0
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fdf1 	bl	8003ef8 <IOE_Read>
 8003316:	4603      	mov	r3, r0
 8003318:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800331a:	4323      	orrs	r3, r4
 800331c:	b21b      	sxth	r3, r3
 800331e:	b29b      	uxth	r3, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}

08003328 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2109      	movs	r1, #9
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fddb 	bl	8003ef8 <IOE_Read>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	2109      	movs	r1, #9
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fdbb 	bl	8003ed2 <IOE_Write>
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2109      	movs	r1, #9
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fdbd 	bl	8003ef8 <IOE_Read>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	2109      	movs	r1, #9
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fd9d 	bl	8003ed2 <IOE_Write>
    
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	460a      	mov	r2, r1
 80033aa:	80fb      	strh	r3, [r7, #6]
 80033ac:	4613      	mov	r3, r2
 80033ae:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	210a      	movs	r1, #10
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd9c 	bl	8003ef8 <IOE_Read>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	797b      	ldrb	r3, [r7, #5]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	210a      	movs	r1, #10
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd7c 	bl	8003ed2 <IOE_Write>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	460a      	mov	r2, r1
 80033ec:	80fb      	strh	r3, [r7, #6]
 80033ee:	4613      	mov	r3, r2
 80033f0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	210a      	movs	r1, #10
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fd7b 	bl	8003ef8 <IOE_Read>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003406:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800340a:	43db      	mvns	r3, r3
 800340c:	b25a      	sxtb	r2, r3
 800340e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003412:	4013      	ands	r3, r2
 8003414:	b25b      	sxtb	r3, r3
 8003416:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	210a      	movs	r1, #10
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd56 	bl	8003ed2 <IOE_Write>
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	460a      	mov	r2, r1
 8003438:	80fb      	strh	r3, [r7, #6]
 800343a:	4613      	mov	r3, r2
 800343c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	210b      	movs	r1, #11
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fd57 	bl	8003ef8 <IOE_Read>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	797b      	ldrb	r3, [r7, #5]
 8003450:	4013      	ands	r3, r2
 8003452:	b2db      	uxtb	r3, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	460a      	mov	r2, r1
 8003466:	80fb      	strh	r3, [r7, #6]
 8003468:	4613      	mov	r3, r2
 800346a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	797a      	ldrb	r2, [r7, #5]
 8003472:	210b      	movs	r1, #11
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fd2c 	bl	8003ed2 <IOE_Write>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	6039      	str	r1, [r7, #0]
 800348c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2117      	movs	r1, #23
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fd2d 	bl	8003ef8 <IOE_Read>
 800349e:	4603      	mov	r3, r0
 80034a0:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4013      	ands	r3, r2
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	2117      	movs	r1, #23
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd08 	bl	8003ed2 <IOE_Write>
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2104      	movs	r1, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd0c 	bl	8003ef8 <IOE_Read>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	f023 0304 	bic.w	r3, r3, #4
 80034ea:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	2104      	movs	r1, #4
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fcec 	bl	8003ed2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	21f0      	movs	r1, #240	@ 0xf0
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ffbf 	bl	8003482 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	2104      	movs	r1, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fcdc 	bl	8003ed2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2249      	movs	r2, #73	@ 0x49
 8003520:	2120      	movs	r1, #32
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fcd5 	bl	8003ed2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003528:	2002      	movs	r0, #2
 800352a:	f000 fd0e 	bl	8003f4a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2201      	movs	r2, #1
 8003534:	2121      	movs	r1, #33	@ 0x21
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fccb 	bl	8003ed2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	229a      	movs	r2, #154	@ 0x9a
 8003542:	2141      	movs	r1, #65	@ 0x41
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fcc4 	bl	8003ed2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2201      	movs	r2, #1
 8003550:	214a      	movs	r1, #74	@ 0x4a
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fcbd 	bl	8003ed2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2201      	movs	r2, #1
 800355e:	214b      	movs	r1, #75	@ 0x4b
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fcb6 	bl	8003ed2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2200      	movs	r2, #0
 800356c:	214b      	movs	r1, #75	@ 0x4b
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fcaf 	bl	8003ed2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2201      	movs	r2, #1
 800357a:	2156      	movs	r1, #86	@ 0x56
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fca8 	bl	8003ed2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2201      	movs	r2, #1
 8003588:	2158      	movs	r1, #88	@ 0x58
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fca1 	bl	8003ed2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2201      	movs	r2, #1
 8003596:	2140      	movs	r1, #64	@ 0x40
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fc9a 	bl	8003ed2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	22ff      	movs	r2, #255	@ 0xff
 80035a4:	210b      	movs	r1, #11
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fc93 	bl	8003ed2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80035ac:	2002      	movs	r0, #2
 80035ae:	f000 fccc 	bl	8003f4a <IOE_Delay>
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2140      	movs	r1, #64	@ 0x40
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fc92 	bl	8003ef8 <IOE_Read>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	214c      	movs	r1, #76	@ 0x4c
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc80 	bl	8003ef8 <IOE_Read>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e00d      	b.n	8003620 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2201      	movs	r2, #1
 800360a:	214b      	movs	r1, #75	@ 0x4b
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fc60 	bl	8003ed2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2200      	movs	r2, #0
 8003618:	214b      	movs	r1, #75	@ 0x4b
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fc59 	bl	8003ed2 <IOE_Write>
  }
  
  return ret;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	b2d8      	uxtb	r0, r3
 800363c:	f107 0210 	add.w	r2, r7, #16
 8003640:	2304      	movs	r3, #4
 8003642:	21d7      	movs	r1, #215	@ 0xd7
 8003644:	f000 fc6b 	bl	8003f1e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003648:	7c3b      	ldrb	r3, [r7, #16]
 800364a:	061a      	lsls	r2, r3, #24
 800364c:	7c7b      	ldrb	r3, [r7, #17]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	7cbb      	ldrb	r3, [r7, #18]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4313      	orrs	r3, r2
 8003658:	7cfa      	ldrb	r2, [r7, #19]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	0d1b      	lsrs	r3, r3, #20
 8003662:	b29a      	uxth	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2201      	movs	r2, #1
 800367e:	214b      	movs	r1, #75	@ 0x4b
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc26 	bl	8003ed2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2200      	movs	r2, #0
 800368c:	214b      	movs	r1, #75	@ 0x4b
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fc1f 	bl	8003ed2 <IOE_Write>
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80036a6:	f000 fc0e 	bl	8003ec6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	211f      	movs	r1, #31
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fe76 	bl	80033a0 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fe36 	bl	8003328 <stmpe811_EnableGlobalIT>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fe47 	bl	8003364 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	211f      	movs	r1, #31
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fe81 	bl	80033e2 <stmpe811_DisableITSource>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	211f      	movs	r1, #31
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fe99 	bl	800342e <stmpe811_ReadGITStatus>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	211f      	movs	r1, #31
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fea1 	bl	800345c <stmpe811_ClearGlobalIT>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e00b      	b.n	8003750 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <stmpe811_GetInstance+0x40>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	461a      	mov	r2, r3
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	e006      	b.n	8003758 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3301      	adds	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d9f0      	bls.n	8003738 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003756:	23ff      	movs	r3, #255	@ 0xff
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000590 	.word	0x20000590

08003768 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10e      	bne.n	8003796 <BSP_LED_Init+0x2e>
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <BSP_LED_Init+0x9c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	4a20      	ldr	r2, [pc, #128]	@ (8003804 <BSP_LED_Init+0x9c>)
 8003782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003786:	6313      	str	r3, [r2, #48]	@ 0x30
 8003788:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <BSP_LED_Init+0x9c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	e010      	b.n	80037b8 <BSP_LED_Init+0x50>
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d10d      	bne.n	80037b8 <BSP_LED_Init+0x50>
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	4b18      	ldr	r3, [pc, #96]	@ (8003804 <BSP_LED_Init+0x9c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <BSP_LED_Init+0x9c>)
 80037a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ac:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <BSP_LED_Init+0x9c>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <BSP_LED_Init+0xa0>)
 80037bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80037ca:	2302      	movs	r3, #2
 80037cc:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	4a0e      	ldr	r2, [pc, #56]	@ (800380c <BSP_LED_Init+0xa4>)
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	f107 0214 	add.w	r2, r7, #20
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fa65 	bl	8005cac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a09      	ldr	r2, [pc, #36]	@ (800380c <BSP_LED_Init+0xa4>)
 80037e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4a06      	ldr	r2, [pc, #24]	@ (8003808 <BSP_LED_Init+0xa0>)
 80037ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	f002 fc05 	bl	8006004 <HAL_GPIO_WritePin>
}
 80037fa:	bf00      	nop
 80037fc:	3728      	adds	r7, #40	@ 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	0800eeb4 	.word	0x0800eeb4
 800380c:	200000c4 	.word	0x200000c4

08003810 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4a07      	ldr	r2, [pc, #28]	@ (800383c <BSP_LED_On+0x2c>)
 800381e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	4a06      	ldr	r2, [pc, #24]	@ (8003840 <BSP_LED_On+0x30>)
 8003826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382a:	2201      	movs	r2, #1
 800382c:	4619      	mov	r1, r3
 800382e:	f002 fbe9 	bl	8006004 <HAL_GPIO_WritePin>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200000c4 	.word	0x200000c4
 8003840:	0800eeb4 	.word	0x0800eeb4

08003844 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <BSP_LED_Off+0x2c>)
 8003852:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <BSP_LED_Off+0x30>)
 800385a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800385e:	2200      	movs	r2, #0
 8003860:	4619      	mov	r1, r3
 8003862:	f002 fbcf 	bl	8006004 <HAL_GPIO_WritePin>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200000c4 	.word	0x200000c4
 8003874:	0800eeb4 	.word	0x0800eeb4

08003878 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a33      	ldr	r2, [pc, #204]	@ (8003954 <I2Cx_MspInit+0xdc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d15f      	bne.n	800394a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b32      	ldr	r3, [pc, #200]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a31      	ldr	r2, [pc, #196]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b2f      	ldr	r3, [pc, #188]	@ (8003958 <I2Cx_MspInit+0xe0>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <I2Cx_MspInit+0xe0>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <I2Cx_MspInit+0xe0>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b28      	ldr	r3, [pc, #160]	@ (8003958 <I2Cx_MspInit+0xe0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80038c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80038c8:	2312      	movs	r3, #18
 80038ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80038d4:	2304      	movs	r3, #4
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	481f      	ldr	r0, [pc, #124]	@ (800395c <I2Cx_MspInit+0xe4>)
 80038e0:	f002 f9e4 	bl	8005cac <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80038e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4619      	mov	r1, r3
 80038f0:	481b      	ldr	r0, [pc, #108]	@ (8003960 <I2Cx_MspInit+0xe8>)
 80038f2:	f002 f9db 	bl	8005cac <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4b17      	ldr	r3, [pc, #92]	@ (8003958 <I2Cx_MspInit+0xe0>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003900:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003904:	6413      	str	r3, [r2, #64]	@ 0x40
 8003906:	4b14      	ldr	r3, [pc, #80]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8003912:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a10      	ldr	r2, [pc, #64]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800391c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800391e:	4b0e      	ldr	r3, [pc, #56]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <I2Cx_MspInit+0xe0>)
 8003924:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003928:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	210f      	movs	r1, #15
 800392e:	2048      	movs	r0, #72	@ 0x48
 8003930:	f001 fd31 	bl	8005396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003934:	2048      	movs	r0, #72	@ 0x48
 8003936:	f001 fd4a 	bl	80053ce <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	210f      	movs	r1, #15
 800393e:	2049      	movs	r0, #73	@ 0x49
 8003940:	f001 fd29 	bl	8005396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003944:	2049      	movs	r0, #73	@ 0x49
 8003946:	f001 fd42 	bl	80053ce <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800394a:	bf00      	nop
 800394c:	3728      	adds	r7, #40	@ 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40005c00 	.word	0x40005c00
 8003958:	40023800 	.word	0x40023800
 800395c:	40020000 	.word	0x40020000
 8003960:	40020800 	.word	0x40020800

08003964 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003968:	4814      	ldr	r0, [pc, #80]	@ (80039bc <I2Cx_Init+0x58>)
 800396a:	f003 f80d 	bl	8006988 <HAL_I2C_GetState>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d121      	bne.n	80039b8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <I2Cx_Init+0x58>)
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <I2Cx_Init+0x5c>)
 8003978:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <I2Cx_Init+0x58>)
 800397c:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <I2Cx_Init+0x60>)
 800397e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <I2Cx_Init+0x58>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <I2Cx_Init+0x58>)
 8003988:	2200      	movs	r2, #0
 800398a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <I2Cx_Init+0x58>)
 800398e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003992:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003994:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <I2Cx_Init+0x58>)
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <I2Cx_Init+0x58>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <I2Cx_Init+0x58>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <I2Cx_Init+0x58>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80039ac:	4803      	ldr	r0, [pc, #12]	@ (80039bc <I2Cx_Init+0x58>)
 80039ae:	f7ff ff63 	bl	8003878 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80039b2:	4802      	ldr	r0, [pc, #8]	@ (80039bc <I2Cx_Init+0x58>)
 80039b4:	f002 fb40 	bl	8006038 <HAL_I2C_Init>
  }
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000594 	.word	0x20000594
 80039c0:	40005c00 	.word	0x40005c00
 80039c4:	000186a0 	.word	0x000186a0

080039c8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <I2Cx_ITConfig+0x58>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <I2Cx_ITConfig+0x58>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <I2Cx_ITConfig+0x58>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80039ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80039f0:	2301      	movs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <I2Cx_ITConfig+0x5c>)
 80039fa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4809      	ldr	r0, [pc, #36]	@ (8003a28 <I2Cx_ITConfig+0x60>)
 8003a02:	f002 f953 	bl	8005cac <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003a06:	2200      	movs	r2, #0
 8003a08:	210f      	movs	r1, #15
 8003a0a:	2028      	movs	r0, #40	@ 0x28
 8003a0c:	f001 fcc3 	bl	8005396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003a10:	2028      	movs	r0, #40	@ 0x28
 8003a12:	f001 fcdc 	bl	80053ce <HAL_NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	10210000 	.word	0x10210000
 8003a28:	40020000 	.word	0x40020000

08003a2c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af04      	add	r7, sp, #16
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
 8003a36:	460b      	mov	r3, r1
 8003a38:	71bb      	strb	r3, [r7, #6]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	b299      	uxth	r1, r3
 8003a46:	79bb      	ldrb	r3, [r7, #6]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <I2Cx_WriteData+0x4c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	9302      	str	r3, [sp, #8]
 8003a50:	2301      	movs	r3, #1
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	1d7b      	adds	r3, r7, #5
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4808      	ldr	r0, [pc, #32]	@ (8003a7c <I2Cx_WriteData+0x50>)
 8003a5c:	f002 fc74 	bl	8006348 <HAL_I2C_Mem_Write>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003a6a:	f000 f863 	bl	8003b34 <I2Cx_Error>
  }        
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200000cc 	.word	0x200000cc
 8003a7c:	20000594 	.word	0x20000594

08003a80 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	b299      	uxth	r1, r3
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <I2Cx_ReadData+0x50>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	9302      	str	r3, [sp, #8]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	f107 030e 	add.w	r3, r7, #14
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4808      	ldr	r0, [pc, #32]	@ (8003ad4 <I2Cx_ReadData+0x54>)
 8003ab4:	f002 fd42 	bl	800653c <HAL_I2C_Mem_Read>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003ac2:	f000 f837 	bl	8003b34 <I2Cx_Error>
  
  }
  return value;
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200000cc 	.word	0x200000cc
 8003ad4:	20000594 	.word	0x20000594

08003ad8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	603a      	str	r2, [r7, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	71bb      	strb	r3, [r7, #6]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	b299      	uxth	r1, r3
 8003af6:	79bb      	ldrb	r3, [r7, #6]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <I2Cx_ReadBuffer+0x54>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	88bb      	ldrh	r3, [r7, #4]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4809      	ldr	r0, [pc, #36]	@ (8003b30 <I2Cx_ReadBuffer+0x58>)
 8003b0c:	f002 fd16 	bl	800653c <HAL_I2C_Mem_Read>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e002      	b.n	8003b24 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003b1e:	f000 f809 	bl	8003b34 <I2Cx_Error>

    return 1;
 8003b22:	2301      	movs	r3, #1
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200000cc 	.word	0x200000cc
 8003b30:	20000594 	.word	0x20000594

08003b34 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003b38:	4803      	ldr	r0, [pc, #12]	@ (8003b48 <I2Cx_Error+0x14>)
 8003b3a:	f002 fbc1 	bl	80062c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003b3e:	f7ff ff11 	bl	8003964 <I2Cx_Init>
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000594 	.word	0x20000594

08003b4c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003b50:	4819      	ldr	r0, [pc, #100]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b52:	f005 f9ba 	bl	8008eca <HAL_SPI_GetState>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d12b      	bne.n	8003bb4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003b5c:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <SPIx_Init+0x70>)
 8003b60:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b64:	2218      	movs	r2, #24
 8003b66:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003b68:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003b74:	4b10      	ldr	r3, [pc, #64]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003b80:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b82:	2207      	movs	r2, #7
 8003b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003b92:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b98:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003ba2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ba6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003ba8:	4803      	ldr	r0, [pc, #12]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003baa:	f000 f853 	bl	8003c54 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003bae:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <SPIx_Init+0x6c>)
 8003bb0:	f004 fc01 	bl	80083b6 <HAL_SPI_Init>
  } 
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200005e8 	.word	0x200005e8
 8003bbc:	40015000 	.word	0x40015000

08003bc0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <SPIx_Read+0x38>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f107 0108 	add.w	r1, r7, #8
 8003bda:	4808      	ldr	r0, [pc, #32]	@ (8003bfc <SPIx_Read+0x3c>)
 8003bdc:	f004 fde8 	bl	80087b0 <HAL_SPI_Receive>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003bea:	f000 f827 	bl	8003c3c <SPIx_Error>
  }
  
  return readvalue;
 8003bee:	68bb      	ldr	r3, [r7, #8]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200000d0 	.word	0x200000d0
 8003bfc:	200005e8 	.word	0x200005e8

08003c00 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <SPIx_Write+0x34>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	1db9      	adds	r1, r7, #6
 8003c14:	2201      	movs	r2, #1
 8003c16:	4808      	ldr	r0, [pc, #32]	@ (8003c38 <SPIx_Write+0x38>)
 8003c18:	f004 fc74 	bl	8008504 <HAL_SPI_Transmit>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003c26:	f000 f809 	bl	8003c3c <SPIx_Error>
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200000d0 	.word	0x200000d0
 8003c38:	200005e8 	.word	0x200005e8

08003c3c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003c40:	4803      	ldr	r0, [pc, #12]	@ (8003c50 <SPIx_Error+0x14>)
 8003c42:	f004 fc23 	bl	800848c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003c46:	f7ff ff81 	bl	8003b4c <SPIx_Init>
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200005e8 	.word	0x200005e8

08003c54 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	4a16      	ldr	r2, [pc, #88]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6c:	4b14      	ldr	r3, [pc, #80]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c82:	f043 0320 	orr.w	r3, r3, #32
 8003c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c88:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <SPIx_MspInit+0x6c>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003c94:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4804      	ldr	r0, [pc, #16]	@ (8003cc4 <SPIx_MspInit+0x70>)
 8003cb2:	f001 fffb 	bl	8005cac <HAL_GPIO_Init>
}
 8003cb6:	bf00      	nop
 8003cb8:	3728      	adds	r7, #40	@ 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40021400 	.word	0x40021400

08003cc8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <LCD_IO_Init+0xe0>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d164      	bne.n	8003da0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003cd6:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <LCD_IO_Init+0xe0>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	4b32      	ldr	r3, [pc, #200]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	4a31      	ldr	r2, [pc, #196]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cec:	4b2f      	ldr	r3, [pc, #188]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d06:	2302      	movs	r3, #2
 8003d08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4827      	ldr	r0, [pc, #156]	@ (8003db0 <LCD_IO_Init+0xe8>)
 8003d12:	f001 ffcb 	bl	8005cac <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a23      	ldr	r2, [pc, #140]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4819      	ldr	r0, [pc, #100]	@ (8003db0 <LCD_IO_Init+0xe8>)
 8003d4c:	f001 ffae 	bl	8005cac <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003d50:	2300      	movs	r3, #0
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	4a14      	ldr	r2, [pc, #80]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <LCD_IO_Init+0xe4>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003d70:	2301      	movs	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4619      	mov	r1, r3
 8003d82:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <LCD_IO_Init+0xec>)
 8003d84:	f001 ff92 	bl	8005cac <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	4809      	ldr	r0, [pc, #36]	@ (8003db4 <LCD_IO_Init+0xec>)
 8003d8e:	f002 f939 	bl	8006004 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003d92:	2201      	movs	r2, #1
 8003d94:	2104      	movs	r1, #4
 8003d96:	4807      	ldr	r0, [pc, #28]	@ (8003db4 <LCD_IO_Init+0xec>)
 8003d98:	f002 f934 	bl	8006004 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003d9c:	f7ff fed6 	bl	8003b4c <SPIx_Init>
  }
}
 8003da0:	bf00      	nop
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000640 	.word	0x20000640
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40020c00 	.word	0x40020c00
 8003db4:	40020800 	.word	0x40020800

08003db8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003dc8:	480a      	ldr	r0, [pc, #40]	@ (8003df4 <LCD_IO_WriteData+0x3c>)
 8003dca:	f002 f91b 	bl	8006004 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2104      	movs	r1, #4
 8003dd2:	4809      	ldr	r0, [pc, #36]	@ (8003df8 <LCD_IO_WriteData+0x40>)
 8003dd4:	f002 f916 	bl	8006004 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff10 	bl	8003c00 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003de0:	2201      	movs	r2, #1
 8003de2:	2104      	movs	r1, #4
 8003de4:	4804      	ldr	r0, [pc, #16]	@ (8003df8 <LCD_IO_WriteData+0x40>)
 8003de6:	f002 f90d 	bl	8006004 <HAL_GPIO_WritePin>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40020800 	.word	0x40020800

08003dfc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003e06:	2200      	movs	r2, #0
 8003e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e0c:	480a      	ldr	r0, [pc, #40]	@ (8003e38 <LCD_IO_WriteReg+0x3c>)
 8003e0e:	f002 f8f9 	bl	8006004 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003e12:	2200      	movs	r2, #0
 8003e14:	2104      	movs	r1, #4
 8003e16:	4809      	ldr	r0, [pc, #36]	@ (8003e3c <LCD_IO_WriteReg+0x40>)
 8003e18:	f002 f8f4 	bl	8006004 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff feed 	bl	8003c00 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e26:	2201      	movs	r2, #1
 8003e28:	2104      	movs	r1, #4
 8003e2a:	4804      	ldr	r0, [pc, #16]	@ (8003e3c <LCD_IO_WriteReg+0x40>)
 8003e2c:	f002 f8ea 	bl	8006004 <HAL_GPIO_WritePin>
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40020800 	.word	0x40020800

08003e40 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	460a      	mov	r2, r1
 8003e4a:	80fb      	strh	r3, [r7, #6]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003e54:	2200      	movs	r2, #0
 8003e56:	2104      	movs	r1, #4
 8003e58:	4810      	ldr	r0, [pc, #64]	@ (8003e9c <LCD_IO_ReadData+0x5c>)
 8003e5a:	f002 f8d3 	bl	8006004 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e64:	480e      	ldr	r0, [pc, #56]	@ (8003ea0 <LCD_IO_ReadData+0x60>)
 8003e66:	f002 f8cd 	bl	8006004 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fec7 	bl	8003c00 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003e72:	797b      	ldrb	r3, [r7, #5]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fea3 	bl	8003bc0 <SPIx_Read>
 8003e7a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e82:	4807      	ldr	r0, [pc, #28]	@ (8003ea0 <LCD_IO_ReadData+0x60>)
 8003e84:	f002 f8be 	bl	8006004 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <LCD_IO_ReadData+0x5c>)
 8003e8e:	f002 f8b9 	bl	8006004 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40020800 	.word	0x40020800
 8003ea0:	40020c00 	.word	0x40020c00

08003ea4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 f973 	bl	8005198 <HAL_Delay>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003ebe:	f7ff fd51 	bl	8003964 <I2Cx_Init>
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003eca:	f7ff fd7d 	bl	80039c8 <I2Cx_ITConfig>
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	4603      	mov	r3, r0
 8003eda:	71fb      	strb	r3, [r7, #7]
 8003edc:	460b      	mov	r3, r1
 8003ede:	71bb      	strb	r3, [r7, #6]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003ee4:	797a      	ldrb	r2, [r7, #5]
 8003ee6:	79b9      	ldrb	r1, [r7, #6]
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fd9e 	bl	8003a2c <I2Cx_WriteData>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	460a      	mov	r2, r1
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003f08:	79ba      	ldrb	r2, [r7, #6]
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fdb6 	bl	8003a80 <I2Cx_ReadData>
 8003f14:	4603      	mov	r3, r0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	603a      	str	r2, [r7, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	71fb      	strb	r3, [r7, #7]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	71bb      	strb	r3, [r7, #6]
 8003f30:	4613      	mov	r3, r2
 8003f32:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003f34:	88bb      	ldrh	r3, [r7, #4]
 8003f36:	79b9      	ldrb	r1, [r7, #6]
 8003f38:	79f8      	ldrb	r0, [r7, #7]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	f7ff fdcc 	bl	8003ad8 <I2Cx_ReadBuffer>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 f920 	bl	8005198 <HAL_Delay>
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f66:	4a2e      	ldr	r2, [pc, #184]	@ (8004020 <BSP_LCD_Init+0xc0>)
 8003f68:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f6c:	2209      	movs	r2, #9
 8003f6e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003f70:	4b2a      	ldr	r3, [pc, #168]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003f76:	4b29      	ldr	r3, [pc, #164]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f78:	221d      	movs	r2, #29
 8003f7a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003f7c:	4b27      	ldr	r3, [pc, #156]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f7e:	2203      	movs	r2, #3
 8003f80:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003f82:	4b26      	ldr	r3, [pc, #152]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f84:	f240 120d 	movw	r2, #269	@ 0x10d
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003f8a:	4b24      	ldr	r3, [pc, #144]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f8c:	f240 1243 	movw	r2, #323	@ 0x143
 8003f90:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f94:	f240 1217 	movw	r2, #279	@ 0x117
 8003f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003f9c:	f240 1247 	movw	r2, #327	@ 0x147
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003faa:	4b1c      	ldr	r3, [pc, #112]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <BSP_LCD_Init+0xc4>)
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003fc0:	4b18      	ldr	r3, [pc, #96]	@ (8004024 <BSP_LCD_Init+0xc4>)
 8003fc2:	22c0      	movs	r2, #192	@ 0xc0
 8003fc4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003fc6:	4b17      	ldr	r3, [pc, #92]	@ (8004024 <BSP_LCD_Init+0xc4>)
 8003fc8:	2204      	movs	r2, #4
 8003fca:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003fcc:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <BSP_LCD_Init+0xc4>)
 8003fce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003fd4:	4813      	ldr	r0, [pc, #76]	@ (8004024 <BSP_LCD_Init+0xc4>)
 8003fd6:	f003 ffa5 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003ff2:	f000 fb7d 	bl	80046f0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003ff6:	4809      	ldr	r0, [pc, #36]	@ (800401c <BSP_LCD_Init+0xbc>)
 8003ff8:	f003 f82c 	bl	8007054 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <BSP_LCD_Init+0xc8>)
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <BSP_LCD_Init+0xcc>)
 8004000:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <BSP_LCD_Init+0xc8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800400a:	f000 fd85 	bl	8004b18 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800400e:	4808      	ldr	r0, [pc, #32]	@ (8004030 <BSP_LCD_Init+0xd0>)
 8004010:	f000 f8ce 	bl	80041b0 <BSP_LCD_SetFont>

  return LCD_OK;
 8004014:	2300      	movs	r3, #0
}  
 8004016:	4618      	mov	r0, r3
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000644 	.word	0x20000644
 8004020:	40016800 	.word	0x40016800
 8004024:	2000072c 	.word	0x2000072c
 8004028:	20000778 	.word	0x20000778
 800402c:	20000064 	.word	0x20000064
 8004030:	200000d4 	.word	0x200000d4

08004034 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004038:	4b03      	ldr	r3, [pc, #12]	@ (8004048 <BSP_LCD_GetXSize+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	4798      	blx	r3
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000778 	.word	0x20000778

0800404c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004050:	4b03      	ldr	r3, [pc, #12]	@ (8004060 <BSP_LCD_GetYSize+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4798      	blx	r3
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000778 	.word	0x20000778

08004064 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004064:	b580      	push	{r7, lr}
 8004066:	b090      	sub	sp, #64	@ 0x40
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004074:	f7ff ffde 	bl	8004034 <BSP_LCD_GetXSize>
 8004078:	4603      	mov	r3, r0
 800407a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004080:	f7ff ffe4 	bl	800404c <BSP_LCD_GetYSize>
 8004084:	4603      	mov	r3, r0
 8004086:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8004090:	23ff      	movs	r3, #255	@ 0xff
 8004092:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80040aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80040b0:	2307      	movs	r3, #7
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80040b4:	f7ff ffbe 	bl	8004034 <BSP_LCD_GetXSize>
 80040b8:	4603      	mov	r3, r0
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80040bc:	f7ff ffc6 	bl	800404c <BSP_LCD_GetYSize>
 80040c0:	4603      	mov	r3, r0
 80040c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	4619      	mov	r1, r3
 80040cc:	4814      	ldr	r0, [pc, #80]	@ (8004120 <BSP_LCD_LayerDefaultInit+0xbc>)
 80040ce:	f003 f89b 	bl	8007208 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	4913      	ldr	r1, [pc, #76]	@ (8004124 <BSP_LCD_LayerDefaultInit+0xc0>)
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3304      	adds	r3, #4
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	490e      	ldr	r1, [pc, #56]	@ (8004124 <BSP_LCD_LayerDefaultInit+0xc0>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3308      	adds	r3, #8
 80040f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004128 <BSP_LCD_LayerDefaultInit+0xc4>)
 80040fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	4909      	ldr	r1, [pc, #36]	@ (8004124 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800410e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004110:	4803      	ldr	r0, [pc, #12]	@ (8004120 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004112:	f003 f8b7 	bl	8007284 <HAL_LTDC_EnableDither>
}
 8004116:	bf00      	nop
 8004118:	3740      	adds	r7, #64	@ 0x40
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000644 	.word	0x20000644
 8004124:	20000760 	.word	0x20000760
 8004128:	200000d4 	.word	0x200000d4

0800412c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <BSP_LCD_SelectLayer+0x1c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000075c 	.word	0x2000075c

0800414c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004154:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <BSP_LCD_SetTextColor+0x28>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4907      	ldr	r1, [pc, #28]	@ (8004178 <BSP_LCD_SetTextColor+0x2c>)
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000075c 	.word	0x2000075c
 8004178:	20000760 	.word	0x20000760

0800417c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004184:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <BSP_LCD_SetBackColor+0x2c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4908      	ldr	r1, [pc, #32]	@ (80041ac <BSP_LCD_SetBackColor+0x30>)
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3304      	adds	r3, #4
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000075c 	.word	0x2000075c
 80041ac:	20000760 	.word	0x20000760

080041b0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80041b8:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <BSP_LCD_SetFont+0x2c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4908      	ldr	r1, [pc, #32]	@ (80041e0 <BSP_LCD_SetFont+0x30>)
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3308      	adds	r3, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2000075c 	.word	0x2000075c
 80041e0:	20000760 	.word	0x20000760

080041e4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <BSP_LCD_Clear+0x48>)
 80041ee:	681c      	ldr	r4, [r3, #0]
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <BSP_LCD_Clear+0x48>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004230 <BSP_LCD_Clear+0x4c>)
 80041f6:	2134      	movs	r1, #52	@ 0x34
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	335c      	adds	r3, #92	@ 0x5c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461e      	mov	r6, r3
 8004204:	f7ff ff16 	bl	8004034 <BSP_LCD_GetXSize>
 8004208:	4605      	mov	r5, r0
 800420a:	f7ff ff1f 	bl	800404c <BSP_LCD_GetYSize>
 800420e:	4602      	mov	r2, r0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	2300      	movs	r3, #0
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	462a      	mov	r2, r5
 800421c:	4631      	mov	r1, r6
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fc42 	bl	8004aa8 <FillBuffer>
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422c:	2000075c 	.word	0x2000075c
 8004230:	20000644 	.word	0x20000644

08004234 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	80fb      	strh	r3, [r7, #6]
 800423e:	460b      	mov	r3, r1
 8004240:	80bb      	strh	r3, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004246:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <BSP_LCD_DisplayChar+0x80>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	491b      	ldr	r1, [pc, #108]	@ (80042b8 <BSP_LCD_DisplayChar+0x84>)
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3308      	adds	r3, #8
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004262:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <BSP_LCD_DisplayChar+0x80>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4c14      	ldr	r4, [pc, #80]	@ (80042b8 <BSP_LCD_DisplayChar+0x84>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4423      	add	r3, r4
 8004272:	3308      	adds	r3, #8
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004278:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800427c:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <BSP_LCD_DisplayChar+0x80>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4c0d      	ldr	r4, [pc, #52]	@ (80042b8 <BSP_LCD_DisplayChar+0x84>)
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4423      	add	r3, r4
 800428c:	3308      	adds	r3, #8
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	889b      	ldrh	r3, [r3, #4]
 8004292:	3307      	adds	r3, #7
 8004294:	2b00      	cmp	r3, #0
 8004296:	da00      	bge.n	800429a <BSP_LCD_DisplayChar+0x66>
 8004298:	3307      	adds	r3, #7
 800429a:	10db      	asrs	r3, r3, #3
 800429c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80042a0:	18ca      	adds	r2, r1, r3
 80042a2:	88b9      	ldrh	r1, [r7, #4]
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fb44 	bl	8004934 <DrawChar>
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd90      	pop	{r4, r7, pc}
 80042b4:	2000075c 	.word	0x2000075c
 80042b8:	20000760 	.word	0x20000760

080042bc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80042bc:	b5b0      	push	{r4, r5, r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60ba      	str	r2, [r7, #8]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	81fb      	strh	r3, [r7, #14]
 80042ca:	460b      	mov	r3, r1
 80042cc:	81bb      	strh	r3, [r7, #12]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80042d2:	2301      	movs	r3, #1
 80042d4:	83fb      	strh	r3, [r7, #30]
 80042d6:	2300      	movs	r3, #0
 80042d8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80042e6:	e002      	b.n	80042ee <BSP_LCD_DisplayStringAt+0x32>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	3301      	adds	r3, #1
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	617a      	str	r2, [r7, #20]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f6      	bne.n	80042e8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80042fa:	f7ff fe9b 	bl	8004034 <BSP_LCD_GetXSize>
 80042fe:	4601      	mov	r1, r0
 8004300:	4b4b      	ldr	r3, [pc, #300]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	484b      	ldr	r0, [pc, #300]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4403      	add	r3, r0
 8004310:	3308      	adds	r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	889b      	ldrh	r3, [r3, #4]
 8004316:	fbb1 f3f3 	udiv	r3, r1, r3
 800431a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d01c      	beq.n	800435c <BSP_LCD_DisplayStringAt+0xa0>
 8004322:	2b03      	cmp	r3, #3
 8004324:	dc33      	bgt.n	800438e <BSP_LCD_DisplayStringAt+0xd2>
 8004326:	2b01      	cmp	r3, #1
 8004328:	d002      	beq.n	8004330 <BSP_LCD_DisplayStringAt+0x74>
 800432a:	2b02      	cmp	r3, #2
 800432c:	d019      	beq.n	8004362 <BSP_LCD_DisplayStringAt+0xa6>
 800432e:	e02e      	b.n	800438e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad1      	subs	r1, r2, r3
 8004336:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	483e      	ldr	r0, [pc, #248]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4403      	add	r3, r0
 8004346:	3308      	adds	r3, #8
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	889b      	ldrh	r3, [r3, #4]
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	4413      	add	r3, r2
 8004358:	83fb      	strh	r3, [r7, #30]
      break;
 800435a:	e01b      	b.n	8004394 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	83fb      	strh	r3, [r7, #30]
      break;
 8004360:	e018      	b.n	8004394 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	b299      	uxth	r1, r3
 800436a:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4831      	ldr	r0, [pc, #196]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4403      	add	r3, r0
 800437a:	3308      	adds	r3, #8
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	889b      	ldrh	r3, [r3, #4]
 8004380:	fb11 f303 	smulbb	r3, r1, r3
 8004384:	b29a      	uxth	r2, r3
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	4413      	add	r3, r2
 800438a:	83fb      	strh	r3, [r7, #30]
      break;
 800438c:	e002      	b.n	8004394 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	83fb      	strh	r3, [r7, #30]
      break;
 8004392:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004394:	e01a      	b.n	80043cc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	89b9      	ldrh	r1, [r7, #12]
 800439c:	8bfb      	ldrh	r3, [r7, #30]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ff48 	bl	8004234 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80043a4:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4922      	ldr	r1, [pc, #136]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3308      	adds	r3, #8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	889a      	ldrh	r2, [r3, #4]
 80043ba:	8bfb      	ldrh	r3, [r7, #30]
 80043bc:	4413      	add	r3, r2
 80043be:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60bb      	str	r3, [r7, #8]
    i++;
 80043c6:	8bbb      	ldrh	r3, [r7, #28]
 80043c8:	3301      	adds	r3, #1
 80043ca:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2dc      	uxtb	r4, r3
 80043da:	f7ff fe2b 	bl	8004034 <BSP_LCD_GetXSize>
 80043de:	8bb9      	ldrh	r1, [r7, #28]
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4d13      	ldr	r5, [pc, #76]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	442b      	add	r3, r5
 80043f0:	3308      	adds	r3, #8
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	889b      	ldrh	r3, [r3, #4]
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	1ac3      	subs	r3, r0, r3
 80043fc:	b299      	uxth	r1, r3
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <BSP_LCD_DisplayStringAt+0x174>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	480c      	ldr	r0, [pc, #48]	@ (8004434 <BSP_LCD_DisplayStringAt+0x178>)
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4403      	add	r3, r0
 800440e:	3308      	adds	r3, #8
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	889b      	ldrh	r3, [r3, #4]
 8004414:	4299      	cmp	r1, r3
 8004416:	bf2c      	ite	cs
 8004418:	2301      	movcs	r3, #1
 800441a:	2300      	movcc	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4023      	ands	r3, r4
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1b7      	bne.n	8004396 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bdb0      	pop	{r4, r5, r7, pc}
 8004430:	2000075c 	.word	0x2000075c
 8004434:	20000760 	.word	0x20000760

08004438 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b08b      	sub	sp, #44	@ 0x2c
 800443c:	af00      	add	r7, sp, #0
 800443e:	4604      	mov	r4, r0
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4623      	mov	r3, r4
 8004448:	80fb      	strh	r3, [r7, #6]
 800444a:	4603      	mov	r3, r0
 800444c:	80bb      	strh	r3, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	807b      	strh	r3, [r7, #2]
 8004452:	4613      	mov	r3, r2
 8004454:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004456:	2300      	movs	r3, #0
 8004458:	823b      	strh	r3, [r7, #16]
 800445a:	2300      	movs	r3, #0
 800445c:	81fb      	strh	r3, [r7, #14]
 800445e:	2300      	movs	r3, #0
 8004460:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004462:	2300      	movs	r3, #0
 8004464:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004466:	2300      	movs	r3, #0
 8004468:	847b      	strh	r3, [r7, #34]	@ 0x22
 800446a:	2300      	movs	r3, #0
 800446c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800446e:	2300      	movs	r3, #0
 8004470:	83fb      	strh	r3, [r7, #30]
 8004472:	2300      	movs	r3, #0
 8004474:	83bb      	strh	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	837b      	strh	r3, [r7, #26]
 800447a:	2300      	movs	r3, #0
 800447c:	833b      	strh	r3, [r7, #24]
 800447e:	2300      	movs	r3, #0
 8004480:	82fb      	strh	r3, [r7, #22]
 8004482:	2300      	movs	r3, #0
 8004484:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	bfb8      	it	lt
 8004494:	425b      	neglt	r3, r3
 8004496:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8004498:	883a      	ldrh	r2, [r7, #0]
 800449a:	88bb      	ldrh	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bfb8      	it	lt
 80044a2:	425b      	neglt	r3, r3
 80044a4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80044aa:	88bb      	ldrh	r3, [r7, #4]
 80044ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d304      	bcc.n	80044c0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	843b      	strh	r3, [r7, #32]
 80044be:	e005      	b.n	80044cc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80044c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 80044c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044ca:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80044cc:	883a      	ldrh	r2, [r7, #0]
 80044ce:	88bb      	ldrh	r3, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d304      	bcc.n	80044de <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80044d8:	2301      	movs	r3, #1
 80044da:	83bb      	strh	r3, [r7, #28]
 80044dc:	e005      	b.n	80044ea <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80044de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044e2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80044e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044e8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80044ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	db10      	blt.n	8004518 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80044f6:	2300      	movs	r3, #0
 80044f8:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80044fa:	2300      	movs	r3, #0
 80044fc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80044fe:	8a3b      	ldrh	r3, [r7, #16]
 8004500:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004502:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004506:	0fda      	lsrs	r2, r3, #31
 8004508:	4413      	add	r3, r2
 800450a:	105b      	asrs	r3, r3, #1
 800450c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8004512:	8a3b      	ldrh	r3, [r7, #16]
 8004514:	82bb      	strh	r3, [r7, #20]
 8004516:	e00f      	b.n	8004538 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004518:	2300      	movs	r3, #0
 800451a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800451c:	2300      	movs	r3, #0
 800451e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004528:	0fda      	lsrs	r2, r3, #31
 800452a:	4413      	add	r3, r2
 800452c:	105b      	asrs	r3, r3, #1
 800452e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8004530:	8a3b      	ldrh	r3, [r7, #16]
 8004532:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004538:	2300      	movs	r3, #0
 800453a:	827b      	strh	r3, [r7, #18]
 800453c:	e037      	b.n	80045ae <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800453e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004540:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004542:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <BSP_LCD_DrawLine+0x18c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4c20      	ldr	r4, [pc, #128]	@ (80045c8 <BSP_LCD_DrawLine+0x190>)
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4423      	add	r3, r4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	f000 f9a1 	bl	800489c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800455a:	8b3a      	ldrh	r2, [r7, #24]
 800455c:	8afb      	ldrh	r3, [r7, #22]
 800455e:	4413      	add	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8004564:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004568:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800456c:	429a      	cmp	r2, r3
 800456e:	db0e      	blt.n	800458e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004570:	8b3a      	ldrh	r2, [r7, #24]
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800457a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800457c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800457e:	4413      	add	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004584:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004586:	8bfb      	ldrh	r3, [r7, #30]
 8004588:	4413      	add	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800458e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004590:	8c3b      	ldrh	r3, [r7, #32]
 8004592:	4413      	add	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8004598:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800459a:	8bbb      	ldrh	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80045a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	827b      	strh	r3, [r7, #18]
 80045ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80045b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	ddc1      	ble.n	800453e <BSP_LCD_DrawLine+0x106>
  }
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	372c      	adds	r7, #44	@ 0x2c
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}
 80045c4:	2000075c 	.word	0x2000075c
 80045c8:	20000760 	.word	0x20000760

080045cc <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af02      	add	r7, sp, #8
 80045d4:	4604      	mov	r4, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	461a      	mov	r2, r3
 80045dc:	4623      	mov	r3, r4
 80045de:	80fb      	strh	r3, [r7, #6]
 80045e0:	4603      	mov	r3, r0
 80045e2:	80bb      	strh	r3, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80045f0:	4b33      	ldr	r3, [pc, #204]	@ (80046c0 <BSP_LCD_FillRect+0xf4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4933      	ldr	r1, [pc, #204]	@ (80046c4 <BSP_LCD_FillRect+0xf8>)
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fda2 	bl	800414c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8004608:	4b2f      	ldr	r3, [pc, #188]	@ (80046c8 <BSP_LCD_FillRect+0xfc>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8004610:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <BSP_LCD_FillRect+0xf4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <BSP_LCD_FillRect+0x100>)
 8004616:	2134      	movs	r1, #52	@ 0x34
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	335c      	adds	r3, #92	@ 0x5c
 8004620:	681c      	ldr	r4, [r3, #0]
 8004622:	f7ff fd07 	bl	8004034 <BSP_LCD_GetXSize>
 8004626:	4603      	mov	r3, r0
 8004628:	425b      	negs	r3, r3
 800462a:	88b9      	ldrh	r1, [r7, #4]
 800462c:	883a      	ldrh	r2, [r7, #0]
 800462e:	440a      	add	r2, r1
 8004630:	fb02 f503 	mul.w	r5, r2, r3
 8004634:	f7ff fcfe 	bl	8004034 <BSP_LCD_GetXSize>
 8004638:	4606      	mov	r6, r0
 800463a:	f7ff fd07 	bl	800404c <BSP_LCD_GetYSize>
 800463e:	4603      	mov	r3, r0
 8004640:	fb06 f303 	mul.w	r3, r6, r3
 8004644:	442b      	add	r3, r5
 8004646:	88f9      	ldrh	r1, [r7, #6]
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	440a      	add	r2, r1
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4423      	add	r3, r4
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e013      	b.n	800467e <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004656:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <BSP_LCD_FillRect+0xf4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <BSP_LCD_FillRect+0x100>)
 800465c:	2134      	movs	r1, #52	@ 0x34
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	335c      	adds	r3, #92	@ 0x5c
 8004666:	681c      	ldr	r4, [r3, #0]
 8004668:	f7ff fce4 	bl	8004034 <BSP_LCD_GetXSize>
 800466c:	4602      	mov	r2, r0
 800466e:	88bb      	ldrh	r3, [r7, #4]
 8004670:	fb03 f202 	mul.w	r2, r3, r2
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4423      	add	r3, r4
 800467c:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <BSP_LCD_FillRect+0xf4>)
 8004680:	681c      	ldr	r4, [r3, #0]
 8004682:	68fd      	ldr	r5, [r7, #12]
 8004684:	887e      	ldrh	r6, [r7, #2]
 8004686:	f8b7 8000 	ldrh.w	r8, [r7]
 800468a:	f7ff fcd3 	bl	8004034 <BSP_LCD_GetXSize>
 800468e:	4602      	mov	r2, r0
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	1ad1      	subs	r1, r2, r3
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <BSP_LCD_FillRect+0xf4>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	480a      	ldr	r0, [pc, #40]	@ (80046c4 <BSP_LCD_FillRect+0xf8>)
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4403      	add	r3, r0
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9100      	str	r1, [sp, #0]
 80046aa:	4643      	mov	r3, r8
 80046ac:	4632      	mov	r2, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 f9f9 	bl	8004aa8 <FillBuffer>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	2000075c 	.word	0x2000075c
 80046c4:	20000760 	.word	0x20000760
 80046c8:	2000077c 	.word	0x2000077c
 80046cc:	20000644 	.word	0x20000644

080046d0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <BSP_LCD_DisplayOn+0x1c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80046de:	4b03      	ldr	r3, [pc, #12]	@ (80046ec <BSP_LCD_DisplayOn+0x1c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4798      	blx	r3
  }
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000778 	.word	0x20000778

080046f0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	@ 0x38
 80046f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	4b61      	ldr	r3, [pc, #388]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	4a60      	ldr	r2, [pc, #384]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004700:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004704:	6453      	str	r3, [r2, #68]	@ 0x44
 8004706:	4b5e      	ldr	r3, [pc, #376]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	4b5a      	ldr	r3, [pc, #360]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	4a59      	ldr	r2, [pc, #356]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 800471c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004720:	6313      	str	r3, [r2, #48]	@ 0x30
 8004722:	4b57      	ldr	r3, [pc, #348]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	4a52      	ldr	r2, [pc, #328]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6313      	str	r3, [r2, #48]	@ 0x30
 800473e:	4b50      	ldr	r3, [pc, #320]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	4b4c      	ldr	r3, [pc, #304]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a4b      	ldr	r2, [pc, #300]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30
 800475a:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	4a44      	ldr	r2, [pc, #272]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004770:	f043 0304 	orr.w	r3, r3, #4
 8004774:	6313      	str	r3, [r2, #48]	@ 0x30
 8004776:	4b42      	ldr	r3, [pc, #264]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	4b3e      	ldr	r3, [pc, #248]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	4a3d      	ldr	r2, [pc, #244]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	6313      	str	r3, [r2, #48]	@ 0x30
 8004792:	4b3b      	ldr	r3, [pc, #236]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047a8:	f043 0320 	orr.w	r3, r3, #32
 80047ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ae:	4b34      	ldr	r3, [pc, #208]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	4b30      	ldr	r3, [pc, #192]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <BSP_LCD_MspInit+0x190>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80047d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80047e4:	2302      	movs	r3, #2
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80047e8:	230e      	movs	r3, #14
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80047ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f0:	4619      	mov	r1, r3
 80047f2:	4824      	ldr	r0, [pc, #144]	@ (8004884 <BSP_LCD_MspInit+0x194>)
 80047f4:	f001 fa5a 	bl	8005cac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80047f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80047fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004802:	4619      	mov	r1, r3
 8004804:	4820      	ldr	r0, [pc, #128]	@ (8004888 <BSP_LCD_MspInit+0x198>)
 8004806:	f001 fa51 	bl	8005cac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800480a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004814:	4619      	mov	r1, r3
 8004816:	481d      	ldr	r0, [pc, #116]	@ (800488c <BSP_LCD_MspInit+0x19c>)
 8004818:	f001 fa48 	bl	8005cac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800481c:	2348      	movs	r3, #72	@ 0x48
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004824:	4619      	mov	r1, r3
 8004826:	481a      	ldr	r0, [pc, #104]	@ (8004890 <BSP_LCD_MspInit+0x1a0>)
 8004828:	f001 fa40 	bl	8005cac <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800482c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4619      	mov	r1, r3
 8004838:	4816      	ldr	r0, [pc, #88]	@ (8004894 <BSP_LCD_MspInit+0x1a4>)
 800483a:	f001 fa37 	bl	8005cac <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800483e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004848:	4619      	mov	r1, r3
 800484a:	4813      	ldr	r0, [pc, #76]	@ (8004898 <BSP_LCD_MspInit+0x1a8>)
 800484c:	f001 fa2e 	bl	8005cac <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004850:	2303      	movs	r3, #3
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004854:	2309      	movs	r3, #9
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800485c:	4619      	mov	r1, r3
 800485e:	480a      	ldr	r0, [pc, #40]	@ (8004888 <BSP_LCD_MspInit+0x198>)
 8004860:	f001 fa24 	bl	8005cac <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004864:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800486a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800486e:	4619      	mov	r1, r3
 8004870:	4809      	ldr	r0, [pc, #36]	@ (8004898 <BSP_LCD_MspInit+0x1a8>)
 8004872:	f001 fa1b 	bl	8005cac <HAL_GPIO_Init>
}
 8004876:	bf00      	nop
 8004878:	3738      	adds	r7, #56	@ 0x38
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	40020000 	.word	0x40020000
 8004888:	40020400 	.word	0x40020400
 800488c:	40020800 	.word	0x40020800
 8004890:	40020c00 	.word	0x40020c00
 8004894:	40021400 	.word	0x40021400
 8004898:	40021800 	.word	0x40021800

0800489c <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	603a      	str	r2, [r7, #0]
 80048a6:	80fb      	strh	r3, [r7, #6]
 80048a8:	460b      	mov	r3, r1
 80048aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80048ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <BSP_LCD_DrawPixel+0x8c>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01f      	beq.n	80048f4 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80048b4:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <BSP_LCD_DrawPixel+0x90>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <BSP_LCD_DrawPixel+0x94>)
 80048ba:	2134      	movs	r1, #52	@ 0x34
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	335c      	adds	r3, #92	@ 0x5c
 80048c4:	681c      	ldr	r4, [r3, #0]
 80048c6:	f7ff fbb5 	bl	8004034 <BSP_LCD_GetXSize>
 80048ca:	4605      	mov	r5, r0
 80048cc:	f7ff fbbe 	bl	800404c <BSP_LCD_GetYSize>
 80048d0:	4603      	mov	r3, r0
 80048d2:	fb03 f205 	mul.w	r2, r3, r5
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	1ad5      	subs	r5, r2, r3
 80048da:	f7ff fbab 	bl	8004034 <BSP_LCD_GetXSize>
 80048de:	4602      	mov	r2, r0
 80048e0:	88bb      	ldrh	r3, [r7, #4]
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	1aeb      	subs	r3, r5, r3
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4423      	add	r3, r4
 80048ec:	461a      	mov	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80048f2:	e015      	b.n	8004920 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80048f4:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <BSP_LCD_DrawPixel+0x90>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004930 <BSP_LCD_DrawPixel+0x94>)
 80048fa:	2134      	movs	r1, #52	@ 0x34
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	335c      	adds	r3, #92	@ 0x5c
 8004904:	681c      	ldr	r4, [r3, #0]
 8004906:	88bd      	ldrh	r5, [r7, #4]
 8004908:	f7ff fb94 	bl	8004034 <BSP_LCD_GetXSize>
 800490c:	4603      	mov	r3, r0
 800490e:	fb03 f205 	mul.w	r2, r3, r5
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4423      	add	r3, r4
 800491a:	461a      	mov	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	2000077c 	.word	0x2000077c
 800492c:	2000075c 	.word	0x2000075c
 8004930:	20000644 	.word	0x20000644

08004934 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	603a      	str	r2, [r7, #0]
 800493e:	80fb      	strh	r3, [r7, #6]
 8004940:	460b      	mov	r3, r1
 8004942:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004950:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <DrawChar+0x16c>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4953      	ldr	r1, [pc, #332]	@ (8004aa4 <DrawChar+0x170>)
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3308      	adds	r3, #8
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	88db      	ldrh	r3, [r3, #6]
 8004966:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004968:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa0 <DrawChar+0x16c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	494d      	ldr	r1, [pc, #308]	@ (8004aa4 <DrawChar+0x170>)
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	3308      	adds	r3, #8
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	889b      	ldrh	r3, [r3, #4]
 800497e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004980:	8a3b      	ldrh	r3, [r7, #16]
 8004982:	3307      	adds	r3, #7
 8004984:	2b00      	cmp	r3, #0
 8004986:	da00      	bge.n	800498a <DrawChar+0x56>
 8004988:	3307      	adds	r3, #7
 800498a:	10db      	asrs	r3, r3, #3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	8a3b      	ldrh	r3, [r7, #16]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e076      	b.n	8004a8e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80049a0:	8a3b      	ldrh	r3, [r7, #16]
 80049a2:	3307      	adds	r3, #7
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	da00      	bge.n	80049aa <DrawChar+0x76>
 80049a8:	3307      	adds	r3, #7
 80049aa:	10db      	asrs	r3, r3, #3
 80049ac:	461a      	mov	r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80049ba:	8a3b      	ldrh	r3, [r7, #16]
 80049bc:	3307      	adds	r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da00      	bge.n	80049c4 <DrawChar+0x90>
 80049c2:	3307      	adds	r3, #7
 80049c4:	10db      	asrs	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d002      	beq.n	80049d0 <DrawChar+0x9c>
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d004      	beq.n	80049d8 <DrawChar+0xa4>
 80049ce:	e00c      	b.n	80049ea <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	617b      	str	r3, [r7, #20]
      break;
 80049d6:	e016      	b.n	8004a06 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	3201      	adds	r2, #1
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
      break;
 80049e8:	e00d      	b.n	8004a06 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	041a      	lsls	r2, r3, #16
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	3301      	adds	r3, #1
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	4313      	orrs	r3, r2
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	3202      	adds	r2, #2
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
      break;
 8004a04:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e036      	b.n	8004a7a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004a0c:	8a3a      	ldrh	r2, [r7, #16]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1ad2      	subs	r2, r2, r3
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	4413      	add	r3, r2
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2201      	movs	r2, #1
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d012      	beq.n	8004a4e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	4413      	add	r3, r2
 8004a30:	b298      	uxth	r0, r3
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <DrawChar+0x16c>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <DrawChar+0x170>)
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	88bb      	ldrh	r3, [r7, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7ff ff28 	bl	800489c <BSP_LCD_DrawPixel>
 8004a4c:	e012      	b.n	8004a74 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	4413      	add	r3, r2
 8004a56:	b298      	uxth	r0, r3
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <DrawChar+0x16c>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4911      	ldr	r1, [pc, #68]	@ (8004aa4 <DrawChar+0x170>)
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3304      	adds	r3, #4
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	88bb      	ldrh	r3, [r7, #4]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7ff ff14 	bl	800489c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	8a3b      	ldrh	r3, [r7, #16]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3c4      	bcc.n	8004a0c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004a82:	88bb      	ldrh	r3, [r7, #4]
 8004a84:	3301      	adds	r3, #1
 8004a86:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	8a7b      	ldrh	r3, [r7, #18]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d384      	bcc.n	80049a0 <DrawChar+0x6c>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2000075c 	.word	0x2000075c
 8004aa4:	20000760 	.word	0x20000760

08004aa8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004ab6:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <FillBuffer+0x68>)
 8004ab8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004abc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <FillBuffer+0x68>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004ac4:	4a12      	ldr	r2, [pc, #72]	@ (8004b10 <FillBuffer+0x68>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <FillBuffer+0x68>)
 8004acc:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <FillBuffer+0x6c>)
 8004ace:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004ad0:	480f      	ldr	r0, [pc, #60]	@ (8004b10 <FillBuffer+0x68>)
 8004ad2:	f000 fe55 	bl	8005780 <HAL_DMA2D_Init>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d115      	bne.n	8004b08 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	480c      	ldr	r0, [pc, #48]	@ (8004b10 <FillBuffer+0x68>)
 8004ae0:	f000 ffb6 	bl	8005a50 <HAL_DMA2D_ConfigLayer>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69f9      	ldr	r1, [r7, #28]
 8004af4:	4806      	ldr	r0, [pc, #24]	@ (8004b10 <FillBuffer+0x68>)
 8004af6:	f000 fe96 	bl	8005826 <HAL_DMA2D_Start>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004b00:	210a      	movs	r1, #10
 8004b02:	4803      	ldr	r0, [pc, #12]	@ (8004b10 <FillBuffer+0x68>)
 8004b04:	f000 feba 	bl	800587c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	200006ec 	.word	0x200006ec
 8004b14:	4002b000 	.word	0x4002b000

08004b18 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004b1c:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc8 <BSP_SDRAM_Init+0xb0>)
 8004b20:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004b22:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b24:	2202      	movs	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004b28:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004b2e:	4b27      	ldr	r3, [pc, #156]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b30:	2204      	movs	r2, #4
 8004b32:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004b34:	4b25      	ldr	r3, [pc, #148]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b36:	2207      	movs	r2, #7
 8004b38:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004b3a:	4b24      	ldr	r3, [pc, #144]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004b40:	4b22      	ldr	r3, [pc, #136]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b42:	2202      	movs	r2, #2
 8004b44:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004b46:	4b21      	ldr	r3, [pc, #132]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b48:	2202      	movs	r2, #2
 8004b4a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004b58:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004b5e:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b60:	2210      	movs	r2, #16
 8004b62:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004b64:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b66:	2240      	movs	r2, #64	@ 0x40
 8004b68:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004b6a:	4b16      	ldr	r3, [pc, #88]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b6c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004b70:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004b72:	4b14      	ldr	r3, [pc, #80]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b7e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b8c:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	480c      	ldr	r0, [pc, #48]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b92:	f000 f87f 	bl	8004c94 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004b96:	490d      	ldr	r1, [pc, #52]	@ (8004bcc <BSP_SDRAM_Init+0xb4>)
 8004b98:	480a      	ldr	r0, [pc, #40]	@ (8004bc4 <BSP_SDRAM_Init+0xac>)
 8004b9a:	f003 fb83 	bl	80082a4 <HAL_SDRAM_Init>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <BSP_SDRAM_Init+0xb8>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004bac:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <BSP_SDRAM_Init+0xb8>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004bb2:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004bb6:	f000 f80d 	bl	8004bd4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004bba:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <BSP_SDRAM_Init+0xb8>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000780 	.word	0x20000780
 8004bc8:	a0000140 	.word	0xa0000140
 8004bcc:	200007b4 	.word	0x200007b4
 8004bd0:	200000ec 	.word	0x200000ec

08004bd4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004be0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004be6:	4b29      	ldr	r3, [pc, #164]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be8:	2208      	movs	r2, #8
 8004bea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004bec:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bfc:	4923      	ldr	r1, [pc, #140]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bfe:	4824      	ldr	r0, [pc, #144]	@ (8004c90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c00:	f003 fb8e 	bl	8008320 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c04:	2001      	movs	r0, #1
 8004c06:	f000 fac7 	bl	8005198 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004c0a:	4b20      	ldr	r3, [pc, #128]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c12:	2208      	movs	r2, #8
 8004c14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c16:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c26:	4919      	ldr	r1, [pc, #100]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c28:	4819      	ldr	r0, [pc, #100]	@ (8004c90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c2a:	f003 fb79 	bl	8008320 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c30:	2203      	movs	r2, #3
 8004c32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c36:	2208      	movs	r2, #8
 8004c38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004c3a:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004c40:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c4a:	4910      	ldr	r1, [pc, #64]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c4c:	4810      	ldr	r0, [pc, #64]	@ (8004c90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c4e:	f003 fb67 	bl	8008320 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004c52:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004c56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004c58:	4b0c      	ldr	r3, [pc, #48]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c60:	2208      	movs	r2, #8
 8004c62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c74:	4905      	ldr	r1, [pc, #20]	@ (8004c8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c76:	4806      	ldr	r0, [pc, #24]	@ (8004c90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c78:	f003 fb52 	bl	8008320 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4804      	ldr	r0, [pc, #16]	@ (8004c90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c80:	f003 fb79 	bl	8008376 <HAL_SDRAM_ProgramRefreshRate>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	200007d0 	.word	0x200007d0
 8004c90:	20000780 	.word	0x20000780

08004c94 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b090      	sub	sp, #64	@ 0x40
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80ec 	beq.w	8004e7e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004caa:	4b77      	ldr	r3, [pc, #476]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	4a76      	ldr	r2, [pc, #472]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6393      	str	r3, [r2, #56]	@ 0x38
 8004cb6:	4b74      	ldr	r3, [pc, #464]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc6:	4b70      	ldr	r3, [pc, #448]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	4a6f      	ldr	r2, [pc, #444]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004ccc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	4b69      	ldr	r3, [pc, #420]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	4a68      	ldr	r2, [pc, #416]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cee:	4b66      	ldr	r3, [pc, #408]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	4a61      	ldr	r2, [pc, #388]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d26:	4b58      	ldr	r3, [pc, #352]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	4b54      	ldr	r3, [pc, #336]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	4a53      	ldr	r2, [pc, #332]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d3c:	f043 0310 	orr.w	r3, r3, #16
 8004d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d42:	4b51      	ldr	r3, [pc, #324]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	4b4d      	ldr	r3, [pc, #308]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	4a4c      	ldr	r2, [pc, #304]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b46      	ldr	r3, [pc, #280]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	4a45      	ldr	r2, [pc, #276]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d7a:	4b43      	ldr	r3, [pc, #268]	@ (8004e88 <BSP_SDRAM_MspInit+0x1f4>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004d92:	230c      	movs	r3, #12
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004d96:	2360      	movs	r3, #96	@ 0x60
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d9e:	4619      	mov	r1, r3
 8004da0:	483a      	ldr	r0, [pc, #232]	@ (8004e8c <BSP_SDRAM_MspInit+0x1f8>)
 8004da2:	f000 ff83 	bl	8005cac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004da6:	2301      	movs	r3, #1
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dae:	4619      	mov	r1, r3
 8004db0:	4837      	ldr	r0, [pc, #220]	@ (8004e90 <BSP_SDRAM_MspInit+0x1fc>)
 8004db2:	f000 ff7b 	bl	8005cac <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004db6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4834      	ldr	r0, [pc, #208]	@ (8004e94 <BSP_SDRAM_MspInit+0x200>)
 8004dc4:	f000 ff72 	bl	8005cac <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004dc8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4830      	ldr	r0, [pc, #192]	@ (8004e98 <BSP_SDRAM_MspInit+0x204>)
 8004dd6:	f000 ff69 	bl	8005cac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004dda:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004de4:	4619      	mov	r1, r3
 8004de6:	482d      	ldr	r0, [pc, #180]	@ (8004e9c <BSP_SDRAM_MspInit+0x208>)
 8004de8:	f000 ff60 	bl	8005cac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004dec:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df6:	4619      	mov	r1, r3
 8004df8:	4829      	ldr	r0, [pc, #164]	@ (8004ea0 <BSP_SDRAM_MspInit+0x20c>)
 8004dfa:	f000 ff57 	bl	8005cac <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004dfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004e04:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e06:	2280      	movs	r2, #128	@ 0x80
 8004e08:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004e0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e10:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004e12:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e18:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e1a:	4b22      	ldr	r3, [pc, #136]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e20:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004e22:	4b20      	ldr	r3, [pc, #128]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e28:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004e30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e36:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e40:	2203      	movs	r2, #3
 8004e42:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004e44:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004e4a:	4b16      	ldr	r3, [pc, #88]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004e50:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e52:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <BSP_SDRAM_MspInit+0x214>)
 8004e54:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e5c:	4a11      	ldr	r2, [pc, #68]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004e62:	4810      	ldr	r0, [pc, #64]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e64:	f000 fb7c 	bl	8005560 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004e68:	480e      	ldr	r0, [pc, #56]	@ (8004ea4 <BSP_SDRAM_MspInit+0x210>)
 8004e6a:	f000 facb 	bl	8005404 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	210f      	movs	r1, #15
 8004e72:	2038      	movs	r0, #56	@ 0x38
 8004e74:	f000 fa8f 	bl	8005396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004e78:	2038      	movs	r0, #56	@ 0x38
 8004e7a:	f000 faa8 	bl	80053ce <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004e7e:	bf00      	nop
 8004e80:	3740      	adds	r7, #64	@ 0x40
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	40020800 	.word	0x40020800
 8004e94:	40020c00 	.word	0x40020c00
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40021400 	.word	0x40021400
 8004ea0:	40021800 	.word	0x40021800
 8004ea4:	200007e0 	.word	0x200007e0
 8004ea8:	40026410 	.word	0x40026410

08004eac <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	80fb      	strh	r3, [r7, #6]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004ec0:	4a13      	ldr	r2, [pc, #76]	@ (8004f10 <BSP_TS_Init+0x64>)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004ec6:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <BSP_TS_Init+0x68>)
 8004ec8:	88bb      	ldrh	r3, [r7, #4]
 8004eca:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004ecc:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <BSP_TS_Init+0x6c>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2082      	movs	r0, #130	@ 0x82
 8004ed2:	4798      	blx	r3
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f640 0311 	movw	r3, #2065	@ 0x811
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d104      	bne.n	8004eea <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <BSP_TS_Init+0x70>)
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <BSP_TS_Init+0x6c>)
 8004ee4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <BSP_TS_Init+0x70>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2082      	movs	r0, #130	@ 0x82
 8004ef8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <BSP_TS_Init+0x70>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2082      	movs	r0, #130	@ 0x82
 8004f02:	4798      	blx	r3
  }

  return ret;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000844 	.word	0x20000844
 8004f14:	20000846 	.word	0x20000846
 8004f18:	2000009c 	.word	0x2000009c
 8004f1c:	20000840 	.word	0x20000840

08004f20 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004f24:	4b03      	ldr	r3, [pc, #12]	@ (8004f34 <BSP_TS_ITGetStatus+0x14>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2082      	movs	r0, #130	@ 0x82
 8004f2c:	4798      	blx	r3
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000840 	.word	0x20000840

08004f38 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004f40:	4b4f      	ldr	r3, [pc, #316]	@ (8005080 <BSP_TS_GetState+0x148>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2082      	movs	r0, #130	@ 0x82
 8004f48:	4798      	blx	r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 808d 	beq.w	8005076 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004f5c:	4b48      	ldr	r3, [pc, #288]	@ (8005080 <BSP_TS_GetState+0x148>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f107 020c 	add.w	r2, r7, #12
 8004f66:	f107 010e 	add.w	r1, r7, #14
 8004f6a:	2082      	movs	r0, #130	@ 0x82
 8004f6c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004f6e:	89bb      	ldrh	r3, [r7, #12]
 8004f70:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004f78:	89bb      	ldrh	r3, [r7, #12]
 8004f7a:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <BSP_TS_GetState+0x14c>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004f84:	8abb      	ldrh	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	82bb      	strh	r3, [r7, #20]
 8004f8e:	e008      	b.n	8004fa2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004f90:	4b3d      	ldr	r3, [pc, #244]	@ (8005088 <BSP_TS_GetState+0x150>)
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	8aba      	ldrh	r2, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d903      	bls.n	8004fa2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005088 <BSP_TS_GetState+0x150>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004fa2:	8abb      	ldrh	r3, [r7, #20]
 8004fa4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d806      	bhi.n	8004fbe <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8004fb6:	330e      	adds	r3, #14
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	81fb      	strh	r3, [r7, #14]
 8004fbc:	e005      	b.n	8004fca <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004fca:	89fb      	ldrh	r3, [r7, #14]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <BSP_TS_GetState+0x154>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004fd6:	8afb      	ldrh	r3, [r7, #22]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	82fb      	strh	r3, [r7, #22]
 8004fe0:	e008      	b.n	8004ff4 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <BSP_TS_GetState+0x158>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	8afa      	ldrh	r2, [r7, #22]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d903      	bls.n	8004ff4 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004fec:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <BSP_TS_GetState+0x158>)
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
 8004ff6:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <BSP_TS_GetState+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d906      	bls.n	8005012 <BSP_TS_GetState+0xda>
 8005004:	89fa      	ldrh	r2, [r7, #14]
 8005006:	4b23      	ldr	r3, [pc, #140]	@ (8005094 <BSP_TS_GetState+0x15c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	b29b      	uxth	r3, r3
 8005010:	e005      	b.n	800501e <BSP_TS_GetState+0xe6>
 8005012:	4b20      	ldr	r3, [pc, #128]	@ (8005094 <BSP_TS_GetState+0x15c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b29a      	uxth	r2, r3
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	b29b      	uxth	r3, r3
 800501e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8005020:	89bb      	ldrh	r3, [r7, #12]
 8005022:	461a      	mov	r2, r3
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <BSP_TS_GetState+0x160>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d906      	bls.n	800503a <BSP_TS_GetState+0x102>
 800502c:	89ba      	ldrh	r2, [r7, #12]
 800502e:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <BSP_TS_GetState+0x160>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	e005      	b.n	8005046 <BSP_TS_GetState+0x10e>
 800503a:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <BSP_TS_GetState+0x160>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	b29a      	uxth	r2, r3
 8005040:	89bb      	ldrh	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	b29b      	uxth	r3, r3
 8005046:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005048:	8a7a      	ldrh	r2, [r7, #18]
 800504a:	8a3b      	ldrh	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	2b05      	cmp	r3, #5
 8005050:	dd07      	ble.n	8005062 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	461a      	mov	r2, r3
 8005056:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <BSP_TS_GetState+0x15c>)
 8005058:	601a      	str	r2, [r3, #0]
      _y = y; 
 800505a:	89bb      	ldrh	r3, [r7, #12]
 800505c:	461a      	mov	r2, r3
 800505e:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <BSP_TS_GetState+0x160>)
 8005060:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8005062:	4b0c      	ldr	r3, [pc, #48]	@ (8005094 <BSP_TS_GetState+0x15c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <BSP_TS_GetState+0x160>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	809a      	strh	r2, [r3, #4]
  }
}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000840 	.word	0x20000840
 8005084:	ba2e8ba3 	.word	0xba2e8ba3
 8005088:	20000846 	.word	0x20000846
 800508c:	88888889 	.word	0x88888889
 8005090:	20000844 	.word	0x20000844
 8005094:	20000848 	.word	0x20000848
 8005098:	2000084c 	.word	0x2000084c

0800509c <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80050a0:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <BSP_TS_ITClear+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2082      	movs	r0, #130	@ 0x82
 80050a8:	4798      	blx	r3
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000840 	.word	0x20000840

080050b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050b8:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <HAL_Init+0x40>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <HAL_Init+0x40>)
 80050be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_Init+0x40>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0a      	ldr	r2, [pc, #40]	@ (80050f4 <HAL_Init+0x40>)
 80050ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050d0:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <HAL_Init+0x40>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a07      	ldr	r2, [pc, #28]	@ (80050f4 <HAL_Init+0x40>)
 80050d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050dc:	2003      	movs	r0, #3
 80050de:	f000 f94f 	bl	8005380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050e2:	200f      	movs	r0, #15
 80050e4:	f000 f808 	bl	80050f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e8:	f7fd fe0e 	bl	8002d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00

080050f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005100:	4b12      	ldr	r3, [pc, #72]	@ (800514c <HAL_InitTick+0x54>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <HAL_InitTick+0x58>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4619      	mov	r1, r3
 800510a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800510e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f967 	bl	80053ea <HAL_SYSTICK_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e00e      	b.n	8005144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b0f      	cmp	r3, #15
 800512a:	d80a      	bhi.n	8005142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800512c:	2200      	movs	r2, #0
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f000 f92f 	bl	8005396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005138:	4a06      	ldr	r2, [pc, #24]	@ (8005154 <HAL_InitTick+0x5c>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000060 	.word	0x20000060
 8005150:	200000f4 	.word	0x200000f4
 8005154:	200000f0 	.word	0x200000f0

08005158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_IncTick+0x20>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_IncTick+0x24>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4413      	add	r3, r2
 8005168:	4a04      	ldr	r2, [pc, #16]	@ (800517c <HAL_IncTick+0x24>)
 800516a:	6013      	str	r3, [r2, #0]
}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200000f4 	.word	0x200000f4
 800517c:	20000850 	.word	0x20000850

08005180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return uwTick;
 8005184:	4b03      	ldr	r3, [pc, #12]	@ (8005194 <HAL_GetTick+0x14>)
 8005186:	681b      	ldr	r3, [r3, #0]
}
 8005188:	4618      	mov	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000850 	.word	0x20000850

08005198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7ff ffee 	bl	8005180 <HAL_GetTick>
 80051a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d005      	beq.n	80051be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <HAL_Delay+0x44>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051be:	bf00      	nop
 80051c0:	f7ff ffde 	bl	8005180 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d8f7      	bhi.n	80051c0 <HAL_Delay+0x28>
  {
  }
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	200000f4 	.word	0x200000f4

080051e0 <__NVIC_SetPriorityGrouping>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <__NVIC_SetPriorityGrouping+0x44>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051fc:	4013      	ands	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800520c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005212:	4a04      	ldr	r2, [pc, #16]	@ (8005224 <__NVIC_SetPriorityGrouping+0x44>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	60d3      	str	r3, [r2, #12]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <__NVIC_GetPriorityGrouping>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800522c:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <__NVIC_GetPriorityGrouping+0x18>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 0307 	and.w	r3, r3, #7
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <__NVIC_EnableIRQ>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	2b00      	cmp	r3, #0
 8005254:	db0b      	blt.n	800526e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	f003 021f 	and.w	r2, r3, #31
 800525c:	4907      	ldr	r1, [pc, #28]	@ (800527c <__NVIC_EnableIRQ+0x38>)
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	2001      	movs	r0, #1
 8005266:	fa00 f202 	lsl.w	r2, r0, r2
 800526a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	e000e100 	.word	0xe000e100

08005280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	6039      	str	r1, [r7, #0]
 800528a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005290:	2b00      	cmp	r3, #0
 8005292:	db0a      	blt.n	80052aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	490c      	ldr	r1, [pc, #48]	@ (80052cc <__NVIC_SetPriority+0x4c>)
 800529a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529e:	0112      	lsls	r2, r2, #4
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	440b      	add	r3, r1
 80052a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a8:	e00a      	b.n	80052c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	4908      	ldr	r1, [pc, #32]	@ (80052d0 <__NVIC_SetPriority+0x50>)
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	3b04      	subs	r3, #4
 80052b8:	0112      	lsls	r2, r2, #4
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	440b      	add	r3, r1
 80052be:	761a      	strb	r2, [r3, #24]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	e000e100 	.word	0xe000e100
 80052d0:	e000ed00 	.word	0xe000ed00

080052d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	@ 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f1c3 0307 	rsb	r3, r3, #7
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	bf28      	it	cs
 80052f2:	2304      	movcs	r3, #4
 80052f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d902      	bls.n	8005304 <NVIC_EncodePriority+0x30>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3b03      	subs	r3, #3
 8005302:	e000      	b.n	8005306 <NVIC_EncodePriority+0x32>
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43da      	mvns	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	401a      	ands	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800531c:	f04f 31ff 	mov.w	r1, #4294967295
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	43d9      	mvns	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532c:	4313      	orrs	r3, r2
         );
}
 800532e:	4618      	mov	r0, r3
 8005330:	3724      	adds	r7, #36	@ 0x24
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b01      	subs	r3, #1
 8005348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534c:	d301      	bcc.n	8005352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800534e:	2301      	movs	r3, #1
 8005350:	e00f      	b.n	8005372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005352:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <SysTick_Config+0x40>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3b01      	subs	r3, #1
 8005358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800535a:	210f      	movs	r1, #15
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	f7ff ff8e 	bl	8005280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <SysTick_Config+0x40>)
 8005366:	2200      	movs	r2, #0
 8005368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800536a:	4b04      	ldr	r3, [pc, #16]	@ (800537c <SysTick_Config+0x40>)
 800536c:	2207      	movs	r2, #7
 800536e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000e010 	.word	0xe000e010

08005380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff29 	bl	80051e0 <__NVIC_SetPriorityGrouping>
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053a8:	f7ff ff3e 	bl	8005228 <__NVIC_GetPriorityGrouping>
 80053ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f7ff ff8e 	bl	80052d4 <NVIC_EncodePriority>
 80053b8:	4602      	mov	r2, r0
 80053ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff5d 	bl	8005280 <__NVIC_SetPriority>
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff31 	bl	8005244 <__NVIC_EnableIRQ>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ffa2 	bl	800533c <SysTick_Config>
 80053f8:	4603      	mov	r3, r0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005410:	f7ff feb6 	bl	8005180 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e099      	b.n	8005554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005440:	e00f      	b.n	8005462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005442:	f7ff fe9d 	bl	8005180 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b05      	cmp	r3, #5
 800544e:	d908      	bls.n	8005462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e078      	b.n	8005554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e8      	bne.n	8005442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4b38      	ldr	r3, [pc, #224]	@ (800555c <HAL_DMA_Init+0x158>)
 800547c:	4013      	ands	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800548e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d107      	bne.n	80054cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c4:	4313      	orrs	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d117      	bne.n	8005526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8bd 	bl	8005688 <DMA_CheckFifoParam>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2240      	movs	r2, #64	@ 0x40
 8005518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005522:	2301      	movs	r3, #1
 8005524:	e016      	b.n	8005554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f874 	bl	800561c <DMA_CalcBaseAndBitshift>
 8005534:	4603      	mov	r3, r0
 8005536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553c:	223f      	movs	r2, #63	@ 0x3f
 800553e:	409a      	lsls	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	f010803f 	.word	0xf010803f

08005560 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e050      	b.n	8005614 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d101      	bne.n	8005582 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	e048      	b.n	8005614 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2221      	movs	r2, #33	@ 0x21
 80055c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f82a 	bl	800561c <DMA_CalcBaseAndBitshift>
 80055c8:	4603      	mov	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	223f      	movs	r2, #63	@ 0x3f
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3b10      	subs	r3, #16
 800562c:	4a14      	ldr	r2, [pc, #80]	@ (8005680 <DMA_CalcBaseAndBitshift+0x64>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005636:	4a13      	ldr	r2, [pc, #76]	@ (8005684 <DMA_CalcBaseAndBitshift+0x68>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d909      	bls.n	800565e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	659a      	str	r2, [r3, #88]	@ 0x58
 800565c:	e007      	b.n	800566e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	aaaaaaab 	.word	0xaaaaaaab
 8005684:	08012428 	.word	0x08012428

08005688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11f      	bne.n	80056e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d856      	bhi.n	8005756 <DMA_CheckFifoParam+0xce>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <DMA_CheckFifoParam+0x28>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056d3 	.word	0x080056d3
 80056b8:	080056c1 	.word	0x080056c1
 80056bc:	08005757 	.word	0x08005757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d046      	beq.n	800575a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d0:	e043      	b.n	800575a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056da:	d140      	bne.n	800575e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e0:	e03d      	b.n	800575e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ea:	d121      	bne.n	8005730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d837      	bhi.n	8005762 <DMA_CheckFifoParam+0xda>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <DMA_CheckFifoParam+0x70>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005709 	.word	0x08005709
 80056fc:	0800570f 	.word	0x0800570f
 8005700:	08005709 	.word	0x08005709
 8005704:	08005721 	.word	0x08005721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e030      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d025      	beq.n	8005766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800571e:	e022      	b.n	8005766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005728:	d11f      	bne.n	800576a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800572e:	e01c      	b.n	800576a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d903      	bls.n	800573e <DMA_CheckFifoParam+0xb6>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d003      	beq.n	8005744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800573c:	e018      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	e015      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e00b      	b.n	800576e <DMA_CheckFifoParam+0xe6>
      break;
 8005756:	bf00      	nop
 8005758:	e00a      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;
 800575a:	bf00      	nop
 800575c:	e008      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;
 800575e:	bf00      	nop
 8005760:	e006      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;
 8005762:	bf00      	nop
 8005764:	e004      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;   
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <DMA_CheckFifoParam+0xe8>
      break;
 800576e:	bf00      	nop
    }
  } 
  
  return status; 
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop

08005780 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e03b      	b.n	800580a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f833 	bl	8005812 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d0:	f023 0107 	bic.w	r1, r3, #7
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80057ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68d1      	ldr	r1, [r2, #12]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af02      	add	r7, sp, #8
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_DMA2D_Start+0x1c>
 800583e:	2302      	movs	r3, #2
 8005840:	e018      	b.n	8005874 <HAL_DMA2D_Start+0x4e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f989 	bl	8005b74 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d056      	beq.n	8005946 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005898:	f7ff fc72 	bl	8005180 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800589e:	e04b      	b.n	8005938 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d023      	beq.n	80058fa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2221      	movs	r2, #33	@ 0x21
 80058e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e0a5      	b.n	8005a46 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d01a      	beq.n	8005938 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005902:	f7ff fc3d 	bl	8005180 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <HAL_DMA2D_PollForTransfer+0x9c>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e086      	b.n	8005a46 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ac      	beq.n	80058a0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d061      	beq.n	8005a2c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005968:	f7ff fc0a 	bl	8005180 <HAL_GetTick>
 800596c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800596e:	e056      	b.n	8005a1e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800597e:	2b00      	cmp	r3, #0
 8005980:	d02e      	beq.n	80059e0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	f043 0202 	orr.w	r2, r3, #2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059bc:	f043 0201 	orr.w	r2, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2229      	movs	r2, #41	@ 0x29
 80059ca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2204      	movs	r2, #4
 80059d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d01a      	beq.n	8005a1e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80059e8:	f7ff fbca 	bl	8005180 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d302      	bcc.n	80059fe <HAL_DMA2D_PollForTransfer+0x182>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e013      	b.n	8005a46 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0a1      	beq.n	8005970 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2212      	movs	r2, #18
 8005a32:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA2D_ConfigLayer+0x20>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e079      	b.n	8005b64 <HAL_DMA2D_ConfigLayer+0x114>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	3318      	adds	r3, #24
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005a9a:	4b35      	ldr	r3, [pc, #212]	@ (8005b70 <HAL_DMA2D_ConfigLayer+0x120>)
 8005a9c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b0a      	cmp	r3, #10
 8005aa4:	d003      	beq.n	8005aae <HAL_DMA2D_ConfigLayer+0x5e>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b09      	cmp	r3, #9
 8005aac:	d107      	bne.n	8005abe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e005      	b.n	8005aca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	061b      	lsls	r3, r3, #24
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d120      	bne.n	8005b12 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	ea02 0103 	and.w	r1, r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b0a      	cmp	r3, #10
 8005af8:	d003      	beq.n	8005b02 <HAL_DMA2D_ConfigLayer+0xb2>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d127      	bne.n	8005b52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b10:	e01f      	b.n	8005b52 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	ea02 0103 	and.w	r1, r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b0a      	cmp	r3, #10
 8005b3a:	d003      	beq.n	8005b44 <HAL_DMA2D_ConfigLayer+0xf4>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b09      	cmp	r3, #9
 8005b42:	d106      	bne.n	8005b52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b50:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	ff03000f 	.word	0xff03000f

08005b74 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b08b      	sub	sp, #44	@ 0x2c
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b88:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	041a      	lsls	r2, r3, #16
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bac:	d174      	bne.n	8005c98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005bb4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bbc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bc4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d108      	bne.n	8005be6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be4:	e053      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d106      	bne.n	8005bfc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfa:	e048      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d111      	bne.n	8005c28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	0cdb      	lsrs	r3, r3, #19
 8005c08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	0a9b      	lsrs	r3, r3, #10
 8005c0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	02db      	lsls	r3, r3, #11
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c26:	e032      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d117      	bne.n	8005c60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	0fdb      	lsrs	r3, r3, #31
 8005c34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	0cdb      	lsrs	r3, r3, #19
 8005c3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	0adb      	lsrs	r3, r3, #11
 8005c40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	08db      	lsrs	r3, r3, #3
 8005c46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	431a      	orrs	r2, r3
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	03db      	lsls	r3, r3, #15
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5e:	e016      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	0b1b      	lsrs	r3, r3, #12
 8005c70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	431a      	orrs	r2, r3
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c96:	e003      	b.n	8005ca0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	60da      	str	r2, [r3, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	372c      	adds	r7, #44	@ 0x2c
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	e177      	b.n	8005fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	f040 8166 	bne.w	8005fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d00b      	beq.n	8005d06 <HAL_GPIO_Init+0x5a>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cfa:	2b11      	cmp	r3, #17
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b12      	cmp	r3, #18
 8005d04:	d130      	bne.n	8005d68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	2203      	movs	r2, #3
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0201 	and.w	r2, r3, #1
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	2203      	movs	r2, #3
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d003      	beq.n	8005da8 <HAL_GPIO_Init+0xfc>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b12      	cmp	r3, #18
 8005da6:	d123      	bne.n	8005df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	08da      	lsrs	r2, r3, #3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3208      	adds	r2, #8
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	08da      	lsrs	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3208      	adds	r2, #8
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4013      	ands	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80c0 	beq.w	8005fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	4b66      	ldr	r3, [pc, #408]	@ (8005fd0 <HAL_GPIO_Init+0x324>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	4a65      	ldr	r2, [pc, #404]	@ (8005fd0 <HAL_GPIO_Init+0x324>)
 8005e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e42:	4b63      	ldr	r3, [pc, #396]	@ (8005fd0 <HAL_GPIO_Init+0x324>)
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e4e:	4a61      	ldr	r2, [pc, #388]	@ (8005fd4 <HAL_GPIO_Init+0x328>)
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	089b      	lsrs	r3, r3, #2
 8005e54:	3302      	adds	r3, #2
 8005e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	220f      	movs	r2, #15
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a58      	ldr	r2, [pc, #352]	@ (8005fd8 <HAL_GPIO_Init+0x32c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d037      	beq.n	8005eea <HAL_GPIO_Init+0x23e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a57      	ldr	r2, [pc, #348]	@ (8005fdc <HAL_GPIO_Init+0x330>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_GPIO_Init+0x23a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a56      	ldr	r2, [pc, #344]	@ (8005fe0 <HAL_GPIO_Init+0x334>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02b      	beq.n	8005ee2 <HAL_GPIO_Init+0x236>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a55      	ldr	r2, [pc, #340]	@ (8005fe4 <HAL_GPIO_Init+0x338>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d025      	beq.n	8005ede <HAL_GPIO_Init+0x232>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a54      	ldr	r2, [pc, #336]	@ (8005fe8 <HAL_GPIO_Init+0x33c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01f      	beq.n	8005eda <HAL_GPIO_Init+0x22e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a53      	ldr	r2, [pc, #332]	@ (8005fec <HAL_GPIO_Init+0x340>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d019      	beq.n	8005ed6 <HAL_GPIO_Init+0x22a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a52      	ldr	r2, [pc, #328]	@ (8005ff0 <HAL_GPIO_Init+0x344>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_GPIO_Init+0x226>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a51      	ldr	r2, [pc, #324]	@ (8005ff4 <HAL_GPIO_Init+0x348>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00d      	beq.n	8005ece <HAL_GPIO_Init+0x222>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a50      	ldr	r2, [pc, #320]	@ (8005ff8 <HAL_GPIO_Init+0x34c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <HAL_GPIO_Init+0x21e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8005ffc <HAL_GPIO_Init+0x350>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <HAL_GPIO_Init+0x21a>
 8005ec2:	2309      	movs	r3, #9
 8005ec4:	e012      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ec6:	230a      	movs	r3, #10
 8005ec8:	e010      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005eca:	2308      	movs	r3, #8
 8005ecc:	e00e      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ece:	2307      	movs	r3, #7
 8005ed0:	e00c      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ed2:	2306      	movs	r3, #6
 8005ed4:	e00a      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ed6:	2305      	movs	r3, #5
 8005ed8:	e008      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005eda:	2304      	movs	r3, #4
 8005edc:	e006      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e004      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e002      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_GPIO_Init+0x240>
 8005eea:	2300      	movs	r3, #0
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	f002 0203 	and.w	r2, r2, #3
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	4093      	lsls	r3, r2
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005efc:	4935      	ldr	r1, [pc, #212]	@ (8005fd4 <HAL_GPIO_Init+0x328>)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	089b      	lsrs	r3, r3, #2
 8005f02:	3302      	adds	r3, #2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	43db      	mvns	r3, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4013      	ands	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f2e:	4a34      	ldr	r2, [pc, #208]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f34:	4b32      	ldr	r3, [pc, #200]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f58:	4a29      	ldr	r2, [pc, #164]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f5e:	4b28      	ldr	r3, [pc, #160]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	43db      	mvns	r3, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f82:	4a1f      	ldr	r2, [pc, #124]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f88:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fac:	4a14      	ldr	r2, [pc, #80]	@ (8006000 <HAL_GPIO_Init+0x354>)
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	f67f ae84 	bls.w	8005cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3724      	adds	r7, #36	@ 0x24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40020000 	.word	0x40020000
 8005fdc:	40020400 	.word	0x40020400
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	40020c00 	.word	0x40020c00
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40021400 	.word	0x40021400
 8005ff0:	40021800 	.word	0x40021800
 8005ff4:	40021c00 	.word	0x40021c00
 8005ff8:	40022000 	.word	0x40022000
 8005ffc:	40022400 	.word	0x40022400
 8006000:	40013c00 	.word	0x40013c00

08006004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
 8006010:	4613      	mov	r3, r2
 8006012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006014:	787b      	ldrb	r3, [r7, #1]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800601a:	887a      	ldrh	r2, [r7, #2]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006020:	e003      	b.n	800602a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006022:	887b      	ldrh	r3, [r7, #2]
 8006024:	041a      	lsls	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	619a      	str	r2, [r3, #24]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e12b      	b.n	80062a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f95d 	bl	800631e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	@ 0x24
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800608a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800609a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800609c:	f001 ff1a 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 80060a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4a81      	ldr	r2, [pc, #516]	@ (80062ac <HAL_I2C_Init+0x274>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d807      	bhi.n	80060bc <HAL_I2C_Init+0x84>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a80      	ldr	r2, [pc, #512]	@ (80062b0 <HAL_I2C_Init+0x278>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bf94      	ite	ls
 80060b4:	2301      	movls	r3, #1
 80060b6:	2300      	movhi	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e006      	b.n	80060ca <HAL_I2C_Init+0x92>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a7d      	ldr	r2, [pc, #500]	@ (80062b4 <HAL_I2C_Init+0x27c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	bf94      	ite	ls
 80060c4:	2301      	movls	r3, #1
 80060c6:	2300      	movhi	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e0e7      	b.n	80062a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a78      	ldr	r2, [pc, #480]	@ (80062b8 <HAL_I2C_Init+0x280>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	0c9b      	lsrs	r3, r3, #18
 80060dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a6a      	ldr	r2, [pc, #424]	@ (80062ac <HAL_I2C_Init+0x274>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d802      	bhi.n	800610c <HAL_I2C_Init+0xd4>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	3301      	adds	r3, #1
 800610a:	e009      	b.n	8006120 <HAL_I2C_Init+0xe8>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	4a69      	ldr	r2, [pc, #420]	@ (80062bc <HAL_I2C_Init+0x284>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	099b      	lsrs	r3, r3, #6
 800611e:	3301      	adds	r3, #1
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006132:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	495c      	ldr	r1, [pc, #368]	@ (80062ac <HAL_I2C_Init+0x274>)
 800613c:	428b      	cmp	r3, r1
 800613e:	d819      	bhi.n	8006174 <HAL_I2C_Init+0x13c>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1e59      	subs	r1, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	fbb1 f3f3 	udiv	r3, r1, r3
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006154:	400b      	ands	r3, r1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_I2C_Init+0x138>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1e59      	subs	r1, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	fbb1 f3f3 	udiv	r3, r1, r3
 8006168:	3301      	adds	r3, #1
 800616a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616e:	e051      	b.n	8006214 <HAL_I2C_Init+0x1dc>
 8006170:	2304      	movs	r3, #4
 8006172:	e04f      	b.n	8006214 <HAL_I2C_Init+0x1dc>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d111      	bne.n	80061a0 <HAL_I2C_Init+0x168>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1e58      	subs	r0, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	440b      	add	r3, r1
 800618a:	fbb0 f3f3 	udiv	r3, r0, r3
 800618e:	3301      	adds	r3, #1
 8006190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e012      	b.n	80061c6 <HAL_I2C_Init+0x18e>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1e58      	subs	r0, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	0099      	lsls	r1, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Init+0x196>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e022      	b.n	8006214 <HAL_I2C_Init+0x1dc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10e      	bne.n	80061f4 <HAL_I2C_Init+0x1bc>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1e58      	subs	r0, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	440b      	add	r3, r1
 80061e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e8:	3301      	adds	r3, #1
 80061ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f2:	e00f      	b.n	8006214 <HAL_I2C_Init+0x1dc>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1e58      	subs	r0, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	0099      	lsls	r1, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	fbb0 f3f3 	udiv	r3, r0, r3
 800620a:	3301      	adds	r3, #1
 800620c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	6809      	ldr	r1, [r1, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006242:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6911      	ldr	r1, [r2, #16]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68d2      	ldr	r2, [r2, #12]
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	430b      	orrs	r3, r1
 8006256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	000186a0 	.word	0x000186a0
 80062b0:	001e847f 	.word	0x001e847f
 80062b4:	003d08ff 	.word	0x003d08ff
 80062b8:	431bde83 	.word	0x431bde83
 80062bc:	10624dd3 	.word	0x10624dd3

080062c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e021      	b.n	8006316 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2224      	movs	r2, #36	@ 0x24
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f821 	bl	8006332 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006362:	f7fe ff0d 	bl	8005180 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 80d9 	bne.w	8006528 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2319      	movs	r3, #25
 800637c:	2201      	movs	r2, #1
 800637e:	496d      	ldr	r1, [pc, #436]	@ (8006534 <HAL_I2C_Mem_Write+0x1ec>)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fc89 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	e0cc      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2C_Mem_Write+0x56>
 800639a:	2302      	movs	r3, #2
 800639c:	e0c5      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d007      	beq.n	80063c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2221      	movs	r2, #33	@ 0x21
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	@ 0x40
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a4d      	ldr	r2, [pc, #308]	@ (8006538 <HAL_I2C_Mem_Write+0x1f0>)
 8006404:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006406:	88f8      	ldrh	r0, [r7, #6]
 8006408:	893a      	ldrh	r2, [r7, #8]
 800640a:	8979      	ldrh	r1, [r7, #10]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4603      	mov	r3, r0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fac4 	bl	80069a4 <I2C_RequestMemoryWrite>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d052      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e081      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fd0a 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	2b04      	cmp	r3, #4
 800643c:	d107      	bne.n	800644e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800644c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06b      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d11b      	bne.n	80064c8 <HAL_I2C_Mem_Write+0x180>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1aa      	bne.n	8006426 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fcf6 	bl	8006ec6 <I2C_WaitOnBTFFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d107      	bne.n	80064f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e016      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800650a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	00100002 	.word	0x00100002
 8006538:	ffff0000 	.word	0xffff0000

0800653c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	@ 0x30
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	817b      	strh	r3, [r7, #10]
 800654e:	460b      	mov	r3, r1
 8006550:	813b      	strh	r3, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006556:	f7fe fe13 	bl	8005180 <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	f040 8208 	bne.w	800697a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2319      	movs	r3, #25
 8006570:	2201      	movs	r2, #1
 8006572:	497b      	ldr	r1, [pc, #492]	@ (8006760 <HAL_I2C_Mem_Read+0x224>)
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fb8f 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
 8006582:	e1fb      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_I2C_Mem_Read+0x56>
 800658e:	2302      	movs	r3, #2
 8006590:	e1f4      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d007      	beq.n	80065b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2222      	movs	r2, #34	@ 0x22
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2240      	movs	r2, #64	@ 0x40
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80065e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006764 <HAL_I2C_Mem_Read+0x228>)
 80065f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065fa:	88f8      	ldrh	r0, [r7, #6]
 80065fc:	893a      	ldrh	r2, [r7, #8]
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4603      	mov	r3, r0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fa5e 	bl	8006acc <I2C_RequestMemoryRead>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e1b0      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e184      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664e:	2b01      	cmp	r3, #1
 8006650:	d11b      	bne.n	800668a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e164      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	2b02      	cmp	r3, #2
 8006690:	d11b      	bne.n	80066ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	e144      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066e0:	e138      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	f200 80f1 	bhi.w	80068ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d123      	bne.n	800673c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fc25 	bl	8006f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e139      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800673a:	e10b      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006740:	2b02      	cmp	r3, #2
 8006742:	d14e      	bne.n	80067e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	2200      	movs	r2, #0
 800674c:	4906      	ldr	r1, [pc, #24]	@ (8006768 <HAL_I2C_Mem_Read+0x22c>)
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 faa2 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e10e      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
 800675e:	bf00      	nop
 8006760:	00100002 	.word	0x00100002
 8006764:	ffff0000 	.word	0xffff0000
 8006768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067e0:	e0b8      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	2200      	movs	r2, #0
 80067ea:	4966      	ldr	r1, [pc, #408]	@ (8006984 <HAL_I2C_Mem_Read+0x448>)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fa53 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0bf      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800680a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006844:	2200      	movs	r2, #0
 8006846:	494f      	ldr	r1, [pc, #316]	@ (8006984 <HAL_I2C_Mem_Read+0x448>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa25 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e091      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068cc:	e042      	b.n	8006954 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fb38 	bl	8006f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e04c      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d118      	bne.n	8006954 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f aec2 	bne.w	80066e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	@ 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010004 	.word	0x00010004

08006988 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	b2db      	uxtb	r3, r3
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	817b      	strh	r3, [r7, #10]
 80069b6:	460b      	mov	r3, r1
 80069b8:	813b      	strh	r3, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f95c 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e05f      	b.n	8006ac0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a00:	897b      	ldrh	r3, [r7, #10]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	492c      	ldr	r1, [pc, #176]	@ (8006ac8 <I2C_RequestMemoryWrite+0x124>)
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f995 	bl	8006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e04c      	b.n	8006ac0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3e:	6a39      	ldr	r1, [r7, #32]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f9ff 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d107      	bne.n	8006a64 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e02b      	b.n	8006ac0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]
 8006a78:	e021      	b.n	8006abe <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a7a:	893b      	ldrh	r3, [r7, #8]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8a:	6a39      	ldr	r1, [r7, #32]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f9d9 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d107      	bne.n	8006ab0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e005      	b.n	8006ac0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	00010002 	.word	0x00010002

08006acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	817b      	strh	r3, [r7, #10]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	813b      	strh	r3, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006af4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f8c0 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e0a9      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b38:	897b      	ldrh	r3, [r7, #10]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	6a3a      	ldr	r2, [r7, #32]
 8006b4c:	4951      	ldr	r1, [pc, #324]	@ (8006c94 <I2C_RequestMemoryRead+0x1c8>)
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f8f9 	bl	8006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e096      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b76:	6a39      	ldr	r1, [r7, #32]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f963 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d107      	bne.n	8006b9c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e075      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba6:	893b      	ldrh	r3, [r7, #8]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	611a      	str	r2, [r3, #16]
 8006bb0:	e021      	b.n	8006bf6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	6a39      	ldr	r1, [r7, #32]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f93d 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d107      	bne.n	8006be8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e04f      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf8:	6a39      	ldr	r1, [r7, #32]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f922 	bl	8006e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d107      	bne.n	8006c1e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e034      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f82a 	bl	8006c98 <I2C_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e013      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c64:	897b      	ldrh	r3, [r7, #10]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	4906      	ldr	r1, [pc, #24]	@ (8006c94 <I2C_RequestMemoryRead+0x1c8>)
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f863 	bl	8006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	00010002 	.word	0x00010002

08006c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ca8:	e025      	b.n	8006cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d021      	beq.n	8006cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fe fa65 	bl	8005180 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e023      	b.n	8006d3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10d      	bne.n	8006d1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	e00c      	b.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	43da      	mvns	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d0b6      	beq.n	8006caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d54:	e051      	b.n	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d64:	d123      	bne.n	8006dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e046      	b.n	8006e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d021      	beq.n	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fe f9e3 	bl	8005180 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d116      	bne.n	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e020      	b.n	8006e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10c      	bne.n	8006e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	43da      	mvns	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bf14      	ite	ne
 8006e16:	2301      	movne	r3, #1
 8006e18:	2300      	moveq	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	e00b      	b.n	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	43da      	mvns	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d18d      	bne.n	8006d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e50:	e02d      	b.n	8006eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f8ce 	bl	8006ff4 <I2C_IsAcknowledgeFailed>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e02d      	b.n	8006ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d021      	beq.n	8006eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6a:	f7fe f989 	bl	8005180 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d116      	bne.n	8006eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e007      	b.n	8006ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb8:	2b80      	cmp	r3, #128	@ 0x80
 8006eba:	d1ca      	bne.n	8006e52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ed2:	e02d      	b.n	8006f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f88d 	bl	8006ff4 <I2C_IsAcknowledgeFailed>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e02d      	b.n	8006f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d021      	beq.n	8006f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eec:	f7fe f948 	bl	8005180 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d302      	bcc.n	8006f02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d116      	bne.n	8006f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	f043 0220 	orr.w	r2, r3, #32
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e007      	b.n	8006f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d1ca      	bne.n	8006ed4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f54:	e042      	b.n	8006fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d119      	bne.n	8006f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0210 	mvn.w	r2, #16
 8006f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e029      	b.n	8006fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f98:	f7fe f8f2 	bl	8005180 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d116      	bne.n	8006fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	f043 0220 	orr.w	r2, r3, #32
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e007      	b.n	8006fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe6:	2b40      	cmp	r3, #64	@ 0x40
 8006fe8:	d1b5      	bne.n	8006f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700a:	d11b      	bne.n	8007044 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007014:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007030:	f043 0204 	orr.w	r2, r3, #4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e000      	b.n	8007046 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e0bf      	b.n	80071e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8ba 	bl	80071f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007096:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6999      	ldr	r1, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6899      	ldr	r1, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_LTDC_Init+0x19c>)
 80070c8:	400b      	ands	r3, r1
 80070ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68d9      	ldr	r1, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	4b3e      	ldr	r3, [pc, #248]	@ (80071f0 <HAL_LTDC_Init+0x19c>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68d9      	ldr	r1, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6919      	ldr	r1, [r3, #16]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b33      	ldr	r3, [pc, #204]	@ (80071f0 <HAL_LTDC_Init+0x19c>)
 8007124:	400b      	ands	r3, r1
 8007126:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6919      	ldr	r1, [r3, #16]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6959      	ldr	r1, [r3, #20]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <HAL_LTDC_Init+0x19c>)
 8007152:	400b      	ands	r3, r1
 8007154:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6959      	ldr	r1, [r3, #20]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0206 	orr.w	r2, r2, #6
 80071c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	f000f800 	.word	0xf000f800

080071f4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007208:	b5b0      	push	{r4, r5, r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_LTDC_ConfigLayer+0x1a>
 800721e:	2302      	movs	r3, #2
 8007220:	e02c      	b.n	800727c <HAL_LTDC_ConfigLayer+0x74>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2134      	movs	r1, #52	@ 0x34
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800724a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800724c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f83b 	bl	80072d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2201      	movs	r2, #1
 8007268:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bdb0      	pop	{r4, r5, r7, pc}

08007284 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_LTDC_EnableDither+0x16>
 8007296:	2302      	movs	r3, #2
 8007298:	e016      	b.n	80072c8 <HAL_LTDC_EnableDither+0x44>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <HAL_LTDC_EnableDither+0x50>)
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	4a09      	ldr	r2, [pc, #36]	@ (80072d4 <HAL_LTDC_EnableDither+0x50>)
 80072b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40016800 	.word	0x40016800

080072d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072d8:	b480      	push	{r7}
 80072da:	b089      	sub	sp, #36	@ 0x24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f4:	4413      	add	r3, r2
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	@ 0x84
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	4611      	mov	r1, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	01d2      	lsls	r2, r2, #7
 8007314:	440a      	add	r2, r1
 8007316:	3284      	adds	r2, #132	@ 0x84
 8007318:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800731c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732e:	4413      	add	r3, r2
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4619      	mov	r1, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	01db      	lsls	r3, r3, #7
 800733c:	440b      	add	r3, r1
 800733e:	3384      	adds	r3, #132	@ 0x84
 8007340:	4619      	mov	r1, r3
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4313      	orrs	r3, r2
 8007346:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007356:	4413      	add	r3, r2
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	4413      	add	r3, r2
 8007368:	3384      	adds	r3, #132	@ 0x84
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	4611      	mov	r1, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	01d2      	lsls	r2, r2, #7
 8007376:	440a      	add	r2, r1
 8007378:	3284      	adds	r2, #132	@ 0x84
 800737a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800737e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800738e:	4413      	add	r3, r2
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	440b      	add	r3, r1
 800739e:	3384      	adds	r3, #132	@ 0x84
 80073a0:	4619      	mov	r1, r3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	01db      	lsls	r3, r3, #7
 80073b2:	4413      	add	r3, r2
 80073b4:	3384      	adds	r3, #132	@ 0x84
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	4611      	mov	r1, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	01d2      	lsls	r2, r2, #7
 80073c2:	440a      	add	r2, r1
 80073c4:	3284      	adds	r2, #132	@ 0x84
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	4413      	add	r3, r2
 80073d8:	3384      	adds	r3, #132	@ 0x84
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	01db      	lsls	r3, r3, #7
 8007408:	4413      	add	r3, r2
 800740a:	3384      	adds	r3, #132	@ 0x84
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	4413      	add	r3, r2
 800741a:	3384      	adds	r3, #132	@ 0x84
 800741c:	461a      	mov	r2, r3
 800741e:	2300      	movs	r3, #0
 8007420:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007428:	461a      	mov	r2, r3
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	431a      	orrs	r2, r3
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	431a      	orrs	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	440b      	add	r3, r1
 800743e:	3384      	adds	r3, #132	@ 0x84
 8007440:	4619      	mov	r1, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	4413      	add	r3, r2
 8007454:	3384      	adds	r3, #132	@ 0x84
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	4611      	mov	r1, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	01d2      	lsls	r2, r2, #7
 8007462:	440a      	add	r2, r1
 8007464:	3284      	adds	r2, #132	@ 0x84
 8007466:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800746a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	01db      	lsls	r3, r3, #7
 8007476:	4413      	add	r3, r2
 8007478:	3384      	adds	r3, #132	@ 0x84
 800747a:	461a      	mov	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	01db      	lsls	r3, r3, #7
 800748c:	4413      	add	r3, r2
 800748e:	3384      	adds	r3, #132	@ 0x84
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	4611      	mov	r1, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	01d2      	lsls	r2, r2, #7
 800749c:	440a      	add	r2, r1
 800749e:	3284      	adds	r2, #132	@ 0x84
 80074a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80074a4:	f023 0307 	bic.w	r3, r3, #7
 80074a8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	69da      	ldr	r2, [r3, #28]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	6809      	ldr	r1, [r1, #0]
 80074b6:	4608      	mov	r0, r1
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	01c9      	lsls	r1, r1, #7
 80074bc:	4401      	add	r1, r0
 80074be:	3184      	adds	r1, #132	@ 0x84
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	4413      	add	r3, r2
 80074d0:	3384      	adds	r3, #132	@ 0x84
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	01db      	lsls	r3, r3, #7
 80074de:	4413      	add	r3, r2
 80074e0:	3384      	adds	r3, #132	@ 0x84
 80074e2:	461a      	mov	r2, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	01db      	lsls	r3, r3, #7
 80074f2:	4413      	add	r3, r2
 80074f4:	3384      	adds	r3, #132	@ 0x84
 80074f6:	461a      	mov	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007506:	2304      	movs	r3, #4
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	e01b      	b.n	8007544 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d102      	bne.n	800751a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007514:	2303      	movs	r3, #3
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e014      	b.n	8007544 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00b      	beq.n	800753a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007526:	2b02      	cmp	r3, #2
 8007528:	d007      	beq.n	800753a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800752e:	2b03      	cmp	r3, #3
 8007530:	d003      	beq.n	800753a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007536:	2b07      	cmp	r3, #7
 8007538:	d102      	bne.n	8007540 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800753a:	2302      	movs	r3, #2
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e001      	b.n	8007544 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007540:	2301      	movs	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	01db      	lsls	r3, r3, #7
 800754e:	4413      	add	r3, r2
 8007550:	3384      	adds	r3, #132	@ 0x84
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	4611      	mov	r1, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	01d2      	lsls	r2, r2, #7
 800755e:	440a      	add	r2, r1
 8007560:	3284      	adds	r2, #132	@ 0x84
 8007562:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007566:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	041a      	lsls	r2, r3, #16
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	1acb      	subs	r3, r1, r3
 800757e:	69f9      	ldr	r1, [r7, #28]
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	3303      	adds	r3, #3
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	6809      	ldr	r1, [r1, #0]
 800758a:	4608      	mov	r0, r1
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	01c9      	lsls	r1, r1, #7
 8007590:	4401      	add	r1, r0
 8007592:	3184      	adds	r1, #132	@ 0x84
 8007594:	4313      	orrs	r3, r2
 8007596:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	01db      	lsls	r3, r3, #7
 80075a2:	4413      	add	r3, r2
 80075a4:	3384      	adds	r3, #132	@ 0x84
 80075a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	4611      	mov	r1, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	01d2      	lsls	r2, r2, #7
 80075b2:	440a      	add	r2, r1
 80075b4:	3284      	adds	r2, #132	@ 0x84
 80075b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075ba:	f023 0307 	bic.w	r3, r3, #7
 80075be:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	01db      	lsls	r3, r3, #7
 80075ca:	4413      	add	r3, r2
 80075cc:	3384      	adds	r3, #132	@ 0x84
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	01db      	lsls	r3, r3, #7
 80075e0:	4413      	add	r3, r2
 80075e2:	3384      	adds	r3, #132	@ 0x84
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	4611      	mov	r1, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	01d2      	lsls	r2, r2, #7
 80075f0:	440a      	add	r2, r1
 80075f2:	3284      	adds	r2, #132	@ 0x84
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
}
 80075fa:	bf00      	nop
 80075fc:	3724      	adds	r7, #36	@ 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e25e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d075      	beq.n	8007712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007626:	4b88      	ldr	r3, [pc, #544]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	2b04      	cmp	r3, #4
 8007630:	d00c      	beq.n	800764c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007632:	4b85      	ldr	r3, [pc, #532]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800763a:	2b08      	cmp	r3, #8
 800763c:	d112      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800763e:	4b82      	ldr	r3, [pc, #520]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800764a:	d10b      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	4b7e      	ldr	r3, [pc, #504]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d05b      	beq.n	8007710 <HAL_RCC_OscConfig+0x108>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d157      	bne.n	8007710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e239      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800766c:	d106      	bne.n	800767c <HAL_RCC_OscConfig+0x74>
 800766e:	4b76      	ldr	r3, [pc, #472]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a75      	ldr	r2, [pc, #468]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e01d      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x98>
 8007686:	4b70      	ldr	r3, [pc, #448]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a6f      	ldr	r2, [pc, #444]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800768c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	4b6d      	ldr	r3, [pc, #436]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a6c      	ldr	r2, [pc, #432]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e00b      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 80076a0:	4b69      	ldr	r3, [pc, #420]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a68      	ldr	r2, [pc, #416]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	4b66      	ldr	r3, [pc, #408]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a65      	ldr	r2, [pc, #404]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c0:	f7fd fd5e 	bl	8005180 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c8:	f7fd fd5a 	bl	8005180 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	@ 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e1fe      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	4b5b      	ldr	r3, [pc, #364]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0xc0>
 80076e6:	e014      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fd fd4a 	bl	8005180 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076f0:	f7fd fd46 	bl	8005180 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	@ 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1ea      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007702:	4b51      	ldr	r3, [pc, #324]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0xe8>
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d063      	beq.n	80077e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800771e:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800772a:	4b47      	ldr	r3, [pc, #284]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007732:	2b08      	cmp	r3, #8
 8007734:	d11c      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007736:	4b44      	ldr	r3, [pc, #272]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d116      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007742:	4b41      	ldr	r3, [pc, #260]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d001      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e1be      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775a:	4b3b      	ldr	r3, [pc, #236]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4937      	ldr	r1, [pc, #220]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800776a:	4313      	orrs	r3, r2
 800776c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800776e:	e03a      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007778:	4b34      	ldr	r3, [pc, #208]	@ (800784c <HAL_RCC_OscConfig+0x244>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fd fcff 	bl	8005180 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007786:	f7fd fcfb 	bl	8005180 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e19f      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007798:	4b2b      	ldr	r3, [pc, #172]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a4:	4b28      	ldr	r3, [pc, #160]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4925      	ldr	r1, [pc, #148]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	e015      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ba:	4b24      	ldr	r3, [pc, #144]	@ (800784c <HAL_RCC_OscConfig+0x244>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fd fcde 	bl	8005180 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c8:	f7fd fcda 	bl	8005180 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e17e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1f0      	bne.n	80077c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d036      	beq.n	8007860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d016      	beq.n	8007828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077fa:	4b15      	ldr	r3, [pc, #84]	@ (8007850 <HAL_RCC_OscConfig+0x248>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fd fcbe 	bl	8005180 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007808:	f7fd fcba 	bl	8005180 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e15e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781a:	4b0b      	ldr	r3, [pc, #44]	@ (8007848 <HAL_RCC_OscConfig+0x240>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0x200>
 8007826:	e01b      	b.n	8007860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <HAL_RCC_OscConfig+0x248>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800782e:	f7fd fca7 	bl	8005180 <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007834:	e00e      	b.n	8007854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007836:	f7fd fca3 	bl	8005180 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d907      	bls.n	8007854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e147      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
 8007848:	40023800 	.word	0x40023800
 800784c:	42470000 	.word	0x42470000
 8007850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007854:	4b88      	ldr	r3, [pc, #544]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1ea      	bne.n	8007836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8097 	beq.w	800799c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007872:	4b81      	ldr	r3, [pc, #516]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	4b7d      	ldr	r3, [pc, #500]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	4a7c      	ldr	r2, [pc, #496]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788c:	6413      	str	r3, [r2, #64]	@ 0x40
 800788e:	4b7a      	ldr	r3, [pc, #488]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007896:	60bb      	str	r3, [r7, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789e:	4b77      	ldr	r3, [pc, #476]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d118      	bne.n	80078dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078aa:	4b74      	ldr	r3, [pc, #464]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a73      	ldr	r2, [pc, #460]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078b6:	f7fd fc63 	bl	8005180 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078be:	f7fd fc5f 	bl	8005180 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e103      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d0:	4b6a      	ldr	r3, [pc, #424]	@ (8007a7c <HAL_RCC_OscConfig+0x474>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <HAL_RCC_OscConfig+0x2ea>
 80078e4:	4b64      	ldr	r3, [pc, #400]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e8:	4a63      	ldr	r2, [pc, #396]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80078f0:	e01c      	b.n	800792c <HAL_RCC_OscConfig+0x324>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d10c      	bne.n	8007914 <HAL_RCC_OscConfig+0x30c>
 80078fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fe:	4a5e      	ldr	r2, [pc, #376]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007900:	f043 0304 	orr.w	r3, r3, #4
 8007904:	6713      	str	r3, [r2, #112]	@ 0x70
 8007906:	4b5c      	ldr	r3, [pc, #368]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	4a5b      	ldr	r2, [pc, #364]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	6713      	str	r3, [r2, #112]	@ 0x70
 8007912:	e00b      	b.n	800792c <HAL_RCC_OscConfig+0x324>
 8007914:	4b58      	ldr	r3, [pc, #352]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007918:	4a57      	ldr	r2, [pc, #348]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007920:	4b55      	ldr	r3, [pc, #340]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	4a54      	ldr	r2, [pc, #336]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007926:	f023 0304 	bic.w	r3, r3, #4
 800792a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007934:	f7fd fc24 	bl	8005180 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793a:	e00a      	b.n	8007952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800793c:	f7fd fc20 	bl	8005180 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e0c2      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007952:	4b49      	ldr	r3, [pc, #292]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ee      	beq.n	800793c <HAL_RCC_OscConfig+0x334>
 800795e:	e014      	b.n	800798a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007960:	f7fd fc0e 	bl	8005180 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007966:	e00a      	b.n	800797e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007968:	f7fd fc0a 	bl	8005180 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e0ac      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800797e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ee      	bne.n	8007968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d105      	bne.n	800799c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007990:	4b39      	ldr	r3, [pc, #228]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	4a38      	ldr	r2, [pc, #224]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800799a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8098 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079a6:	4b34      	ldr	r3, [pc, #208]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d05c      	beq.n	8007a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d141      	bne.n	8007a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ba:	4b31      	ldr	r3, [pc, #196]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c0:	f7fd fbde 	bl	8005180 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c8:	f7fd fbda 	bl	8005180 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e07e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079da:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	3b01      	subs	r3, #1
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	061b      	lsls	r3, r3, #24
 8007a0a:	491b      	ldr	r1, [pc, #108]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a10:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a16:	f7fd fbb3 	bl	8005180 <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a1e:	f7fd fbaf 	bl	8005180 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e053      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a30:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f0      	beq.n	8007a1e <HAL_RCC_OscConfig+0x416>
 8007a3c:	e04b      	b.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3e:	4b10      	ldr	r3, [pc, #64]	@ (8007a80 <HAL_RCC_OscConfig+0x478>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a44:	f7fd fb9c 	bl	8005180 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a4c:	f7fd fb98 	bl	8005180 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e03c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_RCC_OscConfig+0x470>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x444>
 8007a6a:	e034      	b.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e02f      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	40007000 	.word	0x40007000
 8007a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a84:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <HAL_RCC_OscConfig+0x4d8>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d11c      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d115      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007aac:	4013      	ands	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d10d      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d001      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40023800 	.word	0x40023800

08007ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0cc      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af8:	4b68      	ldr	r3, [pc, #416]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d90c      	bls.n	8007b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b06:	4b65      	ldr	r3, [pc, #404]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0e:	4b63      	ldr	r3, [pc, #396]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d001      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0b8      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d020      	beq.n	8007b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b38:	4b59      	ldr	r3, [pc, #356]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4a58      	ldr	r2, [pc, #352]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b50:	4b53      	ldr	r3, [pc, #332]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4a52      	ldr	r2, [pc, #328]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b5c:	4b50      	ldr	r3, [pc, #320]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	494d      	ldr	r1, [pc, #308]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d044      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d107      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b82:	4b47      	ldr	r3, [pc, #284]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d119      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e07f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d003      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d107      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e06f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e067      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f023 0203 	bic.w	r2, r3, #3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	4934      	ldr	r1, [pc, #208]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bd4:	f7fd fad4 	bl	8005180 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bda:	e00a      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bdc:	f7fd fad0 	bl	8005180 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e04f      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 020c 	and.w	r2, r3, #12
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d1eb      	bne.n	8007bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c04:	4b25      	ldr	r3, [pc, #148]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d20c      	bcs.n	8007c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c12:	4b22      	ldr	r3, [pc, #136]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1a:	4b20      	ldr	r3, [pc, #128]	@ (8007c9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e032      	b.n	8007c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c38:	4b19      	ldr	r3, [pc, #100]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4916      	ldr	r1, [pc, #88]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c56:	4b12      	ldr	r3, [pc, #72]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	490e      	ldr	r1, [pc, #56]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c6a:	f000 f821 	bl	8007cb0 <HAL_RCC_GetSysClockFreq>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	091b      	lsrs	r3, r3, #4
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	490a      	ldr	r1, [pc, #40]	@ (8007ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8007c7c:	5ccb      	ldrb	r3, [r1, r3]
 8007c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c82:	4a09      	ldr	r2, [pc, #36]	@ (8007ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8007c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c86:	4b09      	ldr	r3, [pc, #36]	@ (8007cac <HAL_RCC_ClockConfig+0x1c8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fa34 	bl	80050f8 <HAL_InitTick>

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40023c00 	.word	0x40023c00
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	0800ee9c 	.word	0x0800ee9c
 8007ca8:	20000060 	.word	0x20000060
 8007cac:	200000f0 	.word	0x200000f0

08007cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b094      	sub	sp, #80	@ 0x50
 8007cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc8:	4b79      	ldr	r3, [pc, #484]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 030c 	and.w	r3, r3, #12
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d00d      	beq.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	f200 80e1 	bhi.w	8007e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d003      	beq.n	8007cea <HAL_RCC_GetSysClockFreq+0x3a>
 8007ce2:	e0db      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ce4:	4b73      	ldr	r3, [pc, #460]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007ce8:	e0db      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cea:	4b73      	ldr	r3, [pc, #460]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007cee:	e0d8      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d063      	beq.n	8007dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d06:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	f04f 0000 	mov.w	r0, #0
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	0159      	lsls	r1, r3, #5
 8007d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d34:	0150      	lsls	r0, r2, #5
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	1a51      	subs	r1, r2, r1
 8007d3e:	6139      	str	r1, [r7, #16]
 8007d40:	4629      	mov	r1, r5
 8007d42:	eb63 0301 	sbc.w	r3, r3, r1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d54:	4659      	mov	r1, fp
 8007d56:	018b      	lsls	r3, r1, #6
 8007d58:	4651      	mov	r1, sl
 8007d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d5e:	4651      	mov	r1, sl
 8007d60:	018a      	lsls	r2, r1, #6
 8007d62:	4651      	mov	r1, sl
 8007d64:	ebb2 0801 	subs.w	r8, r2, r1
 8007d68:	4659      	mov	r1, fp
 8007d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d82:	4690      	mov	r8, r2
 8007d84:	4699      	mov	r9, r3
 8007d86:	4623      	mov	r3, r4
 8007d88:	eb18 0303 	adds.w	r3, r8, r3
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	462b      	mov	r3, r5
 8007d90:	eb49 0303 	adc.w	r3, r9, r3
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007da2:	4629      	mov	r1, r5
 8007da4:	024b      	lsls	r3, r1, #9
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007dac:	4621      	mov	r1, r4
 8007dae:	024a      	lsls	r2, r1, #9
 8007db0:	4610      	mov	r0, r2
 8007db2:	4619      	mov	r1, r3
 8007db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db6:	2200      	movs	r2, #0
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dc0:	f7f8 ff72 	bl	8000ca8 <__aeabi_uldivmod>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4613      	mov	r3, r2
 8007dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dcc:	e058      	b.n	8007e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dce:	4b38      	ldr	r3, [pc, #224]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	099b      	lsrs	r3, r3, #6
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	4611      	mov	r1, r2
 8007dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007dde:	623b      	str	r3, [r7, #32]
 8007de0:	2300      	movs	r3, #0
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	f04f 0000 	mov.w	r0, #0
 8007df0:	f04f 0100 	mov.w	r1, #0
 8007df4:	0159      	lsls	r1, r3, #5
 8007df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dfa:	0150      	lsls	r0, r2, #5
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4641      	mov	r1, r8
 8007e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e06:	4649      	mov	r1, r9
 8007e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e20:	ebb2 040a 	subs.w	r4, r2, sl
 8007e24:	eb63 050b 	sbc.w	r5, r3, fp
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	00eb      	lsls	r3, r5, #3
 8007e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e36:	00e2      	lsls	r2, r4, #3
 8007e38:	4614      	mov	r4, r2
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	4643      	mov	r3, r8
 8007e3e:	18e3      	adds	r3, r4, r3
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	464b      	mov	r3, r9
 8007e44:	eb45 0303 	adc.w	r3, r5, r3
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e56:	4629      	mov	r1, r5
 8007e58:	028b      	lsls	r3, r1, #10
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e60:	4621      	mov	r1, r4
 8007e62:	028a      	lsls	r2, r1, #10
 8007e64:	4610      	mov	r0, r2
 8007e66:	4619      	mov	r1, r3
 8007e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	61fa      	str	r2, [r7, #28]
 8007e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e74:	f7f8 ff18 	bl	8000ca8 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e9a:	e002      	b.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e9c:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3750      	adds	r7, #80	@ 0x50
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	00f42400 	.word	0x00f42400
 8007eb8:	007a1200 	.word	0x007a1200

08007ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000060 	.word	0x20000060

08007ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ed8:	f7ff fff0 	bl	8007ebc <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b05      	ldr	r3, [pc, #20]	@ (8007ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	0a9b      	lsrs	r3, r3, #10
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4903      	ldr	r1, [pc, #12]	@ (8007ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	0800eeac 	.word	0x0800eeac

08007efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f00:	f7ff ffdc 	bl	8007ebc <HAL_RCC_GetHCLKFreq>
 8007f04:	4602      	mov	r2, r0
 8007f06:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	0b5b      	lsrs	r3, r3, #13
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	4903      	ldr	r1, [pc, #12]	@ (8007f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f12:	5ccb      	ldrb	r3, [r1, r3]
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	0800eeac 	.word	0x0800eeac

08007f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d075      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f58:	4b91      	ldr	r3, [pc, #580]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f5e:	f7fd f90f 	bl	8005180 <HAL_GetTick>
 8007f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f64:	e008      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f66:	f7fd f90b 	bl	8005180 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e189      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f78:	4b8a      	ldr	r3, [pc, #552]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f0      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d009      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	019a      	lsls	r2, r3, #6
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	071b      	lsls	r3, r3, #28
 8007f9c:	4981      	ldr	r1, [pc, #516]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01f      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fb6:	0f1b      	lsrs	r3, r3, #28
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	019a      	lsls	r2, r3, #6
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	061b      	lsls	r3, r3, #24
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	071b      	lsls	r3, r3, #28
 8007fd0:	4974      	ldr	r1, [pc, #464]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007fd8:	4b72      	ldr	r3, [pc, #456]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fde:	f023 021f 	bic.w	r2, r3, #31
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	496e      	ldr	r1, [pc, #440]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00d      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	019a      	lsls	r2, r3, #6
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	061b      	lsls	r3, r3, #24
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	071b      	lsls	r3, r3, #28
 8008010:	4964      	ldr	r1, [pc, #400]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008018:	4b61      	ldr	r3, [pc, #388]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800801e:	f7fd f8af 	bl	8005180 <HAL_GetTick>
 8008022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008024:	e008      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008026:	f7fd f8ab 	bl	8005180 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e129      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008038:	4b5a      	ldr	r3, [pc, #360]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008058:	2b00      	cmp	r3, #0
 800805a:	d079      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800805c:	4b52      	ldr	r3, [pc, #328]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008062:	f7fd f88d 	bl	8005180 <HAL_GetTick>
 8008066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008068:	e008      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800806a:	f7fd f889 	bl	8005180 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e107      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800807c:	4b49      	ldr	r3, [pc, #292]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008088:	d0ef      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d020      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008096:	4b43      	ldr	r3, [pc, #268]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809c:	0f1b      	lsrs	r3, r3, #28
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	019a      	lsls	r2, r3, #6
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	061b      	lsls	r3, r3, #24
 80080b0:	431a      	orrs	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	071b      	lsls	r3, r3, #28
 80080b6:	493b      	ldr	r1, [pc, #236]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080be:	4b39      	ldr	r3, [pc, #228]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	021b      	lsls	r3, r3, #8
 80080d0:	4934      	ldr	r1, [pc, #208]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01e      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080e4:	4b2f      	ldr	r3, [pc, #188]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	0e1b      	lsrs	r3, r3, #24
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	019a      	lsls	r2, r3, #6
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	061b      	lsls	r3, r3, #24
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	071b      	lsls	r3, r3, #28
 8008104:	4927      	ldr	r1, [pc, #156]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800810c:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800810e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008112:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	4922      	ldr	r1, [pc, #136]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008122:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008124:	2201      	movs	r2, #1
 8008126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008128:	f7fd f82a 	bl	8005180 <HAL_GetTick>
 800812c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008130:	f7fd f826 	bl	8005180 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e0a4      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008142:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800814e:	d1ef      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 808b 	beq.w	8008274 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008166:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800816c:	6413      	str	r3, [r2, #64]	@ 0x40
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800817a:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a0b      	ldr	r2, [pc, #44]	@ (80081ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008184:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008186:	f7fc fffb 	bl	8005180 <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800818c:	e010      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800818e:	f7fc fff7 	bl	8005180 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d909      	bls.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e075      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80081a0:	42470068 	.word	0x42470068
 80081a4:	40023800 	.word	0x40023800
 80081a8:	42470070 	.word	0x42470070
 80081ac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081b0:	4b38      	ldr	r3, [pc, #224]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0e8      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081bc:	4b36      	ldr	r3, [pc, #216]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02f      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d028      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081da:	4b2f      	ldr	r3, [pc, #188]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081e4:	4b2d      	ldr	r3, [pc, #180]	@ (800829c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081ea:	4b2c      	ldr	r3, [pc, #176]	@ (800829c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80081f0:	4a29      	ldr	r2, [pc, #164]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081f6:	4b28      	ldr	r3, [pc, #160]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d114      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008202:	f7fc ffbd 	bl	8005180 <HAL_GetTick>
 8008206:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008208:	e00a      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800820a:	f7fc ffb9 	bl	8005180 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008218:	4293      	cmp	r3, r2
 800821a:	d901      	bls.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e035      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008220:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0ee      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008238:	d10d      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800823a:	4b17      	ldr	r3, [pc, #92]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008246:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800824a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800824e:	4912      	ldr	r1, [pc, #72]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008250:	4313      	orrs	r3, r2
 8008252:	608b      	str	r3, [r1, #8]
 8008254:	e005      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008256:	4b10      	ldr	r3, [pc, #64]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	4a0f      	ldr	r2, [pc, #60]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800825c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008260:	6093      	str	r3, [r2, #8]
 8008262:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008264:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800826e:	490a      	ldr	r1, [pc, #40]	@ (8008298 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008270:	4313      	orrs	r3, r2
 8008272:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008286:	4b06      	ldr	r3, [pc, #24]	@ (80082a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008288:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40007000 	.word	0x40007000
 8008298:	40023800 	.word	0x40023800
 800829c:	42470e40 	.word	0x42470e40
 80082a0:	424711e0 	.word	0x424711e0

080082a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e025      	b.n	8008304 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f81d 	bl	800830c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f001 fd0f 	bl	8009d08 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	f001 fd7a 	bl	8009dee <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d101      	bne.n	800833c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008338:	2302      	movs	r3, #2
 800833a:	e018      	b.n	800836e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fdcd 	bl	8009eec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d104      	bne.n	8008364 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2205      	movs	r2, #5
 800835e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8008362:	e003      	b.n	800836c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d101      	bne.n	8008390 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800838c:	2302      	movs	r3, #2
 800838e:	e00e      	b.n	80083ae <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fde0 	bl	8009f64 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e05d      	b.n	8008484 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f87d 	bl	80084dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2202      	movs	r2, #2
 80083e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	ea42 0103 	orr.w	r1, r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	f003 0104 	and.w	r1, r3, #4
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008458:	d104      	bne.n	8008464 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008462:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e01a      	b.n	80084d4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f81a 	bl	80084f0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	4613      	mov	r3, r2
 8008512:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_SPI_Transmit+0x22>
 8008522:	2302      	movs	r3, #2
 8008524:	e140      	b.n	80087a8 <HAL_SPI_Transmit+0x2a4>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800852e:	f7fc fe27 	bl	8005180 <HAL_GetTick>
 8008532:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	d002      	beq.n	800854a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008544:	2302      	movs	r3, #2
 8008546:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008548:	e125      	b.n	8008796 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <HAL_SPI_Transmit+0x52>
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d102      	bne.n	800855c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	77fb      	strb	r3, [r7, #31]
    goto error;
 800855a:	e11c      	b.n	8008796 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2203      	movs	r2, #3
 8008560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	88fa      	ldrh	r2, [r7, #6]
 8008574:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	88fa      	ldrh	r2, [r7, #6]
 800857a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085a2:	d107      	bne.n	80085b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085b2:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085bc:	d10f      	bne.n	80085de <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085dc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d007      	beq.n	80085fc <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008604:	d14b      	bne.n	800869e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_SPI_Transmit+0x110>
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d13e      	bne.n	8008692 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	1c9a      	adds	r2, r3, #2
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008638:	e02b      	b.n	8008692 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d112      	bne.n	800866e <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800866c:	e011      	b.n	8008692 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800866e:	f7fc fd87 	bl	8005180 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d803      	bhi.n	8008686 <HAL_SPI_Transmit+0x182>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d102      	bne.n	800868c <HAL_SPI_Transmit+0x188>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008690:	e081      	b.n	8008796 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ce      	bne.n	800863a <HAL_SPI_Transmit+0x136>
 800869c:	e04c      	b.n	8008738 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_SPI_Transmit+0x1a8>
 80086a6:	8afb      	ldrh	r3, [r7, #22]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d140      	bne.n	800872e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086d2:	e02c      	b.n	800872e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d113      	bne.n	800870a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	330c      	adds	r3, #12
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008708:	e011      	b.n	800872e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800870a:	f7fc fd39 	bl	8005180 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d803      	bhi.n	8008722 <HAL_SPI_Transmit+0x21e>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <HAL_SPI_Transmit+0x224>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800872c:	e033      	b.n	8008796 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008732:	b29b      	uxth	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1cd      	bne.n	80086d4 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008740:	d107      	bne.n	8008752 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008750:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fc94 	bl	8009084 <SPI_EndRxTxTransaction>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2220      	movs	r2, #32
 8008766:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e000      	b.n	8008796 <HAL_SPI_Transmit+0x292>
  }

error:
 8008794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087cc:	d112      	bne.n	80087f4 <HAL_SPI_Receive+0x44>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10e      	bne.n	80087f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2204      	movs	r2, #4
 80087da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4613      	mov	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f95f 	bl	8008aae <HAL_SPI_TransmitReceive>
 80087f0:	4603      	mov	r3, r0
 80087f2:	e158      	b.n	8008aa6 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_SPI_Receive+0x52>
 80087fe:	2302      	movs	r3, #2
 8008800:	e151      	b.n	8008aa6 <HAL_SPI_Receive+0x2f6>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800880a:	f7fc fcb9 	bl	8005180 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	d002      	beq.n	8008822 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800881c:	2302      	movs	r3, #2
 800881e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008820:	e138      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_SPI_Receive+0x7e>
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008832:	e12f      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2204      	movs	r2, #4
 8008838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800887a:	d116      	bne.n	80088aa <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800889a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088b2:	d107      	bne.n	80088c4 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ce:	2b40      	cmp	r3, #64	@ 0x40
 80088d0:	d007      	beq.n	80088e2 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d162      	bne.n	80089b0 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088ea:	e02e      	b.n	800894a <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d115      	bne.n	8008926 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f103 020c 	add.w	r2, r3, #12
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008924:	e011      	b.n	800894a <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008926:	f7fc fc2b 	bl	8005180 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d803      	bhi.n	800893e <HAL_SPI_Receive+0x18e>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d102      	bne.n	8008944 <HAL_SPI_Receive+0x194>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008948:	e0a4      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1cb      	bne.n	80088ec <HAL_SPI_Receive+0x13c>
 8008954:	e031      	b.n	80089ba <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b01      	cmp	r3, #1
 8008962:	d113      	bne.n	800898c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896e:	b292      	uxth	r2, r2
 8008970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800898a:	e011      	b.n	80089b0 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800898c:	f7fc fbf8 	bl	8005180 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d803      	bhi.n	80089a4 <HAL_SPI_Receive+0x1f4>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d102      	bne.n	80089aa <HAL_SPI_Receive+0x1fa>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089ae:	e071      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1cd      	bne.n	8008956 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	d142      	bne.n	8008a4a <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80089d2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2201      	movs	r2, #1
 80089dc:	2101      	movs	r1, #1
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fa81 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	75fb      	strb	r3, [r7, #23]
      goto error;
 80089ee:	e051      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089f8:	d107      	bne.n	8008a0a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	b292      	uxth	r2, r2
 8008a06:	801a      	strh	r2, [r3, #0]
 8008a08:	e008      	b.n	8008a1c <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f103 020c 	add.w	r2, r3, #12
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2201      	movs	r2, #1
 8008a24:	2101      	movs	r1, #1
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fa5d 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a36:	f043 0202 	orr.w	r2, r3, #2
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008a42:	e027      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fab3 	bl	8008fba <SPI_EndRxTransaction>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d10a      	bne.n	8008a84 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a72:	f043 0202 	orr.w	r2, r3, #2
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008a82:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
 8008a90:	e000      	b.n	8008a94 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b08e      	sub	sp, #56	@ 0x38
 8008ab2:	af02      	add	r7, sp, #8
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008abc:	2301      	movs	r3, #1
 8008abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_SPI_TransmitReceive+0x26>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e1f6      	b.n	8008ec2 <HAL_SPI_TransmitReceive+0x414>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008adc:	f7fc fb50 	bl	8005180 <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008af2:	887b      	ldrh	r3, [r7, #2]
 8008af4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008af6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d00f      	beq.n	8008b1e <HAL_SPI_TransmitReceive+0x70>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b04:	d107      	bne.n	8008b16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d103      	bne.n	8008b16 <HAL_SPI_TransmitReceive+0x68>
 8008b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d003      	beq.n	8008b1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b16:	2302      	movs	r3, #2
 8008b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b1c:	e1c7      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x82>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x82>
 8008b2a:	887b      	ldrh	r3, [r7, #2]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008b36:	e1ba      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d003      	beq.n	8008b4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2205      	movs	r2, #5
 8008b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	887a      	ldrh	r2, [r7, #2]
 8008b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	887a      	ldrh	r2, [r7, #2]
 8008b62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	887a      	ldrh	r2, [r7, #2]
 8008b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	887a      	ldrh	r2, [r7, #2]
 8008b74:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b8a:	d10f      	bne.n	8008bac <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008baa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb6:	2b40      	cmp	r3, #64	@ 0x40
 8008bb8:	d007      	beq.n	8008bca <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd2:	f040 808b 	bne.w	8008cec <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <HAL_SPI_TransmitReceive+0x136>
 8008bde:	8b7b      	ldrh	r3, [r7, #26]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d178      	bne.n	8008cd6 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf4:	1c9a      	adds	r2, r3, #2
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c08:	e065      	b.n	8008cd6 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d12d      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x1c6>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d028      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x1c6>
 8008c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d125      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2c:	881a      	ldrh	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c38:	1c9a      	adds	r2, r3, #2
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10c      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x1c6>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c62:	d107      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c72:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d119      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x208>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d014      	beq.n	8008cb6 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	b292      	uxth	r2, r2
 8008c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9e:	1c9a      	adds	r2, r3, #2
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008cb6:	f7fc fa63 	bl	8005180 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d807      	bhi.n	8008cd6 <HAL_SPI_TransmitReceive+0x228>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d003      	beq.n	8008cd6 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008cd4:	e0eb      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d194      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x15c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d18f      	bne.n	8008c0a <HAL_SPI_TransmitReceive+0x15c>
 8008cea:	e08e      	b.n	8008e0a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_SPI_TransmitReceive+0x24c>
 8008cf4:	8b7b      	ldrh	r3, [r7, #26]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d17d      	bne.n	8008df6 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d20:	e069      	b.n	8008df6 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d12e      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x2e0>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d029      	beq.n	8008d8e <HAL_SPI_TransmitReceive+0x2e0>
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d126      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10c      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x2e0>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d7c:	d107      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d8c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d119      	bne.n	8008dd0 <HAL_SPI_TransmitReceive+0x322>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d014      	beq.n	8008dd0 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dd0:	f7fc f9d6 	bl	8005180 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d803      	bhi.n	8008de8 <HAL_SPI_TransmitReceive+0x33a>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de6:	d102      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x340>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008df4:	e05b      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d190      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x274>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d18b      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e12:	d117      	bne.n	8008e44 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f861 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2e:	f043 0202 	orr.w	r2, r3, #2
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008e3c:	e037      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d10d      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e56:	f043 0202 	orr.w	r2, r3, #2
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008e66:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f906 	bl	8009084 <SPI_EndRxTxTransaction>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d006      	beq.n	8008e8c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008e8a:	e010      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	e000      	b.n	8008eae <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008eac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3730      	adds	r7, #48	@ 0x30
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ed8:	b2db      	uxtb	r3, r3
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	603b      	str	r3, [r7, #0]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ef6:	e04c      	b.n	8008f92 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	d048      	beq.n	8008f92 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f00:	f7fc f93e 	bl	8005180 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d902      	bls.n	8008f16 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d13d      	bne.n	8008f92 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f2e:	d111      	bne.n	8008f54 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f38:	d004      	beq.n	8008f44 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f42:	d107      	bne.n	8008f54 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f5c:	d10f      	bne.n	8008f7e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e00f      	b.n	8008fb2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	bf0c      	ite	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	2300      	movne	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d1a3      	bne.n	8008ef8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af02      	add	r7, sp, #8
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fce:	d111      	bne.n	8008ff4 <SPI_EndRxTransaction+0x3a>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fd8:	d004      	beq.n	8008fe4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fe2:	d107      	bne.n	8008ff4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ff2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ffc:	d12a      	bne.n	8009054 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009006:	d012      	beq.n	800902e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	2180      	movs	r1, #128	@ 0x80
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff ff67 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d02d      	beq.n	800907a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009022:	f043 0220 	orr.w	r2, r3, #32
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e026      	b.n	800907c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2200      	movs	r2, #0
 8009036:	2101      	movs	r1, #1
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7ff ff54 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009048:	f043 0220 	orr.w	r2, r3, #32
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e013      	b.n	800907c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	2101      	movs	r1, #1
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ff41 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906e:	f043 0220 	orr.w	r2, r3, #32
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e000      	b.n	800907c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009090:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <SPI_EndRxTxTransaction+0x7c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1b      	ldr	r2, [pc, #108]	@ (8009104 <SPI_EndRxTxTransaction+0x80>)
 8009096:	fba2 2303 	umull	r2, r3, r2, r3
 800909a:	0d5b      	lsrs	r3, r3, #21
 800909c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80090a0:	fb02 f303 	mul.w	r3, r2, r3
 80090a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090ae:	d112      	bne.n	80090d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2200      	movs	r2, #0
 80090b8:	2180      	movs	r1, #128	@ 0x80
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff ff13 	bl	8008ee6 <SPI_WaitFlagStateUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d016      	beq.n	80090f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ca:	f043 0220 	orr.w	r2, r3, #32
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e00f      	b.n	80090f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	3b01      	subs	r3, #1
 80090e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ec:	2b80      	cmp	r3, #128	@ 0x80
 80090ee:	d0f2      	beq.n	80090d6 <SPI_EndRxTxTransaction+0x52>
 80090f0:	e000      	b.n	80090f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80090f2:	bf00      	nop
  }

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000060 	.word	0x20000060
 8009104:	165e9f81 	.word	0x165e9f81

08009108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e03f      	b.n	800919a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7f9 fe12 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2224      	movs	r2, #36	@ 0x24
 8009138:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800914a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f90b 	bl	8009368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b088      	sub	sp, #32
 80091a6:	af02      	add	r7, sp, #8
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b20      	cmp	r3, #32
 80091c0:	f040 8083 	bne.w	80092ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_UART_Transmit+0x2e>
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e07b      	b.n	80092cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Transmit+0x40>
 80091de:	2302      	movs	r3, #2
 80091e0:	e074      	b.n	80092cc <HAL_UART_Transmit+0x12a>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2221      	movs	r2, #33	@ 0x21
 80091f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80091f8:	f7fb ffc2 	bl	8005180 <HAL_GetTick>
 80091fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8009212:	e042      	b.n	800929a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800922a:	d122      	bne.n	8009272 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	2180      	movs	r1, #128	@ 0x80
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 f84c 	bl	80092d4 <UART_WaitOnFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e042      	b.n	80092cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009258:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3302      	adds	r3, #2
 8009266:	60bb      	str	r3, [r7, #8]
 8009268:	e017      	b.n	800929a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3301      	adds	r3, #1
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	e013      	b.n	800929a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	@ 0x80
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f829 	bl	80092d4 <UART_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e01f      	b.n	80092cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	60ba      	str	r2, [r7, #8]
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1b7      	bne.n	8009214 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2140      	movs	r1, #64	@ 0x40
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f810 	bl	80092d4 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e006      	b.n	80092cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80092ca:	2302      	movs	r3, #2
  }
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e4:	e02c      	b.n	8009340 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ec:	d028      	beq.n	8009340 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <UART_WaitOnFlagUntilTimeout+0x30>
 80092f4:	f7fb ff44 	bl	8005180 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	429a      	cmp	r2, r3
 8009302:	d21d      	bcs.n	8009340 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8009312:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	695a      	ldr	r2, [r3, #20]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0201 	bic.w	r2, r2, #1
 8009322:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e00f      	b.n	8009360 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	4013      	ands	r3, r2
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	429a      	cmp	r2, r3
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	461a      	mov	r2, r3
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	429a      	cmp	r2, r3
 800935c:	d0c3      	beq.n	80092e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800936c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8009370:	af00      	add	r7, sp, #0
 8009372:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009376:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009382:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009386:	68d9      	ldr	r1, [r3, #12]
 8009388:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	ea40 0301 	orr.w	r3, r0, r1
 8009392:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009394:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	431a      	orrs	r2, r3
 80093a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	431a      	orrs	r2, r3
 80093aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80093b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80093c2:	f021 010c 	bic.w	r1, r1, #12
 80093c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80093d0:	430b      	orrs	r3, r1
 80093d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80093e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093e4:	6999      	ldr	r1, [r3, #24]
 80093e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	ea40 0301 	orr.w	r3, r0, r1
 80093f0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093fc:	f040 824a 	bne.w	8009894 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009400:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b96      	ldr	r3, [pc, #600]	@ (8009660 <UART_SetConfig+0x2f8>)
 8009408:	429a      	cmp	r2, r3
 800940a:	d006      	beq.n	800941a <UART_SetConfig+0xb2>
 800940c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b94      	ldr	r3, [pc, #592]	@ (8009664 <UART_SetConfig+0x2fc>)
 8009414:	429a      	cmp	r2, r3
 8009416:	f040 8129 	bne.w	800966c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800941a:	f7fe fd6f 	bl	8007efc <HAL_RCC_GetPCLK2Freq>
 800941e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009426:	2200      	movs	r2, #0
 8009428:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800942c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8009430:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8009434:	4622      	mov	r2, r4
 8009436:	462b      	mov	r3, r5
 8009438:	1891      	adds	r1, r2, r2
 800943a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800943e:	415b      	adcs	r3, r3
 8009440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009444:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8009448:	4621      	mov	r1, r4
 800944a:	1851      	adds	r1, r2, r1
 800944c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8009450:	4629      	mov	r1, r5
 8009452:	414b      	adcs	r3, r1
 8009454:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8009464:	4649      	mov	r1, r9
 8009466:	00cb      	lsls	r3, r1, #3
 8009468:	4641      	mov	r1, r8
 800946a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800946e:	4641      	mov	r1, r8
 8009470:	00ca      	lsls	r2, r1, #3
 8009472:	4610      	mov	r0, r2
 8009474:	4619      	mov	r1, r3
 8009476:	4603      	mov	r3, r0
 8009478:	4622      	mov	r2, r4
 800947a:	189b      	adds	r3, r3, r2
 800947c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8009480:	462b      	mov	r3, r5
 8009482:	460a      	mov	r2, r1
 8009484:	eb42 0303 	adc.w	r3, r2, r3
 8009488:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800948c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8009498:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800949c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80094a0:	460b      	mov	r3, r1
 80094a2:	18db      	adds	r3, r3, r3
 80094a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094a8:	4613      	mov	r3, r2
 80094aa:	eb42 0303 	adc.w	r3, r2, r3
 80094ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094b2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80094b6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80094ba:	f7f7 fbf5 	bl	8000ca8 <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4b69      	ldr	r3, [pc, #420]	@ (8009668 <UART_SetConfig+0x300>)
 80094c4:	fba3 2302 	umull	r2, r3, r3, r2
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	011c      	lsls	r4, r3, #4
 80094cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80094d6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80094da:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80094de:	4642      	mov	r2, r8
 80094e0:	464b      	mov	r3, r9
 80094e2:	1891      	adds	r1, r2, r2
 80094e4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80094e8:	415b      	adcs	r3, r3
 80094ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80094f2:	4641      	mov	r1, r8
 80094f4:	1851      	adds	r1, r2, r1
 80094f6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80094fa:	4649      	mov	r1, r9
 80094fc:	414b      	adcs	r3, r1
 80094fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800950e:	4659      	mov	r1, fp
 8009510:	00cb      	lsls	r3, r1, #3
 8009512:	4651      	mov	r1, sl
 8009514:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009518:	4651      	mov	r1, sl
 800951a:	00ca      	lsls	r2, r1, #3
 800951c:	4610      	mov	r0, r2
 800951e:	4619      	mov	r1, r3
 8009520:	4603      	mov	r3, r0
 8009522:	4642      	mov	r2, r8
 8009524:	189b      	adds	r3, r3, r2
 8009526:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800952a:	464b      	mov	r3, r9
 800952c:	460a      	mov	r2, r1
 800952e:	eb42 0303 	adc.w	r3, r2, r3
 8009532:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8009536:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8009542:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8009546:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800954a:	460b      	mov	r3, r1
 800954c:	18db      	adds	r3, r3, r3
 800954e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009552:	4613      	mov	r3, r2
 8009554:	eb42 0303 	adc.w	r3, r2, r3
 8009558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800955c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8009560:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8009564:	f7f7 fba0 	bl	8000ca8 <__aeabi_uldivmod>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4611      	mov	r1, r2
 800956e:	4b3e      	ldr	r3, [pc, #248]	@ (8009668 <UART_SetConfig+0x300>)
 8009570:	fba3 2301 	umull	r2, r3, r3, r1
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	2264      	movs	r2, #100	@ 0x64
 8009578:	fb02 f303 	mul.w	r3, r2, r3
 800957c:	1acb      	subs	r3, r1, r3
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009584:	4b38      	ldr	r3, [pc, #224]	@ (8009668 <UART_SetConfig+0x300>)
 8009586:	fba3 2302 	umull	r2, r3, r3, r2
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009592:	441c      	add	r4, r3
 8009594:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009598:	2200      	movs	r2, #0
 800959a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800959e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80095a2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80095a6:	4642      	mov	r2, r8
 80095a8:	464b      	mov	r3, r9
 80095aa:	1891      	adds	r1, r2, r2
 80095ac:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80095b0:	415b      	adcs	r3, r3
 80095b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80095ba:	4641      	mov	r1, r8
 80095bc:	1851      	adds	r1, r2, r1
 80095be:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80095c2:	4649      	mov	r1, r9
 80095c4:	414b      	adcs	r3, r1
 80095c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	f04f 0300 	mov.w	r3, #0
 80095d2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80095d6:	4659      	mov	r1, fp
 80095d8:	00cb      	lsls	r3, r1, #3
 80095da:	4651      	mov	r1, sl
 80095dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e0:	4651      	mov	r1, sl
 80095e2:	00ca      	lsls	r2, r1, #3
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	4603      	mov	r3, r0
 80095ea:	4642      	mov	r2, r8
 80095ec:	189b      	adds	r3, r3, r2
 80095ee:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80095f2:	464b      	mov	r3, r9
 80095f4:	460a      	mov	r2, r1
 80095f6:	eb42 0303 	adc.w	r3, r2, r3
 80095fa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80095fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800960a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800960e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8009612:	460b      	mov	r3, r1
 8009614:	18db      	adds	r3, r3, r3
 8009616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800961a:	4613      	mov	r3, r2
 800961c:	eb42 0303 	adc.w	r3, r2, r3
 8009620:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009624:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009628:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 800962c:	f7f7 fb3c 	bl	8000ca8 <__aeabi_uldivmod>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <UART_SetConfig+0x300>)
 8009636:	fba3 1302 	umull	r1, r3, r3, r2
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2164      	movs	r1, #100	@ 0x64
 800963e:	fb01 f303 	mul.w	r3, r1, r3
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	3332      	adds	r3, #50	@ 0x32
 8009648:	4a07      	ldr	r2, [pc, #28]	@ (8009668 <UART_SetConfig+0x300>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f003 0207 	and.w	r2, r3, #7
 8009654:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4422      	add	r2, r4
 800965c:	609a      	str	r2, [r3, #8]
 800965e:	e34a      	b.n	8009cf6 <UART_SetConfig+0x98e>
 8009660:	40011000 	.word	0x40011000
 8009664:	40011400 	.word	0x40011400
 8009668:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800966c:	f7fe fc32 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 8009670:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009674:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009678:	2200      	movs	r2, #0
 800967a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800967e:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8009682:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	1891      	adds	r1, r2, r2
 800968c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009690:	415b      	adcs	r3, r3
 8009692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009696:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800969a:	4621      	mov	r1, r4
 800969c:	eb12 0a01 	adds.w	sl, r2, r1
 80096a0:	4629      	mov	r1, r5
 80096a2:	eb43 0b01 	adc.w	fp, r3, r1
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	f04f 0300 	mov.w	r3, #0
 80096ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096ba:	4692      	mov	sl, r2
 80096bc:	469b      	mov	fp, r3
 80096be:	4623      	mov	r3, r4
 80096c0:	eb1a 0303 	adds.w	r3, sl, r3
 80096c4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80096c8:	462b      	mov	r3, r5
 80096ca:	eb4b 0303 	adc.w	r3, fp, r3
 80096ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80096d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80096de:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80096e2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80096e6:	460b      	mov	r3, r1
 80096e8:	18db      	adds	r3, r3, r3
 80096ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096ee:	4613      	mov	r3, r2
 80096f0:	eb42 0303 	adc.w	r3, r2, r3
 80096f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096f8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80096fc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8009700:	f7f7 fad2 	bl	8000ca8 <__aeabi_uldivmod>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4b61      	ldr	r3, [pc, #388]	@ (8009890 <UART_SetConfig+0x528>)
 800970a:	fba3 2302 	umull	r2, r3, r3, r2
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	011c      	lsls	r4, r3, #4
 8009712:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800971c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8009720:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	1891      	adds	r1, r2, r2
 800972a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800972c:	415b      	adcs	r3, r3
 800972e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009730:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009734:	4641      	mov	r1, r8
 8009736:	1851      	adds	r1, r2, r1
 8009738:	6739      	str	r1, [r7, #112]	@ 0x70
 800973a:	4649      	mov	r1, r9
 800973c:	414b      	adcs	r3, r1
 800973e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 800974c:	4659      	mov	r1, fp
 800974e:	00cb      	lsls	r3, r1, #3
 8009750:	4651      	mov	r1, sl
 8009752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009756:	4651      	mov	r1, sl
 8009758:	00ca      	lsls	r2, r1, #3
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	4603      	mov	r3, r0
 8009760:	4642      	mov	r2, r8
 8009762:	189b      	adds	r3, r3, r2
 8009764:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8009768:	464b      	mov	r3, r9
 800976a:	460a      	mov	r2, r1
 800976c:	eb42 0303 	adc.w	r3, r2, r3
 8009770:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8009774:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8009780:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8009784:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8009788:	460b      	mov	r3, r1
 800978a:	18db      	adds	r3, r3, r3
 800978c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800978e:	4613      	mov	r3, r2
 8009790:	eb42 0303 	adc.w	r3, r2, r3
 8009794:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009796:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800979a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800979e:	f7f7 fa83 	bl	8000ca8 <__aeabi_uldivmod>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	4b39      	ldr	r3, [pc, #228]	@ (8009890 <UART_SetConfig+0x528>)
 80097aa:	fba3 2301 	umull	r2, r3, r3, r1
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	2264      	movs	r2, #100	@ 0x64
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	1acb      	subs	r3, r1, r3
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80097be:	4b34      	ldr	r3, [pc, #208]	@ (8009890 <UART_SetConfig+0x528>)
 80097c0:	fba3 2302 	umull	r2, r3, r3, r2
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80097cc:	441c      	add	r4, r3
 80097ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80097d8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80097dc:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80097e0:	4642      	mov	r2, r8
 80097e2:	464b      	mov	r3, r9
 80097e4:	1891      	adds	r1, r2, r2
 80097e6:	6639      	str	r1, [r7, #96]	@ 0x60
 80097e8:	415b      	adcs	r3, r3
 80097ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80097ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80097f0:	4641      	mov	r1, r8
 80097f2:	1851      	adds	r1, r2, r1
 80097f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80097f6:	4649      	mov	r1, r9
 80097f8:	414b      	adcs	r3, r1
 80097fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009808:	4659      	mov	r1, fp
 800980a:	00cb      	lsls	r3, r1, #3
 800980c:	4651      	mov	r1, sl
 800980e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009812:	4651      	mov	r1, sl
 8009814:	00ca      	lsls	r2, r1, #3
 8009816:	4610      	mov	r0, r2
 8009818:	4619      	mov	r1, r3
 800981a:	4603      	mov	r3, r0
 800981c:	4642      	mov	r2, r8
 800981e:	189b      	adds	r3, r3, r2
 8009820:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8009824:	464b      	mov	r3, r9
 8009826:	460a      	mov	r2, r1
 8009828:	eb42 0303 	adc.w	r3, r2, r3
 800982c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8009830:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800983c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8009840:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8009844:	460b      	mov	r3, r1
 8009846:	18db      	adds	r3, r3, r3
 8009848:	653b      	str	r3, [r7, #80]	@ 0x50
 800984a:	4613      	mov	r3, r2
 800984c:	eb42 0303 	adc.w	r3, r2, r3
 8009850:	657b      	str	r3, [r7, #84]	@ 0x54
 8009852:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009856:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800985a:	f7f7 fa25 	bl	8000ca8 <__aeabi_uldivmod>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <UART_SetConfig+0x528>)
 8009864:	fba3 1302 	umull	r1, r3, r3, r2
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	2164      	movs	r1, #100	@ 0x64
 800986c:	fb01 f303 	mul.w	r3, r1, r3
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	3332      	adds	r3, #50	@ 0x32
 8009876:	4a06      	ldr	r2, [pc, #24]	@ (8009890 <UART_SetConfig+0x528>)
 8009878:	fba2 2303 	umull	r2, r3, r2, r3
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	f003 0207 	and.w	r2, r3, #7
 8009882:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4422      	add	r2, r4
 800988a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800988c:	e233      	b.n	8009cf6 <UART_SetConfig+0x98e>
 800988e:	bf00      	nop
 8009890:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009894:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	4b8d      	ldr	r3, [pc, #564]	@ (8009ad0 <UART_SetConfig+0x768>)
 800989c:	429a      	cmp	r2, r3
 800989e:	d006      	beq.n	80098ae <UART_SetConfig+0x546>
 80098a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b8b      	ldr	r3, [pc, #556]	@ (8009ad4 <UART_SetConfig+0x76c>)
 80098a8:	429a      	cmp	r2, r3
 80098aa:	f040 8117 	bne.w	8009adc <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80098ae:	f7fe fb25 	bl	8007efc <HAL_RCC_GetPCLK2Freq>
 80098b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80098c0:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80098c4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80098c8:	4622      	mov	r2, r4
 80098ca:	462b      	mov	r3, r5
 80098cc:	1891      	adds	r1, r2, r2
 80098ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098d0:	415b      	adcs	r3, r3
 80098d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098d8:	4621      	mov	r1, r4
 80098da:	eb12 0801 	adds.w	r8, r2, r1
 80098de:	4629      	mov	r1, r5
 80098e0:	eb43 0901 	adc.w	r9, r3, r1
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098f8:	4690      	mov	r8, r2
 80098fa:	4699      	mov	r9, r3
 80098fc:	4623      	mov	r3, r4
 80098fe:	eb18 0303 	adds.w	r3, r8, r3
 8009902:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009906:	462b      	mov	r3, r5
 8009908:	eb49 0303 	adc.w	r3, r9, r3
 800990c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8009910:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800991c:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8009920:	f04f 0200 	mov.w	r2, #0
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800992c:	4629      	mov	r1, r5
 800992e:	008b      	lsls	r3, r1, #2
 8009930:	4621      	mov	r1, r4
 8009932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009936:	4621      	mov	r1, r4
 8009938:	008a      	lsls	r2, r1, #2
 800993a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800993e:	f7f7 f9b3 	bl	8000ca8 <__aeabi_uldivmod>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4b64      	ldr	r3, [pc, #400]	@ (8009ad8 <UART_SetConfig+0x770>)
 8009948:	fba3 2302 	umull	r2, r3, r3, r2
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	011c      	lsls	r4, r3, #4
 8009950:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009954:	2200      	movs	r2, #0
 8009956:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800995a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800995e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8009962:	4642      	mov	r2, r8
 8009964:	464b      	mov	r3, r9
 8009966:	1891      	adds	r1, r2, r2
 8009968:	6439      	str	r1, [r7, #64]	@ 0x40
 800996a:	415b      	adcs	r3, r3
 800996c:	647b      	str	r3, [r7, #68]	@ 0x44
 800996e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009972:	4641      	mov	r1, r8
 8009974:	1851      	adds	r1, r2, r1
 8009976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009978:	4649      	mov	r1, r9
 800997a:	414b      	adcs	r3, r1
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800998a:	4659      	mov	r1, fp
 800998c:	00cb      	lsls	r3, r1, #3
 800998e:	4651      	mov	r1, sl
 8009990:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009994:	4651      	mov	r1, sl
 8009996:	00ca      	lsls	r2, r1, #3
 8009998:	4610      	mov	r0, r2
 800999a:	4619      	mov	r1, r3
 800999c:	4603      	mov	r3, r0
 800999e:	4642      	mov	r2, r8
 80099a0:	189b      	adds	r3, r3, r2
 80099a2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80099a6:	464b      	mov	r3, r9
 80099a8:	460a      	mov	r2, r1
 80099aa:	eb42 0303 	adc.w	r3, r2, r3
 80099ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80099b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80099be:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80099c2:	f04f 0200 	mov.w	r2, #0
 80099c6:	f04f 0300 	mov.w	r3, #0
 80099ca:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80099ce:	4649      	mov	r1, r9
 80099d0:	008b      	lsls	r3, r1, #2
 80099d2:	4641      	mov	r1, r8
 80099d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099d8:	4641      	mov	r1, r8
 80099da:	008a      	lsls	r2, r1, #2
 80099dc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80099e0:	f7f7 f962 	bl	8000ca8 <__aeabi_uldivmod>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	4b3b      	ldr	r3, [pc, #236]	@ (8009ad8 <UART_SetConfig+0x770>)
 80099ec:	fba3 2301 	umull	r2, r3, r3, r1
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	2264      	movs	r2, #100	@ 0x64
 80099f4:	fb02 f303 	mul.w	r3, r2, r3
 80099f8:	1acb      	subs	r3, r1, r3
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	3332      	adds	r3, #50	@ 0x32
 80099fe:	4a36      	ldr	r2, [pc, #216]	@ (8009ad8 <UART_SetConfig+0x770>)
 8009a00:	fba2 2303 	umull	r2, r3, r2, r3
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a0a:	441c      	add	r4, r3
 8009a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009a16:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8009a1a:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6339      	str	r1, [r7, #48]	@ 0x30
 8009a26:	415b      	adcs	r3, r3
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009a2e:	4641      	mov	r1, r8
 8009a30:	1851      	adds	r1, r2, r1
 8009a32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009a34:	4649      	mov	r1, r9
 8009a36:	414b      	adcs	r3, r1
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a3a:	f04f 0200 	mov.w	r2, #0
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8009a46:	4659      	mov	r1, fp
 8009a48:	00cb      	lsls	r3, r1, #3
 8009a4a:	4651      	mov	r1, sl
 8009a4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a50:	4651      	mov	r1, sl
 8009a52:	00ca      	lsls	r2, r1, #3
 8009a54:	4610      	mov	r0, r2
 8009a56:	4619      	mov	r1, r3
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4642      	mov	r2, r8
 8009a5c:	189b      	adds	r3, r3, r2
 8009a5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8009a62:	464b      	mov	r3, r9
 8009a64:	460a      	mov	r2, r1
 8009a66:	eb42 0303 	adc.w	r3, r2, r3
 8009a6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8009a6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009a7a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	008b      	lsls	r3, r1, #2
 8009a8e:	4641      	mov	r1, r8
 8009a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a94:	4641      	mov	r1, r8
 8009a96:	008a      	lsls	r2, r1, #2
 8009a98:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009a9c:	f7f7 f904 	bl	8000ca8 <__aeabi_uldivmod>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <UART_SetConfig+0x770>)
 8009aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	2164      	movs	r1, #100	@ 0x64
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	3332      	adds	r3, #50	@ 0x32
 8009ab8:	4a07      	ldr	r2, [pc, #28]	@ (8009ad8 <UART_SetConfig+0x770>)
 8009aba:	fba2 2303 	umull	r2, r3, r2, r3
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	f003 020f 	and.w	r2, r3, #15
 8009ac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4422      	add	r2, r4
 8009acc:	609a      	str	r2, [r3, #8]
 8009ace:	e112      	b.n	8009cf6 <UART_SetConfig+0x98e>
 8009ad0:	40011000 	.word	0x40011000
 8009ad4:	40011400 	.word	0x40011400
 8009ad8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009adc:	f7fe f9fa 	bl	8007ed4 <HAL_RCC_GetPCLK1Freq>
 8009ae0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ae4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009aee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009af2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8009af6:	4642      	mov	r2, r8
 8009af8:	464b      	mov	r3, r9
 8009afa:	1891      	adds	r1, r2, r2
 8009afc:	6239      	str	r1, [r7, #32]
 8009afe:	415b      	adcs	r3, r3
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b06:	4641      	mov	r1, r8
 8009b08:	1854      	adds	r4, r2, r1
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	eb43 0501 	adc.w	r5, r3, r1
 8009b10:	f04f 0200 	mov.w	r2, #0
 8009b14:	f04f 0300 	mov.w	r3, #0
 8009b18:	00eb      	lsls	r3, r5, #3
 8009b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b1e:	00e2      	lsls	r2, r4, #3
 8009b20:	4614      	mov	r4, r2
 8009b22:	461d      	mov	r5, r3
 8009b24:	4643      	mov	r3, r8
 8009b26:	18e3      	adds	r3, r4, r3
 8009b28:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	eb45 0303 	adc.w	r3, r5, r3
 8009b32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8009b36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009b42:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	f04f 0300 	mov.w	r3, #0
 8009b4e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009b52:	4629      	mov	r1, r5
 8009b54:	008b      	lsls	r3, r1, #2
 8009b56:	4621      	mov	r1, r4
 8009b58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	008a      	lsls	r2, r1, #2
 8009b60:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8009b64:	f7f7 f8a0 	bl	8000ca8 <__aeabi_uldivmod>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4b65      	ldr	r3, [pc, #404]	@ (8009d04 <UART_SetConfig+0x99c>)
 8009b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	011c      	lsls	r4, r3, #4
 8009b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b80:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009b84:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	1891      	adds	r1, r2, r2
 8009b8e:	61b9      	str	r1, [r7, #24]
 8009b90:	415b      	adcs	r3, r3
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b98:	4641      	mov	r1, r8
 8009b9a:	1851      	adds	r1, r2, r1
 8009b9c:	6139      	str	r1, [r7, #16]
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	414b      	adcs	r3, r1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bb0:	4659      	mov	r1, fp
 8009bb2:	00cb      	lsls	r3, r1, #3
 8009bb4:	4651      	mov	r1, sl
 8009bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bba:	4651      	mov	r1, sl
 8009bbc:	00ca      	lsls	r2, r1, #3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	189b      	adds	r3, r3, r2
 8009bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	460a      	mov	r2, r1
 8009bd0:	eb42 0303 	adc.w	r3, r2, r3
 8009bd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009bd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009be4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	008b      	lsls	r3, r1, #2
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bfe:	4641      	mov	r1, r8
 8009c00:	008a      	lsls	r2, r1, #2
 8009c02:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009c06:	f7f7 f84f 	bl	8000ca8 <__aeabi_uldivmod>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4b3c      	ldr	r3, [pc, #240]	@ (8009d04 <UART_SetConfig+0x99c>)
 8009c12:	fba3 2301 	umull	r2, r3, r3, r1
 8009c16:	095b      	lsrs	r3, r3, #5
 8009c18:	2264      	movs	r2, #100	@ 0x64
 8009c1a:	fb02 f303 	mul.w	r3, r2, r3
 8009c1e:	1acb      	subs	r3, r1, r3
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	3332      	adds	r3, #50	@ 0x32
 8009c24:	4a37      	ldr	r2, [pc, #220]	@ (8009d04 <UART_SetConfig+0x99c>)
 8009c26:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2a:	095b      	lsrs	r3, r3, #5
 8009c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c30:	441c      	add	r4, r3
 8009c32:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c3c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c40:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	1891      	adds	r1, r2, r2
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	415b      	adcs	r3, r3
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c54:	4641      	mov	r1, r8
 8009c56:	1851      	adds	r1, r2, r1
 8009c58:	6039      	str	r1, [r7, #0]
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	414b      	adcs	r3, r1
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	f04f 0300 	mov.w	r3, #0
 8009c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	00cb      	lsls	r3, r1, #3
 8009c70:	4651      	mov	r1, sl
 8009c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c76:	4651      	mov	r1, sl
 8009c78:	00ca      	lsls	r2, r1, #3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4642      	mov	r2, r8
 8009c82:	189b      	adds	r3, r3, r2
 8009c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c88:	464b      	mov	r3, r9
 8009c8a:	460a      	mov	r2, r1
 8009c8c:	eb42 0303 	adc.w	r3, r2, r3
 8009c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ca0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	008b      	lsls	r3, r1, #2
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cba:	4641      	mov	r1, r8
 8009cbc:	008a      	lsls	r2, r1, #2
 8009cbe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009cc2:	f7f6 fff1 	bl	8000ca8 <__aeabi_uldivmod>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4b0e      	ldr	r3, [pc, #56]	@ (8009d04 <UART_SetConfig+0x99c>)
 8009ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	2164      	movs	r1, #100	@ 0x64
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	3332      	adds	r3, #50	@ 0x32
 8009cde:	4a09      	ldr	r2, [pc, #36]	@ (8009d04 <UART_SetConfig+0x99c>)
 8009ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	f003 020f 	and.w	r2, r3, #15
 8009cea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4422      	add	r2, r4
 8009cf2:	609a      	str	r2, [r3, #8]
}
 8009cf4:	e7ff      	b.n	8009cf6 <UART_SetConfig+0x98e>
 8009cf6:	bf00      	nop
 8009cf8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d02:	bf00      	nop
 8009d04:	51eb851f 	.word	0x51eb851f

08009d08 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d029      	beq.n	8009d76 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009d2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d32:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d3c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009d42:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009d48:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009d4e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009d54:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009d5a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009d60:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 8009d66:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e034      	b.n	8009de0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009d82:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d8c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8009d92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009da6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009daa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009db4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009dba:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009dc0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009dc6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009dcc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d02e      	beq.n	8009e66 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009e14:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009e24:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009e2e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009e38:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e42:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009e4c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009e56:	4313      	orrs	r3, r2
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	609a      	str	r2, [r3, #8]
 8009e64:	e03b      	b.n	8009ede <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e76:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009e9c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009eac:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009eb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009ec0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009f08:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009f12:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009f24:	f7fb f92c 	bl	8005180 <HAL_GetTick>
 8009f28:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009f2a:	e010      	b.n	8009f4e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f32:	d00c      	beq.n	8009f4e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <FMC_SDRAM_SendCommand+0x5e>
 8009f3a:	f7fb f921 	bl	8005180 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d201      	bcs.n	8009f4e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e006      	b.n	8009f5c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	d0e8      	beq.n	8009f2c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695a      	ldr	r2, [r3, #20]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <__cvt>:
 8009f8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8e:	ec57 6b10 	vmov	r6, r7, d0
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	460c      	mov	r4, r1
 8009f96:	4619      	mov	r1, r3
 8009f98:	463b      	mov	r3, r7
 8009f9a:	bfbb      	ittet	lt
 8009f9c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009fa0:	461f      	movlt	r7, r3
 8009fa2:	2300      	movge	r3, #0
 8009fa4:	232d      	movlt	r3, #45	@ 0x2d
 8009fa6:	700b      	strb	r3, [r1, #0]
 8009fa8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009faa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009fae:	4691      	mov	r9, r2
 8009fb0:	f023 0820 	bic.w	r8, r3, #32
 8009fb4:	bfbc      	itt	lt
 8009fb6:	4632      	movlt	r2, r6
 8009fb8:	4616      	movlt	r6, r2
 8009fba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fbe:	d005      	beq.n	8009fcc <__cvt+0x42>
 8009fc0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009fc4:	d100      	bne.n	8009fc8 <__cvt+0x3e>
 8009fc6:	3401      	adds	r4, #1
 8009fc8:	2102      	movs	r1, #2
 8009fca:	e000      	b.n	8009fce <__cvt+0x44>
 8009fcc:	2103      	movs	r1, #3
 8009fce:	ab03      	add	r3, sp, #12
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	ab02      	add	r3, sp, #8
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	ec47 6b10 	vmov	d0, r6, r7
 8009fda:	4653      	mov	r3, sl
 8009fdc:	4622      	mov	r2, r4
 8009fde:	f001 f937 	bl	800b250 <_dtoa_r>
 8009fe2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	d119      	bne.n	800a01e <__cvt+0x94>
 8009fea:	f019 0f01 	tst.w	r9, #1
 8009fee:	d00e      	beq.n	800a00e <__cvt+0x84>
 8009ff0:	eb00 0904 	add.w	r9, r0, r4
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 800a000:	b108      	cbz	r0, 800a006 <__cvt+0x7c>
 800a002:	f8cd 900c 	str.w	r9, [sp, #12]
 800a006:	2230      	movs	r2, #48	@ 0x30
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	454b      	cmp	r3, r9
 800a00c:	d31e      	bcc.n	800a04c <__cvt+0xc2>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a012:	1b5b      	subs	r3, r3, r5
 800a014:	4628      	mov	r0, r5
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	b004      	add	sp, #16
 800a01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a022:	eb00 0904 	add.w	r9, r0, r4
 800a026:	d1e5      	bne.n	8009ff4 <__cvt+0x6a>
 800a028:	7803      	ldrb	r3, [r0, #0]
 800a02a:	2b30      	cmp	r3, #48	@ 0x30
 800a02c:	d10a      	bne.n	800a044 <__cvt+0xba>
 800a02e:	2200      	movs	r2, #0
 800a030:	2300      	movs	r3, #0
 800a032:	4630      	mov	r0, r6
 800a034:	4639      	mov	r1, r7
 800a036:	f7f6 fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 800a03a:	b918      	cbnz	r0, 800a044 <__cvt+0xba>
 800a03c:	f1c4 0401 	rsb	r4, r4, #1
 800a040:	f8ca 4000 	str.w	r4, [sl]
 800a044:	f8da 3000 	ldr.w	r3, [sl]
 800a048:	4499      	add	r9, r3
 800a04a:	e7d3      	b.n	8009ff4 <__cvt+0x6a>
 800a04c:	1c59      	adds	r1, r3, #1
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	701a      	strb	r2, [r3, #0]
 800a052:	e7d9      	b.n	800a008 <__cvt+0x7e>

0800a054 <__exponent>:
 800a054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a056:	2900      	cmp	r1, #0
 800a058:	bfba      	itte	lt
 800a05a:	4249      	neglt	r1, r1
 800a05c:	232d      	movlt	r3, #45	@ 0x2d
 800a05e:	232b      	movge	r3, #43	@ 0x2b
 800a060:	2909      	cmp	r1, #9
 800a062:	7002      	strb	r2, [r0, #0]
 800a064:	7043      	strb	r3, [r0, #1]
 800a066:	dd29      	ble.n	800a0bc <__exponent+0x68>
 800a068:	f10d 0307 	add.w	r3, sp, #7
 800a06c:	461d      	mov	r5, r3
 800a06e:	270a      	movs	r7, #10
 800a070:	461a      	mov	r2, r3
 800a072:	fbb1 f6f7 	udiv	r6, r1, r7
 800a076:	fb07 1416 	mls	r4, r7, r6, r1
 800a07a:	3430      	adds	r4, #48	@ 0x30
 800a07c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a080:	460c      	mov	r4, r1
 800a082:	2c63      	cmp	r4, #99	@ 0x63
 800a084:	f103 33ff 	add.w	r3, r3, #4294967295
 800a088:	4631      	mov	r1, r6
 800a08a:	dcf1      	bgt.n	800a070 <__exponent+0x1c>
 800a08c:	3130      	adds	r1, #48	@ 0x30
 800a08e:	1e94      	subs	r4, r2, #2
 800a090:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a094:	1c41      	adds	r1, r0, #1
 800a096:	4623      	mov	r3, r4
 800a098:	42ab      	cmp	r3, r5
 800a09a:	d30a      	bcc.n	800a0b2 <__exponent+0x5e>
 800a09c:	f10d 0309 	add.w	r3, sp, #9
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	42ac      	cmp	r4, r5
 800a0a4:	bf88      	it	hi
 800a0a6:	2300      	movhi	r3, #0
 800a0a8:	3302      	adds	r3, #2
 800a0aa:	4403      	add	r3, r0
 800a0ac:	1a18      	subs	r0, r3, r0
 800a0ae:	b003      	add	sp, #12
 800a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0ba:	e7ed      	b.n	800a098 <__exponent+0x44>
 800a0bc:	2330      	movs	r3, #48	@ 0x30
 800a0be:	3130      	adds	r1, #48	@ 0x30
 800a0c0:	7083      	strb	r3, [r0, #2]
 800a0c2:	70c1      	strb	r1, [r0, #3]
 800a0c4:	1d03      	adds	r3, r0, #4
 800a0c6:	e7f1      	b.n	800a0ac <__exponent+0x58>

0800a0c8 <_printf_float>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	b08d      	sub	sp, #52	@ 0x34
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0d4:	4616      	mov	r6, r2
 800a0d6:	461f      	mov	r7, r3
 800a0d8:	4605      	mov	r5, r0
 800a0da:	f000 ffb7 	bl	800b04c <_localeconv_r>
 800a0de:	6803      	ldr	r3, [r0, #0]
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 f8d4 	bl	8000290 <strlen>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a0f0:	9005      	str	r0, [sp, #20]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	f103 0208 	add.w	r2, r3, #8
 800a0fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a100:	f8d4 b000 	ldr.w	fp, [r4]
 800a104:	f8c8 2000 	str.w	r2, [r8]
 800a108:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a10c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	f8cd 8018 	str.w	r8, [sp, #24]
 800a116:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a11a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11e:	4b9c      	ldr	r3, [pc, #624]	@ (800a390 <_printf_float+0x2c8>)
 800a120:	f04f 32ff 	mov.w	r2, #4294967295
 800a124:	f7f6 fd12 	bl	8000b4c <__aeabi_dcmpun>
 800a128:	bb70      	cbnz	r0, 800a188 <_printf_float+0xc0>
 800a12a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a12e:	4b98      	ldr	r3, [pc, #608]	@ (800a390 <_printf_float+0x2c8>)
 800a130:	f04f 32ff 	mov.w	r2, #4294967295
 800a134:	f7f6 fcec 	bl	8000b10 <__aeabi_dcmple>
 800a138:	bb30      	cbnz	r0, 800a188 <_printf_float+0xc0>
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	f7f6 fcdb 	bl	8000afc <__aeabi_dcmplt>
 800a146:	b110      	cbz	r0, 800a14e <_printf_float+0x86>
 800a148:	232d      	movs	r3, #45	@ 0x2d
 800a14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14e:	4a91      	ldr	r2, [pc, #580]	@ (800a394 <_printf_float+0x2cc>)
 800a150:	4b91      	ldr	r3, [pc, #580]	@ (800a398 <_printf_float+0x2d0>)
 800a152:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a156:	bf94      	ite	ls
 800a158:	4690      	movls	r8, r2
 800a15a:	4698      	movhi	r8, r3
 800a15c:	2303      	movs	r3, #3
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	f02b 0304 	bic.w	r3, fp, #4
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	f04f 0900 	mov.w	r9, #0
 800a16a:	9700      	str	r7, [sp, #0]
 800a16c:	4633      	mov	r3, r6
 800a16e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a170:	4621      	mov	r1, r4
 800a172:	4628      	mov	r0, r5
 800a174:	f000 f9d2 	bl	800a51c <_printf_common>
 800a178:	3001      	adds	r0, #1
 800a17a:	f040 808d 	bne.w	800a298 <_printf_float+0x1d0>
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	b00d      	add	sp, #52	@ 0x34
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	4642      	mov	r2, r8
 800a18a:	464b      	mov	r3, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fcdc 	bl	8000b4c <__aeabi_dcmpun>
 800a194:	b140      	cbz	r0, 800a1a8 <_printf_float+0xe0>
 800a196:	464b      	mov	r3, r9
 800a198:	2b00      	cmp	r3, #0
 800a19a:	bfbc      	itt	lt
 800a19c:	232d      	movlt	r3, #45	@ 0x2d
 800a19e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a1a2:	4a7e      	ldr	r2, [pc, #504]	@ (800a39c <_printf_float+0x2d4>)
 800a1a4:	4b7e      	ldr	r3, [pc, #504]	@ (800a3a0 <_printf_float+0x2d8>)
 800a1a6:	e7d4      	b.n	800a152 <_printf_float+0x8a>
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a1ae:	9206      	str	r2, [sp, #24]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	d13b      	bne.n	800a22c <_printf_float+0x164>
 800a1b4:	2306      	movs	r3, #6
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a1bc:	2300      	movs	r3, #0
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	9303      	str	r3, [sp, #12]
 800a1c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1c8:	ab09      	add	r3, sp, #36	@ 0x24
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	6861      	ldr	r1, [r4, #4]
 800a1ce:	ec49 8b10 	vmov	d0, r8, r9
 800a1d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7ff fed7 	bl	8009f8a <__cvt>
 800a1dc:	9b06      	ldr	r3, [sp, #24]
 800a1de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1e0:	2b47      	cmp	r3, #71	@ 0x47
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	d129      	bne.n	800a23a <_printf_float+0x172>
 800a1e6:	1cc8      	adds	r0, r1, #3
 800a1e8:	db02      	blt.n	800a1f0 <_printf_float+0x128>
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	dd41      	ble.n	800a274 <_printf_float+0x1ac>
 800a1f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1f4:	fa5f fa8a 	uxtb.w	sl, sl
 800a1f8:	3901      	subs	r1, #1
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a200:	9109      	str	r1, [sp, #36]	@ 0x24
 800a202:	f7ff ff27 	bl	800a054 <__exponent>
 800a206:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a208:	1813      	adds	r3, r2, r0
 800a20a:	2a01      	cmp	r2, #1
 800a20c:	4681      	mov	r9, r0
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	dc02      	bgt.n	800a218 <_printf_float+0x150>
 800a212:	6822      	ldr	r2, [r4, #0]
 800a214:	07d2      	lsls	r2, r2, #31
 800a216:	d501      	bpl.n	800a21c <_printf_float+0x154>
 800a218:	3301      	adds	r3, #1
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0a2      	beq.n	800a16a <_printf_float+0xa2>
 800a224:	232d      	movs	r3, #45	@ 0x2d
 800a226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a22a:	e79e      	b.n	800a16a <_printf_float+0xa2>
 800a22c:	9a06      	ldr	r2, [sp, #24]
 800a22e:	2a47      	cmp	r2, #71	@ 0x47
 800a230:	d1c2      	bne.n	800a1b8 <_printf_float+0xf0>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1c0      	bne.n	800a1b8 <_printf_float+0xf0>
 800a236:	2301      	movs	r3, #1
 800a238:	e7bd      	b.n	800a1b6 <_printf_float+0xee>
 800a23a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a23e:	d9db      	bls.n	800a1f8 <_printf_float+0x130>
 800a240:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a244:	d118      	bne.n	800a278 <_printf_float+0x1b0>
 800a246:	2900      	cmp	r1, #0
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	dd0b      	ble.n	800a264 <_printf_float+0x19c>
 800a24c:	6121      	str	r1, [r4, #16]
 800a24e:	b913      	cbnz	r3, 800a256 <_printf_float+0x18e>
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	07d0      	lsls	r0, r2, #31
 800a254:	d502      	bpl.n	800a25c <_printf_float+0x194>
 800a256:	3301      	adds	r3, #1
 800a258:	440b      	add	r3, r1
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a25e:	f04f 0900 	mov.w	r9, #0
 800a262:	e7db      	b.n	800a21c <_printf_float+0x154>
 800a264:	b913      	cbnz	r3, 800a26c <_printf_float+0x1a4>
 800a266:	6822      	ldr	r2, [r4, #0]
 800a268:	07d2      	lsls	r2, r2, #31
 800a26a:	d501      	bpl.n	800a270 <_printf_float+0x1a8>
 800a26c:	3302      	adds	r3, #2
 800a26e:	e7f4      	b.n	800a25a <_printf_float+0x192>
 800a270:	2301      	movs	r3, #1
 800a272:	e7f2      	b.n	800a25a <_printf_float+0x192>
 800a274:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27a:	4299      	cmp	r1, r3
 800a27c:	db05      	blt.n	800a28a <_printf_float+0x1c2>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	6121      	str	r1, [r4, #16]
 800a282:	07d8      	lsls	r0, r3, #31
 800a284:	d5ea      	bpl.n	800a25c <_printf_float+0x194>
 800a286:	1c4b      	adds	r3, r1, #1
 800a288:	e7e7      	b.n	800a25a <_printf_float+0x192>
 800a28a:	2900      	cmp	r1, #0
 800a28c:	bfd4      	ite	le
 800a28e:	f1c1 0202 	rsble	r2, r1, #2
 800a292:	2201      	movgt	r2, #1
 800a294:	4413      	add	r3, r2
 800a296:	e7e0      	b.n	800a25a <_printf_float+0x192>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	055a      	lsls	r2, r3, #21
 800a29c:	d407      	bmi.n	800a2ae <_printf_float+0x1e6>
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d12b      	bne.n	800a304 <_printf_float+0x23c>
 800a2ac:	e767      	b.n	800a17e <_printf_float+0xb6>
 800a2ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2b2:	f240 80dd 	bls.w	800a470 <_printf_float+0x3a8>
 800a2b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f7f6 fc13 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d033      	beq.n	800a32e <_printf_float+0x266>
 800a2c6:	4a37      	ldr	r2, [pc, #220]	@ (800a3a4 <_printf_float+0x2dc>)
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	f43f af54 	beq.w	800a17e <_printf_float+0xb6>
 800a2d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2da:	4543      	cmp	r3, r8
 800a2dc:	db02      	blt.n	800a2e4 <_printf_float+0x21c>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	07d8      	lsls	r0, r3, #31
 800a2e2:	d50f      	bpl.n	800a304 <_printf_float+0x23c>
 800a2e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f43f af45 	beq.w	800a17e <_printf_float+0xb6>
 800a2f4:	f04f 0900 	mov.w	r9, #0
 800a2f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2fc:	f104 0a1a 	add.w	sl, r4, #26
 800a300:	45c8      	cmp	r8, r9
 800a302:	dc09      	bgt.n	800a318 <_printf_float+0x250>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	079b      	lsls	r3, r3, #30
 800a308:	f100 8103 	bmi.w	800a512 <_printf_float+0x44a>
 800a30c:	68e0      	ldr	r0, [r4, #12]
 800a30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a310:	4298      	cmp	r0, r3
 800a312:	bfb8      	it	lt
 800a314:	4618      	movlt	r0, r3
 800a316:	e734      	b.n	800a182 <_printf_float+0xba>
 800a318:	2301      	movs	r3, #1
 800a31a:	4652      	mov	r2, sl
 800a31c:	4631      	mov	r1, r6
 800a31e:	4628      	mov	r0, r5
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f af2b 	beq.w	800a17e <_printf_float+0xb6>
 800a328:	f109 0901 	add.w	r9, r9, #1
 800a32c:	e7e8      	b.n	800a300 <_printf_float+0x238>
 800a32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc39      	bgt.n	800a3a8 <_printf_float+0x2e0>
 800a334:	4a1b      	ldr	r2, [pc, #108]	@ (800a3a4 <_printf_float+0x2dc>)
 800a336:	2301      	movs	r3, #1
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f af1d 	beq.w	800a17e <_printf_float+0xb6>
 800a344:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a348:	ea59 0303 	orrs.w	r3, r9, r3
 800a34c:	d102      	bne.n	800a354 <_printf_float+0x28c>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	07d9      	lsls	r1, r3, #31
 800a352:	d5d7      	bpl.n	800a304 <_printf_float+0x23c>
 800a354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	f43f af0d 	beq.w	800a17e <_printf_float+0xb6>
 800a364:	f04f 0a00 	mov.w	sl, #0
 800a368:	f104 0b1a 	add.w	fp, r4, #26
 800a36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36e:	425b      	negs	r3, r3
 800a370:	4553      	cmp	r3, sl
 800a372:	dc01      	bgt.n	800a378 <_printf_float+0x2b0>
 800a374:	464b      	mov	r3, r9
 800a376:	e793      	b.n	800a2a0 <_printf_float+0x1d8>
 800a378:	2301      	movs	r3, #1
 800a37a:	465a      	mov	r2, fp
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f aefb 	beq.w	800a17e <_printf_float+0xb6>
 800a388:	f10a 0a01 	add.w	sl, sl, #1
 800a38c:	e7ee      	b.n	800a36c <_printf_float+0x2a4>
 800a38e:	bf00      	nop
 800a390:	7fefffff 	.word	0x7fefffff
 800a394:	08012430 	.word	0x08012430
 800a398:	08012434 	.word	0x08012434
 800a39c:	08012438 	.word	0x08012438
 800a3a0:	0801243c 	.word	0x0801243c
 800a3a4:	08012440 	.word	0x08012440
 800a3a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3ae:	4553      	cmp	r3, sl
 800a3b0:	bfa8      	it	ge
 800a3b2:	4653      	movge	r3, sl
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	4699      	mov	r9, r3
 800a3b8:	dc36      	bgt.n	800a428 <_printf_float+0x360>
 800a3ba:	f04f 0b00 	mov.w	fp, #0
 800a3be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3c2:	f104 021a 	add.w	r2, r4, #26
 800a3c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3c8:	9306      	str	r3, [sp, #24]
 800a3ca:	eba3 0309 	sub.w	r3, r3, r9
 800a3ce:	455b      	cmp	r3, fp
 800a3d0:	dc31      	bgt.n	800a436 <_printf_float+0x36e>
 800a3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d4:	459a      	cmp	sl, r3
 800a3d6:	dc3a      	bgt.n	800a44e <_printf_float+0x386>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	07da      	lsls	r2, r3, #31
 800a3dc:	d437      	bmi.n	800a44e <_printf_float+0x386>
 800a3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e0:	ebaa 0903 	sub.w	r9, sl, r3
 800a3e4:	9b06      	ldr	r3, [sp, #24]
 800a3e6:	ebaa 0303 	sub.w	r3, sl, r3
 800a3ea:	4599      	cmp	r9, r3
 800a3ec:	bfa8      	it	ge
 800a3ee:	4699      	movge	r9, r3
 800a3f0:	f1b9 0f00 	cmp.w	r9, #0
 800a3f4:	dc33      	bgt.n	800a45e <_printf_float+0x396>
 800a3f6:	f04f 0800 	mov.w	r8, #0
 800a3fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3fe:	f104 0b1a 	add.w	fp, r4, #26
 800a402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a404:	ebaa 0303 	sub.w	r3, sl, r3
 800a408:	eba3 0309 	sub.w	r3, r3, r9
 800a40c:	4543      	cmp	r3, r8
 800a40e:	f77f af79 	ble.w	800a304 <_printf_float+0x23c>
 800a412:	2301      	movs	r3, #1
 800a414:	465a      	mov	r2, fp
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f aeae 	beq.w	800a17e <_printf_float+0xb6>
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	e7ec      	b.n	800a402 <_printf_float+0x33a>
 800a428:	4642      	mov	r2, r8
 800a42a:	4631      	mov	r1, r6
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b8      	blx	r7
 800a430:	3001      	adds	r0, #1
 800a432:	d1c2      	bne.n	800a3ba <_printf_float+0x2f2>
 800a434:	e6a3      	b.n	800a17e <_printf_float+0xb6>
 800a436:	2301      	movs	r3, #1
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	9206      	str	r2, [sp, #24]
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	f43f ae9c 	beq.w	800a17e <_printf_float+0xb6>
 800a446:	9a06      	ldr	r2, [sp, #24]
 800a448:	f10b 0b01 	add.w	fp, fp, #1
 800a44c:	e7bb      	b.n	800a3c6 <_printf_float+0x2fe>
 800a44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	d1c0      	bne.n	800a3de <_printf_float+0x316>
 800a45c:	e68f      	b.n	800a17e <_printf_float+0xb6>
 800a45e:	9a06      	ldr	r2, [sp, #24]
 800a460:	464b      	mov	r3, r9
 800a462:	4442      	add	r2, r8
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	d1c3      	bne.n	800a3f6 <_printf_float+0x32e>
 800a46e:	e686      	b.n	800a17e <_printf_float+0xb6>
 800a470:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a474:	f1ba 0f01 	cmp.w	sl, #1
 800a478:	dc01      	bgt.n	800a47e <_printf_float+0x3b6>
 800a47a:	07db      	lsls	r3, r3, #31
 800a47c:	d536      	bpl.n	800a4ec <_printf_float+0x424>
 800a47e:	2301      	movs	r3, #1
 800a480:	4642      	mov	r2, r8
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f ae78 	beq.w	800a17e <_printf_float+0xb6>
 800a48e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	47b8      	blx	r7
 800a498:	3001      	adds	r0, #1
 800a49a:	f43f ae70 	beq.w	800a17e <_printf_float+0xb6>
 800a49e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4aa:	f7f6 fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4ae:	b9c0      	cbnz	r0, 800a4e2 <_printf_float+0x41a>
 800a4b0:	4653      	mov	r3, sl
 800a4b2:	f108 0201 	add.w	r2, r8, #1
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	47b8      	blx	r7
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d10c      	bne.n	800a4da <_printf_float+0x412>
 800a4c0:	e65d      	b.n	800a17e <_printf_float+0xb6>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	465a      	mov	r2, fp
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f ae56 	beq.w	800a17e <_printf_float+0xb6>
 800a4d2:	f108 0801 	add.w	r8, r8, #1
 800a4d6:	45d0      	cmp	r8, sl
 800a4d8:	dbf3      	blt.n	800a4c2 <_printf_float+0x3fa>
 800a4da:	464b      	mov	r3, r9
 800a4dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4e0:	e6df      	b.n	800a2a2 <_printf_float+0x1da>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	f104 0b1a 	add.w	fp, r4, #26
 800a4ea:	e7f4      	b.n	800a4d6 <_printf_float+0x40e>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	e7e1      	b.n	800a4b6 <_printf_float+0x3ee>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	464a      	mov	r2, r9
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f ae3e 	beq.w	800a17e <_printf_float+0xb6>
 800a502:	f108 0801 	add.w	r8, r8, #1
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a50a:	1a5b      	subs	r3, r3, r1
 800a50c:	4543      	cmp	r3, r8
 800a50e:	dcf0      	bgt.n	800a4f2 <_printf_float+0x42a>
 800a510:	e6fc      	b.n	800a30c <_printf_float+0x244>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	f104 0919 	add.w	r9, r4, #25
 800a51a:	e7f4      	b.n	800a506 <_printf_float+0x43e>

0800a51c <_printf_common>:
 800a51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a520:	4616      	mov	r6, r2
 800a522:	4698      	mov	r8, r3
 800a524:	688a      	ldr	r2, [r1, #8]
 800a526:	690b      	ldr	r3, [r1, #16]
 800a528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	bfb8      	it	lt
 800a530:	4613      	movlt	r3, r2
 800a532:	6033      	str	r3, [r6, #0]
 800a534:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a538:	4607      	mov	r7, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b10a      	cbz	r2, 800a542 <_printf_common+0x26>
 800a53e:	3301      	adds	r3, #1
 800a540:	6033      	str	r3, [r6, #0]
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	0699      	lsls	r1, r3, #26
 800a546:	bf42      	ittt	mi
 800a548:	6833      	ldrmi	r3, [r6, #0]
 800a54a:	3302      	addmi	r3, #2
 800a54c:	6033      	strmi	r3, [r6, #0]
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	f015 0506 	ands.w	r5, r5, #6
 800a554:	d106      	bne.n	800a564 <_printf_common+0x48>
 800a556:	f104 0a19 	add.w	sl, r4, #25
 800a55a:	68e3      	ldr	r3, [r4, #12]
 800a55c:	6832      	ldr	r2, [r6, #0]
 800a55e:	1a9b      	subs	r3, r3, r2
 800a560:	42ab      	cmp	r3, r5
 800a562:	dc26      	bgt.n	800a5b2 <_printf_common+0x96>
 800a564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	3b00      	subs	r3, #0
 800a56c:	bf18      	it	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	0692      	lsls	r2, r2, #26
 800a572:	d42b      	bmi.n	800a5cc <_printf_common+0xb0>
 800a574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a578:	4641      	mov	r1, r8
 800a57a:	4638      	mov	r0, r7
 800a57c:	47c8      	blx	r9
 800a57e:	3001      	adds	r0, #1
 800a580:	d01e      	beq.n	800a5c0 <_printf_common+0xa4>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	f003 0306 	and.w	r3, r3, #6
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	bf02      	ittt	eq
 800a58e:	68e5      	ldreq	r5, [r4, #12]
 800a590:	6833      	ldreq	r3, [r6, #0]
 800a592:	1aed      	subeq	r5, r5, r3
 800a594:	68a3      	ldr	r3, [r4, #8]
 800a596:	bf0c      	ite	eq
 800a598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a59c:	2500      	movne	r5, #0
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	bfc4      	itt	gt
 800a5a2:	1a9b      	subgt	r3, r3, r2
 800a5a4:	18ed      	addgt	r5, r5, r3
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	341a      	adds	r4, #26
 800a5aa:	42b5      	cmp	r5, r6
 800a5ac:	d11a      	bne.n	800a5e4 <_printf_common+0xc8>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e008      	b.n	800a5c4 <_printf_common+0xa8>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	47c8      	blx	r9
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d103      	bne.n	800a5c8 <_printf_common+0xac>
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	e7c6      	b.n	800a55a <_printf_common+0x3e>
 800a5cc:	18e1      	adds	r1, r4, r3
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	2030      	movs	r0, #48	@ 0x30
 800a5d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5d6:	4422      	add	r2, r4
 800a5d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	e7c7      	b.n	800a574 <_printf_common+0x58>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c8      	blx	r9
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d0e6      	beq.n	800a5c0 <_printf_common+0xa4>
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	e7d9      	b.n	800a5aa <_printf_common+0x8e>
	...

0800a5f8 <_printf_i>:
 800a5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	7e0f      	ldrb	r7, [r1, #24]
 800a5fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a600:	2f78      	cmp	r7, #120	@ 0x78
 800a602:	4691      	mov	r9, r2
 800a604:	4680      	mov	r8, r0
 800a606:	460c      	mov	r4, r1
 800a608:	469a      	mov	sl, r3
 800a60a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a60e:	d807      	bhi.n	800a620 <_printf_i+0x28>
 800a610:	2f62      	cmp	r7, #98	@ 0x62
 800a612:	d80a      	bhi.n	800a62a <_printf_i+0x32>
 800a614:	2f00      	cmp	r7, #0
 800a616:	f000 80d2 	beq.w	800a7be <_printf_i+0x1c6>
 800a61a:	2f58      	cmp	r7, #88	@ 0x58
 800a61c:	f000 80b9 	beq.w	800a792 <_printf_i+0x19a>
 800a620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a628:	e03a      	b.n	800a6a0 <_printf_i+0xa8>
 800a62a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a62e:	2b15      	cmp	r3, #21
 800a630:	d8f6      	bhi.n	800a620 <_printf_i+0x28>
 800a632:	a101      	add	r1, pc, #4	@ (adr r1, 800a638 <_printf_i+0x40>)
 800a634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a6a5 	.word	0x0800a6a5
 800a640:	0800a621 	.word	0x0800a621
 800a644:	0800a621 	.word	0x0800a621
 800a648:	0800a621 	.word	0x0800a621
 800a64c:	0800a621 	.word	0x0800a621
 800a650:	0800a6a5 	.word	0x0800a6a5
 800a654:	0800a621 	.word	0x0800a621
 800a658:	0800a621 	.word	0x0800a621
 800a65c:	0800a621 	.word	0x0800a621
 800a660:	0800a621 	.word	0x0800a621
 800a664:	0800a7a5 	.word	0x0800a7a5
 800a668:	0800a6cf 	.word	0x0800a6cf
 800a66c:	0800a75f 	.word	0x0800a75f
 800a670:	0800a621 	.word	0x0800a621
 800a674:	0800a621 	.word	0x0800a621
 800a678:	0800a7c7 	.word	0x0800a7c7
 800a67c:	0800a621 	.word	0x0800a621
 800a680:	0800a6cf 	.word	0x0800a6cf
 800a684:	0800a621 	.word	0x0800a621
 800a688:	0800a621 	.word	0x0800a621
 800a68c:	0800a767 	.word	0x0800a767
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6032      	str	r2, [r6, #0]
 800a698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a69c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e09d      	b.n	800a7e0 <_printf_i+0x1e8>
 800a6a4:	6833      	ldr	r3, [r6, #0]
 800a6a6:	6820      	ldr	r0, [r4, #0]
 800a6a8:	1d19      	adds	r1, r3, #4
 800a6aa:	6031      	str	r1, [r6, #0]
 800a6ac:	0606      	lsls	r6, r0, #24
 800a6ae:	d501      	bpl.n	800a6b4 <_printf_i+0xbc>
 800a6b0:	681d      	ldr	r5, [r3, #0]
 800a6b2:	e003      	b.n	800a6bc <_printf_i+0xc4>
 800a6b4:	0645      	lsls	r5, r0, #25
 800a6b6:	d5fb      	bpl.n	800a6b0 <_printf_i+0xb8>
 800a6b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6bc:	2d00      	cmp	r5, #0
 800a6be:	da03      	bge.n	800a6c8 <_printf_i+0xd0>
 800a6c0:	232d      	movs	r3, #45	@ 0x2d
 800a6c2:	426d      	negs	r5, r5
 800a6c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6c8:	4859      	ldr	r0, [pc, #356]	@ (800a830 <_printf_i+0x238>)
 800a6ca:	230a      	movs	r3, #10
 800a6cc:	e011      	b.n	800a6f2 <_printf_i+0xfa>
 800a6ce:	6821      	ldr	r1, [r4, #0]
 800a6d0:	6833      	ldr	r3, [r6, #0]
 800a6d2:	0608      	lsls	r0, r1, #24
 800a6d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6d8:	d402      	bmi.n	800a6e0 <_printf_i+0xe8>
 800a6da:	0649      	lsls	r1, r1, #25
 800a6dc:	bf48      	it	mi
 800a6de:	b2ad      	uxthmi	r5, r5
 800a6e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6e2:	4853      	ldr	r0, [pc, #332]	@ (800a830 <_printf_i+0x238>)
 800a6e4:	6033      	str	r3, [r6, #0]
 800a6e6:	bf14      	ite	ne
 800a6e8:	230a      	movne	r3, #10
 800a6ea:	2308      	moveq	r3, #8
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6f2:	6866      	ldr	r6, [r4, #4]
 800a6f4:	60a6      	str	r6, [r4, #8]
 800a6f6:	2e00      	cmp	r6, #0
 800a6f8:	bfa2      	ittt	ge
 800a6fa:	6821      	ldrge	r1, [r4, #0]
 800a6fc:	f021 0104 	bicge.w	r1, r1, #4
 800a700:	6021      	strge	r1, [r4, #0]
 800a702:	b90d      	cbnz	r5, 800a708 <_printf_i+0x110>
 800a704:	2e00      	cmp	r6, #0
 800a706:	d04b      	beq.n	800a7a0 <_printf_i+0x1a8>
 800a708:	4616      	mov	r6, r2
 800a70a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a70e:	fb03 5711 	mls	r7, r3, r1, r5
 800a712:	5dc7      	ldrb	r7, [r0, r7]
 800a714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a718:	462f      	mov	r7, r5
 800a71a:	42bb      	cmp	r3, r7
 800a71c:	460d      	mov	r5, r1
 800a71e:	d9f4      	bls.n	800a70a <_printf_i+0x112>
 800a720:	2b08      	cmp	r3, #8
 800a722:	d10b      	bne.n	800a73c <_printf_i+0x144>
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	07df      	lsls	r7, r3, #31
 800a728:	d508      	bpl.n	800a73c <_printf_i+0x144>
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6861      	ldr	r1, [r4, #4]
 800a72e:	4299      	cmp	r1, r3
 800a730:	bfde      	ittt	le
 800a732:	2330      	movle	r3, #48	@ 0x30
 800a734:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a738:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a73c:	1b92      	subs	r2, r2, r6
 800a73e:	6122      	str	r2, [r4, #16]
 800a740:	f8cd a000 	str.w	sl, [sp]
 800a744:	464b      	mov	r3, r9
 800a746:	aa03      	add	r2, sp, #12
 800a748:	4621      	mov	r1, r4
 800a74a:	4640      	mov	r0, r8
 800a74c:	f7ff fee6 	bl	800a51c <_printf_common>
 800a750:	3001      	adds	r0, #1
 800a752:	d14a      	bne.n	800a7ea <_printf_i+0x1f2>
 800a754:	f04f 30ff 	mov.w	r0, #4294967295
 800a758:	b004      	add	sp, #16
 800a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	f043 0320 	orr.w	r3, r3, #32
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	4833      	ldr	r0, [pc, #204]	@ (800a834 <_printf_i+0x23c>)
 800a768:	2778      	movs	r7, #120	@ 0x78
 800a76a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6831      	ldr	r1, [r6, #0]
 800a772:	061f      	lsls	r7, r3, #24
 800a774:	f851 5b04 	ldr.w	r5, [r1], #4
 800a778:	d402      	bmi.n	800a780 <_printf_i+0x188>
 800a77a:	065f      	lsls	r7, r3, #25
 800a77c:	bf48      	it	mi
 800a77e:	b2ad      	uxthmi	r5, r5
 800a780:	6031      	str	r1, [r6, #0]
 800a782:	07d9      	lsls	r1, r3, #31
 800a784:	bf44      	itt	mi
 800a786:	f043 0320 	orrmi.w	r3, r3, #32
 800a78a:	6023      	strmi	r3, [r4, #0]
 800a78c:	b11d      	cbz	r5, 800a796 <_printf_i+0x19e>
 800a78e:	2310      	movs	r3, #16
 800a790:	e7ac      	b.n	800a6ec <_printf_i+0xf4>
 800a792:	4827      	ldr	r0, [pc, #156]	@ (800a830 <_printf_i+0x238>)
 800a794:	e7e9      	b.n	800a76a <_printf_i+0x172>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	f023 0320 	bic.w	r3, r3, #32
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	e7f6      	b.n	800a78e <_printf_i+0x196>
 800a7a0:	4616      	mov	r6, r2
 800a7a2:	e7bd      	b.n	800a720 <_printf_i+0x128>
 800a7a4:	6833      	ldr	r3, [r6, #0]
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	6961      	ldr	r1, [r4, #20]
 800a7aa:	1d18      	adds	r0, r3, #4
 800a7ac:	6030      	str	r0, [r6, #0]
 800a7ae:	062e      	lsls	r6, r5, #24
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	d501      	bpl.n	800a7b8 <_printf_i+0x1c0>
 800a7b4:	6019      	str	r1, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <_printf_i+0x1c6>
 800a7b8:	0668      	lsls	r0, r5, #25
 800a7ba:	d5fb      	bpl.n	800a7b4 <_printf_i+0x1bc>
 800a7bc:	8019      	strh	r1, [r3, #0]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6123      	str	r3, [r4, #16]
 800a7c2:	4616      	mov	r6, r2
 800a7c4:	e7bc      	b.n	800a740 <_printf_i+0x148>
 800a7c6:	6833      	ldr	r3, [r6, #0]
 800a7c8:	1d1a      	adds	r2, r3, #4
 800a7ca:	6032      	str	r2, [r6, #0]
 800a7cc:	681e      	ldr	r6, [r3, #0]
 800a7ce:	6862      	ldr	r2, [r4, #4]
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7f5 fd0c 	bl	80001f0 <memchr>
 800a7d8:	b108      	cbz	r0, 800a7de <_printf_i+0x1e6>
 800a7da:	1b80      	subs	r0, r0, r6
 800a7dc:	6060      	str	r0, [r4, #4]
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7e8:	e7aa      	b.n	800a740 <_printf_i+0x148>
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	4649      	mov	r1, r9
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	47d0      	blx	sl
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d0ad      	beq.n	800a754 <_printf_i+0x15c>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	079b      	lsls	r3, r3, #30
 800a7fc:	d413      	bmi.n	800a826 <_printf_i+0x22e>
 800a7fe:	68e0      	ldr	r0, [r4, #12]
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	4298      	cmp	r0, r3
 800a804:	bfb8      	it	lt
 800a806:	4618      	movlt	r0, r3
 800a808:	e7a6      	b.n	800a758 <_printf_i+0x160>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4632      	mov	r2, r6
 800a80e:	4649      	mov	r1, r9
 800a810:	4640      	mov	r0, r8
 800a812:	47d0      	blx	sl
 800a814:	3001      	adds	r0, #1
 800a816:	d09d      	beq.n	800a754 <_printf_i+0x15c>
 800a818:	3501      	adds	r5, #1
 800a81a:	68e3      	ldr	r3, [r4, #12]
 800a81c:	9903      	ldr	r1, [sp, #12]
 800a81e:	1a5b      	subs	r3, r3, r1
 800a820:	42ab      	cmp	r3, r5
 800a822:	dcf2      	bgt.n	800a80a <_printf_i+0x212>
 800a824:	e7eb      	b.n	800a7fe <_printf_i+0x206>
 800a826:	2500      	movs	r5, #0
 800a828:	f104 0619 	add.w	r6, r4, #25
 800a82c:	e7f5      	b.n	800a81a <_printf_i+0x222>
 800a82e:	bf00      	nop
 800a830:	08012442 	.word	0x08012442
 800a834:	08012453 	.word	0x08012453

0800a838 <_scanf_float>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	b087      	sub	sp, #28
 800a83e:	4617      	mov	r7, r2
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	688b      	ldr	r3, [r1, #8]
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a84a:	bf81      	itttt	hi
 800a84c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a850:	eb03 0b05 	addhi.w	fp, r3, r5
 800a854:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a858:	608b      	strhi	r3, [r1, #8]
 800a85a:	680b      	ldr	r3, [r1, #0]
 800a85c:	460a      	mov	r2, r1
 800a85e:	f04f 0500 	mov.w	r5, #0
 800a862:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a866:	f842 3b1c 	str.w	r3, [r2], #28
 800a86a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a86e:	4680      	mov	r8, r0
 800a870:	460c      	mov	r4, r1
 800a872:	bf98      	it	ls
 800a874:	f04f 0b00 	movls.w	fp, #0
 800a878:	9201      	str	r2, [sp, #4]
 800a87a:	4616      	mov	r6, r2
 800a87c:	46aa      	mov	sl, r5
 800a87e:	46a9      	mov	r9, r5
 800a880:	9502      	str	r5, [sp, #8]
 800a882:	68a2      	ldr	r2, [r4, #8]
 800a884:	b152      	cbz	r2, 800a89c <_scanf_float+0x64>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a88c:	d864      	bhi.n	800a958 <_scanf_float+0x120>
 800a88e:	2b40      	cmp	r3, #64	@ 0x40
 800a890:	d83c      	bhi.n	800a90c <_scanf_float+0xd4>
 800a892:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a896:	b2c8      	uxtb	r0, r1
 800a898:	280e      	cmp	r0, #14
 800a89a:	d93a      	bls.n	800a912 <_scanf_float+0xda>
 800a89c:	f1b9 0f00 	cmp.w	r9, #0
 800a8a0:	d003      	beq.n	800a8aa <_scanf_float+0x72>
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ae:	f1ba 0f01 	cmp.w	sl, #1
 800a8b2:	f200 8117 	bhi.w	800aae4 <_scanf_float+0x2ac>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	f200 8108 	bhi.w	800aace <_scanf_float+0x296>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	b007      	add	sp, #28
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a8ca:	2a0d      	cmp	r2, #13
 800a8cc:	d8e6      	bhi.n	800a89c <_scanf_float+0x64>
 800a8ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a8d4 <_scanf_float+0x9c>)
 800a8d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8d4:	0800aa1b 	.word	0x0800aa1b
 800a8d8:	0800a89d 	.word	0x0800a89d
 800a8dc:	0800a89d 	.word	0x0800a89d
 800a8e0:	0800a89d 	.word	0x0800a89d
 800a8e4:	0800aa7b 	.word	0x0800aa7b
 800a8e8:	0800aa53 	.word	0x0800aa53
 800a8ec:	0800a89d 	.word	0x0800a89d
 800a8f0:	0800a89d 	.word	0x0800a89d
 800a8f4:	0800aa29 	.word	0x0800aa29
 800a8f8:	0800a89d 	.word	0x0800a89d
 800a8fc:	0800a89d 	.word	0x0800a89d
 800a900:	0800a89d 	.word	0x0800a89d
 800a904:	0800a89d 	.word	0x0800a89d
 800a908:	0800a9e1 	.word	0x0800a9e1
 800a90c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a910:	e7db      	b.n	800a8ca <_scanf_float+0x92>
 800a912:	290e      	cmp	r1, #14
 800a914:	d8c2      	bhi.n	800a89c <_scanf_float+0x64>
 800a916:	a001      	add	r0, pc, #4	@ (adr r0, 800a91c <_scanf_float+0xe4>)
 800a918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a91c:	0800a9d1 	.word	0x0800a9d1
 800a920:	0800a89d 	.word	0x0800a89d
 800a924:	0800a9d1 	.word	0x0800a9d1
 800a928:	0800aa67 	.word	0x0800aa67
 800a92c:	0800a89d 	.word	0x0800a89d
 800a930:	0800a979 	.word	0x0800a979
 800a934:	0800a9b7 	.word	0x0800a9b7
 800a938:	0800a9b7 	.word	0x0800a9b7
 800a93c:	0800a9b7 	.word	0x0800a9b7
 800a940:	0800a9b7 	.word	0x0800a9b7
 800a944:	0800a9b7 	.word	0x0800a9b7
 800a948:	0800a9b7 	.word	0x0800a9b7
 800a94c:	0800a9b7 	.word	0x0800a9b7
 800a950:	0800a9b7 	.word	0x0800a9b7
 800a954:	0800a9b7 	.word	0x0800a9b7
 800a958:	2b6e      	cmp	r3, #110	@ 0x6e
 800a95a:	d809      	bhi.n	800a970 <_scanf_float+0x138>
 800a95c:	2b60      	cmp	r3, #96	@ 0x60
 800a95e:	d8b2      	bhi.n	800a8c6 <_scanf_float+0x8e>
 800a960:	2b54      	cmp	r3, #84	@ 0x54
 800a962:	d07b      	beq.n	800aa5c <_scanf_float+0x224>
 800a964:	2b59      	cmp	r3, #89	@ 0x59
 800a966:	d199      	bne.n	800a89c <_scanf_float+0x64>
 800a968:	2d07      	cmp	r5, #7
 800a96a:	d197      	bne.n	800a89c <_scanf_float+0x64>
 800a96c:	2508      	movs	r5, #8
 800a96e:	e02c      	b.n	800a9ca <_scanf_float+0x192>
 800a970:	2b74      	cmp	r3, #116	@ 0x74
 800a972:	d073      	beq.n	800aa5c <_scanf_float+0x224>
 800a974:	2b79      	cmp	r3, #121	@ 0x79
 800a976:	e7f6      	b.n	800a966 <_scanf_float+0x12e>
 800a978:	6821      	ldr	r1, [r4, #0]
 800a97a:	05c8      	lsls	r0, r1, #23
 800a97c:	d51b      	bpl.n	800a9b6 <_scanf_float+0x17e>
 800a97e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a982:	6021      	str	r1, [r4, #0]
 800a984:	f109 0901 	add.w	r9, r9, #1
 800a988:	f1bb 0f00 	cmp.w	fp, #0
 800a98c:	d003      	beq.n	800a996 <_scanf_float+0x15e>
 800a98e:	3201      	adds	r2, #1
 800a990:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a994:	60a2      	str	r2, [r4, #8]
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	3b01      	subs	r3, #1
 800a99a:	60a3      	str	r3, [r4, #8]
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	6123      	str	r3, [r4, #16]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	f340 8087 	ble.w	800aabc <_scanf_float+0x284>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	e765      	b.n	800a882 <_scanf_float+0x4a>
 800a9b6:	eb1a 0105 	adds.w	r1, sl, r5
 800a9ba:	f47f af6f 	bne.w	800a89c <_scanf_float+0x64>
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a9c4:	6022      	str	r2, [r4, #0]
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	468a      	mov	sl, r1
 800a9ca:	f806 3b01 	strb.w	r3, [r6], #1
 800a9ce:	e7e2      	b.n	800a996 <_scanf_float+0x15e>
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	0610      	lsls	r0, r2, #24
 800a9d4:	f57f af62 	bpl.w	800a89c <_scanf_float+0x64>
 800a9d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	e7f4      	b.n	800a9ca <_scanf_float+0x192>
 800a9e0:	f1ba 0f00 	cmp.w	sl, #0
 800a9e4:	d10e      	bne.n	800aa04 <_scanf_float+0x1cc>
 800a9e6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ea:	d10e      	bne.n	800aa0a <_scanf_float+0x1d2>
 800a9ec:	6822      	ldr	r2, [r4, #0]
 800a9ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9f6:	d108      	bne.n	800aa0a <_scanf_float+0x1d2>
 800a9f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	f04f 0a01 	mov.w	sl, #1
 800aa02:	e7e2      	b.n	800a9ca <_scanf_float+0x192>
 800aa04:	f1ba 0f02 	cmp.w	sl, #2
 800aa08:	d055      	beq.n	800aab6 <_scanf_float+0x27e>
 800aa0a:	2d01      	cmp	r5, #1
 800aa0c:	d002      	beq.n	800aa14 <_scanf_float+0x1dc>
 800aa0e:	2d04      	cmp	r5, #4
 800aa10:	f47f af44 	bne.w	800a89c <_scanf_float+0x64>
 800aa14:	3501      	adds	r5, #1
 800aa16:	b2ed      	uxtb	r5, r5
 800aa18:	e7d7      	b.n	800a9ca <_scanf_float+0x192>
 800aa1a:	f1ba 0f01 	cmp.w	sl, #1
 800aa1e:	f47f af3d 	bne.w	800a89c <_scanf_float+0x64>
 800aa22:	f04f 0a02 	mov.w	sl, #2
 800aa26:	e7d0      	b.n	800a9ca <_scanf_float+0x192>
 800aa28:	b97d      	cbnz	r5, 800aa4a <_scanf_float+0x212>
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	f47f af38 	bne.w	800a8a2 <_scanf_float+0x6a>
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa3c:	f040 8108 	bne.w	800ac50 <_scanf_float+0x418>
 800aa40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa44:	6022      	str	r2, [r4, #0]
 800aa46:	2501      	movs	r5, #1
 800aa48:	e7bf      	b.n	800a9ca <_scanf_float+0x192>
 800aa4a:	2d03      	cmp	r5, #3
 800aa4c:	d0e2      	beq.n	800aa14 <_scanf_float+0x1dc>
 800aa4e:	2d05      	cmp	r5, #5
 800aa50:	e7de      	b.n	800aa10 <_scanf_float+0x1d8>
 800aa52:	2d02      	cmp	r5, #2
 800aa54:	f47f af22 	bne.w	800a89c <_scanf_float+0x64>
 800aa58:	2503      	movs	r5, #3
 800aa5a:	e7b6      	b.n	800a9ca <_scanf_float+0x192>
 800aa5c:	2d06      	cmp	r5, #6
 800aa5e:	f47f af1d 	bne.w	800a89c <_scanf_float+0x64>
 800aa62:	2507      	movs	r5, #7
 800aa64:	e7b1      	b.n	800a9ca <_scanf_float+0x192>
 800aa66:	6822      	ldr	r2, [r4, #0]
 800aa68:	0591      	lsls	r1, r2, #22
 800aa6a:	f57f af17 	bpl.w	800a89c <_scanf_float+0x64>
 800aa6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa72:	6022      	str	r2, [r4, #0]
 800aa74:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa78:	e7a7      	b.n	800a9ca <_scanf_float+0x192>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa84:	d006      	beq.n	800aa94 <_scanf_float+0x25c>
 800aa86:	0550      	lsls	r0, r2, #21
 800aa88:	f57f af08 	bpl.w	800a89c <_scanf_float+0x64>
 800aa8c:	f1b9 0f00 	cmp.w	r9, #0
 800aa90:	f000 80de 	beq.w	800ac50 <_scanf_float+0x418>
 800aa94:	0591      	lsls	r1, r2, #22
 800aa96:	bf58      	it	pl
 800aa98:	9902      	ldrpl	r1, [sp, #8]
 800aa9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa9e:	bf58      	it	pl
 800aaa0:	eba9 0101 	subpl.w	r1, r9, r1
 800aaa4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aaa8:	bf58      	it	pl
 800aaaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	f04f 0900 	mov.w	r9, #0
 800aab4:	e789      	b.n	800a9ca <_scanf_float+0x192>
 800aab6:	f04f 0a03 	mov.w	sl, #3
 800aaba:	e786      	b.n	800a9ca <_scanf_float+0x192>
 800aabc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aac0:	4639      	mov	r1, r7
 800aac2:	4640      	mov	r0, r8
 800aac4:	4798      	blx	r3
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f aedb 	beq.w	800a882 <_scanf_float+0x4a>
 800aacc:	e6e6      	b.n	800a89c <_scanf_float+0x64>
 800aace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aad6:	463a      	mov	r2, r7
 800aad8:	4640      	mov	r0, r8
 800aada:	4798      	blx	r3
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	3b01      	subs	r3, #1
 800aae0:	6123      	str	r3, [r4, #16]
 800aae2:	e6e8      	b.n	800a8b6 <_scanf_float+0x7e>
 800aae4:	1e6b      	subs	r3, r5, #1
 800aae6:	2b06      	cmp	r3, #6
 800aae8:	d824      	bhi.n	800ab34 <_scanf_float+0x2fc>
 800aaea:	2d02      	cmp	r5, #2
 800aaec:	d836      	bhi.n	800ab5c <_scanf_float+0x324>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	429e      	cmp	r6, r3
 800aaf2:	f67f aee4 	bls.w	800a8be <_scanf_float+0x86>
 800aaf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aafa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aafe:	463a      	mov	r2, r7
 800ab00:	4640      	mov	r0, r8
 800ab02:	4798      	blx	r3
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	e7f0      	b.n	800aaee <_scanf_float+0x2b6>
 800ab0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ab14:	463a      	mov	r2, r7
 800ab16:	4640      	mov	r0, r8
 800ab18:	4798      	blx	r3
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	6123      	str	r3, [r4, #16]
 800ab20:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab24:	fa5f fa8a 	uxtb.w	sl, sl
 800ab28:	f1ba 0f02 	cmp.w	sl, #2
 800ab2c:	d1ee      	bne.n	800ab0c <_scanf_float+0x2d4>
 800ab2e:	3d03      	subs	r5, #3
 800ab30:	b2ed      	uxtb	r5, r5
 800ab32:	1b76      	subs	r6, r6, r5
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	05da      	lsls	r2, r3, #23
 800ab38:	d530      	bpl.n	800ab9c <_scanf_float+0x364>
 800ab3a:	055b      	lsls	r3, r3, #21
 800ab3c:	d511      	bpl.n	800ab62 <_scanf_float+0x32a>
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	429e      	cmp	r6, r3
 800ab42:	f67f aebc 	bls.w	800a8be <_scanf_float+0x86>
 800ab46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab4e:	463a      	mov	r2, r7
 800ab50:	4640      	mov	r0, r8
 800ab52:	4798      	blx	r3
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	e7f0      	b.n	800ab3e <_scanf_float+0x306>
 800ab5c:	46aa      	mov	sl, r5
 800ab5e:	46b3      	mov	fp, r6
 800ab60:	e7de      	b.n	800ab20 <_scanf_float+0x2e8>
 800ab62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	2965      	cmp	r1, #101	@ 0x65
 800ab6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	d00c      	beq.n	800ab90 <_scanf_float+0x358>
 800ab76:	2945      	cmp	r1, #69	@ 0x45
 800ab78:	d00a      	beq.n	800ab90 <_scanf_float+0x358>
 800ab7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab7e:	463a      	mov	r2, r7
 800ab80:	4640      	mov	r0, r8
 800ab82:	4798      	blx	r3
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	1eb5      	subs	r5, r6, #2
 800ab8e:	6123      	str	r3, [r4, #16]
 800ab90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab94:	463a      	mov	r2, r7
 800ab96:	4640      	mov	r0, r8
 800ab98:	4798      	blx	r3
 800ab9a:	462e      	mov	r6, r5
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f012 0210 	ands.w	r2, r2, #16
 800aba2:	d001      	beq.n	800aba8 <_scanf_float+0x370>
 800aba4:	2000      	movs	r0, #0
 800aba6:	e68b      	b.n	800a8c0 <_scanf_float+0x88>
 800aba8:	7032      	strb	r2, [r6, #0]
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800abb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abb4:	d11c      	bne.n	800abf0 <_scanf_float+0x3b8>
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	454b      	cmp	r3, r9
 800abba:	eba3 0209 	sub.w	r2, r3, r9
 800abbe:	d123      	bne.n	800ac08 <_scanf_float+0x3d0>
 800abc0:	9901      	ldr	r1, [sp, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	4640      	mov	r0, r8
 800abc6:	f002 fcbb 	bl	800d540 <_strtod_r>
 800abca:	9b03      	ldr	r3, [sp, #12]
 800abcc:	6821      	ldr	r1, [r4, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f011 0f02 	tst.w	r1, #2
 800abd4:	ec57 6b10 	vmov	r6, r7, d0
 800abd8:	f103 0204 	add.w	r2, r3, #4
 800abdc:	d01f      	beq.n	800ac1e <_scanf_float+0x3e6>
 800abde:	9903      	ldr	r1, [sp, #12]
 800abe0:	600a      	str	r2, [r1, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	e9c3 6700 	strd	r6, r7, [r3]
 800abe8:	68e3      	ldr	r3, [r4, #12]
 800abea:	3301      	adds	r3, #1
 800abec:	60e3      	str	r3, [r4, #12]
 800abee:	e7d9      	b.n	800aba4 <_scanf_float+0x36c>
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0e4      	beq.n	800abc0 <_scanf_float+0x388>
 800abf6:	9905      	ldr	r1, [sp, #20]
 800abf8:	230a      	movs	r3, #10
 800abfa:	3101      	adds	r1, #1
 800abfc:	4640      	mov	r0, r8
 800abfe:	f002 fd1f 	bl	800d640 <_strtol_r>
 800ac02:	9b04      	ldr	r3, [sp, #16]
 800ac04:	9e05      	ldr	r6, [sp, #20]
 800ac06:	1ac2      	subs	r2, r0, r3
 800ac08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ac0c:	429e      	cmp	r6, r3
 800ac0e:	bf28      	it	cs
 800ac10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ac14:	4910      	ldr	r1, [pc, #64]	@ (800ac58 <_scanf_float+0x420>)
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f918 	bl	800ae4c <siprintf>
 800ac1c:	e7d0      	b.n	800abc0 <_scanf_float+0x388>
 800ac1e:	f011 0f04 	tst.w	r1, #4
 800ac22:	9903      	ldr	r1, [sp, #12]
 800ac24:	600a      	str	r2, [r1, #0]
 800ac26:	d1dc      	bne.n	800abe2 <_scanf_float+0x3aa>
 800ac28:	681d      	ldr	r5, [r3, #0]
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	463b      	mov	r3, r7
 800ac2e:	4630      	mov	r0, r6
 800ac30:	4639      	mov	r1, r7
 800ac32:	f7f5 ff8b 	bl	8000b4c <__aeabi_dcmpun>
 800ac36:	b128      	cbz	r0, 800ac44 <_scanf_float+0x40c>
 800ac38:	4808      	ldr	r0, [pc, #32]	@ (800ac5c <_scanf_float+0x424>)
 800ac3a:	f000 fa79 	bl	800b130 <nanf>
 800ac3e:	ed85 0a00 	vstr	s0, [r5]
 800ac42:	e7d1      	b.n	800abe8 <_scanf_float+0x3b0>
 800ac44:	4630      	mov	r0, r6
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 ffde 	bl	8000c08 <__aeabi_d2f>
 800ac4c:	6028      	str	r0, [r5, #0]
 800ac4e:	e7cb      	b.n	800abe8 <_scanf_float+0x3b0>
 800ac50:	f04f 0900 	mov.w	r9, #0
 800ac54:	e629      	b.n	800a8aa <_scanf_float+0x72>
 800ac56:	bf00      	nop
 800ac58:	08012464 	.word	0x08012464
 800ac5c:	080127fd 	.word	0x080127fd

0800ac60 <std>:
 800ac60:	2300      	movs	r3, #0
 800ac62:	b510      	push	{r4, lr}
 800ac64:	4604      	mov	r4, r0
 800ac66:	e9c0 3300 	strd	r3, r3, [r0]
 800ac6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac6e:	6083      	str	r3, [r0, #8]
 800ac70:	8181      	strh	r1, [r0, #12]
 800ac72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac74:	81c2      	strh	r2, [r0, #14]
 800ac76:	6183      	str	r3, [r0, #24]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	305c      	adds	r0, #92	@ 0x5c
 800ac7e:	f000 f9dd 	bl	800b03c <memset>
 800ac82:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <std+0x58>)
 800ac84:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac86:	4b0d      	ldr	r3, [pc, #52]	@ (800acbc <std+0x5c>)
 800ac88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac8a:	4b0d      	ldr	r3, [pc, #52]	@ (800acc0 <std+0x60>)
 800ac8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	@ (800acc4 <std+0x64>)
 800ac90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac92:	4b0d      	ldr	r3, [pc, #52]	@ (800acc8 <std+0x68>)
 800ac94:	6224      	str	r4, [r4, #32]
 800ac96:	429c      	cmp	r4, r3
 800ac98:	d006      	beq.n	800aca8 <std+0x48>
 800ac9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac9e:	4294      	cmp	r4, r2
 800aca0:	d002      	beq.n	800aca8 <std+0x48>
 800aca2:	33d0      	adds	r3, #208	@ 0xd0
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d105      	bne.n	800acb4 <std+0x54>
 800aca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb0:	f000 ba3a 	b.w	800b128 <__retarget_lock_init_recursive>
 800acb4:	bd10      	pop	{r4, pc}
 800acb6:	bf00      	nop
 800acb8:	0800ae8d 	.word	0x0800ae8d
 800acbc:	0800aeaf 	.word	0x0800aeaf
 800acc0:	0800aee7 	.word	0x0800aee7
 800acc4:	0800af0b 	.word	0x0800af0b
 800acc8:	20000854 	.word	0x20000854

0800accc <stdio_exit_handler>:
 800accc:	4a02      	ldr	r2, [pc, #8]	@ (800acd8 <stdio_exit_handler+0xc>)
 800acce:	4903      	ldr	r1, [pc, #12]	@ (800acdc <stdio_exit_handler+0x10>)
 800acd0:	4803      	ldr	r0, [pc, #12]	@ (800ace0 <stdio_exit_handler+0x14>)
 800acd2:	f000 b869 	b.w	800ada8 <_fwalk_sglue>
 800acd6:	bf00      	nop
 800acd8:	200000f8 	.word	0x200000f8
 800acdc:	0800d9fd 	.word	0x0800d9fd
 800ace0:	20000108 	.word	0x20000108

0800ace4 <cleanup_stdio>:
 800ace4:	6841      	ldr	r1, [r0, #4]
 800ace6:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <cleanup_stdio+0x34>)
 800ace8:	4299      	cmp	r1, r3
 800acea:	b510      	push	{r4, lr}
 800acec:	4604      	mov	r4, r0
 800acee:	d001      	beq.n	800acf4 <cleanup_stdio+0x10>
 800acf0:	f002 fe84 	bl	800d9fc <_fflush_r>
 800acf4:	68a1      	ldr	r1, [r4, #8]
 800acf6:	4b09      	ldr	r3, [pc, #36]	@ (800ad1c <cleanup_stdio+0x38>)
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d002      	beq.n	800ad02 <cleanup_stdio+0x1e>
 800acfc:	4620      	mov	r0, r4
 800acfe:	f002 fe7d 	bl	800d9fc <_fflush_r>
 800ad02:	68e1      	ldr	r1, [r4, #12]
 800ad04:	4b06      	ldr	r3, [pc, #24]	@ (800ad20 <cleanup_stdio+0x3c>)
 800ad06:	4299      	cmp	r1, r3
 800ad08:	d004      	beq.n	800ad14 <cleanup_stdio+0x30>
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad10:	f002 be74 	b.w	800d9fc <_fflush_r>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	bf00      	nop
 800ad18:	20000854 	.word	0x20000854
 800ad1c:	200008bc 	.word	0x200008bc
 800ad20:	20000924 	.word	0x20000924

0800ad24 <global_stdio_init.part.0>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4b0b      	ldr	r3, [pc, #44]	@ (800ad54 <global_stdio_init.part.0+0x30>)
 800ad28:	4c0b      	ldr	r4, [pc, #44]	@ (800ad58 <global_stdio_init.part.0+0x34>)
 800ad2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad5c <global_stdio_init.part.0+0x38>)
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	2200      	movs	r2, #0
 800ad32:	2104      	movs	r1, #4
 800ad34:	f7ff ff94 	bl	800ac60 <std>
 800ad38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	2109      	movs	r1, #9
 800ad40:	f7ff ff8e 	bl	800ac60 <std>
 800ad44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad48:	2202      	movs	r2, #2
 800ad4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad4e:	2112      	movs	r1, #18
 800ad50:	f7ff bf86 	b.w	800ac60 <std>
 800ad54:	2000098c 	.word	0x2000098c
 800ad58:	20000854 	.word	0x20000854
 800ad5c:	0800accd 	.word	0x0800accd

0800ad60 <__sfp_lock_acquire>:
 800ad60:	4801      	ldr	r0, [pc, #4]	@ (800ad68 <__sfp_lock_acquire+0x8>)
 800ad62:	f000 b9e2 	b.w	800b12a <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	20000995 	.word	0x20000995

0800ad6c <__sfp_lock_release>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	@ (800ad74 <__sfp_lock_release+0x8>)
 800ad6e:	f000 b9dd 	b.w	800b12c <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	20000995 	.word	0x20000995

0800ad78 <__sinit>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	f7ff fff0 	bl	800ad60 <__sfp_lock_acquire>
 800ad80:	6a23      	ldr	r3, [r4, #32]
 800ad82:	b11b      	cbz	r3, 800ad8c <__sinit+0x14>
 800ad84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad88:	f7ff bff0 	b.w	800ad6c <__sfp_lock_release>
 800ad8c:	4b04      	ldr	r3, [pc, #16]	@ (800ada0 <__sinit+0x28>)
 800ad8e:	6223      	str	r3, [r4, #32]
 800ad90:	4b04      	ldr	r3, [pc, #16]	@ (800ada4 <__sinit+0x2c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1f5      	bne.n	800ad84 <__sinit+0xc>
 800ad98:	f7ff ffc4 	bl	800ad24 <global_stdio_init.part.0>
 800ad9c:	e7f2      	b.n	800ad84 <__sinit+0xc>
 800ad9e:	bf00      	nop
 800ada0:	0800ace5 	.word	0x0800ace5
 800ada4:	2000098c 	.word	0x2000098c

0800ada8 <_fwalk_sglue>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	4607      	mov	r7, r0
 800adae:	4688      	mov	r8, r1
 800adb0:	4614      	mov	r4, r2
 800adb2:	2600      	movs	r6, #0
 800adb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb8:	f1b9 0901 	subs.w	r9, r9, #1
 800adbc:	d505      	bpl.n	800adca <_fwalk_sglue+0x22>
 800adbe:	6824      	ldr	r4, [r4, #0]
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	d1f7      	bne.n	800adb4 <_fwalk_sglue+0xc>
 800adc4:	4630      	mov	r0, r6
 800adc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d907      	bls.n	800ade0 <_fwalk_sglue+0x38>
 800add0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800add4:	3301      	adds	r3, #1
 800add6:	d003      	beq.n	800ade0 <_fwalk_sglue+0x38>
 800add8:	4629      	mov	r1, r5
 800adda:	4638      	mov	r0, r7
 800addc:	47c0      	blx	r8
 800adde:	4306      	orrs	r6, r0
 800ade0:	3568      	adds	r5, #104	@ 0x68
 800ade2:	e7e9      	b.n	800adb8 <_fwalk_sglue+0x10>

0800ade4 <sniprintf>:
 800ade4:	b40c      	push	{r2, r3}
 800ade6:	b530      	push	{r4, r5, lr}
 800ade8:	4b17      	ldr	r3, [pc, #92]	@ (800ae48 <sniprintf+0x64>)
 800adea:	1e0c      	subs	r4, r1, #0
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	b09d      	sub	sp, #116	@ 0x74
 800adf0:	da08      	bge.n	800ae04 <sniprintf+0x20>
 800adf2:	238b      	movs	r3, #139	@ 0x8b
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	f04f 30ff 	mov.w	r0, #4294967295
 800adfa:	b01d      	add	sp, #116	@ 0x74
 800adfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae00:	b002      	add	sp, #8
 800ae02:	4770      	bx	lr
 800ae04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae0c:	bf14      	ite	ne
 800ae0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae12:	4623      	moveq	r3, r4
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	9006      	str	r0, [sp, #24]
 800ae20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae26:	ab21      	add	r3, sp, #132	@ 0x84
 800ae28:	a902      	add	r1, sp, #8
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	f002 fc65 	bl	800d6fc <_svfiprintf_r>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	bfbc      	itt	lt
 800ae36:	238b      	movlt	r3, #139	@ 0x8b
 800ae38:	602b      	strlt	r3, [r5, #0]
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	d0dd      	beq.n	800adfa <sniprintf+0x16>
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	e7d9      	b.n	800adfa <sniprintf+0x16>
 800ae46:	bf00      	nop
 800ae48:	20000104 	.word	0x20000104

0800ae4c <siprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b500      	push	{lr}
 800ae50:	b09c      	sub	sp, #112	@ 0x70
 800ae52:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae54:	9002      	str	r0, [sp, #8]
 800ae56:	9006      	str	r0, [sp, #24]
 800ae58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae5c:	4809      	ldr	r0, [pc, #36]	@ (800ae84 <siprintf+0x38>)
 800ae5e:	9107      	str	r1, [sp, #28]
 800ae60:	9104      	str	r1, [sp, #16]
 800ae62:	4909      	ldr	r1, [pc, #36]	@ (800ae88 <siprintf+0x3c>)
 800ae64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae68:	9105      	str	r1, [sp, #20]
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	a902      	add	r1, sp, #8
 800ae70:	f002 fc44 	bl	800d6fc <_svfiprintf_r>
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	b01c      	add	sp, #112	@ 0x70
 800ae7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae80:	b003      	add	sp, #12
 800ae82:	4770      	bx	lr
 800ae84:	20000104 	.word	0x20000104
 800ae88:	ffff0208 	.word	0xffff0208

0800ae8c <__sread>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	f000 f900 	bl	800b098 <_read_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	bfab      	itete	ge
 800ae9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aea0:	181b      	addge	r3, r3, r0
 800aea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aea6:	bfac      	ite	ge
 800aea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeaa:	81a3      	strhlt	r3, [r4, #12]
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <__swrite>:
 800aeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	461f      	mov	r7, r3
 800aeb4:	898b      	ldrh	r3, [r1, #12]
 800aeb6:	05db      	lsls	r3, r3, #23
 800aeb8:	4605      	mov	r5, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	4616      	mov	r6, r2
 800aebe:	d505      	bpl.n	800aecc <__swrite+0x1e>
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	2302      	movs	r3, #2
 800aec6:	2200      	movs	r2, #0
 800aec8:	f000 f8d4 	bl	800b074 <_lseek_r>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	4632      	mov	r2, r6
 800aeda:	463b      	mov	r3, r7
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	f000 b8eb 	b.w	800b0bc <_write_r>

0800aee6 <__sseek>:
 800aee6:	b510      	push	{r4, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeee:	f000 f8c1 	bl	800b074 <_lseek_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	bf15      	itete	ne
 800aef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aefa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aefe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af02:	81a3      	strheq	r3, [r4, #12]
 800af04:	bf18      	it	ne
 800af06:	81a3      	strhne	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__sclose>:
 800af0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0e:	f000 b8a1 	b.w	800b054 <_close_r>

0800af12 <__swbuf_r>:
 800af12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af14:	460e      	mov	r6, r1
 800af16:	4614      	mov	r4, r2
 800af18:	4605      	mov	r5, r0
 800af1a:	b118      	cbz	r0, 800af24 <__swbuf_r+0x12>
 800af1c:	6a03      	ldr	r3, [r0, #32]
 800af1e:	b90b      	cbnz	r3, 800af24 <__swbuf_r+0x12>
 800af20:	f7ff ff2a 	bl	800ad78 <__sinit>
 800af24:	69a3      	ldr	r3, [r4, #24]
 800af26:	60a3      	str	r3, [r4, #8]
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	071a      	lsls	r2, r3, #28
 800af2c:	d501      	bpl.n	800af32 <__swbuf_r+0x20>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	b943      	cbnz	r3, 800af44 <__swbuf_r+0x32>
 800af32:	4621      	mov	r1, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 f82b 	bl	800af90 <__swsetup_r>
 800af3a:	b118      	cbz	r0, 800af44 <__swbuf_r+0x32>
 800af3c:	f04f 37ff 	mov.w	r7, #4294967295
 800af40:	4638      	mov	r0, r7
 800af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	1a98      	subs	r0, r3, r2
 800af4a:	6963      	ldr	r3, [r4, #20]
 800af4c:	b2f6      	uxtb	r6, r6
 800af4e:	4283      	cmp	r3, r0
 800af50:	4637      	mov	r7, r6
 800af52:	dc05      	bgt.n	800af60 <__swbuf_r+0x4e>
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f002 fd50 	bl	800d9fc <_fflush_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1ed      	bne.n	800af3c <__swbuf_r+0x2a>
 800af60:	68a3      	ldr	r3, [r4, #8]
 800af62:	3b01      	subs	r3, #1
 800af64:	60a3      	str	r3, [r4, #8]
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	6022      	str	r2, [r4, #0]
 800af6c:	701e      	strb	r6, [r3, #0]
 800af6e:	6962      	ldr	r2, [r4, #20]
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	429a      	cmp	r2, r3
 800af74:	d004      	beq.n	800af80 <__swbuf_r+0x6e>
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	07db      	lsls	r3, r3, #31
 800af7a:	d5e1      	bpl.n	800af40 <__swbuf_r+0x2e>
 800af7c:	2e0a      	cmp	r6, #10
 800af7e:	d1df      	bne.n	800af40 <__swbuf_r+0x2e>
 800af80:	4621      	mov	r1, r4
 800af82:	4628      	mov	r0, r5
 800af84:	f002 fd3a 	bl	800d9fc <_fflush_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0d9      	beq.n	800af40 <__swbuf_r+0x2e>
 800af8c:	e7d6      	b.n	800af3c <__swbuf_r+0x2a>
	...

0800af90 <__swsetup_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4b29      	ldr	r3, [pc, #164]	@ (800b038 <__swsetup_r+0xa8>)
 800af94:	4605      	mov	r5, r0
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	460c      	mov	r4, r1
 800af9a:	b118      	cbz	r0, 800afa4 <__swsetup_r+0x14>
 800af9c:	6a03      	ldr	r3, [r0, #32]
 800af9e:	b90b      	cbnz	r3, 800afa4 <__swsetup_r+0x14>
 800afa0:	f7ff feea 	bl	800ad78 <__sinit>
 800afa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa8:	0719      	lsls	r1, r3, #28
 800afaa:	d422      	bmi.n	800aff2 <__swsetup_r+0x62>
 800afac:	06da      	lsls	r2, r3, #27
 800afae:	d407      	bmi.n	800afc0 <__swsetup_r+0x30>
 800afb0:	2209      	movs	r2, #9
 800afb2:	602a      	str	r2, [r5, #0]
 800afb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	f04f 30ff 	mov.w	r0, #4294967295
 800afbe:	e033      	b.n	800b028 <__swsetup_r+0x98>
 800afc0:	0758      	lsls	r0, r3, #29
 800afc2:	d512      	bpl.n	800afea <__swsetup_r+0x5a>
 800afc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afc6:	b141      	cbz	r1, 800afda <__swsetup_r+0x4a>
 800afc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afcc:	4299      	cmp	r1, r3
 800afce:	d002      	beq.n	800afd6 <__swsetup_r+0x46>
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 ff01 	bl	800bdd8 <_free_r>
 800afd6:	2300      	movs	r3, #0
 800afd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	2300      	movs	r3, #0
 800afe4:	6063      	str	r3, [r4, #4]
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f043 0308 	orr.w	r3, r3, #8
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	6923      	ldr	r3, [r4, #16]
 800aff4:	b94b      	cbnz	r3, 800b00a <__swsetup_r+0x7a>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800affc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b000:	d003      	beq.n	800b00a <__swsetup_r+0x7a>
 800b002:	4621      	mov	r1, r4
 800b004:	4628      	mov	r0, r5
 800b006:	f002 fd47 	bl	800da98 <__smakebuf_r>
 800b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00e:	f013 0201 	ands.w	r2, r3, #1
 800b012:	d00a      	beq.n	800b02a <__swsetup_r+0x9a>
 800b014:	2200      	movs	r2, #0
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6962      	ldr	r2, [r4, #20]
 800b01a:	4252      	negs	r2, r2
 800b01c:	61a2      	str	r2, [r4, #24]
 800b01e:	6922      	ldr	r2, [r4, #16]
 800b020:	b942      	cbnz	r2, 800b034 <__swsetup_r+0xa4>
 800b022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b026:	d1c5      	bne.n	800afb4 <__swsetup_r+0x24>
 800b028:	bd38      	pop	{r3, r4, r5, pc}
 800b02a:	0799      	lsls	r1, r3, #30
 800b02c:	bf58      	it	pl
 800b02e:	6962      	ldrpl	r2, [r4, #20]
 800b030:	60a2      	str	r2, [r4, #8]
 800b032:	e7f4      	b.n	800b01e <__swsetup_r+0x8e>
 800b034:	2000      	movs	r0, #0
 800b036:	e7f7      	b.n	800b028 <__swsetup_r+0x98>
 800b038:	20000104 	.word	0x20000104

0800b03c <memset>:
 800b03c:	4402      	add	r2, r0
 800b03e:	4603      	mov	r3, r0
 800b040:	4293      	cmp	r3, r2
 800b042:	d100      	bne.n	800b046 <memset+0xa>
 800b044:	4770      	bx	lr
 800b046:	f803 1b01 	strb.w	r1, [r3], #1
 800b04a:	e7f9      	b.n	800b040 <memset+0x4>

0800b04c <_localeconv_r>:
 800b04c:	4800      	ldr	r0, [pc, #0]	@ (800b050 <_localeconv_r+0x4>)
 800b04e:	4770      	bx	lr
 800b050:	20000244 	.word	0x20000244

0800b054 <_close_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_close_r+0x1c>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f7f6 fbd6 	bl	8001810 <_close>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_close_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_close_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20000990 	.word	0x20000990

0800b074 <_lseek_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	@ (800b094 <_lseek_r+0x20>)
 800b078:	4604      	mov	r4, r0
 800b07a:	4608      	mov	r0, r1
 800b07c:	4611      	mov	r1, r2
 800b07e:	2200      	movs	r2, #0
 800b080:	602a      	str	r2, [r5, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	f7f6 fbcb 	bl	800181e <_lseek>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_lseek_r+0x1e>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_lseek_r+0x1e>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	20000990 	.word	0x20000990

0800b098 <_read_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	@ (800b0b8 <_read_r+0x20>)
 800b09c:	4604      	mov	r4, r0
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	602a      	str	r2, [r5, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f7f6 fbc0 	bl	800182c <_read>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_read_r+0x1e>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_read_r+0x1e>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20000990 	.word	0x20000990

0800b0bc <_write_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	@ (800b0dc <_write_r+0x20>)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f7f6 fbb5 	bl	800183a <_write>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_write_r+0x1e>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_write_r+0x1e>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20000990 	.word	0x20000990

0800b0e0 <__libc_init_array>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b118 <__libc_init_array+0x38>)
 800b0e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b11c <__libc_init_array+0x3c>)
 800b0e6:	1b64      	subs	r4, r4, r5
 800b0e8:	10a4      	asrs	r4, r4, #2
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	42a6      	cmp	r6, r4
 800b0ee:	d109      	bne.n	800b104 <__libc_init_array+0x24>
 800b0f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b120 <__libc_init_array+0x40>)
 800b0f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b124 <__libc_init_array+0x44>)
 800b0f4:	f003 fdbe 	bl	800ec74 <_init>
 800b0f8:	1b64      	subs	r4, r4, r5
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	42a6      	cmp	r6, r4
 800b100:	d105      	bne.n	800b10e <__libc_init_array+0x2e>
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	f855 3b04 	ldr.w	r3, [r5], #4
 800b108:	4798      	blx	r3
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7ee      	b.n	800b0ec <__libc_init_array+0xc>
 800b10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b112:	4798      	blx	r3
 800b114:	3601      	adds	r6, #1
 800b116:	e7f2      	b.n	800b0fe <__libc_init_array+0x1e>
 800b118:	080128a8 	.word	0x080128a8
 800b11c:	080128a8 	.word	0x080128a8
 800b120:	080128a8 	.word	0x080128a8
 800b124:	080128ac 	.word	0x080128ac

0800b128 <__retarget_lock_init_recursive>:
 800b128:	4770      	bx	lr

0800b12a <__retarget_lock_acquire_recursive>:
 800b12a:	4770      	bx	lr

0800b12c <__retarget_lock_release_recursive>:
 800b12c:	4770      	bx	lr
	...

0800b130 <nanf>:
 800b130:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b138 <nanf+0x8>
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	7fc00000 	.word	0x7fc00000

0800b13c <quorem>:
 800b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	6903      	ldr	r3, [r0, #16]
 800b142:	690c      	ldr	r4, [r1, #16]
 800b144:	42a3      	cmp	r3, r4
 800b146:	4607      	mov	r7, r0
 800b148:	db7e      	blt.n	800b248 <quorem+0x10c>
 800b14a:	3c01      	subs	r4, #1
 800b14c:	f101 0814 	add.w	r8, r1, #20
 800b150:	00a3      	lsls	r3, r4, #2
 800b152:	f100 0514 	add.w	r5, r0, #20
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b166:	3301      	adds	r3, #1
 800b168:	429a      	cmp	r2, r3
 800b16a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b16e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b172:	d32e      	bcc.n	800b1d2 <quorem+0x96>
 800b174:	f04f 0a00 	mov.w	sl, #0
 800b178:	46c4      	mov	ip, r8
 800b17a:	46ae      	mov	lr, r5
 800b17c:	46d3      	mov	fp, sl
 800b17e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b182:	b298      	uxth	r0, r3
 800b184:	fb06 a000 	mla	r0, r6, r0, sl
 800b188:	0c02      	lsrs	r2, r0, #16
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	fb06 2303 	mla	r3, r6, r3, r2
 800b190:	f8de 2000 	ldr.w	r2, [lr]
 800b194:	b280      	uxth	r0, r0
 800b196:	b292      	uxth	r2, r2
 800b198:	1a12      	subs	r2, r2, r0
 800b19a:	445a      	add	r2, fp
 800b19c:	f8de 0000 	ldr.w	r0, [lr]
 800b1a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b1aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b1b4:	45e1      	cmp	r9, ip
 800b1b6:	f84e 2b04 	str.w	r2, [lr], #4
 800b1ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b1be:	d2de      	bcs.n	800b17e <quorem+0x42>
 800b1c0:	9b00      	ldr	r3, [sp, #0]
 800b1c2:	58eb      	ldr	r3, [r5, r3]
 800b1c4:	b92b      	cbnz	r3, 800b1d2 <quorem+0x96>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	3b04      	subs	r3, #4
 800b1ca:	429d      	cmp	r5, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	d32f      	bcc.n	800b230 <quorem+0xf4>
 800b1d0:	613c      	str	r4, [r7, #16]
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f001 f9c4 	bl	800c560 <__mcmp>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	db25      	blt.n	800b228 <quorem+0xec>
 800b1dc:	4629      	mov	r1, r5
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1e4:	f8d1 c000 	ldr.w	ip, [r1]
 800b1e8:	fa1f fe82 	uxth.w	lr, r2
 800b1ec:	fa1f f38c 	uxth.w	r3, ip
 800b1f0:	eba3 030e 	sub.w	r3, r3, lr
 800b1f4:	4403      	add	r3, r0
 800b1f6:	0c12      	lsrs	r2, r2, #16
 800b1f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b200:	b29b      	uxth	r3, r3
 800b202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b206:	45c1      	cmp	r9, r8
 800b208:	f841 3b04 	str.w	r3, [r1], #4
 800b20c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b210:	d2e6      	bcs.n	800b1e0 <quorem+0xa4>
 800b212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b21a:	b922      	cbnz	r2, 800b226 <quorem+0xea>
 800b21c:	3b04      	subs	r3, #4
 800b21e:	429d      	cmp	r5, r3
 800b220:	461a      	mov	r2, r3
 800b222:	d30b      	bcc.n	800b23c <quorem+0x100>
 800b224:	613c      	str	r4, [r7, #16]
 800b226:	3601      	adds	r6, #1
 800b228:	4630      	mov	r0, r6
 800b22a:	b003      	add	sp, #12
 800b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b230:	6812      	ldr	r2, [r2, #0]
 800b232:	3b04      	subs	r3, #4
 800b234:	2a00      	cmp	r2, #0
 800b236:	d1cb      	bne.n	800b1d0 <quorem+0x94>
 800b238:	3c01      	subs	r4, #1
 800b23a:	e7c6      	b.n	800b1ca <quorem+0x8e>
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	3b04      	subs	r3, #4
 800b240:	2a00      	cmp	r2, #0
 800b242:	d1ef      	bne.n	800b224 <quorem+0xe8>
 800b244:	3c01      	subs	r4, #1
 800b246:	e7ea      	b.n	800b21e <quorem+0xe2>
 800b248:	2000      	movs	r0, #0
 800b24a:	e7ee      	b.n	800b22a <quorem+0xee>
 800b24c:	0000      	movs	r0, r0
	...

0800b250 <_dtoa_r>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	69c7      	ldr	r7, [r0, #28]
 800b256:	b099      	sub	sp, #100	@ 0x64
 800b258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b25c:	ec55 4b10 	vmov	r4, r5, d0
 800b260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b262:	9109      	str	r1, [sp, #36]	@ 0x24
 800b264:	4683      	mov	fp, r0
 800b266:	920e      	str	r2, [sp, #56]	@ 0x38
 800b268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b26a:	b97f      	cbnz	r7, 800b28c <_dtoa_r+0x3c>
 800b26c:	2010      	movs	r0, #16
 800b26e:	f000 fdfd 	bl	800be6c <malloc>
 800b272:	4602      	mov	r2, r0
 800b274:	f8cb 001c 	str.w	r0, [fp, #28]
 800b278:	b920      	cbnz	r0, 800b284 <_dtoa_r+0x34>
 800b27a:	4ba7      	ldr	r3, [pc, #668]	@ (800b518 <_dtoa_r+0x2c8>)
 800b27c:	21ef      	movs	r1, #239	@ 0xef
 800b27e:	48a7      	ldr	r0, [pc, #668]	@ (800b51c <_dtoa_r+0x2cc>)
 800b280:	f002 fcc2 	bl	800dc08 <__assert_func>
 800b284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b288:	6007      	str	r7, [r0, #0]
 800b28a:	60c7      	str	r7, [r0, #12]
 800b28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b290:	6819      	ldr	r1, [r3, #0]
 800b292:	b159      	cbz	r1, 800b2ac <_dtoa_r+0x5c>
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	604a      	str	r2, [r1, #4]
 800b298:	2301      	movs	r3, #1
 800b29a:	4093      	lsls	r3, r2
 800b29c:	608b      	str	r3, [r1, #8]
 800b29e:	4658      	mov	r0, fp
 800b2a0:	f000 feda 	bl	800c058 <_Bfree>
 800b2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	1e2b      	subs	r3, r5, #0
 800b2ae:	bfb9      	ittee	lt
 800b2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b2b4:	9303      	strlt	r3, [sp, #12]
 800b2b6:	2300      	movge	r3, #0
 800b2b8:	6033      	strge	r3, [r6, #0]
 800b2ba:	9f03      	ldr	r7, [sp, #12]
 800b2bc:	4b98      	ldr	r3, [pc, #608]	@ (800b520 <_dtoa_r+0x2d0>)
 800b2be:	bfbc      	itt	lt
 800b2c0:	2201      	movlt	r2, #1
 800b2c2:	6032      	strlt	r2, [r6, #0]
 800b2c4:	43bb      	bics	r3, r7
 800b2c6:	d112      	bne.n	800b2ee <_dtoa_r+0x9e>
 800b2c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b2ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2d4:	4323      	orrs	r3, r4
 800b2d6:	f000 854d 	beq.w	800bd74 <_dtoa_r+0xb24>
 800b2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b534 <_dtoa_r+0x2e4>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 854f 	beq.w	800bd84 <_dtoa_r+0xb34>
 800b2e6:	f10a 0303 	add.w	r3, sl, #3
 800b2ea:	f000 bd49 	b.w	800bd80 <_dtoa_r+0xb30>
 800b2ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	ec51 0b17 	vmov	r0, r1, d7
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b2fe:	f7f5 fbf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b302:	4680      	mov	r8, r0
 800b304:	b158      	cbz	r0, 800b31e <_dtoa_r+0xce>
 800b306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b308:	2301      	movs	r3, #1
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b30e:	b113      	cbz	r3, 800b316 <_dtoa_r+0xc6>
 800b310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b312:	4b84      	ldr	r3, [pc, #528]	@ (800b524 <_dtoa_r+0x2d4>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b538 <_dtoa_r+0x2e8>
 800b31a:	f000 bd33 	b.w	800bd84 <_dtoa_r+0xb34>
 800b31e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b322:	aa16      	add	r2, sp, #88	@ 0x58
 800b324:	a917      	add	r1, sp, #92	@ 0x5c
 800b326:	4658      	mov	r0, fp
 800b328:	f001 fa3a 	bl	800c7a0 <__d2b>
 800b32c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b330:	4681      	mov	r9, r0
 800b332:	2e00      	cmp	r6, #0
 800b334:	d077      	beq.n	800b426 <_dtoa_r+0x1d6>
 800b336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b34c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b350:	4619      	mov	r1, r3
 800b352:	2200      	movs	r2, #0
 800b354:	4b74      	ldr	r3, [pc, #464]	@ (800b528 <_dtoa_r+0x2d8>)
 800b356:	f7f4 ffa7 	bl	80002a8 <__aeabi_dsub>
 800b35a:	a369      	add	r3, pc, #420	@ (adr r3, 800b500 <_dtoa_r+0x2b0>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f5 f95a 	bl	8000618 <__aeabi_dmul>
 800b364:	a368      	add	r3, pc, #416	@ (adr r3, 800b508 <_dtoa_r+0x2b8>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f7f4 ff9f 	bl	80002ac <__adddf3>
 800b36e:	4604      	mov	r4, r0
 800b370:	4630      	mov	r0, r6
 800b372:	460d      	mov	r5, r1
 800b374:	f7f5 f8e6 	bl	8000544 <__aeabi_i2d>
 800b378:	a365      	add	r3, pc, #404	@ (adr r3, 800b510 <_dtoa_r+0x2c0>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	f7f5 f94b 	bl	8000618 <__aeabi_dmul>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4620      	mov	r0, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	f7f4 ff8f 	bl	80002ac <__adddf3>
 800b38e:	4604      	mov	r4, r0
 800b390:	460d      	mov	r5, r1
 800b392:	f7f5 fbf1 	bl	8000b78 <__aeabi_d2iz>
 800b396:	2200      	movs	r2, #0
 800b398:	4607      	mov	r7, r0
 800b39a:	2300      	movs	r3, #0
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 fbac 	bl	8000afc <__aeabi_dcmplt>
 800b3a4:	b140      	cbz	r0, 800b3b8 <_dtoa_r+0x168>
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f7f5 f8cc 	bl	8000544 <__aeabi_i2d>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3b4:	b900      	cbnz	r0, 800b3b8 <_dtoa_r+0x168>
 800b3b6:	3f01      	subs	r7, #1
 800b3b8:	2f16      	cmp	r7, #22
 800b3ba:	d851      	bhi.n	800b460 <_dtoa_r+0x210>
 800b3bc:	4b5b      	ldr	r3, [pc, #364]	@ (800b52c <_dtoa_r+0x2dc>)
 800b3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3ca:	f7f5 fb97 	bl	8000afc <__aeabi_dcmplt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d048      	beq.n	800b464 <_dtoa_r+0x214>
 800b3d2:	3f01      	subs	r7, #1
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b3da:	1b9b      	subs	r3, r3, r6
 800b3dc:	1e5a      	subs	r2, r3, #1
 800b3de:	bf44      	itt	mi
 800b3e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b3e4:	2300      	movmi	r3, #0
 800b3e6:	9208      	str	r2, [sp, #32]
 800b3e8:	bf54      	ite	pl
 800b3ea:	f04f 0800 	movpl.w	r8, #0
 800b3ee:	9308      	strmi	r3, [sp, #32]
 800b3f0:	2f00      	cmp	r7, #0
 800b3f2:	db39      	blt.n	800b468 <_dtoa_r+0x218>
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b3f8:	443b      	add	r3, r7
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b402:	2b09      	cmp	r3, #9
 800b404:	d864      	bhi.n	800b4d0 <_dtoa_r+0x280>
 800b406:	2b05      	cmp	r3, #5
 800b408:	bfc4      	itt	gt
 800b40a:	3b04      	subgt	r3, #4
 800b40c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b410:	f1a3 0302 	sub.w	r3, r3, #2
 800b414:	bfcc      	ite	gt
 800b416:	2400      	movgt	r4, #0
 800b418:	2401      	movle	r4, #1
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	d863      	bhi.n	800b4e6 <_dtoa_r+0x296>
 800b41e:	e8df f003 	tbb	[pc, r3]
 800b422:	372a      	.short	0x372a
 800b424:	5535      	.short	0x5535
 800b426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b42a:	441e      	add	r6, r3
 800b42c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b430:	2b20      	cmp	r3, #32
 800b432:	bfc1      	itttt	gt
 800b434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b438:	409f      	lslgt	r7, r3
 800b43a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b43e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b442:	bfd6      	itet	le
 800b444:	f1c3 0320 	rsble	r3, r3, #32
 800b448:	ea47 0003 	orrgt.w	r0, r7, r3
 800b44c:	fa04 f003 	lslle.w	r0, r4, r3
 800b450:	f7f5 f868 	bl	8000524 <__aeabi_ui2d>
 800b454:	2201      	movs	r2, #1
 800b456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b45a:	3e01      	subs	r6, #1
 800b45c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b45e:	e777      	b.n	800b350 <_dtoa_r+0x100>
 800b460:	2301      	movs	r3, #1
 800b462:	e7b8      	b.n	800b3d6 <_dtoa_r+0x186>
 800b464:	9012      	str	r0, [sp, #72]	@ 0x48
 800b466:	e7b7      	b.n	800b3d8 <_dtoa_r+0x188>
 800b468:	427b      	negs	r3, r7
 800b46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b46c:	2300      	movs	r3, #0
 800b46e:	eba8 0807 	sub.w	r8, r8, r7
 800b472:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b474:	e7c4      	b.n	800b400 <_dtoa_r+0x1b0>
 800b476:	2300      	movs	r3, #0
 800b478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dc35      	bgt.n	800b4ec <_dtoa_r+0x29c>
 800b480:	2301      	movs	r3, #1
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	461a      	mov	r2, r3
 800b488:	920e      	str	r2, [sp, #56]	@ 0x38
 800b48a:	e00b      	b.n	800b4a4 <_dtoa_r+0x254>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e7f3      	b.n	800b478 <_dtoa_r+0x228>
 800b490:	2300      	movs	r3, #0
 800b492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b496:	18fb      	adds	r3, r7, r3
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	3301      	adds	r3, #1
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	9307      	str	r3, [sp, #28]
 800b4a0:	bfb8      	it	lt
 800b4a2:	2301      	movlt	r3, #1
 800b4a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	2204      	movs	r2, #4
 800b4ac:	f102 0514 	add.w	r5, r2, #20
 800b4b0:	429d      	cmp	r5, r3
 800b4b2:	d91f      	bls.n	800b4f4 <_dtoa_r+0x2a4>
 800b4b4:	6041      	str	r1, [r0, #4]
 800b4b6:	4658      	mov	r0, fp
 800b4b8:	f000 fd8e 	bl	800bfd8 <_Balloc>
 800b4bc:	4682      	mov	sl, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d13c      	bne.n	800b53c <_dtoa_r+0x2ec>
 800b4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b530 <_dtoa_r+0x2e0>)
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b4ca:	e6d8      	b.n	800b27e <_dtoa_r+0x2e>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e7e0      	b.n	800b492 <_dtoa_r+0x242>
 800b4d0:	2401      	movs	r4, #1
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2312      	movs	r3, #18
 800b4e4:	e7d0      	b.n	800b488 <_dtoa_r+0x238>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4ea:	e7f5      	b.n	800b4d8 <_dtoa_r+0x288>
 800b4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	9307      	str	r3, [sp, #28]
 800b4f2:	e7d7      	b.n	800b4a4 <_dtoa_r+0x254>
 800b4f4:	3101      	adds	r1, #1
 800b4f6:	0052      	lsls	r2, r2, #1
 800b4f8:	e7d8      	b.n	800b4ac <_dtoa_r+0x25c>
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w
 800b500:	636f4361 	.word	0x636f4361
 800b504:	3fd287a7 	.word	0x3fd287a7
 800b508:	8b60c8b3 	.word	0x8b60c8b3
 800b50c:	3fc68a28 	.word	0x3fc68a28
 800b510:	509f79fb 	.word	0x509f79fb
 800b514:	3fd34413 	.word	0x3fd34413
 800b518:	08012476 	.word	0x08012476
 800b51c:	0801248d 	.word	0x0801248d
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	08012441 	.word	0x08012441
 800b528:	3ff80000 	.word	0x3ff80000
 800b52c:	08012588 	.word	0x08012588
 800b530:	080124e5 	.word	0x080124e5
 800b534:	08012472 	.word	0x08012472
 800b538:	08012440 	.word	0x08012440
 800b53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b540:	6018      	str	r0, [r3, #0]
 800b542:	9b07      	ldr	r3, [sp, #28]
 800b544:	2b0e      	cmp	r3, #14
 800b546:	f200 80a4 	bhi.w	800b692 <_dtoa_r+0x442>
 800b54a:	2c00      	cmp	r4, #0
 800b54c:	f000 80a1 	beq.w	800b692 <_dtoa_r+0x442>
 800b550:	2f00      	cmp	r7, #0
 800b552:	dd33      	ble.n	800b5bc <_dtoa_r+0x36c>
 800b554:	4bad      	ldr	r3, [pc, #692]	@ (800b80c <_dtoa_r+0x5bc>)
 800b556:	f007 020f 	and.w	r2, r7, #15
 800b55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b55e:	ed93 7b00 	vldr	d7, [r3]
 800b562:	05f8      	lsls	r0, r7, #23
 800b564:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b56c:	d516      	bpl.n	800b59c <_dtoa_r+0x34c>
 800b56e:	4ba8      	ldr	r3, [pc, #672]	@ (800b810 <_dtoa_r+0x5c0>)
 800b570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b578:	f7f5 f978 	bl	800086c <__aeabi_ddiv>
 800b57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b580:	f004 040f 	and.w	r4, r4, #15
 800b584:	2603      	movs	r6, #3
 800b586:	4da2      	ldr	r5, [pc, #648]	@ (800b810 <_dtoa_r+0x5c0>)
 800b588:	b954      	cbnz	r4, 800b5a0 <_dtoa_r+0x350>
 800b58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b592:	f7f5 f96b 	bl	800086c <__aeabi_ddiv>
 800b596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b59a:	e028      	b.n	800b5ee <_dtoa_r+0x39e>
 800b59c:	2602      	movs	r6, #2
 800b59e:	e7f2      	b.n	800b586 <_dtoa_r+0x336>
 800b5a0:	07e1      	lsls	r1, r4, #31
 800b5a2:	d508      	bpl.n	800b5b6 <_dtoa_r+0x366>
 800b5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5ac:	f7f5 f834 	bl	8000618 <__aeabi_dmul>
 800b5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5b4:	3601      	adds	r6, #1
 800b5b6:	1064      	asrs	r4, r4, #1
 800b5b8:	3508      	adds	r5, #8
 800b5ba:	e7e5      	b.n	800b588 <_dtoa_r+0x338>
 800b5bc:	f000 80d2 	beq.w	800b764 <_dtoa_r+0x514>
 800b5c0:	427c      	negs	r4, r7
 800b5c2:	4b92      	ldr	r3, [pc, #584]	@ (800b80c <_dtoa_r+0x5bc>)
 800b5c4:	4d92      	ldr	r5, [pc, #584]	@ (800b810 <_dtoa_r+0x5c0>)
 800b5c6:	f004 020f 	and.w	r2, r4, #15
 800b5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d6:	f7f5 f81f 	bl	8000618 <__aeabi_dmul>
 800b5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5de:	1124      	asrs	r4, r4, #4
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2602      	movs	r6, #2
 800b5e4:	2c00      	cmp	r4, #0
 800b5e6:	f040 80b2 	bne.w	800b74e <_dtoa_r+0x4fe>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1d3      	bne.n	800b596 <_dtoa_r+0x346>
 800b5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80b7 	beq.w	800b768 <_dtoa_r+0x518>
 800b5fa:	4b86      	ldr	r3, [pc, #536]	@ (800b814 <_dtoa_r+0x5c4>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f5 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800b606:	2800      	cmp	r0, #0
 800b608:	f000 80ae 	beq.w	800b768 <_dtoa_r+0x518>
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 80aa 	beq.w	800b768 <_dtoa_r+0x518>
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	dd37      	ble.n	800b68a <_dtoa_r+0x43a>
 800b61a:	1e7b      	subs	r3, r7, #1
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	4620      	mov	r0, r4
 800b620:	4b7d      	ldr	r3, [pc, #500]	@ (800b818 <_dtoa_r+0x5c8>)
 800b622:	2200      	movs	r2, #0
 800b624:	4629      	mov	r1, r5
 800b626:	f7f4 fff7 	bl	8000618 <__aeabi_dmul>
 800b62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b62e:	9c00      	ldr	r4, [sp, #0]
 800b630:	3601      	adds	r6, #1
 800b632:	4630      	mov	r0, r6
 800b634:	f7f4 ff86 	bl	8000544 <__aeabi_i2d>
 800b638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b63c:	f7f4 ffec 	bl	8000618 <__aeabi_dmul>
 800b640:	4b76      	ldr	r3, [pc, #472]	@ (800b81c <_dtoa_r+0x5cc>)
 800b642:	2200      	movs	r2, #0
 800b644:	f7f4 fe32 	bl	80002ac <__adddf3>
 800b648:	4605      	mov	r5, r0
 800b64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b64e:	2c00      	cmp	r4, #0
 800b650:	f040 808d 	bne.w	800b76e <_dtoa_r+0x51e>
 800b654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b658:	4b71      	ldr	r3, [pc, #452]	@ (800b820 <_dtoa_r+0x5d0>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	f7f4 fe24 	bl	80002a8 <__aeabi_dsub>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b668:	462a      	mov	r2, r5
 800b66a:	4633      	mov	r3, r6
 800b66c:	f7f5 fa64 	bl	8000b38 <__aeabi_dcmpgt>
 800b670:	2800      	cmp	r0, #0
 800b672:	f040 828b 	bne.w	800bb8c <_dtoa_r+0x93c>
 800b676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b67a:	462a      	mov	r2, r5
 800b67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b680:	f7f5 fa3c 	bl	8000afc <__aeabi_dcmplt>
 800b684:	2800      	cmp	r0, #0
 800b686:	f040 8128 	bne.w	800b8da <_dtoa_r+0x68a>
 800b68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b694:	2b00      	cmp	r3, #0
 800b696:	f2c0 815a 	blt.w	800b94e <_dtoa_r+0x6fe>
 800b69a:	2f0e      	cmp	r7, #14
 800b69c:	f300 8157 	bgt.w	800b94e <_dtoa_r+0x6fe>
 800b6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800b80c <_dtoa_r+0x5bc>)
 800b6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6a6:	ed93 7b00 	vldr	d7, [r3]
 800b6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	ed8d 7b00 	vstr	d7, [sp]
 800b6b2:	da03      	bge.n	800b6bc <_dtoa_r+0x46c>
 800b6b4:	9b07      	ldr	r3, [sp, #28]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f340 8101 	ble.w	800b8be <_dtoa_r+0x66e>
 800b6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b6c0:	4656      	mov	r6, sl
 800b6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	f7f5 f8cf 	bl	800086c <__aeabi_ddiv>
 800b6ce:	f7f5 fa53 	bl	8000b78 <__aeabi_d2iz>
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	f7f4 ff36 	bl	8000544 <__aeabi_i2d>
 800b6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6dc:	f7f4 ff9c 	bl	8000618 <__aeabi_dmul>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b6ec:	f7f4 fddc 	bl	80002a8 <__aeabi_dsub>
 800b6f0:	f806 4b01 	strb.w	r4, [r6], #1
 800b6f4:	9d07      	ldr	r5, [sp, #28]
 800b6f6:	eba6 040a 	sub.w	r4, r6, sl
 800b6fa:	42a5      	cmp	r5, r4
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	f040 8117 	bne.w	800b932 <_dtoa_r+0x6e2>
 800b704:	f7f4 fdd2 	bl	80002ac <__adddf3>
 800b708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b70c:	4604      	mov	r4, r0
 800b70e:	460d      	mov	r5, r1
 800b710:	f7f5 fa12 	bl	8000b38 <__aeabi_dcmpgt>
 800b714:	2800      	cmp	r0, #0
 800b716:	f040 80f9 	bne.w	800b90c <_dtoa_r+0x6bc>
 800b71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f5 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b726:	b118      	cbz	r0, 800b730 <_dtoa_r+0x4e0>
 800b728:	f018 0f01 	tst.w	r8, #1
 800b72c:	f040 80ee 	bne.w	800b90c <_dtoa_r+0x6bc>
 800b730:	4649      	mov	r1, r9
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fc90 	bl	800c058 <_Bfree>
 800b738:	2300      	movs	r3, #0
 800b73a:	7033      	strb	r3, [r6, #0]
 800b73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b73e:	3701      	adds	r7, #1
 800b740:	601f      	str	r7, [r3, #0]
 800b742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 831d 	beq.w	800bd84 <_dtoa_r+0xb34>
 800b74a:	601e      	str	r6, [r3, #0]
 800b74c:	e31a      	b.n	800bd84 <_dtoa_r+0xb34>
 800b74e:	07e2      	lsls	r2, r4, #31
 800b750:	d505      	bpl.n	800b75e <_dtoa_r+0x50e>
 800b752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b756:	f7f4 ff5f 	bl	8000618 <__aeabi_dmul>
 800b75a:	3601      	adds	r6, #1
 800b75c:	2301      	movs	r3, #1
 800b75e:	1064      	asrs	r4, r4, #1
 800b760:	3508      	adds	r5, #8
 800b762:	e73f      	b.n	800b5e4 <_dtoa_r+0x394>
 800b764:	2602      	movs	r6, #2
 800b766:	e742      	b.n	800b5ee <_dtoa_r+0x39e>
 800b768:	9c07      	ldr	r4, [sp, #28]
 800b76a:	9704      	str	r7, [sp, #16]
 800b76c:	e761      	b.n	800b632 <_dtoa_r+0x3e2>
 800b76e:	4b27      	ldr	r3, [pc, #156]	@ (800b80c <_dtoa_r+0x5bc>)
 800b770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b77a:	4454      	add	r4, sl
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d053      	beq.n	800b828 <_dtoa_r+0x5d8>
 800b780:	4928      	ldr	r1, [pc, #160]	@ (800b824 <_dtoa_r+0x5d4>)
 800b782:	2000      	movs	r0, #0
 800b784:	f7f5 f872 	bl	800086c <__aeabi_ddiv>
 800b788:	4633      	mov	r3, r6
 800b78a:	462a      	mov	r2, r5
 800b78c:	f7f4 fd8c 	bl	80002a8 <__aeabi_dsub>
 800b790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b794:	4656      	mov	r6, sl
 800b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79a:	f7f5 f9ed 	bl	8000b78 <__aeabi_d2iz>
 800b79e:	4605      	mov	r5, r0
 800b7a0:	f7f4 fed0 	bl	8000544 <__aeabi_i2d>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ac:	f7f4 fd7c 	bl	80002a8 <__aeabi_dsub>
 800b7b0:	3530      	adds	r5, #48	@ 0x30
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7ba:	f806 5b01 	strb.w	r5, [r6], #1
 800b7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7c2:	f7f5 f99b 	bl	8000afc <__aeabi_dcmplt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d171      	bne.n	800b8ae <_dtoa_r+0x65e>
 800b7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7ce:	4911      	ldr	r1, [pc, #68]	@ (800b814 <_dtoa_r+0x5c4>)
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f7f4 fd69 	bl	80002a8 <__aeabi_dsub>
 800b7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7da:	f7f5 f98f 	bl	8000afc <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f040 8095 	bne.w	800b90e <_dtoa_r+0x6be>
 800b7e4:	42a6      	cmp	r6, r4
 800b7e6:	f43f af50 	beq.w	800b68a <_dtoa_r+0x43a>
 800b7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <_dtoa_r+0x5c8>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f7f4 ff11 	bl	8000618 <__aeabi_dmul>
 800b7f6:	4b08      	ldr	r3, [pc, #32]	@ (800b818 <_dtoa_r+0x5c8>)
 800b7f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b802:	f7f4 ff09 	bl	8000618 <__aeabi_dmul>
 800b806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b80a:	e7c4      	b.n	800b796 <_dtoa_r+0x546>
 800b80c:	08012588 	.word	0x08012588
 800b810:	08012560 	.word	0x08012560
 800b814:	3ff00000 	.word	0x3ff00000
 800b818:	40240000 	.word	0x40240000
 800b81c:	401c0000 	.word	0x401c0000
 800b820:	40140000 	.word	0x40140000
 800b824:	3fe00000 	.word	0x3fe00000
 800b828:	4631      	mov	r1, r6
 800b82a:	4628      	mov	r0, r5
 800b82c:	f7f4 fef4 	bl	8000618 <__aeabi_dmul>
 800b830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b834:	9415      	str	r4, [sp, #84]	@ 0x54
 800b836:	4656      	mov	r6, sl
 800b838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b83c:	f7f5 f99c 	bl	8000b78 <__aeabi_d2iz>
 800b840:	4605      	mov	r5, r0
 800b842:	f7f4 fe7f 	bl	8000544 <__aeabi_i2d>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84e:	f7f4 fd2b 	bl	80002a8 <__aeabi_dsub>
 800b852:	3530      	adds	r5, #48	@ 0x30
 800b854:	f806 5b01 	strb.w	r5, [r6], #1
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	42a6      	cmp	r6, r4
 800b85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b862:	f04f 0200 	mov.w	r2, #0
 800b866:	d124      	bne.n	800b8b2 <_dtoa_r+0x662>
 800b868:	4bac      	ldr	r3, [pc, #688]	@ (800bb1c <_dtoa_r+0x8cc>)
 800b86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b86e:	f7f4 fd1d 	bl	80002ac <__adddf3>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f5 f95d 	bl	8000b38 <__aeabi_dcmpgt>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d145      	bne.n	800b90e <_dtoa_r+0x6be>
 800b882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b886:	49a5      	ldr	r1, [pc, #660]	@ (800bb1c <_dtoa_r+0x8cc>)
 800b888:	2000      	movs	r0, #0
 800b88a:	f7f4 fd0d 	bl	80002a8 <__aeabi_dsub>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b896:	f7f5 f931 	bl	8000afc <__aeabi_dcmplt>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	f43f aef5 	beq.w	800b68a <_dtoa_r+0x43a>
 800b8a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b8a2:	1e73      	subs	r3, r6, #1
 800b8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8aa:	2b30      	cmp	r3, #48	@ 0x30
 800b8ac:	d0f8      	beq.n	800b8a0 <_dtoa_r+0x650>
 800b8ae:	9f04      	ldr	r7, [sp, #16]
 800b8b0:	e73e      	b.n	800b730 <_dtoa_r+0x4e0>
 800b8b2:	4b9b      	ldr	r3, [pc, #620]	@ (800bb20 <_dtoa_r+0x8d0>)
 800b8b4:	f7f4 feb0 	bl	8000618 <__aeabi_dmul>
 800b8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8bc:	e7bc      	b.n	800b838 <_dtoa_r+0x5e8>
 800b8be:	d10c      	bne.n	800b8da <_dtoa_r+0x68a>
 800b8c0:	4b98      	ldr	r3, [pc, #608]	@ (800bb24 <_dtoa_r+0x8d4>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c8:	f7f4 fea6 	bl	8000618 <__aeabi_dmul>
 800b8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8d0:	f7f5 f928 	bl	8000b24 <__aeabi_dcmpge>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	f000 8157 	beq.w	800bb88 <_dtoa_r+0x938>
 800b8da:	2400      	movs	r4, #0
 800b8dc:	4625      	mov	r5, r4
 800b8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	4656      	mov	r6, sl
 800b8e6:	2700      	movs	r7, #0
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4658      	mov	r0, fp
 800b8ec:	f000 fbb4 	bl	800c058 <_Bfree>
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	d0dc      	beq.n	800b8ae <_dtoa_r+0x65e>
 800b8f4:	b12f      	cbz	r7, 800b902 <_dtoa_r+0x6b2>
 800b8f6:	42af      	cmp	r7, r5
 800b8f8:	d003      	beq.n	800b902 <_dtoa_r+0x6b2>
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	f000 fbab 	bl	800c058 <_Bfree>
 800b902:	4629      	mov	r1, r5
 800b904:	4658      	mov	r0, fp
 800b906:	f000 fba7 	bl	800c058 <_Bfree>
 800b90a:	e7d0      	b.n	800b8ae <_dtoa_r+0x65e>
 800b90c:	9704      	str	r7, [sp, #16]
 800b90e:	4633      	mov	r3, r6
 800b910:	461e      	mov	r6, r3
 800b912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b916:	2a39      	cmp	r2, #57	@ 0x39
 800b918:	d107      	bne.n	800b92a <_dtoa_r+0x6da>
 800b91a:	459a      	cmp	sl, r3
 800b91c:	d1f8      	bne.n	800b910 <_dtoa_r+0x6c0>
 800b91e:	9a04      	ldr	r2, [sp, #16]
 800b920:	3201      	adds	r2, #1
 800b922:	9204      	str	r2, [sp, #16]
 800b924:	2230      	movs	r2, #48	@ 0x30
 800b926:	f88a 2000 	strb.w	r2, [sl]
 800b92a:	781a      	ldrb	r2, [r3, #0]
 800b92c:	3201      	adds	r2, #1
 800b92e:	701a      	strb	r2, [r3, #0]
 800b930:	e7bd      	b.n	800b8ae <_dtoa_r+0x65e>
 800b932:	4b7b      	ldr	r3, [pc, #492]	@ (800bb20 <_dtoa_r+0x8d0>)
 800b934:	2200      	movs	r2, #0
 800b936:	f7f4 fe6f 	bl	8000618 <__aeabi_dmul>
 800b93a:	2200      	movs	r2, #0
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	460d      	mov	r5, r1
 800b942:	f7f5 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b946:	2800      	cmp	r0, #0
 800b948:	f43f aebb 	beq.w	800b6c2 <_dtoa_r+0x472>
 800b94c:	e6f0      	b.n	800b730 <_dtoa_r+0x4e0>
 800b94e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b950:	2a00      	cmp	r2, #0
 800b952:	f000 80db 	beq.w	800bb0c <_dtoa_r+0x8bc>
 800b956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b958:	2a01      	cmp	r2, #1
 800b95a:	f300 80bf 	bgt.w	800badc <_dtoa_r+0x88c>
 800b95e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b960:	2a00      	cmp	r2, #0
 800b962:	f000 80b7 	beq.w	800bad4 <_dtoa_r+0x884>
 800b966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b96c:	4646      	mov	r6, r8
 800b96e:	9a08      	ldr	r2, [sp, #32]
 800b970:	2101      	movs	r1, #1
 800b972:	441a      	add	r2, r3
 800b974:	4658      	mov	r0, fp
 800b976:	4498      	add	r8, r3
 800b978:	9208      	str	r2, [sp, #32]
 800b97a:	f000 fc6b 	bl	800c254 <__i2b>
 800b97e:	4605      	mov	r5, r0
 800b980:	b15e      	cbz	r6, 800b99a <_dtoa_r+0x74a>
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	2b00      	cmp	r3, #0
 800b986:	dd08      	ble.n	800b99a <_dtoa_r+0x74a>
 800b988:	42b3      	cmp	r3, r6
 800b98a:	9a08      	ldr	r2, [sp, #32]
 800b98c:	bfa8      	it	ge
 800b98e:	4633      	movge	r3, r6
 800b990:	eba8 0803 	sub.w	r8, r8, r3
 800b994:	1af6      	subs	r6, r6, r3
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	9308      	str	r3, [sp, #32]
 800b99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b99c:	b1f3      	cbz	r3, 800b9dc <_dtoa_r+0x78c>
 800b99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 80b7 	beq.w	800bb14 <_dtoa_r+0x8c4>
 800b9a6:	b18c      	cbz	r4, 800b9cc <_dtoa_r+0x77c>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	4658      	mov	r0, fp
 800b9ae:	f000 fd11 	bl	800c3d4 <__pow5mult>
 800b9b2:	464a      	mov	r2, r9
 800b9b4:	4601      	mov	r1, r0
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	4658      	mov	r0, fp
 800b9ba:	f000 fc61 	bl	800c280 <__multiply>
 800b9be:	4649      	mov	r1, r9
 800b9c0:	9004      	str	r0, [sp, #16]
 800b9c2:	4658      	mov	r0, fp
 800b9c4:	f000 fb48 	bl	800c058 <_Bfree>
 800b9c8:	9b04      	ldr	r3, [sp, #16]
 800b9ca:	4699      	mov	r9, r3
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ce:	1b1a      	subs	r2, r3, r4
 800b9d0:	d004      	beq.n	800b9dc <_dtoa_r+0x78c>
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	4658      	mov	r0, fp
 800b9d6:	f000 fcfd 	bl	800c3d4 <__pow5mult>
 800b9da:	4681      	mov	r9, r0
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4658      	mov	r0, fp
 800b9e0:	f000 fc38 	bl	800c254 <__i2b>
 800b9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 81cf 	beq.w	800bd8c <_dtoa_r+0xb3c>
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	4601      	mov	r1, r0
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 fcee 	bl	800c3d4 <__pow5mult>
 800b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	f300 8095 	bgt.w	800bb2c <_dtoa_r+0x8dc>
 800ba02:	9b02      	ldr	r3, [sp, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f040 8087 	bne.w	800bb18 <_dtoa_r+0x8c8>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f040 8089 	bne.w	800bb28 <_dtoa_r+0x8d8>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba1c:	0d1b      	lsrs	r3, r3, #20
 800ba1e:	051b      	lsls	r3, r3, #20
 800ba20:	b12b      	cbz	r3, 800ba2e <_dtoa_r+0x7de>
 800ba22:	9b08      	ldr	r3, [sp, #32]
 800ba24:	3301      	adds	r3, #1
 800ba26:	9308      	str	r3, [sp, #32]
 800ba28:	f108 0801 	add.w	r8, r8, #1
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 81b0 	beq.w	800bd98 <_dtoa_r+0xb48>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba3e:	6918      	ldr	r0, [r3, #16]
 800ba40:	f000 fbbc 	bl	800c1bc <__hi0bits>
 800ba44:	f1c0 0020 	rsb	r0, r0, #32
 800ba48:	9b08      	ldr	r3, [sp, #32]
 800ba4a:	4418      	add	r0, r3
 800ba4c:	f010 001f 	ands.w	r0, r0, #31
 800ba50:	d077      	beq.n	800bb42 <_dtoa_r+0x8f2>
 800ba52:	f1c0 0320 	rsb	r3, r0, #32
 800ba56:	2b04      	cmp	r3, #4
 800ba58:	dd6b      	ble.n	800bb32 <_dtoa_r+0x8e2>
 800ba5a:	9b08      	ldr	r3, [sp, #32]
 800ba5c:	f1c0 001c 	rsb	r0, r0, #28
 800ba60:	4403      	add	r3, r0
 800ba62:	4480      	add	r8, r0
 800ba64:	4406      	add	r6, r0
 800ba66:	9308      	str	r3, [sp, #32]
 800ba68:	f1b8 0f00 	cmp.w	r8, #0
 800ba6c:	dd05      	ble.n	800ba7a <_dtoa_r+0x82a>
 800ba6e:	4649      	mov	r1, r9
 800ba70:	4642      	mov	r2, r8
 800ba72:	4658      	mov	r0, fp
 800ba74:	f000 fd08 	bl	800c488 <__lshift>
 800ba78:	4681      	mov	r9, r0
 800ba7a:	9b08      	ldr	r3, [sp, #32]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dd05      	ble.n	800ba8c <_dtoa_r+0x83c>
 800ba80:	4621      	mov	r1, r4
 800ba82:	461a      	mov	r2, r3
 800ba84:	4658      	mov	r0, fp
 800ba86:	f000 fcff 	bl	800c488 <__lshift>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d059      	beq.n	800bb46 <_dtoa_r+0x8f6>
 800ba92:	4621      	mov	r1, r4
 800ba94:	4648      	mov	r0, r9
 800ba96:	f000 fd63 	bl	800c560 <__mcmp>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	da53      	bge.n	800bb46 <_dtoa_r+0x8f6>
 800ba9e:	1e7b      	subs	r3, r7, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	4649      	mov	r1, r9
 800baa4:	2300      	movs	r3, #0
 800baa6:	220a      	movs	r2, #10
 800baa8:	4658      	mov	r0, fp
 800baaa:	f000 faf7 	bl	800c09c <__multadd>
 800baae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bab0:	4681      	mov	r9, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 8172 	beq.w	800bd9c <_dtoa_r+0xb4c>
 800bab8:	2300      	movs	r3, #0
 800baba:	4629      	mov	r1, r5
 800babc:	220a      	movs	r2, #10
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 faec 	bl	800c09c <__multadd>
 800bac4:	9b00      	ldr	r3, [sp, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	4605      	mov	r5, r0
 800baca:	dc67      	bgt.n	800bb9c <_dtoa_r+0x94c>
 800bacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bace:	2b02      	cmp	r3, #2
 800bad0:	dc41      	bgt.n	800bb56 <_dtoa_r+0x906>
 800bad2:	e063      	b.n	800bb9c <_dtoa_r+0x94c>
 800bad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bada:	e746      	b.n	800b96a <_dtoa_r+0x71a>
 800badc:	9b07      	ldr	r3, [sp, #28]
 800bade:	1e5c      	subs	r4, r3, #1
 800bae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bae2:	42a3      	cmp	r3, r4
 800bae4:	bfbf      	itttt	lt
 800bae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800baea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800baec:	1ae3      	sublt	r3, r4, r3
 800baee:	bfb4      	ite	lt
 800baf0:	18d2      	addlt	r2, r2, r3
 800baf2:	1b1c      	subge	r4, r3, r4
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	bfbc      	itt	lt
 800baf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bafa:	2400      	movlt	r4, #0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	bfb5      	itete	lt
 800bb00:	eba8 0603 	sublt.w	r6, r8, r3
 800bb04:	9b07      	ldrge	r3, [sp, #28]
 800bb06:	2300      	movlt	r3, #0
 800bb08:	4646      	movge	r6, r8
 800bb0a:	e730      	b.n	800b96e <_dtoa_r+0x71e>
 800bb0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb10:	4646      	mov	r6, r8
 800bb12:	e735      	b.n	800b980 <_dtoa_r+0x730>
 800bb14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb16:	e75c      	b.n	800b9d2 <_dtoa_r+0x782>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e788      	b.n	800ba2e <_dtoa_r+0x7de>
 800bb1c:	3fe00000 	.word	0x3fe00000
 800bb20:	40240000 	.word	0x40240000
 800bb24:	40140000 	.word	0x40140000
 800bb28:	9b02      	ldr	r3, [sp, #8]
 800bb2a:	e780      	b.n	800ba2e <_dtoa_r+0x7de>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb30:	e782      	b.n	800ba38 <_dtoa_r+0x7e8>
 800bb32:	d099      	beq.n	800ba68 <_dtoa_r+0x818>
 800bb34:	9a08      	ldr	r2, [sp, #32]
 800bb36:	331c      	adds	r3, #28
 800bb38:	441a      	add	r2, r3
 800bb3a:	4498      	add	r8, r3
 800bb3c:	441e      	add	r6, r3
 800bb3e:	9208      	str	r2, [sp, #32]
 800bb40:	e792      	b.n	800ba68 <_dtoa_r+0x818>
 800bb42:	4603      	mov	r3, r0
 800bb44:	e7f6      	b.n	800bb34 <_dtoa_r+0x8e4>
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	9704      	str	r7, [sp, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dc20      	bgt.n	800bb90 <_dtoa_r+0x940>
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	dd1e      	ble.n	800bb94 <_dtoa_r+0x944>
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f47f aec0 	bne.w	800b8de <_dtoa_r+0x68e>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	2205      	movs	r2, #5
 800bb62:	4658      	mov	r0, fp
 800bb64:	f000 fa9a 	bl	800c09c <__multadd>
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f000 fcf7 	bl	800c560 <__mcmp>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f77f aeb3 	ble.w	800b8de <_dtoa_r+0x68e>
 800bb78:	4656      	mov	r6, sl
 800bb7a:	2331      	movs	r3, #49	@ 0x31
 800bb7c:	f806 3b01 	strb.w	r3, [r6], #1
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	3301      	adds	r3, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	e6ae      	b.n	800b8e6 <_dtoa_r+0x696>
 800bb88:	9c07      	ldr	r4, [sp, #28]
 800bb8a:	9704      	str	r7, [sp, #16]
 800bb8c:	4625      	mov	r5, r4
 800bb8e:	e7f3      	b.n	800bb78 <_dtoa_r+0x928>
 800bb90:	9b07      	ldr	r3, [sp, #28]
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 8104 	beq.w	800bda4 <_dtoa_r+0xb54>
 800bb9c:	2e00      	cmp	r6, #0
 800bb9e:	dd05      	ble.n	800bbac <_dtoa_r+0x95c>
 800bba0:	4629      	mov	r1, r5
 800bba2:	4632      	mov	r2, r6
 800bba4:	4658      	mov	r0, fp
 800bba6:	f000 fc6f 	bl	800c488 <__lshift>
 800bbaa:	4605      	mov	r5, r0
 800bbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d05a      	beq.n	800bc68 <_dtoa_r+0xa18>
 800bbb2:	6869      	ldr	r1, [r5, #4]
 800bbb4:	4658      	mov	r0, fp
 800bbb6:	f000 fa0f 	bl	800bfd8 <_Balloc>
 800bbba:	4606      	mov	r6, r0
 800bbbc:	b928      	cbnz	r0, 800bbca <_dtoa_r+0x97a>
 800bbbe:	4b84      	ldr	r3, [pc, #528]	@ (800bdd0 <_dtoa_r+0xb80>)
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bbc6:	f7ff bb5a 	b.w	800b27e <_dtoa_r+0x2e>
 800bbca:	692a      	ldr	r2, [r5, #16]
 800bbcc:	3202      	adds	r2, #2
 800bbce:	0092      	lsls	r2, r2, #2
 800bbd0:	f105 010c 	add.w	r1, r5, #12
 800bbd4:	300c      	adds	r0, #12
 800bbd6:	f001 ffff 	bl	800dbd8 <memcpy>
 800bbda:	2201      	movs	r2, #1
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4658      	mov	r0, fp
 800bbe0:	f000 fc52 	bl	800c488 <__lshift>
 800bbe4:	f10a 0301 	add.w	r3, sl, #1
 800bbe8:	9307      	str	r3, [sp, #28]
 800bbea:	9b00      	ldr	r3, [sp, #0]
 800bbec:	4453      	add	r3, sl
 800bbee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	462f      	mov	r7, r5
 800bbf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	9b07      	ldr	r3, [sp, #28]
 800bbfe:	4621      	mov	r1, r4
 800bc00:	3b01      	subs	r3, #1
 800bc02:	4648      	mov	r0, r9
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	f7ff fa99 	bl	800b13c <quorem>
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	9002      	str	r0, [sp, #8]
 800bc0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc12:	4648      	mov	r0, r9
 800bc14:	f000 fca4 	bl	800c560 <__mcmp>
 800bc18:	462a      	mov	r2, r5
 800bc1a:	9008      	str	r0, [sp, #32]
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4658      	mov	r0, fp
 800bc20:	f000 fcba 	bl	800c598 <__mdiff>
 800bc24:	68c2      	ldr	r2, [r0, #12]
 800bc26:	4606      	mov	r6, r0
 800bc28:	bb02      	cbnz	r2, 800bc6c <_dtoa_r+0xa1c>
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	4648      	mov	r0, r9
 800bc2e:	f000 fc97 	bl	800c560 <__mcmp>
 800bc32:	4602      	mov	r2, r0
 800bc34:	4631      	mov	r1, r6
 800bc36:	4658      	mov	r0, fp
 800bc38:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc3a:	f000 fa0d 	bl	800c058 <_Bfree>
 800bc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc42:	9e07      	ldr	r6, [sp, #28]
 800bc44:	ea43 0102 	orr.w	r1, r3, r2
 800bc48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc4a:	4319      	orrs	r1, r3
 800bc4c:	d110      	bne.n	800bc70 <_dtoa_r+0xa20>
 800bc4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc52:	d029      	beq.n	800bca8 <_dtoa_r+0xa58>
 800bc54:	9b08      	ldr	r3, [sp, #32]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd02      	ble.n	800bc60 <_dtoa_r+0xa10>
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bc60:	9b00      	ldr	r3, [sp, #0]
 800bc62:	f883 8000 	strb.w	r8, [r3]
 800bc66:	e63f      	b.n	800b8e8 <_dtoa_r+0x698>
 800bc68:	4628      	mov	r0, r5
 800bc6a:	e7bb      	b.n	800bbe4 <_dtoa_r+0x994>
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	e7e1      	b.n	800bc34 <_dtoa_r+0x9e4>
 800bc70:	9b08      	ldr	r3, [sp, #32]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	db04      	blt.n	800bc80 <_dtoa_r+0xa30>
 800bc76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc7c:	430b      	orrs	r3, r1
 800bc7e:	d120      	bne.n	800bcc2 <_dtoa_r+0xa72>
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	dded      	ble.n	800bc60 <_dtoa_r+0xa10>
 800bc84:	4649      	mov	r1, r9
 800bc86:	2201      	movs	r2, #1
 800bc88:	4658      	mov	r0, fp
 800bc8a:	f000 fbfd 	bl	800c488 <__lshift>
 800bc8e:	4621      	mov	r1, r4
 800bc90:	4681      	mov	r9, r0
 800bc92:	f000 fc65 	bl	800c560 <__mcmp>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	dc03      	bgt.n	800bca2 <_dtoa_r+0xa52>
 800bc9a:	d1e1      	bne.n	800bc60 <_dtoa_r+0xa10>
 800bc9c:	f018 0f01 	tst.w	r8, #1
 800bca0:	d0de      	beq.n	800bc60 <_dtoa_r+0xa10>
 800bca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bca6:	d1d8      	bne.n	800bc5a <_dtoa_r+0xa0a>
 800bca8:	9a00      	ldr	r2, [sp, #0]
 800bcaa:	2339      	movs	r3, #57	@ 0x39
 800bcac:	7013      	strb	r3, [r2, #0]
 800bcae:	4633      	mov	r3, r6
 800bcb0:	461e      	mov	r6, r3
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bcb8:	2a39      	cmp	r2, #57	@ 0x39
 800bcba:	d052      	beq.n	800bd62 <_dtoa_r+0xb12>
 800bcbc:	3201      	adds	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	e612      	b.n	800b8e8 <_dtoa_r+0x698>
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	dd07      	ble.n	800bcd6 <_dtoa_r+0xa86>
 800bcc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcca:	d0ed      	beq.n	800bca8 <_dtoa_r+0xa58>
 800bccc:	9a00      	ldr	r2, [sp, #0]
 800bcce:	f108 0301 	add.w	r3, r8, #1
 800bcd2:	7013      	strb	r3, [r2, #0]
 800bcd4:	e608      	b.n	800b8e8 <_dtoa_r+0x698>
 800bcd6:	9b07      	ldr	r3, [sp, #28]
 800bcd8:	9a07      	ldr	r2, [sp, #28]
 800bcda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d028      	beq.n	800bd36 <_dtoa_r+0xae6>
 800bce4:	4649      	mov	r1, r9
 800bce6:	2300      	movs	r3, #0
 800bce8:	220a      	movs	r2, #10
 800bcea:	4658      	mov	r0, fp
 800bcec:	f000 f9d6 	bl	800c09c <__multadd>
 800bcf0:	42af      	cmp	r7, r5
 800bcf2:	4681      	mov	r9, r0
 800bcf4:	f04f 0300 	mov.w	r3, #0
 800bcf8:	f04f 020a 	mov.w	r2, #10
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4658      	mov	r0, fp
 800bd00:	d107      	bne.n	800bd12 <_dtoa_r+0xac2>
 800bd02:	f000 f9cb 	bl	800c09c <__multadd>
 800bd06:	4607      	mov	r7, r0
 800bd08:	4605      	mov	r5, r0
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	e774      	b.n	800bbfc <_dtoa_r+0x9ac>
 800bd12:	f000 f9c3 	bl	800c09c <__multadd>
 800bd16:	4629      	mov	r1, r5
 800bd18:	4607      	mov	r7, r0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	220a      	movs	r2, #10
 800bd1e:	4658      	mov	r0, fp
 800bd20:	f000 f9bc 	bl	800c09c <__multadd>
 800bd24:	4605      	mov	r5, r0
 800bd26:	e7f0      	b.n	800bd0a <_dtoa_r+0xaba>
 800bd28:	9b00      	ldr	r3, [sp, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bfcc      	ite	gt
 800bd2e:	461e      	movgt	r6, r3
 800bd30:	2601      	movle	r6, #1
 800bd32:	4456      	add	r6, sl
 800bd34:	2700      	movs	r7, #0
 800bd36:	4649      	mov	r1, r9
 800bd38:	2201      	movs	r2, #1
 800bd3a:	4658      	mov	r0, fp
 800bd3c:	f000 fba4 	bl	800c488 <__lshift>
 800bd40:	4621      	mov	r1, r4
 800bd42:	4681      	mov	r9, r0
 800bd44:	f000 fc0c 	bl	800c560 <__mcmp>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	dcb0      	bgt.n	800bcae <_dtoa_r+0xa5e>
 800bd4c:	d102      	bne.n	800bd54 <_dtoa_r+0xb04>
 800bd4e:	f018 0f01 	tst.w	r8, #1
 800bd52:	d1ac      	bne.n	800bcae <_dtoa_r+0xa5e>
 800bd54:	4633      	mov	r3, r6
 800bd56:	461e      	mov	r6, r3
 800bd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd5c:	2a30      	cmp	r2, #48	@ 0x30
 800bd5e:	d0fa      	beq.n	800bd56 <_dtoa_r+0xb06>
 800bd60:	e5c2      	b.n	800b8e8 <_dtoa_r+0x698>
 800bd62:	459a      	cmp	sl, r3
 800bd64:	d1a4      	bne.n	800bcb0 <_dtoa_r+0xa60>
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	2331      	movs	r3, #49	@ 0x31
 800bd6e:	f88a 3000 	strb.w	r3, [sl]
 800bd72:	e5b9      	b.n	800b8e8 <_dtoa_r+0x698>
 800bd74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bdd4 <_dtoa_r+0xb84>
 800bd7a:	b11b      	cbz	r3, 800bd84 <_dtoa_r+0xb34>
 800bd7c:	f10a 0308 	add.w	r3, sl, #8
 800bd80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	4650      	mov	r0, sl
 800bd86:	b019      	add	sp, #100	@ 0x64
 800bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	f77f ae37 	ble.w	800ba02 <_dtoa_r+0x7b2>
 800bd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd98:	2001      	movs	r0, #1
 800bd9a:	e655      	b.n	800ba48 <_dtoa_r+0x7f8>
 800bd9c:	9b00      	ldr	r3, [sp, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f77f aed6 	ble.w	800bb50 <_dtoa_r+0x900>
 800bda4:	4656      	mov	r6, sl
 800bda6:	4621      	mov	r1, r4
 800bda8:	4648      	mov	r0, r9
 800bdaa:	f7ff f9c7 	bl	800b13c <quorem>
 800bdae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bdb2:	f806 8b01 	strb.w	r8, [r6], #1
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	eba6 020a 	sub.w	r2, r6, sl
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	ddb3      	ble.n	800bd28 <_dtoa_r+0xad8>
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	220a      	movs	r2, #10
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	f000 f968 	bl	800c09c <__multadd>
 800bdcc:	4681      	mov	r9, r0
 800bdce:	e7ea      	b.n	800bda6 <_dtoa_r+0xb56>
 800bdd0:	080124e5 	.word	0x080124e5
 800bdd4:	08012469 	.word	0x08012469

0800bdd8 <_free_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4605      	mov	r5, r0
 800bddc:	2900      	cmp	r1, #0
 800bdde:	d041      	beq.n	800be64 <_free_r+0x8c>
 800bde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde4:	1f0c      	subs	r4, r1, #4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfb8      	it	lt
 800bdea:	18e4      	addlt	r4, r4, r3
 800bdec:	f000 f8e8 	bl	800bfc0 <__malloc_lock>
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	@ (800be68 <_free_r+0x90>)
 800bdf2:	6813      	ldr	r3, [r2, #0]
 800bdf4:	b933      	cbnz	r3, 800be04 <_free_r+0x2c>
 800bdf6:	6063      	str	r3, [r4, #4]
 800bdf8:	6014      	str	r4, [r2, #0]
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be00:	f000 b8e4 	b.w	800bfcc <__malloc_unlock>
 800be04:	42a3      	cmp	r3, r4
 800be06:	d908      	bls.n	800be1a <_free_r+0x42>
 800be08:	6820      	ldr	r0, [r4, #0]
 800be0a:	1821      	adds	r1, r4, r0
 800be0c:	428b      	cmp	r3, r1
 800be0e:	bf01      	itttt	eq
 800be10:	6819      	ldreq	r1, [r3, #0]
 800be12:	685b      	ldreq	r3, [r3, #4]
 800be14:	1809      	addeq	r1, r1, r0
 800be16:	6021      	streq	r1, [r4, #0]
 800be18:	e7ed      	b.n	800bdf6 <_free_r+0x1e>
 800be1a:	461a      	mov	r2, r3
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	b10b      	cbz	r3, 800be24 <_free_r+0x4c>
 800be20:	42a3      	cmp	r3, r4
 800be22:	d9fa      	bls.n	800be1a <_free_r+0x42>
 800be24:	6811      	ldr	r1, [r2, #0]
 800be26:	1850      	adds	r0, r2, r1
 800be28:	42a0      	cmp	r0, r4
 800be2a:	d10b      	bne.n	800be44 <_free_r+0x6c>
 800be2c:	6820      	ldr	r0, [r4, #0]
 800be2e:	4401      	add	r1, r0
 800be30:	1850      	adds	r0, r2, r1
 800be32:	4283      	cmp	r3, r0
 800be34:	6011      	str	r1, [r2, #0]
 800be36:	d1e0      	bne.n	800bdfa <_free_r+0x22>
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	6053      	str	r3, [r2, #4]
 800be3e:	4408      	add	r0, r1
 800be40:	6010      	str	r0, [r2, #0]
 800be42:	e7da      	b.n	800bdfa <_free_r+0x22>
 800be44:	d902      	bls.n	800be4c <_free_r+0x74>
 800be46:	230c      	movs	r3, #12
 800be48:	602b      	str	r3, [r5, #0]
 800be4a:	e7d6      	b.n	800bdfa <_free_r+0x22>
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	1821      	adds	r1, r4, r0
 800be50:	428b      	cmp	r3, r1
 800be52:	bf04      	itt	eq
 800be54:	6819      	ldreq	r1, [r3, #0]
 800be56:	685b      	ldreq	r3, [r3, #4]
 800be58:	6063      	str	r3, [r4, #4]
 800be5a:	bf04      	itt	eq
 800be5c:	1809      	addeq	r1, r1, r0
 800be5e:	6021      	streq	r1, [r4, #0]
 800be60:	6054      	str	r4, [r2, #4]
 800be62:	e7ca      	b.n	800bdfa <_free_r+0x22>
 800be64:	bd38      	pop	{r3, r4, r5, pc}
 800be66:	bf00      	nop
 800be68:	2000099c 	.word	0x2000099c

0800be6c <malloc>:
 800be6c:	4b02      	ldr	r3, [pc, #8]	@ (800be78 <malloc+0xc>)
 800be6e:	4601      	mov	r1, r0
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f000 b825 	b.w	800bec0 <_malloc_r>
 800be76:	bf00      	nop
 800be78:	20000104 	.word	0x20000104

0800be7c <sbrk_aligned>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	4e0f      	ldr	r6, [pc, #60]	@ (800bebc <sbrk_aligned+0x40>)
 800be80:	460c      	mov	r4, r1
 800be82:	6831      	ldr	r1, [r6, #0]
 800be84:	4605      	mov	r5, r0
 800be86:	b911      	cbnz	r1, 800be8e <sbrk_aligned+0x12>
 800be88:	f001 fe90 	bl	800dbac <_sbrk_r>
 800be8c:	6030      	str	r0, [r6, #0]
 800be8e:	4621      	mov	r1, r4
 800be90:	4628      	mov	r0, r5
 800be92:	f001 fe8b 	bl	800dbac <_sbrk_r>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d103      	bne.n	800bea2 <sbrk_aligned+0x26>
 800be9a:	f04f 34ff 	mov.w	r4, #4294967295
 800be9e:	4620      	mov	r0, r4
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	1cc4      	adds	r4, r0, #3
 800bea4:	f024 0403 	bic.w	r4, r4, #3
 800bea8:	42a0      	cmp	r0, r4
 800beaa:	d0f8      	beq.n	800be9e <sbrk_aligned+0x22>
 800beac:	1a21      	subs	r1, r4, r0
 800beae:	4628      	mov	r0, r5
 800beb0:	f001 fe7c 	bl	800dbac <_sbrk_r>
 800beb4:	3001      	adds	r0, #1
 800beb6:	d1f2      	bne.n	800be9e <sbrk_aligned+0x22>
 800beb8:	e7ef      	b.n	800be9a <sbrk_aligned+0x1e>
 800beba:	bf00      	nop
 800bebc:	20000998 	.word	0x20000998

0800bec0 <_malloc_r>:
 800bec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec4:	1ccd      	adds	r5, r1, #3
 800bec6:	f025 0503 	bic.w	r5, r5, #3
 800beca:	3508      	adds	r5, #8
 800becc:	2d0c      	cmp	r5, #12
 800bece:	bf38      	it	cc
 800bed0:	250c      	movcc	r5, #12
 800bed2:	2d00      	cmp	r5, #0
 800bed4:	4606      	mov	r6, r0
 800bed6:	db01      	blt.n	800bedc <_malloc_r+0x1c>
 800bed8:	42a9      	cmp	r1, r5
 800beda:	d904      	bls.n	800bee6 <_malloc_r+0x26>
 800bedc:	230c      	movs	r3, #12
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	2000      	movs	r0, #0
 800bee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfbc <_malloc_r+0xfc>
 800beea:	f000 f869 	bl	800bfc0 <__malloc_lock>
 800beee:	f8d8 3000 	ldr.w	r3, [r8]
 800bef2:	461c      	mov	r4, r3
 800bef4:	bb44      	cbnz	r4, 800bf48 <_malloc_r+0x88>
 800bef6:	4629      	mov	r1, r5
 800bef8:	4630      	mov	r0, r6
 800befa:	f7ff ffbf 	bl	800be7c <sbrk_aligned>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	4604      	mov	r4, r0
 800bf02:	d158      	bne.n	800bfb6 <_malloc_r+0xf6>
 800bf04:	f8d8 4000 	ldr.w	r4, [r8]
 800bf08:	4627      	mov	r7, r4
 800bf0a:	2f00      	cmp	r7, #0
 800bf0c:	d143      	bne.n	800bf96 <_malloc_r+0xd6>
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	d04b      	beq.n	800bfaa <_malloc_r+0xea>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	4639      	mov	r1, r7
 800bf16:	4630      	mov	r0, r6
 800bf18:	eb04 0903 	add.w	r9, r4, r3
 800bf1c:	f001 fe46 	bl	800dbac <_sbrk_r>
 800bf20:	4581      	cmp	r9, r0
 800bf22:	d142      	bne.n	800bfaa <_malloc_r+0xea>
 800bf24:	6821      	ldr	r1, [r4, #0]
 800bf26:	1a6d      	subs	r5, r5, r1
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ffa6 	bl	800be7c <sbrk_aligned>
 800bf30:	3001      	adds	r0, #1
 800bf32:	d03a      	beq.n	800bfaa <_malloc_r+0xea>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	442b      	add	r3, r5
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	bb62      	cbnz	r2, 800bf9c <_malloc_r+0xdc>
 800bf42:	f8c8 7000 	str.w	r7, [r8]
 800bf46:	e00f      	b.n	800bf68 <_malloc_r+0xa8>
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	1b52      	subs	r2, r2, r5
 800bf4c:	d420      	bmi.n	800bf90 <_malloc_r+0xd0>
 800bf4e:	2a0b      	cmp	r2, #11
 800bf50:	d917      	bls.n	800bf82 <_malloc_r+0xc2>
 800bf52:	1961      	adds	r1, r4, r5
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	6025      	str	r5, [r4, #0]
 800bf58:	bf18      	it	ne
 800bf5a:	6059      	strne	r1, [r3, #4]
 800bf5c:	6863      	ldr	r3, [r4, #4]
 800bf5e:	bf08      	it	eq
 800bf60:	f8c8 1000 	streq.w	r1, [r8]
 800bf64:	5162      	str	r2, [r4, r5]
 800bf66:	604b      	str	r3, [r1, #4]
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f000 f82f 	bl	800bfcc <__malloc_unlock>
 800bf6e:	f104 000b 	add.w	r0, r4, #11
 800bf72:	1d23      	adds	r3, r4, #4
 800bf74:	f020 0007 	bic.w	r0, r0, #7
 800bf78:	1ac2      	subs	r2, r0, r3
 800bf7a:	bf1c      	itt	ne
 800bf7c:	1a1b      	subne	r3, r3, r0
 800bf7e:	50a3      	strne	r3, [r4, r2]
 800bf80:	e7af      	b.n	800bee2 <_malloc_r+0x22>
 800bf82:	6862      	ldr	r2, [r4, #4]
 800bf84:	42a3      	cmp	r3, r4
 800bf86:	bf0c      	ite	eq
 800bf88:	f8c8 2000 	streq.w	r2, [r8]
 800bf8c:	605a      	strne	r2, [r3, #4]
 800bf8e:	e7eb      	b.n	800bf68 <_malloc_r+0xa8>
 800bf90:	4623      	mov	r3, r4
 800bf92:	6864      	ldr	r4, [r4, #4]
 800bf94:	e7ae      	b.n	800bef4 <_malloc_r+0x34>
 800bf96:	463c      	mov	r4, r7
 800bf98:	687f      	ldr	r7, [r7, #4]
 800bf9a:	e7b6      	b.n	800bf0a <_malloc_r+0x4a>
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	42a3      	cmp	r3, r4
 800bfa2:	d1fb      	bne.n	800bf9c <_malloc_r+0xdc>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	6053      	str	r3, [r2, #4]
 800bfa8:	e7de      	b.n	800bf68 <_malloc_r+0xa8>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	6033      	str	r3, [r6, #0]
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f000 f80c 	bl	800bfcc <__malloc_unlock>
 800bfb4:	e794      	b.n	800bee0 <_malloc_r+0x20>
 800bfb6:	6005      	str	r5, [r0, #0]
 800bfb8:	e7d6      	b.n	800bf68 <_malloc_r+0xa8>
 800bfba:	bf00      	nop
 800bfbc:	2000099c 	.word	0x2000099c

0800bfc0 <__malloc_lock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	@ (800bfc8 <__malloc_lock+0x8>)
 800bfc2:	f7ff b8b2 	b.w	800b12a <__retarget_lock_acquire_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	20000994 	.word	0x20000994

0800bfcc <__malloc_unlock>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	@ (800bfd4 <__malloc_unlock+0x8>)
 800bfce:	f7ff b8ad 	b.w	800b12c <__retarget_lock_release_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	20000994 	.word	0x20000994

0800bfd8 <_Balloc>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	69c6      	ldr	r6, [r0, #28]
 800bfdc:	4604      	mov	r4, r0
 800bfde:	460d      	mov	r5, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Balloc+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7ff ff42 	bl	800be6c <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	61e0      	str	r0, [r4, #28]
 800bfec:	b920      	cbnz	r0, 800bff8 <_Balloc+0x20>
 800bfee:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <_Balloc+0x78>)
 800bff0:	4818      	ldr	r0, [pc, #96]	@ (800c054 <_Balloc+0x7c>)
 800bff2:	216b      	movs	r1, #107	@ 0x6b
 800bff4:	f001 fe08 	bl	800dc08 <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	69e6      	ldr	r6, [r4, #28]
 800c002:	68f3      	ldr	r3, [r6, #12]
 800c004:	b183      	cbz	r3, 800c028 <_Balloc+0x50>
 800c006:	69e3      	ldr	r3, [r4, #28]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c00e:	b9b8      	cbnz	r0, 800c040 <_Balloc+0x68>
 800c010:	2101      	movs	r1, #1
 800c012:	fa01 f605 	lsl.w	r6, r1, r5
 800c016:	1d72      	adds	r2, r6, #5
 800c018:	0092      	lsls	r2, r2, #2
 800c01a:	4620      	mov	r0, r4
 800c01c:	f001 fe12 	bl	800dc44 <_calloc_r>
 800c020:	b160      	cbz	r0, 800c03c <_Balloc+0x64>
 800c022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c026:	e00e      	b.n	800c046 <_Balloc+0x6e>
 800c028:	2221      	movs	r2, #33	@ 0x21
 800c02a:	2104      	movs	r1, #4
 800c02c:	4620      	mov	r0, r4
 800c02e:	f001 fe09 	bl	800dc44 <_calloc_r>
 800c032:	69e3      	ldr	r3, [r4, #28]
 800c034:	60f0      	str	r0, [r6, #12]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e4      	bne.n	800c006 <_Balloc+0x2e>
 800c03c:	2000      	movs	r0, #0
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	6802      	ldr	r2, [r0, #0]
 800c042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c046:	2300      	movs	r3, #0
 800c048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c04c:	e7f7      	b.n	800c03e <_Balloc+0x66>
 800c04e:	bf00      	nop
 800c050:	08012476 	.word	0x08012476
 800c054:	080124f6 	.word	0x080124f6

0800c058 <_Bfree>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	69c6      	ldr	r6, [r0, #28]
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	b976      	cbnz	r6, 800c080 <_Bfree+0x28>
 800c062:	2010      	movs	r0, #16
 800c064:	f7ff ff02 	bl	800be6c <malloc>
 800c068:	4602      	mov	r2, r0
 800c06a:	61e8      	str	r0, [r5, #28]
 800c06c:	b920      	cbnz	r0, 800c078 <_Bfree+0x20>
 800c06e:	4b09      	ldr	r3, [pc, #36]	@ (800c094 <_Bfree+0x3c>)
 800c070:	4809      	ldr	r0, [pc, #36]	@ (800c098 <_Bfree+0x40>)
 800c072:	218f      	movs	r1, #143	@ 0x8f
 800c074:	f001 fdc8 	bl	800dc08 <__assert_func>
 800c078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c07c:	6006      	str	r6, [r0, #0]
 800c07e:	60c6      	str	r6, [r0, #12]
 800c080:	b13c      	cbz	r4, 800c092 <_Bfree+0x3a>
 800c082:	69eb      	ldr	r3, [r5, #28]
 800c084:	6862      	ldr	r2, [r4, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c08c:	6021      	str	r1, [r4, #0]
 800c08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	08012476 	.word	0x08012476
 800c098:	080124f6 	.word	0x080124f6

0800c09c <__multadd>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	690d      	ldr	r5, [r1, #16]
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	461e      	mov	r6, r3
 800c0a8:	f101 0c14 	add.w	ip, r1, #20
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c0b2:	b299      	uxth	r1, r3
 800c0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800c0b8:	0c1e      	lsrs	r6, r3, #16
 800c0ba:	0c0b      	lsrs	r3, r1, #16
 800c0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800c0c0:	b289      	uxth	r1, r1
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0c8:	4285      	cmp	r5, r0
 800c0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0d2:	dcec      	bgt.n	800c0ae <__multadd+0x12>
 800c0d4:	b30e      	cbz	r6, 800c11a <__multadd+0x7e>
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dc19      	bgt.n	800c110 <__multadd+0x74>
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4638      	mov	r0, r7
 800c0e0:	3101      	adds	r1, #1
 800c0e2:	f7ff ff79 	bl	800bfd8 <_Balloc>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	b928      	cbnz	r0, 800c0f6 <__multadd+0x5a>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <__multadd+0x84>)
 800c0ee:	480d      	ldr	r0, [pc, #52]	@ (800c124 <__multadd+0x88>)
 800c0f0:	21ba      	movs	r1, #186	@ 0xba
 800c0f2:	f001 fd89 	bl	800dc08 <__assert_func>
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	3202      	adds	r2, #2
 800c0fa:	f104 010c 	add.w	r1, r4, #12
 800c0fe:	0092      	lsls	r2, r2, #2
 800c100:	300c      	adds	r0, #12
 800c102:	f001 fd69 	bl	800dbd8 <memcpy>
 800c106:	4621      	mov	r1, r4
 800c108:	4638      	mov	r0, r7
 800c10a:	f7ff ffa5 	bl	800c058 <_Bfree>
 800c10e:	4644      	mov	r4, r8
 800c110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c114:	3501      	adds	r5, #1
 800c116:	615e      	str	r6, [r3, #20]
 800c118:	6125      	str	r5, [r4, #16]
 800c11a:	4620      	mov	r0, r4
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	080124e5 	.word	0x080124e5
 800c124:	080124f6 	.word	0x080124f6

0800c128 <__s2b>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	4615      	mov	r5, r2
 800c130:	461f      	mov	r7, r3
 800c132:	2209      	movs	r2, #9
 800c134:	3308      	adds	r3, #8
 800c136:	4606      	mov	r6, r0
 800c138:	fb93 f3f2 	sdiv	r3, r3, r2
 800c13c:	2100      	movs	r1, #0
 800c13e:	2201      	movs	r2, #1
 800c140:	429a      	cmp	r2, r3
 800c142:	db09      	blt.n	800c158 <__s2b+0x30>
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff ff47 	bl	800bfd8 <_Balloc>
 800c14a:	b940      	cbnz	r0, 800c15e <__s2b+0x36>
 800c14c:	4602      	mov	r2, r0
 800c14e:	4b19      	ldr	r3, [pc, #100]	@ (800c1b4 <__s2b+0x8c>)
 800c150:	4819      	ldr	r0, [pc, #100]	@ (800c1b8 <__s2b+0x90>)
 800c152:	21d3      	movs	r1, #211	@ 0xd3
 800c154:	f001 fd58 	bl	800dc08 <__assert_func>
 800c158:	0052      	lsls	r2, r2, #1
 800c15a:	3101      	adds	r1, #1
 800c15c:	e7f0      	b.n	800c140 <__s2b+0x18>
 800c15e:	9b08      	ldr	r3, [sp, #32]
 800c160:	6143      	str	r3, [r0, #20]
 800c162:	2d09      	cmp	r5, #9
 800c164:	f04f 0301 	mov.w	r3, #1
 800c168:	6103      	str	r3, [r0, #16]
 800c16a:	dd16      	ble.n	800c19a <__s2b+0x72>
 800c16c:	f104 0909 	add.w	r9, r4, #9
 800c170:	46c8      	mov	r8, r9
 800c172:	442c      	add	r4, r5
 800c174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c178:	4601      	mov	r1, r0
 800c17a:	3b30      	subs	r3, #48	@ 0x30
 800c17c:	220a      	movs	r2, #10
 800c17e:	4630      	mov	r0, r6
 800c180:	f7ff ff8c 	bl	800c09c <__multadd>
 800c184:	45a0      	cmp	r8, r4
 800c186:	d1f5      	bne.n	800c174 <__s2b+0x4c>
 800c188:	f1a5 0408 	sub.w	r4, r5, #8
 800c18c:	444c      	add	r4, r9
 800c18e:	1b2d      	subs	r5, r5, r4
 800c190:	1963      	adds	r3, r4, r5
 800c192:	42bb      	cmp	r3, r7
 800c194:	db04      	blt.n	800c1a0 <__s2b+0x78>
 800c196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19a:	340a      	adds	r4, #10
 800c19c:	2509      	movs	r5, #9
 800c19e:	e7f6      	b.n	800c18e <__s2b+0x66>
 800c1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1a4:	4601      	mov	r1, r0
 800c1a6:	3b30      	subs	r3, #48	@ 0x30
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff ff76 	bl	800c09c <__multadd>
 800c1b0:	e7ee      	b.n	800c190 <__s2b+0x68>
 800c1b2:	bf00      	nop
 800c1b4:	080124e5 	.word	0x080124e5
 800c1b8:	080124f6 	.word	0x080124f6

0800c1bc <__hi0bits>:
 800c1bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	bf36      	itet	cc
 800c1c4:	0403      	lslcc	r3, r0, #16
 800c1c6:	2000      	movcs	r0, #0
 800c1c8:	2010      	movcc	r0, #16
 800c1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1ce:	bf3c      	itt	cc
 800c1d0:	021b      	lslcc	r3, r3, #8
 800c1d2:	3008      	addcc	r0, #8
 800c1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1d8:	bf3c      	itt	cc
 800c1da:	011b      	lslcc	r3, r3, #4
 800c1dc:	3004      	addcc	r0, #4
 800c1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1e2:	bf3c      	itt	cc
 800c1e4:	009b      	lslcc	r3, r3, #2
 800c1e6:	3002      	addcc	r0, #2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	db05      	blt.n	800c1f8 <__hi0bits+0x3c>
 800c1ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1f0:	f100 0001 	add.w	r0, r0, #1
 800c1f4:	bf08      	it	eq
 800c1f6:	2020      	moveq	r0, #32
 800c1f8:	4770      	bx	lr

0800c1fa <__lo0bits>:
 800c1fa:	6803      	ldr	r3, [r0, #0]
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f013 0007 	ands.w	r0, r3, #7
 800c202:	d00b      	beq.n	800c21c <__lo0bits+0x22>
 800c204:	07d9      	lsls	r1, r3, #31
 800c206:	d421      	bmi.n	800c24c <__lo0bits+0x52>
 800c208:	0798      	lsls	r0, r3, #30
 800c20a:	bf49      	itett	mi
 800c20c:	085b      	lsrmi	r3, r3, #1
 800c20e:	089b      	lsrpl	r3, r3, #2
 800c210:	2001      	movmi	r0, #1
 800c212:	6013      	strmi	r3, [r2, #0]
 800c214:	bf5c      	itt	pl
 800c216:	6013      	strpl	r3, [r2, #0]
 800c218:	2002      	movpl	r0, #2
 800c21a:	4770      	bx	lr
 800c21c:	b299      	uxth	r1, r3
 800c21e:	b909      	cbnz	r1, 800c224 <__lo0bits+0x2a>
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	2010      	movs	r0, #16
 800c224:	b2d9      	uxtb	r1, r3
 800c226:	b909      	cbnz	r1, 800c22c <__lo0bits+0x32>
 800c228:	3008      	adds	r0, #8
 800c22a:	0a1b      	lsrs	r3, r3, #8
 800c22c:	0719      	lsls	r1, r3, #28
 800c22e:	bf04      	itt	eq
 800c230:	091b      	lsreq	r3, r3, #4
 800c232:	3004      	addeq	r0, #4
 800c234:	0799      	lsls	r1, r3, #30
 800c236:	bf04      	itt	eq
 800c238:	089b      	lsreq	r3, r3, #2
 800c23a:	3002      	addeq	r0, #2
 800c23c:	07d9      	lsls	r1, r3, #31
 800c23e:	d403      	bmi.n	800c248 <__lo0bits+0x4e>
 800c240:	085b      	lsrs	r3, r3, #1
 800c242:	f100 0001 	add.w	r0, r0, #1
 800c246:	d003      	beq.n	800c250 <__lo0bits+0x56>
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	4770      	bx	lr
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr
 800c250:	2020      	movs	r0, #32
 800c252:	4770      	bx	lr

0800c254 <__i2b>:
 800c254:	b510      	push	{r4, lr}
 800c256:	460c      	mov	r4, r1
 800c258:	2101      	movs	r1, #1
 800c25a:	f7ff febd 	bl	800bfd8 <_Balloc>
 800c25e:	4602      	mov	r2, r0
 800c260:	b928      	cbnz	r0, 800c26e <__i2b+0x1a>
 800c262:	4b05      	ldr	r3, [pc, #20]	@ (800c278 <__i2b+0x24>)
 800c264:	4805      	ldr	r0, [pc, #20]	@ (800c27c <__i2b+0x28>)
 800c266:	f240 1145 	movw	r1, #325	@ 0x145
 800c26a:	f001 fccd 	bl	800dc08 <__assert_func>
 800c26e:	2301      	movs	r3, #1
 800c270:	6144      	str	r4, [r0, #20]
 800c272:	6103      	str	r3, [r0, #16]
 800c274:	bd10      	pop	{r4, pc}
 800c276:	bf00      	nop
 800c278:	080124e5 	.word	0x080124e5
 800c27c:	080124f6 	.word	0x080124f6

0800c280 <__multiply>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	4614      	mov	r4, r2
 800c286:	690a      	ldr	r2, [r1, #16]
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	bfa8      	it	ge
 800c28e:	4623      	movge	r3, r4
 800c290:	460f      	mov	r7, r1
 800c292:	bfa4      	itt	ge
 800c294:	460c      	movge	r4, r1
 800c296:	461f      	movge	r7, r3
 800c298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c29c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c2a0:	68a3      	ldr	r3, [r4, #8]
 800c2a2:	6861      	ldr	r1, [r4, #4]
 800c2a4:	eb0a 0609 	add.w	r6, sl, r9
 800c2a8:	42b3      	cmp	r3, r6
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	bfb8      	it	lt
 800c2ae:	3101      	addlt	r1, #1
 800c2b0:	f7ff fe92 	bl	800bfd8 <_Balloc>
 800c2b4:	b930      	cbnz	r0, 800c2c4 <__multiply+0x44>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	4b44      	ldr	r3, [pc, #272]	@ (800c3cc <__multiply+0x14c>)
 800c2ba:	4845      	ldr	r0, [pc, #276]	@ (800c3d0 <__multiply+0x150>)
 800c2bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c2c0:	f001 fca2 	bl	800dc08 <__assert_func>
 800c2c4:	f100 0514 	add.w	r5, r0, #20
 800c2c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	4543      	cmp	r3, r8
 800c2d2:	d321      	bcc.n	800c318 <__multiply+0x98>
 800c2d4:	f107 0114 	add.w	r1, r7, #20
 800c2d8:	f104 0214 	add.w	r2, r4, #20
 800c2dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	1b13      	subs	r3, r2, r4
 800c2e8:	3b15      	subs	r3, #21
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	f104 0715 	add.w	r7, r4, #21
 800c2f4:	42ba      	cmp	r2, r7
 800c2f6:	bf38      	it	cc
 800c2f8:	2304      	movcc	r3, #4
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	9103      	str	r1, [sp, #12]
 800c300:	428b      	cmp	r3, r1
 800c302:	d80c      	bhi.n	800c31e <__multiply+0x9e>
 800c304:	2e00      	cmp	r6, #0
 800c306:	dd03      	ble.n	800c310 <__multiply+0x90>
 800c308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d05b      	beq.n	800c3c8 <__multiply+0x148>
 800c310:	6106      	str	r6, [r0, #16]
 800c312:	b005      	add	sp, #20
 800c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c318:	f843 2b04 	str.w	r2, [r3], #4
 800c31c:	e7d8      	b.n	800c2d0 <__multiply+0x50>
 800c31e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c322:	f1ba 0f00 	cmp.w	sl, #0
 800c326:	d024      	beq.n	800c372 <__multiply+0xf2>
 800c328:	f104 0e14 	add.w	lr, r4, #20
 800c32c:	46a9      	mov	r9, r5
 800c32e:	f04f 0c00 	mov.w	ip, #0
 800c332:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c336:	f8d9 3000 	ldr.w	r3, [r9]
 800c33a:	fa1f fb87 	uxth.w	fp, r7
 800c33e:	b29b      	uxth	r3, r3
 800c340:	fb0a 330b 	mla	r3, sl, fp, r3
 800c344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c348:	f8d9 7000 	ldr.w	r7, [r9]
 800c34c:	4463      	add	r3, ip
 800c34e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c352:	fb0a c70b 	mla	r7, sl, fp, ip
 800c356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c360:	4572      	cmp	r2, lr
 800c362:	f849 3b04 	str.w	r3, [r9], #4
 800c366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c36a:	d8e2      	bhi.n	800c332 <__multiply+0xb2>
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	f845 c003 	str.w	ip, [r5, r3]
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c378:	3104      	adds	r1, #4
 800c37a:	f1b9 0f00 	cmp.w	r9, #0
 800c37e:	d021      	beq.n	800c3c4 <__multiply+0x144>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	f104 0c14 	add.w	ip, r4, #20
 800c386:	46ae      	mov	lr, r5
 800c388:	f04f 0a00 	mov.w	sl, #0
 800c38c:	f8bc b000 	ldrh.w	fp, [ip]
 800c390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c394:	fb09 770b 	mla	r7, r9, fp, r7
 800c398:	4457      	add	r7, sl
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3a0:	f84e 3b04 	str.w	r3, [lr], #4
 800c3a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3ac:	f8be 3000 	ldrh.w	r3, [lr]
 800c3b0:	fb09 330a 	mla	r3, r9, sl, r3
 800c3b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c3b8:	4562      	cmp	r2, ip
 800c3ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3be:	d8e5      	bhi.n	800c38c <__multiply+0x10c>
 800c3c0:	9f01      	ldr	r7, [sp, #4]
 800c3c2:	51eb      	str	r3, [r5, r7]
 800c3c4:	3504      	adds	r5, #4
 800c3c6:	e799      	b.n	800c2fc <__multiply+0x7c>
 800c3c8:	3e01      	subs	r6, #1
 800c3ca:	e79b      	b.n	800c304 <__multiply+0x84>
 800c3cc:	080124e5 	.word	0x080124e5
 800c3d0:	080124f6 	.word	0x080124f6

0800c3d4 <__pow5mult>:
 800c3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d8:	4615      	mov	r5, r2
 800c3da:	f012 0203 	ands.w	r2, r2, #3
 800c3de:	4607      	mov	r7, r0
 800c3e0:	460e      	mov	r6, r1
 800c3e2:	d007      	beq.n	800c3f4 <__pow5mult+0x20>
 800c3e4:	4c25      	ldr	r4, [pc, #148]	@ (800c47c <__pow5mult+0xa8>)
 800c3e6:	3a01      	subs	r2, #1
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ee:	f7ff fe55 	bl	800c09c <__multadd>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	10ad      	asrs	r5, r5, #2
 800c3f6:	d03d      	beq.n	800c474 <__pow5mult+0xa0>
 800c3f8:	69fc      	ldr	r4, [r7, #28]
 800c3fa:	b97c      	cbnz	r4, 800c41c <__pow5mult+0x48>
 800c3fc:	2010      	movs	r0, #16
 800c3fe:	f7ff fd35 	bl	800be6c <malloc>
 800c402:	4602      	mov	r2, r0
 800c404:	61f8      	str	r0, [r7, #28]
 800c406:	b928      	cbnz	r0, 800c414 <__pow5mult+0x40>
 800c408:	4b1d      	ldr	r3, [pc, #116]	@ (800c480 <__pow5mult+0xac>)
 800c40a:	481e      	ldr	r0, [pc, #120]	@ (800c484 <__pow5mult+0xb0>)
 800c40c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c410:	f001 fbfa 	bl	800dc08 <__assert_func>
 800c414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c418:	6004      	str	r4, [r0, #0]
 800c41a:	60c4      	str	r4, [r0, #12]
 800c41c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c424:	b94c      	cbnz	r4, 800c43a <__pow5mult+0x66>
 800c426:	f240 2171 	movw	r1, #625	@ 0x271
 800c42a:	4638      	mov	r0, r7
 800c42c:	f7ff ff12 	bl	800c254 <__i2b>
 800c430:	2300      	movs	r3, #0
 800c432:	f8c8 0008 	str.w	r0, [r8, #8]
 800c436:	4604      	mov	r4, r0
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	07eb      	lsls	r3, r5, #31
 800c440:	d50a      	bpl.n	800c458 <__pow5mult+0x84>
 800c442:	4631      	mov	r1, r6
 800c444:	4622      	mov	r2, r4
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ff1a 	bl	800c280 <__multiply>
 800c44c:	4631      	mov	r1, r6
 800c44e:	4680      	mov	r8, r0
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff fe01 	bl	800c058 <_Bfree>
 800c456:	4646      	mov	r6, r8
 800c458:	106d      	asrs	r5, r5, #1
 800c45a:	d00b      	beq.n	800c474 <__pow5mult+0xa0>
 800c45c:	6820      	ldr	r0, [r4, #0]
 800c45e:	b938      	cbnz	r0, 800c470 <__pow5mult+0x9c>
 800c460:	4622      	mov	r2, r4
 800c462:	4621      	mov	r1, r4
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff ff0b 	bl	800c280 <__multiply>
 800c46a:	6020      	str	r0, [r4, #0]
 800c46c:	f8c0 9000 	str.w	r9, [r0]
 800c470:	4604      	mov	r4, r0
 800c472:	e7e4      	b.n	800c43e <__pow5mult+0x6a>
 800c474:	4630      	mov	r0, r6
 800c476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c47a:	bf00      	nop
 800c47c:	08012550 	.word	0x08012550
 800c480:	08012476 	.word	0x08012476
 800c484:	080124f6 	.word	0x080124f6

0800c488 <__lshift>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	460c      	mov	r4, r1
 800c48e:	6849      	ldr	r1, [r1, #4]
 800c490:	6923      	ldr	r3, [r4, #16]
 800c492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c496:	68a3      	ldr	r3, [r4, #8]
 800c498:	4607      	mov	r7, r0
 800c49a:	4691      	mov	r9, r2
 800c49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4a0:	f108 0601 	add.w	r6, r8, #1
 800c4a4:	42b3      	cmp	r3, r6
 800c4a6:	db0b      	blt.n	800c4c0 <__lshift+0x38>
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff fd95 	bl	800bfd8 <_Balloc>
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	b948      	cbnz	r0, 800c4c6 <__lshift+0x3e>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	4b28      	ldr	r3, [pc, #160]	@ (800c558 <__lshift+0xd0>)
 800c4b6:	4829      	ldr	r0, [pc, #164]	@ (800c55c <__lshift+0xd4>)
 800c4b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c4bc:	f001 fba4 	bl	800dc08 <__assert_func>
 800c4c0:	3101      	adds	r1, #1
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	e7ee      	b.n	800c4a4 <__lshift+0x1c>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f100 0114 	add.w	r1, r0, #20
 800c4cc:	f100 0210 	add.w	r2, r0, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	4553      	cmp	r3, sl
 800c4d4:	db33      	blt.n	800c53e <__lshift+0xb6>
 800c4d6:	6920      	ldr	r0, [r4, #16]
 800c4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4dc:	f104 0314 	add.w	r3, r4, #20
 800c4e0:	f019 091f 	ands.w	r9, r9, #31
 800c4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4ec:	d02b      	beq.n	800c546 <__lshift+0xbe>
 800c4ee:	f1c9 0e20 	rsb	lr, r9, #32
 800c4f2:	468a      	mov	sl, r1
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	6818      	ldr	r0, [r3, #0]
 800c4f8:	fa00 f009 	lsl.w	r0, r0, r9
 800c4fc:	4310      	orrs	r0, r2
 800c4fe:	f84a 0b04 	str.w	r0, [sl], #4
 800c502:	f853 2b04 	ldr.w	r2, [r3], #4
 800c506:	459c      	cmp	ip, r3
 800c508:	fa22 f20e 	lsr.w	r2, r2, lr
 800c50c:	d8f3      	bhi.n	800c4f6 <__lshift+0x6e>
 800c50e:	ebac 0304 	sub.w	r3, ip, r4
 800c512:	3b15      	subs	r3, #21
 800c514:	f023 0303 	bic.w	r3, r3, #3
 800c518:	3304      	adds	r3, #4
 800c51a:	f104 0015 	add.w	r0, r4, #21
 800c51e:	4584      	cmp	ip, r0
 800c520:	bf38      	it	cc
 800c522:	2304      	movcc	r3, #4
 800c524:	50ca      	str	r2, [r1, r3]
 800c526:	b10a      	cbz	r2, 800c52c <__lshift+0xa4>
 800c528:	f108 0602 	add.w	r6, r8, #2
 800c52c:	3e01      	subs	r6, #1
 800c52e:	4638      	mov	r0, r7
 800c530:	612e      	str	r6, [r5, #16]
 800c532:	4621      	mov	r1, r4
 800c534:	f7ff fd90 	bl	800c058 <_Bfree>
 800c538:	4628      	mov	r0, r5
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c542:	3301      	adds	r3, #1
 800c544:	e7c5      	b.n	800c4d2 <__lshift+0x4a>
 800c546:	3904      	subs	r1, #4
 800c548:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c550:	459c      	cmp	ip, r3
 800c552:	d8f9      	bhi.n	800c548 <__lshift+0xc0>
 800c554:	e7ea      	b.n	800c52c <__lshift+0xa4>
 800c556:	bf00      	nop
 800c558:	080124e5 	.word	0x080124e5
 800c55c:	080124f6 	.word	0x080124f6

0800c560 <__mcmp>:
 800c560:	690a      	ldr	r2, [r1, #16]
 800c562:	4603      	mov	r3, r0
 800c564:	6900      	ldr	r0, [r0, #16]
 800c566:	1a80      	subs	r0, r0, r2
 800c568:	b530      	push	{r4, r5, lr}
 800c56a:	d10e      	bne.n	800c58a <__mcmp+0x2a>
 800c56c:	3314      	adds	r3, #20
 800c56e:	3114      	adds	r1, #20
 800c570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c57c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c580:	4295      	cmp	r5, r2
 800c582:	d003      	beq.n	800c58c <__mcmp+0x2c>
 800c584:	d205      	bcs.n	800c592 <__mcmp+0x32>
 800c586:	f04f 30ff 	mov.w	r0, #4294967295
 800c58a:	bd30      	pop	{r4, r5, pc}
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d3f3      	bcc.n	800c578 <__mcmp+0x18>
 800c590:	e7fb      	b.n	800c58a <__mcmp+0x2a>
 800c592:	2001      	movs	r0, #1
 800c594:	e7f9      	b.n	800c58a <__mcmp+0x2a>
	...

0800c598 <__mdiff>:
 800c598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	4689      	mov	r9, r1
 800c59e:	4606      	mov	r6, r0
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	f7ff ffdb 	bl	800c560 <__mcmp>
 800c5aa:	1e05      	subs	r5, r0, #0
 800c5ac:	d112      	bne.n	800c5d4 <__mdiff+0x3c>
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f7ff fd11 	bl	800bfd8 <_Balloc>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	b928      	cbnz	r0, 800c5c6 <__mdiff+0x2e>
 800c5ba:	4b3f      	ldr	r3, [pc, #252]	@ (800c6b8 <__mdiff+0x120>)
 800c5bc:	f240 2137 	movw	r1, #567	@ 0x237
 800c5c0:	483e      	ldr	r0, [pc, #248]	@ (800c6bc <__mdiff+0x124>)
 800c5c2:	f001 fb21 	bl	800dc08 <__assert_func>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	bfbc      	itt	lt
 800c5d6:	464b      	movlt	r3, r9
 800c5d8:	46a1      	movlt	r9, r4
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5e0:	bfba      	itte	lt
 800c5e2:	461c      	movlt	r4, r3
 800c5e4:	2501      	movlt	r5, #1
 800c5e6:	2500      	movge	r5, #0
 800c5e8:	f7ff fcf6 	bl	800bfd8 <_Balloc>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	b918      	cbnz	r0, 800c5f8 <__mdiff+0x60>
 800c5f0:	4b31      	ldr	r3, [pc, #196]	@ (800c6b8 <__mdiff+0x120>)
 800c5f2:	f240 2145 	movw	r1, #581	@ 0x245
 800c5f6:	e7e3      	b.n	800c5c0 <__mdiff+0x28>
 800c5f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5fc:	6926      	ldr	r6, [r4, #16]
 800c5fe:	60c5      	str	r5, [r0, #12]
 800c600:	f109 0310 	add.w	r3, r9, #16
 800c604:	f109 0514 	add.w	r5, r9, #20
 800c608:	f104 0e14 	add.w	lr, r4, #20
 800c60c:	f100 0b14 	add.w	fp, r0, #20
 800c610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	46d9      	mov	r9, fp
 800c61c:	f04f 0c00 	mov.w	ip, #0
 800c620:	9b01      	ldr	r3, [sp, #4]
 800c622:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c626:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	fa1f f38a 	uxth.w	r3, sl
 800c630:	4619      	mov	r1, r3
 800c632:	b283      	uxth	r3, r0
 800c634:	1acb      	subs	r3, r1, r3
 800c636:	0c00      	lsrs	r0, r0, #16
 800c638:	4463      	add	r3, ip
 800c63a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c63e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c642:	b29b      	uxth	r3, r3
 800c644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c648:	4576      	cmp	r6, lr
 800c64a:	f849 3b04 	str.w	r3, [r9], #4
 800c64e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c652:	d8e5      	bhi.n	800c620 <__mdiff+0x88>
 800c654:	1b33      	subs	r3, r6, r4
 800c656:	3b15      	subs	r3, #21
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	3415      	adds	r4, #21
 800c65e:	3304      	adds	r3, #4
 800c660:	42a6      	cmp	r6, r4
 800c662:	bf38      	it	cc
 800c664:	2304      	movcc	r3, #4
 800c666:	441d      	add	r5, r3
 800c668:	445b      	add	r3, fp
 800c66a:	461e      	mov	r6, r3
 800c66c:	462c      	mov	r4, r5
 800c66e:	4544      	cmp	r4, r8
 800c670:	d30e      	bcc.n	800c690 <__mdiff+0xf8>
 800c672:	f108 0103 	add.w	r1, r8, #3
 800c676:	1b49      	subs	r1, r1, r5
 800c678:	f021 0103 	bic.w	r1, r1, #3
 800c67c:	3d03      	subs	r5, #3
 800c67e:	45a8      	cmp	r8, r5
 800c680:	bf38      	it	cc
 800c682:	2100      	movcc	r1, #0
 800c684:	440b      	add	r3, r1
 800c686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c68a:	b191      	cbz	r1, 800c6b2 <__mdiff+0x11a>
 800c68c:	6117      	str	r7, [r2, #16]
 800c68e:	e79d      	b.n	800c5cc <__mdiff+0x34>
 800c690:	f854 1b04 	ldr.w	r1, [r4], #4
 800c694:	46e6      	mov	lr, ip
 800c696:	0c08      	lsrs	r0, r1, #16
 800c698:	fa1c fc81 	uxtah	ip, ip, r1
 800c69c:	4471      	add	r1, lr
 800c69e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6a2:	b289      	uxth	r1, r1
 800c6a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c6a8:	f846 1b04 	str.w	r1, [r6], #4
 800c6ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6b0:	e7dd      	b.n	800c66e <__mdiff+0xd6>
 800c6b2:	3f01      	subs	r7, #1
 800c6b4:	e7e7      	b.n	800c686 <__mdiff+0xee>
 800c6b6:	bf00      	nop
 800c6b8:	080124e5 	.word	0x080124e5
 800c6bc:	080124f6 	.word	0x080124f6

0800c6c0 <__ulp>:
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	ed8d 0b00 	vstr	d0, [sp]
 800c6c6:	9a01      	ldr	r2, [sp, #4]
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c708 <__ulp+0x48>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc08      	bgt.n	800c6e6 <__ulp+0x26>
 800c6d4:	425b      	negs	r3, r3
 800c6d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c6da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6de:	da04      	bge.n	800c6ea <__ulp+0x2a>
 800c6e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c6e4:	4113      	asrs	r3, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	e008      	b.n	800c6fc <__ulp+0x3c>
 800c6ea:	f1a2 0314 	sub.w	r3, r2, #20
 800c6ee:	2b1e      	cmp	r3, #30
 800c6f0:	bfda      	itte	le
 800c6f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c6f6:	40da      	lsrle	r2, r3
 800c6f8:	2201      	movgt	r2, #1
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	4610      	mov	r0, r2
 800c700:	ec41 0b10 	vmov	d0, r0, r1
 800c704:	b002      	add	sp, #8
 800c706:	4770      	bx	lr
 800c708:	7ff00000 	.word	0x7ff00000

0800c70c <__b2d>:
 800c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c710:	6906      	ldr	r6, [r0, #16]
 800c712:	f100 0814 	add.w	r8, r0, #20
 800c716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c71a:	1f37      	subs	r7, r6, #4
 800c71c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c720:	4610      	mov	r0, r2
 800c722:	f7ff fd4b 	bl	800c1bc <__hi0bits>
 800c726:	f1c0 0320 	rsb	r3, r0, #32
 800c72a:	280a      	cmp	r0, #10
 800c72c:	600b      	str	r3, [r1, #0]
 800c72e:	491b      	ldr	r1, [pc, #108]	@ (800c79c <__b2d+0x90>)
 800c730:	dc15      	bgt.n	800c75e <__b2d+0x52>
 800c732:	f1c0 0c0b 	rsb	ip, r0, #11
 800c736:	fa22 f30c 	lsr.w	r3, r2, ip
 800c73a:	45b8      	cmp	r8, r7
 800c73c:	ea43 0501 	orr.w	r5, r3, r1
 800c740:	bf34      	ite	cc
 800c742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c746:	2300      	movcs	r3, #0
 800c748:	3015      	adds	r0, #21
 800c74a:	fa02 f000 	lsl.w	r0, r2, r0
 800c74e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c752:	4303      	orrs	r3, r0
 800c754:	461c      	mov	r4, r3
 800c756:	ec45 4b10 	vmov	d0, r4, r5
 800c75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75e:	45b8      	cmp	r8, r7
 800c760:	bf3a      	itte	cc
 800c762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c766:	f1a6 0708 	subcc.w	r7, r6, #8
 800c76a:	2300      	movcs	r3, #0
 800c76c:	380b      	subs	r0, #11
 800c76e:	d012      	beq.n	800c796 <__b2d+0x8a>
 800c770:	f1c0 0120 	rsb	r1, r0, #32
 800c774:	fa23 f401 	lsr.w	r4, r3, r1
 800c778:	4082      	lsls	r2, r0
 800c77a:	4322      	orrs	r2, r4
 800c77c:	4547      	cmp	r7, r8
 800c77e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c782:	bf8c      	ite	hi
 800c784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c788:	2200      	movls	r2, #0
 800c78a:	4083      	lsls	r3, r0
 800c78c:	40ca      	lsrs	r2, r1
 800c78e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c792:	4313      	orrs	r3, r2
 800c794:	e7de      	b.n	800c754 <__b2d+0x48>
 800c796:	ea42 0501 	orr.w	r5, r2, r1
 800c79a:	e7db      	b.n	800c754 <__b2d+0x48>
 800c79c:	3ff00000 	.word	0x3ff00000

0800c7a0 <__d2b>:
 800c7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7a4:	460f      	mov	r7, r1
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	ec59 8b10 	vmov	r8, r9, d0
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	f7ff fc13 	bl	800bfd8 <_Balloc>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	b930      	cbnz	r0, 800c7c4 <__d2b+0x24>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4b23      	ldr	r3, [pc, #140]	@ (800c848 <__d2b+0xa8>)
 800c7ba:	4824      	ldr	r0, [pc, #144]	@ (800c84c <__d2b+0xac>)
 800c7bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c7c0:	f001 fa22 	bl	800dc08 <__assert_func>
 800c7c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7cc:	b10d      	cbz	r5, 800c7d2 <__d2b+0x32>
 800c7ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	f1b8 0300 	subs.w	r3, r8, #0
 800c7d8:	d023      	beq.n	800c822 <__d2b+0x82>
 800c7da:	4668      	mov	r0, sp
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	f7ff fd0c 	bl	800c1fa <__lo0bits>
 800c7e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c7e6:	b1d0      	cbz	r0, 800c81e <__d2b+0x7e>
 800c7e8:	f1c0 0320 	rsb	r3, r0, #32
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	40c2      	lsrs	r2, r0
 800c7f4:	6163      	str	r3, [r4, #20]
 800c7f6:	9201      	str	r2, [sp, #4]
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	61a3      	str	r3, [r4, #24]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bf0c      	ite	eq
 800c800:	2201      	moveq	r2, #1
 800c802:	2202      	movne	r2, #2
 800c804:	6122      	str	r2, [r4, #16]
 800c806:	b1a5      	cbz	r5, 800c832 <__d2b+0x92>
 800c808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c80c:	4405      	add	r5, r0
 800c80e:	603d      	str	r5, [r7, #0]
 800c810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c814:	6030      	str	r0, [r6, #0]
 800c816:	4620      	mov	r0, r4
 800c818:	b003      	add	sp, #12
 800c81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c81e:	6161      	str	r1, [r4, #20]
 800c820:	e7ea      	b.n	800c7f8 <__d2b+0x58>
 800c822:	a801      	add	r0, sp, #4
 800c824:	f7ff fce9 	bl	800c1fa <__lo0bits>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	6163      	str	r3, [r4, #20]
 800c82c:	3020      	adds	r0, #32
 800c82e:	2201      	movs	r2, #1
 800c830:	e7e8      	b.n	800c804 <__d2b+0x64>
 800c832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c83a:	6038      	str	r0, [r7, #0]
 800c83c:	6918      	ldr	r0, [r3, #16]
 800c83e:	f7ff fcbd 	bl	800c1bc <__hi0bits>
 800c842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c846:	e7e5      	b.n	800c814 <__d2b+0x74>
 800c848:	080124e5 	.word	0x080124e5
 800c84c:	080124f6 	.word	0x080124f6

0800c850 <__ratio>:
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	b085      	sub	sp, #20
 800c856:	e9cd 1000 	strd	r1, r0, [sp]
 800c85a:	a902      	add	r1, sp, #8
 800c85c:	f7ff ff56 	bl	800c70c <__b2d>
 800c860:	9800      	ldr	r0, [sp, #0]
 800c862:	a903      	add	r1, sp, #12
 800c864:	ec55 4b10 	vmov	r4, r5, d0
 800c868:	f7ff ff50 	bl	800c70c <__b2d>
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	6919      	ldr	r1, [r3, #16]
 800c870:	9b00      	ldr	r3, [sp, #0]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	1ac9      	subs	r1, r1, r3
 800c876:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c87a:	1a9b      	subs	r3, r3, r2
 800c87c:	ec5b ab10 	vmov	sl, fp, d0
 800c880:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c884:	2b00      	cmp	r3, #0
 800c886:	bfce      	itee	gt
 800c888:	462a      	movgt	r2, r5
 800c88a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c88e:	465a      	movle	r2, fp
 800c890:	462f      	mov	r7, r5
 800c892:	46d9      	mov	r9, fp
 800c894:	bfcc      	ite	gt
 800c896:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c89a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c89e:	464b      	mov	r3, r9
 800c8a0:	4652      	mov	r2, sl
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	f7f3 ffe1 	bl	800086c <__aeabi_ddiv>
 800c8aa:	ec41 0b10 	vmov	d0, r0, r1
 800c8ae:	b005      	add	sp, #20
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8b4 <__copybits>:
 800c8b4:	3901      	subs	r1, #1
 800c8b6:	b570      	push	{r4, r5, r6, lr}
 800c8b8:	1149      	asrs	r1, r1, #5
 800c8ba:	6914      	ldr	r4, [r2, #16]
 800c8bc:	3101      	adds	r1, #1
 800c8be:	f102 0314 	add.w	r3, r2, #20
 800c8c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8ca:	1f05      	subs	r5, r0, #4
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	d30c      	bcc.n	800c8ea <__copybits+0x36>
 800c8d0:	1aa3      	subs	r3, r4, r2
 800c8d2:	3b11      	subs	r3, #17
 800c8d4:	f023 0303 	bic.w	r3, r3, #3
 800c8d8:	3211      	adds	r2, #17
 800c8da:	42a2      	cmp	r2, r4
 800c8dc:	bf88      	it	hi
 800c8de:	2300      	movhi	r3, #0
 800c8e0:	4418      	add	r0, r3
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4288      	cmp	r0, r1
 800c8e6:	d305      	bcc.n	800c8f4 <__copybits+0x40>
 800c8e8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8f2:	e7eb      	b.n	800c8cc <__copybits+0x18>
 800c8f4:	f840 3b04 	str.w	r3, [r0], #4
 800c8f8:	e7f4      	b.n	800c8e4 <__copybits+0x30>

0800c8fa <__any_on>:
 800c8fa:	f100 0214 	add.w	r2, r0, #20
 800c8fe:	6900      	ldr	r0, [r0, #16]
 800c900:	114b      	asrs	r3, r1, #5
 800c902:	4298      	cmp	r0, r3
 800c904:	b510      	push	{r4, lr}
 800c906:	db11      	blt.n	800c92c <__any_on+0x32>
 800c908:	dd0a      	ble.n	800c920 <__any_on+0x26>
 800c90a:	f011 011f 	ands.w	r1, r1, #31
 800c90e:	d007      	beq.n	800c920 <__any_on+0x26>
 800c910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c914:	fa24 f001 	lsr.w	r0, r4, r1
 800c918:	fa00 f101 	lsl.w	r1, r0, r1
 800c91c:	428c      	cmp	r4, r1
 800c91e:	d10b      	bne.n	800c938 <__any_on+0x3e>
 800c920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c924:	4293      	cmp	r3, r2
 800c926:	d803      	bhi.n	800c930 <__any_on+0x36>
 800c928:	2000      	movs	r0, #0
 800c92a:	bd10      	pop	{r4, pc}
 800c92c:	4603      	mov	r3, r0
 800c92e:	e7f7      	b.n	800c920 <__any_on+0x26>
 800c930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c934:	2900      	cmp	r1, #0
 800c936:	d0f5      	beq.n	800c924 <__any_on+0x2a>
 800c938:	2001      	movs	r0, #1
 800c93a:	e7f6      	b.n	800c92a <__any_on+0x30>

0800c93c <sulp>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	4604      	mov	r4, r0
 800c940:	460d      	mov	r5, r1
 800c942:	ec45 4b10 	vmov	d0, r4, r5
 800c946:	4616      	mov	r6, r2
 800c948:	f7ff feba 	bl	800c6c0 <__ulp>
 800c94c:	ec51 0b10 	vmov	r0, r1, d0
 800c950:	b17e      	cbz	r6, 800c972 <sulp+0x36>
 800c952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c956:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dd09      	ble.n	800c972 <sulp+0x36>
 800c95e:	051b      	lsls	r3, r3, #20
 800c960:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c964:	2400      	movs	r4, #0
 800c966:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c96a:	4622      	mov	r2, r4
 800c96c:	462b      	mov	r3, r5
 800c96e:	f7f3 fe53 	bl	8000618 <__aeabi_dmul>
 800c972:	ec41 0b10 	vmov	d0, r0, r1
 800c976:	bd70      	pop	{r4, r5, r6, pc}

0800c978 <_strtod_l>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	b09f      	sub	sp, #124	@ 0x7c
 800c97e:	460c      	mov	r4, r1
 800c980:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c982:	2200      	movs	r2, #0
 800c984:	921a      	str	r2, [sp, #104]	@ 0x68
 800c986:	9005      	str	r0, [sp, #20]
 800c988:	f04f 0a00 	mov.w	sl, #0
 800c98c:	f04f 0b00 	mov.w	fp, #0
 800c990:	460a      	mov	r2, r1
 800c992:	9219      	str	r2, [sp, #100]	@ 0x64
 800c994:	7811      	ldrb	r1, [r2, #0]
 800c996:	292b      	cmp	r1, #43	@ 0x2b
 800c998:	d04a      	beq.n	800ca30 <_strtod_l+0xb8>
 800c99a:	d838      	bhi.n	800ca0e <_strtod_l+0x96>
 800c99c:	290d      	cmp	r1, #13
 800c99e:	d832      	bhi.n	800ca06 <_strtod_l+0x8e>
 800c9a0:	2908      	cmp	r1, #8
 800c9a2:	d832      	bhi.n	800ca0a <_strtod_l+0x92>
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	d03b      	beq.n	800ca20 <_strtod_l+0xa8>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c9ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c9ae:	782a      	ldrb	r2, [r5, #0]
 800c9b0:	2a30      	cmp	r2, #48	@ 0x30
 800c9b2:	f040 80b3 	bne.w	800cb1c <_strtod_l+0x1a4>
 800c9b6:	786a      	ldrb	r2, [r5, #1]
 800c9b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9bc:	2a58      	cmp	r2, #88	@ 0x58
 800c9be:	d16e      	bne.n	800ca9e <_strtod_l+0x126>
 800c9c0:	9302      	str	r3, [sp, #8]
 800c9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	4a8e      	ldr	r2, [pc, #568]	@ (800cc04 <_strtod_l+0x28c>)
 800c9cc:	9805      	ldr	r0, [sp, #20]
 800c9ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c9d0:	a919      	add	r1, sp, #100	@ 0x64
 800c9d2:	f001 f9b3 	bl	800dd3c <__gethex>
 800c9d6:	f010 060f 	ands.w	r6, r0, #15
 800c9da:	4604      	mov	r4, r0
 800c9dc:	d005      	beq.n	800c9ea <_strtod_l+0x72>
 800c9de:	2e06      	cmp	r6, #6
 800c9e0:	d128      	bne.n	800ca34 <_strtod_l+0xbc>
 800c9e2:	3501      	adds	r5, #1
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 858e 	bne.w	800d50e <_strtod_l+0xb96>
 800c9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9f4:	b1cb      	cbz	r3, 800ca2a <_strtod_l+0xb2>
 800c9f6:	4652      	mov	r2, sl
 800c9f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c9fc:	ec43 2b10 	vmov	d0, r2, r3
 800ca00:	b01f      	add	sp, #124	@ 0x7c
 800ca02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca06:	2920      	cmp	r1, #32
 800ca08:	d1ce      	bne.n	800c9a8 <_strtod_l+0x30>
 800ca0a:	3201      	adds	r2, #1
 800ca0c:	e7c1      	b.n	800c992 <_strtod_l+0x1a>
 800ca0e:	292d      	cmp	r1, #45	@ 0x2d
 800ca10:	d1ca      	bne.n	800c9a8 <_strtod_l+0x30>
 800ca12:	2101      	movs	r1, #1
 800ca14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ca16:	1c51      	adds	r1, r2, #1
 800ca18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca1a:	7852      	ldrb	r2, [r2, #1]
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	d1c5      	bne.n	800c9ac <_strtod_l+0x34>
 800ca20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 8570 	bne.w	800d50a <_strtod_l+0xb92>
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	e7e5      	b.n	800c9fc <_strtod_l+0x84>
 800ca30:	2100      	movs	r1, #0
 800ca32:	e7ef      	b.n	800ca14 <_strtod_l+0x9c>
 800ca34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca36:	b13a      	cbz	r2, 800ca48 <_strtod_l+0xd0>
 800ca38:	2135      	movs	r1, #53	@ 0x35
 800ca3a:	a81c      	add	r0, sp, #112	@ 0x70
 800ca3c:	f7ff ff3a 	bl	800c8b4 <__copybits>
 800ca40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	f7ff fb08 	bl	800c058 <_Bfree>
 800ca48:	3e01      	subs	r6, #1
 800ca4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ca4c:	2e04      	cmp	r6, #4
 800ca4e:	d806      	bhi.n	800ca5e <_strtod_l+0xe6>
 800ca50:	e8df f006 	tbb	[pc, r6]
 800ca54:	201d0314 	.word	0x201d0314
 800ca58:	14          	.byte	0x14
 800ca59:	00          	.byte	0x00
 800ca5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ca5e:	05e1      	lsls	r1, r4, #23
 800ca60:	bf48      	it	mi
 800ca62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca6a:	0d1b      	lsrs	r3, r3, #20
 800ca6c:	051b      	lsls	r3, r3, #20
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1bb      	bne.n	800c9ea <_strtod_l+0x72>
 800ca72:	f001 f8ab 	bl	800dbcc <__errno>
 800ca76:	2322      	movs	r3, #34	@ 0x22
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	e7b6      	b.n	800c9ea <_strtod_l+0x72>
 800ca7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca8c:	e7e7      	b.n	800ca5e <_strtod_l+0xe6>
 800ca8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cc0c <_strtod_l+0x294>
 800ca92:	e7e4      	b.n	800ca5e <_strtod_l+0xe6>
 800ca94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca98:	f04f 3aff 	mov.w	sl, #4294967295
 800ca9c:	e7df      	b.n	800ca5e <_strtod_l+0xe6>
 800ca9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b30      	cmp	r3, #48	@ 0x30
 800caa8:	d0f9      	beq.n	800ca9e <_strtod_l+0x126>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d09d      	beq.n	800c9ea <_strtod_l+0x72>
 800caae:	2301      	movs	r3, #1
 800cab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cab4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cab6:	2300      	movs	r3, #0
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	930a      	str	r3, [sp, #40]	@ 0x28
 800cabc:	461f      	mov	r7, r3
 800cabe:	220a      	movs	r2, #10
 800cac0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cac2:	7805      	ldrb	r5, [r0, #0]
 800cac4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cac8:	b2d9      	uxtb	r1, r3
 800caca:	2909      	cmp	r1, #9
 800cacc:	d928      	bls.n	800cb20 <_strtod_l+0x1a8>
 800cace:	494e      	ldr	r1, [pc, #312]	@ (800cc08 <_strtod_l+0x290>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	f001 f837 	bl	800db44 <strncmp>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d032      	beq.n	800cb40 <_strtod_l+0x1c8>
 800cada:	2000      	movs	r0, #0
 800cadc:	462a      	mov	r2, r5
 800cade:	4681      	mov	r9, r0
 800cae0:	463d      	mov	r5, r7
 800cae2:	4603      	mov	r3, r0
 800cae4:	2a65      	cmp	r2, #101	@ 0x65
 800cae6:	d001      	beq.n	800caec <_strtod_l+0x174>
 800cae8:	2a45      	cmp	r2, #69	@ 0x45
 800caea:	d114      	bne.n	800cb16 <_strtod_l+0x19e>
 800caec:	b91d      	cbnz	r5, 800caf6 <_strtod_l+0x17e>
 800caee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caf0:	4302      	orrs	r2, r0
 800caf2:	d095      	beq.n	800ca20 <_strtod_l+0xa8>
 800caf4:	2500      	movs	r5, #0
 800caf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800caf8:	1c62      	adds	r2, r4, #1
 800cafa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cafc:	7862      	ldrb	r2, [r4, #1]
 800cafe:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb00:	d077      	beq.n	800cbf2 <_strtod_l+0x27a>
 800cb02:	2a2d      	cmp	r2, #45	@ 0x2d
 800cb04:	d07b      	beq.n	800cbfe <_strtod_l+0x286>
 800cb06:	f04f 0c00 	mov.w	ip, #0
 800cb0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb0e:	2909      	cmp	r1, #9
 800cb10:	f240 8082 	bls.w	800cc18 <_strtod_l+0x2a0>
 800cb14:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb16:	f04f 0800 	mov.w	r8, #0
 800cb1a:	e0a2      	b.n	800cc62 <_strtod_l+0x2ea>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	e7c7      	b.n	800cab0 <_strtod_l+0x138>
 800cb20:	2f08      	cmp	r7, #8
 800cb22:	bfd5      	itete	le
 800cb24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cb26:	9908      	ldrgt	r1, [sp, #32]
 800cb28:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cb30:	f100 0001 	add.w	r0, r0, #1
 800cb34:	bfd4      	ite	le
 800cb36:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cb38:	9308      	strgt	r3, [sp, #32]
 800cb3a:	3701      	adds	r7, #1
 800cb3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb3e:	e7bf      	b.n	800cac0 <_strtod_l+0x148>
 800cb40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb46:	785a      	ldrb	r2, [r3, #1]
 800cb48:	b37f      	cbz	r7, 800cbaa <_strtod_l+0x232>
 800cb4a:	4681      	mov	r9, r0
 800cb4c:	463d      	mov	r5, r7
 800cb4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cb52:	2b09      	cmp	r3, #9
 800cb54:	d912      	bls.n	800cb7c <_strtod_l+0x204>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e7c4      	b.n	800cae4 <_strtod_l+0x16c>
 800cb5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb60:	785a      	ldrb	r2, [r3, #1]
 800cb62:	3001      	adds	r0, #1
 800cb64:	2a30      	cmp	r2, #48	@ 0x30
 800cb66:	d0f8      	beq.n	800cb5a <_strtod_l+0x1e2>
 800cb68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb6c:	2b08      	cmp	r3, #8
 800cb6e:	f200 84d3 	bhi.w	800d518 <_strtod_l+0xba0>
 800cb72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb74:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb76:	4681      	mov	r9, r0
 800cb78:	2000      	movs	r0, #0
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	3a30      	subs	r2, #48	@ 0x30
 800cb7e:	f100 0301 	add.w	r3, r0, #1
 800cb82:	d02a      	beq.n	800cbda <_strtod_l+0x262>
 800cb84:	4499      	add	r9, r3
 800cb86:	eb00 0c05 	add.w	ip, r0, r5
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	210a      	movs	r1, #10
 800cb8e:	4563      	cmp	r3, ip
 800cb90:	d10d      	bne.n	800cbae <_strtod_l+0x236>
 800cb92:	1c69      	adds	r1, r5, #1
 800cb94:	4401      	add	r1, r0
 800cb96:	4428      	add	r0, r5
 800cb98:	2808      	cmp	r0, #8
 800cb9a:	dc16      	bgt.n	800cbca <_strtod_l+0x252>
 800cb9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb9e:	230a      	movs	r3, #10
 800cba0:	fb03 2300 	mla	r3, r3, r0, r2
 800cba4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cba6:	2300      	movs	r3, #0
 800cba8:	e018      	b.n	800cbdc <_strtod_l+0x264>
 800cbaa:	4638      	mov	r0, r7
 800cbac:	e7da      	b.n	800cb64 <_strtod_l+0x1ec>
 800cbae:	2b08      	cmp	r3, #8
 800cbb0:	f103 0301 	add.w	r3, r3, #1
 800cbb4:	dc03      	bgt.n	800cbbe <_strtod_l+0x246>
 800cbb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cbb8:	434e      	muls	r6, r1
 800cbba:	960a      	str	r6, [sp, #40]	@ 0x28
 800cbbc:	e7e7      	b.n	800cb8e <_strtod_l+0x216>
 800cbbe:	2b10      	cmp	r3, #16
 800cbc0:	bfde      	ittt	le
 800cbc2:	9e08      	ldrle	r6, [sp, #32]
 800cbc4:	434e      	mulle	r6, r1
 800cbc6:	9608      	strle	r6, [sp, #32]
 800cbc8:	e7e1      	b.n	800cb8e <_strtod_l+0x216>
 800cbca:	280f      	cmp	r0, #15
 800cbcc:	dceb      	bgt.n	800cba6 <_strtod_l+0x22e>
 800cbce:	9808      	ldr	r0, [sp, #32]
 800cbd0:	230a      	movs	r3, #10
 800cbd2:	fb03 2300 	mla	r3, r3, r0, r2
 800cbd6:	9308      	str	r3, [sp, #32]
 800cbd8:	e7e5      	b.n	800cba6 <_strtod_l+0x22e>
 800cbda:	4629      	mov	r1, r5
 800cbdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbde:	1c50      	adds	r0, r2, #1
 800cbe0:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbe2:	7852      	ldrb	r2, [r2, #1]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	e7b1      	b.n	800cb4e <_strtod_l+0x1d6>
 800cbea:	f04f 0900 	mov.w	r9, #0
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e77d      	b.n	800caee <_strtod_l+0x176>
 800cbf2:	f04f 0c00 	mov.w	ip, #0
 800cbf6:	1ca2      	adds	r2, r4, #2
 800cbf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbfa:	78a2      	ldrb	r2, [r4, #2]
 800cbfc:	e785      	b.n	800cb0a <_strtod_l+0x192>
 800cbfe:	f04f 0c01 	mov.w	ip, #1
 800cc02:	e7f8      	b.n	800cbf6 <_strtod_l+0x27e>
 800cc04:	08012668 	.word	0x08012668
 800cc08:	08012650 	.word	0x08012650
 800cc0c:	7ff00000 	.word	0x7ff00000
 800cc10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc12:	1c51      	adds	r1, r2, #1
 800cc14:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc16:	7852      	ldrb	r2, [r2, #1]
 800cc18:	2a30      	cmp	r2, #48	@ 0x30
 800cc1a:	d0f9      	beq.n	800cc10 <_strtod_l+0x298>
 800cc1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cc20:	2908      	cmp	r1, #8
 800cc22:	f63f af78 	bhi.w	800cb16 <_strtod_l+0x19e>
 800cc26:	3a30      	subs	r2, #48	@ 0x30
 800cc28:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cc2e:	f04f 080a 	mov.w	r8, #10
 800cc32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc34:	1c56      	adds	r6, r2, #1
 800cc36:	9619      	str	r6, [sp, #100]	@ 0x64
 800cc38:	7852      	ldrb	r2, [r2, #1]
 800cc3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cc3e:	f1be 0f09 	cmp.w	lr, #9
 800cc42:	d939      	bls.n	800ccb8 <_strtod_l+0x340>
 800cc44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc46:	1a76      	subs	r6, r6, r1
 800cc48:	2e08      	cmp	r6, #8
 800cc4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cc4e:	dc03      	bgt.n	800cc58 <_strtod_l+0x2e0>
 800cc50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc52:	4588      	cmp	r8, r1
 800cc54:	bfa8      	it	ge
 800cc56:	4688      	movge	r8, r1
 800cc58:	f1bc 0f00 	cmp.w	ip, #0
 800cc5c:	d001      	beq.n	800cc62 <_strtod_l+0x2ea>
 800cc5e:	f1c8 0800 	rsb	r8, r8, #0
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	d14e      	bne.n	800cd04 <_strtod_l+0x38c>
 800cc66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc68:	4308      	orrs	r0, r1
 800cc6a:	f47f aebe 	bne.w	800c9ea <_strtod_l+0x72>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f47f aed6 	bne.w	800ca20 <_strtod_l+0xa8>
 800cc74:	2a69      	cmp	r2, #105	@ 0x69
 800cc76:	d028      	beq.n	800ccca <_strtod_l+0x352>
 800cc78:	dc25      	bgt.n	800ccc6 <_strtod_l+0x34e>
 800cc7a:	2a49      	cmp	r2, #73	@ 0x49
 800cc7c:	d025      	beq.n	800ccca <_strtod_l+0x352>
 800cc7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc80:	f47f aece 	bne.w	800ca20 <_strtod_l+0xa8>
 800cc84:	499b      	ldr	r1, [pc, #620]	@ (800cef4 <_strtod_l+0x57c>)
 800cc86:	a819      	add	r0, sp, #100	@ 0x64
 800cc88:	f001 fa7a 	bl	800e180 <__match>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	f43f aec7 	beq.w	800ca20 <_strtod_l+0xa8>
 800cc92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b28      	cmp	r3, #40	@ 0x28
 800cc98:	d12e      	bne.n	800ccf8 <_strtod_l+0x380>
 800cc9a:	4997      	ldr	r1, [pc, #604]	@ (800cef8 <_strtod_l+0x580>)
 800cc9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc9e:	a819      	add	r0, sp, #100	@ 0x64
 800cca0:	f001 fa82 	bl	800e1a8 <__hexnan>
 800cca4:	2805      	cmp	r0, #5
 800cca6:	d127      	bne.n	800ccf8 <_strtod_l+0x380>
 800cca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ccaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ccae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ccb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ccb6:	e698      	b.n	800c9ea <_strtod_l+0x72>
 800ccb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccba:	fb08 2101 	mla	r1, r8, r1, r2
 800ccbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ccc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccc4:	e7b5      	b.n	800cc32 <_strtod_l+0x2ba>
 800ccc6:	2a6e      	cmp	r2, #110	@ 0x6e
 800ccc8:	e7da      	b.n	800cc80 <_strtod_l+0x308>
 800ccca:	498c      	ldr	r1, [pc, #560]	@ (800cefc <_strtod_l+0x584>)
 800cccc:	a819      	add	r0, sp, #100	@ 0x64
 800ccce:	f001 fa57 	bl	800e180 <__match>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	f43f aea4 	beq.w	800ca20 <_strtod_l+0xa8>
 800ccd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccda:	4989      	ldr	r1, [pc, #548]	@ (800cf00 <_strtod_l+0x588>)
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	a819      	add	r0, sp, #100	@ 0x64
 800cce0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cce2:	f001 fa4d 	bl	800e180 <__match>
 800cce6:	b910      	cbnz	r0, 800ccee <_strtod_l+0x376>
 800cce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccea:	3301      	adds	r3, #1
 800ccec:	9319      	str	r3, [sp, #100]	@ 0x64
 800ccee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cf10 <_strtod_l+0x598>
 800ccf2:	f04f 0a00 	mov.w	sl, #0
 800ccf6:	e678      	b.n	800c9ea <_strtod_l+0x72>
 800ccf8:	4882      	ldr	r0, [pc, #520]	@ (800cf04 <_strtod_l+0x58c>)
 800ccfa:	f000 ff7d 	bl	800dbf8 <nan>
 800ccfe:	ec5b ab10 	vmov	sl, fp, d0
 800cd02:	e672      	b.n	800c9ea <_strtod_l+0x72>
 800cd04:	eba8 0309 	sub.w	r3, r8, r9
 800cd08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd0c:	2f00      	cmp	r7, #0
 800cd0e:	bf08      	it	eq
 800cd10:	462f      	moveq	r7, r5
 800cd12:	2d10      	cmp	r5, #16
 800cd14:	462c      	mov	r4, r5
 800cd16:	bfa8      	it	ge
 800cd18:	2410      	movge	r4, #16
 800cd1a:	f7f3 fc03 	bl	8000524 <__aeabi_ui2d>
 800cd1e:	2d09      	cmp	r5, #9
 800cd20:	4682      	mov	sl, r0
 800cd22:	468b      	mov	fp, r1
 800cd24:	dc13      	bgt.n	800cd4e <_strtod_l+0x3d6>
 800cd26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f43f ae5e 	beq.w	800c9ea <_strtod_l+0x72>
 800cd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd30:	dd78      	ble.n	800ce24 <_strtod_l+0x4ac>
 800cd32:	2b16      	cmp	r3, #22
 800cd34:	dc5f      	bgt.n	800cdf6 <_strtod_l+0x47e>
 800cd36:	4974      	ldr	r1, [pc, #464]	@ (800cf08 <_strtod_l+0x590>)
 800cd38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd40:	4652      	mov	r2, sl
 800cd42:	465b      	mov	r3, fp
 800cd44:	f7f3 fc68 	bl	8000618 <__aeabi_dmul>
 800cd48:	4682      	mov	sl, r0
 800cd4a:	468b      	mov	fp, r1
 800cd4c:	e64d      	b.n	800c9ea <_strtod_l+0x72>
 800cd4e:	4b6e      	ldr	r3, [pc, #440]	@ (800cf08 <_strtod_l+0x590>)
 800cd50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cd58:	f7f3 fc5e 	bl	8000618 <__aeabi_dmul>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	9808      	ldr	r0, [sp, #32]
 800cd60:	468b      	mov	fp, r1
 800cd62:	f7f3 fbdf 	bl	8000524 <__aeabi_ui2d>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4650      	mov	r0, sl
 800cd6c:	4659      	mov	r1, fp
 800cd6e:	f7f3 fa9d 	bl	80002ac <__adddf3>
 800cd72:	2d0f      	cmp	r5, #15
 800cd74:	4682      	mov	sl, r0
 800cd76:	468b      	mov	fp, r1
 800cd78:	ddd5      	ble.n	800cd26 <_strtod_l+0x3ae>
 800cd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd7c:	1b2c      	subs	r4, r5, r4
 800cd7e:	441c      	add	r4, r3
 800cd80:	2c00      	cmp	r4, #0
 800cd82:	f340 8096 	ble.w	800ceb2 <_strtod_l+0x53a>
 800cd86:	f014 030f 	ands.w	r3, r4, #15
 800cd8a:	d00a      	beq.n	800cda2 <_strtod_l+0x42a>
 800cd8c:	495e      	ldr	r1, [pc, #376]	@ (800cf08 <_strtod_l+0x590>)
 800cd8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd92:	4652      	mov	r2, sl
 800cd94:	465b      	mov	r3, fp
 800cd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd9a:	f7f3 fc3d 	bl	8000618 <__aeabi_dmul>
 800cd9e:	4682      	mov	sl, r0
 800cda0:	468b      	mov	fp, r1
 800cda2:	f034 040f 	bics.w	r4, r4, #15
 800cda6:	d073      	beq.n	800ce90 <_strtod_l+0x518>
 800cda8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cdac:	dd48      	ble.n	800ce40 <_strtod_l+0x4c8>
 800cdae:	2400      	movs	r4, #0
 800cdb0:	46a0      	mov	r8, r4
 800cdb2:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdb4:	46a1      	mov	r9, r4
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cf10 <_strtod_l+0x598>
 800cdbc:	2322      	movs	r3, #34	@ 0x22
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	f04f 0a00 	mov.w	sl, #0
 800cdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f43f ae0f 	beq.w	800c9ea <_strtod_l+0x72>
 800cdcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdce:	9805      	ldr	r0, [sp, #20]
 800cdd0:	f7ff f942 	bl	800c058 <_Bfree>
 800cdd4:	9805      	ldr	r0, [sp, #20]
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	f7ff f93e 	bl	800c058 <_Bfree>
 800cddc:	9805      	ldr	r0, [sp, #20]
 800cdde:	4641      	mov	r1, r8
 800cde0:	f7ff f93a 	bl	800c058 <_Bfree>
 800cde4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cde6:	9805      	ldr	r0, [sp, #20]
 800cde8:	f7ff f936 	bl	800c058 <_Bfree>
 800cdec:	9805      	ldr	r0, [sp, #20]
 800cdee:	4621      	mov	r1, r4
 800cdf0:	f7ff f932 	bl	800c058 <_Bfree>
 800cdf4:	e5f9      	b.n	800c9ea <_strtod_l+0x72>
 800cdf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	dbbc      	blt.n	800cd7a <_strtod_l+0x402>
 800ce00:	4c41      	ldr	r4, [pc, #260]	@ (800cf08 <_strtod_l+0x590>)
 800ce02:	f1c5 050f 	rsb	r5, r5, #15
 800ce06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce0a:	4652      	mov	r2, sl
 800ce0c:	465b      	mov	r3, fp
 800ce0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce12:	f7f3 fc01 	bl	8000618 <__aeabi_dmul>
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	1b5d      	subs	r5, r3, r5
 800ce1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce22:	e78f      	b.n	800cd44 <_strtod_l+0x3cc>
 800ce24:	3316      	adds	r3, #22
 800ce26:	dba8      	blt.n	800cd7a <_strtod_l+0x402>
 800ce28:	4b37      	ldr	r3, [pc, #220]	@ (800cf08 <_strtod_l+0x590>)
 800ce2a:	eba9 0808 	sub.w	r8, r9, r8
 800ce2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ce32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ce36:	4650      	mov	r0, sl
 800ce38:	4659      	mov	r1, fp
 800ce3a:	f7f3 fd17 	bl	800086c <__aeabi_ddiv>
 800ce3e:	e783      	b.n	800cd48 <_strtod_l+0x3d0>
 800ce40:	4b32      	ldr	r3, [pc, #200]	@ (800cf0c <_strtod_l+0x594>)
 800ce42:	9308      	str	r3, [sp, #32]
 800ce44:	2300      	movs	r3, #0
 800ce46:	1124      	asrs	r4, r4, #4
 800ce48:	4650      	mov	r0, sl
 800ce4a:	4659      	mov	r1, fp
 800ce4c:	461e      	mov	r6, r3
 800ce4e:	2c01      	cmp	r4, #1
 800ce50:	dc21      	bgt.n	800ce96 <_strtod_l+0x51e>
 800ce52:	b10b      	cbz	r3, 800ce58 <_strtod_l+0x4e0>
 800ce54:	4682      	mov	sl, r0
 800ce56:	468b      	mov	fp, r1
 800ce58:	492c      	ldr	r1, [pc, #176]	@ (800cf0c <_strtod_l+0x594>)
 800ce5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ce5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ce62:	4652      	mov	r2, sl
 800ce64:	465b      	mov	r3, fp
 800ce66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce6a:	f7f3 fbd5 	bl	8000618 <__aeabi_dmul>
 800ce6e:	4b28      	ldr	r3, [pc, #160]	@ (800cf10 <_strtod_l+0x598>)
 800ce70:	460a      	mov	r2, r1
 800ce72:	400b      	ands	r3, r1
 800ce74:	4927      	ldr	r1, [pc, #156]	@ (800cf14 <_strtod_l+0x59c>)
 800ce76:	428b      	cmp	r3, r1
 800ce78:	4682      	mov	sl, r0
 800ce7a:	d898      	bhi.n	800cdae <_strtod_l+0x436>
 800ce7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce80:	428b      	cmp	r3, r1
 800ce82:	bf86      	itte	hi
 800ce84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cf18 <_strtod_l+0x5a0>
 800ce88:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce90:	2300      	movs	r3, #0
 800ce92:	9308      	str	r3, [sp, #32]
 800ce94:	e07a      	b.n	800cf8c <_strtod_l+0x614>
 800ce96:	07e2      	lsls	r2, r4, #31
 800ce98:	d505      	bpl.n	800cea6 <_strtod_l+0x52e>
 800ce9a:	9b08      	ldr	r3, [sp, #32]
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fbba 	bl	8000618 <__aeabi_dmul>
 800cea4:	2301      	movs	r3, #1
 800cea6:	9a08      	ldr	r2, [sp, #32]
 800cea8:	3208      	adds	r2, #8
 800ceaa:	3601      	adds	r6, #1
 800ceac:	1064      	asrs	r4, r4, #1
 800ceae:	9208      	str	r2, [sp, #32]
 800ceb0:	e7cd      	b.n	800ce4e <_strtod_l+0x4d6>
 800ceb2:	d0ed      	beq.n	800ce90 <_strtod_l+0x518>
 800ceb4:	4264      	negs	r4, r4
 800ceb6:	f014 020f 	ands.w	r2, r4, #15
 800ceba:	d00a      	beq.n	800ced2 <_strtod_l+0x55a>
 800cebc:	4b12      	ldr	r3, [pc, #72]	@ (800cf08 <_strtod_l+0x590>)
 800cebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cec2:	4650      	mov	r0, sl
 800cec4:	4659      	mov	r1, fp
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 fccf 	bl	800086c <__aeabi_ddiv>
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	1124      	asrs	r4, r4, #4
 800ced4:	d0dc      	beq.n	800ce90 <_strtod_l+0x518>
 800ced6:	2c1f      	cmp	r4, #31
 800ced8:	dd20      	ble.n	800cf1c <_strtod_l+0x5a4>
 800ceda:	2400      	movs	r4, #0
 800cedc:	46a0      	mov	r8, r4
 800cede:	940a      	str	r4, [sp, #40]	@ 0x28
 800cee0:	46a1      	mov	r9, r4
 800cee2:	9a05      	ldr	r2, [sp, #20]
 800cee4:	2322      	movs	r3, #34	@ 0x22
 800cee6:	f04f 0a00 	mov.w	sl, #0
 800ceea:	f04f 0b00 	mov.w	fp, #0
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	e768      	b.n	800cdc4 <_strtod_l+0x44c>
 800cef2:	bf00      	nop
 800cef4:	0801243d 	.word	0x0801243d
 800cef8:	08012654 	.word	0x08012654
 800cefc:	08012435 	.word	0x08012435
 800cf00:	0801246c 	.word	0x0801246c
 800cf04:	080127fd 	.word	0x080127fd
 800cf08:	08012588 	.word	0x08012588
 800cf0c:	08012560 	.word	0x08012560
 800cf10:	7ff00000 	.word	0x7ff00000
 800cf14:	7ca00000 	.word	0x7ca00000
 800cf18:	7fefffff 	.word	0x7fefffff
 800cf1c:	f014 0310 	ands.w	r3, r4, #16
 800cf20:	bf18      	it	ne
 800cf22:	236a      	movne	r3, #106	@ 0x6a
 800cf24:	4ea9      	ldr	r6, [pc, #676]	@ (800d1cc <_strtod_l+0x854>)
 800cf26:	9308      	str	r3, [sp, #32]
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	07e2      	lsls	r2, r4, #31
 800cf30:	d504      	bpl.n	800cf3c <_strtod_l+0x5c4>
 800cf32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf36:	f7f3 fb6f 	bl	8000618 <__aeabi_dmul>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	1064      	asrs	r4, r4, #1
 800cf3e:	f106 0608 	add.w	r6, r6, #8
 800cf42:	d1f4      	bne.n	800cf2e <_strtod_l+0x5b6>
 800cf44:	b10b      	cbz	r3, 800cf4a <_strtod_l+0x5d2>
 800cf46:	4682      	mov	sl, r0
 800cf48:	468b      	mov	fp, r1
 800cf4a:	9b08      	ldr	r3, [sp, #32]
 800cf4c:	b1b3      	cbz	r3, 800cf7c <_strtod_l+0x604>
 800cf4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cf52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	4659      	mov	r1, fp
 800cf5a:	dd0f      	ble.n	800cf7c <_strtod_l+0x604>
 800cf5c:	2b1f      	cmp	r3, #31
 800cf5e:	dd55      	ble.n	800d00c <_strtod_l+0x694>
 800cf60:	2b34      	cmp	r3, #52	@ 0x34
 800cf62:	bfde      	ittt	le
 800cf64:	f04f 33ff 	movle.w	r3, #4294967295
 800cf68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf6c:	4093      	lslle	r3, r2
 800cf6e:	f04f 0a00 	mov.w	sl, #0
 800cf72:	bfcc      	ite	gt
 800cf74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf78:	ea03 0b01 	andle.w	fp, r3, r1
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4650      	mov	r0, sl
 800cf82:	4659      	mov	r1, fp
 800cf84:	f7f3 fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d1a6      	bne.n	800ceda <_strtod_l+0x562>
 800cf8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf92:	9805      	ldr	r0, [sp, #20]
 800cf94:	462b      	mov	r3, r5
 800cf96:	463a      	mov	r2, r7
 800cf98:	f7ff f8c6 	bl	800c128 <__s2b>
 800cf9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f43f af05 	beq.w	800cdae <_strtod_l+0x436>
 800cfa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	eba9 0308 	sub.w	r3, r9, r8
 800cfac:	bfa8      	it	ge
 800cfae:	2300      	movge	r3, #0
 800cfb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cfb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800cfba:	46a0      	mov	r8, r4
 800cfbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfbe:	9805      	ldr	r0, [sp, #20]
 800cfc0:	6859      	ldr	r1, [r3, #4]
 800cfc2:	f7ff f809 	bl	800bfd8 <_Balloc>
 800cfc6:	4681      	mov	r9, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	f43f aef4 	beq.w	800cdb6 <_strtod_l+0x43e>
 800cfce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfd0:	691a      	ldr	r2, [r3, #16]
 800cfd2:	3202      	adds	r2, #2
 800cfd4:	f103 010c 	add.w	r1, r3, #12
 800cfd8:	0092      	lsls	r2, r2, #2
 800cfda:	300c      	adds	r0, #12
 800cfdc:	f000 fdfc 	bl	800dbd8 <memcpy>
 800cfe0:	ec4b ab10 	vmov	d0, sl, fp
 800cfe4:	9805      	ldr	r0, [sp, #20]
 800cfe6:	aa1c      	add	r2, sp, #112	@ 0x70
 800cfe8:	a91b      	add	r1, sp, #108	@ 0x6c
 800cfea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cfee:	f7ff fbd7 	bl	800c7a0 <__d2b>
 800cff2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cff4:	2800      	cmp	r0, #0
 800cff6:	f43f aede 	beq.w	800cdb6 <_strtod_l+0x43e>
 800cffa:	9805      	ldr	r0, [sp, #20]
 800cffc:	2101      	movs	r1, #1
 800cffe:	f7ff f929 	bl	800c254 <__i2b>
 800d002:	4680      	mov	r8, r0
 800d004:	b948      	cbnz	r0, 800d01a <_strtod_l+0x6a2>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	e6d4      	b.n	800cdb6 <_strtod_l+0x43e>
 800d00c:	f04f 32ff 	mov.w	r2, #4294967295
 800d010:	fa02 f303 	lsl.w	r3, r2, r3
 800d014:	ea03 0a0a 	and.w	sl, r3, sl
 800d018:	e7b0      	b.n	800cf7c <_strtod_l+0x604>
 800d01a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d01c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d01e:	2d00      	cmp	r5, #0
 800d020:	bfab      	itete	ge
 800d022:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d024:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d026:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d028:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d02a:	bfac      	ite	ge
 800d02c:	18ef      	addge	r7, r5, r3
 800d02e:	1b5e      	sublt	r6, r3, r5
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	1aed      	subs	r5, r5, r3
 800d034:	4415      	add	r5, r2
 800d036:	4b66      	ldr	r3, [pc, #408]	@ (800d1d0 <_strtod_l+0x858>)
 800d038:	3d01      	subs	r5, #1
 800d03a:	429d      	cmp	r5, r3
 800d03c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d040:	da50      	bge.n	800d0e4 <_strtod_l+0x76c>
 800d042:	1b5b      	subs	r3, r3, r5
 800d044:	2b1f      	cmp	r3, #31
 800d046:	eba2 0203 	sub.w	r2, r2, r3
 800d04a:	f04f 0101 	mov.w	r1, #1
 800d04e:	dc3d      	bgt.n	800d0cc <_strtod_l+0x754>
 800d050:	fa01 f303 	lsl.w	r3, r1, r3
 800d054:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d056:	2300      	movs	r3, #0
 800d058:	9310      	str	r3, [sp, #64]	@ 0x40
 800d05a:	18bd      	adds	r5, r7, r2
 800d05c:	9b08      	ldr	r3, [sp, #32]
 800d05e:	42af      	cmp	r7, r5
 800d060:	4416      	add	r6, r2
 800d062:	441e      	add	r6, r3
 800d064:	463b      	mov	r3, r7
 800d066:	bfa8      	it	ge
 800d068:	462b      	movge	r3, r5
 800d06a:	42b3      	cmp	r3, r6
 800d06c:	bfa8      	it	ge
 800d06e:	4633      	movge	r3, r6
 800d070:	2b00      	cmp	r3, #0
 800d072:	bfc2      	ittt	gt
 800d074:	1aed      	subgt	r5, r5, r3
 800d076:	1af6      	subgt	r6, r6, r3
 800d078:	1aff      	subgt	r7, r7, r3
 800d07a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dd16      	ble.n	800d0ae <_strtod_l+0x736>
 800d080:	4641      	mov	r1, r8
 800d082:	9805      	ldr	r0, [sp, #20]
 800d084:	461a      	mov	r2, r3
 800d086:	f7ff f9a5 	bl	800c3d4 <__pow5mult>
 800d08a:	4680      	mov	r8, r0
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d0ba      	beq.n	800d006 <_strtod_l+0x68e>
 800d090:	4601      	mov	r1, r0
 800d092:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d094:	9805      	ldr	r0, [sp, #20]
 800d096:	f7ff f8f3 	bl	800c280 <__multiply>
 800d09a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f43f ae8a 	beq.w	800cdb6 <_strtod_l+0x43e>
 800d0a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0a4:	9805      	ldr	r0, [sp, #20]
 800d0a6:	f7fe ffd7 	bl	800c058 <_Bfree>
 800d0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	dc1d      	bgt.n	800d0ee <_strtod_l+0x776>
 800d0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dd23      	ble.n	800d100 <_strtod_l+0x788>
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d0bc:	9805      	ldr	r0, [sp, #20]
 800d0be:	f7ff f989 	bl	800c3d4 <__pow5mult>
 800d0c2:	4681      	mov	r9, r0
 800d0c4:	b9e0      	cbnz	r0, 800d100 <_strtod_l+0x788>
 800d0c6:	f04f 0900 	mov.w	r9, #0
 800d0ca:	e674      	b.n	800cdb6 <_strtod_l+0x43e>
 800d0cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d0d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d0d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d0d8:	35e2      	adds	r5, #226	@ 0xe2
 800d0da:	fa01 f305 	lsl.w	r3, r1, r5
 800d0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d0e2:	e7ba      	b.n	800d05a <_strtod_l+0x6e2>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0ec:	e7b5      	b.n	800d05a <_strtod_l+0x6e2>
 800d0ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0f0:	9805      	ldr	r0, [sp, #20]
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	f7ff f9c8 	bl	800c488 <__lshift>
 800d0f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d1d9      	bne.n	800d0b2 <_strtod_l+0x73a>
 800d0fe:	e65a      	b.n	800cdb6 <_strtod_l+0x43e>
 800d100:	2e00      	cmp	r6, #0
 800d102:	dd07      	ble.n	800d114 <_strtod_l+0x79c>
 800d104:	4649      	mov	r1, r9
 800d106:	9805      	ldr	r0, [sp, #20]
 800d108:	4632      	mov	r2, r6
 800d10a:	f7ff f9bd 	bl	800c488 <__lshift>
 800d10e:	4681      	mov	r9, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d0d8      	beq.n	800d0c6 <_strtod_l+0x74e>
 800d114:	2f00      	cmp	r7, #0
 800d116:	dd08      	ble.n	800d12a <_strtod_l+0x7b2>
 800d118:	4641      	mov	r1, r8
 800d11a:	9805      	ldr	r0, [sp, #20]
 800d11c:	463a      	mov	r2, r7
 800d11e:	f7ff f9b3 	bl	800c488 <__lshift>
 800d122:	4680      	mov	r8, r0
 800d124:	2800      	cmp	r0, #0
 800d126:	f43f ae46 	beq.w	800cdb6 <_strtod_l+0x43e>
 800d12a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d12c:	9805      	ldr	r0, [sp, #20]
 800d12e:	464a      	mov	r2, r9
 800d130:	f7ff fa32 	bl	800c598 <__mdiff>
 800d134:	4604      	mov	r4, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	f43f ae3d 	beq.w	800cdb6 <_strtod_l+0x43e>
 800d13c:	68c3      	ldr	r3, [r0, #12]
 800d13e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d140:	2300      	movs	r3, #0
 800d142:	60c3      	str	r3, [r0, #12]
 800d144:	4641      	mov	r1, r8
 800d146:	f7ff fa0b 	bl	800c560 <__mcmp>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	da46      	bge.n	800d1dc <_strtod_l+0x864>
 800d14e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d150:	ea53 030a 	orrs.w	r3, r3, sl
 800d154:	d16c      	bne.n	800d230 <_strtod_l+0x8b8>
 800d156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d168      	bne.n	800d230 <_strtod_l+0x8b8>
 800d15e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d162:	0d1b      	lsrs	r3, r3, #20
 800d164:	051b      	lsls	r3, r3, #20
 800d166:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d16a:	d961      	bls.n	800d230 <_strtod_l+0x8b8>
 800d16c:	6963      	ldr	r3, [r4, #20]
 800d16e:	b913      	cbnz	r3, 800d176 <_strtod_l+0x7fe>
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	2b01      	cmp	r3, #1
 800d174:	dd5c      	ble.n	800d230 <_strtod_l+0x8b8>
 800d176:	4621      	mov	r1, r4
 800d178:	2201      	movs	r2, #1
 800d17a:	9805      	ldr	r0, [sp, #20]
 800d17c:	f7ff f984 	bl	800c488 <__lshift>
 800d180:	4641      	mov	r1, r8
 800d182:	4604      	mov	r4, r0
 800d184:	f7ff f9ec 	bl	800c560 <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dd51      	ble.n	800d230 <_strtod_l+0x8b8>
 800d18c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d190:	9a08      	ldr	r2, [sp, #32]
 800d192:	0d1b      	lsrs	r3, r3, #20
 800d194:	051b      	lsls	r3, r3, #20
 800d196:	2a00      	cmp	r2, #0
 800d198:	d06b      	beq.n	800d272 <_strtod_l+0x8fa>
 800d19a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d19e:	d868      	bhi.n	800d272 <_strtod_l+0x8fa>
 800d1a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d1a4:	f67f ae9d 	bls.w	800cee2 <_strtod_l+0x56a>
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d1d4 <_strtod_l+0x85c>)
 800d1aa:	4650      	mov	r0, sl
 800d1ac:	4659      	mov	r1, fp
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f7f3 fa32 	bl	8000618 <__aeabi_dmul>
 800d1b4:	4b08      	ldr	r3, [pc, #32]	@ (800d1d8 <_strtod_l+0x860>)
 800d1b6:	400b      	ands	r3, r1
 800d1b8:	4682      	mov	sl, r0
 800d1ba:	468b      	mov	fp, r1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f47f ae05 	bne.w	800cdcc <_strtod_l+0x454>
 800d1c2:	9a05      	ldr	r2, [sp, #20]
 800d1c4:	2322      	movs	r3, #34	@ 0x22
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	e600      	b.n	800cdcc <_strtod_l+0x454>
 800d1ca:	bf00      	nop
 800d1cc:	08012680 	.word	0x08012680
 800d1d0:	fffffc02 	.word	0xfffffc02
 800d1d4:	39500000 	.word	0x39500000
 800d1d8:	7ff00000 	.word	0x7ff00000
 800d1dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d1e0:	d165      	bne.n	800d2ae <_strtod_l+0x936>
 800d1e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1e8:	b35a      	cbz	r2, 800d242 <_strtod_l+0x8ca>
 800d1ea:	4a9f      	ldr	r2, [pc, #636]	@ (800d468 <_strtod_l+0xaf0>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d12b      	bne.n	800d248 <_strtod_l+0x8d0>
 800d1f0:	9b08      	ldr	r3, [sp, #32]
 800d1f2:	4651      	mov	r1, sl
 800d1f4:	b303      	cbz	r3, 800d238 <_strtod_l+0x8c0>
 800d1f6:	4b9d      	ldr	r3, [pc, #628]	@ (800d46c <_strtod_l+0xaf4>)
 800d1f8:	465a      	mov	r2, fp
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d200:	f04f 32ff 	mov.w	r2, #4294967295
 800d204:	d81b      	bhi.n	800d23e <_strtod_l+0x8c6>
 800d206:	0d1b      	lsrs	r3, r3, #20
 800d208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d20c:	fa02 f303 	lsl.w	r3, r2, r3
 800d210:	4299      	cmp	r1, r3
 800d212:	d119      	bne.n	800d248 <_strtod_l+0x8d0>
 800d214:	4b96      	ldr	r3, [pc, #600]	@ (800d470 <_strtod_l+0xaf8>)
 800d216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d218:	429a      	cmp	r2, r3
 800d21a:	d102      	bne.n	800d222 <_strtod_l+0x8aa>
 800d21c:	3101      	adds	r1, #1
 800d21e:	f43f adca 	beq.w	800cdb6 <_strtod_l+0x43e>
 800d222:	4b92      	ldr	r3, [pc, #584]	@ (800d46c <_strtod_l+0xaf4>)
 800d224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d226:	401a      	ands	r2, r3
 800d228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d22c:	f04f 0a00 	mov.w	sl, #0
 800d230:	9b08      	ldr	r3, [sp, #32]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1b8      	bne.n	800d1a8 <_strtod_l+0x830>
 800d236:	e5c9      	b.n	800cdcc <_strtod_l+0x454>
 800d238:	f04f 33ff 	mov.w	r3, #4294967295
 800d23c:	e7e8      	b.n	800d210 <_strtod_l+0x898>
 800d23e:	4613      	mov	r3, r2
 800d240:	e7e6      	b.n	800d210 <_strtod_l+0x898>
 800d242:	ea53 030a 	orrs.w	r3, r3, sl
 800d246:	d0a1      	beq.n	800d18c <_strtod_l+0x814>
 800d248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d24a:	b1db      	cbz	r3, 800d284 <_strtod_l+0x90c>
 800d24c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d24e:	4213      	tst	r3, r2
 800d250:	d0ee      	beq.n	800d230 <_strtod_l+0x8b8>
 800d252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d254:	9a08      	ldr	r2, [sp, #32]
 800d256:	4650      	mov	r0, sl
 800d258:	4659      	mov	r1, fp
 800d25a:	b1bb      	cbz	r3, 800d28c <_strtod_l+0x914>
 800d25c:	f7ff fb6e 	bl	800c93c <sulp>
 800d260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d264:	ec53 2b10 	vmov	r2, r3, d0
 800d268:	f7f3 f820 	bl	80002ac <__adddf3>
 800d26c:	4682      	mov	sl, r0
 800d26e:	468b      	mov	fp, r1
 800d270:	e7de      	b.n	800d230 <_strtod_l+0x8b8>
 800d272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d27a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d27e:	f04f 3aff 	mov.w	sl, #4294967295
 800d282:	e7d5      	b.n	800d230 <_strtod_l+0x8b8>
 800d284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d286:	ea13 0f0a 	tst.w	r3, sl
 800d28a:	e7e1      	b.n	800d250 <_strtod_l+0x8d8>
 800d28c:	f7ff fb56 	bl	800c93c <sulp>
 800d290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d294:	ec53 2b10 	vmov	r2, r3, d0
 800d298:	f7f3 f806 	bl	80002a8 <__aeabi_dsub>
 800d29c:	2200      	movs	r2, #0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	468b      	mov	fp, r1
 800d2a4:	f7f3 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d0c1      	beq.n	800d230 <_strtod_l+0x8b8>
 800d2ac:	e619      	b.n	800cee2 <_strtod_l+0x56a>
 800d2ae:	4641      	mov	r1, r8
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7ff facd 	bl	800c850 <__ratio>
 800d2b6:	ec57 6b10 	vmov	r6, r7, d0
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	f7f3 fc24 	bl	8000b10 <__aeabi_dcmple>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d06f      	beq.n	800d3ac <_strtod_l+0xa34>
 800d2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d17a      	bne.n	800d3c8 <_strtod_l+0xa50>
 800d2d2:	f1ba 0f00 	cmp.w	sl, #0
 800d2d6:	d158      	bne.n	800d38a <_strtod_l+0xa12>
 800d2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d15a      	bne.n	800d398 <_strtod_l+0xa20>
 800d2e2:	4b64      	ldr	r3, [pc, #400]	@ (800d474 <_strtod_l+0xafc>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	f7f3 fc07 	bl	8000afc <__aeabi_dcmplt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d159      	bne.n	800d3a6 <_strtod_l+0xa2e>
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4b60      	ldr	r3, [pc, #384]	@ (800d478 <_strtod_l+0xb00>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f7f3 f98d 	bl	8000618 <__aeabi_dmul>
 800d2fe:	4606      	mov	r6, r0
 800d300:	460f      	mov	r7, r1
 800d302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d306:	9606      	str	r6, [sp, #24]
 800d308:	9307      	str	r3, [sp, #28]
 800d30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d30e:	4d57      	ldr	r5, [pc, #348]	@ (800d46c <_strtod_l+0xaf4>)
 800d310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d316:	401d      	ands	r5, r3
 800d318:	4b58      	ldr	r3, [pc, #352]	@ (800d47c <_strtod_l+0xb04>)
 800d31a:	429d      	cmp	r5, r3
 800d31c:	f040 80b2 	bne.w	800d484 <_strtod_l+0xb0c>
 800d320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d326:	ec4b ab10 	vmov	d0, sl, fp
 800d32a:	f7ff f9c9 	bl	800c6c0 <__ulp>
 800d32e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d332:	ec51 0b10 	vmov	r0, r1, d0
 800d336:	f7f3 f96f 	bl	8000618 <__aeabi_dmul>
 800d33a:	4652      	mov	r2, sl
 800d33c:	465b      	mov	r3, fp
 800d33e:	f7f2 ffb5 	bl	80002ac <__adddf3>
 800d342:	460b      	mov	r3, r1
 800d344:	4949      	ldr	r1, [pc, #292]	@ (800d46c <_strtod_l+0xaf4>)
 800d346:	4a4e      	ldr	r2, [pc, #312]	@ (800d480 <_strtod_l+0xb08>)
 800d348:	4019      	ands	r1, r3
 800d34a:	4291      	cmp	r1, r2
 800d34c:	4682      	mov	sl, r0
 800d34e:	d942      	bls.n	800d3d6 <_strtod_l+0xa5e>
 800d350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d352:	4b47      	ldr	r3, [pc, #284]	@ (800d470 <_strtod_l+0xaf8>)
 800d354:	429a      	cmp	r2, r3
 800d356:	d103      	bne.n	800d360 <_strtod_l+0x9e8>
 800d358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d35a:	3301      	adds	r3, #1
 800d35c:	f43f ad2b 	beq.w	800cdb6 <_strtod_l+0x43e>
 800d360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d470 <_strtod_l+0xaf8>
 800d364:	f04f 3aff 	mov.w	sl, #4294967295
 800d368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d36a:	9805      	ldr	r0, [sp, #20]
 800d36c:	f7fe fe74 	bl	800c058 <_Bfree>
 800d370:	9805      	ldr	r0, [sp, #20]
 800d372:	4649      	mov	r1, r9
 800d374:	f7fe fe70 	bl	800c058 <_Bfree>
 800d378:	9805      	ldr	r0, [sp, #20]
 800d37a:	4641      	mov	r1, r8
 800d37c:	f7fe fe6c 	bl	800c058 <_Bfree>
 800d380:	9805      	ldr	r0, [sp, #20]
 800d382:	4621      	mov	r1, r4
 800d384:	f7fe fe68 	bl	800c058 <_Bfree>
 800d388:	e618      	b.n	800cfbc <_strtod_l+0x644>
 800d38a:	f1ba 0f01 	cmp.w	sl, #1
 800d38e:	d103      	bne.n	800d398 <_strtod_l+0xa20>
 800d390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d392:	2b00      	cmp	r3, #0
 800d394:	f43f ada5 	beq.w	800cee2 <_strtod_l+0x56a>
 800d398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d448 <_strtod_l+0xad0>
 800d39c:	4f35      	ldr	r7, [pc, #212]	@ (800d474 <_strtod_l+0xafc>)
 800d39e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3a2:	2600      	movs	r6, #0
 800d3a4:	e7b1      	b.n	800d30a <_strtod_l+0x992>
 800d3a6:	4f34      	ldr	r7, [pc, #208]	@ (800d478 <_strtod_l+0xb00>)
 800d3a8:	2600      	movs	r6, #0
 800d3aa:	e7aa      	b.n	800d302 <_strtod_l+0x98a>
 800d3ac:	4b32      	ldr	r3, [pc, #200]	@ (800d478 <_strtod_l+0xb00>)
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f7f3 f930 	bl	8000618 <__aeabi_dmul>
 800d3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d09f      	beq.n	800d302 <_strtod_l+0x98a>
 800d3c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d3c6:	e7a0      	b.n	800d30a <_strtod_l+0x992>
 800d3c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d450 <_strtod_l+0xad8>
 800d3cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3d0:	ec57 6b17 	vmov	r6, r7, d7
 800d3d4:	e799      	b.n	800d30a <_strtod_l+0x992>
 800d3d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d3da:	9b08      	ldr	r3, [sp, #32]
 800d3dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1c1      	bne.n	800d368 <_strtod_l+0x9f0>
 800d3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d3e8:	0d1b      	lsrs	r3, r3, #20
 800d3ea:	051b      	lsls	r3, r3, #20
 800d3ec:	429d      	cmp	r5, r3
 800d3ee:	d1bb      	bne.n	800d368 <_strtod_l+0x9f0>
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	f7f3 fc70 	bl	8000cd8 <__aeabi_d2lz>
 800d3f8:	f7f3 f8e0 	bl	80005bc <__aeabi_l2d>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4630      	mov	r0, r6
 800d402:	4639      	mov	r1, r7
 800d404:	f7f2 ff50 	bl	80002a8 <__aeabi_dsub>
 800d408:	460b      	mov	r3, r1
 800d40a:	4602      	mov	r2, r0
 800d40c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d416:	ea46 060a 	orr.w	r6, r6, sl
 800d41a:	431e      	orrs	r6, r3
 800d41c:	d06f      	beq.n	800d4fe <_strtod_l+0xb86>
 800d41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d458 <_strtod_l+0xae0>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f3 fb6a 	bl	8000afc <__aeabi_dcmplt>
 800d428:	2800      	cmp	r0, #0
 800d42a:	f47f accf 	bne.w	800cdcc <_strtod_l+0x454>
 800d42e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d460 <_strtod_l+0xae8>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d438:	f7f3 fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d093      	beq.n	800d368 <_strtod_l+0x9f0>
 800d440:	e4c4      	b.n	800cdcc <_strtod_l+0x454>
 800d442:	bf00      	nop
 800d444:	f3af 8000 	nop.w
 800d448:	00000000 	.word	0x00000000
 800d44c:	bff00000 	.word	0xbff00000
 800d450:	00000000 	.word	0x00000000
 800d454:	3ff00000 	.word	0x3ff00000
 800d458:	94a03595 	.word	0x94a03595
 800d45c:	3fdfffff 	.word	0x3fdfffff
 800d460:	35afe535 	.word	0x35afe535
 800d464:	3fe00000 	.word	0x3fe00000
 800d468:	000fffff 	.word	0x000fffff
 800d46c:	7ff00000 	.word	0x7ff00000
 800d470:	7fefffff 	.word	0x7fefffff
 800d474:	3ff00000 	.word	0x3ff00000
 800d478:	3fe00000 	.word	0x3fe00000
 800d47c:	7fe00000 	.word	0x7fe00000
 800d480:	7c9fffff 	.word	0x7c9fffff
 800d484:	9b08      	ldr	r3, [sp, #32]
 800d486:	b323      	cbz	r3, 800d4d2 <_strtod_l+0xb5a>
 800d488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d48c:	d821      	bhi.n	800d4d2 <_strtod_l+0xb5a>
 800d48e:	a328      	add	r3, pc, #160	@ (adr r3, 800d530 <_strtod_l+0xbb8>)
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	4630      	mov	r0, r6
 800d496:	4639      	mov	r1, r7
 800d498:	f7f3 fb3a 	bl	8000b10 <__aeabi_dcmple>
 800d49c:	b1a0      	cbz	r0, 800d4c8 <_strtod_l+0xb50>
 800d49e:	4639      	mov	r1, r7
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7f3 fb91 	bl	8000bc8 <__aeabi_d2uiz>
 800d4a6:	2801      	cmp	r0, #1
 800d4a8:	bf38      	it	cc
 800d4aa:	2001      	movcc	r0, #1
 800d4ac:	f7f3 f83a 	bl	8000524 <__aeabi_ui2d>
 800d4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	b9fb      	cbnz	r3, 800d4f8 <_strtod_l+0xb80>
 800d4b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800d4be:	9315      	str	r3, [sp, #84]	@ 0x54
 800d4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d4c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d4ce:	1b5b      	subs	r3, r3, r5
 800d4d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d4da:	f7ff f8f1 	bl	800c6c0 <__ulp>
 800d4de:	4650      	mov	r0, sl
 800d4e0:	ec53 2b10 	vmov	r2, r3, d0
 800d4e4:	4659      	mov	r1, fp
 800d4e6:	f7f3 f897 	bl	8000618 <__aeabi_dmul>
 800d4ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d4ee:	f7f2 fedd 	bl	80002ac <__adddf3>
 800d4f2:	4682      	mov	sl, r0
 800d4f4:	468b      	mov	fp, r1
 800d4f6:	e770      	b.n	800d3da <_strtod_l+0xa62>
 800d4f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d4fc:	e7e0      	b.n	800d4c0 <_strtod_l+0xb48>
 800d4fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800d538 <_strtod_l+0xbc0>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f3 fafa 	bl	8000afc <__aeabi_dcmplt>
 800d508:	e798      	b.n	800d43c <_strtod_l+0xac4>
 800d50a:	2300      	movs	r3, #0
 800d50c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d50e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	f7ff ba6d 	b.w	800c9f2 <_strtod_l+0x7a>
 800d518:	2a65      	cmp	r2, #101	@ 0x65
 800d51a:	f43f ab66 	beq.w	800cbea <_strtod_l+0x272>
 800d51e:	2a45      	cmp	r2, #69	@ 0x45
 800d520:	f43f ab63 	beq.w	800cbea <_strtod_l+0x272>
 800d524:	2301      	movs	r3, #1
 800d526:	f7ff bb9e 	b.w	800cc66 <_strtod_l+0x2ee>
 800d52a:	bf00      	nop
 800d52c:	f3af 8000 	nop.w
 800d530:	ffc00000 	.word	0xffc00000
 800d534:	41dfffff 	.word	0x41dfffff
 800d538:	94a03595 	.word	0x94a03595
 800d53c:	3fcfffff 	.word	0x3fcfffff

0800d540 <_strtod_r>:
 800d540:	4b01      	ldr	r3, [pc, #4]	@ (800d548 <_strtod_r+0x8>)
 800d542:	f7ff ba19 	b.w	800c978 <_strtod_l>
 800d546:	bf00      	nop
 800d548:	20000154 	.word	0x20000154

0800d54c <_strtol_l.constprop.0>:
 800d54c:	2b24      	cmp	r3, #36	@ 0x24
 800d54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d552:	4686      	mov	lr, r0
 800d554:	4690      	mov	r8, r2
 800d556:	d801      	bhi.n	800d55c <_strtol_l.constprop.0+0x10>
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d106      	bne.n	800d56a <_strtol_l.constprop.0+0x1e>
 800d55c:	f000 fb36 	bl	800dbcc <__errno>
 800d560:	2316      	movs	r3, #22
 800d562:	6003      	str	r3, [r0, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56a:	4834      	ldr	r0, [pc, #208]	@ (800d63c <_strtol_l.constprop.0+0xf0>)
 800d56c:	460d      	mov	r5, r1
 800d56e:	462a      	mov	r2, r5
 800d570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d574:	5d06      	ldrb	r6, [r0, r4]
 800d576:	f016 0608 	ands.w	r6, r6, #8
 800d57a:	d1f8      	bne.n	800d56e <_strtol_l.constprop.0+0x22>
 800d57c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d57e:	d12d      	bne.n	800d5dc <_strtol_l.constprop.0+0x90>
 800d580:	782c      	ldrb	r4, [r5, #0]
 800d582:	2601      	movs	r6, #1
 800d584:	1c95      	adds	r5, r2, #2
 800d586:	f033 0210 	bics.w	r2, r3, #16
 800d58a:	d109      	bne.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d58c:	2c30      	cmp	r4, #48	@ 0x30
 800d58e:	d12a      	bne.n	800d5e6 <_strtol_l.constprop.0+0x9a>
 800d590:	782a      	ldrb	r2, [r5, #0]
 800d592:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d596:	2a58      	cmp	r2, #88	@ 0x58
 800d598:	d125      	bne.n	800d5e6 <_strtol_l.constprop.0+0x9a>
 800d59a:	786c      	ldrb	r4, [r5, #1]
 800d59c:	2310      	movs	r3, #16
 800d59e:	3502      	adds	r5, #2
 800d5a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d5a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	fbbc f9f3 	udiv	r9, ip, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d5b8:	2f09      	cmp	r7, #9
 800d5ba:	d81b      	bhi.n	800d5f4 <_strtol_l.constprop.0+0xa8>
 800d5bc:	463c      	mov	r4, r7
 800d5be:	42a3      	cmp	r3, r4
 800d5c0:	dd27      	ble.n	800d612 <_strtol_l.constprop.0+0xc6>
 800d5c2:	1c57      	adds	r7, r2, #1
 800d5c4:	d007      	beq.n	800d5d6 <_strtol_l.constprop.0+0x8a>
 800d5c6:	4581      	cmp	r9, r0
 800d5c8:	d320      	bcc.n	800d60c <_strtol_l.constprop.0+0xc0>
 800d5ca:	d101      	bne.n	800d5d0 <_strtol_l.constprop.0+0x84>
 800d5cc:	45a2      	cmp	sl, r4
 800d5ce:	db1d      	blt.n	800d60c <_strtol_l.constprop.0+0xc0>
 800d5d0:	fb00 4003 	mla	r0, r0, r3, r4
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5da:	e7eb      	b.n	800d5b4 <_strtol_l.constprop.0+0x68>
 800d5dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5de:	bf04      	itt	eq
 800d5e0:	782c      	ldrbeq	r4, [r5, #0]
 800d5e2:	1c95      	addeq	r5, r2, #2
 800d5e4:	e7cf      	b.n	800d586 <_strtol_l.constprop.0+0x3a>
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1da      	bne.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d5ea:	2c30      	cmp	r4, #48	@ 0x30
 800d5ec:	bf0c      	ite	eq
 800d5ee:	2308      	moveq	r3, #8
 800d5f0:	230a      	movne	r3, #10
 800d5f2:	e7d5      	b.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d5f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d5f8:	2f19      	cmp	r7, #25
 800d5fa:	d801      	bhi.n	800d600 <_strtol_l.constprop.0+0xb4>
 800d5fc:	3c37      	subs	r4, #55	@ 0x37
 800d5fe:	e7de      	b.n	800d5be <_strtol_l.constprop.0+0x72>
 800d600:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d604:	2f19      	cmp	r7, #25
 800d606:	d804      	bhi.n	800d612 <_strtol_l.constprop.0+0xc6>
 800d608:	3c57      	subs	r4, #87	@ 0x57
 800d60a:	e7d8      	b.n	800d5be <_strtol_l.constprop.0+0x72>
 800d60c:	f04f 32ff 	mov.w	r2, #4294967295
 800d610:	e7e1      	b.n	800d5d6 <_strtol_l.constprop.0+0x8a>
 800d612:	1c53      	adds	r3, r2, #1
 800d614:	d108      	bne.n	800d628 <_strtol_l.constprop.0+0xdc>
 800d616:	2322      	movs	r3, #34	@ 0x22
 800d618:	f8ce 3000 	str.w	r3, [lr]
 800d61c:	4660      	mov	r0, ip
 800d61e:	f1b8 0f00 	cmp.w	r8, #0
 800d622:	d0a0      	beq.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d624:	1e69      	subs	r1, r5, #1
 800d626:	e006      	b.n	800d636 <_strtol_l.constprop.0+0xea>
 800d628:	b106      	cbz	r6, 800d62c <_strtol_l.constprop.0+0xe0>
 800d62a:	4240      	negs	r0, r0
 800d62c:	f1b8 0f00 	cmp.w	r8, #0
 800d630:	d099      	beq.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d632:	2a00      	cmp	r2, #0
 800d634:	d1f6      	bne.n	800d624 <_strtol_l.constprop.0+0xd8>
 800d636:	f8c8 1000 	str.w	r1, [r8]
 800d63a:	e794      	b.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d63c:	080126a9 	.word	0x080126a9

0800d640 <_strtol_r>:
 800d640:	f7ff bf84 	b.w	800d54c <_strtol_l.constprop.0>

0800d644 <__ssputs_r>:
 800d644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d648:	688e      	ldr	r6, [r1, #8]
 800d64a:	461f      	mov	r7, r3
 800d64c:	42be      	cmp	r6, r7
 800d64e:	680b      	ldr	r3, [r1, #0]
 800d650:	4682      	mov	sl, r0
 800d652:	460c      	mov	r4, r1
 800d654:	4690      	mov	r8, r2
 800d656:	d82d      	bhi.n	800d6b4 <__ssputs_r+0x70>
 800d658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d65c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d660:	d026      	beq.n	800d6b0 <__ssputs_r+0x6c>
 800d662:	6965      	ldr	r5, [r4, #20]
 800d664:	6909      	ldr	r1, [r1, #16]
 800d666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d66a:	eba3 0901 	sub.w	r9, r3, r1
 800d66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d672:	1c7b      	adds	r3, r7, #1
 800d674:	444b      	add	r3, r9
 800d676:	106d      	asrs	r5, r5, #1
 800d678:	429d      	cmp	r5, r3
 800d67a:	bf38      	it	cc
 800d67c:	461d      	movcc	r5, r3
 800d67e:	0553      	lsls	r3, r2, #21
 800d680:	d527      	bpl.n	800d6d2 <__ssputs_r+0x8e>
 800d682:	4629      	mov	r1, r5
 800d684:	f7fe fc1c 	bl	800bec0 <_malloc_r>
 800d688:	4606      	mov	r6, r0
 800d68a:	b360      	cbz	r0, 800d6e6 <__ssputs_r+0xa2>
 800d68c:	6921      	ldr	r1, [r4, #16]
 800d68e:	464a      	mov	r2, r9
 800d690:	f000 faa2 	bl	800dbd8 <memcpy>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	6126      	str	r6, [r4, #16]
 800d6a2:	6165      	str	r5, [r4, #20]
 800d6a4:	444e      	add	r6, r9
 800d6a6:	eba5 0509 	sub.w	r5, r5, r9
 800d6aa:	6026      	str	r6, [r4, #0]
 800d6ac:	60a5      	str	r5, [r4, #8]
 800d6ae:	463e      	mov	r6, r7
 800d6b0:	42be      	cmp	r6, r7
 800d6b2:	d900      	bls.n	800d6b6 <__ssputs_r+0x72>
 800d6b4:	463e      	mov	r6, r7
 800d6b6:	6820      	ldr	r0, [r4, #0]
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	4641      	mov	r1, r8
 800d6bc:	f000 fa28 	bl	800db10 <memmove>
 800d6c0:	68a3      	ldr	r3, [r4, #8]
 800d6c2:	1b9b      	subs	r3, r3, r6
 800d6c4:	60a3      	str	r3, [r4, #8]
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	4433      	add	r3, r6
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	f000 fe15 	bl	800e302 <_realloc_r>
 800d6d8:	4606      	mov	r6, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d1e0      	bne.n	800d6a0 <__ssputs_r+0x5c>
 800d6de:	6921      	ldr	r1, [r4, #16]
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	f7fe fb79 	bl	800bdd8 <_free_r>
 800d6e6:	230c      	movs	r3, #12
 800d6e8:	f8ca 3000 	str.w	r3, [sl]
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f8:	e7e9      	b.n	800d6ce <__ssputs_r+0x8a>
	...

0800d6fc <_svfiprintf_r>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	4698      	mov	r8, r3
 800d702:	898b      	ldrh	r3, [r1, #12]
 800d704:	061b      	lsls	r3, r3, #24
 800d706:	b09d      	sub	sp, #116	@ 0x74
 800d708:	4607      	mov	r7, r0
 800d70a:	460d      	mov	r5, r1
 800d70c:	4614      	mov	r4, r2
 800d70e:	d510      	bpl.n	800d732 <_svfiprintf_r+0x36>
 800d710:	690b      	ldr	r3, [r1, #16]
 800d712:	b973      	cbnz	r3, 800d732 <_svfiprintf_r+0x36>
 800d714:	2140      	movs	r1, #64	@ 0x40
 800d716:	f7fe fbd3 	bl	800bec0 <_malloc_r>
 800d71a:	6028      	str	r0, [r5, #0]
 800d71c:	6128      	str	r0, [r5, #16]
 800d71e:	b930      	cbnz	r0, 800d72e <_svfiprintf_r+0x32>
 800d720:	230c      	movs	r3, #12
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	f04f 30ff 	mov.w	r0, #4294967295
 800d728:	b01d      	add	sp, #116	@ 0x74
 800d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72e:	2340      	movs	r3, #64	@ 0x40
 800d730:	616b      	str	r3, [r5, #20]
 800d732:	2300      	movs	r3, #0
 800d734:	9309      	str	r3, [sp, #36]	@ 0x24
 800d736:	2320      	movs	r3, #32
 800d738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d740:	2330      	movs	r3, #48	@ 0x30
 800d742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d8e0 <_svfiprintf_r+0x1e4>
 800d746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d74a:	f04f 0901 	mov.w	r9, #1
 800d74e:	4623      	mov	r3, r4
 800d750:	469a      	mov	sl, r3
 800d752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d756:	b10a      	cbz	r2, 800d75c <_svfiprintf_r+0x60>
 800d758:	2a25      	cmp	r2, #37	@ 0x25
 800d75a:	d1f9      	bne.n	800d750 <_svfiprintf_r+0x54>
 800d75c:	ebba 0b04 	subs.w	fp, sl, r4
 800d760:	d00b      	beq.n	800d77a <_svfiprintf_r+0x7e>
 800d762:	465b      	mov	r3, fp
 800d764:	4622      	mov	r2, r4
 800d766:	4629      	mov	r1, r5
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff ff6b 	bl	800d644 <__ssputs_r>
 800d76e:	3001      	adds	r0, #1
 800d770:	f000 80a7 	beq.w	800d8c2 <_svfiprintf_r+0x1c6>
 800d774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d776:	445a      	add	r2, fp
 800d778:	9209      	str	r2, [sp, #36]	@ 0x24
 800d77a:	f89a 3000 	ldrb.w	r3, [sl]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 809f 	beq.w	800d8c2 <_svfiprintf_r+0x1c6>
 800d784:	2300      	movs	r3, #0
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d78e:	f10a 0a01 	add.w	sl, sl, #1
 800d792:	9304      	str	r3, [sp, #16]
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d79a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d79c:	4654      	mov	r4, sl
 800d79e:	2205      	movs	r2, #5
 800d7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a4:	484e      	ldr	r0, [pc, #312]	@ (800d8e0 <_svfiprintf_r+0x1e4>)
 800d7a6:	f7f2 fd23 	bl	80001f0 <memchr>
 800d7aa:	9a04      	ldr	r2, [sp, #16]
 800d7ac:	b9d8      	cbnz	r0, 800d7e6 <_svfiprintf_r+0xea>
 800d7ae:	06d0      	lsls	r0, r2, #27
 800d7b0:	bf44      	itt	mi
 800d7b2:	2320      	movmi	r3, #32
 800d7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7b8:	0711      	lsls	r1, r2, #28
 800d7ba:	bf44      	itt	mi
 800d7bc:	232b      	movmi	r3, #43	@ 0x2b
 800d7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7c8:	d015      	beq.n	800d7f6 <_svfiprintf_r+0xfa>
 800d7ca:	9a07      	ldr	r2, [sp, #28]
 800d7cc:	4654      	mov	r4, sl
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f04f 0c0a 	mov.w	ip, #10
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7da:	3b30      	subs	r3, #48	@ 0x30
 800d7dc:	2b09      	cmp	r3, #9
 800d7de:	d94b      	bls.n	800d878 <_svfiprintf_r+0x17c>
 800d7e0:	b1b0      	cbz	r0, 800d810 <_svfiprintf_r+0x114>
 800d7e2:	9207      	str	r2, [sp, #28]
 800d7e4:	e014      	b.n	800d810 <_svfiprintf_r+0x114>
 800d7e6:	eba0 0308 	sub.w	r3, r0, r8
 800d7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	9304      	str	r3, [sp, #16]
 800d7f2:	46a2      	mov	sl, r4
 800d7f4:	e7d2      	b.n	800d79c <_svfiprintf_r+0xa0>
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	1d19      	adds	r1, r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	9103      	str	r1, [sp, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfbb      	ittet	lt
 800d802:	425b      	neglt	r3, r3
 800d804:	f042 0202 	orrlt.w	r2, r2, #2
 800d808:	9307      	strge	r3, [sp, #28]
 800d80a:	9307      	strlt	r3, [sp, #28]
 800d80c:	bfb8      	it	lt
 800d80e:	9204      	strlt	r2, [sp, #16]
 800d810:	7823      	ldrb	r3, [r4, #0]
 800d812:	2b2e      	cmp	r3, #46	@ 0x2e
 800d814:	d10a      	bne.n	800d82c <_svfiprintf_r+0x130>
 800d816:	7863      	ldrb	r3, [r4, #1]
 800d818:	2b2a      	cmp	r3, #42	@ 0x2a
 800d81a:	d132      	bne.n	800d882 <_svfiprintf_r+0x186>
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	9203      	str	r2, [sp, #12]
 800d824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d828:	3402      	adds	r4, #2
 800d82a:	9305      	str	r3, [sp, #20]
 800d82c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d8f0 <_svfiprintf_r+0x1f4>
 800d830:	7821      	ldrb	r1, [r4, #0]
 800d832:	2203      	movs	r2, #3
 800d834:	4650      	mov	r0, sl
 800d836:	f7f2 fcdb 	bl	80001f0 <memchr>
 800d83a:	b138      	cbz	r0, 800d84c <_svfiprintf_r+0x150>
 800d83c:	9b04      	ldr	r3, [sp, #16]
 800d83e:	eba0 000a 	sub.w	r0, r0, sl
 800d842:	2240      	movs	r2, #64	@ 0x40
 800d844:	4082      	lsls	r2, r0
 800d846:	4313      	orrs	r3, r2
 800d848:	3401      	adds	r4, #1
 800d84a:	9304      	str	r3, [sp, #16]
 800d84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d850:	4824      	ldr	r0, [pc, #144]	@ (800d8e4 <_svfiprintf_r+0x1e8>)
 800d852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d856:	2206      	movs	r2, #6
 800d858:	f7f2 fcca 	bl	80001f0 <memchr>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d036      	beq.n	800d8ce <_svfiprintf_r+0x1d2>
 800d860:	4b21      	ldr	r3, [pc, #132]	@ (800d8e8 <_svfiprintf_r+0x1ec>)
 800d862:	bb1b      	cbnz	r3, 800d8ac <_svfiprintf_r+0x1b0>
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	3307      	adds	r3, #7
 800d868:	f023 0307 	bic.w	r3, r3, #7
 800d86c:	3308      	adds	r3, #8
 800d86e:	9303      	str	r3, [sp, #12]
 800d870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d872:	4433      	add	r3, r6
 800d874:	9309      	str	r3, [sp, #36]	@ 0x24
 800d876:	e76a      	b.n	800d74e <_svfiprintf_r+0x52>
 800d878:	fb0c 3202 	mla	r2, ip, r2, r3
 800d87c:	460c      	mov	r4, r1
 800d87e:	2001      	movs	r0, #1
 800d880:	e7a8      	b.n	800d7d4 <_svfiprintf_r+0xd8>
 800d882:	2300      	movs	r3, #0
 800d884:	3401      	adds	r4, #1
 800d886:	9305      	str	r3, [sp, #20]
 800d888:	4619      	mov	r1, r3
 800d88a:	f04f 0c0a 	mov.w	ip, #10
 800d88e:	4620      	mov	r0, r4
 800d890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d894:	3a30      	subs	r2, #48	@ 0x30
 800d896:	2a09      	cmp	r2, #9
 800d898:	d903      	bls.n	800d8a2 <_svfiprintf_r+0x1a6>
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0c6      	beq.n	800d82c <_svfiprintf_r+0x130>
 800d89e:	9105      	str	r1, [sp, #20]
 800d8a0:	e7c4      	b.n	800d82c <_svfiprintf_r+0x130>
 800d8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e7f0      	b.n	800d88e <_svfiprintf_r+0x192>
 800d8ac:	ab03      	add	r3, sp, #12
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d8ec <_svfiprintf_r+0x1f0>)
 800d8b4:	a904      	add	r1, sp, #16
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	f7fc fc06 	bl	800a0c8 <_printf_float>
 800d8bc:	1c42      	adds	r2, r0, #1
 800d8be:	4606      	mov	r6, r0
 800d8c0:	d1d6      	bne.n	800d870 <_svfiprintf_r+0x174>
 800d8c2:	89ab      	ldrh	r3, [r5, #12]
 800d8c4:	065b      	lsls	r3, r3, #25
 800d8c6:	f53f af2d 	bmi.w	800d724 <_svfiprintf_r+0x28>
 800d8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8cc:	e72c      	b.n	800d728 <_svfiprintf_r+0x2c>
 800d8ce:	ab03      	add	r3, sp, #12
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4b05      	ldr	r3, [pc, #20]	@ (800d8ec <_svfiprintf_r+0x1f0>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	4638      	mov	r0, r7
 800d8da:	f7fc fe8d 	bl	800a5f8 <_printf_i>
 800d8de:	e7ed      	b.n	800d8bc <_svfiprintf_r+0x1c0>
 800d8e0:	080127a9 	.word	0x080127a9
 800d8e4:	080127b3 	.word	0x080127b3
 800d8e8:	0800a0c9 	.word	0x0800a0c9
 800d8ec:	0800d645 	.word	0x0800d645
 800d8f0:	080127af 	.word	0x080127af

0800d8f4 <__sflush_r>:
 800d8f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fc:	0716      	lsls	r6, r2, #28
 800d8fe:	4605      	mov	r5, r0
 800d900:	460c      	mov	r4, r1
 800d902:	d454      	bmi.n	800d9ae <__sflush_r+0xba>
 800d904:	684b      	ldr	r3, [r1, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	dc02      	bgt.n	800d910 <__sflush_r+0x1c>
 800d90a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dd48      	ble.n	800d9a2 <__sflush_r+0xae>
 800d910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d912:	2e00      	cmp	r6, #0
 800d914:	d045      	beq.n	800d9a2 <__sflush_r+0xae>
 800d916:	2300      	movs	r3, #0
 800d918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d91c:	682f      	ldr	r7, [r5, #0]
 800d91e:	6a21      	ldr	r1, [r4, #32]
 800d920:	602b      	str	r3, [r5, #0]
 800d922:	d030      	beq.n	800d986 <__sflush_r+0x92>
 800d924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	0759      	lsls	r1, r3, #29
 800d92a:	d505      	bpl.n	800d938 <__sflush_r+0x44>
 800d92c:	6863      	ldr	r3, [r4, #4]
 800d92e:	1ad2      	subs	r2, r2, r3
 800d930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d932:	b10b      	cbz	r3, 800d938 <__sflush_r+0x44>
 800d934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d936:	1ad2      	subs	r2, r2, r3
 800d938:	2300      	movs	r3, #0
 800d93a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d93c:	6a21      	ldr	r1, [r4, #32]
 800d93e:	4628      	mov	r0, r5
 800d940:	47b0      	blx	r6
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	d106      	bne.n	800d956 <__sflush_r+0x62>
 800d948:	6829      	ldr	r1, [r5, #0]
 800d94a:	291d      	cmp	r1, #29
 800d94c:	d82b      	bhi.n	800d9a6 <__sflush_r+0xb2>
 800d94e:	4a2a      	ldr	r2, [pc, #168]	@ (800d9f8 <__sflush_r+0x104>)
 800d950:	410a      	asrs	r2, r1
 800d952:	07d6      	lsls	r6, r2, #31
 800d954:	d427      	bmi.n	800d9a6 <__sflush_r+0xb2>
 800d956:	2200      	movs	r2, #0
 800d958:	6062      	str	r2, [r4, #4]
 800d95a:	04d9      	lsls	r1, r3, #19
 800d95c:	6922      	ldr	r2, [r4, #16]
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	d504      	bpl.n	800d96c <__sflush_r+0x78>
 800d962:	1c42      	adds	r2, r0, #1
 800d964:	d101      	bne.n	800d96a <__sflush_r+0x76>
 800d966:	682b      	ldr	r3, [r5, #0]
 800d968:	b903      	cbnz	r3, 800d96c <__sflush_r+0x78>
 800d96a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d96e:	602f      	str	r7, [r5, #0]
 800d970:	b1b9      	cbz	r1, 800d9a2 <__sflush_r+0xae>
 800d972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d976:	4299      	cmp	r1, r3
 800d978:	d002      	beq.n	800d980 <__sflush_r+0x8c>
 800d97a:	4628      	mov	r0, r5
 800d97c:	f7fe fa2c 	bl	800bdd8 <_free_r>
 800d980:	2300      	movs	r3, #0
 800d982:	6363      	str	r3, [r4, #52]	@ 0x34
 800d984:	e00d      	b.n	800d9a2 <__sflush_r+0xae>
 800d986:	2301      	movs	r3, #1
 800d988:	4628      	mov	r0, r5
 800d98a:	47b0      	blx	r6
 800d98c:	4602      	mov	r2, r0
 800d98e:	1c50      	adds	r0, r2, #1
 800d990:	d1c9      	bne.n	800d926 <__sflush_r+0x32>
 800d992:	682b      	ldr	r3, [r5, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0c6      	beq.n	800d926 <__sflush_r+0x32>
 800d998:	2b1d      	cmp	r3, #29
 800d99a:	d001      	beq.n	800d9a0 <__sflush_r+0xac>
 800d99c:	2b16      	cmp	r3, #22
 800d99e:	d11e      	bne.n	800d9de <__sflush_r+0xea>
 800d9a0:	602f      	str	r7, [r5, #0]
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	e022      	b.n	800d9ec <__sflush_r+0xf8>
 800d9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9aa:	b21b      	sxth	r3, r3
 800d9ac:	e01b      	b.n	800d9e6 <__sflush_r+0xf2>
 800d9ae:	690f      	ldr	r7, [r1, #16]
 800d9b0:	2f00      	cmp	r7, #0
 800d9b2:	d0f6      	beq.n	800d9a2 <__sflush_r+0xae>
 800d9b4:	0793      	lsls	r3, r2, #30
 800d9b6:	680e      	ldr	r6, [r1, #0]
 800d9b8:	bf08      	it	eq
 800d9ba:	694b      	ldreq	r3, [r1, #20]
 800d9bc:	600f      	str	r7, [r1, #0]
 800d9be:	bf18      	it	ne
 800d9c0:	2300      	movne	r3, #0
 800d9c2:	eba6 0807 	sub.w	r8, r6, r7
 800d9c6:	608b      	str	r3, [r1, #8]
 800d9c8:	f1b8 0f00 	cmp.w	r8, #0
 800d9cc:	dde9      	ble.n	800d9a2 <__sflush_r+0xae>
 800d9ce:	6a21      	ldr	r1, [r4, #32]
 800d9d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d9d2:	4643      	mov	r3, r8
 800d9d4:	463a      	mov	r2, r7
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	47b0      	blx	r6
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	dc08      	bgt.n	800d9f0 <__sflush_r+0xfc>
 800d9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9e6:	81a3      	strh	r3, [r4, #12]
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f0:	4407      	add	r7, r0
 800d9f2:	eba8 0800 	sub.w	r8, r8, r0
 800d9f6:	e7e7      	b.n	800d9c8 <__sflush_r+0xd4>
 800d9f8:	dfbffffe 	.word	0xdfbffffe

0800d9fc <_fflush_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	690b      	ldr	r3, [r1, #16]
 800da00:	4605      	mov	r5, r0
 800da02:	460c      	mov	r4, r1
 800da04:	b913      	cbnz	r3, 800da0c <_fflush_r+0x10>
 800da06:	2500      	movs	r5, #0
 800da08:	4628      	mov	r0, r5
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	b118      	cbz	r0, 800da16 <_fflush_r+0x1a>
 800da0e:	6a03      	ldr	r3, [r0, #32]
 800da10:	b90b      	cbnz	r3, 800da16 <_fflush_r+0x1a>
 800da12:	f7fd f9b1 	bl	800ad78 <__sinit>
 800da16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d0f3      	beq.n	800da06 <_fflush_r+0xa>
 800da1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da20:	07d0      	lsls	r0, r2, #31
 800da22:	d404      	bmi.n	800da2e <_fflush_r+0x32>
 800da24:	0599      	lsls	r1, r3, #22
 800da26:	d402      	bmi.n	800da2e <_fflush_r+0x32>
 800da28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da2a:	f7fd fb7e 	bl	800b12a <__retarget_lock_acquire_recursive>
 800da2e:	4628      	mov	r0, r5
 800da30:	4621      	mov	r1, r4
 800da32:	f7ff ff5f 	bl	800d8f4 <__sflush_r>
 800da36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da38:	07da      	lsls	r2, r3, #31
 800da3a:	4605      	mov	r5, r0
 800da3c:	d4e4      	bmi.n	800da08 <_fflush_r+0xc>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	059b      	lsls	r3, r3, #22
 800da42:	d4e1      	bmi.n	800da08 <_fflush_r+0xc>
 800da44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da46:	f7fd fb71 	bl	800b12c <__retarget_lock_release_recursive>
 800da4a:	e7dd      	b.n	800da08 <_fflush_r+0xc>

0800da4c <__swhatbuf_r>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	460c      	mov	r4, r1
 800da50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da54:	2900      	cmp	r1, #0
 800da56:	b096      	sub	sp, #88	@ 0x58
 800da58:	4615      	mov	r5, r2
 800da5a:	461e      	mov	r6, r3
 800da5c:	da0d      	bge.n	800da7a <__swhatbuf_r+0x2e>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da64:	f04f 0100 	mov.w	r1, #0
 800da68:	bf14      	ite	ne
 800da6a:	2340      	movne	r3, #64	@ 0x40
 800da6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da70:	2000      	movs	r0, #0
 800da72:	6031      	str	r1, [r6, #0]
 800da74:	602b      	str	r3, [r5, #0]
 800da76:	b016      	add	sp, #88	@ 0x58
 800da78:	bd70      	pop	{r4, r5, r6, pc}
 800da7a:	466a      	mov	r2, sp
 800da7c:	f000 f874 	bl	800db68 <_fstat_r>
 800da80:	2800      	cmp	r0, #0
 800da82:	dbec      	blt.n	800da5e <__swhatbuf_r+0x12>
 800da84:	9901      	ldr	r1, [sp, #4]
 800da86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da8e:	4259      	negs	r1, r3
 800da90:	4159      	adcs	r1, r3
 800da92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da96:	e7eb      	b.n	800da70 <__swhatbuf_r+0x24>

0800da98 <__smakebuf_r>:
 800da98:	898b      	ldrh	r3, [r1, #12]
 800da9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da9c:	079d      	lsls	r5, r3, #30
 800da9e:	4606      	mov	r6, r0
 800daa0:	460c      	mov	r4, r1
 800daa2:	d507      	bpl.n	800dab4 <__smakebuf_r+0x1c>
 800daa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	6123      	str	r3, [r4, #16]
 800daac:	2301      	movs	r3, #1
 800daae:	6163      	str	r3, [r4, #20]
 800dab0:	b003      	add	sp, #12
 800dab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dab4:	ab01      	add	r3, sp, #4
 800dab6:	466a      	mov	r2, sp
 800dab8:	f7ff ffc8 	bl	800da4c <__swhatbuf_r>
 800dabc:	9f00      	ldr	r7, [sp, #0]
 800dabe:	4605      	mov	r5, r0
 800dac0:	4639      	mov	r1, r7
 800dac2:	4630      	mov	r0, r6
 800dac4:	f7fe f9fc 	bl	800bec0 <_malloc_r>
 800dac8:	b948      	cbnz	r0, 800dade <__smakebuf_r+0x46>
 800daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dace:	059a      	lsls	r2, r3, #22
 800dad0:	d4ee      	bmi.n	800dab0 <__smakebuf_r+0x18>
 800dad2:	f023 0303 	bic.w	r3, r3, #3
 800dad6:	f043 0302 	orr.w	r3, r3, #2
 800dada:	81a3      	strh	r3, [r4, #12]
 800dadc:	e7e2      	b.n	800daa4 <__smakebuf_r+0xc>
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	6020      	str	r0, [r4, #0]
 800dae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dae6:	81a3      	strh	r3, [r4, #12]
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800daee:	b15b      	cbz	r3, 800db08 <__smakebuf_r+0x70>
 800daf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 f849 	bl	800db8c <_isatty_r>
 800dafa:	b128      	cbz	r0, 800db08 <__smakebuf_r+0x70>
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f023 0303 	bic.w	r3, r3, #3
 800db02:	f043 0301 	orr.w	r3, r3, #1
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	431d      	orrs	r5, r3
 800db0c:	81a5      	strh	r5, [r4, #12]
 800db0e:	e7cf      	b.n	800dab0 <__smakebuf_r+0x18>

0800db10 <memmove>:
 800db10:	4288      	cmp	r0, r1
 800db12:	b510      	push	{r4, lr}
 800db14:	eb01 0402 	add.w	r4, r1, r2
 800db18:	d902      	bls.n	800db20 <memmove+0x10>
 800db1a:	4284      	cmp	r4, r0
 800db1c:	4623      	mov	r3, r4
 800db1e:	d807      	bhi.n	800db30 <memmove+0x20>
 800db20:	1e43      	subs	r3, r0, #1
 800db22:	42a1      	cmp	r1, r4
 800db24:	d008      	beq.n	800db38 <memmove+0x28>
 800db26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db2e:	e7f8      	b.n	800db22 <memmove+0x12>
 800db30:	4402      	add	r2, r0
 800db32:	4601      	mov	r1, r0
 800db34:	428a      	cmp	r2, r1
 800db36:	d100      	bne.n	800db3a <memmove+0x2a>
 800db38:	bd10      	pop	{r4, pc}
 800db3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db42:	e7f7      	b.n	800db34 <memmove+0x24>

0800db44 <strncmp>:
 800db44:	b510      	push	{r4, lr}
 800db46:	b16a      	cbz	r2, 800db64 <strncmp+0x20>
 800db48:	3901      	subs	r1, #1
 800db4a:	1884      	adds	r4, r0, r2
 800db4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db54:	429a      	cmp	r2, r3
 800db56:	d103      	bne.n	800db60 <strncmp+0x1c>
 800db58:	42a0      	cmp	r0, r4
 800db5a:	d001      	beq.n	800db60 <strncmp+0x1c>
 800db5c:	2a00      	cmp	r2, #0
 800db5e:	d1f5      	bne.n	800db4c <strncmp+0x8>
 800db60:	1ad0      	subs	r0, r2, r3
 800db62:	bd10      	pop	{r4, pc}
 800db64:	4610      	mov	r0, r2
 800db66:	e7fc      	b.n	800db62 <strncmp+0x1e>

0800db68 <_fstat_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d07      	ldr	r5, [pc, #28]	@ (800db88 <_fstat_r+0x20>)
 800db6c:	2300      	movs	r3, #0
 800db6e:	4604      	mov	r4, r0
 800db70:	4608      	mov	r0, r1
 800db72:	4611      	mov	r1, r2
 800db74:	602b      	str	r3, [r5, #0]
 800db76:	f001 f84d 	bl	800ec14 <_fstat>
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	d102      	bne.n	800db84 <_fstat_r+0x1c>
 800db7e:	682b      	ldr	r3, [r5, #0]
 800db80:	b103      	cbz	r3, 800db84 <_fstat_r+0x1c>
 800db82:	6023      	str	r3, [r4, #0]
 800db84:	bd38      	pop	{r3, r4, r5, pc}
 800db86:	bf00      	nop
 800db88:	20000990 	.word	0x20000990

0800db8c <_isatty_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d06      	ldr	r5, [pc, #24]	@ (800dba8 <_isatty_r+0x1c>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f001 f84c 	bl	800ec34 <_isatty>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_isatty_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_isatty_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	20000990 	.word	0x20000990

0800dbac <_sbrk_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4d06      	ldr	r5, [pc, #24]	@ (800dbc8 <_sbrk_r+0x1c>)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	602b      	str	r3, [r5, #0]
 800dbb8:	f001 f84c 	bl	800ec54 <_sbrk>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	d102      	bne.n	800dbc6 <_sbrk_r+0x1a>
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	b103      	cbz	r3, 800dbc6 <_sbrk_r+0x1a>
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	bd38      	pop	{r3, r4, r5, pc}
 800dbc8:	20000990 	.word	0x20000990

0800dbcc <__errno>:
 800dbcc:	4b01      	ldr	r3, [pc, #4]	@ (800dbd4 <__errno+0x8>)
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	20000104 	.word	0x20000104

0800dbd8 <memcpy>:
 800dbd8:	440a      	add	r2, r1
 800dbda:	4291      	cmp	r1, r2
 800dbdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbe0:	d100      	bne.n	800dbe4 <memcpy+0xc>
 800dbe2:	4770      	bx	lr
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbee:	4291      	cmp	r1, r2
 800dbf0:	d1f9      	bne.n	800dbe6 <memcpy+0xe>
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	0000      	movs	r0, r0
	...

0800dbf8 <nan>:
 800dbf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc00 <nan+0x8>
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	00000000 	.word	0x00000000
 800dc04:	7ff80000 	.word	0x7ff80000

0800dc08 <__assert_func>:
 800dc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc0a:	4614      	mov	r4, r2
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4b09      	ldr	r3, [pc, #36]	@ (800dc34 <__assert_func+0x2c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4605      	mov	r5, r0
 800dc14:	68d8      	ldr	r0, [r3, #12]
 800dc16:	b954      	cbnz	r4, 800dc2e <__assert_func+0x26>
 800dc18:	4b07      	ldr	r3, [pc, #28]	@ (800dc38 <__assert_func+0x30>)
 800dc1a:	461c      	mov	r4, r3
 800dc1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc20:	9100      	str	r1, [sp, #0]
 800dc22:	462b      	mov	r3, r5
 800dc24:	4905      	ldr	r1, [pc, #20]	@ (800dc3c <__assert_func+0x34>)
 800dc26:	f000 fba7 	bl	800e378 <fiprintf>
 800dc2a:	f000 fbb7 	bl	800e39c <abort>
 800dc2e:	4b04      	ldr	r3, [pc, #16]	@ (800dc40 <__assert_func+0x38>)
 800dc30:	e7f4      	b.n	800dc1c <__assert_func+0x14>
 800dc32:	bf00      	nop
 800dc34:	20000104 	.word	0x20000104
 800dc38:	080127fd 	.word	0x080127fd
 800dc3c:	080127cf 	.word	0x080127cf
 800dc40:	080127c2 	.word	0x080127c2

0800dc44 <_calloc_r>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	fba1 5402 	umull	r5, r4, r1, r2
 800dc4a:	b93c      	cbnz	r4, 800dc5c <_calloc_r+0x18>
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	f7fe f937 	bl	800bec0 <_malloc_r>
 800dc52:	4606      	mov	r6, r0
 800dc54:	b928      	cbnz	r0, 800dc62 <_calloc_r+0x1e>
 800dc56:	2600      	movs	r6, #0
 800dc58:	4630      	mov	r0, r6
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	220c      	movs	r2, #12
 800dc5e:	6002      	str	r2, [r0, #0]
 800dc60:	e7f9      	b.n	800dc56 <_calloc_r+0x12>
 800dc62:	462a      	mov	r2, r5
 800dc64:	4621      	mov	r1, r4
 800dc66:	f7fd f9e9 	bl	800b03c <memset>
 800dc6a:	e7f5      	b.n	800dc58 <_calloc_r+0x14>

0800dc6c <rshift>:
 800dc6c:	6903      	ldr	r3, [r0, #16]
 800dc6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc7a:	f100 0414 	add.w	r4, r0, #20
 800dc7e:	dd45      	ble.n	800dd0c <rshift+0xa0>
 800dc80:	f011 011f 	ands.w	r1, r1, #31
 800dc84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc8c:	d10c      	bne.n	800dca8 <rshift+0x3c>
 800dc8e:	f100 0710 	add.w	r7, r0, #16
 800dc92:	4629      	mov	r1, r5
 800dc94:	42b1      	cmp	r1, r6
 800dc96:	d334      	bcc.n	800dd02 <rshift+0x96>
 800dc98:	1a9b      	subs	r3, r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	1eea      	subs	r2, r5, #3
 800dc9e:	4296      	cmp	r6, r2
 800dca0:	bf38      	it	cc
 800dca2:	2300      	movcc	r3, #0
 800dca4:	4423      	add	r3, r4
 800dca6:	e015      	b.n	800dcd4 <rshift+0x68>
 800dca8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dcac:	f1c1 0820 	rsb	r8, r1, #32
 800dcb0:	40cf      	lsrs	r7, r1
 800dcb2:	f105 0e04 	add.w	lr, r5, #4
 800dcb6:	46a1      	mov	r9, r4
 800dcb8:	4576      	cmp	r6, lr
 800dcba:	46f4      	mov	ip, lr
 800dcbc:	d815      	bhi.n	800dcea <rshift+0x7e>
 800dcbe:	1a9a      	subs	r2, r3, r2
 800dcc0:	0092      	lsls	r2, r2, #2
 800dcc2:	3a04      	subs	r2, #4
 800dcc4:	3501      	adds	r5, #1
 800dcc6:	42ae      	cmp	r6, r5
 800dcc8:	bf38      	it	cc
 800dcca:	2200      	movcc	r2, #0
 800dccc:	18a3      	adds	r3, r4, r2
 800dcce:	50a7      	str	r7, [r4, r2]
 800dcd0:	b107      	cbz	r7, 800dcd4 <rshift+0x68>
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	1b1a      	subs	r2, r3, r4
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dcdc:	bf08      	it	eq
 800dcde:	2300      	moveq	r3, #0
 800dce0:	6102      	str	r2, [r0, #16]
 800dce2:	bf08      	it	eq
 800dce4:	6143      	streq	r3, [r0, #20]
 800dce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcea:	f8dc c000 	ldr.w	ip, [ip]
 800dcee:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcf2:	ea4c 0707 	orr.w	r7, ip, r7
 800dcf6:	f849 7b04 	str.w	r7, [r9], #4
 800dcfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcfe:	40cf      	lsrs	r7, r1
 800dd00:	e7da      	b.n	800dcb8 <rshift+0x4c>
 800dd02:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd06:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd0a:	e7c3      	b.n	800dc94 <rshift+0x28>
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	e7e1      	b.n	800dcd4 <rshift+0x68>

0800dd10 <__hexdig_fun>:
 800dd10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dd14:	2b09      	cmp	r3, #9
 800dd16:	d802      	bhi.n	800dd1e <__hexdig_fun+0xe>
 800dd18:	3820      	subs	r0, #32
 800dd1a:	b2c0      	uxtb	r0, r0
 800dd1c:	4770      	bx	lr
 800dd1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dd22:	2b05      	cmp	r3, #5
 800dd24:	d801      	bhi.n	800dd2a <__hexdig_fun+0x1a>
 800dd26:	3847      	subs	r0, #71	@ 0x47
 800dd28:	e7f7      	b.n	800dd1a <__hexdig_fun+0xa>
 800dd2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	d801      	bhi.n	800dd36 <__hexdig_fun+0x26>
 800dd32:	3827      	subs	r0, #39	@ 0x27
 800dd34:	e7f1      	b.n	800dd1a <__hexdig_fun+0xa>
 800dd36:	2000      	movs	r0, #0
 800dd38:	4770      	bx	lr
	...

0800dd3c <__gethex>:
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	b085      	sub	sp, #20
 800dd42:	468a      	mov	sl, r1
 800dd44:	9302      	str	r3, [sp, #8]
 800dd46:	680b      	ldr	r3, [r1, #0]
 800dd48:	9001      	str	r0, [sp, #4]
 800dd4a:	4690      	mov	r8, r2
 800dd4c:	1c9c      	adds	r4, r3, #2
 800dd4e:	46a1      	mov	r9, r4
 800dd50:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd54:	2830      	cmp	r0, #48	@ 0x30
 800dd56:	d0fa      	beq.n	800dd4e <__gethex+0x12>
 800dd58:	eba9 0303 	sub.w	r3, r9, r3
 800dd5c:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd60:	f7ff ffd6 	bl	800dd10 <__hexdig_fun>
 800dd64:	4605      	mov	r5, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d168      	bne.n	800de3c <__gethex+0x100>
 800dd6a:	49a0      	ldr	r1, [pc, #640]	@ (800dfec <__gethex+0x2b0>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	4648      	mov	r0, r9
 800dd70:	f7ff fee8 	bl	800db44 <strncmp>
 800dd74:	4607      	mov	r7, r0
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d167      	bne.n	800de4a <__gethex+0x10e>
 800dd7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd7e:	4626      	mov	r6, r4
 800dd80:	f7ff ffc6 	bl	800dd10 <__hexdig_fun>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d062      	beq.n	800de4e <__gethex+0x112>
 800dd88:	4623      	mov	r3, r4
 800dd8a:	7818      	ldrb	r0, [r3, #0]
 800dd8c:	2830      	cmp	r0, #48	@ 0x30
 800dd8e:	4699      	mov	r9, r3
 800dd90:	f103 0301 	add.w	r3, r3, #1
 800dd94:	d0f9      	beq.n	800dd8a <__gethex+0x4e>
 800dd96:	f7ff ffbb 	bl	800dd10 <__hexdig_fun>
 800dd9a:	fab0 f580 	clz	r5, r0
 800dd9e:	096d      	lsrs	r5, r5, #5
 800dda0:	f04f 0b01 	mov.w	fp, #1
 800dda4:	464a      	mov	r2, r9
 800dda6:	4616      	mov	r6, r2
 800dda8:	3201      	adds	r2, #1
 800ddaa:	7830      	ldrb	r0, [r6, #0]
 800ddac:	f7ff ffb0 	bl	800dd10 <__hexdig_fun>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d1f8      	bne.n	800dda6 <__gethex+0x6a>
 800ddb4:	498d      	ldr	r1, [pc, #564]	@ (800dfec <__gethex+0x2b0>)
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7ff fec3 	bl	800db44 <strncmp>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d13f      	bne.n	800de42 <__gethex+0x106>
 800ddc2:	b944      	cbnz	r4, 800ddd6 <__gethex+0x9a>
 800ddc4:	1c74      	adds	r4, r6, #1
 800ddc6:	4622      	mov	r2, r4
 800ddc8:	4616      	mov	r6, r2
 800ddca:	3201      	adds	r2, #1
 800ddcc:	7830      	ldrb	r0, [r6, #0]
 800ddce:	f7ff ff9f 	bl	800dd10 <__hexdig_fun>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d1f8      	bne.n	800ddc8 <__gethex+0x8c>
 800ddd6:	1ba4      	subs	r4, r4, r6
 800ddd8:	00a7      	lsls	r7, r4, #2
 800ddda:	7833      	ldrb	r3, [r6, #0]
 800dddc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dde0:	2b50      	cmp	r3, #80	@ 0x50
 800dde2:	d13e      	bne.n	800de62 <__gethex+0x126>
 800dde4:	7873      	ldrb	r3, [r6, #1]
 800dde6:	2b2b      	cmp	r3, #43	@ 0x2b
 800dde8:	d033      	beq.n	800de52 <__gethex+0x116>
 800ddea:	2b2d      	cmp	r3, #45	@ 0x2d
 800ddec:	d034      	beq.n	800de58 <__gethex+0x11c>
 800ddee:	1c71      	adds	r1, r6, #1
 800ddf0:	2400      	movs	r4, #0
 800ddf2:	7808      	ldrb	r0, [r1, #0]
 800ddf4:	f7ff ff8c 	bl	800dd10 <__hexdig_fun>
 800ddf8:	1e43      	subs	r3, r0, #1
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	2b18      	cmp	r3, #24
 800ddfe:	d830      	bhi.n	800de62 <__gethex+0x126>
 800de00:	f1a0 0210 	sub.w	r2, r0, #16
 800de04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de08:	f7ff ff82 	bl	800dd10 <__hexdig_fun>
 800de0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800de10:	fa5f fc8c 	uxtb.w	ip, ip
 800de14:	f1bc 0f18 	cmp.w	ip, #24
 800de18:	f04f 030a 	mov.w	r3, #10
 800de1c:	d91e      	bls.n	800de5c <__gethex+0x120>
 800de1e:	b104      	cbz	r4, 800de22 <__gethex+0xe6>
 800de20:	4252      	negs	r2, r2
 800de22:	4417      	add	r7, r2
 800de24:	f8ca 1000 	str.w	r1, [sl]
 800de28:	b1ed      	cbz	r5, 800de66 <__gethex+0x12a>
 800de2a:	f1bb 0f00 	cmp.w	fp, #0
 800de2e:	bf0c      	ite	eq
 800de30:	2506      	moveq	r5, #6
 800de32:	2500      	movne	r5, #0
 800de34:	4628      	mov	r0, r5
 800de36:	b005      	add	sp, #20
 800de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3c:	2500      	movs	r5, #0
 800de3e:	462c      	mov	r4, r5
 800de40:	e7b0      	b.n	800dda4 <__gethex+0x68>
 800de42:	2c00      	cmp	r4, #0
 800de44:	d1c7      	bne.n	800ddd6 <__gethex+0x9a>
 800de46:	4627      	mov	r7, r4
 800de48:	e7c7      	b.n	800ddda <__gethex+0x9e>
 800de4a:	464e      	mov	r6, r9
 800de4c:	462f      	mov	r7, r5
 800de4e:	2501      	movs	r5, #1
 800de50:	e7c3      	b.n	800ddda <__gethex+0x9e>
 800de52:	2400      	movs	r4, #0
 800de54:	1cb1      	adds	r1, r6, #2
 800de56:	e7cc      	b.n	800ddf2 <__gethex+0xb6>
 800de58:	2401      	movs	r4, #1
 800de5a:	e7fb      	b.n	800de54 <__gethex+0x118>
 800de5c:	fb03 0002 	mla	r0, r3, r2, r0
 800de60:	e7ce      	b.n	800de00 <__gethex+0xc4>
 800de62:	4631      	mov	r1, r6
 800de64:	e7de      	b.n	800de24 <__gethex+0xe8>
 800de66:	eba6 0309 	sub.w	r3, r6, r9
 800de6a:	3b01      	subs	r3, #1
 800de6c:	4629      	mov	r1, r5
 800de6e:	2b07      	cmp	r3, #7
 800de70:	dc0a      	bgt.n	800de88 <__gethex+0x14c>
 800de72:	9801      	ldr	r0, [sp, #4]
 800de74:	f7fe f8b0 	bl	800bfd8 <_Balloc>
 800de78:	4604      	mov	r4, r0
 800de7a:	b940      	cbnz	r0, 800de8e <__gethex+0x152>
 800de7c:	4b5c      	ldr	r3, [pc, #368]	@ (800dff0 <__gethex+0x2b4>)
 800de7e:	4602      	mov	r2, r0
 800de80:	21e4      	movs	r1, #228	@ 0xe4
 800de82:	485c      	ldr	r0, [pc, #368]	@ (800dff4 <__gethex+0x2b8>)
 800de84:	f7ff fec0 	bl	800dc08 <__assert_func>
 800de88:	3101      	adds	r1, #1
 800de8a:	105b      	asrs	r3, r3, #1
 800de8c:	e7ef      	b.n	800de6e <__gethex+0x132>
 800de8e:	f100 0a14 	add.w	sl, r0, #20
 800de92:	2300      	movs	r3, #0
 800de94:	4655      	mov	r5, sl
 800de96:	469b      	mov	fp, r3
 800de98:	45b1      	cmp	r9, r6
 800de9a:	d337      	bcc.n	800df0c <__gethex+0x1d0>
 800de9c:	f845 bb04 	str.w	fp, [r5], #4
 800dea0:	eba5 050a 	sub.w	r5, r5, sl
 800dea4:	10ad      	asrs	r5, r5, #2
 800dea6:	6125      	str	r5, [r4, #16]
 800dea8:	4658      	mov	r0, fp
 800deaa:	f7fe f987 	bl	800c1bc <__hi0bits>
 800deae:	016d      	lsls	r5, r5, #5
 800deb0:	f8d8 6000 	ldr.w	r6, [r8]
 800deb4:	1a2d      	subs	r5, r5, r0
 800deb6:	42b5      	cmp	r5, r6
 800deb8:	dd54      	ble.n	800df64 <__gethex+0x228>
 800deba:	1bad      	subs	r5, r5, r6
 800debc:	4629      	mov	r1, r5
 800debe:	4620      	mov	r0, r4
 800dec0:	f7fe fd1b 	bl	800c8fa <__any_on>
 800dec4:	4681      	mov	r9, r0
 800dec6:	b178      	cbz	r0, 800dee8 <__gethex+0x1ac>
 800dec8:	1e6b      	subs	r3, r5, #1
 800deca:	1159      	asrs	r1, r3, #5
 800decc:	f003 021f 	and.w	r2, r3, #31
 800ded0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ded4:	f04f 0901 	mov.w	r9, #1
 800ded8:	fa09 f202 	lsl.w	r2, r9, r2
 800dedc:	420a      	tst	r2, r1
 800dede:	d003      	beq.n	800dee8 <__gethex+0x1ac>
 800dee0:	454b      	cmp	r3, r9
 800dee2:	dc36      	bgt.n	800df52 <__gethex+0x216>
 800dee4:	f04f 0902 	mov.w	r9, #2
 800dee8:	4629      	mov	r1, r5
 800deea:	4620      	mov	r0, r4
 800deec:	f7ff febe 	bl	800dc6c <rshift>
 800def0:	442f      	add	r7, r5
 800def2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800def6:	42bb      	cmp	r3, r7
 800def8:	da42      	bge.n	800df80 <__gethex+0x244>
 800defa:	9801      	ldr	r0, [sp, #4]
 800defc:	4621      	mov	r1, r4
 800defe:	f7fe f8ab 	bl	800c058 <_Bfree>
 800df02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df04:	2300      	movs	r3, #0
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	25a3      	movs	r5, #163	@ 0xa3
 800df0a:	e793      	b.n	800de34 <__gethex+0xf8>
 800df0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800df10:	2a2e      	cmp	r2, #46	@ 0x2e
 800df12:	d012      	beq.n	800df3a <__gethex+0x1fe>
 800df14:	2b20      	cmp	r3, #32
 800df16:	d104      	bne.n	800df22 <__gethex+0x1e6>
 800df18:	f845 bb04 	str.w	fp, [r5], #4
 800df1c:	f04f 0b00 	mov.w	fp, #0
 800df20:	465b      	mov	r3, fp
 800df22:	7830      	ldrb	r0, [r6, #0]
 800df24:	9303      	str	r3, [sp, #12]
 800df26:	f7ff fef3 	bl	800dd10 <__hexdig_fun>
 800df2a:	9b03      	ldr	r3, [sp, #12]
 800df2c:	f000 000f 	and.w	r0, r0, #15
 800df30:	4098      	lsls	r0, r3
 800df32:	ea4b 0b00 	orr.w	fp, fp, r0
 800df36:	3304      	adds	r3, #4
 800df38:	e7ae      	b.n	800de98 <__gethex+0x15c>
 800df3a:	45b1      	cmp	r9, r6
 800df3c:	d8ea      	bhi.n	800df14 <__gethex+0x1d8>
 800df3e:	492b      	ldr	r1, [pc, #172]	@ (800dfec <__gethex+0x2b0>)
 800df40:	9303      	str	r3, [sp, #12]
 800df42:	2201      	movs	r2, #1
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff fdfd 	bl	800db44 <strncmp>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d1e1      	bne.n	800df14 <__gethex+0x1d8>
 800df50:	e7a2      	b.n	800de98 <__gethex+0x15c>
 800df52:	1ea9      	subs	r1, r5, #2
 800df54:	4620      	mov	r0, r4
 800df56:	f7fe fcd0 	bl	800c8fa <__any_on>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d0c2      	beq.n	800dee4 <__gethex+0x1a8>
 800df5e:	f04f 0903 	mov.w	r9, #3
 800df62:	e7c1      	b.n	800dee8 <__gethex+0x1ac>
 800df64:	da09      	bge.n	800df7a <__gethex+0x23e>
 800df66:	1b75      	subs	r5, r6, r5
 800df68:	4621      	mov	r1, r4
 800df6a:	9801      	ldr	r0, [sp, #4]
 800df6c:	462a      	mov	r2, r5
 800df6e:	f7fe fa8b 	bl	800c488 <__lshift>
 800df72:	1b7f      	subs	r7, r7, r5
 800df74:	4604      	mov	r4, r0
 800df76:	f100 0a14 	add.w	sl, r0, #20
 800df7a:	f04f 0900 	mov.w	r9, #0
 800df7e:	e7b8      	b.n	800def2 <__gethex+0x1b6>
 800df80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df84:	42bd      	cmp	r5, r7
 800df86:	dd6f      	ble.n	800e068 <__gethex+0x32c>
 800df88:	1bed      	subs	r5, r5, r7
 800df8a:	42ae      	cmp	r6, r5
 800df8c:	dc34      	bgt.n	800dff8 <__gethex+0x2bc>
 800df8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df92:	2b02      	cmp	r3, #2
 800df94:	d022      	beq.n	800dfdc <__gethex+0x2a0>
 800df96:	2b03      	cmp	r3, #3
 800df98:	d024      	beq.n	800dfe4 <__gethex+0x2a8>
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d115      	bne.n	800dfca <__gethex+0x28e>
 800df9e:	42ae      	cmp	r6, r5
 800dfa0:	d113      	bne.n	800dfca <__gethex+0x28e>
 800dfa2:	2e01      	cmp	r6, #1
 800dfa4:	d10b      	bne.n	800dfbe <__gethex+0x282>
 800dfa6:	9a02      	ldr	r2, [sp, #8]
 800dfa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	2301      	movs	r3, #1
 800dfb0:	6123      	str	r3, [r4, #16]
 800dfb2:	f8ca 3000 	str.w	r3, [sl]
 800dfb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfb8:	2562      	movs	r5, #98	@ 0x62
 800dfba:	601c      	str	r4, [r3, #0]
 800dfbc:	e73a      	b.n	800de34 <__gethex+0xf8>
 800dfbe:	1e71      	subs	r1, r6, #1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7fe fc9a 	bl	800c8fa <__any_on>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d1ed      	bne.n	800dfa6 <__gethex+0x26a>
 800dfca:	9801      	ldr	r0, [sp, #4]
 800dfcc:	4621      	mov	r1, r4
 800dfce:	f7fe f843 	bl	800c058 <_Bfree>
 800dfd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6013      	str	r3, [r2, #0]
 800dfd8:	2550      	movs	r5, #80	@ 0x50
 800dfda:	e72b      	b.n	800de34 <__gethex+0xf8>
 800dfdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1f3      	bne.n	800dfca <__gethex+0x28e>
 800dfe2:	e7e0      	b.n	800dfa6 <__gethex+0x26a>
 800dfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1dd      	bne.n	800dfa6 <__gethex+0x26a>
 800dfea:	e7ee      	b.n	800dfca <__gethex+0x28e>
 800dfec:	08012650 	.word	0x08012650
 800dff0:	080124e5 	.word	0x080124e5
 800dff4:	080127fe 	.word	0x080127fe
 800dff8:	1e6f      	subs	r7, r5, #1
 800dffa:	f1b9 0f00 	cmp.w	r9, #0
 800dffe:	d130      	bne.n	800e062 <__gethex+0x326>
 800e000:	b127      	cbz	r7, 800e00c <__gethex+0x2d0>
 800e002:	4639      	mov	r1, r7
 800e004:	4620      	mov	r0, r4
 800e006:	f7fe fc78 	bl	800c8fa <__any_on>
 800e00a:	4681      	mov	r9, r0
 800e00c:	117a      	asrs	r2, r7, #5
 800e00e:	2301      	movs	r3, #1
 800e010:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e014:	f007 071f 	and.w	r7, r7, #31
 800e018:	40bb      	lsls	r3, r7
 800e01a:	4213      	tst	r3, r2
 800e01c:	4629      	mov	r1, r5
 800e01e:	4620      	mov	r0, r4
 800e020:	bf18      	it	ne
 800e022:	f049 0902 	orrne.w	r9, r9, #2
 800e026:	f7ff fe21 	bl	800dc6c <rshift>
 800e02a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e02e:	1b76      	subs	r6, r6, r5
 800e030:	2502      	movs	r5, #2
 800e032:	f1b9 0f00 	cmp.w	r9, #0
 800e036:	d047      	beq.n	800e0c8 <__gethex+0x38c>
 800e038:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d015      	beq.n	800e06c <__gethex+0x330>
 800e040:	2b03      	cmp	r3, #3
 800e042:	d017      	beq.n	800e074 <__gethex+0x338>
 800e044:	2b01      	cmp	r3, #1
 800e046:	d109      	bne.n	800e05c <__gethex+0x320>
 800e048:	f019 0f02 	tst.w	r9, #2
 800e04c:	d006      	beq.n	800e05c <__gethex+0x320>
 800e04e:	f8da 3000 	ldr.w	r3, [sl]
 800e052:	ea49 0903 	orr.w	r9, r9, r3
 800e056:	f019 0f01 	tst.w	r9, #1
 800e05a:	d10e      	bne.n	800e07a <__gethex+0x33e>
 800e05c:	f045 0510 	orr.w	r5, r5, #16
 800e060:	e032      	b.n	800e0c8 <__gethex+0x38c>
 800e062:	f04f 0901 	mov.w	r9, #1
 800e066:	e7d1      	b.n	800e00c <__gethex+0x2d0>
 800e068:	2501      	movs	r5, #1
 800e06a:	e7e2      	b.n	800e032 <__gethex+0x2f6>
 800e06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e06e:	f1c3 0301 	rsb	r3, r3, #1
 800e072:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d0f0      	beq.n	800e05c <__gethex+0x320>
 800e07a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e07e:	f104 0314 	add.w	r3, r4, #20
 800e082:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e086:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e08a:	f04f 0c00 	mov.w	ip, #0
 800e08e:	4618      	mov	r0, r3
 800e090:	f853 2b04 	ldr.w	r2, [r3], #4
 800e094:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e098:	d01b      	beq.n	800e0d2 <__gethex+0x396>
 800e09a:	3201      	adds	r2, #1
 800e09c:	6002      	str	r2, [r0, #0]
 800e09e:	2d02      	cmp	r5, #2
 800e0a0:	f104 0314 	add.w	r3, r4, #20
 800e0a4:	d13c      	bne.n	800e120 <__gethex+0x3e4>
 800e0a6:	f8d8 2000 	ldr.w	r2, [r8]
 800e0aa:	3a01      	subs	r2, #1
 800e0ac:	42b2      	cmp	r2, r6
 800e0ae:	d109      	bne.n	800e0c4 <__gethex+0x388>
 800e0b0:	1171      	asrs	r1, r6, #5
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0b8:	f006 061f 	and.w	r6, r6, #31
 800e0bc:	fa02 f606 	lsl.w	r6, r2, r6
 800e0c0:	421e      	tst	r6, r3
 800e0c2:	d13a      	bne.n	800e13a <__gethex+0x3fe>
 800e0c4:	f045 0520 	orr.w	r5, r5, #32
 800e0c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ca:	601c      	str	r4, [r3, #0]
 800e0cc:	9b02      	ldr	r3, [sp, #8]
 800e0ce:	601f      	str	r7, [r3, #0]
 800e0d0:	e6b0      	b.n	800de34 <__gethex+0xf8>
 800e0d2:	4299      	cmp	r1, r3
 800e0d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0d8:	d8d9      	bhi.n	800e08e <__gethex+0x352>
 800e0da:	68a3      	ldr	r3, [r4, #8]
 800e0dc:	459b      	cmp	fp, r3
 800e0de:	db17      	blt.n	800e110 <__gethex+0x3d4>
 800e0e0:	6861      	ldr	r1, [r4, #4]
 800e0e2:	9801      	ldr	r0, [sp, #4]
 800e0e4:	3101      	adds	r1, #1
 800e0e6:	f7fd ff77 	bl	800bfd8 <_Balloc>
 800e0ea:	4681      	mov	r9, r0
 800e0ec:	b918      	cbnz	r0, 800e0f6 <__gethex+0x3ba>
 800e0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e158 <__gethex+0x41c>)
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	2184      	movs	r1, #132	@ 0x84
 800e0f4:	e6c5      	b.n	800de82 <__gethex+0x146>
 800e0f6:	6922      	ldr	r2, [r4, #16]
 800e0f8:	3202      	adds	r2, #2
 800e0fa:	f104 010c 	add.w	r1, r4, #12
 800e0fe:	0092      	lsls	r2, r2, #2
 800e100:	300c      	adds	r0, #12
 800e102:	f7ff fd69 	bl	800dbd8 <memcpy>
 800e106:	4621      	mov	r1, r4
 800e108:	9801      	ldr	r0, [sp, #4]
 800e10a:	f7fd ffa5 	bl	800c058 <_Bfree>
 800e10e:	464c      	mov	r4, r9
 800e110:	6923      	ldr	r3, [r4, #16]
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e118:	6122      	str	r2, [r4, #16]
 800e11a:	2201      	movs	r2, #1
 800e11c:	615a      	str	r2, [r3, #20]
 800e11e:	e7be      	b.n	800e09e <__gethex+0x362>
 800e120:	6922      	ldr	r2, [r4, #16]
 800e122:	455a      	cmp	r2, fp
 800e124:	dd0b      	ble.n	800e13e <__gethex+0x402>
 800e126:	2101      	movs	r1, #1
 800e128:	4620      	mov	r0, r4
 800e12a:	f7ff fd9f 	bl	800dc6c <rshift>
 800e12e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e132:	3701      	adds	r7, #1
 800e134:	42bb      	cmp	r3, r7
 800e136:	f6ff aee0 	blt.w	800defa <__gethex+0x1be>
 800e13a:	2501      	movs	r5, #1
 800e13c:	e7c2      	b.n	800e0c4 <__gethex+0x388>
 800e13e:	f016 061f 	ands.w	r6, r6, #31
 800e142:	d0fa      	beq.n	800e13a <__gethex+0x3fe>
 800e144:	4453      	add	r3, sl
 800e146:	f1c6 0620 	rsb	r6, r6, #32
 800e14a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e14e:	f7fe f835 	bl	800c1bc <__hi0bits>
 800e152:	42b0      	cmp	r0, r6
 800e154:	dbe7      	blt.n	800e126 <__gethex+0x3ea>
 800e156:	e7f0      	b.n	800e13a <__gethex+0x3fe>
 800e158:	080124e5 	.word	0x080124e5

0800e15c <L_shift>:
 800e15c:	f1c2 0208 	rsb	r2, r2, #8
 800e160:	0092      	lsls	r2, r2, #2
 800e162:	b570      	push	{r4, r5, r6, lr}
 800e164:	f1c2 0620 	rsb	r6, r2, #32
 800e168:	6843      	ldr	r3, [r0, #4]
 800e16a:	6804      	ldr	r4, [r0, #0]
 800e16c:	fa03 f506 	lsl.w	r5, r3, r6
 800e170:	432c      	orrs	r4, r5
 800e172:	40d3      	lsrs	r3, r2
 800e174:	6004      	str	r4, [r0, #0]
 800e176:	f840 3f04 	str.w	r3, [r0, #4]!
 800e17a:	4288      	cmp	r0, r1
 800e17c:	d3f4      	bcc.n	800e168 <L_shift+0xc>
 800e17e:	bd70      	pop	{r4, r5, r6, pc}

0800e180 <__match>:
 800e180:	b530      	push	{r4, r5, lr}
 800e182:	6803      	ldr	r3, [r0, #0]
 800e184:	3301      	adds	r3, #1
 800e186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e18a:	b914      	cbnz	r4, 800e192 <__match+0x12>
 800e18c:	6003      	str	r3, [r0, #0]
 800e18e:	2001      	movs	r0, #1
 800e190:	bd30      	pop	{r4, r5, pc}
 800e192:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e196:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e19a:	2d19      	cmp	r5, #25
 800e19c:	bf98      	it	ls
 800e19e:	3220      	addls	r2, #32
 800e1a0:	42a2      	cmp	r2, r4
 800e1a2:	d0f0      	beq.n	800e186 <__match+0x6>
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e7f3      	b.n	800e190 <__match+0x10>

0800e1a8 <__hexnan>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	680b      	ldr	r3, [r1, #0]
 800e1ae:	6801      	ldr	r1, [r0, #0]
 800e1b0:	115e      	asrs	r6, r3, #5
 800e1b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1b6:	f013 031f 	ands.w	r3, r3, #31
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	bf18      	it	ne
 800e1be:	3604      	addne	r6, #4
 800e1c0:	2500      	movs	r5, #0
 800e1c2:	1f37      	subs	r7, r6, #4
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	4690      	mov	r8, r2
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1ce:	46b9      	mov	r9, r7
 800e1d0:	463c      	mov	r4, r7
 800e1d2:	9502      	str	r5, [sp, #8]
 800e1d4:	46ab      	mov	fp, r5
 800e1d6:	784a      	ldrb	r2, [r1, #1]
 800e1d8:	1c4b      	adds	r3, r1, #1
 800e1da:	9303      	str	r3, [sp, #12]
 800e1dc:	b342      	cbz	r2, 800e230 <__hexnan+0x88>
 800e1de:	4610      	mov	r0, r2
 800e1e0:	9105      	str	r1, [sp, #20]
 800e1e2:	9204      	str	r2, [sp, #16]
 800e1e4:	f7ff fd94 	bl	800dd10 <__hexdig_fun>
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	d151      	bne.n	800e290 <__hexnan+0xe8>
 800e1ec:	9a04      	ldr	r2, [sp, #16]
 800e1ee:	9905      	ldr	r1, [sp, #20]
 800e1f0:	2a20      	cmp	r2, #32
 800e1f2:	d818      	bhi.n	800e226 <__hexnan+0x7e>
 800e1f4:	9b02      	ldr	r3, [sp, #8]
 800e1f6:	459b      	cmp	fp, r3
 800e1f8:	dd13      	ble.n	800e222 <__hexnan+0x7a>
 800e1fa:	454c      	cmp	r4, r9
 800e1fc:	d206      	bcs.n	800e20c <__hexnan+0x64>
 800e1fe:	2d07      	cmp	r5, #7
 800e200:	dc04      	bgt.n	800e20c <__hexnan+0x64>
 800e202:	462a      	mov	r2, r5
 800e204:	4649      	mov	r1, r9
 800e206:	4620      	mov	r0, r4
 800e208:	f7ff ffa8 	bl	800e15c <L_shift>
 800e20c:	4544      	cmp	r4, r8
 800e20e:	d952      	bls.n	800e2b6 <__hexnan+0x10e>
 800e210:	2300      	movs	r3, #0
 800e212:	f1a4 0904 	sub.w	r9, r4, #4
 800e216:	f844 3c04 	str.w	r3, [r4, #-4]
 800e21a:	f8cd b008 	str.w	fp, [sp, #8]
 800e21e:	464c      	mov	r4, r9
 800e220:	461d      	mov	r5, r3
 800e222:	9903      	ldr	r1, [sp, #12]
 800e224:	e7d7      	b.n	800e1d6 <__hexnan+0x2e>
 800e226:	2a29      	cmp	r2, #41	@ 0x29
 800e228:	d157      	bne.n	800e2da <__hexnan+0x132>
 800e22a:	3102      	adds	r1, #2
 800e22c:	f8ca 1000 	str.w	r1, [sl]
 800e230:	f1bb 0f00 	cmp.w	fp, #0
 800e234:	d051      	beq.n	800e2da <__hexnan+0x132>
 800e236:	454c      	cmp	r4, r9
 800e238:	d206      	bcs.n	800e248 <__hexnan+0xa0>
 800e23a:	2d07      	cmp	r5, #7
 800e23c:	dc04      	bgt.n	800e248 <__hexnan+0xa0>
 800e23e:	462a      	mov	r2, r5
 800e240:	4649      	mov	r1, r9
 800e242:	4620      	mov	r0, r4
 800e244:	f7ff ff8a 	bl	800e15c <L_shift>
 800e248:	4544      	cmp	r4, r8
 800e24a:	d936      	bls.n	800e2ba <__hexnan+0x112>
 800e24c:	f1a8 0204 	sub.w	r2, r8, #4
 800e250:	4623      	mov	r3, r4
 800e252:	f853 1b04 	ldr.w	r1, [r3], #4
 800e256:	f842 1f04 	str.w	r1, [r2, #4]!
 800e25a:	429f      	cmp	r7, r3
 800e25c:	d2f9      	bcs.n	800e252 <__hexnan+0xaa>
 800e25e:	1b3b      	subs	r3, r7, r4
 800e260:	f023 0303 	bic.w	r3, r3, #3
 800e264:	3304      	adds	r3, #4
 800e266:	3401      	adds	r4, #1
 800e268:	3e03      	subs	r6, #3
 800e26a:	42b4      	cmp	r4, r6
 800e26c:	bf88      	it	hi
 800e26e:	2304      	movhi	r3, #4
 800e270:	4443      	add	r3, r8
 800e272:	2200      	movs	r2, #0
 800e274:	f843 2b04 	str.w	r2, [r3], #4
 800e278:	429f      	cmp	r7, r3
 800e27a:	d2fb      	bcs.n	800e274 <__hexnan+0xcc>
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	b91b      	cbnz	r3, 800e288 <__hexnan+0xe0>
 800e280:	4547      	cmp	r7, r8
 800e282:	d128      	bne.n	800e2d6 <__hexnan+0x12e>
 800e284:	2301      	movs	r3, #1
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	2005      	movs	r0, #5
 800e28a:	b007      	add	sp, #28
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e290:	3501      	adds	r5, #1
 800e292:	2d08      	cmp	r5, #8
 800e294:	f10b 0b01 	add.w	fp, fp, #1
 800e298:	dd06      	ble.n	800e2a8 <__hexnan+0x100>
 800e29a:	4544      	cmp	r4, r8
 800e29c:	d9c1      	bls.n	800e222 <__hexnan+0x7a>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2a4:	2501      	movs	r5, #1
 800e2a6:	3c04      	subs	r4, #4
 800e2a8:	6822      	ldr	r2, [r4, #0]
 800e2aa:	f000 000f 	and.w	r0, r0, #15
 800e2ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e2b2:	6020      	str	r0, [r4, #0]
 800e2b4:	e7b5      	b.n	800e222 <__hexnan+0x7a>
 800e2b6:	2508      	movs	r5, #8
 800e2b8:	e7b3      	b.n	800e222 <__hexnan+0x7a>
 800e2ba:	9b01      	ldr	r3, [sp, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0dd      	beq.n	800e27c <__hexnan+0xd4>
 800e2c0:	f1c3 0320 	rsb	r3, r3, #32
 800e2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c8:	40da      	lsrs	r2, r3
 800e2ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2d4:	e7d2      	b.n	800e27c <__hexnan+0xd4>
 800e2d6:	3f04      	subs	r7, #4
 800e2d8:	e7d0      	b.n	800e27c <__hexnan+0xd4>
 800e2da:	2004      	movs	r0, #4
 800e2dc:	e7d5      	b.n	800e28a <__hexnan+0xe2>

0800e2de <__ascii_mbtowc>:
 800e2de:	b082      	sub	sp, #8
 800e2e0:	b901      	cbnz	r1, 800e2e4 <__ascii_mbtowc+0x6>
 800e2e2:	a901      	add	r1, sp, #4
 800e2e4:	b142      	cbz	r2, 800e2f8 <__ascii_mbtowc+0x1a>
 800e2e6:	b14b      	cbz	r3, 800e2fc <__ascii_mbtowc+0x1e>
 800e2e8:	7813      	ldrb	r3, [r2, #0]
 800e2ea:	600b      	str	r3, [r1, #0]
 800e2ec:	7812      	ldrb	r2, [r2, #0]
 800e2ee:	1e10      	subs	r0, r2, #0
 800e2f0:	bf18      	it	ne
 800e2f2:	2001      	movne	r0, #1
 800e2f4:	b002      	add	sp, #8
 800e2f6:	4770      	bx	lr
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	e7fb      	b.n	800e2f4 <__ascii_mbtowc+0x16>
 800e2fc:	f06f 0001 	mvn.w	r0, #1
 800e300:	e7f8      	b.n	800e2f4 <__ascii_mbtowc+0x16>

0800e302 <_realloc_r>:
 800e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e306:	4680      	mov	r8, r0
 800e308:	4615      	mov	r5, r2
 800e30a:	460c      	mov	r4, r1
 800e30c:	b921      	cbnz	r1, 800e318 <_realloc_r+0x16>
 800e30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	4611      	mov	r1, r2
 800e314:	f7fd bdd4 	b.w	800bec0 <_malloc_r>
 800e318:	b92a      	cbnz	r2, 800e326 <_realloc_r+0x24>
 800e31a:	f7fd fd5d 	bl	800bdd8 <_free_r>
 800e31e:	2400      	movs	r4, #0
 800e320:	4620      	mov	r0, r4
 800e322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e326:	f000 f840 	bl	800e3aa <_malloc_usable_size_r>
 800e32a:	4285      	cmp	r5, r0
 800e32c:	4606      	mov	r6, r0
 800e32e:	d802      	bhi.n	800e336 <_realloc_r+0x34>
 800e330:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e334:	d8f4      	bhi.n	800e320 <_realloc_r+0x1e>
 800e336:	4629      	mov	r1, r5
 800e338:	4640      	mov	r0, r8
 800e33a:	f7fd fdc1 	bl	800bec0 <_malloc_r>
 800e33e:	4607      	mov	r7, r0
 800e340:	2800      	cmp	r0, #0
 800e342:	d0ec      	beq.n	800e31e <_realloc_r+0x1c>
 800e344:	42b5      	cmp	r5, r6
 800e346:	462a      	mov	r2, r5
 800e348:	4621      	mov	r1, r4
 800e34a:	bf28      	it	cs
 800e34c:	4632      	movcs	r2, r6
 800e34e:	f7ff fc43 	bl	800dbd8 <memcpy>
 800e352:	4621      	mov	r1, r4
 800e354:	4640      	mov	r0, r8
 800e356:	f7fd fd3f 	bl	800bdd8 <_free_r>
 800e35a:	463c      	mov	r4, r7
 800e35c:	e7e0      	b.n	800e320 <_realloc_r+0x1e>

0800e35e <__ascii_wctomb>:
 800e35e:	4603      	mov	r3, r0
 800e360:	4608      	mov	r0, r1
 800e362:	b141      	cbz	r1, 800e376 <__ascii_wctomb+0x18>
 800e364:	2aff      	cmp	r2, #255	@ 0xff
 800e366:	d904      	bls.n	800e372 <__ascii_wctomb+0x14>
 800e368:	228a      	movs	r2, #138	@ 0x8a
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	f04f 30ff 	mov.w	r0, #4294967295
 800e370:	4770      	bx	lr
 800e372:	700a      	strb	r2, [r1, #0]
 800e374:	2001      	movs	r0, #1
 800e376:	4770      	bx	lr

0800e378 <fiprintf>:
 800e378:	b40e      	push	{r1, r2, r3}
 800e37a:	b503      	push	{r0, r1, lr}
 800e37c:	4601      	mov	r1, r0
 800e37e:	ab03      	add	r3, sp, #12
 800e380:	4805      	ldr	r0, [pc, #20]	@ (800e398 <fiprintf+0x20>)
 800e382:	f853 2b04 	ldr.w	r2, [r3], #4
 800e386:	6800      	ldr	r0, [r0, #0]
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	f000 f83f 	bl	800e40c <_vfiprintf_r>
 800e38e:	b002      	add	sp, #8
 800e390:	f85d eb04 	ldr.w	lr, [sp], #4
 800e394:	b003      	add	sp, #12
 800e396:	4770      	bx	lr
 800e398:	20000104 	.word	0x20000104

0800e39c <abort>:
 800e39c:	b508      	push	{r3, lr}
 800e39e:	2006      	movs	r0, #6
 800e3a0:	f000 f974 	bl	800e68c <raise>
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f000 fc63 	bl	800ec70 <_exit>

0800e3aa <_malloc_usable_size_r>:
 800e3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ae:	1f18      	subs	r0, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	bfbc      	itt	lt
 800e3b4:	580b      	ldrlt	r3, [r1, r0]
 800e3b6:	18c0      	addlt	r0, r0, r3
 800e3b8:	4770      	bx	lr

0800e3ba <__sfputc_r>:
 800e3ba:	6893      	ldr	r3, [r2, #8]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	b410      	push	{r4}
 800e3c2:	6093      	str	r3, [r2, #8]
 800e3c4:	da08      	bge.n	800e3d8 <__sfputc_r+0x1e>
 800e3c6:	6994      	ldr	r4, [r2, #24]
 800e3c8:	42a3      	cmp	r3, r4
 800e3ca:	db01      	blt.n	800e3d0 <__sfputc_r+0x16>
 800e3cc:	290a      	cmp	r1, #10
 800e3ce:	d103      	bne.n	800e3d8 <__sfputc_r+0x1e>
 800e3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d4:	f7fc bd9d 	b.w	800af12 <__swbuf_r>
 800e3d8:	6813      	ldr	r3, [r2, #0]
 800e3da:	1c58      	adds	r0, r3, #1
 800e3dc:	6010      	str	r0, [r2, #0]
 800e3de:	7019      	strb	r1, [r3, #0]
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <__sfputs_r>:
 800e3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	460f      	mov	r7, r1
 800e3ee:	4614      	mov	r4, r2
 800e3f0:	18d5      	adds	r5, r2, r3
 800e3f2:	42ac      	cmp	r4, r5
 800e3f4:	d101      	bne.n	800e3fa <__sfputs_r+0x12>
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	e007      	b.n	800e40a <__sfputs_r+0x22>
 800e3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fe:	463a      	mov	r2, r7
 800e400:	4630      	mov	r0, r6
 800e402:	f7ff ffda 	bl	800e3ba <__sfputc_r>
 800e406:	1c43      	adds	r3, r0, #1
 800e408:	d1f3      	bne.n	800e3f2 <__sfputs_r+0xa>
 800e40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e40c <_vfiprintf_r>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	460d      	mov	r5, r1
 800e412:	b09d      	sub	sp, #116	@ 0x74
 800e414:	4614      	mov	r4, r2
 800e416:	4698      	mov	r8, r3
 800e418:	4606      	mov	r6, r0
 800e41a:	b118      	cbz	r0, 800e424 <_vfiprintf_r+0x18>
 800e41c:	6a03      	ldr	r3, [r0, #32]
 800e41e:	b90b      	cbnz	r3, 800e424 <_vfiprintf_r+0x18>
 800e420:	f7fc fcaa 	bl	800ad78 <__sinit>
 800e424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e426:	07d9      	lsls	r1, r3, #31
 800e428:	d405      	bmi.n	800e436 <_vfiprintf_r+0x2a>
 800e42a:	89ab      	ldrh	r3, [r5, #12]
 800e42c:	059a      	lsls	r2, r3, #22
 800e42e:	d402      	bmi.n	800e436 <_vfiprintf_r+0x2a>
 800e430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e432:	f7fc fe7a 	bl	800b12a <__retarget_lock_acquire_recursive>
 800e436:	89ab      	ldrh	r3, [r5, #12]
 800e438:	071b      	lsls	r3, r3, #28
 800e43a:	d501      	bpl.n	800e440 <_vfiprintf_r+0x34>
 800e43c:	692b      	ldr	r3, [r5, #16]
 800e43e:	b99b      	cbnz	r3, 800e468 <_vfiprintf_r+0x5c>
 800e440:	4629      	mov	r1, r5
 800e442:	4630      	mov	r0, r6
 800e444:	f7fc fda4 	bl	800af90 <__swsetup_r>
 800e448:	b170      	cbz	r0, 800e468 <_vfiprintf_r+0x5c>
 800e44a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e44c:	07dc      	lsls	r4, r3, #31
 800e44e:	d504      	bpl.n	800e45a <_vfiprintf_r+0x4e>
 800e450:	f04f 30ff 	mov.w	r0, #4294967295
 800e454:	b01d      	add	sp, #116	@ 0x74
 800e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45a:	89ab      	ldrh	r3, [r5, #12]
 800e45c:	0598      	lsls	r0, r3, #22
 800e45e:	d4f7      	bmi.n	800e450 <_vfiprintf_r+0x44>
 800e460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e462:	f7fc fe63 	bl	800b12c <__retarget_lock_release_recursive>
 800e466:	e7f3      	b.n	800e450 <_vfiprintf_r+0x44>
 800e468:	2300      	movs	r3, #0
 800e46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e46c:	2320      	movs	r3, #32
 800e46e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e472:	f8cd 800c 	str.w	r8, [sp, #12]
 800e476:	2330      	movs	r3, #48	@ 0x30
 800e478:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e628 <_vfiprintf_r+0x21c>
 800e47c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e480:	f04f 0901 	mov.w	r9, #1
 800e484:	4623      	mov	r3, r4
 800e486:	469a      	mov	sl, r3
 800e488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e48c:	b10a      	cbz	r2, 800e492 <_vfiprintf_r+0x86>
 800e48e:	2a25      	cmp	r2, #37	@ 0x25
 800e490:	d1f9      	bne.n	800e486 <_vfiprintf_r+0x7a>
 800e492:	ebba 0b04 	subs.w	fp, sl, r4
 800e496:	d00b      	beq.n	800e4b0 <_vfiprintf_r+0xa4>
 800e498:	465b      	mov	r3, fp
 800e49a:	4622      	mov	r2, r4
 800e49c:	4629      	mov	r1, r5
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f7ff ffa2 	bl	800e3e8 <__sfputs_r>
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	f000 80a7 	beq.w	800e5f8 <_vfiprintf_r+0x1ec>
 800e4aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4ac:	445a      	add	r2, fp
 800e4ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 809f 	beq.w	800e5f8 <_vfiprintf_r+0x1ec>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4c4:	f10a 0a01 	add.w	sl, sl, #1
 800e4c8:	9304      	str	r3, [sp, #16]
 800e4ca:	9307      	str	r3, [sp, #28]
 800e4cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4d2:	4654      	mov	r4, sl
 800e4d4:	2205      	movs	r2, #5
 800e4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4da:	4853      	ldr	r0, [pc, #332]	@ (800e628 <_vfiprintf_r+0x21c>)
 800e4dc:	f7f1 fe88 	bl	80001f0 <memchr>
 800e4e0:	9a04      	ldr	r2, [sp, #16]
 800e4e2:	b9d8      	cbnz	r0, 800e51c <_vfiprintf_r+0x110>
 800e4e4:	06d1      	lsls	r1, r2, #27
 800e4e6:	bf44      	itt	mi
 800e4e8:	2320      	movmi	r3, #32
 800e4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4ee:	0713      	lsls	r3, r2, #28
 800e4f0:	bf44      	itt	mi
 800e4f2:	232b      	movmi	r3, #43	@ 0x2b
 800e4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4fe:	d015      	beq.n	800e52c <_vfiprintf_r+0x120>
 800e500:	9a07      	ldr	r2, [sp, #28]
 800e502:	4654      	mov	r4, sl
 800e504:	2000      	movs	r0, #0
 800e506:	f04f 0c0a 	mov.w	ip, #10
 800e50a:	4621      	mov	r1, r4
 800e50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e510:	3b30      	subs	r3, #48	@ 0x30
 800e512:	2b09      	cmp	r3, #9
 800e514:	d94b      	bls.n	800e5ae <_vfiprintf_r+0x1a2>
 800e516:	b1b0      	cbz	r0, 800e546 <_vfiprintf_r+0x13a>
 800e518:	9207      	str	r2, [sp, #28]
 800e51a:	e014      	b.n	800e546 <_vfiprintf_r+0x13a>
 800e51c:	eba0 0308 	sub.w	r3, r0, r8
 800e520:	fa09 f303 	lsl.w	r3, r9, r3
 800e524:	4313      	orrs	r3, r2
 800e526:	9304      	str	r3, [sp, #16]
 800e528:	46a2      	mov	sl, r4
 800e52a:	e7d2      	b.n	800e4d2 <_vfiprintf_r+0xc6>
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	1d19      	adds	r1, r3, #4
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	9103      	str	r1, [sp, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	bfbb      	ittet	lt
 800e538:	425b      	neglt	r3, r3
 800e53a:	f042 0202 	orrlt.w	r2, r2, #2
 800e53e:	9307      	strge	r3, [sp, #28]
 800e540:	9307      	strlt	r3, [sp, #28]
 800e542:	bfb8      	it	lt
 800e544:	9204      	strlt	r2, [sp, #16]
 800e546:	7823      	ldrb	r3, [r4, #0]
 800e548:	2b2e      	cmp	r3, #46	@ 0x2e
 800e54a:	d10a      	bne.n	800e562 <_vfiprintf_r+0x156>
 800e54c:	7863      	ldrb	r3, [r4, #1]
 800e54e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e550:	d132      	bne.n	800e5b8 <_vfiprintf_r+0x1ac>
 800e552:	9b03      	ldr	r3, [sp, #12]
 800e554:	1d1a      	adds	r2, r3, #4
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	9203      	str	r2, [sp, #12]
 800e55a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e55e:	3402      	adds	r4, #2
 800e560:	9305      	str	r3, [sp, #20]
 800e562:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e638 <_vfiprintf_r+0x22c>
 800e566:	7821      	ldrb	r1, [r4, #0]
 800e568:	2203      	movs	r2, #3
 800e56a:	4650      	mov	r0, sl
 800e56c:	f7f1 fe40 	bl	80001f0 <memchr>
 800e570:	b138      	cbz	r0, 800e582 <_vfiprintf_r+0x176>
 800e572:	9b04      	ldr	r3, [sp, #16]
 800e574:	eba0 000a 	sub.w	r0, r0, sl
 800e578:	2240      	movs	r2, #64	@ 0x40
 800e57a:	4082      	lsls	r2, r0
 800e57c:	4313      	orrs	r3, r2
 800e57e:	3401      	adds	r4, #1
 800e580:	9304      	str	r3, [sp, #16]
 800e582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e586:	4829      	ldr	r0, [pc, #164]	@ (800e62c <_vfiprintf_r+0x220>)
 800e588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e58c:	2206      	movs	r2, #6
 800e58e:	f7f1 fe2f 	bl	80001f0 <memchr>
 800e592:	2800      	cmp	r0, #0
 800e594:	d03f      	beq.n	800e616 <_vfiprintf_r+0x20a>
 800e596:	4b26      	ldr	r3, [pc, #152]	@ (800e630 <_vfiprintf_r+0x224>)
 800e598:	bb1b      	cbnz	r3, 800e5e2 <_vfiprintf_r+0x1d6>
 800e59a:	9b03      	ldr	r3, [sp, #12]
 800e59c:	3307      	adds	r3, #7
 800e59e:	f023 0307 	bic.w	r3, r3, #7
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	9303      	str	r3, [sp, #12]
 800e5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a8:	443b      	add	r3, r7
 800e5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ac:	e76a      	b.n	800e484 <_vfiprintf_r+0x78>
 800e5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	e7a8      	b.n	800e50a <_vfiprintf_r+0xfe>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	3401      	adds	r4, #1
 800e5bc:	9305      	str	r3, [sp, #20]
 800e5be:	4619      	mov	r1, r3
 800e5c0:	f04f 0c0a 	mov.w	ip, #10
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ca:	3a30      	subs	r2, #48	@ 0x30
 800e5cc:	2a09      	cmp	r2, #9
 800e5ce:	d903      	bls.n	800e5d8 <_vfiprintf_r+0x1cc>
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d0c6      	beq.n	800e562 <_vfiprintf_r+0x156>
 800e5d4:	9105      	str	r1, [sp, #20]
 800e5d6:	e7c4      	b.n	800e562 <_vfiprintf_r+0x156>
 800e5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5dc:	4604      	mov	r4, r0
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e7f0      	b.n	800e5c4 <_vfiprintf_r+0x1b8>
 800e5e2:	ab03      	add	r3, sp, #12
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4b12      	ldr	r3, [pc, #72]	@ (800e634 <_vfiprintf_r+0x228>)
 800e5ea:	a904      	add	r1, sp, #16
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7fb fd6b 	bl	800a0c8 <_printf_float>
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	1c78      	adds	r0, r7, #1
 800e5f6:	d1d6      	bne.n	800e5a6 <_vfiprintf_r+0x19a>
 800e5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5fa:	07d9      	lsls	r1, r3, #31
 800e5fc:	d405      	bmi.n	800e60a <_vfiprintf_r+0x1fe>
 800e5fe:	89ab      	ldrh	r3, [r5, #12]
 800e600:	059a      	lsls	r2, r3, #22
 800e602:	d402      	bmi.n	800e60a <_vfiprintf_r+0x1fe>
 800e604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e606:	f7fc fd91 	bl	800b12c <__retarget_lock_release_recursive>
 800e60a:	89ab      	ldrh	r3, [r5, #12]
 800e60c:	065b      	lsls	r3, r3, #25
 800e60e:	f53f af1f 	bmi.w	800e450 <_vfiprintf_r+0x44>
 800e612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e614:	e71e      	b.n	800e454 <_vfiprintf_r+0x48>
 800e616:	ab03      	add	r3, sp, #12
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	462a      	mov	r2, r5
 800e61c:	4b05      	ldr	r3, [pc, #20]	@ (800e634 <_vfiprintf_r+0x228>)
 800e61e:	a904      	add	r1, sp, #16
 800e620:	4630      	mov	r0, r6
 800e622:	f7fb ffe9 	bl	800a5f8 <_printf_i>
 800e626:	e7e4      	b.n	800e5f2 <_vfiprintf_r+0x1e6>
 800e628:	080127a9 	.word	0x080127a9
 800e62c:	080127b3 	.word	0x080127b3
 800e630:	0800a0c9 	.word	0x0800a0c9
 800e634:	0800e3e9 	.word	0x0800e3e9
 800e638:	080127af 	.word	0x080127af

0800e63c <_raise_r>:
 800e63c:	291f      	cmp	r1, #31
 800e63e:	b538      	push	{r3, r4, r5, lr}
 800e640:	4605      	mov	r5, r0
 800e642:	460c      	mov	r4, r1
 800e644:	d904      	bls.n	800e650 <_raise_r+0x14>
 800e646:	2316      	movs	r3, #22
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	f04f 30ff 	mov.w	r0, #4294967295
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e652:	b112      	cbz	r2, 800e65a <_raise_r+0x1e>
 800e654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e658:	b94b      	cbnz	r3, 800e66e <_raise_r+0x32>
 800e65a:	4628      	mov	r0, r5
 800e65c:	f000 f830 	bl	800e6c0 <_getpid_r>
 800e660:	4622      	mov	r2, r4
 800e662:	4601      	mov	r1, r0
 800e664:	4628      	mov	r0, r5
 800e666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e66a:	f000 b817 	b.w	800e69c <_kill_r>
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d00a      	beq.n	800e688 <_raise_r+0x4c>
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	d103      	bne.n	800e67e <_raise_r+0x42>
 800e676:	2316      	movs	r3, #22
 800e678:	6003      	str	r3, [r0, #0]
 800e67a:	2001      	movs	r0, #1
 800e67c:	e7e7      	b.n	800e64e <_raise_r+0x12>
 800e67e:	2100      	movs	r1, #0
 800e680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e684:	4620      	mov	r0, r4
 800e686:	4798      	blx	r3
 800e688:	2000      	movs	r0, #0
 800e68a:	e7e0      	b.n	800e64e <_raise_r+0x12>

0800e68c <raise>:
 800e68c:	4b02      	ldr	r3, [pc, #8]	@ (800e698 <raise+0xc>)
 800e68e:	4601      	mov	r1, r0
 800e690:	6818      	ldr	r0, [r3, #0]
 800e692:	f7ff bfd3 	b.w	800e63c <_raise_r>
 800e696:	bf00      	nop
 800e698:	20000104 	.word	0x20000104

0800e69c <_kill_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4d07      	ldr	r5, [pc, #28]	@ (800e6bc <_kill_r+0x20>)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	4608      	mov	r0, r1
 800e6a6:	4611      	mov	r1, r2
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	f000 facb 	bl	800ec44 <_kill>
 800e6ae:	1c43      	adds	r3, r0, #1
 800e6b0:	d102      	bne.n	800e6b8 <_kill_r+0x1c>
 800e6b2:	682b      	ldr	r3, [r5, #0]
 800e6b4:	b103      	cbz	r3, 800e6b8 <_kill_r+0x1c>
 800e6b6:	6023      	str	r3, [r4, #0]
 800e6b8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20000990 	.word	0x20000990

0800e6c0 <_getpid_r>:
 800e6c0:	f000 bab0 	b.w	800ec24 <_getpid>

0800e6c4 <sqrt>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	ed2d 8b02 	vpush	{d8}
 800e6ca:	ec55 4b10 	vmov	r4, r5, d0
 800e6ce:	f000 f9c7 	bl	800ea60 <__ieee754_sqrt>
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	eeb0 8a40 	vmov.f32	s16, s0
 800e6de:	eef0 8a60 	vmov.f32	s17, s1
 800e6e2:	f7f2 fa33 	bl	8000b4c <__aeabi_dcmpun>
 800e6e6:	b990      	cbnz	r0, 800e70e <sqrt+0x4a>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f2 fa04 	bl	8000afc <__aeabi_dcmplt>
 800e6f4:	b158      	cbz	r0, 800e70e <sqrt+0x4a>
 800e6f6:	f7ff fa69 	bl	800dbcc <__errno>
 800e6fa:	2321      	movs	r3, #33	@ 0x21
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	2200      	movs	r2, #0
 800e700:	2300      	movs	r3, #0
 800e702:	4610      	mov	r0, r2
 800e704:	4619      	mov	r1, r3
 800e706:	f7f2 f8b1 	bl	800086c <__aeabi_ddiv>
 800e70a:	ec41 0b18 	vmov	d8, r0, r1
 800e70e:	eeb0 0a48 	vmov.f32	s0, s16
 800e712:	eef0 0a68 	vmov.f32	s1, s17
 800e716:	ecbd 8b02 	vpop	{d8}
 800e71a:	bd38      	pop	{r3, r4, r5, pc}
 800e71c:	0000      	movs	r0, r0
	...

0800e720 <atan>:
 800e720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	ec55 4b10 	vmov	r4, r5, d0
 800e728:	4bbf      	ldr	r3, [pc, #764]	@ (800ea28 <atan+0x308>)
 800e72a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e72e:	429e      	cmp	r6, r3
 800e730:	46ab      	mov	fp, r5
 800e732:	d918      	bls.n	800e766 <atan+0x46>
 800e734:	4bbd      	ldr	r3, [pc, #756]	@ (800ea2c <atan+0x30c>)
 800e736:	429e      	cmp	r6, r3
 800e738:	d801      	bhi.n	800e73e <atan+0x1e>
 800e73a:	d109      	bne.n	800e750 <atan+0x30>
 800e73c:	b144      	cbz	r4, 800e750 <atan+0x30>
 800e73e:	4622      	mov	r2, r4
 800e740:	462b      	mov	r3, r5
 800e742:	4620      	mov	r0, r4
 800e744:	4629      	mov	r1, r5
 800e746:	f7f1 fdb1 	bl	80002ac <__adddf3>
 800e74a:	4604      	mov	r4, r0
 800e74c:	460d      	mov	r5, r1
 800e74e:	e006      	b.n	800e75e <atan+0x3e>
 800e750:	f1bb 0f00 	cmp.w	fp, #0
 800e754:	f340 812b 	ble.w	800e9ae <atan+0x28e>
 800e758:	a597      	add	r5, pc, #604	@ (adr r5, 800e9b8 <atan+0x298>)
 800e75a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e75e:	ec45 4b10 	vmov	d0, r4, r5
 800e762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e766:	4bb2      	ldr	r3, [pc, #712]	@ (800ea30 <atan+0x310>)
 800e768:	429e      	cmp	r6, r3
 800e76a:	d813      	bhi.n	800e794 <atan+0x74>
 800e76c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e770:	429e      	cmp	r6, r3
 800e772:	d80c      	bhi.n	800e78e <atan+0x6e>
 800e774:	a392      	add	r3, pc, #584	@ (adr r3, 800e9c0 <atan+0x2a0>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f1 fd95 	bl	80002ac <__adddf3>
 800e782:	4bac      	ldr	r3, [pc, #688]	@ (800ea34 <atan+0x314>)
 800e784:	2200      	movs	r2, #0
 800e786:	f7f2 f9d7 	bl	8000b38 <__aeabi_dcmpgt>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d1e7      	bne.n	800e75e <atan+0x3e>
 800e78e:	f04f 3aff 	mov.w	sl, #4294967295
 800e792:	e029      	b.n	800e7e8 <atan+0xc8>
 800e794:	f000 f95c 	bl	800ea50 <fabs>
 800e798:	4ba7      	ldr	r3, [pc, #668]	@ (800ea38 <atan+0x318>)
 800e79a:	429e      	cmp	r6, r3
 800e79c:	ec55 4b10 	vmov	r4, r5, d0
 800e7a0:	f200 80bc 	bhi.w	800e91c <atan+0x1fc>
 800e7a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e7a8:	429e      	cmp	r6, r3
 800e7aa:	f200 809e 	bhi.w	800e8ea <atan+0x1ca>
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	462b      	mov	r3, r5
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	f7f1 fd79 	bl	80002ac <__adddf3>
 800e7ba:	4b9e      	ldr	r3, [pc, #632]	@ (800ea34 <atan+0x314>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f7f1 fd73 	bl	80002a8 <__aeabi_dsub>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	460f      	mov	r7, r1
 800e7c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	f7f1 fd6c 	bl	80002ac <__adddf3>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	4630      	mov	r0, r6
 800e7da:	4639      	mov	r1, r7
 800e7dc:	f7f2 f846 	bl	800086c <__aeabi_ddiv>
 800e7e0:	f04f 0a00 	mov.w	sl, #0
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	460d      	mov	r5, r1
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	f7f1 ff12 	bl	8000618 <__aeabi_dmul>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	4680      	mov	r8, r0
 800e7fa:	4689      	mov	r9, r1
 800e7fc:	f7f1 ff0c 	bl	8000618 <__aeabi_dmul>
 800e800:	a371      	add	r3, pc, #452	@ (adr r3, 800e9c8 <atan+0x2a8>)
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	4606      	mov	r6, r0
 800e808:	460f      	mov	r7, r1
 800e80a:	f7f1 ff05 	bl	8000618 <__aeabi_dmul>
 800e80e:	a370      	add	r3, pc, #448	@ (adr r3, 800e9d0 <atan+0x2b0>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fd4a 	bl	80002ac <__adddf3>
 800e818:	4632      	mov	r2, r6
 800e81a:	463b      	mov	r3, r7
 800e81c:	f7f1 fefc 	bl	8000618 <__aeabi_dmul>
 800e820:	a36d      	add	r3, pc, #436	@ (adr r3, 800e9d8 <atan+0x2b8>)
 800e822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e826:	f7f1 fd41 	bl	80002ac <__adddf3>
 800e82a:	4632      	mov	r2, r6
 800e82c:	463b      	mov	r3, r7
 800e82e:	f7f1 fef3 	bl	8000618 <__aeabi_dmul>
 800e832:	a36b      	add	r3, pc, #428	@ (adr r3, 800e9e0 <atan+0x2c0>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fd38 	bl	80002ac <__adddf3>
 800e83c:	4632      	mov	r2, r6
 800e83e:	463b      	mov	r3, r7
 800e840:	f7f1 feea 	bl	8000618 <__aeabi_dmul>
 800e844:	a368      	add	r3, pc, #416	@ (adr r3, 800e9e8 <atan+0x2c8>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	f7f1 fd2f 	bl	80002ac <__adddf3>
 800e84e:	4632      	mov	r2, r6
 800e850:	463b      	mov	r3, r7
 800e852:	f7f1 fee1 	bl	8000618 <__aeabi_dmul>
 800e856:	a366      	add	r3, pc, #408	@ (adr r3, 800e9f0 <atan+0x2d0>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f7f1 fd26 	bl	80002ac <__adddf3>
 800e860:	4642      	mov	r2, r8
 800e862:	464b      	mov	r3, r9
 800e864:	f7f1 fed8 	bl	8000618 <__aeabi_dmul>
 800e868:	a363      	add	r3, pc, #396	@ (adr r3, 800e9f8 <atan+0x2d8>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	4680      	mov	r8, r0
 800e870:	4689      	mov	r9, r1
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f1 fecf 	bl	8000618 <__aeabi_dmul>
 800e87a:	a361      	add	r3, pc, #388	@ (adr r3, 800ea00 <atan+0x2e0>)
 800e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e880:	f7f1 fd12 	bl	80002a8 <__aeabi_dsub>
 800e884:	4632      	mov	r2, r6
 800e886:	463b      	mov	r3, r7
 800e888:	f7f1 fec6 	bl	8000618 <__aeabi_dmul>
 800e88c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ea08 <atan+0x2e8>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fd09 	bl	80002a8 <__aeabi_dsub>
 800e896:	4632      	mov	r2, r6
 800e898:	463b      	mov	r3, r7
 800e89a:	f7f1 febd 	bl	8000618 <__aeabi_dmul>
 800e89e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ea10 <atan+0x2f0>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f7f1 fd00 	bl	80002a8 <__aeabi_dsub>
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	463b      	mov	r3, r7
 800e8ac:	f7f1 feb4 	bl	8000618 <__aeabi_dmul>
 800e8b0:	a359      	add	r3, pc, #356	@ (adr r3, 800ea18 <atan+0x2f8>)
 800e8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b6:	f7f1 fcf7 	bl	80002a8 <__aeabi_dsub>
 800e8ba:	4632      	mov	r2, r6
 800e8bc:	463b      	mov	r3, r7
 800e8be:	f7f1 feab 	bl	8000618 <__aeabi_dmul>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4640      	mov	r0, r8
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	f7f1 fcef 	bl	80002ac <__adddf3>
 800e8ce:	4622      	mov	r2, r4
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	f7f1 fea1 	bl	8000618 <__aeabi_dmul>
 800e8d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	d148      	bne.n	800e972 <atan+0x252>
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	f7f1 fce0 	bl	80002a8 <__aeabi_dsub>
 800e8e8:	e72f      	b.n	800e74a <atan+0x2a>
 800e8ea:	4b52      	ldr	r3, [pc, #328]	@ (800ea34 <atan+0x314>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7f1 fcd9 	bl	80002a8 <__aeabi_dsub>
 800e8f6:	4b4f      	ldr	r3, [pc, #316]	@ (800ea34 <atan+0x314>)
 800e8f8:	4606      	mov	r6, r0
 800e8fa:	460f      	mov	r7, r1
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fcd3 	bl	80002ac <__adddf3>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	4630      	mov	r0, r6
 800e90c:	4639      	mov	r1, r7
 800e90e:	f7f1 ffad 	bl	800086c <__aeabi_ddiv>
 800e912:	f04f 0a01 	mov.w	sl, #1
 800e916:	4604      	mov	r4, r0
 800e918:	460d      	mov	r5, r1
 800e91a:	e765      	b.n	800e7e8 <atan+0xc8>
 800e91c:	4b47      	ldr	r3, [pc, #284]	@ (800ea3c <atan+0x31c>)
 800e91e:	429e      	cmp	r6, r3
 800e920:	d21c      	bcs.n	800e95c <atan+0x23c>
 800e922:	4b47      	ldr	r3, [pc, #284]	@ (800ea40 <atan+0x320>)
 800e924:	2200      	movs	r2, #0
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	f7f1 fcbd 	bl	80002a8 <__aeabi_dsub>
 800e92e:	4b44      	ldr	r3, [pc, #272]	@ (800ea40 <atan+0x320>)
 800e930:	4606      	mov	r6, r0
 800e932:	460f      	mov	r7, r1
 800e934:	2200      	movs	r2, #0
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f7f1 fe6d 	bl	8000618 <__aeabi_dmul>
 800e93e:	4b3d      	ldr	r3, [pc, #244]	@ (800ea34 <atan+0x314>)
 800e940:	2200      	movs	r2, #0
 800e942:	f7f1 fcb3 	bl	80002ac <__adddf3>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f1 ff8d 	bl	800086c <__aeabi_ddiv>
 800e952:	f04f 0a02 	mov.w	sl, #2
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	e745      	b.n	800e7e8 <atan+0xc8>
 800e95c:	4622      	mov	r2, r4
 800e95e:	462b      	mov	r3, r5
 800e960:	4938      	ldr	r1, [pc, #224]	@ (800ea44 <atan+0x324>)
 800e962:	2000      	movs	r0, #0
 800e964:	f7f1 ff82 	bl	800086c <__aeabi_ddiv>
 800e968:	f04f 0a03 	mov.w	sl, #3
 800e96c:	4604      	mov	r4, r0
 800e96e:	460d      	mov	r5, r1
 800e970:	e73a      	b.n	800e7e8 <atan+0xc8>
 800e972:	4b35      	ldr	r3, [pc, #212]	@ (800ea48 <atan+0x328>)
 800e974:	4e35      	ldr	r6, [pc, #212]	@ (800ea4c <atan+0x32c>)
 800e976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	f7f1 fc93 	bl	80002a8 <__aeabi_dsub>
 800e982:	4622      	mov	r2, r4
 800e984:	462b      	mov	r3, r5
 800e986:	f7f1 fc8f 	bl	80002a8 <__aeabi_dsub>
 800e98a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e996:	f7f1 fc87 	bl	80002a8 <__aeabi_dsub>
 800e99a:	f1bb 0f00 	cmp.w	fp, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	460d      	mov	r5, r1
 800e9a2:	f6bf aedc 	bge.w	800e75e <atan+0x3e>
 800e9a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9aa:	461d      	mov	r5, r3
 800e9ac:	e6d7      	b.n	800e75e <atan+0x3e>
 800e9ae:	a51c      	add	r5, pc, #112	@ (adr r5, 800ea20 <atan+0x300>)
 800e9b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9b4:	e6d3      	b.n	800e75e <atan+0x3e>
 800e9b6:	bf00      	nop
 800e9b8:	54442d18 	.word	0x54442d18
 800e9bc:	3ff921fb 	.word	0x3ff921fb
 800e9c0:	8800759c 	.word	0x8800759c
 800e9c4:	7e37e43c 	.word	0x7e37e43c
 800e9c8:	e322da11 	.word	0xe322da11
 800e9cc:	3f90ad3a 	.word	0x3f90ad3a
 800e9d0:	24760deb 	.word	0x24760deb
 800e9d4:	3fa97b4b 	.word	0x3fa97b4b
 800e9d8:	a0d03d51 	.word	0xa0d03d51
 800e9dc:	3fb10d66 	.word	0x3fb10d66
 800e9e0:	c54c206e 	.word	0xc54c206e
 800e9e4:	3fb745cd 	.word	0x3fb745cd
 800e9e8:	920083ff 	.word	0x920083ff
 800e9ec:	3fc24924 	.word	0x3fc24924
 800e9f0:	5555550d 	.word	0x5555550d
 800e9f4:	3fd55555 	.word	0x3fd55555
 800e9f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e9fc:	bfa2b444 	.word	0xbfa2b444
 800ea00:	52defd9a 	.word	0x52defd9a
 800ea04:	3fadde2d 	.word	0x3fadde2d
 800ea08:	af749a6d 	.word	0xaf749a6d
 800ea0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ea10:	fe231671 	.word	0xfe231671
 800ea14:	3fbc71c6 	.word	0x3fbc71c6
 800ea18:	9998ebc4 	.word	0x9998ebc4
 800ea1c:	3fc99999 	.word	0x3fc99999
 800ea20:	54442d18 	.word	0x54442d18
 800ea24:	bff921fb 	.word	0xbff921fb
 800ea28:	440fffff 	.word	0x440fffff
 800ea2c:	7ff00000 	.word	0x7ff00000
 800ea30:	3fdbffff 	.word	0x3fdbffff
 800ea34:	3ff00000 	.word	0x3ff00000
 800ea38:	3ff2ffff 	.word	0x3ff2ffff
 800ea3c:	40038000 	.word	0x40038000
 800ea40:	3ff80000 	.word	0x3ff80000
 800ea44:	bff00000 	.word	0xbff00000
 800ea48:	08012860 	.word	0x08012860
 800ea4c:	08012880 	.word	0x08012880

0800ea50 <fabs>:
 800ea50:	ec51 0b10 	vmov	r0, r1, d0
 800ea54:	4602      	mov	r2, r0
 800ea56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea5a:	ec43 2b10 	vmov	d0, r2, r3
 800ea5e:	4770      	bx	lr

0800ea60 <__ieee754_sqrt>:
 800ea60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea64:	4a68      	ldr	r2, [pc, #416]	@ (800ec08 <__ieee754_sqrt+0x1a8>)
 800ea66:	ec55 4b10 	vmov	r4, r5, d0
 800ea6a:	43aa      	bics	r2, r5
 800ea6c:	462b      	mov	r3, r5
 800ea6e:	4621      	mov	r1, r4
 800ea70:	d110      	bne.n	800ea94 <__ieee754_sqrt+0x34>
 800ea72:	4622      	mov	r2, r4
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdce 	bl	8000618 <__aeabi_dmul>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4620      	mov	r0, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	f7f1 fc12 	bl	80002ac <__adddf3>
 800ea88:	4604      	mov	r4, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	ec45 4b10 	vmov	d0, r4, r5
 800ea90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea94:	2d00      	cmp	r5, #0
 800ea96:	dc0e      	bgt.n	800eab6 <__ieee754_sqrt+0x56>
 800ea98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ea9c:	4322      	orrs	r2, r4
 800ea9e:	d0f5      	beq.n	800ea8c <__ieee754_sqrt+0x2c>
 800eaa0:	b19d      	cbz	r5, 800eaca <__ieee754_sqrt+0x6a>
 800eaa2:	4622      	mov	r2, r4
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	f7f1 fbfe 	bl	80002a8 <__aeabi_dsub>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	f7f1 fedc 	bl	800086c <__aeabi_ddiv>
 800eab4:	e7e8      	b.n	800ea88 <__ieee754_sqrt+0x28>
 800eab6:	152a      	asrs	r2, r5, #20
 800eab8:	d115      	bne.n	800eae6 <__ieee754_sqrt+0x86>
 800eaba:	2000      	movs	r0, #0
 800eabc:	e009      	b.n	800ead2 <__ieee754_sqrt+0x72>
 800eabe:	0acb      	lsrs	r3, r1, #11
 800eac0:	3a15      	subs	r2, #21
 800eac2:	0549      	lsls	r1, r1, #21
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d0fa      	beq.n	800eabe <__ieee754_sqrt+0x5e>
 800eac8:	e7f7      	b.n	800eaba <__ieee754_sqrt+0x5a>
 800eaca:	462a      	mov	r2, r5
 800eacc:	e7fa      	b.n	800eac4 <__ieee754_sqrt+0x64>
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	3001      	adds	r0, #1
 800ead2:	02dc      	lsls	r4, r3, #11
 800ead4:	d5fb      	bpl.n	800eace <__ieee754_sqrt+0x6e>
 800ead6:	1e44      	subs	r4, r0, #1
 800ead8:	1b12      	subs	r2, r2, r4
 800eada:	f1c0 0420 	rsb	r4, r0, #32
 800eade:	fa21 f404 	lsr.w	r4, r1, r4
 800eae2:	4323      	orrs	r3, r4
 800eae4:	4081      	lsls	r1, r0
 800eae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800eaee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eaf2:	07d2      	lsls	r2, r2, #31
 800eaf4:	bf5c      	itt	pl
 800eaf6:	005b      	lslpl	r3, r3, #1
 800eaf8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800eafc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb00:	bf58      	it	pl
 800eb02:	0049      	lslpl	r1, r1, #1
 800eb04:	2600      	movs	r6, #0
 800eb06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800eb0a:	106d      	asrs	r5, r5, #1
 800eb0c:	0049      	lsls	r1, r1, #1
 800eb0e:	2016      	movs	r0, #22
 800eb10:	4632      	mov	r2, r6
 800eb12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eb16:	1917      	adds	r7, r2, r4
 800eb18:	429f      	cmp	r7, r3
 800eb1a:	bfde      	ittt	le
 800eb1c:	193a      	addle	r2, r7, r4
 800eb1e:	1bdb      	suble	r3, r3, r7
 800eb20:	1936      	addle	r6, r6, r4
 800eb22:	0fcf      	lsrs	r7, r1, #31
 800eb24:	3801      	subs	r0, #1
 800eb26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800eb2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb32:	d1f0      	bne.n	800eb16 <__ieee754_sqrt+0xb6>
 800eb34:	4604      	mov	r4, r0
 800eb36:	2720      	movs	r7, #32
 800eb38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	eb00 0e0c 	add.w	lr, r0, ip
 800eb42:	db02      	blt.n	800eb4a <__ieee754_sqrt+0xea>
 800eb44:	d113      	bne.n	800eb6e <__ieee754_sqrt+0x10e>
 800eb46:	458e      	cmp	lr, r1
 800eb48:	d811      	bhi.n	800eb6e <__ieee754_sqrt+0x10e>
 800eb4a:	f1be 0f00 	cmp.w	lr, #0
 800eb4e:	eb0e 000c 	add.w	r0, lr, ip
 800eb52:	da42      	bge.n	800ebda <__ieee754_sqrt+0x17a>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	db40      	blt.n	800ebda <__ieee754_sqrt+0x17a>
 800eb58:	f102 0801 	add.w	r8, r2, #1
 800eb5c:	1a9b      	subs	r3, r3, r2
 800eb5e:	458e      	cmp	lr, r1
 800eb60:	bf88      	it	hi
 800eb62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800eb66:	eba1 010e 	sub.w	r1, r1, lr
 800eb6a:	4464      	add	r4, ip
 800eb6c:	4642      	mov	r2, r8
 800eb6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800eb72:	3f01      	subs	r7, #1
 800eb74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800eb78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eb80:	d1dc      	bne.n	800eb3c <__ieee754_sqrt+0xdc>
 800eb82:	4319      	orrs	r1, r3
 800eb84:	d01b      	beq.n	800ebbe <__ieee754_sqrt+0x15e>
 800eb86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ec0c <__ieee754_sqrt+0x1ac>
 800eb8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ec10 <__ieee754_sqrt+0x1b0>
 800eb8e:	e9da 0100 	ldrd	r0, r1, [sl]
 800eb92:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb96:	f7f1 fb87 	bl	80002a8 <__aeabi_dsub>
 800eb9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4640      	mov	r0, r8
 800eba4:	4649      	mov	r1, r9
 800eba6:	f7f1 ffb3 	bl	8000b10 <__aeabi_dcmple>
 800ebaa:	b140      	cbz	r0, 800ebbe <__ieee754_sqrt+0x15e>
 800ebac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ebb0:	e9da 0100 	ldrd	r0, r1, [sl]
 800ebb4:	e9db 2300 	ldrd	r2, r3, [fp]
 800ebb8:	d111      	bne.n	800ebde <__ieee754_sqrt+0x17e>
 800ebba:	3601      	adds	r6, #1
 800ebbc:	463c      	mov	r4, r7
 800ebbe:	1072      	asrs	r2, r6, #1
 800ebc0:	0863      	lsrs	r3, r4, #1
 800ebc2:	07f1      	lsls	r1, r6, #31
 800ebc4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ebc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ebcc:	bf48      	it	mi
 800ebce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ebd2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	e756      	b.n	800ea88 <__ieee754_sqrt+0x28>
 800ebda:	4690      	mov	r8, r2
 800ebdc:	e7be      	b.n	800eb5c <__ieee754_sqrt+0xfc>
 800ebde:	f7f1 fb65 	bl	80002ac <__adddf3>
 800ebe2:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4640      	mov	r0, r8
 800ebec:	4649      	mov	r1, r9
 800ebee:	f7f1 ff85 	bl	8000afc <__aeabi_dcmplt>
 800ebf2:	b120      	cbz	r0, 800ebfe <__ieee754_sqrt+0x19e>
 800ebf4:	1ca0      	adds	r0, r4, #2
 800ebf6:	bf08      	it	eq
 800ebf8:	3601      	addeq	r6, #1
 800ebfa:	3402      	adds	r4, #2
 800ebfc:	e7df      	b.n	800ebbe <__ieee754_sqrt+0x15e>
 800ebfe:	1c63      	adds	r3, r4, #1
 800ec00:	f023 0401 	bic.w	r4, r3, #1
 800ec04:	e7db      	b.n	800ebbe <__ieee754_sqrt+0x15e>
 800ec06:	bf00      	nop
 800ec08:	7ff00000 	.word	0x7ff00000
 800ec0c:	200002c8 	.word	0x200002c8
 800ec10:	200002c0 	.word	0x200002c0

0800ec14 <_fstat>:
 800ec14:	4b02      	ldr	r3, [pc, #8]	@ (800ec20 <_fstat+0xc>)
 800ec16:	2258      	movs	r2, #88	@ 0x58
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1e:	4770      	bx	lr
 800ec20:	20000990 	.word	0x20000990

0800ec24 <_getpid>:
 800ec24:	4b02      	ldr	r3, [pc, #8]	@ (800ec30 <_getpid+0xc>)
 800ec26:	2258      	movs	r2, #88	@ 0x58
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2e:	4770      	bx	lr
 800ec30:	20000990 	.word	0x20000990

0800ec34 <_isatty>:
 800ec34:	4b02      	ldr	r3, [pc, #8]	@ (800ec40 <_isatty+0xc>)
 800ec36:	2258      	movs	r2, #88	@ 0x58
 800ec38:	601a      	str	r2, [r3, #0]
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	20000990 	.word	0x20000990

0800ec44 <_kill>:
 800ec44:	4b02      	ldr	r3, [pc, #8]	@ (800ec50 <_kill+0xc>)
 800ec46:	2258      	movs	r2, #88	@ 0x58
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4e:	4770      	bx	lr
 800ec50:	20000990 	.word	0x20000990

0800ec54 <_sbrk>:
 800ec54:	4a04      	ldr	r2, [pc, #16]	@ (800ec68 <_sbrk+0x14>)
 800ec56:	6811      	ldr	r1, [r2, #0]
 800ec58:	4603      	mov	r3, r0
 800ec5a:	b909      	cbnz	r1, 800ec60 <_sbrk+0xc>
 800ec5c:	4903      	ldr	r1, [pc, #12]	@ (800ec6c <_sbrk+0x18>)
 800ec5e:	6011      	str	r1, [r2, #0]
 800ec60:	6810      	ldr	r0, [r2, #0]
 800ec62:	4403      	add	r3, r0
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	4770      	bx	lr
 800ec68:	200009a0 	.word	0x200009a0
 800ec6c:	200009a8 	.word	0x200009a8

0800ec70 <_exit>:
 800ec70:	e7fe      	b.n	800ec70 <_exit>
	...

0800ec74 <_init>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr

0800ec80 <_fini>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	bf00      	nop
 800ec84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec86:	bc08      	pop	{r3}
 800ec88:	469e      	mov	lr, r3
 800ec8a:	4770      	bx	lr
