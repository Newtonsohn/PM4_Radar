
STM32F769I_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f730  080167d0  080167d0  000177d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08045f00  08045f00  00046f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08045f08  08045f08  00046f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08045f0c  08045f0c  00046f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006f4  20020000  08045f10  00047000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001142c  200206f8  200206f8  0005c6f8  2**3
                  ALLOC
  8 ._user_heap_stack 0003b004  20031b24  20031b24  0005c6f8  2**0
                  ALLOC
  9 .dtcm         00014660  20000000  08046604  00048000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .itcm         00000000  00000000  00000000  0005c660  2**0
                  CONTENTS
 11 .ARM.attributes 0000002e  00000000  00000000  0005c660  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e19  00000000  00000000  0005c68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b66  00000000  00000000  000864a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  0008d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001813  00000000  00000000  0008f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f31  00000000  00000000  0009099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b97e  00000000  00000000  000c88cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f825  00000000  00000000  0010424a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00233a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097f4  00000000  00000000  00233b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000de  00000000  00000000  0023d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00005439  00000000  00000000  0023d3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000250  00000000  00000000  0024282f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200206f8 	.word	0x200206f8
 800021c:	00000000 	.word	0x00000000
 8000220:	080167b8 	.word	0x080167b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200206fc 	.word	0x200206fc
 800023c:	080167b8 	.word	0x080167b8

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strcmp>:
 8000300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000308:	2a01      	cmp	r2, #1
 800030a:	bf28      	it	cs
 800030c:	429a      	cmpcs	r2, r3
 800030e:	d0f7      	beq.n	8000300 <strcmp>
 8000310:	1ad0      	subs	r0, r2, r3
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <initCodec>:
	initCodec

 	Initialization of the audio codec with a given frequency.
*/
/***********************************************************************************/
uint8_t initCodec(uint32_t samplingFreqency){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]

  uint8_t ret = AUDIO_ERROR;
 80003c8:	2301      	movs	r3, #1
 80003ca:	73fb      	strb	r3, [r7, #15]

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
  ret = BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 0, CODEC_SAMPLING_FREQUENCY);
 80003cc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80003d0:	2100      	movs	r1, #0
 80003d2:	2002      	movs	r0, #2
 80003d4:	f00e fc74 	bl	800ecc0 <BSP_AUDIO_OUT_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	73fb      	strb	r3, [r7, #15]
  if(ret != AUDIO_OK)
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <initCodec+0x26>
  {
    return(ret);
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	e01a      	b.n	800041c <initCodec+0x5c>
  }
  else
  {
	 BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80003e6:	2005      	movs	r0, #5
 80003e8:	f00e fce0 	bl	800edac <BSP_AUDIO_OUT_SetAudioFrameSlot>
  }

  // input init
  BSP_AUDIO_IN_Init(CODEC_SAMPLING_FREQUENCY, 24, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 80003ec:	2202      	movs	r2, #2
 80003ee:	2118      	movs	r1, #24
 80003f0:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80003f4:	f00e ffc8 	bl	800f388 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_AllocScratch ((int32_t *)&audio_input_scratch[0], AUDIO_INPUT_SCRATCH_SIZE);
 80003f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003fc:	4809      	ldr	r0, [pc, #36]	@ (8000424 <initCodec+0x64>)
 80003fe:	f00f f837 	bl	800f470 <BSP_AUDIO_IN_AllocScratch>

  // start the ping/pong buffer
  BSP_AUDIO_OUT_Play((uint16_t*)&audio_output_buffer[0], BUFFER_SIZE_SAMPLES * NUMBER_OF_OUTPUT_CHANNELS*BYTES_PER_SAMPLE);
 8000402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000406:	4808      	ldr	r0, [pc, #32]	@ (8000428 <initCodec+0x68>)
 8000408:	f00e fcac 	bl	800ed64 <BSP_AUDIO_OUT_Play>
  ret = BSP_AUDIO_IN_Record((uint16_t*)&audio_input_buffer[0], AUDIO_INPUT_BUFFER_SIZE * NUMBER_OF_INPUT_CHANNELS*2);
 800040c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000410:	4806      	ldr	r0, [pc, #24]	@ (800042c <initCodec+0x6c>)
 8000412:	f00f f861 	bl	800f4d8 <BSP_AUDIO_IN_Record>
 8000416:	4603      	mov	r3, r0
 8000418:	73fb      	strb	r3, [r7, #15]

  return(ret);
 800041a:	7bfb      	ldrb	r3, [r7, #15]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000000c 	.word	0x2000000c
 8000428:	2000500c 	.word	0x2000500c
 800042c:	2000100c 	.word	0x2000100c

08000430 <DMA2_Stream4_IRQHandler>:
	DMA2_Stream4_IRQHandler

 	DMA stream interrupt: process the event
*/
/***********************************************************************************/
void DMA2_Stream4_IRQHandler(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <DMA2_Stream4_IRQHandler+0x14>)
 8000436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000438:	4618      	mov	r0, r3
 800043a:	f006 fe21 	bl	8007080 <HAL_DMA_IRQHandler>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20030e48 	.word	0x20030e48

08000448 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
#if BUFFER_SIZE_SAMPLES == 1
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
#else
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
#endif
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
	uint32_t i;

	if(audio_buffer_a_timeout == 0){	// check if the new output data block for the DMA is ready
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xb8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d120      	bne.n	8000498 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x50>
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e018      	b.n	800048e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x46>
			audio_output_buffer[2*i+ (BUFFER_SIZE_SAMPLES * NUMBER_OF_OUTPUT_CHANNELS)] = audio_output_buffer_A_CH1[i];
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	4927      	ldr	r1, [pc, #156]	@ (8000504 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xbc>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800046c:	4926      	ldr	r1, [pc, #152]	@ (8000508 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc0>)
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			audio_output_buffer[2*i + 1+ (BUFFER_SIZE_SAMPLES * NUMBER_OF_OUTPUT_CHANNELS)] = audio_output_buffer_A_CH2[i];
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	f603 0301 	addw	r3, r3, #2049	@ 0x801
 800047a:	4924      	ldr	r1, [pc, #144]	@ (800050c <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc4>)
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000482:	4921      	ldr	r1, [pc, #132]	@ (8000508 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc0>)
 8000484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000494:	d3e2      	bcc.n	800045c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
 8000496:	e01c      	b.n	80004d2 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8a>
		}
	}

	else{
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){	// set the output to 0 in CPU overload condition
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	e012      	b.n	80004c4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7c>
			audio_output_buffer[2*i+ (BUFFER_SIZE_SAMPLES * NUMBER_OF_OUTPUT_CHANNELS)] = 0;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4a18      	ldr	r2, [pc, #96]	@ (8000508 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc0>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audio_output_buffer[2*i + 1+ (BUFFER_SIZE_SAMPLES * NUMBER_OF_OUTPUT_CHANNELS)] = 0;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	f603 0301 	addw	r3, r3, #2049	@ 0x801
 80004b6:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc0>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){	// set the output to 0 in CPU overload condition
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80004ca:	d3e8      	bcc.n	800049e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x56>
		}
		audio_buffer_a_timeout = 1;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xb8>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
	}

	if(watchdog_counter > 1){
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d905      	bls.n	80004e6 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9e>
		watchdog_counter--;
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc8>)
 80004e2:	6013      	str	r3, [r2, #0]

	else{
		audio_buffer_a_timeout = 1;
		audio_buffer_b_timeout = 1;
	}
}
 80004e4:	e005      	b.n	80004f2 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xaa>
		audio_buffer_a_timeout = 1;
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xb8>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
		audio_buffer_b_timeout = 1;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xcc>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000004 	.word	0x20000004
 8000504:	2000d014 	.word	0x2000d014
 8000508:	2000500c 	.word	0x2000500c
 800050c:	2000e014 	.word	0x2000e014
 8000510:	20000000 	.word	0x20000000
 8000514:	20000008 	.word	0x20000008

08000518 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
#if BUFFER_SIZE_SAMPLES == 1
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
#else
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
#endif
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	uint16_t i;

	if(audio_buffer_b_timeout == 0){	// check if the new output data block for the DMA is ready
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d11d      	bne.n	8000562 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x4a>
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8000526:	2300      	movs	r3, #0
 8000528:	80fb      	strh	r3, [r7, #6]
 800052a:	e015      	b.n	8000558 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x40>
			audio_output_buffer[2*i] = audio_output_buffer_B_CH1[i];
 800052c:	88fa      	ldrh	r2, [r7, #6]
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	491d      	ldr	r1, [pc, #116]	@ (80005a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x90>)
 8000534:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000538:	491c      	ldr	r1, [pc, #112]	@ (80005ac <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x94>)
 800053a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			audio_output_buffer[2*i + 1] = audio_output_buffer_B_CH2[i];
 800053e:	88fa      	ldrh	r2, [r7, #6]
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	3301      	adds	r3, #1
 8000546:	491a      	ldr	r1, [pc, #104]	@ (80005b0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x98>)
 8000548:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800054c:	4917      	ldr	r1, [pc, #92]	@ (80005ac <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x94>)
 800054e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	3301      	adds	r3, #1
 8000556:	80fb      	strh	r3, [r7, #6]
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800055e:	d3e5      	bcc.n	800052c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
			audio_output_buffer[2*i] = 0;
			audio_output_buffer[2*i + 1] = 0;
		}
		audio_buffer_b_timeout = 1;
	}
}
 8000560:	e019      	b.n	8000596 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x7e>
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){ 	// set the output to 0 if the CPU was to slow to compute new data
 8000562:	2300      	movs	r3, #0
 8000564:	80fb      	strh	r3, [r7, #6]
 8000566:	e00f      	b.n	8000588 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x70>
			audio_output_buffer[2*i] = 0;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x94>)
 800056e:	2100      	movs	r1, #0
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audio_output_buffer[2*i + 1] = 0;
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	3301      	adds	r3, #1
 800057a:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x94>)
 800057c:	2100      	movs	r1, #0
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){ 	// set the output to 0 if the CPU was to slow to compute new data
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	3301      	adds	r3, #1
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800058e:	d3eb      	bcc.n	8000568 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x50>
		audio_buffer_b_timeout = 1;
 8000590:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8c>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000008 	.word	0x20000008
 80005a8:	2000f014 	.word	0x2000f014
 80005ac:	2000500c 	.word	0x2000500c
 80005b0:	20010014 	.word	0x20010014

080005b4 <BSP_AUDIO_IN_TransferComplete_CallBack>:

 	New data from the audio coded has been received -> process them
*/
/***********************************************************************************/
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint16_t i;

	if(audio_buffer_b_timeout == 1){	// stop the processing if the CPU is overloaded
 80005ba:	4b78      	ldr	r3, [pc, #480]	@ (800079c <BSP_AUDIO_IN_TransferComplete_CallBack+0x1e8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 80e8 	beq.w	8000794 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1e0>
		return;
	}

	if(newPlotDataReady == 0){
 80005c4:	4b76      	ldr	r3, [pc, #472]	@ (80007a0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1ec>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d150      	bne.n	800066e <BSP_AUDIO_IN_TransferComplete_CallBack+0xba>
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 80005cc:	2300      	movs	r3, #0
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	e048      	b.n	8000664 <BSP_AUDIO_IN_TransferComplete_CallBack+0xb0>

			audio_processing_buffer_B_CH1[i] = audio_input_buffer[2*i + (AUDIO_INPUT_BUFFER_SIZE * NUMBER_OF_INPUT_CHANNELS)];
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80005d8:	005a      	lsls	r2, r3, #1
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4971      	ldr	r1, [pc, #452]	@ (80007a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f0>)
 80005de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005e2:	4971      	ldr	r1, [pc, #452]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 80005e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_B_CH1[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	4a6f      	ldr	r2, [pc, #444]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00a      	beq.n	800060e <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
				audio_processing_buffer_B_CH1[i] = (audio_processing_buffer_B_CH1[i] | 0xff000000);
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4a6b      	ldr	r2, [pc, #428]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4611      	mov	r1, r2
 8000608:	4a67      	ldr	r2, [pc, #412]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 800060a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			audio_processing_buffer_B_CH2[i] = audio_input_buffer[2*i + 1 + (AUDIO_INPUT_BUFFER_SIZE * NUMBER_OF_INPUT_CHANNELS)];
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	f603 0201 	addw	r2, r3, #2049	@ 0x801
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	4962      	ldr	r1, [pc, #392]	@ (80007a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f0>)
 800061a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800061e:	4963      	ldr	r1, [pc, #396]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_B_CH2[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4a61      	ldr	r2, [pc, #388]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00a      	beq.n	800064a <BSP_AUDIO_IN_TransferComplete_CallBack+0x96>
				audio_processing_buffer_B_CH2[i] = (audio_processing_buffer_B_CH2[i] | 0xff000000);
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	4a5d      	ldr	r2, [pc, #372]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	4611      	mov	r1, r2
 8000644:	4a59      	ldr	r2, [pc, #356]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000646:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			if(plotInputBufferIndex < PLOT_IO_DATA_BUFFER){	// copy data to plot on screen
 800064a:	4b59      	ldr	r3, [pc, #356]	@ (80007b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1fc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000652:	d204      	bcs.n	800065e <BSP_AUDIO_IN_TransferComplete_CallBack+0xaa>
				plotInputBufferIndex++;
 8000654:	4b56      	ldr	r3, [pc, #344]	@ (80007b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1fc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a55      	ldr	r2, [pc, #340]	@ (80007b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1fc>)
 800065c:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	3301      	adds	r3, #1
 8000662:	80fb      	strh	r3, [r7, #6]
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800066a:	d3b2      	bcc.n	80005d2 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1e>
 800066c:	e045      	b.n	80006fa <BSP_AUDIO_IN_TransferComplete_CallBack+0x146>
			}
		}

	}
	else{
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 800066e:	2300      	movs	r3, #0
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	e03e      	b.n	80006f2 <BSP_AUDIO_IN_TransferComplete_CallBack+0x13e>

			audio_processing_buffer_B_CH1[i] = audio_input_buffer[2*i + (AUDIO_INPUT_BUFFER_SIZE * NUMBER_OF_INPUT_CHANNELS)];
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800067a:	005a      	lsls	r2, r3, #1
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4949      	ldr	r1, [pc, #292]	@ (80007a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f0>)
 8000680:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000684:	4948      	ldr	r1, [pc, #288]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_B_CH1[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	4a46      	ldr	r2, [pc, #280]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00a      	beq.n	80006b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>
				audio_processing_buffer_B_CH1[i] = (audio_processing_buffer_B_CH1[i] | 0xff000000);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4a42      	ldr	r2, [pc, #264]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a3f      	ldr	r2, [pc, #252]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			audio_processing_buffer_B_CH2[i] = audio_input_buffer[2*i + 1 + (AUDIO_INPUT_BUFFER_SIZE * NUMBER_OF_INPUT_CHANNELS)];
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	f603 0201 	addw	r2, r3, #2049	@ 0x801
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	493a      	ldr	r1, [pc, #232]	@ (80007a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f0>)
 80006bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006c0:	493a      	ldr	r1, [pc, #232]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_B_CH2[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a38      	ldr	r2, [pc, #224]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00a      	beq.n	80006ec <BSP_AUDIO_IN_TransferComplete_CallBack+0x138>
				audio_processing_buffer_B_CH2[i] = (audio_processing_buffer_B_CH2[i] | 0xff000000);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	4a34      	ldr	r2, [pc, #208]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 80006da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006de:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a31      	ldr	r2, [pc, #196]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 80006e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	3301      	adds	r3, #1
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006f8:	d3bc      	bcc.n	8000674 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc0>
			}
		}
	}

	if(menue_page == PAGE4){	// waveform generator
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x200>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d104      	bne.n	800070c <BSP_AUDIO_IN_TransferComplete_CallBack+0x158>
		waveform_generator((int32_t *)&audio_output_buffer_B_CH1[0], (int32_t *)&audio_output_buffer_B_CH2[0]);
 8000702:	492d      	ldr	r1, [pc, #180]	@ (80007b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x204>)
 8000704:	482d      	ldr	r0, [pc, #180]	@ (80007bc <BSP_AUDIO_IN_TransferComplete_CallBack+0x208>)
 8000706:	f003 fa47 	bl	8003b98 <waveform_generator>
 800070a:	e005      	b.n	8000718 <BSP_AUDIO_IN_TransferComplete_CallBack+0x164>
	}

	else{
		// let the student process the audio data
		audio_signal_processing((int32_t *)&audio_processing_buffer_B_CH1[0], (int32_t *)&audio_processing_buffer_B_CH2[0], (int32_t *)&audio_output_buffer_B_CH1[0], (int32_t *)&audio_output_buffer_B_CH2[0]);
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x204>)
 800070e:	4a2b      	ldr	r2, [pc, #172]	@ (80007bc <BSP_AUDIO_IN_TransferComplete_CallBack+0x208>)
 8000710:	4926      	ldr	r1, [pc, #152]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000712:	4825      	ldr	r0, [pc, #148]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 8000714:	f002 ff8e 	bl	8003634 <audio_signal_processing>
	}

	// save the data to plot it later if needed
	i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	80fb      	strh	r3, [r7, #6]
	while(plotOutputBufferIndex < plotInputBufferIndex){ // copy data to plot on screen
 800071c:	e02b      	b.n	8000776 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1c2>
		plotBufferCH1_in[plotOutputBufferIndex] = audio_processing_buffer_B_CH1[i];
 800071e:	88fa      	ldrh	r2, [r7, #6]
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4920      	ldr	r1, [pc, #128]	@ (80007a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f4>)
 8000726:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800072a:	4926      	ldr	r1, [pc, #152]	@ (80007c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x210>)
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH2_in[plotOutputBufferIndex] = audio_processing_buffer_B_CH2[i];
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	491d      	ldr	r1, [pc, #116]	@ (80007ac <BSP_AUDIO_IN_TransferComplete_CallBack+0x1f8>)
 8000738:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800073c:	4922      	ldr	r1, [pc, #136]	@ (80007c8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x214>)
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH1_out[plotOutputBufferIndex] = audio_output_buffer_B_CH1[i];
 8000742:	88fa      	ldrh	r2, [r7, #6]
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	491c      	ldr	r1, [pc, #112]	@ (80007bc <BSP_AUDIO_IN_TransferComplete_CallBack+0x208>)
 800074a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800074e:	491f      	ldr	r1, [pc, #124]	@ (80007cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x218>)
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH2_out[plotOutputBufferIndex] = audio_output_buffer_B_CH2[i];
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4917      	ldr	r1, [pc, #92]	@ (80007b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x204>)
 800075c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000760:	491b      	ldr	r1, [pc, #108]	@ (80007d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x21c>)
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		plotOutputBufferIndex++;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 800076e:	6013      	str	r3, [r2, #0]
		i++;
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	3301      	adds	r3, #1
 8000774:	80fb      	strh	r3, [r7, #6]
	while(plotOutputBufferIndex < plotInputBufferIndex){ // copy data to plot on screen
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20c>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1fc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d3cd      	bcc.n	800071e <BSP_AUDIO_IN_TransferComplete_CallBack+0x16a>
	}

	if(plotInputBufferIndex >= PLOT_IO_DATA_BUFFER){
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1fc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800078a:	d304      	bcc.n	8000796 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1e2>
		newPlotDataReady = 1;
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1ec>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e000      	b.n	8000796 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1e2>
		return;
 8000794:	bf00      	nop
	}
}
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000008 	.word	0x20000008
 80007a0:	2001102c 	.word	0x2001102c
 80007a4:	2000100c 	.word	0x2000100c
 80007a8:	2000b014 	.word	0x2000b014
 80007ac:	2000c014 	.word	0x2000c014
 80007b0:	2000900c 	.word	0x2000900c
 80007b4:	20011014 	.word	0x20011014
 80007b8:	20010014 	.word	0x20010014
 80007bc:	2000f014 	.word	0x2000f014
 80007c0:	20009010 	.word	0x20009010
 80007c4:	2002071c 	.word	0x2002071c
 80007c8:	20024744 	.word	0x20024744
 80007cc:	2002876c 	.word	0x2002876c
 80007d0:	2002c794 	.word	0x2002c794

080007d4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

 	New data from the audio coded has been received -> process them
*/
/***********************************************************************************/
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint16_t i;

	if(audio_buffer_a_timeout == 1){	// stop the processing if the CPU is overloaded
 80007da:	4b7d      	ldr	r3, [pc, #500]	@ (80009d0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1fc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	f000 80f2 	beq.w	80009c8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1f4>
		return;
	}

	if(fetchNewPlotDataNow == 1){
 80007e4:	4b7b      	ldr	r3, [pc, #492]	@ (80009d4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x200>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d10b      	bne.n	8000804 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>
		fetchNewPlotDataNow = 0;
 80007ec:	4b79      	ldr	r3, [pc, #484]	@ (80009d4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x200>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
		plotInputBufferIndex = 0;
 80007f2:	4b79      	ldr	r3, [pc, #484]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
		plotOutputBufferIndex = 0;
 80007f8:	4b78      	ldr	r3, [pc, #480]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		newPlotDataReady = 0;
 80007fe:	4b78      	ldr	r3, [pc, #480]	@ (80009e0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20c>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	}

	if(newPlotDataReady == 0){
 8000804:	4b76      	ldr	r3, [pc, #472]	@ (80009e0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d14d      	bne.n	80008a8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xd4>
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 800080c:	2300      	movs	r3, #0
 800080e:	80fb      	strh	r3, [r7, #6]
 8000810:	e045      	b.n	800089e <BSP_AUDIO_IN_HalfTransfer_CallBack+0xca>

			audio_processing_buffer_A_CH1[i] = audio_input_buffer[2*i];
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	005a      	lsls	r2, r3, #1
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	4972      	ldr	r1, [pc, #456]	@ (80009e4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x210>)
 800081a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800081e:	4972      	ldr	r1, [pc, #456]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 8000820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_A_CH1[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	4a70      	ldr	r2, [pc, #448]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x76>
				audio_processing_buffer_A_CH1[i] = (audio_processing_buffer_A_CH1[i] | 0xff000000);
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	4a6c      	ldr	r2, [pc, #432]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 8000838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	4611      	mov	r1, r2
 8000844:	4a68      	ldr	r2, [pc, #416]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 8000846:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			audio_processing_buffer_A_CH2[i] = audio_input_buffer[2*i + 1];
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	4964      	ldr	r1, [pc, #400]	@ (80009e4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x210>)
 8000854:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000858:	4964      	ldr	r1, [pc, #400]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_A_CH2[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4a62      	ldr	r2, [pc, #392]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 8000862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00a      	beq.n	8000884 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xb0>
				audio_processing_buffer_A_CH2[i] = (audio_processing_buffer_A_CH2[i] | 0xff000000);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	4a5e      	ldr	r2, [pc, #376]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	4611      	mov	r1, r2
 800087e:	4a5b      	ldr	r2, [pc, #364]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 8000880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			if(plotInputBufferIndex < PLOT_IO_DATA_BUFFER){	// copy data to plot on screen
 8000884:	4b54      	ldr	r3, [pc, #336]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800088c:	d204      	bcs.n	8000898 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc4>
				plotInputBufferIndex++;
 800088e:	4b52      	ldr	r3, [pc, #328]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a50      	ldr	r2, [pc, #320]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 8000896:	6013      	str	r3, [r2, #0]
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	3301      	adds	r3, #1
 800089c:	80fb      	strh	r3, [r7, #6]
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008a4:	d3b5      	bcc.n	8000812 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x3e>
 80008a6:	e042      	b.n	800092e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x15a>
			}
		}
	}

	else{
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 80008a8:	2300      	movs	r3, #0
 80008aa:	80fb      	strh	r3, [r7, #6]
 80008ac:	e03b      	b.n	8000926 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x152>


			audio_processing_buffer_A_CH1[i] = audio_input_buffer[2*i];
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	005a      	lsls	r2, r3, #1
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	494b      	ldr	r1, [pc, #300]	@ (80009e4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x210>)
 80008b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ba:	494b      	ldr	r1, [pc, #300]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 80008bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_A_CH1[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	4a49      	ldr	r2, [pc, #292]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00a      	beq.n	80008e6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x112>
				audio_processing_buffer_A_CH1[i] = (audio_processing_buffer_A_CH1[i] | 0xff000000);
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4a45      	ldr	r2, [pc, #276]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	4611      	mov	r1, r2
 80008e0:	4a41      	ldr	r2, [pc, #260]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 80008e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			audio_processing_buffer_A_CH2[i] = audio_input_buffer[2*i + 1];
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	493d      	ldr	r1, [pc, #244]	@ (80009e4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x210>)
 80008f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008f4:	493d      	ldr	r1, [pc, #244]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(audio_processing_buffer_A_CH2[i] & 0x00800000){	// sign extension from 24 bit to 32 bit
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00a      	beq.n	8000920 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14c>
				audio_processing_buffer_A_CH2[i] = (audio_processing_buffer_A_CH2[i] | 0xff000000);
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4a37      	ldr	r2, [pc, #220]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	4611      	mov	r1, r2
 800091a:	4a34      	ldr	r2, [pc, #208]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 800091c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < (AUDIO_INPUT_BUFFER_SIZE); i++){	// copy the input data to the processing buffer
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	3301      	adds	r3, #1
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800092c:	d3bf      	bcc.n	80008ae <BSP_AUDIO_IN_HalfTransfer_CallBack+0xda>
			}
		}
	}

	if(menue_page == PAGE4){	// waveform generator
 800092e:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x21c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d104      	bne.n	8000940 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x16c>
		waveform_generator((int32_t *)&audio_output_buffer_A_CH1[0], (int32_t *)&audio_output_buffer_A_CH2[0]);
 8000936:	492f      	ldr	r1, [pc, #188]	@ (80009f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x220>)
 8000938:	482f      	ldr	r0, [pc, #188]	@ (80009f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x224>)
 800093a:	f003 f92d 	bl	8003b98 <waveform_generator>
 800093e:	e005      	b.n	800094c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x178>
	}

	else{
		// let the student process the audio data
		audio_signal_processing((int32_t *)&audio_processing_buffer_A_CH1[0], (int32_t *)&audio_processing_buffer_A_CH2[0], (int32_t *)&audio_output_buffer_A_CH1[0], (int32_t *)&audio_output_buffer_A_CH2[0]);
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x220>)
 8000942:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x224>)
 8000944:	4929      	ldr	r1, [pc, #164]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 8000946:	4828      	ldr	r0, [pc, #160]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 8000948:	f002 fe74 	bl	8003634 <audio_signal_processing>
	}

	// save the data to plot it later if needed
	i = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	80fb      	strh	r3, [r7, #6]
	while(plotOutputBufferIndex < plotInputBufferIndex){ // copy data to plot on screen
 8000950:	e02b      	b.n	80009aa <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1d6>

		plotBufferCH1_in[plotOutputBufferIndex] = audio_processing_buffer_A_CH1[i];
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4923      	ldr	r1, [pc, #140]	@ (80009e8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x214>)
 800095a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800095e:	4927      	ldr	r1, [pc, #156]	@ (80009fc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x228>)
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH2_in[plotOutputBufferIndex] = audio_processing_buffer_A_CH2[i];
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4920      	ldr	r1, [pc, #128]	@ (80009ec <BSP_AUDIO_IN_HalfTransfer_CallBack+0x218>)
 800096c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000970:	4923      	ldr	r1, [pc, #140]	@ (8000a00 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x22c>)
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH1_out[plotOutputBufferIndex] = audio_output_buffer_A_CH1[i];
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	491e      	ldr	r1, [pc, #120]	@ (80009f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x224>)
 800097e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000982:	4920      	ldr	r1, [pc, #128]	@ (8000a04 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x230>)
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		plotBufferCH2_out[plotOutputBufferIndex] = audio_output_buffer_A_CH2[i];
 8000988:	88fa      	ldrh	r2, [r7, #6]
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4919      	ldr	r1, [pc, #100]	@ (80009f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x220>)
 8000990:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000994:	491c      	ldr	r1, [pc, #112]	@ (8000a08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x234>)
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		plotOutputBufferIndex++;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 80009a2:	6013      	str	r3, [r2, #0]
		i++;
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	3301      	adds	r3, #1
 80009a8:	80fb      	strh	r3, [r7, #6]
	while(plotOutputBufferIndex < plotInputBufferIndex){ // copy data to plot on screen
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x208>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3cd      	bcc.n	8000952 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x17e>
	}

	if(plotInputBufferIndex >= PLOT_IO_DATA_BUFFER){
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x204>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009be:	d304      	bcc.n	80009ca <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1f6>
		newPlotDataReady = 1;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e000      	b.n	80009ca <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1f6>
		return;
 80009c8:	bf00      	nop
	}
}
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000004 	.word	0x20000004
 80009d4:	20011028 	.word	0x20011028
 80009d8:	2000900c 	.word	0x2000900c
 80009dc:	20009010 	.word	0x20009010
 80009e0:	2001102c 	.word	0x2001102c
 80009e4:	2000100c 	.word	0x2000100c
 80009e8:	20009014 	.word	0x20009014
 80009ec:	2000a014 	.word	0x2000a014
 80009f0:	20011014 	.word	0x20011014
 80009f4:	2000e014 	.word	0x2000e014
 80009f8:	2000d014 	.word	0x2000d014
 80009fc:	2002071c 	.word	0x2002071c
 8000a00:	20024744 	.word	0x20024744
 8000a04:	2002876c 	.word	0x2002876c
 8000a08:	2002c794 	.word	0x2002c794

08000a0c <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <SCB_CleanInvalidateDCache+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1a:	f3bf 8f4f 	dsb	sy
}
 8000a1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <SCB_CleanInvalidateDCache+0x74>)
 8000a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a26:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	0b5b      	lsrs	r3, r3, #13
 8000a2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	015a      	lsls	r2, r3, #5
 8000a40:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a44:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <SCB_CleanInvalidateDCache+0x74>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1ef      	bne.n	8000a3c <SCB_CleanInvalidateDCache+0x30>
    } while(sets--);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	60fa      	str	r2, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1e5      	bne.n	8000a32 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a66:	f3bf 8f4f 	dsb	sy
}
 8000a6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6c:	f3bf 8f6f 	isb	sy
}
 8000a70:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <initGUI>:
	initGUI

 	Initialize the GUI module.
*/
/***********************************************************************************/
void initGUI(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	// initialize the FFT module
	arm_rfft_fast_init_f32(&rFFT_plot_inst, FREQ_PLOT_FFT_SIZE);
 8000a88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <initGUI+0x3c>)
 8000a8e:	f011 fb61 	bl	8012154 <arm_rfft_fast_init_f32>

	// initialize the LCD
	BSP_LCD_Init();
 8000a92:	f00f f9b2 	bl	800fdfa <BSP_LCD_Init>

	// LCD Layer Initialization
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000a96:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f00f fb4a 	bl	8010134 <BSP_LCD_LayerDefaultInit>

	// Select the LCD Layer
	BSP_LCD_SelectLayer(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f00f fba7 	bl	80101f4 <BSP_LCD_SelectLayer>

	// Enable the display
	BSP_LCD_DisplayOn();
 8000aa6:	f00f fe65 	bl	8010774 <BSP_LCD_DisplayOn>

	// clear the screen
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000aaa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000aae:	f00f fbfd 	bl	80102ac <BSP_LCD_Clear>

	// draw the title
	drawTitle();
 8000ab2:	f002 f989 	bl	8002dc8 <drawTitle>

	// draw the first page
	initPage1();
 8000ab6:	f000 f805 	bl	8000ac4 <initPage1>


}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200307c8 	.word	0x200307c8

08000ac4 <initPage1>:
	initPageX

 	Draw the entire GUI of the according page onto the screen.
*/
/***********************************************************************************/
void initPage1(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	@ 0x68
 8000ac8:	af00      	add	r7, sp, #0
	char string_buffer[100];

	wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 8000aca:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <initPage1+0xdc>)
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad4:	2034      	movs	r0, #52	@ 0x34
 8000ad6:	f005 fcdf 	bl	8006498 <wm8994_SetOutputVolume_dB>

	// init the screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ada:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000ade:	f00f fb99 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000ae2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000ae6:	f00f fbad 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(0, 72, 800, 408);
 8000aea:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 8000aee:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000af2:	2148      	movs	r1, #72	@ 0x48
 8000af4:	2000      	movs	r0, #0
 8000af6:	f00f fde3 	bl	80106c0 <BSP_LCD_FillRect>

	// draw the lower button row
	drawButtonRow();
 8000afa:	f002 fb05 	bl	8003108 <drawButtonRow>

	// draw the volume buttons
	BSP_LCD_SetFont(&Font24);
 8000afe:	4829      	ldr	r0, [pc, #164]	@ (8000ba4 <initPage1+0xe0>)
 8000b00:	f00f fbba 	bl	8010278 <BSP_LCD_SetFont>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000b04:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000b08:	f00f fb84 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(690, 104, 100, 100);
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	2264      	movs	r2, #100	@ 0x64
 8000b10:	2168      	movs	r1, #104	@ 0x68
 8000b12:	f240 20b2 	movw	r0, #690	@ 0x2b2
 8000b16:	f00f fdd3 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(690, 237, 100, 100);
 8000b1a:	2364      	movs	r3, #100	@ 0x64
 8000b1c:	2264      	movs	r2, #100	@ 0x64
 8000b1e:	21ed      	movs	r1, #237	@ 0xed
 8000b20:	f240 20b2 	movw	r0, #690	@ 0x2b2
 8000b24:	f00f fdcc 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b28:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000b2c:	f00f fb72 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(700, 114, 80, 80);
 8000b30:	2350      	movs	r3, #80	@ 0x50
 8000b32:	2250      	movs	r2, #80	@ 0x50
 8000b34:	2172      	movs	r1, #114	@ 0x72
 8000b36:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000b3a:	f00f fdc1 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(700, 247, 80, 80);
 8000b3e:	2350      	movs	r3, #80	@ 0x50
 8000b40:	2250      	movs	r2, #80	@ 0x50
 8000b42:	21f7      	movs	r1, #247	@ 0xf7
 8000b44:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000b48:	f00f fdba 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000b4c:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000b50:	f00f fb60 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000b54:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000b58:	f00f fb74 	bl	8010244 <BSP_LCD_SetBackColor>
	snprintf(string_buffer,2, "+");
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <initPage1+0xe4>)
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f013 fa06 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(732, 141, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000b68:	1d3a      	adds	r2, r7, #4
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	218d      	movs	r1, #141	@ 0x8d
 8000b6e:	f44f 7037 	mov.w	r0, #732	@ 0x2dc
 8000b72:	f00f fc07 	bl	8010384 <BSP_LCD_DisplayStringAt>
	snprintf(string_buffer,2, "-");
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <initPage1+0xe8>)
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f013 f9f9 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(732, 274, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000b82:	1d3a      	adds	r2, r7, #4
 8000b84:	2303      	movs	r3, #3
 8000b86:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8000b8a:	f44f 7037 	mov.w	r0, #732	@ 0x2dc
 8000b8e:	f00f fbf9 	bl	8010384 <BSP_LCD_DisplayStringAt>

	updatePage1();
 8000b92:	f000 ff29 	bl	80019e8 <updatePage1>
}
 8000b96:	bf00      	nop
 8000b98:	3768      	adds	r7, #104	@ 0x68
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20020718 	.word	0x20020718
 8000ba4:	20020690 	.word	0x20020690
 8000ba8:	0801a7d0 	.word	0x0801a7d0
 8000bac:	0801a7d4 	.word	0x0801a7d4

08000bb0 <initPage2>:
/************************************************************************************/

/************************************************************************************/
void initPage2(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <initPage2+0x1c>)
 8000bb6:	edd3 7a00 	vldr	s15, [r3]
 8000bba:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbe:	2034      	movs	r0, #52	@ 0x34
 8000bc0:	f005 fc6a 	bl	8006498 <wm8994_SetOutputVolume_dB>

	updatePage2();
 8000bc4:	f001 fb9e 	bl	8002304 <updatePage2>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020718 	.word	0x20020718

08000bd0 <initPage3>:
/************************************************************************************/

/************************************************************************************/
void initPage3(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <initPage3+0x1c>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	eeb0 0a67 	vmov.f32	s0, s15
 8000bde:	2034      	movs	r0, #52	@ 0x34
 8000be0:	f005 fc5a 	bl	8006498 <wm8994_SetOutputVolume_dB>

	updatePage3();
 8000be4:	f001 fd3c 	bl	8002660 <updatePage3>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020718 	.word	0x20020718

08000bf0 <initPage4>:
/************************************************************************************/

/************************************************************************************/
void initPage4(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, wav_gen_output_volume_dB);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <initPage4+0x1c>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfe:	2034      	movs	r0, #52	@ 0x34
 8000c00:	f005 fc4a 	bl	8006498 <wm8994_SetOutputVolume_dB>
	updatePage4();
 8000c04:	f002 f8ce 	bl	8002da4 <updatePage4>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20020000 	.word	0x20020000

08000c10 <initPage5>:
/************************************************************************************/

/************************************************************************************/
void initPage5(void){
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	ed2d 8b02 	vpush	{d8}
 8000c16:	b0a0      	sub	sp, #128	@ 0x80
 8000c18:	af04      	add	r7, sp, #16
	char string_buffer[100];
	uint16_t line = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	float vol_vpp;
	float vol_rms;

	wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 8000c20:	4bd7      	ldr	r3, [pc, #860]	@ (8000f80 <initPage5+0x370>)
 8000c22:	edd3 7a00 	vldr	s15, [r3]
 8000c26:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2a:	2034      	movs	r0, #52	@ 0x34
 8000c2c:	f005 fc34 	bl	8006498 <wm8994_SetOutputVolume_dB>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c30:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c34:	f00f faee 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 72, 800, 408);
 8000c38:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 8000c3c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000c40:	2148      	movs	r1, #72	@ 0x48
 8000c42:	2000      	movs	r0, #0
 8000c44:	f00f fd3c 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000c48:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000c4c:	f00f fafa 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f00f fade 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_5);
 8000c58:	48ca      	ldr	r0, [pc, #808]	@ (8000f84 <initPage5+0x374>)
 8000c5a:	f00f fb0d 	bl	8010278 <BSP_LCD_SetFont>

	snprintf(string_buffer,100, "Evalboard: 32F769I Discovery");
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4ac9      	ldr	r2, [pc, #804]	@ (8000f88 <initPage5+0x378>)
 8000c62:	2164      	movs	r1, #100	@ 0x64
 8000c64:	4618      	mov	r0, r3
 8000c66:	f013 f985 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000c6a:	4bc6      	ldr	r3, [pc, #792]	@ (8000f84 <initPage5+0x374>)
 8000c6c:	88db      	ldrh	r3, [r3, #6]
 8000c6e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000c72:	fb12 f303 	smulbb	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3360      	adds	r3, #96	@ 0x60
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	463a      	mov	r2, r7
 8000c7e:	2303      	movs	r3, #3
 8000c80:	200a      	movs	r0, #10
 8000c82:	f00f fb7f 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "MCU: STM32F769NIH6");
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4abf      	ldr	r2, [pc, #764]	@ (8000f8c <initPage5+0x37c>)
 8000c90:	2164      	movs	r1, #100	@ 0x64
 8000c92:	4618      	mov	r0, r3
 8000c94:	f013 f96e 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000c98:	4bba      	ldr	r3, [pc, #744]	@ (8000f84 <initPage5+0x374>)
 8000c9a:	88db      	ldrh	r3, [r3, #6]
 8000c9c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000ca0:	fb12 f303 	smulbb	r3, r2, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	3360      	adds	r3, #96	@ 0x60
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	463a      	mov	r2, r7
 8000cac:	2303      	movs	r3, #3
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f00f fb68 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000cb4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "CPU: Cortex-M7 @ 200 MHz");
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4ab3      	ldr	r2, [pc, #716]	@ (8000f90 <initPage5+0x380>)
 8000cc2:	2164      	movs	r1, #100	@ 0x64
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f013 f955 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000cca:	4bae      	ldr	r3, [pc, #696]	@ (8000f84 <initPage5+0x374>)
 8000ccc:	88db      	ldrh	r3, [r3, #6]
 8000cce:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000cd2:	fb12 f303 	smulbb	r3, r2, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3360      	adds	r3, #96	@ 0x60
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	463a      	mov	r2, r7
 8000cde:	2303      	movs	r3, #3
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f00f fb4f 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000ce6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Flash: 2 MByte");
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4aa8      	ldr	r2, [pc, #672]	@ (8000f94 <initPage5+0x384>)
 8000cf4:	2164      	movs	r1, #100	@ 0x64
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f013 f93c 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000cfc:	4ba1      	ldr	r3, [pc, #644]	@ (8000f84 <initPage5+0x374>)
 8000cfe:	88db      	ldrh	r3, [r3, #6]
 8000d00:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d04:	fb12 f303 	smulbb	r3, r2, r3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	3360      	adds	r3, #96	@ 0x60
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	463a      	mov	r2, r7
 8000d10:	2303      	movs	r3, #3
 8000d12:	200a      	movs	r0, #10
 8000d14:	f00f fb36 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000d18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "RAM: 368 kByte SRAM + 128 kByte TCM");
 8000d22:	463b      	mov	r3, r7
 8000d24:	4a9c      	ldr	r2, [pc, #624]	@ (8000f98 <initPage5+0x388>)
 8000d26:	2164      	movs	r1, #100	@ 0x64
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f013 f923 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000d2e:	4b95      	ldr	r3, [pc, #596]	@ (8000f84 <initPage5+0x374>)
 8000d30:	88db      	ldrh	r3, [r3, #6]
 8000d32:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d36:	fb12 f303 	smulbb	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3360      	adds	r3, #96	@ 0x60
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	463a      	mov	r2, r7
 8000d42:	2303      	movs	r3, #3
 8000d44:	200a      	movs	r0, #10
 8000d46:	f00f fb1d 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000d4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Display: 800x480 Pixel");
 8000d54:	463b      	mov	r3, r7
 8000d56:	4a91      	ldr	r2, [pc, #580]	@ (8000f9c <initPage5+0x38c>)
 8000d58:	2164      	movs	r1, #100	@ 0x64
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f013 f90a 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000d60:	4b88      	ldr	r3, [pc, #544]	@ (8000f84 <initPage5+0x374>)
 8000d62:	88db      	ldrh	r3, [r3, #6]
 8000d64:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d68:	fb12 f303 	smulbb	r3, r2, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3360      	adds	r3, #96	@ 0x60
 8000d70:	b299      	uxth	r1, r3
 8000d72:	463a      	mov	r2, r7
 8000d74:	2303      	movs	r3, #3
 8000d76:	200a      	movs	r0, #10
 8000d78:	f00f fb04 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000d7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000d80:	3301      	adds	r3, #1
 8000d82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Codec: Cirrus Logic WM8994, 24 Bit, 2x ADC + 4x DAC");
 8000d86:	463b      	mov	r3, r7
 8000d88:	4a85      	ldr	r2, [pc, #532]	@ (8000fa0 <initPage5+0x390>)
 8000d8a:	2164      	movs	r1, #100	@ 0x64
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f013 f8f1 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000d92:	4b7c      	ldr	r3, [pc, #496]	@ (8000f84 <initPage5+0x374>)
 8000d94:	88db      	ldrh	r3, [r3, #6]
 8000d96:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d9a:	fb12 f303 	smulbb	r3, r2, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3360      	adds	r3, #96	@ 0x60
 8000da2:	b299      	uxth	r1, r3
 8000da4:	463a      	mov	r2, r7
 8000da6:	2303      	movs	r3, #3
 8000da8:	200a      	movs	r0, #10
 8000daa:	f00f faeb 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line = line +2;
 8000dae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000db2:	3302      	adds	r3, #2
 8000db4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e


	snprintf(string_buffer,100, "Abtastrate: %lu Hz", CODEC_SAMPLING_FREQUENCY);
 8000db8:	4638      	mov	r0, r7
 8000dba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000dbe:	4a79      	ldr	r2, [pc, #484]	@ (8000fa4 <initPage5+0x394>)
 8000dc0:	2164      	movs	r1, #100	@ 0x64
 8000dc2:	f013 f8d7 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <initPage5+0x374>)
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000dce:	fb12 f303 	smulbb	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3360      	adds	r3, #96	@ 0x60
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	463a      	mov	r2, r7
 8000dda:	2303      	movs	r3, #3
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f00f fad1 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line ++;
 8000de2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000de6:	3301      	adds	r3, #1
 8000de8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Blockgroesse: %i Abtastwerte pro Kanal", BUFFER_SIZE_SAMPLES);
 8000dec:	4638      	mov	r0, r7
 8000dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df2:	4a6d      	ldr	r2, [pc, #436]	@ (8000fa8 <initPage5+0x398>)
 8000df4:	2164      	movs	r1, #100	@ 0x64
 8000df6:	f013 f8bd 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000dfa:	4b62      	ldr	r3, [pc, #392]	@ (8000f84 <initPage5+0x374>)
 8000dfc:	88db      	ldrh	r3, [r3, #6]
 8000dfe:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000e02:	fb12 f303 	smulbb	r3, r2, r3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3360      	adds	r3, #96	@ 0x60
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	463a      	mov	r2, r7
 8000e0e:	2303      	movs	r3, #3
 8000e10:	200a      	movs	r0, #10
 8000e12:	f00f fab7 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Eingang: Stereo Line In (analog)");
 8000e20:	463b      	mov	r3, r7
 8000e22:	4a62      	ldr	r2, [pc, #392]	@ (8000fac <initPage5+0x39c>)
 8000e24:	2164      	movs	r1, #100	@ 0x64
 8000e26:	4618      	mov	r0, r3
 8000e28:	f013 f8a4 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000e2c:	4b55      	ldr	r3, [pc, #340]	@ (8000f84 <initPage5+0x374>)
 8000e2e:	88db      	ldrh	r3, [r3, #6]
 8000e30:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000e34:	fb12 f303 	smulbb	r3, r2, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3360      	adds	r3, #96	@ 0x60
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	463a      	mov	r2, r7
 8000e40:	2303      	movs	r3, #3
 8000e42:	200a      	movs	r0, #10
 8000e44:	f00f fa9e 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000e48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Ausgang: Stereo Line Out (analog)");
 8000e52:	463b      	mov	r3, r7
 8000e54:	4a56      	ldr	r2, [pc, #344]	@ (8000fb0 <initPage5+0x3a0>)
 8000e56:	2164      	movs	r1, #100	@ 0x64
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f013 f88b 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <initPage5+0x374>)
 8000e60:	88db      	ldrh	r3, [r3, #6]
 8000e62:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000e66:	fb12 f303 	smulbb	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3360      	adds	r3, #96	@ 0x60
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	463a      	mov	r2, r7
 8000e72:	2303      	movs	r3, #3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f00f fa85 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000e7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	#if USE_FP_PROCESSING_ON_CH1 == 1
		snprintf(string_buffer,100, "Kanal 1: Floating point Modus");
 8000e84:	463b      	mov	r3, r7
 8000e86:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb4 <initPage5+0x3a4>)
 8000e88:	2164      	movs	r1, #100	@ 0x64
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f013 f872 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000e90:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <initPage5+0x374>)
 8000e92:	88db      	ldrh	r3, [r3, #6]
 8000e94:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000e98:	fb12 f303 	smulbb	r3, r2, r3
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3360      	adds	r3, #96	@ 0x60
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	463a      	mov	r2, r7
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f00f fa6c 	bl	8010384 <BSP_LCD_DisplayStringAt>
	#else
		snprintf(string_buffer,100, "Kanal 1: Fixed point Modus");
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
	#endif
	line++;
 8000eac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	#if USE_FP_PROCESSING_ON_CH2 == 1
		snprintf(string_buffer,100, "Kanal 2: Floating point Modus");
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
	#else
		snprintf(string_buffer,100, "Kanal 2: Fixed point Modus");
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb8 <initPage5+0x3a8>)
 8000eba:	2164      	movs	r1, #100	@ 0x64
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f013 f859 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <initPage5+0x374>)
 8000ec4:	88db      	ldrh	r3, [r3, #6]
 8000ec6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000eca:	fb12 f303 	smulbb	r3, r2, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	3360      	adds	r3, #96	@ 0x60
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	463a      	mov	r2, r7
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f00f fa53 	bl	8010384 <BSP_LCD_DisplayStringAt>
	#endif
	line = line + 2;
 8000ede:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Eingangspegel: full scale = 1.000 Vrms = 2.800 Vpp (fix)");
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <initPage5+0x3ac>)
 8000eec:	2164      	movs	r1, #100	@ 0x64
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f013 f840 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8000ef4:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <initPage5+0x374>)
 8000ef6:	88db      	ldrh	r3, [r3, #6]
 8000ef8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000efc:	fb12 f303 	smulbb	r3, r2, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3360      	adds	r3, #96	@ 0x60
 8000f04:	b299      	uxth	r1, r3
 8000f06:	463a      	mov	r2, r7
 8000f08:	2303      	movs	r3, #3
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f00f fa3a 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8000f10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	vol_vpp = pow((double)10, (double)audio_output_volume_dB/(double)20) * 2.8;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <initPage5+0x370>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f24:	eeb3 5b04 	vmov.f64	d5, #52	@ 0x41a00000  20.0
 8000f28:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f2c:	eeb0 1b46 	vmov.f64	d1, d6
 8000f30:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8000f34:	f014 f8f4 	bl	8015120 <pow>
 8000f38:	eeb0 7b40 	vmov.f64	d7, d0
 8000f3c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000f78 <initPage5+0x368>
 8000f40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f48:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	vol_rms = pow((double)10, (double)audio_output_volume_dB/(double)20);
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <initPage5+0x370>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f56:	eeb3 5b04 	vmov.f64	d5, #52	@ 0x41a00000  20.0
 8000f5a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f5e:	eeb0 1b46 	vmov.f64	d1, d6
 8000f62:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8000f66:	f014 f8db 	bl	8015120 <pow>
 8000f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f72:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8000f76:	e025      	b.n	8000fc4 <initPage5+0x3b4>
 8000f78:	66666666 	.word	0x66666666
 8000f7c:	40066666 	.word	0x40066666
 8000f80:	20020718 	.word	0x20020718
 8000f84:	20020688 	.word	0x20020688
 8000f88:	0801a7d8 	.word	0x0801a7d8
 8000f8c:	0801a7f8 	.word	0x0801a7f8
 8000f90:	0801a80c 	.word	0x0801a80c
 8000f94:	0801a828 	.word	0x0801a828
 8000f98:	0801a838 	.word	0x0801a838
 8000f9c:	0801a85c 	.word	0x0801a85c
 8000fa0:	0801a874 	.word	0x0801a874
 8000fa4:	0801a8a8 	.word	0x0801a8a8
 8000fa8:	0801a8bc 	.word	0x0801a8bc
 8000fac:	0801a8e4 	.word	0x0801a8e4
 8000fb0:	0801a908 	.word	0x0801a908
 8000fb4:	0801a92c 	.word	0x0801a92c
 8000fb8:	0801a94c 	.word	0x0801a94c
 8000fbc:	0801a968 	.word	0x0801a968
 8000fc0:	447a0000 	.word	0x447a0000

	snprintf(string_buffer,100, "Ausgangspegel: full scale = %li.%.03li Vrms = %li.%.03li Vpp (var)  ", (int32_t)(vol_rms), (int32_t)fmod(vol_rms * 1000, (double)1000), (int32_t)(vol_vpp), (int32_t)fmod(vol_vpp * 1000, (double)1000));
 8000fc4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000fc8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8000fcc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000fd0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8000fc0 <initPage5+0x3b0>
 8000fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fdc:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8001158 <initPage5+0x548>
 8000fe0:	eeb0 0b47 	vmov.f64	d0, d7
 8000fe4:	f013 ff9c 	bl	8014f20 <fmod>
 8000fe8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ff0:	ee17 4a90 	vmov	r4, s15
 8000ff4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffc:	ee17 5a90 	vmov	r5, s15
 8001000:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001004:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001160 <initPage5+0x550>
 8001008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001010:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8001158 <initPage5+0x548>
 8001014:	eeb0 0b47 	vmov.f64	d0, d7
 8001018:	f013 ff82 	bl	8014f20 <fmod>
 800101c:	eeb0 7b40 	vmov.f64	d7, d0
 8001020:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001024:	ee17 3a90 	vmov	r3, s15
 8001028:	4638      	mov	r0, r7
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	9501      	str	r5, [sp, #4]
 800102e:	9400      	str	r4, [sp, #0]
 8001030:	ee18 3a10 	vmov	r3, s16
 8001034:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <initPage5+0x554>)
 8001036:	2164      	movs	r1, #100	@ 0x64
 8001038:	f012 ff9c 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800103c:	4b4a      	ldr	r3, [pc, #296]	@ (8001168 <initPage5+0x558>)
 800103e:	88db      	ldrh	r3, [r3, #6]
 8001040:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001044:	fb12 f303 	smulbb	r3, r2, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	3360      	adds	r3, #96	@ 0x60
 800104c:	b299      	uxth	r1, r3
 800104e:	463a      	mov	r2, r7
 8001050:	2303      	movs	r3, #3
 8001052:	200a      	movs	r0, #10
 8001054:	f00f f996 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 8001058:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800105c:	3301      	adds	r3, #1
 800105e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	if(audio_output_volume_dB > 0){
 8001062:	4b42      	ldr	r3, [pc, #264]	@ (800116c <initPage5+0x55c>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd35      	ble.n	80010de <initPage5+0x4ce>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8001072:	483f      	ldr	r0, [pc, #252]	@ (8001170 <initPage5+0x560>)
 8001074:	f00f f8ce 	bl	8010214 <BSP_LCD_SetTextColor>
		snprintf(string_buffer,100, "Achtung: Die Ausgangsstufe satturiert ab 2.8 Vpp,");
 8001078:	463b      	mov	r3, r7
 800107a:	4a3e      	ldr	r2, [pc, #248]	@ (8001174 <initPage5+0x564>)
 800107c:	2164      	movs	r1, #100	@ 0x64
 800107e:	4618      	mov	r0, r3
 8001080:	f012 ff78 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001084:	4b38      	ldr	r3, [pc, #224]	@ (8001168 <initPage5+0x558>)
 8001086:	88db      	ldrh	r3, [r3, #6]
 8001088:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800108c:	fb12 f303 	smulbb	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3360      	adds	r3, #96	@ 0x60
 8001094:	b299      	uxth	r1, r3
 8001096:	463a      	mov	r2, r7
 8001098:	2303      	movs	r3, #3
 800109a:	200a      	movs	r0, #10
 800109c:	f00f f972 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 80010a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80010a4:	3301      	adds	r3, #1
 80010a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		snprintf(string_buffer,100, "         es kann zu Clipping kommen!");
 80010aa:	463b      	mov	r3, r7
 80010ac:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <initPage5+0x568>)
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	4618      	mov	r0, r3
 80010b2:	f012 ff5f 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <initPage5+0x558>)
 80010b8:	88db      	ldrh	r3, [r3, #6]
 80010ba:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80010be:	fb12 f303 	smulbb	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3360      	adds	r3, #96	@ 0x60
 80010c6:	b299      	uxth	r1, r3
 80010c8:	463a      	mov	r2, r7
 80010ca:	2303      	movs	r3, #3
 80010cc:	200a      	movs	r0, #10
 80010ce:	f00f f959 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 80010d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80010dc:	e031      	b.n	8001142 <initPage5+0x532>
	}

	else{
		snprintf(string_buffer,100, "                                                              ");
 80010de:	463b      	mov	r3, r7
 80010e0:	4a26      	ldr	r2, [pc, #152]	@ (800117c <initPage5+0x56c>)
 80010e2:	2164      	movs	r1, #100	@ 0x64
 80010e4:	4618      	mov	r0, r3
 80010e6:	f012 ff45 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <initPage5+0x558>)
 80010ec:	88db      	ldrh	r3, [r3, #6]
 80010ee:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80010f2:	fb12 f303 	smulbb	r3, r2, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3360      	adds	r3, #96	@ 0x60
 80010fa:	b299      	uxth	r1, r3
 80010fc:	463a      	mov	r2, r7
 80010fe:	2303      	movs	r3, #3
 8001100:	200a      	movs	r0, #10
 8001102:	f00f f93f 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 8001106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800110a:	3301      	adds	r3, #1
 800110c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		snprintf(string_buffer,100, "                                                              ");
 8001110:	463b      	mov	r3, r7
 8001112:	4a1a      	ldr	r2, [pc, #104]	@ (800117c <initPage5+0x56c>)
 8001114:	2164      	movs	r1, #100	@ 0x64
 8001116:	4618      	mov	r0, r3
 8001118:	f012 ff2c 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <initPage5+0x558>)
 800111e:	88db      	ldrh	r3, [r3, #6]
 8001120:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001124:	fb12 f303 	smulbb	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	3360      	adds	r3, #96	@ 0x60
 800112c:	b299      	uxth	r1, r3
 800112e:	463a      	mov	r2, r7
 8001130:	2303      	movs	r3, #3
 8001132:	200a      	movs	r0, #10
 8001134:	f00f f926 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 8001138:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800113c:	3301      	adds	r3, #1
 800113e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	f00f f865 	bl	8010214 <BSP_LCD_SetTextColor>
}
 800114a:	bf00      	nop
 800114c:	3770      	adds	r7, #112	@ 0x70
 800114e:	46bd      	mov	sp, r7
 8001150:	ecbd 8b02 	vpop	{d8}
 8001154:	bdb0      	pop	{r4, r5, r7, pc}
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000
 800115c:	408f4000 	.word	0x408f4000
 8001160:	447a0000 	.word	0x447a0000
 8001164:	0801a9a4 	.word	0x0801a9a4
 8001168:	20020688 	.word	0x20020688
 800116c:	20020718 	.word	0x20020718
 8001170:	ffff8080 	.word	0xffff8080
 8001174:	0801a9ec 	.word	0x0801a9ec
 8001178:	0801aa20 	.word	0x0801aa20
 800117c:	0801aa48 	.word	0x0801aa48

08001180 <checkButtonsPage1>:
	checkButtonsPageX

 	Test for all the possible inputs on the page X.
*/
/***********************************************************************************/
void checkButtonsPage1(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	static char last_user_text_line_mode_4[USER_TEXT_LENGTH + 1];
	static char last_user_text_line_mode_5[USER_TEXT_LENGTH + 1];

	volatile unsigned char buffer;

	if(TS_State.touchDetected == 1)    // test for new button press
 8001186:	4bb5      	ldr	r3, [pc, #724]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d103      	bne.n	8001196 <checkButtonsPage1+0x16>
	{
		BSP_TS_GetState(&TS_State);
 800118e:	48b3      	ldr	r0, [pc, #716]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001190:	f010 fc1a 	bl	80119c8 <BSP_TS_GetState>
 8001194:	e0aa      	b.n	80012ec <checkButtonsPage1+0x16c>
	}
	else
	{
		BSP_TS_GetState(&TS_State);
 8001196:	48b1      	ldr	r0, [pc, #708]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001198:	f010 fc16 	bl	80119c8 <BSP_TS_GetState>

		if(TS_State.touchDetected == 1)
 800119c:	4baf      	ldr	r3, [pc, #700]	@ (800145c <checkButtonsPage1+0x2dc>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 80a3 	bne.w	80012ec <checkButtonsPage1+0x16c>
		{
			for(i = 1; i<6; i++){	// test lower button row
 80011a6:	2301      	movs	r3, #1
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	e02f      	b.n	800120c <checkButtonsPage1+0x8c>
				if((TS_State.touchX[0] > (10 + (i-1)*170)) && (TS_State.touchX[0] < (110 + (i-1)*170)) &&
 80011ac:	4bab      	ldr	r3, [pc, #684]	@ (800145c <checkButtonsPage1+0x2dc>)
 80011ae:	885b      	ldrh	r3, [r3, #2]
 80011b0:	4619      	mov	r1, r3
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	22aa      	movs	r2, #170	@ 0xaa
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	330a      	adds	r3, #10
 80011be:	4299      	cmp	r1, r3
 80011c0:	dd21      	ble.n	8001206 <checkButtonsPage1+0x86>
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	22aa      	movs	r2, #170	@ 0xaa
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	336d      	adds	r3, #109	@ 0x6d
 80011ce:	4aa3      	ldr	r2, [pc, #652]	@ (800145c <checkButtonsPage1+0x2dc>)
 80011d0:	8852      	ldrh	r2, [r2, #2]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	db17      	blt.n	8001206 <checkButtonsPage1+0x86>
				  (TS_State.touchY[0] > 370) && (TS_State.touchY[0] < 470) && (i != user_mode)) {
 80011d6:	4ba1      	ldr	r3, [pc, #644]	@ (800145c <checkButtonsPage1+0x2dc>)
 80011d8:	88db      	ldrh	r3, [r3, #6]
				if((TS_State.touchX[0] > (10 + (i-1)*170)) && (TS_State.touchX[0] < (110 + (i-1)*170)) &&
 80011da:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 80011de:	d912      	bls.n	8001206 <checkButtonsPage1+0x86>
				  (TS_State.touchY[0] > 370) && (TS_State.touchY[0] < 470) && (i != user_mode)) {
 80011e0:	4b9e      	ldr	r3, [pc, #632]	@ (800145c <checkButtonsPage1+0x2dc>)
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	f5b3 7feb 	cmp.w	r3, #470	@ 0x1d6
 80011e8:	d20d      	bcs.n	8001206 <checkButtonsPage1+0x86>
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001460 <checkButtonsPage1+0x2e0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d008      	beq.n	8001206 <checkButtonsPage1+0x86>
					user_mode = i;
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001460 <checkButtonsPage1+0x2e0>)
 80011f8:	6013      	str	r3, [r2, #0]
					drawButtonRow();
 80011fa:	f001 ff85 	bl	8003108 <drawButtonRow>
					updatePage1();
 80011fe:	f000 fbf3 	bl	80019e8 <updatePage1>
					drawTitle();
 8001202:	f001 fde1 	bl	8002dc8 <drawTitle>
			for(i = 1; i<6; i++){	// test lower button row
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	3301      	adds	r3, #1
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d9cc      	bls.n	80011ac <checkButtonsPage1+0x2c>
				 }
			}

			// test volume buttons
			if((TS_State.touchX[0] > 690) && (TS_State.touchX[0] < 790) &&
 8001212:	4b92      	ldr	r3, [pc, #584]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001214:	885b      	ldrh	r3, [r3, #2]
 8001216:	f240 22b2 	movw	r2, #690	@ 0x2b2
 800121a:	4293      	cmp	r3, r2
 800121c:	d92f      	bls.n	800127e <checkButtonsPage1+0xfe>
 800121e:	4b8f      	ldr	r3, [pc, #572]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	f240 3215 	movw	r2, #789	@ 0x315
 8001226:	4293      	cmp	r3, r2
 8001228:	d829      	bhi.n	800127e <checkButtonsPage1+0xfe>
			  (TS_State.touchY[0] > 104) && (TS_State.touchY[0] < 204)) {
 800122a:	4b8c      	ldr	r3, [pc, #560]	@ (800145c <checkButtonsPage1+0x2dc>)
 800122c:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 690) && (TS_State.touchX[0] < 790) &&
 800122e:	2b68      	cmp	r3, #104	@ 0x68
 8001230:	d925      	bls.n	800127e <checkButtonsPage1+0xfe>
			  (TS_State.touchY[0] > 104) && (TS_State.touchY[0] < 204)) {
 8001232:	4b8a      	ldr	r3, [pc, #552]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001234:	88db      	ldrh	r3, [r3, #6]
 8001236:	2bcb      	cmp	r3, #203	@ 0xcb
 8001238:	d821      	bhi.n	800127e <checkButtonsPage1+0xfe>
				if((audio_output_volume_dB + CODEC_MAX_OUTPUT_VOLUE_STEP)  <= CODEC_MAX_OUTPUT_VOLUE_dB){
 800123a:	4b8a      	ldr	r3, [pc, #552]	@ (8001464 <checkButtonsPage1+0x2e4>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001248:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	d813      	bhi.n	800127e <checkButtonsPage1+0xfe>
					audio_output_volume_dB = audio_output_volume_dB + CODEC_MAX_OUTPUT_VOLUE_STEP;
 8001256:	4b83      	ldr	r3, [pc, #524]	@ (8001464 <checkButtonsPage1+0x2e4>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001264:	4b7f      	ldr	r3, [pc, #508]	@ (8001464 <checkButtonsPage1+0x2e4>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
					wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 800126a:	4b7e      	ldr	r3, [pc, #504]	@ (8001464 <checkButtonsPage1+0x2e4>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	2034      	movs	r0, #52	@ 0x34
 8001276:	f005 f90f 	bl	8006498 <wm8994_SetOutputVolume_dB>
					updatePage1();
 800127a:	f000 fbb5 	bl	80019e8 <updatePage1>
				}
			}

			if((TS_State.touchX[0] > 690) && (TS_State.touchX[0] < 790) &&
 800127e:	4b77      	ldr	r3, [pc, #476]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001280:	885b      	ldrh	r3, [r3, #2]
 8001282:	f240 22b2 	movw	r2, #690	@ 0x2b2
 8001286:	4293      	cmp	r3, r2
 8001288:	d930      	bls.n	80012ec <checkButtonsPage1+0x16c>
 800128a:	4b74      	ldr	r3, [pc, #464]	@ (800145c <checkButtonsPage1+0x2dc>)
 800128c:	885b      	ldrh	r3, [r3, #2]
 800128e:	f240 3215 	movw	r2, #789	@ 0x315
 8001292:	4293      	cmp	r3, r2
 8001294:	d82a      	bhi.n	80012ec <checkButtonsPage1+0x16c>
			  (TS_State.touchY[0] > 237) && (TS_State.touchY[0] < 337)) {
 8001296:	4b71      	ldr	r3, [pc, #452]	@ (800145c <checkButtonsPage1+0x2dc>)
 8001298:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 690) && (TS_State.touchX[0] < 790) &&
 800129a:	2bed      	cmp	r3, #237	@ 0xed
 800129c:	d926      	bls.n	80012ec <checkButtonsPage1+0x16c>
			  (TS_State.touchY[0] > 237) && (TS_State.touchY[0] < 337)) {
 800129e:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <checkButtonsPage1+0x2dc>)
 80012a0:	88db      	ldrh	r3, [r3, #6]
 80012a2:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80012a6:	d821      	bhi.n	80012ec <checkButtonsPage1+0x16c>
				if((audio_output_volume_dB - CODEC_MAX_OUTPUT_VOLUE_STEP)  >=  CODEC_MIN_OUTPUT_VOLUE_dB){
 80012a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001464 <checkButtonsPage1+0x2e4>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012b6:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001468 <checkButtonsPage1+0x2e8>
 80012ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	db13      	blt.n	80012ec <checkButtonsPage1+0x16c>
					audio_output_volume_dB = audio_output_volume_dB - CODEC_MAX_OUTPUT_VOLUE_STEP;
 80012c4:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <checkButtonsPage1+0x2e4>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d2:	4b64      	ldr	r3, [pc, #400]	@ (8001464 <checkButtonsPage1+0x2e4>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
					wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 80012d8:	4b62      	ldr	r3, [pc, #392]	@ (8001464 <checkButtonsPage1+0x2e4>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eeb0 0a67 	vmov.f32	s0, s15
 80012e2:	2034      	movs	r0, #52	@ 0x34
 80012e4:	f005 f8d8 	bl	8006498 <wm8994_SetOutputVolume_dB>
					updatePage1();
 80012e8:	f000 fb7e 	bl	80019e8 <updatePage1>
	}



	// update the user text in tihs mode too
	switch(user_mode){
 80012ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001460 <checkButtonsPage1+0x2e0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	f200 813b 	bhi.w	800156c <checkButtonsPage1+0x3ec>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <checkButtonsPage1+0x17c>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001315 	.word	0x08001315
 8001300:	0800132f 	.word	0x0800132f
 8001304:	08001393 	.word	0x08001393
 8001308:	080013f7 	.word	0x080013f7
 800130c:	08001489 	.word	0x08001489
 8001310:	080014eb 	.word	0x080014eb
		case 0:
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001314:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001318:	f00e ff7c 	bl	8010214 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 336, 689, 20);
 800131c:	2314      	movs	r3, #20
 800131e:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8001322:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001326:	2000      	movs	r0, #0
 8001328:	f00f f9ca 	bl	80106c0 <BSP_LCD_FillRect>
		break;
 800132c:	e11e      	b.n	800156c <checkButtonsPage1+0x3ec>

		case 1:
			if(strcmp(last_user_text_line_mode_1, user_text_line_mode_1) != 0){
 800132e:	494f      	ldr	r1, [pc, #316]	@ (800146c <checkButtonsPage1+0x2ec>)
 8001330:	484f      	ldr	r0, [pc, #316]	@ (8001470 <checkButtonsPage1+0x2f0>)
 8001332:	f7fe ffe5 	bl	8000300 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 810e 	beq.w	800155a <checkButtonsPage1+0x3da>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800133e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001342:	f00e ff67 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 336, 689, 20);
 8001346:	2314      	movs	r3, #20
 8001348:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800134c:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001350:	2000      	movs	r0, #0
 8001352:	f00f f9b5 	bl	80106c0 <BSP_LCD_FillRect>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001356:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800135a:	f00e ff73 	bl	8010244 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800135e:	f04f 30ff 	mov.w	r0, #4294967295
 8001362:	f00e ff57 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 8001366:	4843      	ldr	r0, [pc, #268]	@ (8001474 <checkButtonsPage1+0x2f4>)
 8001368:	f00e ff86 	bl	8010278 <BSP_LCD_SetFont>
				BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_1[0], LEFT_MODE);
 800136c:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <checkButtonsPage1+0x2f4>)
 800136e:	88db      	ldrh	r3, [r3, #6]
 8001370:	461a      	mov	r2, r3
 8001372:	0052      	lsls	r2, r2, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3360      	adds	r3, #96	@ 0x60
 800137c:	b299      	uxth	r1, r3
 800137e:	2303      	movs	r3, #3
 8001380:	4a3a      	ldr	r2, [pc, #232]	@ (800146c <checkButtonsPage1+0x2ec>)
 8001382:	200a      	movs	r0, #10
 8001384:	f00e fffe 	bl	8010384 <BSP_LCD_DisplayStringAt>
				strcpy(last_user_text_line_mode_1, user_text_line_mode_1);
 8001388:	4938      	ldr	r1, [pc, #224]	@ (800146c <checkButtonsPage1+0x2ec>)
 800138a:	4839      	ldr	r0, [pc, #228]	@ (8001470 <checkButtonsPage1+0x2f0>)
 800138c:	f012 fef5 	bl	801417a <strcpy>
			}
		break;
 8001390:	e0e3      	b.n	800155a <checkButtonsPage1+0x3da>

		case 2:
			if(strcmp(last_user_text_line_mode_2, user_text_line_mode_2) != 0){
 8001392:	4939      	ldr	r1, [pc, #228]	@ (8001478 <checkButtonsPage1+0x2f8>)
 8001394:	4839      	ldr	r0, [pc, #228]	@ (800147c <checkButtonsPage1+0x2fc>)
 8001396:	f7fe ffb3 	bl	8000300 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80de 	beq.w	800155e <checkButtonsPage1+0x3de>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013a2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80013a6:	f00e ff35 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 336, 689, 20);
 80013aa:	2314      	movs	r3, #20
 80013ac:	f240 22b1 	movw	r2, #689	@ 0x2b1
 80013b0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80013b4:	2000      	movs	r0, #0
 80013b6:	f00f f983 	bl	80106c0 <BSP_LCD_FillRect>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80013ba:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80013be:	f00e ff41 	bl	8010244 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f00e ff25 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 80013ca:	482a      	ldr	r0, [pc, #168]	@ (8001474 <checkButtonsPage1+0x2f4>)
 80013cc:	f00e ff54 	bl	8010278 <BSP_LCD_SetFont>
				BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_2[0], LEFT_MODE);
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <checkButtonsPage1+0x2f4>)
 80013d2:	88db      	ldrh	r3, [r3, #6]
 80013d4:	461a      	mov	r2, r3
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3360      	adds	r3, #96	@ 0x60
 80013e0:	b299      	uxth	r1, r3
 80013e2:	2303      	movs	r3, #3
 80013e4:	4a24      	ldr	r2, [pc, #144]	@ (8001478 <checkButtonsPage1+0x2f8>)
 80013e6:	200a      	movs	r0, #10
 80013e8:	f00e ffcc 	bl	8010384 <BSP_LCD_DisplayStringAt>
				strcpy(last_user_text_line_mode_2, user_text_line_mode_2);
 80013ec:	4922      	ldr	r1, [pc, #136]	@ (8001478 <checkButtonsPage1+0x2f8>)
 80013ee:	4823      	ldr	r0, [pc, #140]	@ (800147c <checkButtonsPage1+0x2fc>)
 80013f0:	f012 fec3 	bl	801417a <strcpy>
			}
		break;
 80013f4:	e0b3      	b.n	800155e <checkButtonsPage1+0x3de>

		case 3:
			if(strcmp(last_user_text_line_mode_3, user_text_line_mode_3) != 0){
 80013f6:	4922      	ldr	r1, [pc, #136]	@ (8001480 <checkButtonsPage1+0x300>)
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <checkButtonsPage1+0x304>)
 80013fa:	f7fe ff81 	bl	8000300 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80ae 	beq.w	8001562 <checkButtonsPage1+0x3e2>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001406:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800140a:	f00e ff03 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 336, 689, 20);
 800140e:	2314      	movs	r3, #20
 8001410:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8001414:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001418:	2000      	movs	r0, #0
 800141a:	f00f f951 	bl	80106c0 <BSP_LCD_FillRect>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800141e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001422:	f00e ff0f 	bl	8010244 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001426:	f04f 30ff 	mov.w	r0, #4294967295
 800142a:	f00e fef3 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 800142e:	4811      	ldr	r0, [pc, #68]	@ (8001474 <checkButtonsPage1+0x2f4>)
 8001430:	f00e ff22 	bl	8010278 <BSP_LCD_SetFont>
				BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_3[0], LEFT_MODE);
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <checkButtonsPage1+0x2f4>)
 8001436:	88db      	ldrh	r3, [r3, #6]
 8001438:	461a      	mov	r2, r3
 800143a:	0052      	lsls	r2, r2, #1
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	b29b      	uxth	r3, r3
 8001442:	3360      	adds	r3, #96	@ 0x60
 8001444:	b299      	uxth	r1, r3
 8001446:	2303      	movs	r3, #3
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <checkButtonsPage1+0x300>)
 800144a:	200a      	movs	r0, #10
 800144c:	f00e ff9a 	bl	8010384 <BSP_LCD_DisplayStringAt>
				strcpy(last_user_text_line_mode_3, user_text_line_mode_3);
 8001450:	490b      	ldr	r1, [pc, #44]	@ (8001480 <checkButtonsPage1+0x300>)
 8001452:	480c      	ldr	r0, [pc, #48]	@ (8001484 <checkButtonsPage1+0x304>)
 8001454:	f012 fe91 	bl	801417a <strcpy>
			}
		break;
 8001458:	e083      	b.n	8001562 <checkButtonsPage1+0x3e2>
 800145a:	bf00      	nop
 800145c:	200307e0 	.word	0x200307e0
 8001460:	2001101c 	.word	0x2001101c
 8001464:	20020718 	.word	0x20020718
 8001468:	c2640000 	.word	0xc2640000
 800146c:	20030958 	.word	0x20030958
 8001470:	200307ec 	.word	0x200307ec
 8001474:	20020688 	.word	0x20020688
 8001478:	2003098c 	.word	0x2003098c
 800147c:	20030820 	.word	0x20030820
 8001480:	200309c0 	.word	0x200309c0
 8001484:	20030854 	.word	0x20030854

		case 4:
			if(strcmp(last_user_text_line_mode_4, user_text_line_mode_4) != 0){
 8001488:	493a      	ldr	r1, [pc, #232]	@ (8001574 <checkButtonsPage1+0x3f4>)
 800148a:	483b      	ldr	r0, [pc, #236]	@ (8001578 <checkButtonsPage1+0x3f8>)
 800148c:	f7fe ff38 	bl	8000300 <strcmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d067      	beq.n	8001566 <checkButtonsPage1+0x3e6>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001496:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800149a:	f00e febb 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 336, 689, 20);
 800149e:	2314      	movs	r3, #20
 80014a0:	f240 22b1 	movw	r2, #689	@ 0x2b1
 80014a4:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00f f909 	bl	80106c0 <BSP_LCD_FillRect>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80014ae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80014b2:	f00e fec7 	bl	8010244 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80014b6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ba:	f00e feab 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 80014be:	482f      	ldr	r0, [pc, #188]	@ (800157c <checkButtonsPage1+0x3fc>)
 80014c0:	f00e feda 	bl	8010278 <BSP_LCD_SetFont>
				BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_4[0], LEFT_MODE);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <checkButtonsPage1+0x3fc>)
 80014c6:	88db      	ldrh	r3, [r3, #6]
 80014c8:	461a      	mov	r2, r3
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3360      	adds	r3, #96	@ 0x60
 80014d4:	b299      	uxth	r1, r3
 80014d6:	2303      	movs	r3, #3
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <checkButtonsPage1+0x3f4>)
 80014da:	200a      	movs	r0, #10
 80014dc:	f00e ff52 	bl	8010384 <BSP_LCD_DisplayStringAt>
				strcpy(last_user_text_line_mode_4, user_text_line_mode_4);
 80014e0:	4924      	ldr	r1, [pc, #144]	@ (8001574 <checkButtonsPage1+0x3f4>)
 80014e2:	4825      	ldr	r0, [pc, #148]	@ (8001578 <checkButtonsPage1+0x3f8>)
 80014e4:	f012 fe49 	bl	801417a <strcpy>
			}
		break;
 80014e8:	e03d      	b.n	8001566 <checkButtonsPage1+0x3e6>

		case 5:
			if(buffer = strcmp(last_user_text_line_mode_5, user_text_line_mode_5) != 0){
 80014ea:	4925      	ldr	r1, [pc, #148]	@ (8001580 <checkButtonsPage1+0x400>)
 80014ec:	4825      	ldr	r0, [pc, #148]	@ (8001584 <checkButtonsPage1+0x404>)
 80014ee:	f7fe ff07 	bl	8000300 <strcmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	717a      	strb	r2, [r7, #5]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d031      	beq.n	800156a <checkButtonsPage1+0x3ea>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001506:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800150a:	f00e fe83 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, 336, 689, 20);
 800150e:	2314      	movs	r3, #20
 8001510:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8001514:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001518:	2000      	movs	r0, #0
 800151a:	f00f f8d1 	bl	80106c0 <BSP_LCD_FillRect>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800151e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001522:	f00e fe8f 	bl	8010244 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001526:	f04f 30ff 	mov.w	r0, #4294967295
 800152a:	f00e fe73 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 800152e:	4813      	ldr	r0, [pc, #76]	@ (800157c <checkButtonsPage1+0x3fc>)
 8001530:	f00e fea2 	bl	8010278 <BSP_LCD_SetFont>
				BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_5[0], LEFT_MODE);
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <checkButtonsPage1+0x3fc>)
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	461a      	mov	r2, r3
 800153a:	0052      	lsls	r2, r2, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	b29b      	uxth	r3, r3
 8001542:	3360      	adds	r3, #96	@ 0x60
 8001544:	b299      	uxth	r1, r3
 8001546:	2303      	movs	r3, #3
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <checkButtonsPage1+0x400>)
 800154a:	200a      	movs	r0, #10
 800154c:	f00e ff1a 	bl	8010384 <BSP_LCD_DisplayStringAt>
				strcpy(last_user_text_line_mode_5, user_text_line_mode_5);
 8001550:	490b      	ldr	r1, [pc, #44]	@ (8001580 <checkButtonsPage1+0x400>)
 8001552:	480c      	ldr	r0, [pc, #48]	@ (8001584 <checkButtonsPage1+0x404>)
 8001554:	f012 fe11 	bl	801417a <strcpy>
			}
		break;
 8001558:	e007      	b.n	800156a <checkButtonsPage1+0x3ea>
		break;
 800155a:	bf00      	nop
 800155c:	e006      	b.n	800156c <checkButtonsPage1+0x3ec>
		break;
 800155e:	bf00      	nop
 8001560:	e004      	b.n	800156c <checkButtonsPage1+0x3ec>
		break;
 8001562:	bf00      	nop
 8001564:	e002      	b.n	800156c <checkButtonsPage1+0x3ec>
		break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <checkButtonsPage1+0x3ec>
		break;
 800156a:	bf00      	nop
	}


}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200309f4 	.word	0x200309f4
 8001578:	20030888 	.word	0x20030888
 800157c:	20020688 	.word	0x20020688
 8001580:	20030a28 	.word	0x20030a28
 8001584:	200308bc 	.word	0x200308bc

08001588 <checkButtonsPage2>:
/************************************************************************************/

/************************************************************************************/
void checkButtonsPage2(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	static TS_StateTypeDef  TS_State={0};
	uint32_t i;

	if(TS_State.touchDetected == 1)    // test for new button press
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <checkButtonsPage2+0xec>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d103      	bne.n	800159e <checkButtonsPage2+0x16>
	{
		BSP_TS_GetState(&TS_State);
 8001596:	4837      	ldr	r0, [pc, #220]	@ (8001674 <checkButtonsPage2+0xec>)
 8001598:	f010 fa16 	bl	80119c8 <BSP_TS_GetState>
 800159c:	e066      	b.n	800166c <checkButtonsPage2+0xe4>
	}
	else
	{
		BSP_TS_GetState(&TS_State);
 800159e:	4835      	ldr	r0, [pc, #212]	@ (8001674 <checkButtonsPage2+0xec>)
 80015a0:	f010 fa12 	bl	80119c8 <BSP_TS_GetState>

		if(TS_State.touchDetected == 1)
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <checkButtonsPage2+0xec>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d15f      	bne.n	800166c <checkButtonsPage2+0xe4>
		{
			for(i = 0; i < 4; i++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	e045      	b.n	800163e <checkButtonsPage2+0xb6>
				if((TS_State.touchX[0] > (125+150*i)) && (TS_State.touchX[0] < (250+150*i)) &&
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <checkButtonsPage2+0xec>)
 80015b4:	885b      	ldrh	r3, [r3, #2]
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2296      	movs	r2, #150	@ 0x96
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	337d      	adds	r3, #125	@ 0x7d
 80015c2:	4299      	cmp	r1, r3
 80015c4:	d938      	bls.n	8001638 <checkButtonsPage2+0xb0>
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <checkButtonsPage2+0xec>)
 80015c8:	885b      	ldrh	r3, [r3, #2]
 80015ca:	4619      	mov	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2296      	movs	r2, #150	@ 0x96
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	33fa      	adds	r3, #250	@ 0xfa
 80015d6:	4299      	cmp	r1, r3
 80015d8:	d22e      	bcs.n	8001638 <checkButtonsPage2+0xb0>
				  (TS_State.touchY[0] > 65) && (TS_State.touchY[0] < 115)) {
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <checkButtonsPage2+0xec>)
 80015dc:	88db      	ldrh	r3, [r3, #6]
				if((TS_State.touchX[0] > (125+150*i)) && (TS_State.touchX[0] < (250+150*i)) &&
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	d92a      	bls.n	8001638 <checkButtonsPage2+0xb0>
				  (TS_State.touchY[0] > 65) && (TS_State.touchY[0] < 115)) {
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <checkButtonsPage2+0xec>)
 80015e4:	88db      	ldrh	r3, [r3, #6]
 80015e6:	2b72      	cmp	r3, #114	@ 0x72
 80015e8:	d826      	bhi.n	8001638 <checkButtonsPage2+0xb0>

					if(i == 0){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <checkButtonsPage2+0x74>
						measure_CH1_in = measure_CH1_in ^ 1;
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <checkButtonsPage2+0xf0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <checkButtonsPage2+0xf0>)
 80015fa:	6013      	str	r3, [r2, #0]
					}

					if(i == 1){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <checkButtonsPage2+0x86>
						measure_CH2_in = measure_CH2_in ^ 1;
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <checkButtonsPage2+0xf4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <checkButtonsPage2+0xf4>)
 800160c:	6013      	str	r3, [r2, #0]
					}

					if(i == 2){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d105      	bne.n	8001620 <checkButtonsPage2+0x98>
						measure_CH1_out = measure_CH1_out ^ 1;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <checkButtonsPage2+0xf8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	4a18      	ldr	r2, [pc, #96]	@ (8001680 <checkButtonsPage2+0xf8>)
 800161e:	6013      	str	r3, [r2, #0]
					}

					if(i == 3){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d105      	bne.n	8001632 <checkButtonsPage2+0xaa>
						measure_CH2_out = measure_CH2_out ^ 1;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <checkButtonsPage2+0xfc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	4a15      	ldr	r2, [pc, #84]	@ (8001684 <checkButtonsPage2+0xfc>)
 8001630:	6013      	str	r3, [r2, #0]
					}

					updatePage2();
 8001632:	f000 fe67 	bl	8002304 <updatePage2>
					return;
 8001636:	e019      	b.n	800166c <checkButtonsPage2+0xe4>
			for(i = 0; i < 4; i++){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d9b6      	bls.n	80015b2 <checkButtonsPage2+0x2a>
				}
			}

			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 800) &&
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <checkButtonsPage2+0xec>)
 8001646:	885b      	ldrh	r3, [r3, #2]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00f      	beq.n	800166c <checkButtonsPage2+0xe4>
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <checkButtonsPage2+0xec>)
 800164e:	885b      	ldrh	r3, [r3, #2]
 8001650:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001654:	d20a      	bcs.n	800166c <checkButtonsPage2+0xe4>
			  (TS_State.touchY[0] > 72) && (TS_State.touchY[0] < 480)) {
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <checkButtonsPage2+0xec>)
 8001658:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 800) &&
 800165a:	2b48      	cmp	r3, #72	@ 0x48
 800165c:	d906      	bls.n	800166c <checkButtonsPage2+0xe4>
			  (TS_State.touchY[0] > 72) && (TS_State.touchY[0] < 480)) {
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <checkButtonsPage2+0xec>)
 8001660:	88db      	ldrh	r3, [r3, #6]
 8001662:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001666:	d201      	bcs.n	800166c <checkButtonsPage2+0xe4>
				updatePage2();
 8001668:	f000 fe4c 	bl	8002304 <updatePage2>
			}
		}
	}
}
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200308f0 	.word	0x200308f0
 8001678:	20020004 	.word	0x20020004
 800167c:	200307bc 	.word	0x200307bc
 8001680:	200307c0 	.word	0x200307c0
 8001684:	200307c4 	.word	0x200307c4

08001688 <checkButtonsPage3>:
/************************************************************************************/

/************************************************************************************/
void checkButtonsPage3(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	static TS_StateTypeDef  TS_State={0};
	uint32_t i;

	if(TS_State.touchDetected == 1)    // test for new button press
 800168e:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <checkButtonsPage3+0xec>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d103      	bne.n	800169e <checkButtonsPage3+0x16>
	{
		BSP_TS_GetState(&TS_State);
 8001696:	4837      	ldr	r0, [pc, #220]	@ (8001774 <checkButtonsPage3+0xec>)
 8001698:	f010 f996 	bl	80119c8 <BSP_TS_GetState>
 800169c:	e066      	b.n	800176c <checkButtonsPage3+0xe4>
	}
	else
	{
		BSP_TS_GetState(&TS_State);
 800169e:	4835      	ldr	r0, [pc, #212]	@ (8001774 <checkButtonsPage3+0xec>)
 80016a0:	f010 f992 	bl	80119c8 <BSP_TS_GetState>

		if(TS_State.touchDetected == 1)
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <checkButtonsPage3+0xec>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d15f      	bne.n	800176c <checkButtonsPage3+0xe4>
		{
			for(i = 0; i < 4; i++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	e045      	b.n	800173e <checkButtonsPage3+0xb6>
				if((TS_State.touchX[0] > (125+150*i)) && (TS_State.touchX[0] < (250+150*i)) &&
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <checkButtonsPage3+0xec>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2296      	movs	r2, #150	@ 0x96
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	337d      	adds	r3, #125	@ 0x7d
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d938      	bls.n	8001738 <checkButtonsPage3+0xb0>
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <checkButtonsPage3+0xec>)
 80016c8:	885b      	ldrh	r3, [r3, #2]
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2296      	movs	r2, #150	@ 0x96
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	33fa      	adds	r3, #250	@ 0xfa
 80016d6:	4299      	cmp	r1, r3
 80016d8:	d22e      	bcs.n	8001738 <checkButtonsPage3+0xb0>
				  (TS_State.touchY[0] > 65) && (TS_State.touchY[0] < 115)) {
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <checkButtonsPage3+0xec>)
 80016dc:	88db      	ldrh	r3, [r3, #6]
				if((TS_State.touchX[0] > (125+150*i)) && (TS_State.touchX[0] < (250+150*i)) &&
 80016de:	2b41      	cmp	r3, #65	@ 0x41
 80016e0:	d92a      	bls.n	8001738 <checkButtonsPage3+0xb0>
				  (TS_State.touchY[0] > 65) && (TS_State.touchY[0] < 115)) {
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <checkButtonsPage3+0xec>)
 80016e4:	88db      	ldrh	r3, [r3, #6]
 80016e6:	2b72      	cmp	r3, #114	@ 0x72
 80016e8:	d826      	bhi.n	8001738 <checkButtonsPage3+0xb0>

					if(i == 0){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <checkButtonsPage3+0x74>
						measure_CH1_in = measure_CH1_in ^ 1;
 80016f0:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <checkButtonsPage3+0xf0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001778 <checkButtonsPage3+0xf0>)
 80016fa:	6013      	str	r3, [r2, #0]
					}

					if(i == 1){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <checkButtonsPage3+0x86>
						measure_CH2_in = measure_CH2_in ^ 1;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <checkButtonsPage3+0xf4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f083 0301 	eor.w	r3, r3, #1
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <checkButtonsPage3+0xf4>)
 800170c:	6013      	str	r3, [r2, #0]
					}

					if(i == 2){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d105      	bne.n	8001720 <checkButtonsPage3+0x98>
						measure_CH1_out = measure_CH1_out ^ 1;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <checkButtonsPage3+0xf8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	4a18      	ldr	r2, [pc, #96]	@ (8001780 <checkButtonsPage3+0xf8>)
 800171e:	6013      	str	r3, [r2, #0]
					}

					if(i == 3){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d105      	bne.n	8001732 <checkButtonsPage3+0xaa>
						measure_CH2_out = measure_CH2_out ^ 1;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <checkButtonsPage3+0xfc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <checkButtonsPage3+0xfc>)
 8001730:	6013      	str	r3, [r2, #0]
					}

					updatePage3();
 8001732:	f000 ff95 	bl	8002660 <updatePage3>
					return;
 8001736:	e019      	b.n	800176c <checkButtonsPage3+0xe4>
			for(i = 0; i < 4; i++){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d9b6      	bls.n	80016b2 <checkButtonsPage3+0x2a>
				}
			}

			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 800) &&
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <checkButtonsPage3+0xec>)
 8001746:	885b      	ldrh	r3, [r3, #2]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00f      	beq.n	800176c <checkButtonsPage3+0xe4>
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <checkButtonsPage3+0xec>)
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001754:	d20a      	bcs.n	800176c <checkButtonsPage3+0xe4>
			  (TS_State.touchY[0] > 72) && (TS_State.touchY[0] < 480)) {
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <checkButtonsPage3+0xec>)
 8001758:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 800) &&
 800175a:	2b48      	cmp	r3, #72	@ 0x48
 800175c:	d906      	bls.n	800176c <checkButtonsPage3+0xe4>
			  (TS_State.touchY[0] > 72) && (TS_State.touchY[0] < 480)) {
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <checkButtonsPage3+0xec>)
 8001760:	88db      	ldrh	r3, [r3, #6]
 8001762:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001766:	d201      	bcs.n	800176c <checkButtonsPage3+0xe4>
				updatePage3();
 8001768:	f000 ff7a 	bl	8002660 <updatePage3>
			}
		}
	}
}
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200308fc 	.word	0x200308fc
 8001778:	20020004 	.word	0x20020004
 800177c:	200307bc 	.word	0x200307bc
 8001780:	200307c0 	.word	0x200307c0
 8001784:	200307c4 	.word	0x200307c4

08001788 <checkButtonsPage4>:
/************************************************************************************/

/************************************************************************************/
void checkButtonsPage4(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	static TS_StateTypeDef  TS_State={0};

	if(TS_State.touchDetected == 1)    // test for new button press
 800178c:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <checkButtonsPage4+0x234>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d103      	bne.n	800179c <checkButtonsPage4+0x14>
	{
		BSP_TS_GetState(&TS_State);
 8001794:	4889      	ldr	r0, [pc, #548]	@ (80019bc <checkButtonsPage4+0x234>)
 8001796:	f010 f917 	bl	80119c8 <BSP_TS_GetState>
					wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, wav_gen_output_volume_dB);
				}
			}
		}
	}
}
 800179a:	e10c      	b.n	80019b6 <checkButtonsPage4+0x22e>
		BSP_TS_GetState(&TS_State);
 800179c:	4887      	ldr	r0, [pc, #540]	@ (80019bc <checkButtonsPage4+0x234>)
 800179e:	f010 f913 	bl	80119c8 <BSP_TS_GetState>
		if(TS_State.touchDetected == 1)
 80017a2:	4b86      	ldr	r3, [pc, #536]	@ (80019bc <checkButtonsPage4+0x234>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 8105 	bne.w	80019b6 <checkButtonsPage4+0x22e>
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav sinus
 80017ac:	4b83      	ldr	r3, [pc, #524]	@ (80019bc <checkButtonsPage4+0x234>)
 80017ae:	885b      	ldrh	r3, [r3, #2]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <checkButtonsPage4+0x4e>
 80017b4:	4b81      	ldr	r3, [pc, #516]	@ (80019bc <checkButtonsPage4+0x234>)
 80017b6:	885b      	ldrh	r3, [r3, #2]
 80017b8:	2be5      	cmp	r3, #229	@ 0xe5
 80017ba:	d80c      	bhi.n	80017d6 <checkButtonsPage4+0x4e>
			  (TS_State.touchY[0] > 104) && (TS_State.touchY[0] < 204)) {
 80017bc:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <checkButtonsPage4+0x234>)
 80017be:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav sinus
 80017c0:	2b68      	cmp	r3, #104	@ 0x68
 80017c2:	d908      	bls.n	80017d6 <checkButtonsPage4+0x4e>
			  (TS_State.touchY[0] > 104) && (TS_State.touchY[0] < 204)) {
 80017c4:	4b7d      	ldr	r3, [pc, #500]	@ (80019bc <checkButtonsPage4+0x234>)
 80017c6:	88db      	ldrh	r3, [r3, #6]
 80017c8:	2bcb      	cmp	r3, #203	@ 0xcb
 80017ca:	d804      	bhi.n	80017d6 <checkButtonsPage4+0x4e>
				wav_gen = WAV_SINUS;
 80017cc:	4b7c      	ldr	r3, [pc, #496]	@ (80019c0 <checkButtonsPage4+0x238>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
				updatePage4();
 80017d2:	f001 fae7 	bl	8002da4 <updatePage4>
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav rectange
 80017d6:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <checkButtonsPage4+0x234>)
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d011      	beq.n	8001802 <checkButtonsPage4+0x7a>
 80017de:	4b77      	ldr	r3, [pc, #476]	@ (80019bc <checkButtonsPage4+0x234>)
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	2be5      	cmp	r3, #229	@ 0xe5
 80017e4:	d80d      	bhi.n	8001802 <checkButtonsPage4+0x7a>
			  (TS_State.touchY[0] > 237) && (TS_State.touchY[0] < 337)) {
 80017e6:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <checkButtonsPage4+0x234>)
 80017e8:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav rectange
 80017ea:	2bed      	cmp	r3, #237	@ 0xed
 80017ec:	d909      	bls.n	8001802 <checkButtonsPage4+0x7a>
			  (TS_State.touchY[0] > 237) && (TS_State.touchY[0] < 337)) {
 80017ee:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <checkButtonsPage4+0x234>)
 80017f0:	88db      	ldrh	r3, [r3, #6]
 80017f2:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80017f6:	d804      	bhi.n	8001802 <checkButtonsPage4+0x7a>
				wav_gen = WAV_RECTANGLE;
 80017f8:	4b71      	ldr	r3, [pc, #452]	@ (80019c0 <checkButtonsPage4+0x238>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
				updatePage4();
 80017fe:	f001 fad1 	bl	8002da4 <updatePage4>
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav sawtooth
 8001802:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <checkButtonsPage4+0x234>)
 8001804:	885b      	ldrh	r3, [r3, #2]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d012      	beq.n	8001830 <checkButtonsPage4+0xa8>
 800180a:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <checkButtonsPage4+0x234>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	2be5      	cmp	r3, #229	@ 0xe5
 8001810:	d80e      	bhi.n	8001830 <checkButtonsPage4+0xa8>
			  (TS_State.touchY[0] > 370) && (TS_State.touchY[0] < 480)) {
 8001812:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <checkButtonsPage4+0x234>)
 8001814:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 230) && 	// wav sawtooth
 8001816:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 800181a:	d909      	bls.n	8001830 <checkButtonsPage4+0xa8>
			  (TS_State.touchY[0] > 370) && (TS_State.touchY[0] < 480)) {
 800181c:	4b67      	ldr	r3, [pc, #412]	@ (80019bc <checkButtonsPage4+0x234>)
 800181e:	88db      	ldrh	r3, [r3, #6]
 8001820:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001824:	d204      	bcs.n	8001830 <checkButtonsPage4+0xa8>
				wav_gen = WAV_SAWTOOTH;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <checkButtonsPage4+0x238>)
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
				updatePage4();
 800182c:	f001 faba 	bl	8002da4 <updatePage4>
			if((TS_State.touchX[0] > 290) && (TS_State.touchX[0] < 510) && 	// frequency + 100 Hz
 8001830:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <checkButtonsPage4+0x234>)
 8001832:	885b      	ldrh	r3, [r3, #2]
 8001834:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8001838:	d926      	bls.n	8001888 <checkButtonsPage4+0x100>
 800183a:	4b60      	ldr	r3, [pc, #384]	@ (80019bc <checkButtonsPage4+0x234>)
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001842:	d221      	bcs.n	8001888 <checkButtonsPage4+0x100>
			  (TS_State.touchY[0] > 137) && (TS_State.touchY[0] < 237)) {
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <checkButtonsPage4+0x234>)
 8001846:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 290) && (TS_State.touchX[0] < 510) && 	// frequency + 100 Hz
 8001848:	2b89      	cmp	r3, #137	@ 0x89
 800184a:	d91d      	bls.n	8001888 <checkButtonsPage4+0x100>
			  (TS_State.touchY[0] > 137) && (TS_State.touchY[0] < 237)) {
 800184c:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <checkButtonsPage4+0x234>)
 800184e:	88db      	ldrh	r3, [r3, #6]
 8001850:	2bec      	cmp	r3, #236	@ 0xec
 8001852:	d819      	bhi.n	8001888 <checkButtonsPage4+0x100>
				if((wav_gen_output_frequency + 100) <= (CODEC_SAMPLING_FREQUENCY / 2)){
 8001854:	4b5b      	ldr	r3, [pc, #364]	@ (80019c4 <checkButtonsPage4+0x23c>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80019c8 <checkButtonsPage4+0x240>
 800185e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001862:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80019cc <checkButtonsPage4+0x244>
 8001866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d80b      	bhi.n	8001888 <checkButtonsPage4+0x100>
					wav_gen_output_frequency = wav_gen_output_frequency + 100;
 8001870:	4b54      	ldr	r3, [pc, #336]	@ (80019c4 <checkButtonsPage4+0x23c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80019c8 <checkButtonsPage4+0x240>
 800187a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800187e:	4b51      	ldr	r3, [pc, #324]	@ (80019c4 <checkButtonsPage4+0x23c>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
					drawWaveGenInfo();
 8001884:	f001 fe40 	bl	8003508 <drawWaveGenInfo>
			if((TS_State.touchX[0] > 290) && (TS_State.touchX[0] < 510) && 	// frequency - 100 Hz
 8001888:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <checkButtonsPage4+0x234>)
 800188a:	885b      	ldrh	r3, [r3, #2]
 800188c:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8001890:	d924      	bls.n	80018dc <checkButtonsPage4+0x154>
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <checkButtonsPage4+0x234>)
 8001894:	885b      	ldrh	r3, [r3, #2]
 8001896:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800189a:	d21f      	bcs.n	80018dc <checkButtonsPage4+0x154>
			  (TS_State.touchY[0] > 337) && (TS_State.touchY[0] < 437)) {
 800189c:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <checkButtonsPage4+0x234>)
 800189e:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 290) && (TS_State.touchX[0] < 510) && 	// frequency - 100 Hz
 80018a0:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 80018a4:	d31a      	bcc.n	80018dc <checkButtonsPage4+0x154>
			  (TS_State.touchY[0] > 337) && (TS_State.touchY[0] < 437)) {
 80018a6:	4b45      	ldr	r3, [pc, #276]	@ (80019bc <checkButtonsPage4+0x234>)
 80018a8:	88db      	ldrh	r3, [r3, #6]
 80018aa:	f5b3 7fda 	cmp.w	r3, #436	@ 0x1b4
 80018ae:	d815      	bhi.n	80018dc <checkButtonsPage4+0x154>
				if(wav_gen_output_frequency > 100){
 80018b0:	4b44      	ldr	r3, [pc, #272]	@ (80019c4 <checkButtonsPage4+0x23c>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80019c8 <checkButtonsPage4+0x240>
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	dd0b      	ble.n	80018dc <checkButtonsPage4+0x154>
					wav_gen_output_frequency = wav_gen_output_frequency - 100;
 80018c4:	4b3f      	ldr	r3, [pc, #252]	@ (80019c4 <checkButtonsPage4+0x23c>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80019c8 <checkButtonsPage4+0x240>
 80018ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018d2:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <checkButtonsPage4+0x23c>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
					drawWaveGenInfo();
 80018d8:	f001 fe16 	bl	8003508 <drawWaveGenInfo>
			if((TS_State.touchX[0] > 570) && (TS_State.touchX[0] < 800) && 	// volume + 1 dB
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <checkButtonsPage4+0x234>)
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	f240 223a 	movw	r2, #570	@ 0x23a
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d92e      	bls.n	8001946 <checkButtonsPage4+0x1be>
 80018e8:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <checkButtonsPage4+0x234>)
 80018ea:	885b      	ldrh	r3, [r3, #2]
 80018ec:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80018f0:	d229      	bcs.n	8001946 <checkButtonsPage4+0x1be>
			  (TS_State.touchY[0] > 137) && (TS_State.touchY[0] < 237)) {
 80018f2:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <checkButtonsPage4+0x234>)
 80018f4:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 570) && (TS_State.touchX[0] < 800) && 	// volume + 1 dB
 80018f6:	2b89      	cmp	r3, #137	@ 0x89
 80018f8:	d925      	bls.n	8001946 <checkButtonsPage4+0x1be>
			  (TS_State.touchY[0] > 137) && (TS_State.touchY[0] < 237)) {
 80018fa:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <checkButtonsPage4+0x234>)
 80018fc:	88db      	ldrh	r3, [r3, #6]
 80018fe:	2bec      	cmp	r3, #236	@ 0xec
 8001900:	d821      	bhi.n	8001946 <checkButtonsPage4+0x1be>
				if((wav_gen_output_volume_dB + CODEC_MAX_OUTPUT_VOLUE_STEP) <= CODEC_MAX_OUTPUT_VOLUE_dB){
 8001902:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <checkButtonsPage4+0x248>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001910:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d813      	bhi.n	8001946 <checkButtonsPage4+0x1be>
					wav_gen_output_volume_dB = wav_gen_output_volume_dB + CODEC_MAX_OUTPUT_VOLUE_STEP;
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <checkButtonsPage4+0x248>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <checkButtonsPage4+0x248>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
					drawWaveGenInfo();
 8001932:	f001 fde9 	bl	8003508 <drawWaveGenInfo>
					wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, wav_gen_output_volume_dB);
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <checkButtonsPage4+0x248>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	2034      	movs	r0, #52	@ 0x34
 8001942:	f004 fda9 	bl	8006498 <wm8994_SetOutputVolume_dB>
			if((TS_State.touchX[0] > 570) && (TS_State.touchX[0] < 800) && 	// volume - 1 dB
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <checkButtonsPage4+0x234>)
 8001948:	885b      	ldrh	r3, [r3, #2]
 800194a:	f240 223a 	movw	r2, #570	@ 0x23a
 800194e:	4293      	cmp	r3, r2
 8001950:	d931      	bls.n	80019b6 <checkButtonsPage4+0x22e>
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <checkButtonsPage4+0x234>)
 8001954:	885b      	ldrh	r3, [r3, #2]
 8001956:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800195a:	d22c      	bcs.n	80019b6 <checkButtonsPage4+0x22e>
			  (TS_State.touchY[0] > 337) && (TS_State.touchY[0] < 437)) {
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <checkButtonsPage4+0x234>)
 800195e:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 570) && (TS_State.touchX[0] < 800) && 	// volume - 1 dB
 8001960:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 8001964:	d327      	bcc.n	80019b6 <checkButtonsPage4+0x22e>
			  (TS_State.touchY[0] > 337) && (TS_State.touchY[0] < 437)) {
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <checkButtonsPage4+0x234>)
 8001968:	88db      	ldrh	r3, [r3, #6]
 800196a:	f5b3 7fda 	cmp.w	r3, #436	@ 0x1b4
 800196e:	d822      	bhi.n	80019b6 <checkButtonsPage4+0x22e>
				if((wav_gen_output_volume_dB - CODEC_MAX_OUTPUT_VOLUE_STEP) >= CODEC_MIN_OUTPUT_VOLUE_dB){
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <checkButtonsPage4+0x248>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800197a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800197e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80019d4 <checkButtonsPage4+0x24c>
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	da00      	bge.n	800198e <checkButtonsPage4+0x206>
}
 800198c:	e013      	b.n	80019b6 <checkButtonsPage4+0x22e>
					wav_gen_output_volume_dB = wav_gen_output_volume_dB - CODEC_MAX_OUTPUT_VOLUE_STEP;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <checkButtonsPage4+0x248>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <checkButtonsPage4+0x248>)
 800199e:	edc3 7a00 	vstr	s15, [r3]
					drawWaveGenInfo();
 80019a2:	f001 fdb1 	bl	8003508 <drawWaveGenInfo>
					wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, wav_gen_output_volume_dB);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <checkButtonsPage4+0x248>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	2034      	movs	r0, #52	@ 0x34
 80019b2:	f004 fd71 	bl	8006498 <wm8994_SetOutputVolume_dB>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20030908 	.word	0x20030908
 80019c0:	20011024 	.word	0x20011024
 80019c4:	20011020 	.word	0x20011020
 80019c8:	42c80000 	.word	0x42c80000
 80019cc:	46bb8000 	.word	0x46bb8000
 80019d0:	20020000 	.word	0x20020000
 80019d4:	c2640000 	.word	0xc2640000

080019d8 <checkButtonsPage5>:
/************************************************************************************/

/************************************************************************************/
void checkButtonsPage5(void){} // do nothing here
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <updatePage1>:
	updatePageX

 	Update only the changed information on the page X.
*/
/***********************************************************************************/
void updatePage1(void){
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b09f      	sub	sp, #124	@ 0x7c
 80019f0:	af02      	add	r7, sp, #8
	char string_buffer[100];
	uint16_t line;
	float vol_vpp;
	float vol_rms;

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019f2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80019f6:	f00e fc0d 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 72, 689, 296);
 80019fa:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80019fe:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8001a02:	2148      	movs	r1, #72	@ 0x48
 8001a04:	2000      	movs	r0, #0
 8001a06:	f00e fe5b 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001a0a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a0e:	f00e fc19 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295
 8001a16:	f00e fbfd 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&INFO_TEXT_FONT_PAGE_1);
 8001a1a:	48c7      	ldr	r0, [pc, #796]	@ (8001d38 <updatePage1+0x350>)
 8001a1c:	f00e fc2c 	bl	8010278 <BSP_LCD_SetFont>

	switch(user_mode){
 8001a20:	4bc6      	ldr	r3, [pc, #792]	@ (8001d3c <updatePage1+0x354>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	f200 833f 	bhi.w	80020a8 <updatePage1+0x6c0>
 8001a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a30 <updatePage1+0x48>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a49 	.word	0x08001a49
 8001a34:	08001b31 	.word	0x08001b31
 8001a38:	08001c35 	.word	0x08001c35
 8001a3c:	08001d79 	.word	0x08001d79
 8001a40:	08001e7d 	.word	0x08001e7d
 8001a44:	08001fa5 	.word	0x08001fa5
		case 0:
			snprintf(string_buffer,100, NO_MODE_LINE_1);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4abd      	ldr	r2, [pc, #756]	@ (8001d40 <updatePage1+0x358>)
 8001a4c:	2164      	movs	r1, #100	@ 0x64
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f012 fa90 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001a54:	463a      	mov	r2, r7
 8001a56:	2303      	movs	r3, #3
 8001a58:	2160      	movs	r1, #96	@ 0x60
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f00e fc92 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, NO_MODE_LINE_2);
 8001a66:	463b      	mov	r3, r7
 8001a68:	4ab6      	ldr	r2, [pc, #728]	@ (8001d44 <updatePage1+0x35c>)
 8001a6a:	2164      	movs	r1, #100	@ 0x64
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f012 fa81 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001a72:	4bb1      	ldr	r3, [pc, #708]	@ (8001d38 <updatePage1+0x350>)
 8001a74:	88db      	ldrh	r3, [r3, #6]
 8001a76:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001a7a:	fb12 f303 	smulbb	r3, r2, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3360      	adds	r3, #96	@ 0x60
 8001a82:	b299      	uxth	r1, r3
 8001a84:	463a      	mov	r2, r7
 8001a86:	2303      	movs	r3, #3
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f00e fc7b 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, NO_MODE_LINE_3);
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4aab      	ldr	r2, [pc, #684]	@ (8001d48 <updatePage1+0x360>)
 8001a9c:	2164      	movs	r1, #100	@ 0x64
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f012 fa68 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001aa4:	4ba4      	ldr	r3, [pc, #656]	@ (8001d38 <updatePage1+0x350>)
 8001aa6:	88db      	ldrh	r3, [r3, #6]
 8001aa8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001aac:	fb12 f303 	smulbb	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3360      	adds	r3, #96	@ 0x60
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	463a      	mov	r2, r7
 8001ab8:	2303      	movs	r3, #3
 8001aba:	200a      	movs	r0, #10
 8001abc:	f00e fc62 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001ac0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, NO_MODE_LINE_4);
 8001aca:	463b      	mov	r3, r7
 8001acc:	4a9f      	ldr	r2, [pc, #636]	@ (8001d4c <updatePage1+0x364>)
 8001ace:	2164      	movs	r1, #100	@ 0x64
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f012 fa4f 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001ad6:	4b98      	ldr	r3, [pc, #608]	@ (8001d38 <updatePage1+0x350>)
 8001ad8:	88db      	ldrh	r3, [r3, #6]
 8001ada:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001ade:	fb12 f303 	smulbb	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3360      	adds	r3, #96	@ 0x60
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	463a      	mov	r2, r7
 8001aea:	2303      	movs	r3, #3
 8001aec:	200a      	movs	r0, #10
 8001aee:	f00e fc49 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001af2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, NO_MODE_LINE_5);
 8001afc:	463b      	mov	r3, r7
 8001afe:	4a94      	ldr	r2, [pc, #592]	@ (8001d50 <updatePage1+0x368>)
 8001b00:	2164      	movs	r1, #100	@ 0x64
 8001b02:	4618      	mov	r0, r3
 8001b04:	f012 fa36 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001b08:	4b8b      	ldr	r3, [pc, #556]	@ (8001d38 <updatePage1+0x350>)
 8001b0a:	88db      	ldrh	r3, [r3, #6]
 8001b0c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001b10:	fb12 f303 	smulbb	r3, r2, r3
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3360      	adds	r3, #96	@ 0x60
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	463a      	mov	r2, r7
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f00e fc30 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001b24:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		break;
 8001b2e:	e2bb      	b.n	80020a8 <updatePage1+0x6c0>

		case 1:
			snprintf(string_buffer,100, MODE_1_LINE_1);
 8001b30:	463b      	mov	r3, r7
 8001b32:	4a88      	ldr	r2, [pc, #544]	@ (8001d54 <updatePage1+0x36c>)
 8001b34:	2164      	movs	r1, #100	@ 0x64
 8001b36:	4618      	mov	r0, r3
 8001b38:	f012 fa1c 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001b3c:	463a      	mov	r2, r7
 8001b3e:	2303      	movs	r3, #3
 8001b40:	2160      	movs	r1, #96	@ 0x60
 8001b42:	200a      	movs	r0, #10
 8001b44:	f00e fc1e 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_1_LINE_2);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4a7f      	ldr	r2, [pc, #508]	@ (8001d50 <updatePage1+0x368>)
 8001b52:	2164      	movs	r1, #100	@ 0x64
 8001b54:	4618      	mov	r0, r3
 8001b56:	f012 fa0d 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001b5a:	4b77      	ldr	r3, [pc, #476]	@ (8001d38 <updatePage1+0x350>)
 8001b5c:	88db      	ldrh	r3, [r3, #6]
 8001b5e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001b62:	fb12 f303 	smulbb	r3, r2, r3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3360      	adds	r3, #96	@ 0x60
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	463a      	mov	r2, r7
 8001b6e:	2303      	movs	r3, #3
 8001b70:	200a      	movs	r0, #10
 8001b72:	f00e fc07 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001b76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_1_LINE_3);
 8001b80:	463b      	mov	r3, r7
 8001b82:	4a75      	ldr	r2, [pc, #468]	@ (8001d58 <updatePage1+0x370>)
 8001b84:	2164      	movs	r1, #100	@ 0x64
 8001b86:	4618      	mov	r0, r3
 8001b88:	f012 f9f4 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <updatePage1+0x350>)
 8001b8e:	88db      	ldrh	r3, [r3, #6]
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001b94:	fb12 f303 	smulbb	r3, r2, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3360      	adds	r3, #96	@ 0x60
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	463a      	mov	r2, r7
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f00e fbee 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001ba8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001bac:	3301      	adds	r3, #1
 8001bae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_1_LINE_4);
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4a69      	ldr	r2, [pc, #420]	@ (8001d5c <updatePage1+0x374>)
 8001bb6:	2164      	movs	r1, #100	@ 0x64
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f012 f9db 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8001d38 <updatePage1+0x350>)
 8001bc0:	88db      	ldrh	r3, [r3, #6]
 8001bc2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001bc6:	fb12 f303 	smulbb	r3, r2, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3360      	adds	r3, #96	@ 0x60
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	463a      	mov	r2, r7
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	200a      	movs	r0, #10
 8001bd6:	f00e fbd5 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001bda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001bde:	3301      	adds	r3, #1
 8001be0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_1_LINE_5);
 8001be4:	463b      	mov	r3, r7
 8001be6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d60 <updatePage1+0x378>)
 8001be8:	2164      	movs	r1, #100	@ 0x64
 8001bea:	4618      	mov	r0, r3
 8001bec:	f012 f9c2 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001bf0:	4b51      	ldr	r3, [pc, #324]	@ (8001d38 <updatePage1+0x350>)
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001bf8:	fb12 f303 	smulbb	r3, r2, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3360      	adds	r3, #96	@ 0x60
 8001c00:	b299      	uxth	r1, r3
 8001c02:	463a      	mov	r2, r7
 8001c04:	2303      	movs	r3, #3
 8001c06:	200a      	movs	r0, #10
 8001c08:	f00e fbbc 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001c0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001c10:	3301      	adds	r3, #1
 8001c12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_1[0], LEFT_MODE);
 8001c16:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <updatePage1+0x350>)
 8001c18:	88db      	ldrh	r3, [r3, #6]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3360      	adds	r3, #96	@ 0x60
 8001c26:	b299      	uxth	r1, r3
 8001c28:	2303      	movs	r3, #3
 8001c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d64 <updatePage1+0x37c>)
 8001c2c:	200a      	movs	r0, #10
 8001c2e:	f00e fba9 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8001c32:	e239      	b.n	80020a8 <updatePage1+0x6c0>

		case 2:
			snprintf(string_buffer,100, MODE_2_LINE_1);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <updatePage1+0x380>)
 8001c38:	2164      	movs	r1, #100	@ 0x64
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f012 f99a 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001c40:	463a      	mov	r2, r7
 8001c42:	2303      	movs	r3, #3
 8001c44:	2160      	movs	r1, #96	@ 0x60
 8001c46:	200a      	movs	r0, #10
 8001c48:	f00e fb9c 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_2_LINE_2);
 8001c52:	463b      	mov	r3, r7
 8001c54:	4a3e      	ldr	r2, [pc, #248]	@ (8001d50 <updatePage1+0x368>)
 8001c56:	2164      	movs	r1, #100	@ 0x64
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f012 f98b 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001c5e:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <updatePage1+0x350>)
 8001c60:	88db      	ldrh	r3, [r3, #6]
 8001c62:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c66:	fb12 f303 	smulbb	r3, r2, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3360      	adds	r3, #96	@ 0x60
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	463a      	mov	r2, r7
 8001c72:	2303      	movs	r3, #3
 8001c74:	200a      	movs	r0, #10
 8001c76:	f00e fb85 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001c7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_2_LINE_3);
 8001c84:	463b      	mov	r3, r7
 8001c86:	4a39      	ldr	r2, [pc, #228]	@ (8001d6c <updatePage1+0x384>)
 8001c88:	2164      	movs	r1, #100	@ 0x64
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f012 f972 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001c90:	4b29      	ldr	r3, [pc, #164]	@ (8001d38 <updatePage1+0x350>)
 8001c92:	88db      	ldrh	r3, [r3, #6]
 8001c94:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c98:	fb12 f303 	smulbb	r3, r2, r3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3360      	adds	r3, #96	@ 0x60
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	463a      	mov	r2, r7
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f00e fb6c 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001cac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_2_LINE_4);
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4a28      	ldr	r2, [pc, #160]	@ (8001d5c <updatePage1+0x374>)
 8001cba:	2164      	movs	r1, #100	@ 0x64
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f012 f959 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <updatePage1+0x350>)
 8001cc4:	88db      	ldrh	r3, [r3, #6]
 8001cc6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001cca:	fb12 f303 	smulbb	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3360      	adds	r3, #96	@ 0x60
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	463a      	mov	r2, r7
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f00e fb53 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_2_LINE_5);
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <updatePage1+0x388>)
 8001cec:	2164      	movs	r1, #100	@ 0x64
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f012 f940 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <updatePage1+0x350>)
 8001cf6:	88db      	ldrh	r3, [r3, #6]
 8001cf8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001cfc:	fb12 f303 	smulbb	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3360      	adds	r3, #96	@ 0x60
 8001d04:	b299      	uxth	r1, r3
 8001d06:	463a      	mov	r2, r7
 8001d08:	2303      	movs	r3, #3
 8001d0a:	200a      	movs	r0, #10
 8001d0c:	f00e fb3a 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001d10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001d14:	3301      	adds	r3, #1
 8001d16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_2[0], LEFT_MODE);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <updatePage1+0x350>)
 8001d1c:	88db      	ldrh	r3, [r3, #6]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	0052      	lsls	r2, r2, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3360      	adds	r3, #96	@ 0x60
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <updatePage1+0x38c>)
 8001d30:	200a      	movs	r0, #10
 8001d32:	f00e fb27 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8001d36:	e1b7      	b.n	80020a8 <updatePage1+0x6c0>
 8001d38:	20020688 	.word	0x20020688
 8001d3c:	2001101c 	.word	0x2001101c
 8001d40:	0801aa88 	.word	0x0801aa88
 8001d44:	0801aaa8 	.word	0x0801aaa8
 8001d48:	0801aac0 	.word	0x0801aac0
 8001d4c:	0801aaf0 	.word	0x0801aaf0
 8001d50:	0801ab20 	.word	0x0801ab20
 8001d54:	0801ab24 	.word	0x0801ab24
 8001d58:	0801ab30 	.word	0x0801ab30
 8001d5c:	0801ab44 	.word	0x0801ab44
 8001d60:	0801ab5c 	.word	0x0801ab5c
 8001d64:	20030958 	.word	0x20030958
 8001d68:	0801ab74 	.word	0x0801ab74
 8001d6c:	0801ab80 	.word	0x0801ab80
 8001d70:	0801ab8c 	.word	0x0801ab8c
 8001d74:	2003098c 	.word	0x2003098c

		case 3:
			snprintf(string_buffer,100, MODE_3_LINE_1);
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4a81      	ldr	r2, [pc, #516]	@ (8001f80 <updatePage1+0x598>)
 8001d7c:	2164      	movs	r1, #100	@ 0x64
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f012 f8f8 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001d84:	463a      	mov	r2, r7
 8001d86:	2303      	movs	r3, #3
 8001d88:	2160      	movs	r1, #96	@ 0x60
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f00e fafa 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_3_LINE_2);
 8001d96:	463b      	mov	r3, r7
 8001d98:	4a7a      	ldr	r2, [pc, #488]	@ (8001f84 <updatePage1+0x59c>)
 8001d9a:	2164      	movs	r1, #100	@ 0x64
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f012 f8e9 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001da2:	4b79      	ldr	r3, [pc, #484]	@ (8001f88 <updatePage1+0x5a0>)
 8001da4:	88db      	ldrh	r3, [r3, #6]
 8001da6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001daa:	fb12 f303 	smulbb	r3, r2, r3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3360      	adds	r3, #96	@ 0x60
 8001db2:	b299      	uxth	r1, r3
 8001db4:	463a      	mov	r2, r7
 8001db6:	2303      	movs	r3, #3
 8001db8:	200a      	movs	r0, #10
 8001dba:	f00e fae3 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001dbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_3_LINE_3);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4a70      	ldr	r2, [pc, #448]	@ (8001f8c <updatePage1+0x5a4>)
 8001dcc:	2164      	movs	r1, #100	@ 0x64
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f012 f8d0 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001f88 <updatePage1+0x5a0>)
 8001dd6:	88db      	ldrh	r3, [r3, #6]
 8001dd8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001ddc:	fb12 f303 	smulbb	r3, r2, r3
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3360      	adds	r3, #96	@ 0x60
 8001de4:	b299      	uxth	r1, r3
 8001de6:	463a      	mov	r2, r7
 8001de8:	2303      	movs	r3, #3
 8001dea:	200a      	movs	r0, #10
 8001dec:	f00e faca 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001df0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001df4:	3301      	adds	r3, #1
 8001df6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_3_LINE_4);
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4a64      	ldr	r2, [pc, #400]	@ (8001f90 <updatePage1+0x5a8>)
 8001dfe:	2164      	movs	r1, #100	@ 0x64
 8001e00:	4618      	mov	r0, r3
 8001e02:	f012 f8b7 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001e06:	4b60      	ldr	r3, [pc, #384]	@ (8001f88 <updatePage1+0x5a0>)
 8001e08:	88db      	ldrh	r3, [r3, #6]
 8001e0a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001e0e:	fb12 f303 	smulbb	r3, r2, r3
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3360      	adds	r3, #96	@ 0x60
 8001e16:	b299      	uxth	r1, r3
 8001e18:	463a      	mov	r2, r7
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f00e fab1 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001e22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001e26:	3301      	adds	r3, #1
 8001e28:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_3_LINE_5);
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4a59      	ldr	r2, [pc, #356]	@ (8001f94 <updatePage1+0x5ac>)
 8001e30:	2164      	movs	r1, #100	@ 0x64
 8001e32:	4618      	mov	r0, r3
 8001e34:	f012 f89e 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001e38:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <updatePage1+0x5a0>)
 8001e3a:	88db      	ldrh	r3, [r3, #6]
 8001e3c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001e40:	fb12 f303 	smulbb	r3, r2, r3
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3360      	adds	r3, #96	@ 0x60
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	463a      	mov	r2, r7
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f00e fa98 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001e54:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_3[0], LEFT_MODE);
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <updatePage1+0x5a0>)
 8001e60:	88db      	ldrh	r3, [r3, #6]
 8001e62:	461a      	mov	r2, r3
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3360      	adds	r3, #96	@ 0x60
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	2303      	movs	r3, #3
 8001e72:	4a49      	ldr	r2, [pc, #292]	@ (8001f98 <updatePage1+0x5b0>)
 8001e74:	200a      	movs	r0, #10
 8001e76:	f00e fa85 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8001e7a:	e115      	b.n	80020a8 <updatePage1+0x6c0>

		case 4:
			snprintf(string_buffer,100, MODE_4_LINE_1);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4a47      	ldr	r2, [pc, #284]	@ (8001f9c <updatePage1+0x5b4>)
 8001e80:	2164      	movs	r1, #100	@ 0x64
 8001e82:	4618      	mov	r0, r3
 8001e84:	f012 f876 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001e88:	463a      	mov	r2, r7
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	2160      	movs	r1, #96	@ 0x60
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f00e fa78 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_4_LINE_2);
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4a39      	ldr	r2, [pc, #228]	@ (8001f84 <updatePage1+0x59c>)
 8001e9e:	2164      	movs	r1, #100	@ 0x64
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f012 f867 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001ea6:	4b38      	ldr	r3, [pc, #224]	@ (8001f88 <updatePage1+0x5a0>)
 8001ea8:	88db      	ldrh	r3, [r3, #6]
 8001eaa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001eae:	fb12 f303 	smulbb	r3, r2, r3
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3360      	adds	r3, #96	@ 0x60
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	463a      	mov	r2, r7
 8001eba:	2303      	movs	r3, #3
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f00e fa61 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_4_LINE_3);
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <updatePage1+0x5a4>)
 8001ed0:	2164      	movs	r1, #100	@ 0x64
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f012 f84e 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <updatePage1+0x5a0>)
 8001eda:	88db      	ldrh	r3, [r3, #6]
 8001edc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001ee0:	fb12 f303 	smulbb	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3360      	adds	r3, #96	@ 0x60
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	463a      	mov	r2, r7
 8001eec:	2303      	movs	r3, #3
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f00e fa48 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001ef4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_4_LINE_4);
 8001efe:	463b      	mov	r3, r7
 8001f00:	4a23      	ldr	r2, [pc, #140]	@ (8001f90 <updatePage1+0x5a8>)
 8001f02:	2164      	movs	r1, #100	@ 0x64
 8001f04:	4618      	mov	r0, r3
 8001f06:	f012 f835 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <updatePage1+0x5a0>)
 8001f0c:	88db      	ldrh	r3, [r3, #6]
 8001f0e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f12:	fb12 f303 	smulbb	r3, r2, r3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3360      	adds	r3, #96	@ 0x60
 8001f1a:	b299      	uxth	r1, r3
 8001f1c:	463a      	mov	r2, r7
 8001f1e:	2303      	movs	r3, #3
 8001f20:	200a      	movs	r0, #10
 8001f22:	f00e fa2f 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001f26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_4_LINE_5);
 8001f30:	463b      	mov	r3, r7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <updatePage1+0x5ac>)
 8001f34:	2164      	movs	r1, #100	@ 0x64
 8001f36:	4618      	mov	r0, r3
 8001f38:	f012 f81c 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <updatePage1+0x5a0>)
 8001f3e:	88db      	ldrh	r3, [r3, #6]
 8001f40:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f44:	fb12 f303 	smulbb	r3, r2, r3
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3360      	adds	r3, #96	@ 0x60
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	463a      	mov	r2, r7
 8001f50:	2303      	movs	r3, #3
 8001f52:	200a      	movs	r0, #10
 8001f54:	f00e fa16 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001f58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_4[0], LEFT_MODE);
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <updatePage1+0x5a0>)
 8001f64:	88db      	ldrh	r3, [r3, #6]
 8001f66:	461a      	mov	r2, r3
 8001f68:	0052      	lsls	r2, r2, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3360      	adds	r3, #96	@ 0x60
 8001f72:	b299      	uxth	r1, r3
 8001f74:	2303      	movs	r3, #3
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <updatePage1+0x5b8>)
 8001f78:	200a      	movs	r0, #10
 8001f7a:	f00e fa03 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8001f7e:	e093      	b.n	80020a8 <updatePage1+0x6c0>
 8001f80:	0801aba4 	.word	0x0801aba4
 8001f84:	0801ab20 	.word	0x0801ab20
 8001f88:	20020688 	.word	0x20020688
 8001f8c:	0801ab80 	.word	0x0801ab80
 8001f90:	0801ab44 	.word	0x0801ab44
 8001f94:	0801ab8c 	.word	0x0801ab8c
 8001f98:	200309c0 	.word	0x200309c0
 8001f9c:	0801abb0 	.word	0x0801abb0
 8001fa0:	200309f4 	.word	0x200309f4

		case 5:
			snprintf(string_buffer,100, MODE_5_LINE_1);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4ac8      	ldr	r2, [pc, #800]	@ (80022c8 <updatePage1+0x8e0>)
 8001fa8:	2164      	movs	r1, #100	@ 0x64
 8001faa:	4618      	mov	r0, r3
 8001fac:	f011 ffe2 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001fb0:	463a      	mov	r2, r7
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	2160      	movs	r1, #96	@ 0x60
 8001fb6:	200a      	movs	r0, #10
 8001fb8:	f00e f9e4 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_5_LINE_2);
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4ac1      	ldr	r2, [pc, #772]	@ (80022cc <updatePage1+0x8e4>)
 8001fc6:	2164      	movs	r1, #100	@ 0x64
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f011 ffd3 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8001fce:	4bc0      	ldr	r3, [pc, #768]	@ (80022d0 <updatePage1+0x8e8>)
 8001fd0:	88db      	ldrh	r3, [r3, #6]
 8001fd2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001fd6:	fb12 f303 	smulbb	r3, r2, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3360      	adds	r3, #96	@ 0x60
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	463a      	mov	r2, r7
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f00e f9cd 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8001fea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_5_LINE_3);
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4ab7      	ldr	r2, [pc, #732]	@ (80022d4 <updatePage1+0x8ec>)
 8001ff8:	2164      	movs	r1, #100	@ 0x64
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f011 ffba 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002000:	4bb3      	ldr	r3, [pc, #716]	@ (80022d0 <updatePage1+0x8e8>)
 8002002:	88db      	ldrh	r3, [r3, #6]
 8002004:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002008:	fb12 f303 	smulbb	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	3360      	adds	r3, #96	@ 0x60
 8002010:	b299      	uxth	r1, r3
 8002012:	463a      	mov	r2, r7
 8002014:	2303      	movs	r3, #3
 8002016:	200a      	movs	r0, #10
 8002018:	f00e f9b4 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 800201c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002020:	3301      	adds	r3, #1
 8002022:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_5_LINE_4);
 8002026:	463b      	mov	r3, r7
 8002028:	4aab      	ldr	r2, [pc, #684]	@ (80022d8 <updatePage1+0x8f0>)
 800202a:	2164      	movs	r1, #100	@ 0x64
 800202c:	4618      	mov	r0, r3
 800202e:	f011 ffa1 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002032:	4ba7      	ldr	r3, [pc, #668]	@ (80022d0 <updatePage1+0x8e8>)
 8002034:	88db      	ldrh	r3, [r3, #6]
 8002036:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800203a:	fb12 f303 	smulbb	r3, r2, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	3360      	adds	r3, #96	@ 0x60
 8002042:	b299      	uxth	r1, r3
 8002044:	463a      	mov	r2, r7
 8002046:	2303      	movs	r3, #3
 8002048:	200a      	movs	r0, #10
 800204a:	f00e f99b 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 800204e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002052:	3301      	adds	r3, #1
 8002054:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			snprintf(string_buffer,100, MODE_5_LINE_5);
 8002058:	463b      	mov	r3, r7
 800205a:	4aa0      	ldr	r2, [pc, #640]	@ (80022dc <updatePage1+0x8f4>)
 800205c:	2164      	movs	r1, #100	@ 0x64
 800205e:	4618      	mov	r0, r3
 8002060:	f011 ff88 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002064:	4b9a      	ldr	r3, [pc, #616]	@ (80022d0 <updatePage1+0x8e8>)
 8002066:	88db      	ldrh	r3, [r3, #6]
 8002068:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800206c:	fb12 f303 	smulbb	r3, r2, r3
 8002070:	b29b      	uxth	r3, r3
 8002072:	3360      	adds	r3, #96	@ 0x60
 8002074:	b299      	uxth	r1, r3
 8002076:	463a      	mov	r2, r7
 8002078:	2303      	movs	r3, #3
 800207a:	200a      	movs	r0, #10
 800207c:	f00e f982 	bl	8010384 <BSP_LCD_DisplayStringAt>
			line++;
 8002080:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002084:	3301      	adds	r3, #1
 8002086:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

			BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * 12, (uint8_t *)&user_text_line_mode_5[0], LEFT_MODE);
 800208a:	4b91      	ldr	r3, [pc, #580]	@ (80022d0 <updatePage1+0x8e8>)
 800208c:	88db      	ldrh	r3, [r3, #6]
 800208e:	461a      	mov	r2, r3
 8002090:	0052      	lsls	r2, r2, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	b29b      	uxth	r3, r3
 8002098:	3360      	adds	r3, #96	@ 0x60
 800209a:	b299      	uxth	r1, r3
 800209c:	2303      	movs	r3, #3
 800209e:	4a90      	ldr	r2, [pc, #576]	@ (80022e0 <updatePage1+0x8f8>)
 80020a0:	200a      	movs	r0, #10
 80020a2:	f00e f96f 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 80020a6:	bf00      	nop
	}

	line++;
 80020a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Eingangspegel: full scale = 2.800 Vpp");
 80020b2:	463b      	mov	r3, r7
 80020b4:	4a8b      	ldr	r2, [pc, #556]	@ (80022e4 <updatePage1+0x8fc>)
 80020b6:	2164      	movs	r1, #100	@ 0x64
 80020b8:	4618      	mov	r0, r3
 80020ba:	f011 ff5b 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80020be:	4b84      	ldr	r3, [pc, #528]	@ (80022d0 <updatePage1+0x8e8>)
 80020c0:	88db      	ldrh	r3, [r3, #6]
 80020c2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80020c6:	fb12 f303 	smulbb	r3, r2, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3360      	adds	r3, #96	@ 0x60
 80020ce:	b299      	uxth	r1, r3
 80020d0:	463a      	mov	r2, r7
 80020d2:	2303      	movs	r3, #3
 80020d4:	200a      	movs	r0, #10
 80020d6:	f00e f955 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 80020da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80020de:	3301      	adds	r3, #1
 80020e0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	line++;
 80020e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80020e8:	3301      	adds	r3, #1
 80020ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	vol_vpp = pow((double)10, (double)audio_output_volume_dB/(double)20) * 2.8;
 80020ee:	4b7e      	ldr	r3, [pc, #504]	@ (80022e8 <updatePage1+0x900>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020f8:	eeb3 5b04 	vmov.f64	d5, #52	@ 0x41a00000  20.0
 80020fc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002100:	eeb0 1b46 	vmov.f64	d1, d6
 8002104:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002108:	f013 f80a 	bl	8015120 <pow>
 800210c:	eeb0 7b40 	vmov.f64	d7, d0
 8002110:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80022b8 <updatePage1+0x8d0>
 8002114:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002118:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800211c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	vol_rms = pow((double)10, (double)audio_output_volume_dB/(double)20);
 8002120:	4b71      	ldr	r3, [pc, #452]	@ (80022e8 <updatePage1+0x900>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800212a:	eeb3 5b04 	vmov.f64	d5, #52	@ 0x41a00000  20.0
 800212e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002132:	eeb0 1b46 	vmov.f64	d1, d6
 8002136:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800213a:	f012 fff1 	bl	8015120 <pow>
 800213e:	eeb0 7b40 	vmov.f64	d7, d0
 8002142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002146:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

	snprintf(string_buffer,100, "Spannungsverstaerkung: %li dB = %li.%.03li", (int32_t)audio_output_volume_dB, (int32_t)(vol_rms), (int32_t)fmod(vol_rms * 1000, (double)1000));
 800214a:	4b67      	ldr	r3, [pc, #412]	@ (80022e8 <updatePage1+0x900>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8002154:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215c:	ee17 4a90 	vmov	r4, s15
 8002160:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002164:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80022ec <updatePage1+0x904>
 8002168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002170:	ed9f 1b53 	vldr	d1, [pc, #332]	@ 80022c0 <updatePage1+0x8d8>
 8002174:	eeb0 0b47 	vmov.f64	d0, d7
 8002178:	f012 fed2 	bl	8014f20 <fmod>
 800217c:	eeb0 7b40 	vmov.f64	d7, d0
 8002180:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	4638      	mov	r0, r7
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9400      	str	r4, [sp, #0]
 800218e:	ee18 3a10 	vmov	r3, s16
 8002192:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <updatePage1+0x908>)
 8002194:	2164      	movs	r1, #100	@ 0x64
 8002196:	f011 feed 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800219a:	4b4d      	ldr	r3, [pc, #308]	@ (80022d0 <updatePage1+0x8e8>)
 800219c:	88db      	ldrh	r3, [r3, #6]
 800219e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80021a2:	fb12 f303 	smulbb	r3, r2, r3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3360      	adds	r3, #96	@ 0x60
 80021aa:	b299      	uxth	r1, r3
 80021ac:	463a      	mov	r2, r7
 80021ae:	2303      	movs	r3, #3
 80021b0:	200a      	movs	r0, #10
 80021b2:	f00e f8e7 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 80021b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80021ba:	3301      	adds	r3, #1
 80021bc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	snprintf(string_buffer,100, "Ausgangspegel: full scale = %li.%.03li Vpp",(int32_t)(vol_vpp), (int32_t)fmod(vol_vpp * 1000, (double)1000));
 80021c0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80021c4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80021c8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80021cc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022ec <updatePage1+0x904>
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d8:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 80022c0 <updatePage1+0x8d8>
 80021dc:	eeb0 0b47 	vmov.f64	d0, d7
 80021e0:	f012 fe9e 	bl	8014f20 <fmod>
 80021e4:	eeb0 7b40 	vmov.f64	d7, d0
 80021e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80021ec:	ee17 3a90 	vmov	r3, s15
 80021f0:	4638      	mov	r0, r7
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	ee18 3a10 	vmov	r3, s16
 80021f8:	4a3e      	ldr	r2, [pc, #248]	@ (80022f4 <updatePage1+0x90c>)
 80021fa:	2164      	movs	r1, #100	@ 0x64
 80021fc:	f011 feba 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_5.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002200:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <updatePage1+0x8e8>)
 8002202:	88db      	ldrh	r3, [r3, #6]
 8002204:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002208:	fb12 f303 	smulbb	r3, r2, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	3360      	adds	r3, #96	@ 0x60
 8002210:	b299      	uxth	r1, r3
 8002212:	463a      	mov	r2, r7
 8002214:	2303      	movs	r3, #3
 8002216:	200a      	movs	r0, #10
 8002218:	f00e f8b4 	bl	8010384 <BSP_LCD_DisplayStringAt>
	line++;
 800221c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002220:	3301      	adds	r3, #1
 8002222:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	if(audio_output_volume_dB > 0){
 8002226:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <updatePage1+0x900>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd34      	ble.n	80022a0 <updatePage1+0x8b8>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8002236:	4830      	ldr	r0, [pc, #192]	@ (80022f8 <updatePage1+0x910>)
 8002238:	f00d ffec 	bl	8010214 <BSP_LCD_SetTextColor>
		snprintf(string_buffer,100, "Achtung: Die Ausgangsstufe satturiert ab");
 800223c:	463b      	mov	r3, r7
 800223e:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <updatePage1+0x914>)
 8002240:	2164      	movs	r1, #100	@ 0x64
 8002242:	4618      	mov	r0, r3
 8002244:	f011 fe96 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <updatePage1+0x8e8>)
 800224a:	88db      	ldrh	r3, [r3, #6]
 800224c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002250:	fb12 f303 	smulbb	r3, r2, r3
 8002254:	b29b      	uxth	r3, r3
 8002256:	3360      	adds	r3, #96	@ 0x60
 8002258:	b299      	uxth	r1, r3
 800225a:	463a      	mov	r2, r7
 800225c:	2303      	movs	r3, #3
 800225e:	200a      	movs	r0, #10
 8002260:	f00e f890 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 8002264:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002268:	3301      	adds	r3, #1
 800226a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		snprintf(string_buffer,100, "2.8 Vpp, es kann zu Clipping kommen!");
 800226e:	463b      	mov	r3, r7
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <updatePage1+0x918>)
 8002272:	2164      	movs	r1, #100	@ 0x64
 8002274:	4618      	mov	r0, r3
 8002276:	f011 fe7d 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET +  INFO_TEXT_FONT_PAGE_1.Height * line, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <updatePage1+0x8e8>)
 800227c:	88db      	ldrh	r3, [r3, #6]
 800227e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002282:	fb12 f303 	smulbb	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	3360      	adds	r3, #96	@ 0x60
 800228a:	b299      	uxth	r1, r3
 800228c:	463a      	mov	r2, r7
 800228e:	2303      	movs	r3, #3
 8002290:	200a      	movs	r0, #10
 8002292:	f00e f877 	bl	8010384 <BSP_LCD_DisplayStringAt>
		line++;
 8002296:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800229a:	3301      	adds	r3, #1
 800229c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f00d ffb6 	bl	8010214 <BSP_LCD_SetTextColor>
}
 80022a8:	bf00      	nop
 80022aa:	3774      	adds	r7, #116	@ 0x74
 80022ac:	46bd      	mov	sp, r7
 80022ae:	ecbd 8b02 	vpop	{d8}
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	66666666 	.word	0x66666666
 80022bc:	40066666 	.word	0x40066666
 80022c0:	00000000 	.word	0x00000000
 80022c4:	408f4000 	.word	0x408f4000
 80022c8:	0801abbc 	.word	0x0801abbc
 80022cc:	0801ab20 	.word	0x0801ab20
 80022d0:	20020688 	.word	0x20020688
 80022d4:	0801ab80 	.word	0x0801ab80
 80022d8:	0801ab44 	.word	0x0801ab44
 80022dc:	0801ab8c 	.word	0x0801ab8c
 80022e0:	20030a28 	.word	0x20030a28
 80022e4:	0801abc8 	.word	0x0801abc8
 80022e8:	20020718 	.word	0x20020718
 80022ec:	447a0000 	.word	0x447a0000
 80022f0:	0801abf0 	.word	0x0801abf0
 80022f4:	0801ac1c 	.word	0x0801ac1c
 80022f8:	ffff8080 	.word	0xffff8080
 80022fc:	0801ac48 	.word	0x0801ac48
 8002300:	0801ac74 	.word	0x0801ac74

08002304 <updatePage2>:
/************************************************************************************/

/************************************************************************************/
void updatePage2(void){	// draw new measurement onto the screen
 8002304:	b580      	push	{r7, lr}
 8002306:	b0a0      	sub	sp, #128	@ 0x80
 8002308:	af00      	add	r7, sp, #0
	uint32_t n, i;
	float length;
	int32_t last_point, actual_point;
	volatile int32_t * data = plotBufferCH1_in;
 800230a:	4bab      	ldr	r3, [pc, #684]	@ (80025b8 <updatePage2+0x2b4>)
 800230c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	char string_buffer[100];
	uint32_t skip_channel = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("cpsid i" : : : "memory");
 8002312:	b672      	cpsid	i
}
 8002314:	bf00      	nop

	__disable_irq();
	fetchNewPlotDataNow = 1;	// request new data
 8002316:	4ba9      	ldr	r3, [pc, #676]	@ (80025bc <updatePage2+0x2b8>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800231c:	b662      	cpsie	i
}
 800231e:	bf00      	nop
	__enable_irq();

	SCB_CleanInvalidateDCache();			// make sure to read the new data delivered by the DMA
 8002320:	f7fe fb74 	bl	8000a0c <SCB_CleanInvalidateDCache>

	HAL_Delay(100);
 8002324:	2064      	movs	r0, #100	@ 0x64
 8002326:	f004 fa9d 	bl	8006864 <HAL_Delay>

	// init the screen
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800232a:	f04f 30ff 	mov.w	r0, #4294967295
 800232e:	f00d ff71 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	f00d ff85 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(0, 72, 800, 408);
 800233a:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 800233e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002342:	2148      	movs	r1, #72	@ 0x48
 8002344:	2000      	movs	r0, #0
 8002346:	f00e f9bb 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_DrawBitmap(0, 80, (uint8_t *)(QSPI_BASE_ADR + TIME_GRAPH_ADR));
 800234a:	4a9d      	ldr	r2, [pc, #628]	@ (80025c0 <updatePage2+0x2bc>)
 800234c:	2150      	movs	r1, #80	@ 0x50
 800234e:	2000      	movs	r0, #0
 8002350:	f00e f922 	bl	8010598 <BSP_LCD_DrawBitmap>


	BSP_LCD_SetFont(&Font16);
 8002354:	489b      	ldr	r0, [pc, #620]	@ (80025c4 <updatePage2+0x2c0>)
 8002356:	f00d ff8f 	bl	8010278 <BSP_LCD_SetFont>

	while(newPlotDataReady == 0){} // wait for new data
 800235a:	bf00      	nop
 800235c:	4b9a      	ldr	r3, [pc, #616]	@ (80025c8 <updatePage2+0x2c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0fb      	beq.n	800235c <updatePage2+0x58>

	for(n = 0; n < 4; n++){
 8002364:	2300      	movs	r3, #0
 8002366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002368:	e171      	b.n	800264e <updatePage2+0x34a>
		if(n == 0){
 800236a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d138      	bne.n	80023e2 <updatePage2+0xde>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002370:	4896      	ldr	r0, [pc, #600]	@ (80025cc <updatePage2+0x2c8>)
 8002372:	f00d ff4f 	bl	8010214 <BSP_LCD_SetTextColor>
			snprintf(string_buffer,100, "Refresh");
 8002376:	463b      	mov	r3, r7
 8002378:	4a95      	ldr	r2, [pc, #596]	@ (80025d0 <updatePage2+0x2cc>)
 800237a:	2164      	movs	r1, #100	@ 0x64
 800237c:	4618      	mov	r0, r3
 800237e:	f011 fdf9 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(700, 460, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002382:	463a      	mov	r2, r7
 8002384:	2303      	movs	r3, #3
 8002386:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800238a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800238e:	f00d fff9 	bl	8010384 <BSP_LCD_DisplayStringAt>

			if(measure_CH1_in == 1){
 8002392:	4b90      	ldr	r3, [pc, #576]	@ (80025d4 <updatePage2+0x2d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10b      	bne.n	80023b2 <updatePage2+0xae>
				data = plotBufferCH1_in;
 800239a:	4b87      	ldr	r3, [pc, #540]	@ (80025b8 <updatePage2+0x2b4>)
 800239c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800239e:	f04f 30ff 	mov.w	r0, #4294967295
 80023a2:	f00d ff37 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80023a6:	4889      	ldr	r0, [pc, #548]	@ (80025cc <updatePage2+0x2c8>)
 80023a8:	f00d ff4c 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023b0:	e008      	b.n	80023c4 <updatePage2+0xc0>
			}

			else{
				skip_channel = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	66bb      	str	r3, [r7, #104]	@ 0x68
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023b6:	4885      	ldr	r0, [pc, #532]	@ (80025cc <updatePage2+0x2c8>)
 80023b8:	f00d ff2c 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f00d ff40 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 1 in");
 80023c4:	463b      	mov	r3, r7
 80023c6:	4a84      	ldr	r2, [pc, #528]	@ (80025d8 <updatePage2+0x2d4>)
 80023c8:	2164      	movs	r1, #100	@ 0x64
 80023ca:	4618      	mov	r0, r3
 80023cc:	f011 fdd2 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80023d0:	463a      	mov	r2, r7
 80023d2:	2303      	movs	r3, #3
 80023d4:	2155      	movs	r1, #85	@ 0x55
 80023d6:	2082      	movs	r0, #130	@ 0x82
 80023d8:	f00d ffd4 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023dc:	487b      	ldr	r0, [pc, #492]	@ (80025cc <updatePage2+0x2c8>)
 80023de:	f00d ff19 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 1){
 80023e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d128      	bne.n	800243a <updatePage2+0x136>
			if(measure_CH2_in == 1){
 80023e8:	4b7c      	ldr	r3, [pc, #496]	@ (80025dc <updatePage2+0x2d8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10b      	bne.n	8002408 <updatePage2+0x104>
				data = plotBufferCH2_in;
 80023f0:	4b7b      	ldr	r3, [pc, #492]	@ (80025e0 <updatePage2+0x2dc>)
 80023f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f00d ff0c 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 80023fc:	4879      	ldr	r0, [pc, #484]	@ (80025e4 <updatePage2+0x2e0>)
 80023fe:	f00d ff21 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002406:	e008      	b.n	800241a <updatePage2+0x116>
			}

			else{
				skip_channel = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	66bb      	str	r3, [r7, #104]	@ 0x68
				BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 800240c:	4875      	ldr	r0, [pc, #468]	@ (80025e4 <updatePage2+0x2e0>)
 800240e:	f00d ff01 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002412:	f04f 30ff 	mov.w	r0, #4294967295
 8002416:	f00d ff15 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 2 in");
 800241a:	463b      	mov	r3, r7
 800241c:	4a72      	ldr	r2, [pc, #456]	@ (80025e8 <updatePage2+0x2e4>)
 800241e:	2164      	movs	r1, #100	@ 0x64
 8002420:	4618      	mov	r0, r3
 8002422:	f011 fda7 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002426:	463a      	mov	r2, r7
 8002428:	2303      	movs	r3, #3
 800242a:	2155      	movs	r1, #85	@ 0x55
 800242c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002430:	f00d ffa8 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8002434:	486b      	ldr	r0, [pc, #428]	@ (80025e4 <updatePage2+0x2e0>)
 8002436:	f00d feed 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 2){
 800243a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800243c:	2b02      	cmp	r3, #2
 800243e:	d128      	bne.n	8002492 <updatePage2+0x18e>
			if(measure_CH1_out == 1){
 8002440:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <updatePage2+0x2e8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10b      	bne.n	8002460 <updatePage2+0x15c>
				data = plotBufferCH1_out;
 8002448:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <updatePage2+0x2ec>)
 800244a:	66fb      	str	r3, [r7, #108]	@ 0x6c
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f00d fee0 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002454:	4867      	ldr	r0, [pc, #412]	@ (80025f4 <updatePage2+0x2f0>)
 8002456:	f00d fef5 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800245e:	e008      	b.n	8002472 <updatePage2+0x16e>
			}

			else{
				skip_channel = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002464:	4863      	ldr	r0, [pc, #396]	@ (80025f4 <updatePage2+0x2f0>)
 8002466:	f00d fed5 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800246a:	f04f 30ff 	mov.w	r0, #4294967295
 800246e:	f00d fee9 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 1 out");
 8002472:	463b      	mov	r3, r7
 8002474:	4a60      	ldr	r2, [pc, #384]	@ (80025f8 <updatePage2+0x2f4>)
 8002476:	2164      	movs	r1, #100	@ 0x64
 8002478:	4618      	mov	r0, r3
 800247a:	f011 fd7b 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150*2, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800247e:	463a      	mov	r2, r7
 8002480:	2303      	movs	r3, #3
 8002482:	2155      	movs	r1, #85	@ 0x55
 8002484:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 8002488:	f00d ff7c 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800248c:	4859      	ldr	r0, [pc, #356]	@ (80025f4 <updatePage2+0x2f0>)
 800248e:	f00d fec1 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 3){
 8002492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002494:	2b03      	cmp	r3, #3
 8002496:	d12b      	bne.n	80024f0 <updatePage2+0x1ec>
			if(measure_CH2_out == 1){
 8002498:	4b58      	ldr	r3, [pc, #352]	@ (80025fc <updatePage2+0x2f8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10c      	bne.n	80024ba <updatePage2+0x1b6>
				data = plotBufferCH2_out;
 80024a0:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <updatePage2+0x2fc>)
 80024a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f00d feb4 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80024ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80024b0:	f00d fec8 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024b8:	e009      	b.n	80024ce <updatePage2+0x1ca>
			}

			else{
				skip_channel = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	66bb      	str	r3, [r7, #104]	@ 0x68
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80024be:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80024c2:	f00d fea7 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	f00d febb 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 2 out");
 80024ce:	463b      	mov	r3, r7
 80024d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002604 <updatePage2+0x300>)
 80024d2:	2164      	movs	r1, #100	@ 0x64
 80024d4:	4618      	mov	r0, r3
 80024d6:	f011 fd4d 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150*3, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80024da:	463a      	mov	r2, r7
 80024dc:	2303      	movs	r3, #3
 80024de:	2155      	movs	r1, #85	@ 0x55
 80024e0:	f44f 7011 	mov.w	r0, #580	@ 0x244
 80024e4:	f00d ff4e 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80024e8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80024ec:	f00d fe92 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(skip_channel == 0){
 80024f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80a8 	bne.w	8002648 <updatePage2+0x344>
			last_point = roundf((data[0] /TIME_PLOT_Y_SCALING));
 80024f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002504:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002608 <updatePage2+0x304>
 8002508:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800250c:	eeb0 0a47 	vmov.f32	s0, s14
 8002510:	f013 f8ca 	bl	80156a8 <roundf>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	673b      	str	r3, [r7, #112]	@ 0x70

			for(i = 0; i < (TIME_PLOT_DATA_SIZE - 1); i++){
 8002522:	2300      	movs	r3, #0
 8002524:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002526:	e089      	b.n	800263c <updatePage2+0x338>

				actual_point = roundf((data[i] /TIME_PLOT_Y_SCALING));
 8002528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800252e:	4413      	add	r3, r2
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002608 <updatePage2+0x304>
 800253e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002542:	eeb0 0a47 	vmov.f32	s0, s14
 8002546:	f013 f8af 	bl	80156a8 <roundf>
 800254a:	eef0 7a40 	vmov.f32	s15, s0
 800254e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002552:	ee17 3a90 	vmov	r3, s15
 8002556:	667b      	str	r3, [r7, #100]	@ 0x64
				length = abs(actual_point - last_point);
 8002558:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800255a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	bfb8      	it	lt
 8002562:	425b      	neglt	r3, r3
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

				if(length < 1){
 8002570:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d502      	bpl.n	8002588 <updatePage2+0x284>
					length = 1;
 8002582:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002586:	677b      	str	r3, [r7, #116]	@ 0x74
				}

				if(actual_point > last_point){
 8002588:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800258a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800258c:	429a      	cmp	r2, r3
 800258e:	dd3d      	ble.n	800260c <updatePage2+0x308>
					BSP_LCD_DrawVLine(50 +i ,480 - (actual_point + 43 + TIME_PLOT_Y_SIZE/2),length);
 8002590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002592:	b29b      	uxth	r3, r3
 8002594:	3332      	adds	r3, #50	@ 0x32
 8002596:	b298      	uxth	r0, r3
 8002598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800259a:	b29b      	uxth	r3, r3
 800259c:	f5c3 7388 	rsb	r3, r3, #272	@ 0x110
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80025a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025aa:	ee17 2a90 	vmov	r2, s15
 80025ae:	b292      	uxth	r2, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f00d ffaf 	bl	8010514 <BSP_LCD_DrawVLine>
 80025b6:	e03c      	b.n	8002632 <updatePage2+0x32e>
 80025b8:	2002071c 	.word	0x2002071c
 80025bc:	20011028 	.word	0x20011028
 80025c0:	90010000 	.word	0x90010000
 80025c4:	20020680 	.word	0x20020680
 80025c8:	2001102c 	.word	0x2001102c
 80025cc:	ffff0000 	.word	0xffff0000
 80025d0:	0801ac9c 	.word	0x0801ac9c
 80025d4:	20020004 	.word	0x20020004
 80025d8:	0801aca4 	.word	0x0801aca4
 80025dc:	200307bc 	.word	0x200307bc
 80025e0:	20024744 	.word	0x20024744
 80025e4:	ff008000 	.word	0xff008000
 80025e8:	0801acac 	.word	0x0801acac
 80025ec:	200307c0 	.word	0x200307c0
 80025f0:	2002876c 	.word	0x2002876c
 80025f4:	ff0000ff 	.word	0xff0000ff
 80025f8:	0801acb4 	.word	0x0801acb4
 80025fc:	200307c4 	.word	0x200307c4
 8002600:	2002c794 	.word	0x2002c794
 8002604:	0801acc0 	.word	0x0801acc0
 8002608:	4746980c 	.word	0x4746980c
				}

				else{
					BSP_LCD_DrawVLine(50 +i ,480 - (last_point + 43 + TIME_PLOT_Y_SIZE/2),length);
 800260c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800260e:	b29b      	uxth	r3, r3
 8002610:	3332      	adds	r3, #50	@ 0x32
 8002612:	b298      	uxth	r0, r3
 8002614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002616:	b29b      	uxth	r3, r3
 8002618:	f5c3 7388 	rsb	r3, r3, #272	@ 0x110
 800261c:	b29b      	uxth	r3, r3
 800261e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002626:	ee17 2a90 	vmov	r2, s15
 800262a:	b292      	uxth	r2, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f00d ff71 	bl	8010514 <BSP_LCD_DrawVLine>
				}

				last_point = actual_point;
 8002632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002634:	673b      	str	r3, [r7, #112]	@ 0x70
			for(i = 0; i < (TIME_PLOT_DATA_SIZE - 1); i++){
 8002636:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002638:	3301      	adds	r3, #1
 800263a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800263c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800263e:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8002642:	4293      	cmp	r3, r2
 8002644:	f67f af70 	bls.w	8002528 <updatePage2+0x224>
	for(n = 0; n < 4; n++){
 8002648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800264a:	3301      	adds	r3, #1
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800264e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002650:	2b03      	cmp	r3, #3
 8002652:	f67f ae8a 	bls.w	800236a <updatePage2+0x66>
			}
		}
	}
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	3780      	adds	r7, #128	@ 0x80
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <updatePage3>:
/************************************************************************************/

/************************************************************************************/
void updatePage3(void){
 8002660:	b580      	push	{r7, lr}
 8002662:	f5ad 4d00 	sub.w	sp, sp, #32768	@ 0x8000
 8002666:	b0a0      	sub	sp, #128	@ 0x80
 8002668:	af00      	add	r7, sp, #0
	uint32_t n, i, line;
	float length;
	volatile int32_t * data = plotBufferCH1_in;
 800266a:	4ba9      	ldr	r3, [pc, #676]	@ (8002910 <updatePage3+0x2b0>)
 800266c:	f248 0270 	movw	r2, #32880	@ 0x8070
 8002670:	443a      	add	r2, r7
 8002672:	6013      	str	r3, [r2, #0]
	char string_buffer[100];
	float fft_data_buffer[FREQ_PLOT_FFT_SIZE];
	float calc[FREQ_PLOT_FFT_SIZE];
	uint32_t skip_channel = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f248 026c 	movw	r2, #32876	@ 0x806c
 800267a:	443a      	add	r2, r7
 800267c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800267e:	b672      	cpsid	i
}
 8002680:	bf00      	nop

	__disable_irq();
	fetchNewPlotDataNow = 1;	// request new data
 8002682:	4ba4      	ldr	r3, [pc, #656]	@ (8002914 <updatePage3+0x2b4>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002688:	b662      	cpsie	i
}
 800268a:	bf00      	nop
	__enable_irq();

	HAL_Delay(100);
 800268c:	2064      	movs	r0, #100	@ 0x64
 800268e:	f004 f8e9 	bl	8006864 <HAL_Delay>

	// init the screen
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002692:	f04f 30ff 	mov.w	r0, #4294967295
 8002696:	f00d fdbd 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800269a:	f04f 30ff 	mov.w	r0, #4294967295
 800269e:	f00d fdd1 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(0, 72, 800, 408);
 80026a2:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 80026a6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80026aa:	2148      	movs	r1, #72	@ 0x48
 80026ac:	2000      	movs	r0, #0
 80026ae:	f00e f807 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_DrawBitmap(0, 80, (uint8_t *)(QSPI_BASE_ADR + FREQ_GRAPH_ADR));
 80026b2:	4a99      	ldr	r2, [pc, #612]	@ (8002918 <updatePage3+0x2b8>)
 80026b4:	2150      	movs	r1, #80	@ 0x50
 80026b6:	2000      	movs	r0, #0
 80026b8:	f00d ff6e 	bl	8010598 <BSP_LCD_DrawBitmap>

	BSP_LCD_SetFont(&Font16);
 80026bc:	4897      	ldr	r0, [pc, #604]	@ (800291c <updatePage3+0x2bc>)
 80026be:	f00d fddb 	bl	8010278 <BSP_LCD_SetFont>

	while(newPlotDataReady == 0){ HAL_Delay(3); } // wait for new data
 80026c2:	e002      	b.n	80026ca <updatePage3+0x6a>
 80026c4:	2003      	movs	r0, #3
 80026c6:	f004 f8cd 	bl	8006864 <HAL_Delay>
 80026ca:	4b95      	ldr	r3, [pc, #596]	@ (8002920 <updatePage3+0x2c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f8      	beq.n	80026c4 <updatePage3+0x64>

	SCB_CleanInvalidateDCache();			// make sure to read the new data delivered by the DMA
 80026d2:	f7fe f99b 	bl	8000a0c <SCB_CleanInvalidateDCache>

	HAL_Delay(20);
 80026d6:	2014      	movs	r0, #20
 80026d8:	f004 f8c4 	bl	8006864 <HAL_Delay>

	for(n = 0; n < 4; n++){
 80026dc:	2300      	movs	r3, #0
 80026de:	f248 027c 	movw	r2, #32892	@ 0x807c
 80026e2:	443a      	add	r2, r7
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e34e      	b.n	8002d86 <updatePage3+0x726>
		if(n == 0){
 80026e8:	f248 037c 	movw	r3, #32892	@ 0x807c
 80026ec:	443b      	add	r3, r7
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d149      	bne.n	8002788 <updatePage3+0x128>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80026f4:	488b      	ldr	r0, [pc, #556]	@ (8002924 <updatePage3+0x2c4>)
 80026f6:	f00d fd8d 	bl	8010214 <BSP_LCD_SetTextColor>
			snprintf(string_buffer,100, "Refresh");
 80026fa:	f248 0304 	movw	r3, #32772	@ 0x8004
 80026fe:	443b      	add	r3, r7
 8002700:	4a89      	ldr	r2, [pc, #548]	@ (8002928 <updatePage3+0x2c8>)
 8002702:	2164      	movs	r1, #100	@ 0x64
 8002704:	4618      	mov	r0, r3
 8002706:	f011 fc35 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(700, 460, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800270a:	f248 0204 	movw	r2, #32772	@ 0x8004
 800270e:	443a      	add	r2, r7
 8002710:	2303      	movs	r3, #3
 8002712:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8002716:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800271a:	f00d fe33 	bl	8010384 <BSP_LCD_DisplayStringAt>

			if(measure_CH1_in == 1){
 800271e:	4b83      	ldr	r3, [pc, #524]	@ (800292c <updatePage3+0x2cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d111      	bne.n	800274a <updatePage3+0xea>
				data = plotBufferCH1_in;
 8002726:	4b7a      	ldr	r3, [pc, #488]	@ (8002910 <updatePage3+0x2b0>)
 8002728:	f248 0270 	movw	r2, #32880	@ 0x8070
 800272c:	443a      	add	r2, r7
 800272e:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f00d fd6e 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8002738:	487a      	ldr	r0, [pc, #488]	@ (8002924 <updatePage3+0x2c4>)
 800273a:	f00d fd83 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	f248 026c 	movw	r2, #32876	@ 0x806c
 8002744:	443a      	add	r2, r7
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e00b      	b.n	8002762 <updatePage3+0x102>
			}

			else{
				skip_channel = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	f248 026c 	movw	r2, #32876	@ 0x806c
 8002750:	443a      	add	r2, r7
 8002752:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002754:	4873      	ldr	r0, [pc, #460]	@ (8002924 <updatePage3+0x2c4>)
 8002756:	f00d fd5d 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800275a:	f04f 30ff 	mov.w	r0, #4294967295
 800275e:	f00d fd71 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 1 in");
 8002762:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002766:	443b      	add	r3, r7
 8002768:	4a71      	ldr	r2, [pc, #452]	@ (8002930 <updatePage3+0x2d0>)
 800276a:	2164      	movs	r1, #100	@ 0x64
 800276c:	4618      	mov	r0, r3
 800276e:	f011 fc01 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002772:	f248 0204 	movw	r2, #32772	@ 0x8004
 8002776:	443a      	add	r2, r7
 8002778:	2303      	movs	r3, #3
 800277a:	2155      	movs	r1, #85	@ 0x55
 800277c:	2082      	movs	r0, #130	@ 0x82
 800277e:	f00d fe01 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002782:	4868      	ldr	r0, [pc, #416]	@ (8002924 <updatePage3+0x2c4>)
 8002784:	f00d fd46 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 1){
 8002788:	f248 037c 	movw	r3, #32892	@ 0x807c
 800278c:	443b      	add	r3, r7
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d135      	bne.n	8002800 <updatePage3+0x1a0>
			if(measure_CH2_in == 1){
 8002794:	4b67      	ldr	r3, [pc, #412]	@ (8002934 <updatePage3+0x2d4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d111      	bne.n	80027c0 <updatePage3+0x160>
				data = plotBufferCH2_in;
 800279c:	4b66      	ldr	r3, [pc, #408]	@ (8002938 <updatePage3+0x2d8>)
 800279e:	f248 0270 	movw	r2, #32880	@ 0x8070
 80027a2:	443a      	add	r2, r7
 80027a4:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	f00d fd33 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 80027ae:	4863      	ldr	r0, [pc, #396]	@ (800293c <updatePage3+0x2dc>)
 80027b0:	f00d fd48 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f248 026c 	movw	r2, #32876	@ 0x806c
 80027ba:	443a      	add	r2, r7
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <updatePage3+0x178>
			}

			else{
				skip_channel = 1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f248 026c 	movw	r2, #32876	@ 0x806c
 80027c6:	443a      	add	r2, r7
 80027c8:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80027ca:	485c      	ldr	r0, [pc, #368]	@ (800293c <updatePage3+0x2dc>)
 80027cc:	f00d fd22 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f00d fd36 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 2 in");
 80027d8:	f248 0304 	movw	r3, #32772	@ 0x8004
 80027dc:	443b      	add	r3, r7
 80027de:	4a58      	ldr	r2, [pc, #352]	@ (8002940 <updatePage3+0x2e0>)
 80027e0:	2164      	movs	r1, #100	@ 0x64
 80027e2:	4618      	mov	r0, r3
 80027e4:	f011 fbc6 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80027e8:	f248 0204 	movw	r2, #32772	@ 0x8004
 80027ec:	443a      	add	r2, r7
 80027ee:	2303      	movs	r3, #3
 80027f0:	2155      	movs	r1, #85	@ 0x55
 80027f2:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80027f6:	f00d fdc5 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80027fa:	4850      	ldr	r0, [pc, #320]	@ (800293c <updatePage3+0x2dc>)
 80027fc:	f00d fd0a 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 2){
 8002800:	f248 037c 	movw	r3, #32892	@ 0x807c
 8002804:	443b      	add	r3, r7
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d135      	bne.n	8002878 <updatePage3+0x218>
			if(measure_CH1_out == 1){
 800280c:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <updatePage3+0x2e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d111      	bne.n	8002838 <updatePage3+0x1d8>
				data = plotBufferCH1_out;
 8002814:	4b4c      	ldr	r3, [pc, #304]	@ (8002948 <updatePage3+0x2e8>)
 8002816:	f248 0270 	movw	r2, #32880	@ 0x8070
 800281a:	443a      	add	r2, r7
 800281c:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	f00d fcf7 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002826:	4849      	ldr	r0, [pc, #292]	@ (800294c <updatePage3+0x2ec>)
 8002828:	f00d fd0c 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	f248 026c 	movw	r2, #32876	@ 0x806c
 8002832:	443a      	add	r2, r7
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <updatePage3+0x1f0>
			}

			else{
				skip_channel = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	f248 026c 	movw	r2, #32876	@ 0x806c
 800283e:	443a      	add	r2, r7
 8002840:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002842:	4842      	ldr	r0, [pc, #264]	@ (800294c <updatePage3+0x2ec>)
 8002844:	f00d fce6 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f00d fcfa 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 1 out");
 8002850:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002854:	443b      	add	r3, r7
 8002856:	4a3e      	ldr	r2, [pc, #248]	@ (8002950 <updatePage3+0x2f0>)
 8002858:	2164      	movs	r1, #100	@ 0x64
 800285a:	4618      	mov	r0, r3
 800285c:	f011 fb8a 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150*2, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002860:	f248 0204 	movw	r2, #32772	@ 0x8004
 8002864:	443a      	add	r2, r7
 8002866:	2303      	movs	r3, #3
 8002868:	2155      	movs	r1, #85	@ 0x55
 800286a:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 800286e:	f00d fd89 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002872:	4836      	ldr	r0, [pc, #216]	@ (800294c <updatePage3+0x2ec>)
 8002874:	f00d fcce 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(n == 3){
 8002878:	f248 037c 	movw	r3, #32892	@ 0x807c
 800287c:	443b      	add	r3, r7
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d138      	bne.n	80028f6 <updatePage3+0x296>
			if(measure_CH2_out == 1){
 8002884:	4b33      	ldr	r3, [pc, #204]	@ (8002954 <updatePage3+0x2f4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d112      	bne.n	80028b2 <updatePage3+0x252>
				data = plotBufferCH2_out;
 800288c:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <updatePage3+0x2f8>)
 800288e:	f248 0270 	movw	r2, #32880	@ 0x8070
 8002892:	443a      	add	r2, r7
 8002894:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	f00d fcbb 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800289e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80028a2:	f00d fccf 	bl	8010244 <BSP_LCD_SetBackColor>
				skip_channel = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f248 026c 	movw	r2, #32876	@ 0x806c
 80028ac:	443a      	add	r2, r7
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e00c      	b.n	80028cc <updatePage3+0x26c>
			}

			else{
				skip_channel = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f248 026c 	movw	r2, #32876	@ 0x806c
 80028b8:	443a      	add	r2, r7
 80028ba:	6013      	str	r3, [r2, #0]
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028bc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80028c0:	f00d fca8 	bl	8010214 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f00d fcbc 	bl	8010244 <BSP_LCD_SetBackColor>
			}

			snprintf(string_buffer,100, "CH 2 out");
 80028cc:	f248 0304 	movw	r3, #32772	@ 0x8004
 80028d0:	443b      	add	r3, r7
 80028d2:	4a22      	ldr	r2, [pc, #136]	@ (800295c <updatePage3+0x2fc>)
 80028d4:	2164      	movs	r1, #100	@ 0x64
 80028d6:	4618      	mov	r0, r3
 80028d8:	f011 fb4c 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(130 + 150*3, 85, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80028dc:	f248 0204 	movw	r2, #32772	@ 0x8004
 80028e0:	443a      	add	r2, r7
 80028e2:	2303      	movs	r3, #3
 80028e4:	2155      	movs	r1, #85	@ 0x55
 80028e6:	f44f 7011 	mov.w	r0, #580	@ 0x244
 80028ea:	f00d fd4b 	bl	8010384 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80028f2:	f00d fc8f 	bl	8010214 <BSP_LCD_SetTextColor>
		}

		if(skip_channel == 0){
 80028f6:	f248 036c 	movw	r3, #32876	@ 0x806c
 80028fa:	443b      	add	r3, r7
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 8238 	bne.w	8002d74 <updatePage3+0x714>
			// window
			for(i = 0; i < FREQ_PLOT_FFT_SIZE; i++){
 8002904:	2300      	movs	r3, #0
 8002906:	f248 0278 	movw	r2, #32888	@ 0x8078
 800290a:	443a      	add	r2, r7
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e056      	b.n	80029be <updatePage3+0x35e>
 8002910:	2002071c 	.word	0x2002071c
 8002914:	20011028 	.word	0x20011028
 8002918:	90100000 	.word	0x90100000
 800291c:	20020680 	.word	0x20020680
 8002920:	2001102c 	.word	0x2001102c
 8002924:	ffff0000 	.word	0xffff0000
 8002928:	0801ac9c 	.word	0x0801ac9c
 800292c:	20020004 	.word	0x20020004
 8002930:	0801aca4 	.word	0x0801aca4
 8002934:	200307bc 	.word	0x200307bc
 8002938:	20024744 	.word	0x20024744
 800293c:	ff008000 	.word	0xff008000
 8002940:	0801acac 	.word	0x0801acac
 8002944:	200307c0 	.word	0x200307c0
 8002948:	2002876c 	.word	0x2002876c
 800294c:	ff0000ff 	.word	0xff0000ff
 8002950:	0801acb4 	.word	0x0801acb4
 8002954:	200307c4 	.word	0x200307c4
 8002958:	2002c794 	.word	0x2002c794
 800295c:	0801acc0 	.word	0x0801acc0
				calc[i] = data[i] * cheb_win_4096_190dB[i];
 8002960:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002964:	443b      	add	r3, r7
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f248 0270 	movw	r2, #32880	@ 0x8070
 800296e:	443a      	add	r2, r7
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800297e:	4aa6      	ldr	r2, [pc, #664]	@ (8002c18 <updatePage3+0x5b8>)
 8002980:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002984:	443b      	add	r3, r7
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002994:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002998:	461a      	mov	r2, r3
 800299a:	f248 0378 	movw	r3, #32888	@ 0x8078
 800299e:	443b      	add	r3, r7
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b7c      	subs	r3, #124	@ 0x7c
 80029a8:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < FREQ_PLOT_FFT_SIZE; i++){
 80029ac:	f248 0378 	movw	r3, #32888	@ 0x8078
 80029b0:	443b      	add	r3, r7
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	f248 0278 	movw	r2, #32888	@ 0x8078
 80029ba:	443a      	add	r2, r7
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	f248 0378 	movw	r3, #32888	@ 0x8078
 80029c2:	443b      	add	r3, r7
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	d3c9      	bcc.n	8002960 <updatePage3+0x300>
			}

			// Compute the FFT of the high pass filtered version of the signal.
			arm_rfft_fast_f32(&rFFT_plot_inst, calc, fft_data_buffer,0);
 80029cc:	4a93      	ldr	r2, [pc, #588]	@ (8002c1c <updatePage3+0x5bc>)
 80029ce:	f248 0380 	movw	r3, #32896	@ 0x8080
 80029d2:	4413      	add	r3, r2
 80029d4:	19da      	adds	r2, r3, r7
 80029d6:	4992      	ldr	r1, [pc, #584]	@ (8002c20 <updatePage3+0x5c0>)
 80029d8:	f248 0380 	movw	r3, #32896	@ 0x8080
 80029dc:	440b      	add	r3, r1
 80029de:	19d9      	adds	r1, r3, r7
 80029e0:	2300      	movs	r3, #0
 80029e2:	4890      	ldr	r0, [pc, #576]	@ (8002c24 <updatePage3+0x5c4>)
 80029e4:	f00f fc68 	bl	80122b8 <arm_rfft_fast_f32>

			// compute the complex magnitude values for the FFT output
			arm_cmplx_mag_f32(&fft_data_buffer[0], &fft_data_buffer[0], FREQ_PLOT_FFT_SIZE/2);
 80029e8:	498c      	ldr	r1, [pc, #560]	@ (8002c1c <updatePage3+0x5bc>)
 80029ea:	f248 0380 	movw	r3, #32896	@ 0x8080
 80029ee:	440b      	add	r3, r1
 80029f0:	19d9      	adds	r1, r3, r7
 80029f2:	4b8a      	ldr	r3, [pc, #552]	@ (8002c1c <updatePage3+0x5bc>)
 80029f4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80029f8:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 80029fc:	443b      	add	r3, r7
 80029fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a02:	4618      	mov	r0, r3
 8002a04:	f010 fd64 	bl	80134d0 <arm_cmplx_mag_f32>

			// downsample to display resolution
			calc[0] = fft_data_buffer[0]  / 8388608 / 0.26828 * 2; // compensate for ADC resolution and window dampening
 8002a08:	f507 4381 	add.w	r3, r7, #16512	@ 0x4080
 8002a0c:	ed13 7a1f 	vldr	s14, [r3, #-124]	@ 0xffffff84
 8002a10:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8002c28 <updatePage3+0x5c8>
 8002a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a1c:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8002c10 <updatePage3+0x5b0>
 8002a20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a24:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a2c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a30:	ed43 7a1f 	vstr	s15, [r3, #-124]	@ 0xffffff84
			calc[0] = 20*log10(calc[0]/FREQ_PLOT_FFT_SIZE);
 8002a34:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a38:	ed13 7a1f 	vldr	s14, [r3, #-124]	@ 0xffffff84
 8002a3c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002c34 <updatePage3+0x5d4>
 8002a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a48:	eeb0 0b47 	vmov.f64	d0, d7
 8002a4c:	f012 fa8c 	bl	8014f68 <log10>
 8002a50:	eeb0 7b40 	vmov.f64	d7, d0
 8002a54:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8002a58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a60:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a64:	ed43 7a1f 	vstr	s15, [r3, #-124]	@ 0xffffff84

			length = roundf(((calc[0] + 200) * FREQ_PLOT_Y_SIZE / 200));
 8002a68:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002a6c:	ed53 7a1f 	vldr	s15, [r3, #-124]	@ 0xffffff84
 8002a70:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002c3c <updatePage3+0x5dc>
 8002a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a78:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002c38 <updatePage3+0x5d8>
 8002a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a80:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002c3c <updatePage3+0x5dc>
 8002a84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a88:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8c:	f012 fe0c 	bl	80156a8 <roundf>
 8002a90:	f248 0374 	movw	r3, #32884	@ 0x8074
 8002a94:	443b      	add	r3, r7
 8002a96:	ed83 0a00 	vstr	s0, [r3]
			if(length < 1){
 8002a9a:	f248 0374 	movw	r3, #32884	@ 0x8074
 8002a9e:	443b      	add	r3, r7
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	d505      	bpl.n	8002abe <updatePage3+0x45e>
				length = 1;
 8002ab2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ab6:	f248 0274 	movw	r2, #32884	@ 0x8074
 8002aba:	443a      	add	r2, r7
 8002abc:	6013      	str	r3, [r2, #0]
			}
			BSP_LCD_DrawVLine(60 ,437-length,length);
 8002abe:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002c40 <updatePage3+0x5e0>
 8002ac2:	f248 0374 	movw	r3, #32884	@ 0x8074
 8002ac6:	443b      	add	r3, r7
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f248 0274 	movw	r2, #32884	@ 0x8074
 8002ade:	443a      	add	r2, r7
 8002ae0:	edd2 7a00 	vldr	s15, [r2]
 8002ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae8:	ee17 2a90 	vmov	r2, s15
 8002aec:	b292      	uxth	r2, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	203c      	movs	r0, #60	@ 0x3c
 8002af2:	f00d fd0f 	bl	8010514 <BSP_LCD_DrawVLine>

			for(i = 1; i < FREQ_PLOT_DATA_SIZE; i++){
 8002af6:	2301      	movs	r3, #1
 8002af8:	f248 0278 	movw	r2, #32888	@ 0x8078
 8002afc:	443a      	add	r2, r7
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e130      	b.n	8002d64 <updatePage3+0x704>
				line = lroundf((float)i / 2 * FREQ_PLOT_FFT_SIZE / FREQ_PLOT_DATA_SIZE);	// get line index
 8002b02:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002b06:	443b      	add	r3, r7
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b1a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002c34 <updatePage3+0x5d4>
 8002b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b22:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8002c2c <updatePage3+0x5cc>
 8002b26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2e:	f012 fd47 	bl	80155c0 <lroundf>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f248 0268 	movw	r2, #32872	@ 0x8068
 8002b38:	443a      	add	r2, r7
 8002b3a:	6013      	str	r3, [r2, #0]
				//arm_max_f32(&fft_data_buffer[line-1], 3, &calc[i], &line);	// get the maximum of the 3 values

				// compensate for ADC resolution and window dampening
				calc[i] = (fft_data_buffer[line-1] + fft_data_buffer[line] + fft_data_buffer[line+1]) /3  / 8388608 / 0.26828 * 2;	// get the average value
 8002b3c:	f248 0368 	movw	r3, #32872	@ 0x8068
 8002b40:	443b      	add	r3, r7
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	f507 4281 	add.w	r2, r7, #16512	@ 0x4080
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b7c      	subs	r3, #124	@ 0x7c
 8002b50:	ed93 7a00 	vldr	s14, [r3]
 8002b54:	f507 4381 	add.w	r3, r7, #16512	@ 0x4080
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f248 0368 	movw	r3, #32872	@ 0x8068
 8002b5e:	443b      	add	r3, r7
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b7c      	subs	r3, #124	@ 0x7c
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b70:	f248 0368 	movw	r3, #32872	@ 0x8068
 8002b74:	443b      	add	r3, r7
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f507 4281 	add.w	r2, r7, #16512	@ 0x4080
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3b7c      	subs	r3, #124	@ 0x7c
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002b90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b94:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002c28 <updatePage3+0x5c8>
 8002b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ba0:	ed9f 5b1b 	vldr	d5, [pc, #108]	@ 8002c10 <updatePage3+0x5b0>
 8002ba4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ba8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bb0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002bba:	443b      	add	r3, r7
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b7c      	subs	r3, #124	@ 0x7c
 8002bc4:	edc3 7a00 	vstr	s15, [r3]

				if(calc[i]/FREQ_PLOT_FFT_SIZE <= 0){ // avoid log(x) for x <= 0 (not defined)
 8002bc8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002bd2:	443b      	add	r3, r7
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b7c      	subs	r3, #124	@ 0x7c
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002c34 <updatePage3+0x5d4>
 8002be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	d828      	bhi.n	8002c44 <updatePage3+0x5e4>
					calc[i] = - 500;
 8002bf2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002bfc:	443b      	add	r3, r7
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3b7c      	subs	r3, #124	@ 0x7c
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <updatePage3+0x5d0>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e045      	b.n	8002c98 <updatePage3+0x638>
 8002c0c:	f3af 8000 	nop.w
 8002c10:	e08aefb3 	.word	0xe08aefb3
 8002c14:	3fd12b7f 	.word	0x3fd12b7f
 8002c18:	080167d0 	.word	0x080167d0
 8002c1c:	ffffbf84 	.word	0xffffbf84
 8002c20:	ffff7f84 	.word	0xffff7f84
 8002c24:	200307c8 	.word	0x200307c8
 8002c28:	4b000000 	.word	0x4b000000
 8002c2c:	442f0000 	.word	0x442f0000
 8002c30:	c3fa0000 	.word	0xc3fa0000
 8002c34:	45800000 	.word	0x45800000
 8002c38:	43a50000 	.word	0x43a50000
 8002c3c:	43480000 	.word	0x43480000
 8002c40:	43da8000 	.word	0x43da8000
				}

				else{
					calc[i] = 20*log10(calc[i]/FREQ_PLOT_FFT_SIZE);
 8002c44:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002c4e:	443b      	add	r3, r7
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b7c      	subs	r3, #124	@ 0x7c
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	ed5f 6a0b 	vldr	s13, [pc, #-44]	@ 8002c34 <updatePage3+0x5d4>
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c68:	eeb0 0b47 	vmov.f64	d0, d7
 8002c6c:	f012 f97c 	bl	8014f68 <log10>
 8002c70:	eeb0 7b40 	vmov.f64	d7, d0
 8002c74:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8002c78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c80:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002c84:	461a      	mov	r2, r3
 8002c86:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002c8a:	443b      	add	r3, r7
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3b7c      	subs	r3, #124	@ 0x7c
 8002c94:	edc3 7a00 	vstr	s15, [r3]
				}


				if(i < (FREQ_PLOT_DATA_SIZE - 1)){
 8002c98:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002c9c:	443b      	add	r3, r7
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d854      	bhi.n	8002d52 <updatePage3+0x6f2>

					length = roundf(((calc[i] + 200) * FREQ_PLOT_Y_SIZE / 200));
 8002ca8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002cac:	461a      	mov	r2, r3
 8002cae:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002cb2:	443b      	add	r3, r7
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b7c      	subs	r3, #124	@ 0x7c
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8002c3c <updatePage3+0x5dc>
 8002cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cc8:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8002c38 <updatePage3+0x5d8>
 8002ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd0:	ed5f 6a26 	vldr	s13, [pc, #-152]	@ 8002c3c <updatePage3+0x5dc>
 8002cd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cdc:	f012 fce4 	bl	80156a8 <roundf>
 8002ce0:	f248 0374 	movw	r3, #32884	@ 0x8074
 8002ce4:	443b      	add	r3, r7
 8002ce6:	ed83 0a00 	vstr	s0, [r3]

					if(length < 1){
 8002cea:	f248 0374 	movw	r3, #32884	@ 0x8074
 8002cee:	443b      	add	r3, r7
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d00:	d505      	bpl.n	8002d0e <updatePage3+0x6ae>
						length = 1;
 8002d02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d06:	f248 0274 	movw	r2, #32884	@ 0x8074
 8002d0a:	443a      	add	r2, r7
 8002d0c:	6013      	str	r3, [r2, #0]
					}

					BSP_LCD_DrawVLine(60+i ,437-length,length);
 8002d0e:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002d12:	443b      	add	r3, r7
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	333c      	adds	r3, #60	@ 0x3c
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 8002c40 <updatePage3+0x5e0>
 8002d20:	f248 0274 	movw	r2, #32884	@ 0x8074
 8002d24:	443a      	add	r2, r7
 8002d26:	edd2 7a00 	vldr	s15, [r2]
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d32:	ee17 2a90 	vmov	r2, s15
 8002d36:	b291      	uxth	r1, r2
 8002d38:	f248 0274 	movw	r2, #32884	@ 0x8074
 8002d3c:	443a      	add	r2, r7
 8002d3e:	edd2 7a00 	vldr	s15, [r2]
 8002d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d46:	ee17 2a90 	vmov	r2, s15
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00d fbe1 	bl	8010514 <BSP_LCD_DrawVLine>
			for(i = 1; i < FREQ_PLOT_DATA_SIZE; i++){
 8002d52:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002d56:	443b      	add	r3, r7
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f248 0278 	movw	r2, #32888	@ 0x8078
 8002d60:	443a      	add	r2, r7
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	f248 0378 	movw	r3, #32888	@ 0x8078
 8002d68:	443b      	add	r3, r7
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002d70:	f4ff aec7 	bcc.w	8002b02 <updatePage3+0x4a2>
	for(n = 0; n < 4; n++){
 8002d74:	f248 037c 	movw	r3, #32892	@ 0x807c
 8002d78:	443b      	add	r3, r7
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f248 027c 	movw	r2, #32892	@ 0x807c
 8002d82:	443a      	add	r2, r7
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	f248 037c 	movw	r3, #32892	@ 0x807c
 8002d8a:	443b      	add	r3, r7
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	f67f acaa 	bls.w	80026e8 <updatePage3+0x88>
				}
			}
		}
	}
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	f507 4700 	add.w	r7, r7, #32768	@ 0x8000
 8002d9c:	3780      	adds	r7, #128	@ 0x80
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop

08002da4 <updatePage4>:
/************************************************************************************/

/************************************************************************************/
void updatePage4(void){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002da8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002dac:	f00d fa32 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 72, 800, 408);
 8002db0:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 8002db4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002db8:	2148      	movs	r1, #72	@ 0x48
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f00d fc80 	bl	80106c0 <BSP_LCD_FillRect>
	drawWaveGenWaveforms();
 8002dc0:	f000 fa3e 	bl	8003240 <drawWaveGenWaveforms>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <drawTitle>:
	diverse

 	Frequently used GUI elements.
*/
/***********************************************************************************/
void drawTitle(void){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b09a      	sub	sp, #104	@ 0x68
 8002dcc:	af00      	add	r7, sp, #0
	char string_buffer[100];

	// title bar
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002dce:	4877      	ldr	r0, [pc, #476]	@ (8002fac <drawTitle+0x1e4>)
 8002dd0:	f00d fa20 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), Font24.Height * 3);
 8002dd4:	f00d f996 	bl	8010104 <BSP_LCD_GetXSize>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b74      	ldr	r3, [pc, #464]	@ (8002fb0 <drawTitle+0x1e8>)
 8002dde:	88db      	ldrh	r3, [r3, #6]
 8002de0:	4619      	mov	r1, r3
 8002de2:	0049      	lsls	r1, r1, #1
 8002de4:	440b      	add	r3, r1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2100      	movs	r1, #0
 8002dea:	2000      	movs	r0, #0
 8002dec:	f00d fc68 	bl	80106c0 <BSP_LCD_FillRect>

	// draw the arrows
	BSP_LCD_DrawBitmap(660, 0, (uint8_t *)(QSPI_BASE_ADR + PFEIL_RECHTS_ADR));
 8002df0:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8002df4:	2100      	movs	r1, #0
 8002df6:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8002dfa:	f00d fbcd 	bl	8010598 <BSP_LCD_DrawBitmap>
	BSP_LCD_DrawBitmap(0 ,0, (uint8_t *)(QSPI_BASE_ADR + PFEIL_LINKS_ADR));
 8002dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8002fb4 <drawTitle+0x1ec>)
 8002e00:	2100      	movs	r1, #0
 8002e02:	2000      	movs	r0, #0
 8002e04:	f00d fbc8 	bl	8010598 <BSP_LCD_DrawBitmap>

	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8002e08:	4868      	ldr	r0, [pc, #416]	@ (8002fac <drawTitle+0x1e4>)
 8002e0a:	f00d fa1b 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e12:	f00d f9ff 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002e16:	4866      	ldr	r0, [pc, #408]	@ (8002fb0 <drawTitle+0x1e8>)
 8002e18:	f00d fa2e 	bl	8010278 <BSP_LCD_SetFont>

	// draw the title
	switch(menue_page){
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <drawTitle+0x1f0>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	f200 8099 	bhi.w	8002f58 <drawTitle+0x190>
 8002e26:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <drawTitle+0x64>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e41 	.word	0x08002e41
 8002e30:	08002e79 	.word	0x08002e79
 8002e34:	08002eb1 	.word	0x08002eb1
 8002e38:	08002ee9 	.word	0x08002ee9
 8002e3c:	08002f21 	.word	0x08002f21
		case PAGE1:
			snprintf(string_buffer,100, "DSV Praktikum");
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4a5e      	ldr	r2, [pc, #376]	@ (8002fbc <drawTitle+0x1f4>)
 8002e44:	2164      	movs	r1, #100	@ 0x64
 8002e46:	4618      	mov	r0, r3
 8002e48:	f011 f894 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 8, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002e4c:	1d3a      	adds	r2, r7, #4
 8002e4e:	2301      	movs	r3, #1
 8002e50:	2108      	movs	r1, #8
 8002e52:	2000      	movs	r0, #0
 8002e54:	f00d fa96 	bl	8010384 <BSP_LCD_DisplayStringAt>
			snprintf(string_buffer,100, PRAKTIKUM_NAME);
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	4a59      	ldr	r2, [pc, #356]	@ (8002fc0 <drawTitle+0x1f8>)
 8002e5c:	2164      	movs	r1, #100	@ 0x64
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f011 f888 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, Font24.Height * 1+16, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002e64:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <drawTitle+0x1e8>)
 8002e66:	88db      	ldrh	r3, [r3, #6]
 8002e68:	3310      	adds	r3, #16
 8002e6a:	b299      	uxth	r1, r3
 8002e6c:	1d3a      	adds	r2, r7, #4
 8002e6e:	2301      	movs	r3, #1
 8002e70:	2000      	movs	r0, #0
 8002e72:	f00d fa87 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8002e76:	e06f      	b.n	8002f58 <drawTitle+0x190>

		case PAGE2:
			snprintf(string_buffer,100, "Tool 1:");
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	4a52      	ldr	r2, [pc, #328]	@ (8002fc4 <drawTitle+0x1fc>)
 8002e7c:	2164      	movs	r1, #100	@ 0x64
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f011 f878 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 8, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002e84:	1d3a      	adds	r2, r7, #4
 8002e86:	2301      	movs	r3, #1
 8002e88:	2108      	movs	r1, #8
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f00d fa7a 	bl	8010384 <BSP_LCD_DisplayStringAt>
			snprintf(string_buffer,100, "Oszilloskop");
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc8 <drawTitle+0x200>)
 8002e94:	2164      	movs	r1, #100	@ 0x64
 8002e96:	4618      	mov	r0, r3
 8002e98:	f011 f86c 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, Font24.Height * 1+16, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002e9c:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <drawTitle+0x1e8>)
 8002e9e:	88db      	ldrh	r3, [r3, #6]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	b299      	uxth	r1, r3
 8002ea4:	1d3a      	adds	r2, r7, #4
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f00d fa6b 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8002eae:	e053      	b.n	8002f58 <drawTitle+0x190>

		case PAGE3:
			snprintf(string_buffer,100, "Tool 2:");
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	4a46      	ldr	r2, [pc, #280]	@ (8002fcc <drawTitle+0x204>)
 8002eb4:	2164      	movs	r1, #100	@ 0x64
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f011 f85c 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 8, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002ebc:	1d3a      	adds	r2, r7, #4
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f00d fa5e 	bl	8010384 <BSP_LCD_DisplayStringAt>
			snprintf(string_buffer,100, "Spektrumanalysator");
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	4a41      	ldr	r2, [pc, #260]	@ (8002fd0 <drawTitle+0x208>)
 8002ecc:	2164      	movs	r1, #100	@ 0x64
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f011 f850 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, Font24.Height * 1+16, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002ed4:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <drawTitle+0x1e8>)
 8002ed6:	88db      	ldrh	r3, [r3, #6]
 8002ed8:	3310      	adds	r3, #16
 8002eda:	b299      	uxth	r1, r3
 8002edc:	1d3a      	adds	r2, r7, #4
 8002ede:	2301      	movs	r3, #1
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f00d fa4f 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8002ee6:	e037      	b.n	8002f58 <drawTitle+0x190>

		case PAGE4:
			snprintf(string_buffer,100, "Tool 3:");
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd4 <drawTitle+0x20c>)
 8002eec:	2164      	movs	r1, #100	@ 0x64
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f011 f840 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 8, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002ef4:	1d3a      	adds	r2, r7, #4
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	2108      	movs	r1, #8
 8002efa:	2000      	movs	r0, #0
 8002efc:	f00d fa42 	bl	8010384 <BSP_LCD_DisplayStringAt>
			snprintf(string_buffer,100, "Funktionsgenerator");
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	4a35      	ldr	r2, [pc, #212]	@ (8002fd8 <drawTitle+0x210>)
 8002f04:	2164      	movs	r1, #100	@ 0x64
 8002f06:	4618      	mov	r0, r3
 8002f08:	f011 f834 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, Font24.Height * 1+16, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <drawTitle+0x1e8>)
 8002f0e:	88db      	ldrh	r3, [r3, #6]
 8002f10:	3310      	adds	r3, #16
 8002f12:	b299      	uxth	r1, r3
 8002f14:	1d3a      	adds	r2, r7, #4
 8002f16:	2301      	movs	r3, #1
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f00d fa33 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8002f1e:	e01b      	b.n	8002f58 <drawTitle+0x190>

		case PAGE5:
			snprintf(string_buffer,100, "Informationen");
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4a2e      	ldr	r2, [pc, #184]	@ (8002fdc <drawTitle+0x214>)
 8002f24:	2164      	movs	r1, #100	@ 0x64
 8002f26:	4618      	mov	r0, r3
 8002f28:	f011 f824 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 8, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002f2c:	1d3a      	adds	r2, r7, #4
 8002f2e:	2301      	movs	r3, #1
 8002f30:	2108      	movs	r1, #8
 8002f32:	2000      	movs	r0, #0
 8002f34:	f00d fa26 	bl	8010384 <BSP_LCD_DisplayStringAt>
			snprintf(string_buffer,100, "HW und SW");
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4a29      	ldr	r2, [pc, #164]	@ (8002fe0 <drawTitle+0x218>)
 8002f3c:	2164      	movs	r1, #100	@ 0x64
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f011 f818 	bl	8013f74 <sniprintf>
			BSP_LCD_DisplayStringAt(0, Font24.Height * 1+16, (uint8_t *)&string_buffer[0], CENTER_MODE);
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <drawTitle+0x1e8>)
 8002f46:	88db      	ldrh	r3, [r3, #6]
 8002f48:	3310      	adds	r3, #16
 8002f4a:	b299      	uxth	r1, r3
 8002f4c:	1d3a      	adds	r2, r7, #4
 8002f4e:	2301      	movs	r3, #1
 8002f50:	2000      	movs	r0, #0
 8002f52:	f00d fa17 	bl	8010384 <BSP_LCD_DisplayStringAt>
		break;
 8002f56:	bf00      	nop
	}

	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f00d f972 	bl	8010244 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002f60:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002f64:	f00d f956 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8002f68:	481e      	ldr	r0, [pc, #120]	@ (8002fe4 <drawTitle+0x21c>)
 8002f6a:	f00d f985 	bl	8010278 <BSP_LCD_SetFont>

	snprintf(string_buffer,100, "M = %lu", user_mode);
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <drawTitle+0x220>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1d38      	adds	r0, r7, #4
 8002f74:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <drawTitle+0x224>)
 8002f76:	2164      	movs	r1, #100	@ 0x64
 8002f78:	f010 fffc 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(65, 52, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002f7c:	1d3a      	adds	r2, r7, #4
 8002f7e:	2303      	movs	r3, #3
 8002f80:	2134      	movs	r1, #52	@ 0x34
 8002f82:	2041      	movs	r0, #65	@ 0x41
 8002f84:	f00d f9fe 	bl	8010384 <BSP_LCD_DisplayStringAt>

	snprintf(string_buffer,100, "B = %lu", user_button);
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <drawTitle+0x228>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1d38      	adds	r0, r7, #4
 8002f8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <drawTitle+0x22c>)
 8002f90:	2164      	movs	r1, #100	@ 0x64
 8002f92:	f010 ffef 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(665, 52, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8002f96:	1d3a      	adds	r2, r7, #4
 8002f98:	2303      	movs	r3, #3
 8002f9a:	2134      	movs	r1, #52	@ 0x34
 8002f9c:	f240 2099 	movw	r0, #665	@ 0x299
 8002fa0:	f00d f9f0 	bl	8010384 <BSP_LCD_DisplayStringAt>
}
 8002fa4:	bf00      	nop
 8002fa6:	3768      	adds	r7, #104	@ 0x68
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	ff0000ff 	.word	0xff0000ff
 8002fb0:	20020690 	.word	0x20020690
 8002fb4:	90008000 	.word	0x90008000
 8002fb8:	20011014 	.word	0x20011014
 8002fbc:	0801accc 	.word	0x0801accc
 8002fc0:	0801acdc 	.word	0x0801acdc
 8002fc4:	0801acf8 	.word	0x0801acf8
 8002fc8:	0801ad00 	.word	0x0801ad00
 8002fcc:	0801ad0c 	.word	0x0801ad0c
 8002fd0:	0801ad14 	.word	0x0801ad14
 8002fd4:	0801ad28 	.word	0x0801ad28
 8002fd8:	0801ad30 	.word	0x0801ad30
 8002fdc:	0801ad44 	.word	0x0801ad44
 8002fe0:	0801ad54 	.word	0x0801ad54
 8002fe4:	20020688 	.word	0x20020688
 8002fe8:	2001101c 	.word	0x2001101c
 8002fec:	0801ad60 	.word	0x0801ad60
 8002ff0:	20011018 	.word	0x20011018
 8002ff4:	0801ad68 	.word	0x0801ad68

08002ff8 <checkPageSwitchButtons>:
/************************************************************************************/

/************************************************************************************/
void checkPageSwitchButtons(void){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	static TS_StateTypeDef  TS_State={0};

	if(TS_State.touchDetected == 1)   // test for new button press
 8002ffc:	4b40      	ldr	r3, [pc, #256]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d103      	bne.n	800300c <checkPageSwitchButtons+0x14>
	{
		BSP_TS_GetState(&TS_State);
 8003004:	483e      	ldr	r0, [pc, #248]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8003006:	f00e fcdf 	bl	80119c8 <BSP_TS_GetState>

				drawTitle();
			}
		}
	}
}
 800300a:	e077      	b.n	80030fc <checkPageSwitchButtons+0x104>
		BSP_TS_GetState(&TS_State);
 800300c:	483c      	ldr	r0, [pc, #240]	@ (8003100 <checkPageSwitchButtons+0x108>)
 800300e:	f00e fcdb 	bl	80119c8 <BSP_TS_GetState>
		if(TS_State.touchDetected == 1){
 8003012:	4b3b      	ldr	r3, [pc, #236]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d170      	bne.n	80030fc <checkPageSwitchButtons+0x104>
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 140) &&
 800301a:	4b39      	ldr	r3, [pc, #228]	@ (8003100 <checkPageSwitchButtons+0x108>)
 800301c:	885b      	ldrh	r3, [r3, #2]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d032      	beq.n	8003088 <checkPageSwitchButtons+0x90>
 8003022:	4b37      	ldr	r3, [pc, #220]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8003024:	885b      	ldrh	r3, [r3, #2]
 8003026:	2b8b      	cmp	r3, #139	@ 0x8b
 8003028:	d82e      	bhi.n	8003088 <checkPageSwitchButtons+0x90>
			  (TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 72)) {
 800302a:	4b35      	ldr	r3, [pc, #212]	@ (8003100 <checkPageSwitchButtons+0x108>)
 800302c:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 0) && (TS_State.touchX[0] < 140) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	d02a      	beq.n	8003088 <checkPageSwitchButtons+0x90>
			  (TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 72)) {
 8003032:	4b33      	ldr	r3, [pc, #204]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8003034:	88db      	ldrh	r3, [r3, #6]
 8003036:	2b47      	cmp	r3, #71	@ 0x47
 8003038:	d826      	bhi.n	8003088 <checkPageSwitchButtons+0x90>
				switch(menue_page){
 800303a:	4b32      	ldr	r3, [pc, #200]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d820      	bhi.n	8003084 <checkPageSwitchButtons+0x8c>
 8003042:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <checkPageSwitchButtons+0x50>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	0800305d 	.word	0x0800305d
 800304c:	08003065 	.word	0x08003065
 8003050:	0800306d 	.word	0x0800306d
 8003054:	08003075 	.word	0x08003075
 8003058:	0800307d 	.word	0x0800307d
						menue_page = PAGE5;
 800305c:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]
					break;
 8003062:	e00f      	b.n	8003084 <checkPageSwitchButtons+0x8c>
						menue_page = PAGE1;
 8003064:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
					break;
 800306a:	e00b      	b.n	8003084 <checkPageSwitchButtons+0x8c>
						menue_page = PAGE2;
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
					break;
 8003072:	e007      	b.n	8003084 <checkPageSwitchButtons+0x8c>
						menue_page = PAGE3;
 8003074:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
					break;
 800307a:	e003      	b.n	8003084 <checkPageSwitchButtons+0x8c>
						menue_page = PAGE4;
 800307c:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 800307e:	2203      	movs	r2, #3
 8003080:	701a      	strb	r2, [r3, #0]
					break;
 8003082:	bf00      	nop
				drawTitle();
 8003084:	f7ff fea0 	bl	8002dc8 <drawTitle>
			if((TS_State.touchX[0] > 659) && (TS_State.touchX[0] < 800) &&
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <checkPageSwitchButtons+0x108>)
 800308a:	885b      	ldrh	r3, [r3, #2]
 800308c:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8003090:	d334      	bcc.n	80030fc <checkPageSwitchButtons+0x104>
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <checkPageSwitchButtons+0x108>)
 8003094:	885b      	ldrh	r3, [r3, #2]
 8003096:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800309a:	d22f      	bcs.n	80030fc <checkPageSwitchButtons+0x104>
			  (TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 72)) {
 800309c:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <checkPageSwitchButtons+0x108>)
 800309e:	88db      	ldrh	r3, [r3, #6]
			if((TS_State.touchX[0] > 659) && (TS_State.touchX[0] < 800) &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02b      	beq.n	80030fc <checkPageSwitchButtons+0x104>
			  (TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 72)) {
 80030a4:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <checkPageSwitchButtons+0x108>)
 80030a6:	88db      	ldrh	r3, [r3, #6]
 80030a8:	2b47      	cmp	r3, #71	@ 0x47
 80030aa:	d827      	bhi.n	80030fc <checkPageSwitchButtons+0x104>
				switch(menue_page){
 80030ac:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d821      	bhi.n	80030f8 <checkPageSwitchButtons+0x100>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <checkPageSwitchButtons+0xc4>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030d1 	.word	0x080030d1
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030e1 	.word	0x080030e1
 80030c8:	080030e9 	.word	0x080030e9
 80030cc:	080030f1 	.word	0x080030f1
						menue_page = PAGE2;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
					break;
 80030d6:	e00f      	b.n	80030f8 <checkPageSwitchButtons+0x100>
						menue_page = PAGE3;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
					break;
 80030de:	e00b      	b.n	80030f8 <checkPageSwitchButtons+0x100>
						menue_page = PAGE4;
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030e2:	2203      	movs	r2, #3
 80030e4:	701a      	strb	r2, [r3, #0]
					break;
 80030e6:	e007      	b.n	80030f8 <checkPageSwitchButtons+0x100>
						menue_page = PAGE5;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030ea:	2204      	movs	r2, #4
 80030ec:	701a      	strb	r2, [r3, #0]
					break;
 80030ee:	e003      	b.n	80030f8 <checkPageSwitchButtons+0x100>
						menue_page = PAGE1;
 80030f0:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <checkPageSwitchButtons+0x10c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
					break;
 80030f6:	bf00      	nop
				drawTitle();
 80030f8:	f7ff fe66 	bl	8002dc8 <drawTitle>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20030914 	.word	0x20030914
 8003104:	20011014 	.word	0x20011014

08003108 <drawButtonRow>:

/*** Private Functions **************************************************************/
/************************************************************************************/

/************************************************************************************/
static void drawButtonRow(void){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
	uint16_t i;
	char string_buffer[3];

	// draw the buttons
	for(i = 1; i < 6; i++){
 800310e:	2301      	movs	r3, #1
 8003110:	80fb      	strh	r3, [r7, #6]
 8003112:	e085      	b.n	8003220 <drawButtonRow+0x118>
	  BSP_LCD_SetFont(&Font24);
 8003114:	4847      	ldr	r0, [pc, #284]	@ (8003234 <drawButtonRow+0x12c>)
 8003116:	f00d f8af 	bl	8010278 <BSP_LCD_SetFont>

	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800311a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800311e:	f00d f879 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(10 + (i-1)*170, 370, 100, 100);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	461a      	mov	r2, r3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4413      	add	r3, r2
 800312a:	461a      	mov	r2, r3
 800312c:	0111      	lsls	r1, r2, #4
 800312e:	461a      	mov	r2, r3
 8003130:	460b      	mov	r3, r1
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	3ba0      	subs	r3, #160	@ 0xa0
 800313a:	b298      	uxth	r0, r3
 800313c:	2364      	movs	r3, #100	@ 0x64
 800313e:	2264      	movs	r2, #100	@ 0x64
 8003140:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8003144:	f00d fabc 	bl	80106c0 <BSP_LCD_FillRect>

	  if(user_mode != i){
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <drawButtonRow+0x130>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d03d      	beq.n	80031ce <drawButtonRow+0xc6>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003152:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003156:	f00d f85d 	bl	8010214 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(10 + (i-1)*170+10, 380, 80, 80);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	461a      	mov	r2, r3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4413      	add	r3, r2
 8003162:	461a      	mov	r2, r3
 8003164:	0111      	lsls	r1, r2, #4
 8003166:	461a      	mov	r2, r3
 8003168:	460b      	mov	r3, r1
 800316a:	4413      	add	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b96      	subs	r3, #150	@ 0x96
 8003172:	b298      	uxth	r0, r3
 8003174:	2350      	movs	r3, #80	@ 0x50
 8003176:	2250      	movs	r2, #80	@ 0x50
 8003178:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800317c:	f00d faa0 	bl	80106c0 <BSP_LCD_FillRect>

		  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003180:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003184:	f00d f846 	bl	8010214 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003188:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800318c:	f00d f85a 	bl	8010244 <BSP_LCD_SetBackColor>
		  snprintf(string_buffer,2, "%u", i);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4638      	mov	r0, r7
 8003194:	4a29      	ldr	r2, [pc, #164]	@ (800323c <drawButtonRow+0x134>)
 8003196:	2102      	movs	r1, #2
 8003198:	f010 feec 	bl	8013f74 <sniprintf>
		  BSP_LCD_DisplayStringAt(10 + (i-1)*170+42, 395 +  Font24.Height / 2, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	461a      	mov	r2, r3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	0111      	lsls	r1, r2, #4
 80031a8:	461a      	mov	r2, r3
 80031aa:	460b      	mov	r3, r1
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b76      	subs	r3, #118	@ 0x76
 80031b4:	b298      	uxth	r0, r3
 80031b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <drawButtonRow+0x12c>)
 80031b8:	88db      	ldrh	r3, [r3, #6]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f203 138b 	addw	r3, r3, #395	@ 0x18b
 80031c2:	b299      	uxth	r1, r3
 80031c4:	463a      	mov	r2, r7
 80031c6:	2303      	movs	r3, #3
 80031c8:	f00d f8dc 	bl	8010384 <BSP_LCD_DisplayStringAt>
 80031cc:	e025      	b.n	800321a <drawButtonRow+0x112>
	  }

	  else{
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80031ce:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80031d2:	f00d f81f 	bl	8010214 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80031d6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80031da:	f00d f833 	bl	8010244 <BSP_LCD_SetBackColor>
		  snprintf(string_buffer,2, "%u", i);
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4638      	mov	r0, r7
 80031e2:	4a16      	ldr	r2, [pc, #88]	@ (800323c <drawButtonRow+0x134>)
 80031e4:	2102      	movs	r1, #2
 80031e6:	f010 fec5 	bl	8013f74 <sniprintf>
		  BSP_LCD_DisplayStringAt(10 + (i-1)*170+42, 395 +  Font24.Height / 2, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	461a      	mov	r2, r3
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	461a      	mov	r2, r3
 80031f4:	0111      	lsls	r1, r2, #4
 80031f6:	461a      	mov	r2, r3
 80031f8:	460b      	mov	r3, r1
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b76      	subs	r3, #118	@ 0x76
 8003202:	b298      	uxth	r0, r3
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <drawButtonRow+0x12c>)
 8003206:	88db      	ldrh	r3, [r3, #6]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	f203 138b 	addw	r3, r3, #395	@ 0x18b
 8003210:	b299      	uxth	r1, r3
 8003212:	463a      	mov	r2, r7
 8003214:	2303      	movs	r3, #3
 8003216:	f00d f8b5 	bl	8010384 <BSP_LCD_DisplayStringAt>
	for(i = 1; i < 6; i++){
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	3301      	adds	r3, #1
 800321e:	80fb      	strh	r3, [r7, #6]
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	2b05      	cmp	r3, #5
 8003224:	f67f af76 	bls.w	8003114 <drawButtonRow+0xc>
	  }

	}
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20020690 	.word	0x20020690
 8003238:	2001101c 	.word	0x2001101c
 800323c:	0801ad70 	.word	0x0801ad70

08003240 <drawWaveGenWaveforms>:
/************************************************************************************/

/************************************************************************************/
static void drawWaveGenWaveforms(void){
 8003240:	b580      	push	{r7, lr}
 8003242:	b09a      	sub	sp, #104	@ 0x68
 8003244:	af00      	add	r7, sp, #0
	char string_buffer[100];

	BSP_LCD_SetFont(&Font24);
 8003246:	48a7      	ldr	r0, [pc, #668]	@ (80034e4 <drawWaveGenWaveforms+0x2a4>)
 8003248:	f00d f816 	bl	8010278 <BSP_LCD_SetFont>

	// sinus
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800324c:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003250:	f00c ffe0 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(10, 104, 220, 100);
 8003254:	2364      	movs	r3, #100	@ 0x64
 8003256:	22dc      	movs	r2, #220	@ 0xdc
 8003258:	2168      	movs	r1, #104	@ 0x68
 800325a:	200a      	movs	r0, #10
 800325c:	f00d fa30 	bl	80106c0 <BSP_LCD_FillRect>

	if(wav_gen == WAV_SINUS){
 8003260:	4ba1      	ldr	r3, [pc, #644]	@ (80034e8 <drawWaveGenWaveforms+0x2a8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d108      	bne.n	800327a <drawWaveGenWaveforms+0x3a>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003268:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800326c:	f00c ffd2 	bl	8010214 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8003270:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003274:	f00c ffe6 	bl	8010244 <BSP_LCD_SetBackColor>
 8003278:	e011      	b.n	800329e <drawWaveGenWaveforms+0x5e>
	}

	else{
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800327a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800327e:	f00c ffc9 	bl	8010214 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(20, 114, 200, 80);
 8003282:	2350      	movs	r3, #80	@ 0x50
 8003284:	22c8      	movs	r2, #200	@ 0xc8
 8003286:	2172      	movs	r1, #114	@ 0x72
 8003288:	2014      	movs	r0, #20
 800328a:	f00d fa19 	bl	80106c0 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800328e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003292:	f00c ffbf 	bl	8010214 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003296:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800329a:	f00c ffd3 	bl	8010244 <BSP_LCD_SetBackColor>

	}
	snprintf(string_buffer,100, "Sinus");
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	4a92      	ldr	r2, [pc, #584]	@ (80034ec <drawWaveGenWaveforms+0x2ac>)
 80032a2:	2164      	movs	r1, #100	@ 0x64
 80032a4:	4618      	mov	r0, r3
 80032a6:	f010 fe65 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(30, 142, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	2303      	movs	r3, #3
 80032ae:	218e      	movs	r1, #142	@ 0x8e
 80032b0:	201e      	movs	r0, #30
 80032b2:	f00d f867 	bl	8010384 <BSP_LCD_DisplayStringAt>

	// rectangle
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80032b6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80032ba:	f00c ffab 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(10, 237, 220, 100);
 80032be:	2364      	movs	r3, #100	@ 0x64
 80032c0:	22dc      	movs	r2, #220	@ 0xdc
 80032c2:	21ed      	movs	r1, #237	@ 0xed
 80032c4:	200a      	movs	r0, #10
 80032c6:	f00d f9fb 	bl	80106c0 <BSP_LCD_FillRect>

	if(wav_gen == WAV_RECTANGLE){
 80032ca:	4b87      	ldr	r3, [pc, #540]	@ (80034e8 <drawWaveGenWaveforms+0x2a8>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <drawWaveGenWaveforms+0xa4>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80032d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80032d6:	f00c ff9d 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80032da:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80032de:	f00c ffb1 	bl	8010244 <BSP_LCD_SetBackColor>
 80032e2:	e011      	b.n	8003308 <drawWaveGenWaveforms+0xc8>

	}

	else{
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80032e4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80032e8:	f00c ff94 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(20, 247, 200, 80);
 80032ec:	2350      	movs	r3, #80	@ 0x50
 80032ee:	22c8      	movs	r2, #200	@ 0xc8
 80032f0:	21f7      	movs	r1, #247	@ 0xf7
 80032f2:	2014      	movs	r0, #20
 80032f4:	f00d f9e4 	bl	80106c0 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80032f8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80032fc:	f00c ff8a 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003300:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003304:	f00c ff9e 	bl	8010244 <BSP_LCD_SetBackColor>
	}

	snprintf(string_buffer,100, "Rechteck");
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4a79      	ldr	r2, [pc, #484]	@ (80034f0 <drawWaveGenWaveforms+0x2b0>)
 800330c:	2164      	movs	r1, #100	@ 0x64
 800330e:	4618      	mov	r0, r3
 8003310:	f010 fe30 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(30, 275, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8003314:	1d3a      	adds	r2, r7, #4
 8003316:	2303      	movs	r3, #3
 8003318:	f240 1113 	movw	r1, #275	@ 0x113
 800331c:	201e      	movs	r0, #30
 800331e:	f00d f831 	bl	8010384 <BSP_LCD_DisplayStringAt>


	// sawtooth
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003322:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003326:	f00c ff75 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(10, 370, 220, 100);
 800332a:	2364      	movs	r3, #100	@ 0x64
 800332c:	22dc      	movs	r2, #220	@ 0xdc
 800332e:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8003332:	200a      	movs	r0, #10
 8003334:	f00d f9c4 	bl	80106c0 <BSP_LCD_FillRect>

	if(wav_gen == WAV_SAWTOOTH){
 8003338:	4b6b      	ldr	r3, [pc, #428]	@ (80034e8 <drawWaveGenWaveforms+0x2a8>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d108      	bne.n	8003352 <drawWaveGenWaveforms+0x112>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003340:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003344:	f00c ff66 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8003348:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800334c:	f00c ff7a 	bl	8010244 <BSP_LCD_SetBackColor>
 8003350:	e012      	b.n	8003378 <drawWaveGenWaveforms+0x138>

	}

	else {
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003352:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003356:	f00c ff5d 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(20, 380, 200, 80);
 800335a:	2350      	movs	r3, #80	@ 0x50
 800335c:	22c8      	movs	r2, #200	@ 0xc8
 800335e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8003362:	2014      	movs	r0, #20
 8003364:	f00d f9ac 	bl	80106c0 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003368:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800336c:	f00c ff52 	bl	8010214 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003370:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003374:	f00c ff66 	bl	8010244 <BSP_LCD_SetBackColor>
	}

	snprintf(string_buffer,100, "Saegezahn");
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <drawWaveGenWaveforms+0x2b4>)
 800337c:	2164      	movs	r1, #100	@ 0x64
 800337e:	4618      	mov	r0, r3
 8003380:	f010 fdf8 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(30, 408, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8003384:	1d3a      	adds	r2, r7, #4
 8003386:	2303      	movs	r3, #3
 8003388:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 800338c:	201e      	movs	r0, #30
 800338e:	f00c fff9 	bl	8010384 <BSP_LCD_DisplayStringAt>

	// frequency
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003392:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003396:	f00c ff3d 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(290, 137, 220, 100);
 800339a:	2364      	movs	r3, #100	@ 0x64
 800339c:	22dc      	movs	r2, #220	@ 0xdc
 800339e:	2189      	movs	r1, #137	@ 0x89
 80033a0:	f44f 7091 	mov.w	r0, #290	@ 0x122
 80033a4:	f00d f98c 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80033a8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80033ac:	f00c ff32 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(300, 147, 200, 80);
 80033b0:	2350      	movs	r3, #80	@ 0x50
 80033b2:	22c8      	movs	r2, #200	@ 0xc8
 80033b4:	2193      	movs	r1, #147	@ 0x93
 80033b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80033ba:	f00d f981 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80033be:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80033c2:	f00c ff27 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(290, 337, 220, 100);
 80033c6:	2364      	movs	r3, #100	@ 0x64
 80033c8:	22dc      	movs	r2, #220	@ 0xdc
 80033ca:	f240 1151 	movw	r1, #337	@ 0x151
 80033ce:	f44f 7091 	mov.w	r0, #290	@ 0x122
 80033d2:	f00d f975 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80033d6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80033da:	f00c ff1b 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(300, 347, 200, 80);
 80033de:	2350      	movs	r3, #80	@ 0x50
 80033e0:	22c8      	movs	r2, #200	@ 0xc8
 80033e2:	f240 115b 	movw	r1, #347	@ 0x15b
 80033e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80033ea:	f00d f969 	bl	80106c0 <BSP_LCD_FillRect>


	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80033ee:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80033f2:	f00c ff0f 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80033f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80033fa:	f00c ff23 	bl	8010244 <BSP_LCD_SetBackColor>

	snprintf(string_buffer,100, " + 100 Hz");
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <drawWaveGenWaveforms+0x2b8>)
 8003402:	2164      	movs	r1, #100	@ 0x64
 8003404:	4618      	mov	r0, r3
 8003406:	f010 fdb5 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(315, 175, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800340a:	1d3a      	adds	r2, r7, #4
 800340c:	2303      	movs	r3, #3
 800340e:	21af      	movs	r1, #175	@ 0xaf
 8003410:	f240 103b 	movw	r0, #315	@ 0x13b
 8003414:	f00c ffb6 	bl	8010384 <BSP_LCD_DisplayStringAt>

	snprintf(string_buffer,100, " - 100 Hz");
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	4a38      	ldr	r2, [pc, #224]	@ (80034fc <drawWaveGenWaveforms+0x2bc>)
 800341c:	2164      	movs	r1, #100	@ 0x64
 800341e:	4618      	mov	r0, r3
 8003420:	f010 fda8 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(315, 375, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8003424:	1d3a      	adds	r2, r7, #4
 8003426:	2303      	movs	r3, #3
 8003428:	f240 1177 	movw	r1, #375	@ 0x177
 800342c:	f240 103b 	movw	r0, #315	@ 0x13b
 8003430:	f00c ffa8 	bl	8010384 <BSP_LCD_DisplayStringAt>

	// volume
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003434:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003438:	f00c feec 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(570, 137, 220, 100);
 800343c:	2364      	movs	r3, #100	@ 0x64
 800343e:	22dc      	movs	r2, #220	@ 0xdc
 8003440:	2189      	movs	r1, #137	@ 0x89
 8003442:	f240 203a 	movw	r0, #570	@ 0x23a
 8003446:	f00d f93b 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800344a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800344e:	f00c fee1 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(580, 147, 200, 80);
 8003452:	2350      	movs	r3, #80	@ 0x50
 8003454:	22c8      	movs	r2, #200	@ 0xc8
 8003456:	2193      	movs	r1, #147	@ 0x93
 8003458:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800345c:	f00d f930 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003460:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003464:	f00c fed6 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(570, 337, 220, 100);
 8003468:	2364      	movs	r3, #100	@ 0x64
 800346a:	22dc      	movs	r2, #220	@ 0xdc
 800346c:	f240 1151 	movw	r1, #337	@ 0x151
 8003470:	f240 203a 	movw	r0, #570	@ 0x23a
 8003474:	f00d f924 	bl	80106c0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003478:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800347c:	f00c feca 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(580, 347, 200, 80);
 8003480:	2350      	movs	r3, #80	@ 0x50
 8003482:	22c8      	movs	r2, #200	@ 0xc8
 8003484:	f240 115b 	movw	r1, #347	@ 0x15b
 8003488:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800348c:	f00d f918 	bl	80106c0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003490:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003494:	f00c febe 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003498:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800349c:	f00c fed2 	bl	8010244 <BSP_LCD_SetBackColor>

	snprintf(string_buffer,100, " + 1 dB");
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <drawWaveGenWaveforms+0x2c0>)
 80034a4:	2164      	movs	r1, #100	@ 0x64
 80034a6:	4618      	mov	r0, r3
 80034a8:	f010 fd64 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(605, 175, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80034ac:	1d3a      	adds	r2, r7, #4
 80034ae:	2303      	movs	r3, #3
 80034b0:	21af      	movs	r1, #175	@ 0xaf
 80034b2:	f240 205d 	movw	r0, #605	@ 0x25d
 80034b6:	f00c ff65 	bl	8010384 <BSP_LCD_DisplayStringAt>

	snprintf(string_buffer,100, " - 1 dB");
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4a11      	ldr	r2, [pc, #68]	@ (8003504 <drawWaveGenWaveforms+0x2c4>)
 80034be:	2164      	movs	r1, #100	@ 0x64
 80034c0:	4618      	mov	r0, r3
 80034c2:	f010 fd57 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(605, 375, (uint8_t *)&string_buffer[0], LEFT_MODE);
 80034c6:	1d3a      	adds	r2, r7, #4
 80034c8:	2303      	movs	r3, #3
 80034ca:	f240 1177 	movw	r1, #375	@ 0x177
 80034ce:	f240 205d 	movw	r0, #605	@ 0x25d
 80034d2:	f00c ff57 	bl	8010384 <BSP_LCD_DisplayStringAt>

	drawWaveGenInfo();
 80034d6:	f000 f817 	bl	8003508 <drawWaveGenInfo>
}
 80034da:	bf00      	nop
 80034dc:	3768      	adds	r7, #104	@ 0x68
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20020690 	.word	0x20020690
 80034e8:	20011024 	.word	0x20011024
 80034ec:	0801ad74 	.word	0x0801ad74
 80034f0:	0801ad7c 	.word	0x0801ad7c
 80034f4:	0801ad88 	.word	0x0801ad88
 80034f8:	0801ad94 	.word	0x0801ad94
 80034fc:	0801ada0 	.word	0x0801ada0
 8003500:	0801adac 	.word	0x0801adac
 8003504:	0801adb4 	.word	0x0801adb4

08003508 <drawWaveGenInfo>:
/************************************************************************************/

/************************************************************************************/
static void drawWaveGenInfo(void){
 8003508:	b580      	push	{r7, lr}
 800350a:	b09a      	sub	sp, #104	@ 0x68
 800350c:	af00      	add	r7, sp, #0
	char string_buffer[100];

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800350e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003512:	f00c fe7f 	bl	8010214 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003516:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800351a:	f00c fe93 	bl	8010244 <BSP_LCD_SetBackColor>

	BSP_LCD_SetFont(&Font24);
 800351e:	4817      	ldr	r0, [pc, #92]	@ (800357c <drawWaveGenInfo+0x74>)
 8003520:	f00c feaa 	bl	8010278 <BSP_LCD_SetFont>

	snprintf(string_buffer,100, "f = %i Hz   ", (int)wav_gen_output_frequency);
 8003524:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <drawWaveGenInfo+0x78>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800352e:	1d38      	adds	r0, r7, #4
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <drawWaveGenInfo+0x7c>)
 8003536:	2164      	movs	r1, #100	@ 0x64
 8003538:	f010 fd1c 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(290, 275, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800353c:	1d3a      	adds	r2, r7, #4
 800353e:	2303      	movs	r3, #3
 8003540:	f240 1113 	movw	r1, #275	@ 0x113
 8003544:	f44f 7091 	mov.w	r0, #290	@ 0x122
 8003548:	f00c ff1c 	bl	8010384 <BSP_LCD_DisplayStringAt>

	snprintf(string_buffer,100, "vol. = %i dB ", (int)wav_gen_output_volume_dB);
 800354c:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <drawWaveGenInfo+0x80>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003556:	1d38      	adds	r0, r7, #4
 8003558:	ee17 3a90 	vmov	r3, s15
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <drawWaveGenInfo+0x84>)
 800355e:	2164      	movs	r1, #100	@ 0x64
 8003560:	f010 fd08 	bl	8013f74 <sniprintf>
	BSP_LCD_DisplayStringAt(570, 275, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8003564:	1d3a      	adds	r2, r7, #4
 8003566:	2303      	movs	r3, #3
 8003568:	f240 1113 	movw	r1, #275	@ 0x113
 800356c:	f240 203a 	movw	r0, #570	@ 0x23a
 8003570:	f00c ff08 	bl	8010384 <BSP_LCD_DisplayStringAt>
}
 8003574:	bf00      	nop
 8003576:	3768      	adds	r7, #104	@ 0x68
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20020690 	.word	0x20020690
 8003580:	20011020 	.word	0x20011020
 8003584:	0801adbc 	.word	0x0801adbc
 8003588:	20020000 	.word	0x20020000
 800358c:	0801adcc 	.word	0x0801adcc

08003590 <processing_init>:

 	Initialization of the processing. This function is called once after start-up.
 	Init the CMSIS lib functions here if needed.
 */
/***********************************************************************************/
void processing_init(void){
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af02      	add	r7, sp, #8
 	 - input_data_CH2_f
 	 - output_data_CH1_f
 	 - output_data_CH2_f

	 */
	arm_fir_init_f32(&fir_bp_filter_float, FILTER_ORDER+1, &bp_coeffs_float[0], &filter_state_bp_float[0], BUFFER_SIZE_SAMPLES);
 8003596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <processing_init+0x6c>)
 800359e:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <processing_init+0x70>)
 80035a0:	2180      	movs	r1, #128	@ 0x80
 80035a2:	4818      	ldr	r0, [pc, #96]	@ (8003604 <processing_init+0x74>)
 80035a4:	f00f fd14 	bl	8012fd0 <arm_fir_init_f32>
	arm_fir_init_q15(&fir_bp_filter_q15, FILTER_ORDER+1, &bp_coeffs_q15[0], &filter_state_bp_q15[0], BUFFER_SIZE_SAMPLES);
 80035a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <processing_init+0x78>)
 80035b0:	4a16      	ldr	r2, [pc, #88]	@ (800360c <processing_init+0x7c>)
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	4816      	ldr	r0, [pc, #88]	@ (8003610 <processing_init+0x80>)
 80035b6:	f00f fcf5 	bl	8012fa4 <arm_fir_init_q15>
	arm_fir_init_f32(&fir_bs_filter_float, FILTER_ORDER+1, &bs_coeffs_float[0], &filter_state_bs_float[0], BUFFER_SIZE_SAMPLES);
 80035ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <processing_init+0x84>)
 80035c2:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <processing_init+0x88>)
 80035c4:	2180      	movs	r1, #128	@ 0x80
 80035c6:	4815      	ldr	r0, [pc, #84]	@ (800361c <processing_init+0x8c>)
 80035c8:	f00f fd02 	bl	8012fd0 <arm_fir_init_f32>
	arm_fir_init_q15(&fir_bs_filter_q15, FILTER_ORDER+1, &bs_coeffs_q15[0], &filter_state_bs_q15[0], BUFFER_SIZE_SAMPLES);
 80035cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <processing_init+0x90>)
 80035d4:	4a13      	ldr	r2, [pc, #76]	@ (8003624 <processing_init+0x94>)
 80035d6:	2180      	movs	r1, #128	@ 0x80
 80035d8:	4813      	ldr	r0, [pc, #76]	@ (8003628 <processing_init+0x98>)
 80035da:	f00f fce3 	bl	8012fa4 <arm_fir_init_q15>

	if(arm_rfft_fast_init_f32(&rfft_fast_float,FFT_SIZE)!=ARM_MATH_SUCCESS){
 80035de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035e2:	4812      	ldr	r0, [pc, #72]	@ (800362c <processing_init+0x9c>)
 80035e4:	f00e fdb6 	bl	8012154 <arm_rfft_fast_init_f32>
		// "missing" error handling
	}
	if(arm_rfft_init_q15(&rfft_q15,FFT_SIZE, IFFT_FLAG, FFT_BIT_REVERSE)!= ARM_MATH_SUCCESS){
 80035e8:	2301      	movs	r3, #1
 80035ea:	2200      	movs	r2, #0
 80035ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035f0:	480f      	ldr	r0, [pc, #60]	@ (8003630 <processing_init+0xa0>)
 80035f2:	f00f fac7 	bl	8012b84 <arm_rfft_init_q15>
		// "missing" error handling
	}
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20011060 	.word	0x20011060
 8003600:	20020008 	.word	0x20020008
 8003604:	2001103c 	.word	0x2001103c
 8003608:	20013460 	.word	0x20013460
 800360c:	20020204 	.word	0x20020204
 8003610:	20011030 	.word	0x20011030
 8003614:	20012260 	.word	0x20012260
 8003618:	20020304 	.word	0x20020304
 800361c:	20011054 	.word	0x20011054
 8003620:	20013d60 	.word	0x20013d60
 8003624:	20020500 	.word	0x20020500
 8003628:	20011048 	.word	0x20011048
 800362c:	20030920 	.word	0x20030920
 8003630:	20030938 	.word	0x20030938

08003634 <audio_signal_processing>:
/***********************************************************************************/
void audio_signal_processing(int32_t * input_data_CH1, int32_t * input_data_CH2, int32_t * output_data_CH1, int32_t * output_data_CH2){
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	f5ad 4da0 	sub.w	sp, sp, #20480	@ 0x5000
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	f107 0418 	add.w	r4, r7, #24
 8003642:	f844 0c0c 	str.w	r0, [r4, #-12]
 8003646:	f107 0018 	add.w	r0, r7, #24
 800364a:	f840 1c10 	str.w	r1, [r0, #-16]
 800364e:	f107 0118 	add.w	r1, r7, #24
 8003652:	f841 2c14 	str.w	r2, [r1, #-20]
 8003656:	f107 0218 	add.w	r2, r7, #24
 800365a:	f842 3c18 	str.w	r3, [r2, #-24]
	float output_data_CH2_f[BUFFER_SIZE_SAMPLES];
#endif
#endif

#if USE_FP_PROCESSING == 1
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 800365e:	2300      	movs	r3, #0
 8003660:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003664:	443a      	add	r2, r7
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e024      	b.n	80036b4 <audio_signal_processing+0x80>
#if USE_FP_PROCESSING_ON_CH1 == 1
		input_data_CH1_f[i] = input_data_CH1[i];
 800366a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800366e:	443b      	add	r3, r7
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f107 0218 	add.w	r2, r7, #24
 8003678:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003688:	f241 0318 	movw	r3, #4120	@ 0x1018
 800368c:	443b      	add	r3, r7
 800368e:	461a      	mov	r2, r3
 8003690:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003694:	443b      	add	r3, r7
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b04      	subs	r3, #4
 800369e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80036a2:	f245 0314 	movw	r3, #20500	@ 0x5014
 80036a6:	443b      	add	r3, r7
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	f245 0214 	movw	r2, #20500	@ 0x5014
 80036b0:	443a      	add	r2, r7
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	f245 0314 	movw	r3, #20500	@ 0x5014
 80036b8:	443b      	add	r3, r7
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c0:	d3d3      	bcc.n	800366a <audio_signal_processing+0x36>
	// ---------------------------------------------------------------------------------------


	//BSP_LED_On(LED_GREEN);

	switch(user_mode){
 80036c2:	4ba2      	ldr	r3, [pc, #648]	@ (800394c <audio_signal_processing+0x318>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	f200 81dc 	bhi.w	8003a84 <audio_signal_processing+0x450>
 80036cc:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <audio_signal_processing+0xa0>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	0800374d 	.word	0x0800374d
 80036dc:	08003887 	.word	0x08003887
 80036e0:	080038af 	.word	0x080038af
 80036e4:	08003941 	.word	0x08003941
 80036e8:	080039f3 	.word	0x080039f3

	case 0:
		// ---------------------------------------------------------------------------------------
		// no mode selected by the user -> set output to 0
		// ---------------------------------------------------------------------------------------
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80036ec:	2300      	movs	r3, #0
 80036ee:	f245 0214 	movw	r2, #20500	@ 0x5014
 80036f2:	443a      	add	r2, r7
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e021      	b.n	800373c <audio_signal_processing+0x108>
#if USE_FP_PROCESSING_ON_CH1 == 1
			output_data_CH1_f[i] = 0;
 80036f8:	f107 0318 	add.w	r3, r7, #24
 80036fc:	461a      	mov	r2, r3
 80036fe:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003702:	443b      	add	r3, r7
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	3b04      	subs	r3, #4
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
#endif

#if USE_FP_PROCESSING_ON_CH2 == 1
			output_data_CH2_f[i] = 0;
#else
			output_data_CH2[i] = 0;
 8003712:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003716:	443b      	add	r3, r7
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	f107 0218 	add.w	r2, r7, #24
 8003720:	f852 2c18 	ldr.w	r2, [r2, #-24]
 8003724:	4413      	add	r3, r2
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 800372a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800372e:	443b      	add	r3, r7
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003738:	443a      	add	r2, r7
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003740:	443b      	add	r3, r7
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003748:	d3d6      	bcc.n	80036f8 <audio_signal_processing+0xc4>
#endif
		}
		// ---------------------------------------------------------------------------------------
		break;
 800374a:	e1e2      	b.n	8003b12 <audio_signal_processing+0x4de>

	case 1:

	for (i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 800374c:	2300      	movs	r3, #0
 800374e:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003752:	443a      	add	r2, r7
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e020      	b.n	800379a <audio_signal_processing+0x166>
		input_data_CH2_q15[i] = (q15_t)(input_data_CH2[i]>>8);
 8003758:	f245 0314 	movw	r3, #20500	@ 0x5014
 800375c:	443b      	add	r3, r7
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f107 0218 	add.w	r2, r7, #24
 8003766:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800376a:	4413      	add	r3, r2
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	121b      	asrs	r3, r3, #8
 8003770:	b219      	sxth	r1, r3
 8003772:	f245 0318 	movw	r3, #20504	@ 0x5018
 8003776:	443b      	add	r3, r7
 8003778:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800377c:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003780:	443a      	add	r2, r7
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003788:	f245 0314 	movw	r3, #20500	@ 0x5014
 800378c:	443b      	add	r3, r7
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003796:	443a      	add	r2, r7
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800379e:	443b      	add	r3, r7
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d3d7      	bcc.n	8003758 <audio_signal_processing+0x124>
	}

	BSP_LED_Off(LED_GREEN);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f00a ffc1 	bl	800e730 <BSP_LED_Off>
	// BITTE HIER FIR-FILTER CODIEREN, ZUERST FLOAT AUF CH1 UND DANN Q15 AUF CH2
//	for (i = 0; i < BUFFER_SIZE_SAMPLES; i++){
//			output_data_CH1_f[i] = input_data_CH1_f[i];
//			output_data_CH2_q15[i] = input_data_CH2_q15[i];
//	}
	arm_fir_f32(&fir_bs_filter_float, input_data_CH1_f, output_data_CH1_f, BUFFER_SIZE_SAMPLES);
 80037ae:	4a68      	ldr	r2, [pc, #416]	@ (8003950 <audio_signal_processing+0x31c>)
 80037b0:	f245 0318 	movw	r3, #20504	@ 0x5018
 80037b4:	4413      	add	r3, r2
 80037b6:	19da      	adds	r2, r3, r7
 80037b8:	4966      	ldr	r1, [pc, #408]	@ (8003954 <audio_signal_processing+0x320>)
 80037ba:	f245 0318 	movw	r3, #20504	@ 0x5018
 80037be:	440b      	add	r3, r1
 80037c0:	19d9      	adds	r1, r3, r7
 80037c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037c6:	4864      	ldr	r0, [pc, #400]	@ (8003958 <audio_signal_processing+0x324>)
 80037c8:	f00f fc14 	bl	8012ff4 <arm_fir_f32>
	// BITTE HIER FIR-FILTER CODIEREN, ZUERST FLOAT AUF CH1 UND DANN Q15 AUF CH2
	BSP_LED_On(LED_GREEN);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f00a ff95 	bl	800e6fc <BSP_LED_On>

	//scale to 24 bit and add 32 bit sign extension
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80037d2:	2300      	movs	r3, #0
 80037d4:	f245 0214 	movw	r2, #20500	@ 0x5014
 80037d8:	443a      	add	r2, r7
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e04b      	b.n	8003876 <audio_signal_processing+0x242>
		if(output_data_CH2_q15[i]<0){
 80037de:	f244 0318 	movw	r3, #16408	@ 0x4018
 80037e2:	443b      	add	r3, r7
 80037e4:	461a      	mov	r2, r3
 80037e6:	f245 0314 	movw	r3, #20500	@ 0x5014
 80037ea:	443b      	add	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da1b      	bge.n	8003832 <audio_signal_processing+0x1fe>
			output_data_CH2[i] = (int32_t)((((uint32_t)output_data_CH2_q15[i])<<8)|0xFF000000);
 80037fa:	f244 0318 	movw	r3, #16408	@ 0x4018
 80037fe:	443b      	add	r3, r7
 8003800:	461a      	mov	r2, r3
 8003802:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003806:	443b      	add	r3, r7
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	f043 417f 	orr.w	r1, r3, #4278190080	@ 0xff000000
 8003818:	f245 0314 	movw	r3, #20500	@ 0x5014
 800381c:	443b      	add	r3, r7
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f107 0218 	add.w	r2, r7, #24
 8003826:	f852 2c18 	ldr.w	r2, [r2, #-24]
 800382a:	4413      	add	r3, r2
 800382c:	460a      	mov	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e018      	b.n	8003864 <audio_signal_processing+0x230>
		}
		else{
			output_data_CH2[i] = (int32_t)(((uint32_t)output_data_CH2_q15[i])<<8);
 8003832:	f244 0318 	movw	r3, #16408	@ 0x4018
 8003836:	443b      	add	r3, r7
 8003838:	461a      	mov	r2, r3
 800383a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800383e:	443b      	add	r3, r7
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 800384a:	4619      	mov	r1, r3
 800384c:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003850:	443b      	add	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f107 0218 	add.w	r2, r7, #24
 800385a:	f852 2c18 	ldr.w	r2, [r2, #-24]
 800385e:	4413      	add	r3, r2
 8003860:	020a      	lsls	r2, r1, #8
 8003862:	601a      	str	r2, [r3, #0]
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003864:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003868:	443b      	add	r3, r7
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003872:	443a      	add	r2, r7
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	f245 0314 	movw	r3, #20500	@ 0x5014
 800387a:	443b      	add	r3, r7
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d3ac      	bcc.n	80037de <audio_signal_processing+0x1aa>
		}
	}

		break;
 8003884:	e145      	b.n	8003b12 <audio_signal_processing+0x4de>


	case 2:

		BSP_LED_On(LED_GREEN);
 8003886:	2001      	movs	r0, #1
 8003888:	f00a ff38 	bl	800e6fc <BSP_LED_On>
		// BITTE HIER FFT CODIEREN, FLOAT AUF CH1
		arm_fir_q15(&fir_bs_filter_q15, input_data_CH2_q15, output_data_CH2_q15, BUFFER_SIZE_SAMPLES);
 800388c:	4a33      	ldr	r2, [pc, #204]	@ (800395c <audio_signal_processing+0x328>)
 800388e:	f245 0318 	movw	r3, #20504	@ 0x5018
 8003892:	4413      	add	r3, r2
 8003894:	19da      	adds	r2, r3, r7
 8003896:	f644 0114 	movw	r1, #18452	@ 0x4814
 800389a:	4439      	add	r1, r7
 800389c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038a0:	482f      	ldr	r0, [pc, #188]	@ (8003960 <audio_signal_processing+0x32c>)
 80038a2:	f00f f9f7 	bl	8012c94 <arm_fir_q15>

		BSP_LED_Off(LED_GREEN);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f00a ff42 	bl	800e730 <BSP_LED_Off>
//		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
//			output_data_CH2[i] = 0;
//			output_data_CH1_f[i] = 0;
//		}

		break;
 80038ac:	e131      	b.n	8003b12 <audio_signal_processing+0x4de>

	case 3:
		// ---------------------------------------------------------------------------------------
		// Mode 3 selected with GUI: pass through the signals without modification
		// ---------------------------------------------------------------------------------------
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80038ae:	2300      	movs	r3, #0
 80038b0:	f245 0214 	movw	r2, #20500	@ 0x5014
 80038b4:	443a      	add	r2, r7
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e035      	b.n	8003926 <audio_signal_processing+0x2f2>
#if USE_FP_PROCESSING_ON_CH1 == 1
			output_data_CH1_f[i] = input_data_CH1_f[i];
 80038ba:	f241 0318 	movw	r3, #4120	@ 0x1018
 80038be:	443b      	add	r3, r7
 80038c0:	461a      	mov	r2, r3
 80038c2:	f245 0314 	movw	r3, #20500	@ 0x5014
 80038c6:	443b      	add	r3, r7
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3b04      	subs	r3, #4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f107 0318 	add.w	r3, r7, #24
 80038d6:	4619      	mov	r1, r3
 80038d8:	f245 0314 	movw	r3, #20500	@ 0x5014
 80038dc:	443b      	add	r3, r7
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3b04      	subs	r3, #4
 80038e6:	601a      	str	r2, [r3, #0]
#endif

#if USE_FP_PROCESSING_ON_CH2 == 1
			output_data_CH2_f[i] = input_data_CH1_f[i];
#else
			output_data_CH2[i] = input_data_CH2[i];
 80038e8:	f245 0314 	movw	r3, #20500	@ 0x5014
 80038ec:	443b      	add	r3, r7
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	f107 0218 	add.w	r2, r7, #24
 80038f6:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80038fa:	441a      	add	r2, r3
 80038fc:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003900:	443b      	add	r3, r7
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	f107 0118 	add.w	r1, r7, #24
 800390a:	f851 1c18 	ldr.w	r1, [r1, #-24]
 800390e:	440b      	add	r3, r1
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	601a      	str	r2, [r3, #0]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003914:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003918:	443b      	add	r3, r7
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003922:	443a      	add	r2, r7
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	f245 0314 	movw	r3, #20500	@ 0x5014
 800392a:	443b      	add	r3, r7
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003932:	d3c2      	bcc.n	80038ba <audio_signal_processing+0x286>
#endif
		}
		snprintf(user_text_line_mode_3, USER_TEXT_LENGTH, " ");
 8003934:	4a0b      	ldr	r2, [pc, #44]	@ (8003964 <audio_signal_processing+0x330>)
 8003936:	2131      	movs	r1, #49	@ 0x31
 8003938:	480b      	ldr	r0, [pc, #44]	@ (8003968 <audio_signal_processing+0x334>)
 800393a:	f010 fb1b 	bl	8013f74 <sniprintf>
		// ---------------------------------------------------------------------------------------
		break;
 800393e:	e0e8      	b.n	8003b12 <audio_signal_processing+0x4de>

	case 4:
		// ---------------------------------------------------------------------------------------
		// Mode 4 selected with GUI: pass through the signals without modification
		// ---------------------------------------------------------------------------------------
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003940:	2300      	movs	r3, #0
 8003942:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003946:	443a      	add	r2, r7
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e045      	b.n	80039d8 <audio_signal_processing+0x3a4>
 800394c:	2001101c 	.word	0x2001101c
 8003950:	ffffaffc 	.word	0xffffaffc
 8003954:	ffffbffc 	.word	0xffffbffc
 8003958:	20011054 	.word	0x20011054
 800395c:	ffffeffc 	.word	0xffffeffc
 8003960:	20011048 	.word	0x20011048
 8003964:	0801addc 	.word	0x0801addc
 8003968:	200309c0 	.word	0x200309c0
#if USE_FP_PROCESSING_ON_CH1 == 1
			output_data_CH1_f[i] = input_data_CH1_f[i];
 800396c:	f241 0318 	movw	r3, #4120	@ 0x1018
 8003970:	443b      	add	r3, r7
 8003972:	461a      	mov	r2, r3
 8003974:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003978:	443b      	add	r3, r7
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b04      	subs	r3, #4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f107 0318 	add.w	r3, r7, #24
 8003988:	4619      	mov	r1, r3
 800398a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800398e:	443b      	add	r3, r7
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	3b04      	subs	r3, #4
 8003998:	601a      	str	r2, [r3, #0]
#endif

#if USE_FP_PROCESSING_ON_CH2 == 1
			output_data_CH2_f[i] = input_data_CH1_f[i];
#else
			output_data_CH2[i] = input_data_CH2[i];
 800399a:	f245 0314 	movw	r3, #20500	@ 0x5014
 800399e:	443b      	add	r3, r7
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f107 0218 	add.w	r2, r7, #24
 80039a8:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80039ac:	441a      	add	r2, r3
 80039ae:	f245 0314 	movw	r3, #20500	@ 0x5014
 80039b2:	443b      	add	r3, r7
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	f107 0118 	add.w	r1, r7, #24
 80039bc:	f851 1c18 	ldr.w	r1, [r1, #-24]
 80039c0:	440b      	add	r3, r1
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	601a      	str	r2, [r3, #0]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80039c6:	f245 0314 	movw	r3, #20500	@ 0x5014
 80039ca:	443b      	add	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	f245 0214 	movw	r2, #20500	@ 0x5014
 80039d4:	443a      	add	r2, r7
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	f245 0314 	movw	r3, #20500	@ 0x5014
 80039dc:	443b      	add	r3, r7
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e4:	d3c2      	bcc.n	800396c <audio_signal_processing+0x338>
#endif
		}
		snprintf(user_text_line_mode_4, USER_TEXT_LENGTH, " ");
 80039e6:	4a67      	ldr	r2, [pc, #412]	@ (8003b84 <audio_signal_processing+0x550>)
 80039e8:	2131      	movs	r1, #49	@ 0x31
 80039ea:	4867      	ldr	r0, [pc, #412]	@ (8003b88 <audio_signal_processing+0x554>)
 80039ec:	f010 fac2 	bl	8013f74 <sniprintf>
		// ---------------------------------------------------------------------------------------
		break;
 80039f0:	e08f      	b.n	8003b12 <audio_signal_processing+0x4de>

	case 5:
		// ---------------------------------------------------------------------------------------
		// Mode 5 selected with GUI: pass through the signals without modification
		// ---------------------------------------------------------------------------------------
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 80039f2:	2300      	movs	r3, #0
 80039f4:	f245 0214 	movw	r2, #20500	@ 0x5014
 80039f8:	443a      	add	r2, r7
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e035      	b.n	8003a6a <audio_signal_processing+0x436>
#if USE_FP_PROCESSING_ON_CH1 == 1
			output_data_CH1_f[i] = input_data_CH1_f[i];
 80039fe:	f241 0318 	movw	r3, #4120	@ 0x1018
 8003a02:	443b      	add	r3, r7
 8003a04:	461a      	mov	r2, r3
 8003a06:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a0a:	443b      	add	r3, r7
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	3b04      	subs	r3, #4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	f107 0318 	add.w	r3, r7, #24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a20:	443b      	add	r3, r7
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3b04      	subs	r3, #4
 8003a2a:	601a      	str	r2, [r3, #0]
#endif

#if USE_FP_PROCESSING_ON_CH2 == 1
			output_data_CH2_f[i] = input_data_CH1_f[i];
#else
			output_data_CH2[i] = input_data_CH2[i];
 8003a2c:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a30:	443b      	add	r3, r7
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	f107 0218 	add.w	r2, r7, #24
 8003a3a:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8003a3e:	441a      	add	r2, r3
 8003a40:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a44:	443b      	add	r3, r7
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	f107 0118 	add.w	r1, r7, #24
 8003a4e:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8003a52:	440b      	add	r3, r1
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	601a      	str	r2, [r3, #0]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003a58:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a5c:	443b      	add	r3, r7
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003a66:	443a      	add	r2, r7
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003a6e:	443b      	add	r3, r7
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d3c2      	bcc.n	80039fe <audio_signal_processing+0x3ca>
#endif
		}
		snprintf(user_text_line_mode_5, USER_TEXT_LENGTH, " ");
 8003a78:	4a42      	ldr	r2, [pc, #264]	@ (8003b84 <audio_signal_processing+0x550>)
 8003a7a:	2131      	movs	r1, #49	@ 0x31
 8003a7c:	4843      	ldr	r0, [pc, #268]	@ (8003b8c <audio_signal_processing+0x558>)
 8003a7e:	f010 fa79 	bl	8013f74 <sniprintf>
		// ---------------------------------------------------------------------------------------
		break;
 8003a82:	e046      	b.n	8003b12 <audio_signal_processing+0x4de>

	default:
		// ---------------------------------------------------------------------------------------
		// undefined mode -> pass through the signals without modification
		// ---------------------------------------------------------------------------------------
		user_mode = 1;
 8003a84:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <audio_signal_processing+0x55c>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003a90:	443a      	add	r2, r7
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e035      	b.n	8003b02 <audio_signal_processing+0x4ce>
#if USE_FP_PROCESSING_ON_CH1 == 1
			output_data_CH1_f[i] = input_data_CH1_f[i];
 8003a96:	f241 0318 	movw	r3, #4120	@ 0x1018
 8003a9a:	443b      	add	r3, r7
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003aa2:	443b      	add	r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f107 0318 	add.w	r3, r7, #24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003ab8:	443b      	add	r3, r7
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3b04      	subs	r3, #4
 8003ac2:	601a      	str	r2, [r3, #0]
#endif

#if USE_FP_PROCESSING_ON_CH2 == 1
			output_data_CH2_f[i] = input_data_CH1_f[i];
#else
			output_data_CH2[i] = input_data_CH2[i];
 8003ac4:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003ac8:	443b      	add	r3, r7
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	f107 0218 	add.w	r2, r7, #24
 8003ad2:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8003ad6:	441a      	add	r2, r3
 8003ad8:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003adc:	443b      	add	r3, r7
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f107 0118 	add.w	r1, r7, #24
 8003ae6:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8003aea:	440b      	add	r3, r1
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	601a      	str	r2, [r3, #0]
		for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003af0:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003af4:	443b      	add	r3, r7
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003afe:	443a      	add	r2, r7
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003b06:	443b      	add	r3, r7
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0e:	d3c2      	bcc.n	8003a96 <audio_signal_processing+0x462>
#endif
		}
		// ---------------------------------------------------------------------------------------

		break;
 8003b10:	bf00      	nop

	// ---------------------------------------------------------------------------------------
	// Postprocessing: copy the processed data to the output buffer if needed
	// ---------------------------------------------------------------------------------------
#if USE_FP_PROCESSING == 1
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003b12:	2300      	movs	r3, #0
 8003b14:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003b18:	443a      	add	r2, r7
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e023      	b.n	8003b66 <audio_signal_processing+0x532>
#if USE_FP_PROCESSING_ON_CH1 == 1
		output_data_CH1[i] = output_data_CH1_f[i];
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	461a      	mov	r2, r3
 8003b24:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003b28:	443b      	add	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	3b04      	subs	r3, #4
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003b3a:	443b      	add	r3, r7
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f107 0218 	add.w	r2, r7, #24
 8003b44:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b4e:	ee17 2a90 	vmov	r2, s15
 8003b52:	601a      	str	r2, [r3, #0]
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i++){
 8003b54:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003b58:	443b      	add	r3, r7
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f245 0214 	movw	r2, #20500	@ 0x5014
 8003b62:	443a      	add	r2, r7
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	f245 0314 	movw	r3, #20500	@ 0x5014
 8003b6a:	443b      	add	r3, r7
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b72:	d3d4      	bcc.n	8003b1e <audio_signal_processing+0x4ea>
		output_data_CH2[i] = output_data_CH2_f[i];
#endif
	}
#endif
	// ---------------------------------------------------------------------------------------
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	f507 47a0 	add.w	r7, r7, #20480	@ 0x5000
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	0801addc 	.word	0x0801addc
 8003b88:	200309f4 	.word	0x200309f4
 8003b8c:	20030a28 	.word	0x20030a28
 8003b90:	2001101c 	.word	0x2001101c
 8003b94:	00000000 	.word	0x00000000

08003b98 <waveform_generator>:

	Waveform generator to test the output path of the codec.

 */
/***********************************************************************************/
void waveform_generator(int32_t * output_data_CH1, int32_t * output_data_CH2){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	static double phase_accumulator = 0;
	double phase_increment;

	phase_increment = 2 * M_PI * (double)(wav_gen_output_frequency)/ (double)CODEC_SAMPLING_FREQUENCY;
 8003ba2:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <waveform_generator+0x198>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bac:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8003d10 <waveform_generator+0x178>
 8003bb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003bb4:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8003d18 <waveform_generator+0x180>
 8003bb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003bbc:	ed87 7b02 	vstr	d7, [r7, #8]

	for(i = 0; i < BUFFER_SIZE_SAMPLES; i ++){
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e097      	b.n	8003cf6 <waveform_generator+0x15e>
		switch(wav_gen){
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d34 <waveform_generator+0x19c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d04c      	beq.n	8003c68 <waveform_generator+0xd0>
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	dc70      	bgt.n	8003cb4 <waveform_generator+0x11c>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <waveform_generator+0x44>
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d022      	beq.n	8003c20 <waveform_generator+0x88>
 8003bda:	e06b      	b.n	8003cb4 <waveform_generator+0x11c>
		case WAV_SINUS:
			output_data_CH1[i] = sin(phase_accumulator) * (double)8388607;
 8003bdc:	4b56      	ldr	r3, [pc, #344]	@ (8003d38 <waveform_generator+0x1a0>)
 8003bde:	ed93 7b00 	vldr	d7, [r3]
 8003be2:	eeb0 0b47 	vmov.f64	d0, d7
 8003be6:	f011 f9f3 	bl	8014fd0 <sin>
 8003bea:	eeb0 7b40 	vmov.f64	d7, d0
 8003bee:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8003d20 <waveform_generator+0x188>
 8003bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c02:	ee17 2a90 	vmov	r2, s15
 8003c06:	601a      	str	r2, [r3, #0]
			output_data_CH2[i] = -output_data_CH1[i];
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	440b      	add	r3, r1
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	601a      	str	r2, [r3, #0]
			break;
 8003c1e:	e049      	b.n	8003cb4 <waveform_generator+0x11c>

		case WAV_RECTANGLE:
			if(phase_accumulator >= M_PI){
 8003c20:	4b45      	ldr	r3, [pc, #276]	@ (8003d38 <waveform_generator+0x1a0>)
 8003c22:	ed93 7b00 	vldr	d7, [r3]
 8003c26:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8003d28 <waveform_generator+0x190>
 8003c2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	db0c      	blt.n	8003c4e <waveform_generator+0xb6>
				output_data_CH1[i] = 8388607;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d3c <waveform_generator+0x1a4>)
 8003c3e:	601a      	str	r2, [r3, #0]
				output_data_CH2[i] = -8388607;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a3d      	ldr	r2, [pc, #244]	@ (8003d40 <waveform_generator+0x1a8>)
 8003c4a:	601a      	str	r2, [r3, #0]

			else{
				output_data_CH1[i] = -8388607;
				output_data_CH2[i] = 8388607;
			}
			break;
 8003c4c:	e032      	b.n	8003cb4 <waveform_generator+0x11c>
				output_data_CH1[i] = -8388607;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	4a3a      	ldr	r2, [pc, #232]	@ (8003d40 <waveform_generator+0x1a8>)
 8003c58:	601a      	str	r2, [r3, #0]
				output_data_CH2[i] = 8388607;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4413      	add	r3, r2
 8003c62:	4a36      	ldr	r2, [pc, #216]	@ (8003d3c <waveform_generator+0x1a4>)
 8003c64:	601a      	str	r2, [r3, #0]
			break;
 8003c66:	e025      	b.n	8003cb4 <waveform_generator+0x11c>

		case WAV_SAWTOOTH:
			output_data_CH1[i] = phase_accumulator / (2 * M_PI) * 8388607 * 2 - 8388607;
 8003c68:	4b33      	ldr	r3, [pc, #204]	@ (8003d38 <waveform_generator+0x1a0>)
 8003c6a:	ed93 6b00 	vldr	d6, [r3]
 8003c6e:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8003d10 <waveform_generator+0x178>
 8003c72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c76:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8003d20 <waveform_generator+0x188>
 8003c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c82:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8003d20 <waveform_generator+0x188>
 8003c86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c96:	ee17 2a90 	vmov	r2, s15
 8003c9a:	601a      	str	r2, [r3, #0]
			output_data_CH2[i] = -output_data_CH1[i];
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	440b      	add	r3, r1
 8003cae:	4252      	negs	r2, r2
 8003cb0:	601a      	str	r2, [r3, #0]
			break;
 8003cb2:	bf00      	nop
		}

		phase_accumulator += phase_increment;
 8003cb4:	4b20      	ldr	r3, [pc, #128]	@ (8003d38 <waveform_generator+0x1a0>)
 8003cb6:	ed93 6b00 	vldr	d6, [r3]
 8003cba:	ed97 7b02 	vldr	d7, [r7, #8]
 8003cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <waveform_generator+0x1a0>)
 8003cc4:	ed83 7b00 	vstr	d7, [r3]

		if(phase_accumulator > (2 * M_PI)){
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <waveform_generator+0x1a0>)
 8003cca:	ed93 7b00 	vldr	d7, [r3]
 8003cce:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8003d10 <waveform_generator+0x178>
 8003cd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cda:	dd09      	ble.n	8003cf0 <waveform_generator+0x158>
			phase_accumulator -= (2 * M_PI);
 8003cdc:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <waveform_generator+0x1a0>)
 8003cde:	ed93 7b00 	vldr	d7, [r3]
 8003ce2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8003d10 <waveform_generator+0x178>
 8003ce6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003cea:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <waveform_generator+0x1a0>)
 8003cec:	ed83 7b00 	vstr	d7, [r3]
	for(i = 0; i < BUFFER_SIZE_SAMPLES; i ++){
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfc:	f4ff af63 	bcc.w	8003bc6 <waveform_generator+0x2e>
		}
	}
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
 8003d10:	54442d18 	.word	0x54442d18
 8003d14:	401921fb 	.word	0x401921fb
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	40e77000 	.word	0x40e77000
 8003d20:	c0000000 	.word	0xc0000000
 8003d24:	415fffff 	.word	0x415fffff
 8003d28:	54442d18 	.word	0x54442d18
 8003d2c:	400921fb 	.word	0x400921fb
 8003d30:	20011020 	.word	0x20011020
 8003d34:	20011024 	.word	0x20011024
 8003d38:	20030950 	.word	0x20030950
 8003d3c:	007fffff 	.word	0x007fffff
 8003d40:	ff800001 	.word	0xff800001

08003d44 <SCB_EnableICache>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003d48:	f3bf 8f4f 	dsb	sy
}
 8003d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d4e:	f3bf 8f6f 	isb	sy
}
 8003d52:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003d54:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <SCB_EnableICache+0x3c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <SCB_EnableICache+0x3c>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	4a07      	ldr	r2, [pc, #28]	@ (8003d80 <SCB_EnableICache+0x3c>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d66:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d6e:	f3bf 8f6f 	isb	sy
}
 8003d72:	bf00      	nop
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <SCB_InvalidateICache>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003d88:	f3bf 8f4f 	dsb	sy
}
 8003d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d8e:	f3bf 8f6f 	isb	sy
}
 8003d92:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <SCB_InvalidateICache+0x30>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003d9c:	f3bf 8f4f 	dsb	sy
}
 8003da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da2:	f3bf 8f6f 	isb	sy
}
 8003da6:	bf00      	nop
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <SCB_EnableDCache>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <SCB_EnableDCache+0x84>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003dc6:	f3bf 8f4f 	dsb	sy
}
 8003dca:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <SCB_EnableDCache+0x84>)
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd2:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0b5b      	lsrs	r3, r3, #13
 8003dd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ddc:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de6:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003df0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003df6:	4911      	ldr	r1, [pc, #68]	@ (8003e3c <SCB_EnableDCache+0x84>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways--);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	60ba      	str	r2, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ef      	bne.n	8003de8 <SCB_EnableDCache+0x30>
    } while(sets--);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	60fa      	str	r2, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e12:	f3bf 8f4f 	dsb	sy
}
 8003e16:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003e18:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <SCB_EnableDCache+0x84>)
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	@ (8003e3c <SCB_EnableDCache+0x84>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e22:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e24:	f3bf 8f4f 	dsb	sy
}
 8003e28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e2a:	f3bf 8f6f 	isb	sy
}
 8003e2e:	bf00      	nop
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <SCB_InvalidateDCache>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <SCB_InvalidateDCache+0x74>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003e4e:	f3bf 8f4f 	dsb	sy
}
 8003e52:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003e54:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <SCB_InvalidateDCache+0x74>)
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e5a:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	0b5b      	lsrs	r3, r3, #13
 8003e60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e64:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	08db      	lsrs	r3, r3, #3
 8003e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6e:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003e78:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003e7e:	490d      	ldr	r1, [pc, #52]	@ (8003eb4 <SCB_InvalidateDCache+0x74>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways--);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	60ba      	str	r2, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ef      	bne.n	8003e70 <SCB_InvalidateDCache+0x30>
    } while(sets--);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e5a      	subs	r2, r3, #1
 8003e94:	60fa      	str	r2, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9a:	f3bf 8f4f 	dsb	sy
}
 8003e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ea0:	f3bf 8f6f 	isb	sy
}
 8003ea4:	bf00      	nop
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <main>:
/*
	main
*/
/***********************************************************************************/
int main(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b09e      	sub	sp, #120	@ 0x78
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t i = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
  menue_page_t last_menue_page = PAGE1;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  char string_buffer[100];
  uint32_t last_button_state = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t button_state_now = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	66bb      	str	r3, [r7, #104]	@ 0x68

  // enable strict error checking
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;	// usage fault
 8003ed0:	4bae      	ldr	r3, [pc, #696]	@ (800418c <main+0x2d4>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	4aad      	ldr	r2, [pc, #692]	@ (800418c <main+0x2d4>)
 8003ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eda:	6253      	str	r3, [r2, #36]	@ 0x24
  SCB->SHCSR |= SCB_SHCSR_BUSFAULTENA_Msk;	// bus fault
 8003edc:	4bab      	ldr	r3, [pc, #684]	@ (800418c <main+0x2d4>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	4aaa      	ldr	r2, [pc, #680]	@ (800418c <main+0x2d4>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee6:	6253      	str	r3, [r2, #36]	@ 0x24

  SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;		// divison by 0
 8003ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800418c <main+0x2d4>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4aa7      	ldr	r2, [pc, #668]	@ (800418c <main+0x2d4>)
 8003eee:	f043 0310 	orr.w	r3, r3, #16
 8003ef2:	6153      	str	r3, [r2, #20]
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;		// unaligned access fault
 8003ef4:	4ba5      	ldr	r3, [pc, #660]	@ (800418c <main+0x2d4>)
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4aa4      	ldr	r2, [pc, #656]	@ (800418c <main+0x2d4>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6153      	str	r3, [r2, #20]

  /* Configure the MPU attributes as Write Through */
  MPU_Config();
 8003f00:	f000 f9c8 	bl	8004294 <MPU_Config>
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */   
  HAL_Init();
 8003f04:	f002 fc62 	bl	80067cc <HAL_Init>
  
  /* Configure the system clock to 200 MHz */
  SystemClock_Config(); 
 8003f08:	f000 f972 	bl	80041f0 <SystemClock_Config>

  // reset the user text
  snprintf(user_text_line_mode_1, USER_TEXT_LENGTH, "User text line 1");
 8003f0c:	4aa0      	ldr	r2, [pc, #640]	@ (8004190 <main+0x2d8>)
 8003f0e:	2131      	movs	r1, #49	@ 0x31
 8003f10:	48a0      	ldr	r0, [pc, #640]	@ (8004194 <main+0x2dc>)
 8003f12:	f010 f82f 	bl	8013f74 <sniprintf>
  snprintf(user_text_line_mode_2, USER_TEXT_LENGTH, "User text line 2");
 8003f16:	4aa0      	ldr	r2, [pc, #640]	@ (8004198 <main+0x2e0>)
 8003f18:	2131      	movs	r1, #49	@ 0x31
 8003f1a:	48a0      	ldr	r0, [pc, #640]	@ (800419c <main+0x2e4>)
 8003f1c:	f010 f82a 	bl	8013f74 <sniprintf>
  snprintf(user_text_line_mode_3, USER_TEXT_LENGTH, "User text line 3");
 8003f20:	4a9f      	ldr	r2, [pc, #636]	@ (80041a0 <main+0x2e8>)
 8003f22:	2131      	movs	r1, #49	@ 0x31
 8003f24:	489f      	ldr	r0, [pc, #636]	@ (80041a4 <main+0x2ec>)
 8003f26:	f010 f825 	bl	8013f74 <sniprintf>
  snprintf(user_text_line_mode_4, USER_TEXT_LENGTH, "User text line 4");
 8003f2a:	4a9f      	ldr	r2, [pc, #636]	@ (80041a8 <main+0x2f0>)
 8003f2c:	2131      	movs	r1, #49	@ 0x31
 8003f2e:	489f      	ldr	r0, [pc, #636]	@ (80041ac <main+0x2f4>)
 8003f30:	f010 f820 	bl	8013f74 <sniprintf>
  snprintf(user_text_line_mode_5, USER_TEXT_LENGTH, "User text line 5");
 8003f34:	4a9e      	ldr	r2, [pc, #632]	@ (80041b0 <main+0x2f8>)
 8003f36:	2131      	movs	r1, #49	@ 0x31
 8003f38:	489e      	ldr	r0, [pc, #632]	@ (80041b4 <main+0x2fc>)
 8003f3a:	f010 f81b 	bl	8013f74 <sniprintf>


  /* init the QSPI */
  BSP_QSPI_Init();
 8003f3e:	f00c fe23 	bl	8010b88 <BSP_QSPI_Init>

  while(1){};	// wait for ever
#else

  // use external memory as if it was an internal one
  BSP_QSPI_EnableMemoryMappedMode();
 8003f42:	f00c fe91 	bl	8010c68 <BSP_QSPI_EnableMemoryMappedMode>

  /* Init Audio Application */
 // AUDIO_InitApplication();
  
  /* Init TS module */
  BSP_TS_Init(800, 480);
 8003f46:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003f4a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8003f4e:	f00d fcdd 	bl	801190c <BSP_TS_Init>
  
  /* Start Host Process */
//  USBH_Start(&hUSBHost);
  
  // init the user LEDs
  BSP_LED_Init(LED_RED);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f00a fba2 	bl	800e69c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f00a fb9f 	bl	800e69c <BSP_LED_Init>

  // init the button
  BSP_PB_Init(BUTTON_USER, BUTTON_USER);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	2000      	movs	r0, #0
 8003f62:	f00a fbff 	bl	800e764 <BSP_PB_Init>

  // init processing
  processing_init();
 8003f66:	f7ff fb13 	bl	8003590 <processing_init>

  // init the GUI
  initGUI();
 8003f6a:	f7fc fd8b 	bl	8000a84 <initGUI>

  // init the audio codec
  initCodec(CODEC_SAMPLING_FREQUENCY);
 8003f6e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8003f72:	f7fc fa25 	bl	80003c0 <initCodec>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8003f76:	f000 f9cf 	bl	8004318 <CPU_CACHE_Enable>

  HAL_Delay(10);
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f002 fc72 	bl	8006864 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8003f80:	b672      	cpsid	i
}
 8003f82:	bf00      	nop

  //reset the time out flags after the initialization
  __disable_irq();
  audio_buffer_a_timeout = 0;
 8003f84:	4b8c      	ldr	r3, [pc, #560]	@ (80041b8 <main+0x300>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
  audio_buffer_b_timeout = 0;
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	@ (80041bc <main+0x304>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f90:	b662      	cpsie	i
}
 8003f92:	bf00      	nop
  __enable_irq();

  // set the default output volume
  wm8994_SetOutputVolume_dB(AUDIO_I2C_ADDRESS, audio_output_volume_dB);
 8003f94:	4b8a      	ldr	r3, [pc, #552]	@ (80041c0 <main+0x308>)
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9e:	2034      	movs	r0, #52	@ 0x34
 8003fa0:	f002 fa7a 	bl	8006498 <wm8994_SetOutputVolume_dB>
  wm8994_SetInputVolume_dB(AUDIO_I2C_ADDRESS, audio_input_volume_dB);
 8003fa4:	4b87      	ldr	r3, [pc, #540]	@ (80041c4 <main+0x30c>)
 8003fa6:	edd3 7a00 	vldr	s15, [r3]
 8003faa:	eeb0 0a67 	vmov.f32	s0, s15
 8003fae:	2034      	movs	r0, #52	@ 0x34
 8003fb0:	f002 fb34 	bl	800661c <wm8994_SetInputVolume_dB>
  {
    /* USB Host Background task */
//    USBH_Process(&hUSBHost);

	// reset the watchdog
	watchdog_counter = BSP_AUDIO_FREQUENCY_48K / BUFFER_SIZE_SAMPLES;
 8003fb4:	4b84      	ldr	r3, [pc, #528]	@ (80041c8 <main+0x310>)
 8003fb6:	222e      	movs	r2, #46	@ 0x2e
 8003fb8:	601a      	str	r2, [r3, #0]
    
	checkPageSwitchButtons();	// look for a page switch
 8003fba:	f7ff f81d 	bl	8002ff8 <checkPageSwitchButtons>

	if(last_menue_page != menue_page){
 8003fbe:	4b83      	ldr	r3, [pc, #524]	@ (80041cc <main+0x314>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d023      	beq.n	8004012 <main+0x15a>
		switch(menue_page){
 8003fca:	4b80      	ldr	r3, [pc, #512]	@ (80041cc <main+0x314>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d81b      	bhi.n	800400a <main+0x152>
 8003fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <main+0x120>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003fed 	.word	0x08003fed
 8003fdc:	08003ff3 	.word	0x08003ff3
 8003fe0:	08003ff9 	.word	0x08003ff9
 8003fe4:	08003fff 	.word	0x08003fff
 8003fe8:	08004005 	.word	0x08004005
			case PAGE1:
				initPage1();
 8003fec:	f7fc fd6a 	bl	8000ac4 <initPage1>
			break;
 8003ff0:	e00b      	b.n	800400a <main+0x152>

			case PAGE2:
				initPage2();
 8003ff2:	f7fc fddd 	bl	8000bb0 <initPage2>
			break;
 8003ff6:	e008      	b.n	800400a <main+0x152>

			case PAGE3:
				initPage3();
 8003ff8:	f7fc fdea 	bl	8000bd0 <initPage3>
			break;
 8003ffc:	e005      	b.n	800400a <main+0x152>

			case PAGE4:
				initPage4();
 8003ffe:	f7fc fdf7 	bl	8000bf0 <initPage4>
			break;
 8004002:	e002      	b.n	800400a <main+0x152>

			case PAGE5:
				initPage5();
 8004004:	f7fc fe04 	bl	8000c10 <initPage5>
			break;
 8004008:	bf00      	nop
		}

		last_menue_page = menue_page;
 800400a:	4b70      	ldr	r3, [pc, #448]	@ (80041cc <main+0x314>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	}

	// look for button press on the current page
	switch(menue_page){
 8004012:	4b6e      	ldr	r3, [pc, #440]	@ (80041cc <main+0x314>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d81b      	bhi.n	8004052 <main+0x19a>
 800401a:	a201      	add	r2, pc, #4	@ (adr r2, 8004020 <main+0x168>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004035 	.word	0x08004035
 8004024:	0800403b 	.word	0x0800403b
 8004028:	08004041 	.word	0x08004041
 800402c:	08004047 	.word	0x08004047
 8004030:	0800404d 	.word	0x0800404d
		case PAGE1:
			checkButtonsPage1();
 8004034:	f7fd f8a4 	bl	8001180 <checkButtonsPage1>
		break;
 8004038:	e00b      	b.n	8004052 <main+0x19a>

		case PAGE2:
			checkButtonsPage2();
 800403a:	f7fd faa5 	bl	8001588 <checkButtonsPage2>
		break;
 800403e:	e008      	b.n	8004052 <main+0x19a>

		case PAGE3:
			checkButtonsPage3();
 8004040:	f7fd fb22 	bl	8001688 <checkButtonsPage3>
		break;
 8004044:	e005      	b.n	8004052 <main+0x19a>

		case PAGE4:
			checkButtonsPage4();
 8004046:	f7fd fb9f 	bl	8001788 <checkButtonsPage4>
		break;
 800404a:	e002      	b.n	8004052 <main+0x19a>

		case PAGE5:
			checkButtonsPage5();
 800404c:	f7fd fcc4 	bl	80019d8 <checkButtonsPage5>
		break;
 8004050:	bf00      	nop
	}

	// read the push button
	button_state_now = BSP_PB_GetState(BUTTON_USER);
 8004052:	2000      	movs	r0, #0
 8004054:	f00a fbda 	bl	800e80c <BSP_PB_GetState>
 8004058:	66b8      	str	r0, [r7, #104]	@ 0x68

	if((button_state_now == 1) && (last_button_state == 0)){
 800405a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800405c:	2b01      	cmp	r3, #1
 800405e:	d129      	bne.n	80040b4 <main+0x1fc>
 8004060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d126      	bne.n	80040b4 <main+0x1fc>
		if(user_button < MAX_BUTTON_STATES){
 8004066:	4b5a      	ldr	r3, [pc, #360]	@ (80041d0 <main+0x318>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d805      	bhi.n	800407a <main+0x1c2>
			user_button++;
 800406e:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <main+0x318>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a56      	ldr	r2, [pc, #344]	@ (80041d0 <main+0x318>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e002      	b.n	8004080 <main+0x1c8>
		}
		else{
			user_button = 1;
 800407a:	4b55      	ldr	r3, [pc, #340]	@ (80041d0 <main+0x318>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
		}

		drawTitle();
 8004080:	f7fe fea2 	bl	8002dc8 <drawTitle>

		switch(menue_page){
 8004084:	4b51      	ldr	r3, [pc, #324]	@ (80041cc <main+0x314>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d813      	bhi.n	80040b4 <main+0x1fc>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <main+0x1dc>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040af 	.word	0x080040af
 80040a0:	080040b5 	.word	0x080040b5
 80040a4:	080040b5 	.word	0x080040b5
			case PAGE1:
		//		initPage1();
			break;

			case PAGE2:
				initPage2();
 80040a8:	f7fc fd82 	bl	8000bb0 <initPage2>
			break;
 80040ac:	e002      	b.n	80040b4 <main+0x1fc>

			case PAGE3:
				initPage3();
 80040ae:	f7fc fd8f 	bl	8000bd0 <initPage3>
			break;
 80040b2:	bf00      	nop
			break;
		}
	}


	last_button_state = button_state_now;
 80040b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

	// flash the red LED to show the system is alive
    i++;
 80040b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ba:	3301      	adds	r3, #1
 80040bc:	677b      	str	r3, [r7, #116]	@ 0x74

    if(i < 30){
 80040be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c0:	2b1d      	cmp	r3, #29
 80040c2:	d803      	bhi.n	80040cc <main+0x214>
    	BSP_LED_On(LED_RED);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f00a fb19 	bl	800e6fc <BSP_LED_On>
 80040ca:	e007      	b.n	80040dc <main+0x224>
    }

    else{
    	BSP_LED_Off(LED_RED);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f00a fb2f 	bl	800e730 <BSP_LED_Off>
    	if(i>2*30){
 80040d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d4:	2b3c      	cmp	r3, #60	@ 0x3c
 80040d6:	d901      	bls.n	80040dc <main+0x224>
    		i = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	677b      	str	r3, [r7, #116]	@ 0x74

    	}
    }

    // test if the processing overloads the CPU
	if((audio_buffer_a_timeout == 1) || (audio_buffer_b_timeout == 1)){
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <main+0x300>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d003      	beq.n	80040ec <main+0x234>
 80040e4:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <main+0x304>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d14b      	bne.n	8004184 <main+0x2cc>

		// clear the screen
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	f00c f8dc 	bl	80102ac <BSP_LCD_Clear>

		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f00c f8a4 	bl	8010244 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80040fc:	4835      	ldr	r0, [pc, #212]	@ (80041d4 <main+0x31c>)
 80040fe:	f00c f889 	bl	8010214 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font24);
 8004102:	4835      	ldr	r0, [pc, #212]	@ (80041d8 <main+0x320>)
 8004104:	f00c f8b8 	bl	8010278 <BSP_LCD_SetFont>

		snprintf(string_buffer,100, "Achtung: CPU ueberlastet!!!");
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	4a34      	ldr	r2, [pc, #208]	@ (80041dc <main+0x324>)
 800410c:	2164      	movs	r1, #100	@ 0x64
 800410e:	4618      	mov	r0, r3
 8004110:	f00f ff30 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8004114:	1d3a      	adds	r2, r7, #4
 8004116:	2303      	movs	r3, #3
 8004118:	2160      	movs	r1, #96	@ 0x60
 800411a:	200a      	movs	r0, #10
 800411c:	f00c f932 	bl	8010384 <BSP_LCD_DisplayStringAt>

		snprintf(string_buffer,100, "Moegliche Loesungen:");
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4a2f      	ldr	r2, [pc, #188]	@ (80041e0 <main+0x328>)
 8004124:	2164      	movs	r1, #100	@ 0x64
 8004126:	4618      	mov	r0, r3
 8004128:	f00f ff24 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET + 35, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800412c:	1d3a      	adds	r2, r7, #4
 800412e:	2303      	movs	r3, #3
 8004130:	2183      	movs	r1, #131	@ 0x83
 8004132:	200a      	movs	r0, #10
 8004134:	f00c f926 	bl	8010384 <BSP_LCD_DisplayStringAt>

		snprintf(string_buffer,100, " - Blockgroesse erhoehen");
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	4a2a      	ldr	r2, [pc, #168]	@ (80041e4 <main+0x32c>)
 800413c:	2164      	movs	r1, #100	@ 0x64
 800413e:	4618      	mov	r0, r3
 8004140:	f00f ff18 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET + 70, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8004144:	1d3a      	adds	r2, r7, #4
 8004146:	2303      	movs	r3, #3
 8004148:	21a6      	movs	r1, #166	@ 0xa6
 800414a:	200a      	movs	r0, #10
 800414c:	f00c f91a 	bl	8010384 <BSP_LCD_DisplayStringAt>

		snprintf(string_buffer,100, " - Abtastrate reduzieren");
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <main+0x330>)
 8004154:	2164      	movs	r1, #100	@ 0x64
 8004156:	4618      	mov	r0, r3
 8004158:	f00f ff0c 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET+ 105, (uint8_t *)&string_buffer[0], LEFT_MODE);
 800415c:	1d3a      	adds	r2, r7, #4
 800415e:	2303      	movs	r3, #3
 8004160:	21c9      	movs	r1, #201	@ 0xc9
 8004162:	200a      	movs	r0, #10
 8004164:	f00c f90e 	bl	8010384 <BSP_LCD_DisplayStringAt>

		snprintf(string_buffer,100, " - Angorithmus optimieren / verkleinern");
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4a20      	ldr	r2, [pc, #128]	@ (80041ec <main+0x334>)
 800416c:	2164      	movs	r1, #100	@ 0x64
 800416e:	4618      	mov	r0, r3
 8004170:	f00f ff00 	bl	8013f74 <sniprintf>
		BSP_LCD_DisplayStringAt(10, LCD_TEXT_Y_OFFSET + 140, (uint8_t *)&string_buffer[0], LEFT_MODE);
 8004174:	1d3a      	adds	r2, r7, #4
 8004176:	2303      	movs	r3, #3
 8004178:	21ec      	movs	r1, #236	@ 0xec
 800417a:	200a      	movs	r0, #10
 800417c:	f00c f902 	bl	8010384 <BSP_LCD_DisplayStringAt>


		while(1){}	// lock the system
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <main+0x2c8>
	}

    HAL_Delay(10);	// slow down the touch screen polling to give the driver time to detect the touch
 8004184:	200a      	movs	r0, #10
 8004186:	f002 fb6d 	bl	8006864 <HAL_Delay>
	watchdog_counter = BSP_AUDIO_FREQUENCY_48K / BUFFER_SIZE_SAMPLES;
 800418a:	e713      	b.n	8003fb4 <main+0xfc>
 800418c:	e000ed00 	.word	0xe000ed00
 8004190:	0801ade0 	.word	0x0801ade0
 8004194:	20030958 	.word	0x20030958
 8004198:	0801adf4 	.word	0x0801adf4
 800419c:	2003098c 	.word	0x2003098c
 80041a0:	0801ae08 	.word	0x0801ae08
 80041a4:	200309c0 	.word	0x200309c0
 80041a8:	0801ae1c 	.word	0x0801ae1c
 80041ac:	200309f4 	.word	0x200309f4
 80041b0:	0801ae30 	.word	0x0801ae30
 80041b4:	20030a28 	.word	0x20030a28
 80041b8:	20000004 	.word	0x20000004
 80041bc:	20000008 	.word	0x20000008
 80041c0:	20020718 	.word	0x20020718
 80041c4:	20020714 	.word	0x20020714
 80041c8:	20000000 	.word	0x20000000
 80041cc:	20011014 	.word	0x20011014
 80041d0:	20011018 	.word	0x20011018
 80041d4:	ffff0000 	.word	0xffff0000
 80041d8:	20020690 	.word	0x20020690
 80041dc:	0801ae44 	.word	0x0801ae44
 80041e0:	0801ae60 	.word	0x0801ae60
 80041e4:	0801ae78 	.word	0x0801ae78
 80041e8:	0801ae94 	.word	0x0801ae94
 80041ec:	0801aeb0 	.word	0x0801aeb0

080041f0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b094      	sub	sp, #80	@ 0x50
 80041f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004204:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004206:	2302      	movs	r3, #2
 8004208:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800420a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800420e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004210:	2319      	movs	r3, #25
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8004214:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800421a:	2302      	movs	r3, #2
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800421e:	2308      	movs	r3, #8
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = 7;
 8004222:	2307      	movs	r3, #7
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	4618      	mov	r0, r3
 800422a:	f007 f9ad 	bl	800b588 <HAL_RCC_OscConfig>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if(ret != HAL_OK)
 8004234:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <SystemClock_Config+0x50>
  {
    while(1) { ; }
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <SystemClock_Config+0x4c>
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8004240:	f006 fc50 	bl	800aae4 <HAL_PWREx_EnableOverDrive>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if(ret != HAL_OK)
 800424a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <SystemClock_Config+0x66>
  {
    while(1) { ; }
 8004252:	bf00      	nop
 8004254:	e7fd      	b.n	8004252 <SystemClock_Config+0x62>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004256:	230f      	movs	r3, #15
 8004258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800425a:	2302      	movs	r3, #2
 800425c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800425e:	2300      	movs	r3, #0
 8004260:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8004262:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004266:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 800426e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004272:	2106      	movs	r1, #6
 8004274:	4618      	mov	r0, r3
 8004276:	f007 fc3f 	bl	800baf8 <HAL_RCC_ClockConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if(ret != HAL_OK)
 8004280:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <SystemClock_Config+0x98>
  }
}
 800428c:	bf00      	nop
 800428e:	3750      	adds	r7, #80	@ 0x50
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <MPU_Config>:
  *         memory size is 384KB.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800429a:	f002 fc09 	bl	8006ab0 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SRAM */
  // SRAM1 / 2 WT
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800429e:	2301      	movs	r3, #1
 80042a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x20020000;
 80042a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004314 <MPU_Config+0x80>)
 80042a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80042a6:	2312      	movs	r3, #18
 80042a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80042aa:	2303      	movs	r3, #3
 80042ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 80042ba:	2307      	movs	r3, #7
 80042bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80042be:	2300      	movs	r3, #0
 80042c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80042c2:	2300      	movs	r3, #0
 80042c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80042ca:	463b      	mov	r3, r7
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 fc27 	bl	8006b20 <HAL_MPU_ConfigRegion>


  // Do not cash the ITCM
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00000000;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80042da:	230d      	movs	r3, #13
 80042dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80042de:	2303      	movs	r3, #3
 80042e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 80042ee:	2306      	movs	r3, #6
 80042f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80042f6:	2300      	movs	r3, #0
 80042f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80042fe:	463b      	mov	r3, r7
 8004300:	4618      	mov	r0, r3
 8004302:	f002 fc0d 	bl	8006b20 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004306:	2004      	movs	r0, #4
 8004308:	f002 fbea 	bl	8006ae0 <HAL_MPU_Enable>

}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20020000 	.word	0x20020000

08004318 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0

  SCB_InvalidateICache();
 800431c:	f7ff fd32 	bl	8003d84 <SCB_InvalidateICache>
  SCB_InvalidateDCache();
 8004320:	f7ff fd8e 	bl	8003e40 <SCB_InvalidateDCache>

  /* Enable I-Cache */
  SCB_EnableICache();
 8004324:	f7ff fd0e 	bl	8003d44 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8004328:	f7ff fd46 	bl	8003db8 <SCB_EnableDCache>

  SCB_InvalidateICache();
 800432c:	f7ff fd2a 	bl	8003d84 <SCB_InvalidateICache>
  SCB_InvalidateDCache();
 8004330:	f7ff fd86 	bl	8003e40 <SCB_InvalidateDCache>
}
 8004334:	bf00      	nop
 8004336:	bd80      	pop	{r7, pc}

08004338 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f90b 	bl	8004560 <ft6x06_GetInstance>
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2bff      	cmp	r3, #255	@ 0xff
 8004352:	d10e      	bne.n	8004372 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8004354:	2000      	movs	r0, #0
 8004356:	f000 f903 	bl	8004560 <ft6x06_GetInstance>
 800435a:	4603      	mov	r3, r0
 800435c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800435e:	7bbb      	ldrb	r3, [r7, #14]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d806      	bhi.n	8004372 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8004364:	7bbb      	ldrb	r3, [r7, #14]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	b2d1      	uxtb	r1, r2
 800436a:	4a04      	ldr	r2, [pc, #16]	@ (800437c <ft6x06_Init+0x44>)
 800436c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800436e:	f00a fc3b 	bl	800ebe8 <TS_IO_Init>
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20030d14 	.word	0x20030d14

08004380 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80043a0:	f00a fc22 	bl	800ebe8 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	21a8      	movs	r1, #168	@ 0xa8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f00a fc40 	bl	800ec30 <TS_IO_Read>
 80043b0:	4603      	mov	r3, r0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f8bb 	bl	8004542 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f88c 	bl	80044ec <ft6x06_TS_DisableIT>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f00a fc1d 	bl	800ec30 <TS_IO_Read>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	b2db      	uxtb	r3, r3
 8004404:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4b05      	ldr	r3, [pc, #20]	@ (800442c <ft6x06_TS_DetectTouch+0x50>)
 8004418:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800441a:	4b04      	ldr	r3, [pc, #16]	@ (800442c <ft6x06_TS_DetectTouch+0x50>)
 800441c:	2200      	movs	r2, #0
 800441e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	b2db      	uxtb	r3, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20030d18 	.word	0x20030d18

08004430 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8004442:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <ft6x06_TS_GetXY+0x90>)
 8004444:	789a      	ldrb	r2, [r3, #2]
 8004446:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <ft6x06_TS_GetXY+0x90>)
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	429a      	cmp	r2, r3
 800444c:	d234      	bcs.n	80044b8 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800444e:	4b1c      	ldr	r3, [pc, #112]	@ (80044c0 <ft6x06_TS_GetXY+0x90>)
 8004450:	789b      	ldrb	r3, [r3, #2]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <ft6x06_TS_GetXY+0x2c>
 8004456:	2b01      	cmp	r3, #1
 8004458:	d003      	beq.n	8004462 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800445a:	e005      	b.n	8004468 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 800445c:	2303      	movs	r3, #3
 800445e:	75fb      	strb	r3, [r7, #23]
      break;
 8004460:	e002      	b.n	8004468 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8004462:	2309      	movs	r3, #9
 8004464:	75fb      	strb	r3, [r7, #23]
      break;
 8004466:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	b2d8      	uxtb	r0, r3
 800446c:	f107 0210 	add.w	r2, r7, #16
 8004470:	7df9      	ldrb	r1, [r7, #23]
 8004472:	2304      	movs	r3, #4
 8004474:	f00a fbfa 	bl	800ec6c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8004478:	7c3b      	ldrb	r3, [r7, #16]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	b21b      	sxth	r3, r3
 800447e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004482:	b21a      	sxth	r2, r3
 8004484:	7c7b      	ldrb	r3, [r7, #17]
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b21b      	sxth	r3, r3
 800448c:	b29a      	uxth	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8004492:	7cbb      	ldrb	r3, [r7, #18]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b21b      	sxth	r3, r3
 8004498:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800449c:	b21a      	sxth	r2, r3
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	b21b      	sxth	r3, r3
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80044ac:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <ft6x06_TS_GetXY+0x90>)
 80044ae:	789b      	ldrb	r3, [r3, #2]
 80044b0:	3301      	adds	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b02      	ldr	r3, [pc, #8]	@ (80044c0 <ft6x06_TS_GetXY+0x90>)
 80044b6:	709a      	strb	r2, [r3, #2]
  }
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20030d18 	.word	0x20030d18

080044c4 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	21a4      	movs	r1, #164	@ 0xa4
 80044de:	4618      	mov	r0, r3
 80044e0:	f00a fb8c 	bl	800ebfc <TS_IO_Write>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	21a4      	movs	r1, #164	@ 0xa4
 8004506:	4618      	mov	r0, r3
 8004508:	f00a fb78 	bl	800ebfc <TS_IO_Write>
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
 8004572:	e00b      	b.n	800458c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <ft6x06_GetInstance+0x40>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	461a      	mov	r2, r3
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	e006      	b.n	8004594 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d9f0      	bls.n	8004574 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8004592:	23ff      	movs	r3, #255	@ 0xff
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20030d14 	.word	0x20030d14

080045a4 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80045ae:	49bd      	ldr	r1, [pc, #756]	@ (80048a4 <OTM8009A_Init+0x300>)
 80045b0:	2000      	movs	r0, #0
 80045b2:	f00c f8f3 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80045b6:	49bc      	ldr	r1, [pc, #752]	@ (80048a8 <OTM8009A_Init+0x304>)
 80045b8:	2003      	movs	r0, #3
 80045ba:	f00c f8ef 	bl	801079c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80045be:	49bb      	ldr	r1, [pc, #748]	@ (80048ac <OTM8009A_Init+0x308>)
 80045c0:	2000      	movs	r0, #0
 80045c2:	f00c f8eb 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80045c6:	49ba      	ldr	r1, [pc, #744]	@ (80048b0 <OTM8009A_Init+0x30c>)
 80045c8:	2002      	movs	r0, #2
 80045ca:	f00c f8e7 	bl	801079c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80045ce:	49b7      	ldr	r1, [pc, #732]	@ (80048ac <OTM8009A_Init+0x308>)
 80045d0:	2000      	movs	r0, #0
 80045d2:	f00c f8e3 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80045d6:	49b7      	ldr	r1, [pc, #732]	@ (80048b4 <OTM8009A_Init+0x310>)
 80045d8:	2000      	movs	r0, #0
 80045da:	f00c f8df 	bl	801079c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80045de:	200a      	movs	r0, #10
 80045e0:	f00a fb62 	bl	800eca8 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80045e4:	49b4      	ldr	r1, [pc, #720]	@ (80048b8 <OTM8009A_Init+0x314>)
 80045e6:	2000      	movs	r0, #0
 80045e8:	f00c f8d8 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80045ec:	49b3      	ldr	r1, [pc, #716]	@ (80048bc <OTM8009A_Init+0x318>)
 80045ee:	2000      	movs	r0, #0
 80045f0:	f00c f8d4 	bl	801079c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80045f4:	200a      	movs	r0, #10
 80045f6:	f00a fb57 	bl	800eca8 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80045fa:	49b1      	ldr	r1, [pc, #708]	@ (80048c0 <OTM8009A_Init+0x31c>)
 80045fc:	2000      	movs	r0, #0
 80045fe:	f00c f8cd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8004602:	49b0      	ldr	r1, [pc, #704]	@ (80048c4 <OTM8009A_Init+0x320>)
 8004604:	2000      	movs	r0, #0
 8004606:	f00c f8c9 	bl	801079c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800460a:	49af      	ldr	r1, [pc, #700]	@ (80048c8 <OTM8009A_Init+0x324>)
 800460c:	2000      	movs	r0, #0
 800460e:	f00c f8c5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004612:	49ae      	ldr	r1, [pc, #696]	@ (80048cc <OTM8009A_Init+0x328>)
 8004614:	2000      	movs	r0, #0
 8004616:	f00c f8c1 	bl	801079c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800461a:	49ad      	ldr	r1, [pc, #692]	@ (80048d0 <OTM8009A_Init+0x32c>)
 800461c:	2000      	movs	r0, #0
 800461e:	f00c f8bd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8004622:	49ac      	ldr	r1, [pc, #688]	@ (80048d4 <OTM8009A_Init+0x330>)
 8004624:	2000      	movs	r0, #0
 8004626:	f00c f8b9 	bl	801079c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800462a:	499e      	ldr	r1, [pc, #632]	@ (80048a4 <OTM8009A_Init+0x300>)
 800462c:	2000      	movs	r0, #0
 800462e:	f00c f8b5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8004632:	49a9      	ldr	r1, [pc, #676]	@ (80048d8 <OTM8009A_Init+0x334>)
 8004634:	2000      	movs	r0, #0
 8004636:	f00c f8b1 	bl	801079c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800463a:	49a8      	ldr	r1, [pc, #672]	@ (80048dc <OTM8009A_Init+0x338>)
 800463c:	2000      	movs	r0, #0
 800463e:	f00c f8ad 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8004642:	49a7      	ldr	r1, [pc, #668]	@ (80048e0 <OTM8009A_Init+0x33c>)
 8004644:	2000      	movs	r0, #0
 8004646:	f00c f8a9 	bl	801079c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800464a:	49a6      	ldr	r1, [pc, #664]	@ (80048e4 <OTM8009A_Init+0x340>)
 800464c:	2000      	movs	r0, #0
 800464e:	f00c f8a5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8004652:	49a5      	ldr	r1, [pc, #660]	@ (80048e8 <OTM8009A_Init+0x344>)
 8004654:	2000      	movs	r0, #0
 8004656:	f00c f8a1 	bl	801079c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800465a:	49a4      	ldr	r1, [pc, #656]	@ (80048ec <OTM8009A_Init+0x348>)
 800465c:	2000      	movs	r0, #0
 800465e:	f00c f89d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8004662:	49a3      	ldr	r1, [pc, #652]	@ (80048f0 <OTM8009A_Init+0x34c>)
 8004664:	2000      	movs	r0, #0
 8004666:	f00c f899 	bl	801079c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800466a:	49a2      	ldr	r1, [pc, #648]	@ (80048f4 <OTM8009A_Init+0x350>)
 800466c:	2000      	movs	r0, #0
 800466e:	f00c f895 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004672:	4996      	ldr	r1, [pc, #600]	@ (80048cc <OTM8009A_Init+0x328>)
 8004674:	2000      	movs	r0, #0
 8004676:	f00c f891 	bl	801079c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800467a:	498a      	ldr	r1, [pc, #552]	@ (80048a4 <OTM8009A_Init+0x300>)
 800467c:	2000      	movs	r0, #0
 800467e:	f00c f88d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8004682:	499d      	ldr	r1, [pc, #628]	@ (80048f8 <OTM8009A_Init+0x354>)
 8004684:	2002      	movs	r0, #2
 8004686:	f00c f889 	bl	801079c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800468a:	499c      	ldr	r1, [pc, #624]	@ (80048fc <OTM8009A_Init+0x358>)
 800468c:	2000      	movs	r0, #0
 800468e:	f00c f885 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8004692:	499b      	ldr	r1, [pc, #620]	@ (8004900 <OTM8009A_Init+0x35c>)
 8004694:	2000      	movs	r0, #0
 8004696:	f00c f881 	bl	801079c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800469a:	499a      	ldr	r1, [pc, #616]	@ (8004904 <OTM8009A_Init+0x360>)
 800469c:	2000      	movs	r0, #0
 800469e:	f00c f87d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80046a2:	4999      	ldr	r1, [pc, #612]	@ (8004908 <OTM8009A_Init+0x364>)
 80046a4:	2000      	movs	r0, #0
 80046a6:	f00c f879 	bl	801079c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80046aa:	4998      	ldr	r1, [pc, #608]	@ (800490c <OTM8009A_Init+0x368>)
 80046ac:	2000      	movs	r0, #0
 80046ae:	f00c f875 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80046b2:	4997      	ldr	r1, [pc, #604]	@ (8004910 <OTM8009A_Init+0x36c>)
 80046b4:	2000      	movs	r0, #0
 80046b6:	f00c f871 	bl	801079c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80046ba:	4988      	ldr	r1, [pc, #544]	@ (80048dc <OTM8009A_Init+0x338>)
 80046bc:	2000      	movs	r0, #0
 80046be:	f00c f86d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80046c2:	4994      	ldr	r1, [pc, #592]	@ (8004914 <OTM8009A_Init+0x370>)
 80046c4:	2000      	movs	r0, #0
 80046c6:	f00c f869 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80046ca:	4986      	ldr	r1, [pc, #536]	@ (80048e4 <OTM8009A_Init+0x340>)
 80046cc:	2000      	movs	r0, #0
 80046ce:	f00c f865 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80046d2:	4991      	ldr	r1, [pc, #580]	@ (8004918 <OTM8009A_Init+0x374>)
 80046d4:	2000      	movs	r0, #0
 80046d6:	f00c f861 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80046da:	4990      	ldr	r1, [pc, #576]	@ (800491c <OTM8009A_Init+0x378>)
 80046dc:	2000      	movs	r0, #0
 80046de:	f00c f85d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80046e2:	498f      	ldr	r1, [pc, #572]	@ (8004920 <OTM8009A_Init+0x37c>)
 80046e4:	2002      	movs	r0, #2
 80046e6:	f00c f859 	bl	801079c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80046ea:	4970      	ldr	r1, [pc, #448]	@ (80048ac <OTM8009A_Init+0x308>)
 80046ec:	2000      	movs	r0, #0
 80046ee:	f00c f855 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80046f2:	498c      	ldr	r1, [pc, #560]	@ (8004924 <OTM8009A_Init+0x380>)
 80046f4:	2006      	movs	r0, #6
 80046f6:	f00c f851 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80046fa:	498b      	ldr	r1, [pc, #556]	@ (8004928 <OTM8009A_Init+0x384>)
 80046fc:	2000      	movs	r0, #0
 80046fe:	f00c f84d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8004702:	498a      	ldr	r1, [pc, #552]	@ (800492c <OTM8009A_Init+0x388>)
 8004704:	200e      	movs	r0, #14
 8004706:	f00c f849 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800470a:	4989      	ldr	r1, [pc, #548]	@ (8004930 <OTM8009A_Init+0x38c>)
 800470c:	2000      	movs	r0, #0
 800470e:	f00c f845 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8004712:	4988      	ldr	r1, [pc, #544]	@ (8004934 <OTM8009A_Init+0x390>)
 8004714:	200e      	movs	r0, #14
 8004716:	f00c f841 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800471a:	4987      	ldr	r1, [pc, #540]	@ (8004938 <OTM8009A_Init+0x394>)
 800471c:	2000      	movs	r0, #0
 800471e:	f00c f83d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8004722:	4986      	ldr	r1, [pc, #536]	@ (800493c <OTM8009A_Init+0x398>)
 8004724:	200a      	movs	r0, #10
 8004726:	f00c f839 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800472a:	4985      	ldr	r1, [pc, #532]	@ (8004940 <OTM8009A_Init+0x39c>)
 800472c:	2000      	movs	r0, #0
 800472e:	f00c f835 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8004732:	4984      	ldr	r1, [pc, #528]	@ (8004944 <OTM8009A_Init+0x3a0>)
 8004734:	2000      	movs	r0, #0
 8004736:	f00c f831 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800473a:	495c      	ldr	r1, [pc, #368]	@ (80048ac <OTM8009A_Init+0x308>)
 800473c:	2000      	movs	r0, #0
 800473e:	f00c f82d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8004742:	4981      	ldr	r1, [pc, #516]	@ (8004948 <OTM8009A_Init+0x3a4>)
 8004744:	200a      	movs	r0, #10
 8004746:	f00c f829 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800474a:	4980      	ldr	r1, [pc, #512]	@ (800494c <OTM8009A_Init+0x3a8>)
 800474c:	2000      	movs	r0, #0
 800474e:	f00c f825 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8004752:	497f      	ldr	r1, [pc, #508]	@ (8004950 <OTM8009A_Init+0x3ac>)
 8004754:	200f      	movs	r0, #15
 8004756:	f00c f821 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800475a:	4973      	ldr	r1, [pc, #460]	@ (8004928 <OTM8009A_Init+0x384>)
 800475c:	2000      	movs	r0, #0
 800475e:	f00c f81d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8004762:	497c      	ldr	r1, [pc, #496]	@ (8004954 <OTM8009A_Init+0x3b0>)
 8004764:	200f      	movs	r0, #15
 8004766:	f00c f819 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800476a:	4971      	ldr	r1, [pc, #452]	@ (8004930 <OTM8009A_Init+0x38c>)
 800476c:	2000      	movs	r0, #0
 800476e:	f00c f815 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8004772:	4979      	ldr	r1, [pc, #484]	@ (8004958 <OTM8009A_Init+0x3b4>)
 8004774:	200a      	movs	r0, #10
 8004776:	f00c f811 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800477a:	496f      	ldr	r1, [pc, #444]	@ (8004938 <OTM8009A_Init+0x394>)
 800477c:	2000      	movs	r0, #0
 800477e:	f00c f80d 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8004782:	4976      	ldr	r1, [pc, #472]	@ (800495c <OTM8009A_Init+0x3b8>)
 8004784:	200f      	movs	r0, #15
 8004786:	f00c f809 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800478a:	496d      	ldr	r1, [pc, #436]	@ (8004940 <OTM8009A_Init+0x39c>)
 800478c:	2000      	movs	r0, #0
 800478e:	f00c f805 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8004792:	4973      	ldr	r1, [pc, #460]	@ (8004960 <OTM8009A_Init+0x3bc>)
 8004794:	200f      	movs	r0, #15
 8004796:	f00c f801 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800479a:	4972      	ldr	r1, [pc, #456]	@ (8004964 <OTM8009A_Init+0x3c0>)
 800479c:	2000      	movs	r0, #0
 800479e:	f00b fffd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80047a2:	4971      	ldr	r1, [pc, #452]	@ (8004968 <OTM8009A_Init+0x3c4>)
 80047a4:	200a      	movs	r0, #10
 80047a6:	f00b fff9 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80047aa:	4970      	ldr	r1, [pc, #448]	@ (800496c <OTM8009A_Init+0x3c8>)
 80047ac:	2000      	movs	r0, #0
 80047ae:	f00b fff5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80047b2:	496f      	ldr	r1, [pc, #444]	@ (8004970 <OTM8009A_Init+0x3cc>)
 80047b4:	200a      	movs	r0, #10
 80047b6:	f00b fff1 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80047ba:	493c      	ldr	r1, [pc, #240]	@ (80048ac <OTM8009A_Init+0x308>)
 80047bc:	2000      	movs	r0, #0
 80047be:	f00b ffed 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80047c2:	496c      	ldr	r1, [pc, #432]	@ (8004974 <OTM8009A_Init+0x3d0>)
 80047c4:	200a      	movs	r0, #10
 80047c6:	f00b ffe9 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80047ca:	4960      	ldr	r1, [pc, #384]	@ (800494c <OTM8009A_Init+0x3a8>)
 80047cc:	2000      	movs	r0, #0
 80047ce:	f00b ffe5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80047d2:	4969      	ldr	r1, [pc, #420]	@ (8004978 <OTM8009A_Init+0x3d4>)
 80047d4:	200f      	movs	r0, #15
 80047d6:	f00b ffe1 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80047da:	4953      	ldr	r1, [pc, #332]	@ (8004928 <OTM8009A_Init+0x384>)
 80047dc:	2000      	movs	r0, #0
 80047de:	f00b ffdd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80047e2:	4966      	ldr	r1, [pc, #408]	@ (800497c <OTM8009A_Init+0x3d8>)
 80047e4:	200f      	movs	r0, #15
 80047e6:	f00b ffd9 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80047ea:	4951      	ldr	r1, [pc, #324]	@ (8004930 <OTM8009A_Init+0x38c>)
 80047ec:	2000      	movs	r0, #0
 80047ee:	f00b ffd5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80047f2:	4963      	ldr	r1, [pc, #396]	@ (8004980 <OTM8009A_Init+0x3dc>)
 80047f4:	200a      	movs	r0, #10
 80047f6:	f00b ffd1 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80047fa:	494f      	ldr	r1, [pc, #316]	@ (8004938 <OTM8009A_Init+0x394>)
 80047fc:	2000      	movs	r0, #0
 80047fe:	f00b ffcd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8004802:	4960      	ldr	r1, [pc, #384]	@ (8004984 <OTM8009A_Init+0x3e0>)
 8004804:	200f      	movs	r0, #15
 8004806:	f00b ffc9 	bl	801079c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800480a:	494d      	ldr	r1, [pc, #308]	@ (8004940 <OTM8009A_Init+0x39c>)
 800480c:	2000      	movs	r0, #0
 800480e:	f00b ffc5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8004812:	495d      	ldr	r1, [pc, #372]	@ (8004988 <OTM8009A_Init+0x3e4>)
 8004814:	200f      	movs	r0, #15
 8004816:	f00b ffc1 	bl	801079c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800481a:	4930      	ldr	r1, [pc, #192]	@ (80048dc <OTM8009A_Init+0x338>)
 800481c:	2000      	movs	r0, #0
 800481e:	f00b ffbd 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8004822:	495a      	ldr	r1, [pc, #360]	@ (800498c <OTM8009A_Init+0x3e8>)
 8004824:	2000      	movs	r0, #0
 8004826:	f00b ffb9 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800482a:	4959      	ldr	r1, [pc, #356]	@ (8004990 <OTM8009A_Init+0x3ec>)
 800482c:	2000      	movs	r0, #0
 800482e:	f00b ffb5 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8004832:	4958      	ldr	r1, [pc, #352]	@ (8004994 <OTM8009A_Init+0x3f0>)
 8004834:	2000      	movs	r0, #0
 8004836:	f00b ffb1 	bl	801079c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800483a:	491a      	ldr	r1, [pc, #104]	@ (80048a4 <OTM8009A_Init+0x300>)
 800483c:	2000      	movs	r0, #0
 800483e:	f00b ffad 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8004842:	4955      	ldr	r1, [pc, #340]	@ (8004998 <OTM8009A_Init+0x3f4>)
 8004844:	2003      	movs	r0, #3
 8004846:	f00b ffa9 	bl	801079c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800484a:	4916      	ldr	r1, [pc, #88]	@ (80048a4 <OTM8009A_Init+0x300>)
 800484c:	2000      	movs	r0, #0
 800484e:	f00b ffa5 	bl	801079c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004852:	4914      	ldr	r1, [pc, #80]	@ (80048a4 <OTM8009A_Init+0x300>)
 8004854:	2000      	movs	r0, #0
 8004856:	f00b ffa1 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800485a:	4950      	ldr	r1, [pc, #320]	@ (800499c <OTM8009A_Init+0x3f8>)
 800485c:	2010      	movs	r0, #16
 800485e:	f00b ff9d 	bl	801079c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004862:	4910      	ldr	r1, [pc, #64]	@ (80048a4 <OTM8009A_Init+0x300>)
 8004864:	2000      	movs	r0, #0
 8004866:	f00b ff99 	bl	801079c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800486a:	494d      	ldr	r1, [pc, #308]	@ (80049a0 <OTM8009A_Init+0x3fc>)
 800486c:	2010      	movs	r0, #16
 800486e:	f00b ff95 	bl	801079c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8004872:	494c      	ldr	r1, [pc, #304]	@ (80049a4 <OTM8009A_Init+0x400>)
 8004874:	2000      	movs	r0, #0
 8004876:	f00b ff91 	bl	801079c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800487a:	2078      	movs	r0, #120	@ 0x78
 800487c:	f00a fa14 	bl	800eca8 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <OTM8009A_Init+0x2f4>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b02      	cmp	r3, #2
 800488a:	f040 8091 	bne.w	80049b0 <OTM8009A_Init+0x40c>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800488e:	4946      	ldr	r1, [pc, #280]	@ (80049a8 <OTM8009A_Init+0x404>)
 8004890:	2000      	movs	r0, #0
 8004892:	f00b ff83 	bl	801079c <DSI_IO_WriteCmd>
    break;
 8004896:	e08c      	b.n	80049b2 <OTM8009A_Init+0x40e>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8004898:	4944      	ldr	r1, [pc, #272]	@ (80049ac <OTM8009A_Init+0x408>)
 800489a:	2000      	movs	r0, #0
 800489c:	f00b ff7e 	bl	801079c <DSI_IO_WriteCmd>
    break;
 80048a0:	e087      	b.n	80049b2 <OTM8009A_Init+0x40e>
 80048a2:	bf00      	nop
 80048a4:	0801b020 	.word	0x0801b020
 80048a8:	0801aed8 	.word	0x0801aed8
 80048ac:	0801b024 	.word	0x0801b024
 80048b0:	0801aedc 	.word	0x0801aedc
 80048b4:	0801b028 	.word	0x0801b028
 80048b8:	0801b02c 	.word	0x0801b02c
 80048bc:	0801b030 	.word	0x0801b030
 80048c0:	0801b034 	.word	0x0801b034
 80048c4:	0801b038 	.word	0x0801b038
 80048c8:	0801b03c 	.word	0x0801b03c
 80048cc:	0801b040 	.word	0x0801b040
 80048d0:	0801b044 	.word	0x0801b044
 80048d4:	0801b048 	.word	0x0801b048
 80048d8:	0801b04c 	.word	0x0801b04c
 80048dc:	0801b050 	.word	0x0801b050
 80048e0:	0801b054 	.word	0x0801b054
 80048e4:	0801b058 	.word	0x0801b058
 80048e8:	0801b05c 	.word	0x0801b05c
 80048ec:	0801b060 	.word	0x0801b060
 80048f0:	0801b064 	.word	0x0801b064
 80048f4:	0801b068 	.word	0x0801b068
 80048f8:	0801af08 	.word	0x0801af08
 80048fc:	0801b06c 	.word	0x0801b06c
 8004900:	0801b070 	.word	0x0801b070
 8004904:	0801b074 	.word	0x0801b074
 8004908:	0801b078 	.word	0x0801b078
 800490c:	0801b07c 	.word	0x0801b07c
 8004910:	0801b080 	.word	0x0801b080
 8004914:	0801b084 	.word	0x0801b084
 8004918:	0801b088 	.word	0x0801b088
 800491c:	0801b08c 	.word	0x0801b08c
 8004920:	0801af0c 	.word	0x0801af0c
 8004924:	0801af10 	.word	0x0801af10
 8004928:	0801b090 	.word	0x0801b090
 800492c:	0801af18 	.word	0x0801af18
 8004930:	0801b094 	.word	0x0801b094
 8004934:	0801af28 	.word	0x0801af28
 8004938:	0801b098 	.word	0x0801b098
 800493c:	0801af38 	.word	0x0801af38
 8004940:	0801b09c 	.word	0x0801b09c
 8004944:	0801b0d4 	.word	0x0801b0d4
 8004948:	0801af44 	.word	0x0801af44
 800494c:	0801b0a0 	.word	0x0801b0a0
 8004950:	0801af50 	.word	0x0801af50
 8004954:	0801af60 	.word	0x0801af60
 8004958:	0801af70 	.word	0x0801af70
 800495c:	0801af7c 	.word	0x0801af7c
 8004960:	0801af8c 	.word	0x0801af8c
 8004964:	0801b0a4 	.word	0x0801b0a4
 8004968:	0801af9c 	.word	0x0801af9c
 800496c:	0801b0a8 	.word	0x0801b0a8
 8004970:	0801afa8 	.word	0x0801afa8
 8004974:	0801afb4 	.word	0x0801afb4
 8004978:	0801afc0 	.word	0x0801afc0
 800497c:	0801afd0 	.word	0x0801afd0
 8004980:	0801afe0 	.word	0x0801afe0
 8004984:	0801afec 	.word	0x0801afec
 8004988:	0801affc 	.word	0x0801affc
 800498c:	0801b0d8 	.word	0x0801b0d8
 8004990:	0801b0dc 	.word	0x0801b0dc
 8004994:	0801b0e0 	.word	0x0801b0e0
 8004998:	0801b00c 	.word	0x0801b00c
 800499c:	0801aee0 	.word	0x0801aee0
 80049a0:	0801aef4 	.word	0x0801aef4
 80049a4:	0801b0ac 	.word	0x0801b0ac
 80049a8:	0801b0b0 	.word	0x0801b0b0
 80049ac:	0801b0b4 	.word	0x0801b0b4
  default :
    break;
 80049b0:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10b      	bne.n	80049d0 <OTM8009A_Init+0x42c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80049b8:	4916      	ldr	r1, [pc, #88]	@ (8004a14 <OTM8009A_Init+0x470>)
 80049ba:	2000      	movs	r0, #0
 80049bc:	f00b feee 	bl	801079c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80049c0:	4915      	ldr	r1, [pc, #84]	@ (8004a18 <OTM8009A_Init+0x474>)
 80049c2:	2004      	movs	r0, #4
 80049c4:	f00b feea 	bl	801079c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80049c8:	4914      	ldr	r1, [pc, #80]	@ (8004a1c <OTM8009A_Init+0x478>)
 80049ca:	2004      	movs	r0, #4
 80049cc:	f00b fee6 	bl	801079c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80049d0:	4913      	ldr	r1, [pc, #76]	@ (8004a20 <OTM8009A_Init+0x47c>)
 80049d2:	2000      	movs	r0, #0
 80049d4:	f00b fee2 	bl	801079c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80049d8:	4912      	ldr	r1, [pc, #72]	@ (8004a24 <OTM8009A_Init+0x480>)
 80049da:	2000      	movs	r0, #0
 80049dc:	f00b fede 	bl	801079c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80049e0:	4911      	ldr	r1, [pc, #68]	@ (8004a28 <OTM8009A_Init+0x484>)
 80049e2:	2000      	movs	r0, #0
 80049e4:	f00b feda 	bl	801079c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80049e8:	4910      	ldr	r1, [pc, #64]	@ (8004a2c <OTM8009A_Init+0x488>)
 80049ea:	2000      	movs	r0, #0
 80049ec:	f00b fed6 	bl	801079c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80049f0:	490f      	ldr	r1, [pc, #60]	@ (8004a30 <OTM8009A_Init+0x48c>)
 80049f2:	2000      	movs	r0, #0
 80049f4:	f00b fed2 	bl	801079c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80049f8:	490e      	ldr	r1, [pc, #56]	@ (8004a34 <OTM8009A_Init+0x490>)
 80049fa:	2000      	movs	r0, #0
 80049fc:	f00b fece 	bl	801079c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8004a00:	490d      	ldr	r1, [pc, #52]	@ (8004a38 <OTM8009A_Init+0x494>)
 8004a02:	2000      	movs	r0, #0
 8004a04:	f00b feca 	bl	801079c <DSI_IO_WriteCmd>

  return 0;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	0801b0b8 	.word	0x0801b0b8
 8004a18:	0801b010 	.word	0x0801b010
 8004a1c:	0801b018 	.word	0x0801b018
 8004a20:	0801b0bc 	.word	0x0801b0bc
 8004a24:	0801b0c0 	.word	0x0801b0c0
 8004a28:	0801b0c4 	.word	0x0801b0c4
 8004a2c:	0801b0c8 	.word	0x0801b0c8
 8004a30:	0801b0cc 	.word	0x0801b0cc
 8004a34:	0801b020 	.word	0x0801b020
 8004a38:	0801b0d0 	.word	0x0801b0d0

08004a3c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	4603      	mov	r3, r0
 8004a46:	81fb      	strh	r3, [r7, #14]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	81bb      	strh	r3, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004a54:	89bb      	ldrh	r3, [r7, #12]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004a5a:	89bb      	ldrh	r3, [r7, #12]
 8004a5c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a60:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	837b      	strh	r3, [r7, #26]
  
  volatile uint16_t register_buffer;

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004a66:	f00a f84b 	bl	800eb00 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2203      	movs	r2, #3
 8004a70:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fe91 	bl	800679c <CODEC_IO_Write>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004a84:	89fb      	ldrh	r3, [r7, #14]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f640 0117 	movw	r1, #2071	@ 0x817
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fe84 	bl	800679c <CODEC_IO_Write>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fe77 	bl	800679c <CODEC_IO_Write>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	226c      	movs	r2, #108	@ 0x6c
 8004abe:	2139      	movs	r1, #57	@ 0x39
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fe6b 	bl	800679c <CODEC_IO_Write>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004ad0:	8afb      	ldrh	r3, [r7, #22]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00c      	beq.n	8004af0 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2213      	movs	r2, #19
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 fe5c 	bl	800679c <CODEC_IO_Write>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e00b      	b.n	8004b08 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2203      	movs	r2, #3
 8004af6:	2101      	movs	r1, #1
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 fe4f 	bl	800679c <CODEC_IO_Write>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8004b08:	2032      	movs	r0, #50	@ 0x32
 8004b0a:	f00a f861 	bl	800ebd0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004b0e:	8b3b      	ldrh	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 815f 	beq.w	8004dd4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8004b16:	4bae      	ldr	r3, [pc, #696]	@ (8004dd0 <wm8994_Init+0x394>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8004b1c:	8b3b      	ldrh	r3, [r7, #24]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	f000 808c 	beq.w	8004c3c <wm8994_Init+0x200>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	f300 8111 	bgt.w	8004d4c <wm8994_Init+0x310>
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <wm8994_Init+0xf8>
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d042      	beq.n	8004bb8 <wm8994_Init+0x17c>
 8004b32:	e10b      	b.n	8004d4c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8004b3c:	2105      	movs	r1, #5
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fe2c 	bl	800679c <CODEC_IO_Write>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2200      	movs	r2, #0
 8004b54:	f240 6101 	movw	r1, #1537	@ 0x601
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fe1f 	bl	800679c <CODEC_IO_Write>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f240 6102 	movw	r1, #1538	@ 0x602
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 fe12 	bl	800679c <CODEC_IO_Write>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2202      	movs	r2, #2
 8004b88:	f240 6104 	movw	r1, #1540	@ 0x604
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fe05 	bl	800679c <CODEC_IO_Write>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004b9c:	89fb      	ldrh	r3, [r7, #14]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f240 6105 	movw	r1, #1541	@ 0x605
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fdf8 	bl	800679c <CODEC_IO_Write>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
      break;
 8004bb6:	e110      	b.n	8004dda <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f240 3203 	movw	r2, #771	@ 0x303
 8004bc0:	2105      	movs	r1, #5
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fdea 	bl	800679c <CODEC_IO_Write>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f240 6101 	movw	r1, #1537	@ 0x601
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 fddd 	bl	800679c <CODEC_IO_Write>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f240 6102 	movw	r1, #1538	@ 0x602
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 fdd0 	bl	800679c <CODEC_IO_Write>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004c06:	89fb      	ldrh	r3, [r7, #14]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f240 6104 	movw	r1, #1540	@ 0x604
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fdc3 	bl	800679c <CODEC_IO_Write>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2200      	movs	r2, #0
 8004c26:	f240 6105 	movw	r1, #1541	@ 0x605
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fdb6 	bl	800679c <CODEC_IO_Write>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]
      break;
 8004c3a:	e0ce      	b.n	8004dda <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004c3c:	8afb      	ldrh	r3, [r7, #22]
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c42:	d141      	bne.n	8004cc8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004c44:	89fb      	ldrh	r3, [r7, #14]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8004c4c:	2105      	movs	r1, #5
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 fda4 	bl	800679c <CODEC_IO_Write>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8004c5e:	89fb      	ldrh	r3, [r7, #14]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2203      	movs	r2, #3
 8004c64:	f240 6101 	movw	r1, #1537	@ 0x601
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fd97 	bl	800679c <CODEC_IO_Write>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	f240 6102 	movw	r1, #1538	@ 0x602
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 fd8a 	bl	800679c <CODEC_IO_Write>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8004c92:	89fb      	ldrh	r3, [r7, #14]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2203      	movs	r2, #3
 8004c98:	f240 6104 	movw	r1, #1540	@ 0x604
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 fd7d 	bl	800679c <CODEC_IO_Write>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	f240 6105 	movw	r1, #1541	@ 0x605
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fd70 	bl	800679c <CODEC_IO_Write>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8004cc6:	e088      	b.n	8004dda <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004cc8:	89fb      	ldrh	r3, [r7, #14]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 fd62 	bl	800679c <CODEC_IO_Write>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f240 6101 	movw	r1, #1537	@ 0x601
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fd55 	bl	800679c <CODEC_IO_Write>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2201      	movs	r2, #1
 8004d02:	f240 6102 	movw	r1, #1538	@ 0x602
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fd48 	bl	800679c <CODEC_IO_Write>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f240 6104 	movw	r1, #1540	@ 0x604
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fd3b 	bl	800679c <CODEC_IO_Write>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2202      	movs	r2, #2
 8004d36:	f240 6105 	movw	r1, #1541	@ 0x605
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fd2e 	bl	800679c <CODEC_IO_Write>
 8004d40:	4603      	mov	r3, r0
 8004d42:	461a      	mov	r2, r3
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	61fb      	str	r3, [r7, #28]
      break;
 8004d4a:	e046      	b.n	8004dda <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004d4c:	89fb      	ldrh	r3, [r7, #14]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f240 3203 	movw	r2, #771	@ 0x303
 8004d54:	2105      	movs	r1, #5
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fd20 	bl	800679c <CODEC_IO_Write>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f240 6101 	movw	r1, #1537	@ 0x601
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 fd13 	bl	800679c <CODEC_IO_Write>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2201      	movs	r2, #1
 8004d86:	f240 6102 	movw	r1, #1538	@ 0x602
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fd06 	bl	800679c <CODEC_IO_Write>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461a      	mov	r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004d9a:	89fb      	ldrh	r3, [r7, #14]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f240 6104 	movw	r1, #1540	@ 0x604
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 fcf9 	bl	800679c <CODEC_IO_Write>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004db4:	89fb      	ldrh	r3, [r7, #14]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	f240 6105 	movw	r1, #1541	@ 0x605
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fcec 	bl	800679c <CODEC_IO_Write>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	61fb      	str	r3, [r7, #28]
      break;
 8004dce:	e004      	b.n	8004dda <wm8994_Init+0x39e>
 8004dd0:	20030d1c 	.word	0x20030d1c
    }
  }
  else
  {
    outputEnabled = 0;
 8004dd4:	4b9a      	ldr	r3, [pc, #616]	@ (8005040 <wm8994_Init+0x604>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8004dda:	2032      	movs	r0, #50	@ 0x32
 8004ddc:	f009 fef8 	bl	800ebd0 <AUDIO_IO_Delay>

  /* Path Configurations for input */
  if (input_device > 0)
 8004de0:	8afb      	ldrh	r3, [r7, #22]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 81aa 	beq.w	800513c <wm8994_Init+0x700>
  {
    inputEnabled = 1;
 8004de8:	4b96      	ldr	r3, [pc, #600]	@ (8005044 <wm8994_Init+0x608>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004dee:	8afb      	ldrh	r3, [r7, #22]
 8004df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df4:	f000 8128 	beq.w	8005048 <wm8994_Init+0x60c>
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dfc:	f300 819a 	bgt.w	8005134 <wm8994_Init+0x6f8>
 8004e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e04:	d05a      	beq.n	8004ebc <wm8994_Init+0x480>
 8004e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e0a:	f300 8193 	bgt.w	8005134 <wm8994_Init+0x6f8>
 8004e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e12:	f000 80c6 	beq.w	8004fa2 <wm8994_Init+0x566>
 8004e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e1a:	f040 818b 	bne.w	8005134 <wm8994_Init+0x6f8>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8004e26:	2104      	movs	r1, #4
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fcb7 	bl	800679c <CODEC_IO_Write>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004e38:	89fb      	ldrh	r3, [r7, #14]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	22db      	movs	r2, #219	@ 0xdb
 8004e3e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fcaa 	bl	800679c <CODEC_IO_Write>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8004e52:	89fb      	ldrh	r3, [r7, #14]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fc9d 	bl	800679c <CODEC_IO_Write>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2202      	movs	r2, #2
 8004e72:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fc90 	bl	800679c <CODEC_IO_Write>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004e86:	89fb      	ldrh	r3, [r7, #14]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f240 6109 	movw	r1, #1545	@ 0x609
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fc83 	bl	800679c <CODEC_IO_Write>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	220e      	movs	r2, #14
 8004ea6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fc76 	bl	800679c <CODEC_IO_Write>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	61fb      	str	r3, [r7, #28]
      break;
 8004eba:	e142      	b.n	8005142 <wm8994_Init+0x706>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004ebc:	89fb      	ldrh	r3, [r7, #14]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2211      	movs	r2, #17
 8004ec2:	2128      	movs	r1, #40	@ 0x28
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f001 fc69 	bl	800679c <CODEC_IO_Write>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61fb      	str	r3, [r7, #28]

  //    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
 //     counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0025);
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2225      	movs	r2, #37	@ 0x25
 8004eda:	2129      	movs	r1, #41	@ 0x29
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fc5d 	bl	800679c <CODEC_IO_Write>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]

//      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
//      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0025);
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2225      	movs	r2, #37	@ 0x25
 8004ef2:	212a      	movs	r1, #42	@ 0x2a
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 fc51 	bl	800679c <CODEC_IO_Write>
 8004efa:	4603      	mov	r3, r0
 8004efc:	461a      	mov	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8004f04:	89fb      	ldrh	r3, [r7, #14]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f240 3203 	movw	r2, #771	@ 0x303
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 fc44 	bl	800679c <CODEC_IO_Write>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	22db      	movs	r2, #219	@ 0xdb
 8004f24:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fc37 	bl	800679c <CODEC_IO_Write>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004f38:	89fb      	ldrh	r3, [r7, #14]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fc2a 	bl	800679c <CODEC_IO_Write>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2202      	movs	r2, #2
 8004f58:	f240 6106 	movw	r1, #1542	@ 0x606
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fc1d 	bl	800679c <CODEC_IO_Write>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2202      	movs	r2, #2
 8004f72:	f240 6107 	movw	r1, #1543	@ 0x607
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 fc10 	bl	800679c <CODEC_IO_Write>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	220d      	movs	r2, #13
 8004f8c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fc03 	bl	800679c <CODEC_IO_Write>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
      break;
 8004fa0:	e0cf      	b.n	8005142 <wm8994_Init+0x706>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8004faa:	2104      	movs	r1, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fbf5 	bl	800679c <CODEC_IO_Write>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	22db      	movs	r2, #219	@ 0xdb
 8004fc2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fbe8 	bl	800679c <CODEC_IO_Write>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f246 3250 	movw	r2, #25424	@ 0x6350
 8004fde:	2102      	movs	r1, #2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fbdb 	bl	800679c <CODEC_IO_Write>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004ff0:	89fb      	ldrh	r3, [r7, #14]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f240 6106 	movw	r1, #1542	@ 0x606
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fbce 	bl	800679c <CODEC_IO_Write>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2202      	movs	r2, #2
 8005010:	f240 6107 	movw	r1, #1543	@ 0x607
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fbc1 	bl	800679c <CODEC_IO_Write>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	220d      	movs	r2, #13
 800502a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fbb4 	bl	800679c <CODEC_IO_Write>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	61fb      	str	r3, [r7, #28]
      break; 
 800503e:	e080      	b.n	8005142 <wm8994_Init+0x706>
 8005040:	20030d1c 	.word	0x20030d1c
 8005044:	20030d20 	.word	0x20030d20
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8005050:	2104      	movs	r1, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fba2 	bl	800679c <CODEC_IO_Write>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	22db      	movs	r2, #219	@ 0xdb
 8005068:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800506c:	4618      	mov	r0, r3
 800506e:	f001 fb95 	bl	800679c <CODEC_IO_Write>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	22db      	movs	r2, #219	@ 0xdb
 8005082:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fb88 	bl	800679c <CODEC_IO_Write>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800509e:	2102      	movs	r1, #2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fb7b 	bl	800679c <CODEC_IO_Write>
 80050a6:	4603      	mov	r3, r0
 80050a8:	461a      	mov	r2, r3
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80050b0:	89fb      	ldrh	r3, [r7, #14]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2202      	movs	r2, #2
 80050b6:	f240 6106 	movw	r1, #1542	@ 0x606
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fb6e 	bl	800679c <CODEC_IO_Write>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2202      	movs	r2, #2
 80050d0:	f240 6107 	movw	r1, #1543	@ 0x607
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fb61 	bl	800679c <CODEC_IO_Write>
 80050da:	4603      	mov	r3, r0
 80050dc:	461a      	mov	r2, r3
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2202      	movs	r2, #2
 80050ea:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 fb54 	bl	800679c <CODEC_IO_Write>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2202      	movs	r2, #2
 8005104:	f240 6109 	movw	r1, #1545	@ 0x609
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fb47 	bl	800679c <CODEC_IO_Write>
 800510e:	4603      	mov	r3, r0
 8005110:	461a      	mov	r2, r3
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	220d      	movs	r2, #13
 800511e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fb3a 	bl	800679c <CODEC_IO_Write>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	61fb      	str	r3, [r7, #28]
      break;    
 8005132:	e006      	b.n	8005142 <wm8994_Init+0x706>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
      break;
 800513a:	e002      	b.n	8005142 <wm8994_Init+0x706>
    }
  }
  else
  {
    inputEnabled = 0;
 800513c:	4bab      	ldr	r3, [pc, #684]	@ (80053ec <wm8994_Init+0x9b0>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  }
  
  /* Add Delay */
  AUDIO_IO_Delay(50);
 8005142:	2032      	movs	r0, #50	@ 0x32
 8005144:	f009 fd44 	bl	800ebd0 <AUDIO_IO_Delay>

  /*  Clock Configurations */
  switch (AudioFreq)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4aa9      	ldr	r2, [pc, #676]	@ (80053f0 <wm8994_Init+0x9b4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	f000 80b2 	beq.w	80052b6 <wm8994_Init+0x87a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4aa6      	ldr	r2, [pc, #664]	@ (80053f0 <wm8994_Init+0x9b4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	f200 8119 	bhi.w	800538e <wm8994_Init+0x952>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8005162:	4293      	cmp	r3, r2
 8005164:	f000 808c 	beq.w	8005280 <wm8994_Init+0x844>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800516e:	4293      	cmp	r3, r2
 8005170:	f200 810d 	bhi.w	800538e <wm8994_Init+0x952>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800517a:	4293      	cmp	r3, r2
 800517c:	f000 80ec 	beq.w	8005358 <wm8994_Init+0x91c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8005186:	4293      	cmp	r3, r2
 8005188:	f200 8101 	bhi.w	800538e <wm8994_Init+0x952>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8005192:	d05a      	beq.n	800524a <wm8994_Init+0x80e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800519a:	f200 80f8 	bhi.w	800538e <wm8994_Init+0x952>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80051a4:	4293      	cmp	r3, r2
 80051a6:	f000 80bc 	beq.w	8005322 <wm8994_Init+0x8e6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f245 6222 	movw	r2, #22050	@ 0x5622
 80051b0:	4293      	cmp	r3, r2
 80051b2:	f200 80ec 	bhi.w	800538e <wm8994_Init+0x952>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80051bc:	d02a      	beq.n	8005214 <wm8994_Init+0x7d8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80051c4:	f200 80e3 	bhi.w	800538e <wm8994_Init+0x952>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80051ce:	d006      	beq.n	80051de <wm8994_Init+0x7a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f000 8088 	beq.w	80052ec <wm8994_Init+0x8b0>
 80051dc:	e0d7      	b.n	800538e <wm8994_Init+0x952>
  {
  case  AUDIO_FREQUENCY_8K:

	/* ADC oversample disable */
	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0000);
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 fad7 	bl	800679c <CODEC_IO_Write>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]

    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2203      	movs	r2, #3
 80051fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005202:	4618      	mov	r0, r3
 8005204:	f001 faca 	bl	800679c <CODEC_IO_Write>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	61fb      	str	r3, [r7, #28]
    break;
 8005212:	e0d7      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2233      	movs	r2, #51	@ 0x33
 800521a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fabc 	bl	800679c <CODEC_IO_Write>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2202      	movs	r2, #2
 8005234:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8005238:	4618      	mov	r0, r3
 800523a:	f001 faaf 	bl	800679c <CODEC_IO_Write>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	61fb      	str	r3, [r7, #28]
    break;
 8005248:	e0bc      	b.n	80053c4 <wm8994_Init+0x988>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800524a:	89fb      	ldrh	r3, [r7, #14]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2263      	movs	r2, #99	@ 0x63
 8005250:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005254:	4618      	mov	r0, r3
 8005256:	f001 faa1 	bl	800679c <CODEC_IO_Write>
 800525a:	4603      	mov	r3, r0
 800525c:	461a      	mov	r2, r3
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2202      	movs	r2, #2
 800526a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800526e:	4618      	mov	r0, r3
 8005270:	f001 fa94 	bl	800679c <CODEC_IO_Write>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	61fb      	str	r3, [r7, #28]
    break;
 800527e:	e0a1      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2283      	movs	r2, #131	@ 0x83
 8005286:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800528a:	4618      	mov	r0, r3
 800528c:	f001 fa86 	bl	800679c <CODEC_IO_Write>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800529a:	89fb      	ldrh	r3, [r7, #14]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2202      	movs	r2, #2
 80052a0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 fa79 	bl	800679c <CODEC_IO_Write>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	61fb      	str	r3, [r7, #28]
    break;
 80052b4:	e086      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80052b6:	89fb      	ldrh	r3, [r7, #14]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	22a3      	movs	r2, #163	@ 0xa3
 80052bc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 fa6b 	bl	800679c <CODEC_IO_Write>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2202      	movs	r2, #2
 80052d6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 fa5e 	bl	800679c <CODEC_IO_Write>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
    break;
 80052ea:	e06b      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_11K:
    /* ADC oversample disable */
	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0000);
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fa50 	bl	800679c <CODEC_IO_Write>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	61fb      	str	r3, [r7, #28]

    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2213      	movs	r2, #19
 800530c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005310:	4618      	mov	r0, r3
 8005312:	f001 fa43 	bl	800679c <CODEC_IO_Write>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
    break;
 8005320:	e050      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2243      	movs	r2, #67	@ 0x43
 8005328:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fa35 	bl	800679c <CODEC_IO_Write>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800533c:	89fb      	ldrh	r3, [r7, #14]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2202      	movs	r2, #2
 8005342:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fa28 	bl	800679c <CODEC_IO_Write>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]
    break;
 8005356:	e035      	b.n	80053c4 <wm8994_Init+0x988>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2273      	movs	r2, #115	@ 0x73
 800535e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fa1a 	bl	800679c <CODEC_IO_Write>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2202      	movs	r2, #2
 8005378:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fa0d 	bl	800679c <CODEC_IO_Write>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
    break; 
 800538c:	e01a      	b.n	80053c4 <wm8994_Init+0x988>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800538e:	89fb      	ldrh	r3, [r7, #14]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2283      	movs	r2, #131	@ 0x83
 8005394:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005398:	4618      	mov	r0, r3
 800539a:	f001 f9ff 	bl	800679c <CODEC_IO_Write>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]

    /* ADC oversample enable */
    counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2202      	movs	r2, #2
 80053ae:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f9f2 	bl	800679c <CODEC_IO_Write>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]
    break; 
 80053c2:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80053c4:	8afb      	ldrh	r3, [r7, #22]
 80053c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ca:	d113      	bne.n	80053f4 <wm8994_Init+0x9b8>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f244 0218 	movw	r2, #16408	@ 0x4018
 80053d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 f9df 	bl	800679c <CODEC_IO_Write>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e012      	b.n	8005410 <wm8994_Init+0x9d4>
 80053ea:	bf00      	nop
 80053ec:	20030d20 	.word	0x20030d20
 80053f0:	00017700 	.word	0x00017700
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80053f4:	89fb      	ldrh	r3, [r7, #14]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80053fc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8005400:	4618      	mov	r0, r3
 8005402:	f001 f9cb 	bl	800679c <CODEC_IO_Write>
 8005406:	4603      	mov	r3, r0
 8005408:	461a      	mov	r2, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8005410:	89fb      	ldrh	r3, [r7, #14]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2200      	movs	r2, #0
 8005416:	f240 3102 	movw	r1, #770	@ 0x302
 800541a:	4618      	mov	r0, r3
 800541c:	f001 f9be 	bl	800679c <CODEC_IO_Write>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800542a:	89fb      	ldrh	r3, [r7, #14]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	220a      	movs	r2, #10
 8005430:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f9b1 	bl	800679c <CODEC_IO_Write>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8005444:	89fb      	ldrh	r3, [r7, #14]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2201      	movs	r2, #1
 800544a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800544e:	4618      	mov	r0, r3
 8005450:	f001 f9a4 	bl	800679c <CODEC_IO_Write>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	61fb      	str	r3, [r7, #28]

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800545e:	2032      	movs	r0, #50	@ 0x32
 8005460:	f009 fbb6 	bl	800ebd0 <AUDIO_IO_Delay>

  if (output_device > 0)  /* Audio output selected */
 8005464:	8b3b      	ldrh	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8122 	beq.w	80056b0 <wm8994_Init+0xc74>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005474:	2103      	movs	r1, #3
 8005476:	4618      	mov	r0, r3
 8005478:	f001 f990 	bl	800679c <CODEC_IO_Write>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2200      	movs	r2, #0
 800548c:	2122      	movs	r1, #34	@ 0x22
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f984 	bl	800679c <CODEC_IO_Write>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	2123      	movs	r1, #35	@ 0x23
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f978 	bl	800679c <CODEC_IO_Write>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80054be:	2136      	movs	r1, #54	@ 0x36
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f96b 	bl	800679c <CODEC_IO_Write>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f243 0203 	movw	r2, #12291	@ 0x3003
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 f95e 	bl	800679c <CODEC_IO_Write>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f0:	d10d      	bne.n	800550e <wm8994_Init+0xad2>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80054f2:	89fb      	ldrh	r3, [r7, #14]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f240 2205 	movw	r2, #517	@ 0x205
 80054fa:	2151      	movs	r1, #81	@ 0x51
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 f94d 	bl	800679c <CODEC_IO_Write>
 8005502:	4603      	mov	r3, r0
 8005504:	461a      	mov	r2, r3
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e00b      	b.n	8005526 <wm8994_Init+0xaea>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800550e:	89fb      	ldrh	r3, [r7, #14]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2205      	movs	r2, #5
 8005514:	2151      	movs	r1, #81	@ 0x51
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f940 	bl	800679c <CODEC_IO_Write>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8005526:	8b7b      	ldrh	r3, [r7, #26]
 8005528:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800552c:	f043 0303 	orr.w	r3, r3, #3
 8005530:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005532:	89fb      	ldrh	r3, [r7, #14]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	8b7a      	ldrh	r2, [r7, #26]
 8005538:	2101      	movs	r1, #1
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f92e 	bl	800679c <CODEC_IO_Write>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800554a:	89fb      	ldrh	r3, [r7, #14]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2222      	movs	r2, #34	@ 0x22
 8005550:	2160      	movs	r1, #96	@ 0x60
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f922 	bl	800679c <CODEC_IO_Write>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800556a:	214c      	movs	r1, #76	@ 0x4c
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f915 	bl	800679c <CODEC_IO_Write>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800557c:	200f      	movs	r0, #15
 800557e:	f009 fb27 	bl	800ebd0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8005582:	89fb      	ldrh	r3, [r7, #14]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2201      	movs	r2, #1
 8005588:	212d      	movs	r1, #45	@ 0x2d
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f906 	bl	800679c <CODEC_IO_Write>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	212e      	movs	r1, #46	@ 0x2e
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f8fa 	bl	800679c <CODEC_IO_Write>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80055ba:	2103      	movs	r1, #3
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f8ed 	bl	800679c <CODEC_IO_Write>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461a      	mov	r2, r3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2233      	movs	r2, #51	@ 0x33
 80055d2:	2154      	movs	r1, #84	@ 0x54
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 f8e1 	bl	800679c <CODEC_IO_Write>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 80055e4:	20fa      	movs	r0, #250	@ 0xfa
 80055e6:	f009 faf3 	bl	800ebd0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80055ea:	89fb      	ldrh	r3, [r7, #14]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	22ee      	movs	r2, #238	@ 0xee
 80055f0:	2160      	movs	r1, #96	@ 0x60
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 f8d2 	bl	800679c <CODEC_IO_Write>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005602:	89fb      	ldrh	r3, [r7, #14]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	22c0      	movs	r2, #192	@ 0xc0
 8005608:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800560c:	4618      	mov	r0, r3
 800560e:	f001 f8c5 	bl	800679c <CODEC_IO_Write>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	22c0      	movs	r2, #192	@ 0xc0
 8005622:	f240 6111 	movw	r1, #1553	@ 0x611
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f8b8 	bl	800679c <CODEC_IO_Write>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2200      	movs	r2, #0
 800563c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8005640:	4618      	mov	r0, r3
 8005642:	f001 f8ab 	bl	800679c <CODEC_IO_Write>
 8005646:	4603      	mov	r3, r0
 8005648:	461a      	mov	r2, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	22c0      	movs	r2, #192	@ 0xc0
 8005656:	f240 6112 	movw	r1, #1554	@ 0x612
 800565a:	4618      	mov	r0, r3
 800565c:	f001 f89e 	bl	800679c <CODEC_IO_Write>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	22c0      	movs	r2, #192	@ 0xc0
 8005670:	f240 6113 	movw	r1, #1555	@ 0x613
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f891 	bl	800679c <CODEC_IO_Write>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2200      	movs	r2, #0
 800568a:	f240 4122 	movw	r1, #1058	@ 0x422
 800568e:	4618      	mov	r0, r3
 8005690:	f001 f884 	bl	800679c <CODEC_IO_Write>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	61fb      	str	r3, [r7, #28]
    
    /* Add Delay */
    AUDIO_IO_Delay(50);
 800569e:	2032      	movs	r0, #50	@ 0x32
 80056a0:	f009 fa96 	bl	800ebd0 <AUDIO_IO_Delay>

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80056a4:	7afa      	ldrb	r2, [r7, #11]
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 faf0 	bl	8005c90 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80056b0:	8afb      	ldrh	r3, [r7, #22]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 808f 	beq.w	80057d6 <wm8994_Init+0xd9a>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	d003      	beq.n	80056c8 <wm8994_Init+0xc8c>
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c6:	d11e      	bne.n	8005706 <wm8994_Init+0xcca>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80056c8:	8b7b      	ldrh	r3, [r7, #26]
 80056ca:	f043 0313 	orr.w	r3, r3, #19
 80056ce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80056d0:	89fb      	ldrh	r3, [r7, #14]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	8b7a      	ldrh	r2, [r7, #26]
 80056d6:	2101      	movs	r1, #1
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f85f 	bl	800679c <CODEC_IO_Write>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
 //     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80056f0:	f240 4111 	movw	r1, #1041	@ 0x411
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f851 	bl	800679c <CODEC_IO_Write>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e05e      	b.n	80057c4 <wm8994_Init+0xd88>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570c:	d12c      	bne.n	8005768 <wm8994_Init+0xd2c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800570e:	8b7b      	ldrh	r3, [r7, #26]
 8005710:	f043 0313 	orr.w	r3, r3, #19
 8005714:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005716:	89fb      	ldrh	r3, [r7, #14]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	8b7a      	ldrh	r2, [r7, #26]
 800571c:	2101      	movs	r1, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f83c 	bl	800679c <CODEC_IO_Write>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
 //     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8005736:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f82e 	bl	800679c <CODEC_IO_Write>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8005752:	f240 4111 	movw	r1, #1041	@ 0x411
 8005756:	4618      	mov	r0, r3
 8005758:	f001 f820 	bl	800679c <CODEC_IO_Write>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e02d      	b.n	80057c4 <wm8994_Init+0xd88>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005768:	8afb      	ldrh	r3, [r7, #22]
 800576a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800576e:	d003      	beq.n	8005778 <wm8994_Init+0xd3c>
 8005770:	8afb      	ldrh	r3, [r7, #22]
 8005772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005776:	d125      	bne.n	80057c4 <wm8994_Init+0xd88>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	220b      	movs	r2, #11
 800577e:	2118      	movs	r1, #24
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f80b 	bl	800679c <CODEC_IO_Write>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005790:	89fb      	ldrh	r3, [r7, #14]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	220b      	movs	r2, #11
 8005796:	211a      	movs	r1, #26
 8005798:	4618      	mov	r0, r3
 800579a:	f000 ffff 	bl	800679c <CODEC_IO_Write>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80057b0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fff1 	bl	800679c <CODEC_IO_Write>
 80057ba:	4603      	mov	r3, r0
 80057bc:	461a      	mov	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	61fb      	str	r3, [r7, #28]
    }

    /* Add Delay */
    AUDIO_IO_Delay(50);
 80057c4:	2032      	movs	r0, #50	@ 0x32
 80057c6:	f009 fa03 	bl	800ebd0 <AUDIO_IO_Delay>

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80057ca:	7afa      	ldrb	r2, [r7, #11]
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fa5d 	bl	8005c90 <wm8994_SetVolume>
  }

  /* 24 bit mode*/
  counter += CODEC_IO_Write(DeviceAddr, 0x0300, 0x4050);
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f244 0250 	movw	r2, #16464	@ 0x4050
 80057de:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 ffda 	bl	800679c <CODEC_IO_Write>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	61fb      	str	r3, [r7, #28]

  /* disable DC servo for output */
  counter += CODEC_IO_Write(DeviceAddr, 0x0054, 0x0000);
 80057f2:	89fb      	ldrh	r3, [r7, #14]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2200      	movs	r2, #0
 80057f8:	2154      	movs	r1, #84	@ 0x54
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 ffce 	bl	800679c <CODEC_IO_Write>
 8005800:	4603      	mov	r3, r0
 8005802:	461a      	mov	r2, r3
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	61fb      	str	r3, [r7, #28]

  /* IN1L to ADC L */
  counter += CODEC_IO_Write(DeviceAddr, 0x0029, 0x0020);
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2220      	movs	r2, #32
 8005810:	2129      	movs	r1, #41	@ 0x29
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ffc2 	bl	800679c <CODEC_IO_Write>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]

  /* IN1R to ADC R */
  counter += CODEC_IO_Write(DeviceAddr, 0x002A, 0x0020);
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2220      	movs	r2, #32
 8005828:	212a      	movs	r1, #42	@ 0x2a
 800582a:	4618      	mov	r0, r3
 800582c:	f000 ffb6 	bl	800679c <CODEC_IO_Write>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]

  /* disable digital high pass filter after the ADC */
  counter += CODEC_IO_Write(DeviceAddr, 0x0410, 0x0000);
 800583a:	89fb      	ldrh	r3, [r7, #14]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2200      	movs	r2, #0
 8005840:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8005844:	4618      	mov	r0, r3
 8005846:	f000 ffa9 	bl	800679c <CODEC_IO_Write>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x0411, 0x0000);
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2200      	movs	r2, #0
 800585a:	f240 4111 	movw	r1, #1041	@ 0x411
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ff9c 	bl	800679c <CODEC_IO_Write>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	61fb      	str	r3, [r7, #28]
  /* enable digital high pass filter after the ADC */
//  counter += CODEC_IO_Write(DeviceAddr, 0x0410, 0x1800);
//  counter += CODEC_IO_Write(DeviceAddr, 0x0411, 0x1800);

  ///* invert ADC data */
  counter += CODEC_IO_Write(DeviceAddr, 0x0307, 0x0003);
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2203      	movs	r2, #3
 8005874:	f240 3107 	movw	r1, #775	@ 0x307
 8005878:	4618      	mov	r0, r3
 800587a:	f000 ff8f 	bl	800679c <CODEC_IO_Write>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]

  // For fs = 8 kHz, the MCLK is only 2 MHz, but a minimum of 4 MHz are
  // needed for proper operation of the codec. Use the FLL1 to double the
  // clock.
  if(AudioFreq == AUDIO_FREQUENCY_8K){
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800588e:	d176      	bne.n	800597e <wm8994_Init+0xf42>
	// FLL 1: double the MCLK from 2.048 MHz to 4.096 MHz
	counter += CODEC_IO_Write(DeviceAddr, 0x0220, 0x0000);	// disable FLL1
 8005890:	89fb      	ldrh	r3, [r7, #14]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800589a:	4618      	mov	r0, r3
 800589c:	f000 ff7e 	bl	800679c <CODEC_IO_Write>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0221, 0x1700);	// divide by 23
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80058b2:	f240 2121 	movw	r1, #545	@ 0x221
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 ff70 	bl	800679c <CODEC_IO_Write>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0222, 0x0000);
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2200      	movs	r2, #0
 80058cc:	f240 2122 	movw	r1, #546	@ 0x222
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 ff63 	bl	800679c <CODEC_IO_Write>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0223, 0x05C0);	// multiply by 46
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80058e8:	f240 2123 	movw	r1, #547	@ 0x223
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 ff55 	bl	800679c <CODEC_IO_Write>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0224, 0x0000);
 80058fc:	89fb      	ldrh	r3, [r7, #14]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8005906:	4618      	mov	r0, r3
 8005908:	f000 ff48 	bl	800679c <CODEC_IO_Write>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0220, 0x0001);	// enable FLL1
 8005916:	89fb      	ldrh	r3, [r7, #14]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2201      	movs	r2, #1
 800591c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005920:	4618      	mov	r0, r3
 8005922:	f000 ff3b 	bl	800679c <CODEC_IO_Write>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]

	counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0011);	// use FLL1
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2211      	movs	r2, #17
 8005936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800593a:	4618      	mov	r0, r3
 800593c:	f000 ff2e 	bl	800679c <CODEC_IO_Write>
 8005940:	4603      	mov	r3, r0
 8005942:	461a      	mov	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	61fb      	str	r3, [r7, #28]

  	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);  	// ADC oversample enable
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2202      	movs	r2, #2
 8005950:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ff21 	bl	800679c <CODEC_IO_Write>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	61fb      	str	r3, [r7, #28]
  	counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0005);	// AIF1 Sample Rate = 8 (KHz), ratio=512
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2205      	movs	r2, #5
 800596a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ff14 	bl	800679c <CODEC_IO_Write>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]


  // For fs = 11 kHz, the MCLK is only 2.8 MHz, but a minimum of 4 MHz are
  // needed for proper operation of the codec. Use the FLL1 to double the
  // clock.
  if(AudioFreq == AUDIO_FREQUENCY_11K){
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8005984:	4293      	cmp	r3, r2
 8005986:	d176      	bne.n	8005a76 <wm8994_Init+0x103a>
	// FLL 1: double the MCLK from 2.8224 MHz to 5.6448 MHz
	counter += CODEC_IO_Write(DeviceAddr, 0x0220, 0x0000);	// disable FLL1
 8005988:	89fb      	ldrh	r3, [r7, #14]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ff02 	bl	800679c <CODEC_IO_Write>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0221, 0x1100);	// divide by 17
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80059aa:	f240 2121 	movw	r1, #545	@ 0x221
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fef4 	bl	800679c <CODEC_IO_Write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0222, 0x0000);
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	f240 2122 	movw	r1, #546	@ 0x222
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fee7 	bl	800679c <CODEC_IO_Write>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0223, 0x0440);	// multiply by 34
 80059d8:	89fb      	ldrh	r3, [r7, #14]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80059e0:	f240 2123 	movw	r1, #547	@ 0x223
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fed9 	bl	800679c <CODEC_IO_Write>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0224, 0x0000);
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fecc 	bl	800679c <CODEC_IO_Write>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
	counter += CODEC_IO_Write(DeviceAddr, 0x0220, 0x0001);	// enable FLL1
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2201      	movs	r2, #1
 8005a14:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 febf 	bl	800679c <CODEC_IO_Write>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	61fb      	str	r3, [r7, #28]

	counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0011);	// use FLL1
 8005a28:	89fb      	ldrh	r3, [r7, #14]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2211      	movs	r2, #17
 8005a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 feb2 	bl	800679c <CODEC_IO_Write>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	61fb      	str	r3, [r7, #28]

  	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);  	// ADC oversample enable
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2202      	movs	r2, #2
 8005a48:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fea5 	bl	800679c <CODEC_IO_Write>
 8005a52:	4603      	mov	r3, r0
 8005a54:	461a      	mov	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]
  	counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0015);	// AIF1 Sample Rate = 11 (KHz), ratio=512
 8005a5c:	89fb      	ldrh	r3, [r7, #14]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2215      	movs	r2, #21
 8005a62:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fe98 	bl	800679c <CODEC_IO_Write>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	61fb      	str	r3, [r7, #28]
  }



  // readback some registers
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0001);
 8005a76:	89fb      	ldrh	r3, [r7, #14]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f009 f87b 	bl	800eb78 <AUDIO_IO_Read>
 8005a82:	4603      	mov	r3, r0
 8005a84:	82bb      	strh	r3, [r7, #20]
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0039);
 8005a86:	89fb      	ldrh	r3, [r7, #14]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2139      	movs	r1, #57	@ 0x39
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f009 f873 	bl	800eb78 <AUDIO_IO_Read>
 8005a92:	4603      	mov	r3, r0
 8005a94:	82bb      	strh	r3, [r7, #20]
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0200);
 8005a96:	89fb      	ldrh	r3, [r7, #14]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f009 f86a 	bl	800eb78 <AUDIO_IO_Read>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	82bb      	strh	r3, [r7, #20]
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0201);
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f240 2101 	movw	r1, #513	@ 0x201
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f009 f861 	bl	800eb78 <AUDIO_IO_Read>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	82bb      	strh	r3, [r7, #20]
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0208);
 8005aba:	89fb      	ldrh	r3, [r7, #14]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f009 f858 	bl	800eb78 <AUDIO_IO_Read>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	82bb      	strh	r3, [r7, #20]
  register_buffer = AUDIO_IO_Read(DeviceAddr, 0x0210);
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f009 f84f 	bl	800eb78 <AUDIO_IO_Read>
 8005ada:	4603      	mov	r3, r0
 8005adc:	82bb      	strh	r3, [r7, #20]


  /* Return communication control value */
  return counter;
 8005ade:	69fb      	ldr	r3, [r7, #28]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8005aec:	f009 f812 	bl	800eb14 <AUDIO_IO_DeInit>
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005afe:	f008 ffff 	bl	800eb00 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2100      	movs	r1, #0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f009 f835 	bl	800eb78 <AUDIO_IO_Read>
 8005b0e:	4603      	mov	r3, r0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	80fb      	strh	r3, [r7, #6]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f9d1 	bl	8005ed8 <wm8994_SetMute>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f9bc 	bl	8005ed8 <wm8994_SetMute>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fe13 	bl	800679c <CODEC_IO_Write>
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8005b80:	68fb      	ldr	r3, [r7, #12]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f99b 	bl	8005ed8 <wm8994_SetMute>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005baa:	68fb      	ldr	r3, [r7, #12]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	6039      	str	r1, [r7, #0]
 8005bbe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005bc4:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <wm8994_Stop+0xd8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05a      	beq.n	8005c82 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f981 	bl	8005ed8 <wm8994_SetMute>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d04e      	beq.n	8005c82 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bec:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fdd3 	bl	800679c <CODEC_IO_Write>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c08:	f240 4122 	movw	r1, #1058	@ 0x422
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fdc5 	bl	800679c <CODEC_IO_Write>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2200      	movs	r2, #0
 8005c22:	212d      	movs	r1, #45	@ 0x2d
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fdb9 	bl	800679c <CODEC_IO_Write>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2200      	movs	r2, #0
 8005c3a:	212e      	movs	r1, #46	@ 0x2e
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fdad 	bl	800679c <CODEC_IO_Write>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2200      	movs	r2, #0
 8005c52:	2105      	movs	r1, #5
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fda1 	bl	800679c <CODEC_IO_Write>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fd95 	bl	800679c <CODEC_IO_Write>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <wm8994_Stop+0xd8>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20030d1c 	.word	0x20030d1c

08005c90 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	460a      	mov	r2, r1
 8005c9a:	80fb      	strh	r3, [r7, #6]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005ca4:	797b      	ldrb	r3, [r7, #5]
 8005ca6:	2b64      	cmp	r3, #100	@ 0x64
 8005ca8:	d80b      	bhi.n	8005cc2 <wm8994_SetVolume+0x32>
 8005caa:	797a      	ldrb	r2, [r7, #5]
 8005cac:	4613      	mov	r3, r2
 8005cae:	019b      	lsls	r3, r3, #6
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	4a86      	ldr	r2, [pc, #536]	@ (8005ecc <wm8994_SetVolume+0x23c>)
 8005cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8005cb8:	1152      	asrs	r2, r2, #5
 8005cba:	17db      	asrs	r3, r3, #31
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e000      	b.n	8005cc4 <wm8994_SetVolume+0x34>
 8005cc2:	2364      	movs	r3, #100	@ 0x64
 8005cc4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005cc6:	4b82      	ldr	r3, [pc, #520]	@ (8005ed0 <wm8994_SetVolume+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 809b 	beq.w	8005e06 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cd4:	d93d      	bls.n	8005d52 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f8fc 	bl	8005ed8 <wm8994_SetMute>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f240 127f 	movw	r2, #383	@ 0x17f
 8005cf0:	211c      	movs	r1, #28
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fd52 	bl	800679c <CODEC_IO_Write>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f240 127f 	movw	r2, #383	@ 0x17f
 8005d0a:	211d      	movs	r1, #29
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fd45 	bl	800679c <CODEC_IO_Write>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f240 127f 	movw	r2, #383	@ 0x17f
 8005d24:	2126      	movs	r1, #38	@ 0x26
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fd38 	bl	800679c <CODEC_IO_Write>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f240 127f 	movw	r2, #383	@ 0x17f
 8005d3e:	2127      	movs	r1, #39	@ 0x27
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fd2b 	bl	800679c <CODEC_IO_Write>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e059      	b.n	8005e06 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005d52:	797b      	ldrb	r3, [r7, #5]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f8bb 	bl	8005ed8 <wm8994_SetMute>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e04c      	b.n	8005e06 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f8b1 	bl	8005ed8 <wm8994_SetMute>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	b2d8      	uxtb	r0, r3
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	211c      	movs	r1, #28
 8005d92:	f000 fd03 	bl	800679c <CODEC_IO_Write>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	b2d8      	uxtb	r0, r3
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	b21b      	sxth	r3, r3
 8005da8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8005dac:	b21b      	sxth	r3, r3
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	211d      	movs	r1, #29
 8005db4:	f000 fcf2 	bl	800679c <CODEC_IO_Write>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	b2d8      	uxtb	r0, r3
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	b21b      	sxth	r3, r3
 8005dca:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2126      	movs	r1, #38	@ 0x26
 8005dd6:	f000 fce1 	bl	800679c <CODEC_IO_Write>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	b2d8      	uxtb	r0, r3
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	2127      	movs	r1, #39	@ 0x27
 8005df8:	f000 fcd0 	bl	800679c <CODEC_IO_Write>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005e06:	4b33      	ldr	r3, [pc, #204]	@ (8005ed4 <wm8994_SetVolume+0x244>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d059      	beq.n	8005ec2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005e0e:	797b      	ldrb	r3, [r7, #5]
 8005e10:	2b63      	cmp	r3, #99	@ 0x63
 8005e12:	d80c      	bhi.n	8005e2e <wm8994_SetVolume+0x19e>
 8005e14:	797a      	ldrb	r2, [r7, #5]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ecc <wm8994_SetVolume+0x23c>)
 8005e20:	fb82 1203 	smull	r1, r2, r2, r3
 8005e24:	1152      	asrs	r2, r2, #5
 8005e26:	17db      	asrs	r3, r3, #31
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e000      	b.n	8005e30 <wm8994_SetVolume+0x1a0>
 8005e2e:	23ef      	movs	r3, #239	@ 0xef
 8005e30:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	b2d8      	uxtb	r0, r3
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005e48:	f000 fca8 	bl	800679c <CODEC_IO_Write>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	b2d8      	uxtb	r0, r3
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e62:	b21b      	sxth	r3, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	f240 4101 	movw	r1, #1025	@ 0x401
 8005e6c:	f000 fc96 	bl	800679c <CODEC_IO_Write>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	b2d8      	uxtb	r0, r3
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f240 4104 	movw	r1, #1028	@ 0x404
 8005e90:	f000 fc84 	bl	800679c <CODEC_IO_Write>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	b2d8      	uxtb	r0, r3
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f240 4105 	movw	r1, #1029	@ 0x405
 8005eb4:	f000 fc72 	bl	800679c <CODEC_IO_Write>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	51eb851f 	.word	0x51eb851f
 8005ed0:	20030d1c 	.word	0x20030d1c
 8005ed4:	20030d20 	.word	0x20030d20

08005ed8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8005ee8:	4b21      	ldr	r3, [pc, #132]	@ (8005f70 <wm8994_SetMute+0x98>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d039      	beq.n	8005f64 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d11c      	bne.n	8005f30 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005efe:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fc4a 	bl	800679c <CODEC_IO_Write>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1a:	f240 4122 	movw	r1, #1058	@ 0x422
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fc3c 	bl	800679c <CODEC_IO_Write>
 8005f24:	4603      	mov	r3, r0
 8005f26:	461a      	mov	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e019      	b.n	8005f64 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2200      	movs	r2, #0
 8005f36:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fc2e 	bl	800679c <CODEC_IO_Write>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f240 4122 	movw	r1, #1058	@ 0x422
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fc21 	bl	800679c <CODEC_IO_Write>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20030d1c 	.word	0x20030d1c

08005f74 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	80fb      	strh	r3, [r7, #6]
 8005f80:	4613      	mov	r3, r2
 8005f82:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005f88:	797b      	ldrb	r3, [r7, #5]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	f000 808c 	beq.w	80060a8 <wm8994_SetOutputMode+0x134>
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	f300 80cb 	bgt.w	800612c <wm8994_SetOutputMode+0x1b8>
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d002      	beq.n	8005fa0 <wm8994_SetOutputMode+0x2c>
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d042      	beq.n	8006024 <wm8994_SetOutputMode+0xb0>
 8005f9e:	e0c5      	b.n	800612c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8005fa8:	2105      	movs	r1, #5
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fbf6 	bl	800679c <CODEC_IO_Write>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f240 6101 	movw	r1, #1537	@ 0x601
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fbe9 	bl	800679c <CODEC_IO_Write>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f240 6102 	movw	r1, #1538	@ 0x602
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fbdc 	bl	800679c <CODEC_IO_Write>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f240 6104 	movw	r1, #1540	@ 0x604
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fbcf 	bl	800679c <CODEC_IO_Write>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2202      	movs	r2, #2
 800600e:	f240 6105 	movw	r1, #1541	@ 0x605
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fbc2 	bl	800679c <CODEC_IO_Write>
 8006018:	4603      	mov	r3, r0
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
    break;
 8006022:	e0c5      	b.n	80061b0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f240 3203 	movw	r2, #771	@ 0x303
 800602c:	2105      	movs	r1, #5
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fbb4 	bl	800679c <CODEC_IO_Write>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2201      	movs	r2, #1
 8006044:	f240 6101 	movw	r1, #1537	@ 0x601
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fba7 	bl	800679c <CODEC_IO_Write>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2201      	movs	r2, #1
 800605e:	f240 6102 	movw	r1, #1538	@ 0x602
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fb9a 	bl	800679c <CODEC_IO_Write>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2200      	movs	r2, #0
 8006078:	f240 6104 	movw	r1, #1540	@ 0x604
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fb8d 	bl	800679c <CODEC_IO_Write>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2200      	movs	r2, #0
 8006092:	f240 6105 	movw	r1, #1541	@ 0x605
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fb80 	bl	800679c <CODEC_IO_Write>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
    break;
 80060a6:	e083      	b.n	80061b0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80060b0:	2105      	movs	r1, #5
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fb72 	bl	800679c <CODEC_IO_Write>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2201      	movs	r2, #1
 80060c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fb65 	bl	800679c <CODEC_IO_Write>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2201      	movs	r2, #1
 80060e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fb58 	bl	800679c <CODEC_IO_Write>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2202      	movs	r2, #2
 80060fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fb4b 	bl	800679c <CODEC_IO_Write>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2202      	movs	r2, #2
 8006116:	f240 6105 	movw	r1, #1541	@ 0x605
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb3e 	bl	800679c <CODEC_IO_Write>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
    break;
 800612a:	e041      	b.n	80061b0 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f240 3203 	movw	r2, #771	@ 0x303
 8006134:	2105      	movs	r1, #5
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb30 	bl	800679c <CODEC_IO_Write>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2201      	movs	r2, #1
 800614c:	f240 6101 	movw	r1, #1537	@ 0x601
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fb23 	bl	800679c <CODEC_IO_Write>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2201      	movs	r2, #1
 8006166:	f240 6102 	movw	r1, #1538	@ 0x602
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fb16 	bl	800679c <CODEC_IO_Write>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2200      	movs	r2, #0
 8006180:	f240 6104 	movw	r1, #1540	@ 0x604
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fb09 	bl	800679c <CODEC_IO_Write>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2200      	movs	r2, #0
 800619a:	f240 6105 	movw	r1, #1541	@ 0x605
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fafc 	bl	800679c <CODEC_IO_Write>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
    break;    
 80061ae:	bf00      	nop
  }  
  return counter;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  /*  Clock Configurations */
   switch (AudioFreq)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	4aa1      	ldr	r2, [pc, #644]	@ (8006454 <wm8994_SetFrequency+0x298>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	f000 80b2 	beq.w	800633a <wm8994_SetFrequency+0x17e>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	4a9e      	ldr	r2, [pc, #632]	@ (8006454 <wm8994_SetFrequency+0x298>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	f200 8119 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f000 808c 	beq.w	8006304 <wm8994_SetFrequency+0x148>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80061f2:	4293      	cmp	r3, r2
 80061f4:	f200 810d 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80061fe:	4293      	cmp	r3, r2
 8006200:	f000 80ec 	beq.w	80063dc <wm8994_SetFrequency+0x220>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800620a:	4293      	cmp	r3, r2
 800620c:	f200 8101 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8006216:	d05a      	beq.n	80062ce <wm8994_SetFrequency+0x112>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800621e:	f200 80f8 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006228:	4293      	cmp	r3, r2
 800622a:	f000 80bc 	beq.w	80063a6 <wm8994_SetFrequency+0x1ea>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f245 6222 	movw	r2, #22050	@ 0x5622
 8006234:	4293      	cmp	r3, r2
 8006236:	f200 80ec 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006240:	d02a      	beq.n	8006298 <wm8994_SetFrequency+0xdc>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006248:	f200 80e3 	bhi.w	8006412 <wm8994_SetFrequency+0x256>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8006252:	d006      	beq.n	8006262 <wm8994_SetFrequency+0xa6>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800625a:	4293      	cmp	r3, r2
 800625c:	f000 8088 	beq.w	8006370 <wm8994_SetFrequency+0x1b4>
 8006260:	e0d7      	b.n	8006412 <wm8994_SetFrequency+0x256>
   {
   case  AUDIO_FREQUENCY_8K:

 	/* ADC oversample disable */
 	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0000);
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2200      	movs	r2, #0
 8006268:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fa95 	bl	800679c <CODEC_IO_Write>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

     /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2203      	movs	r2, #3
 8006282:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa88 	bl	800679c <CODEC_IO_Write>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
     break;
 8006296:	e0d7      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_16K:
     /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2233      	movs	r2, #51	@ 0x33
 800629e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fa7a 	bl	800679c <CODEC_IO_Write>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2202      	movs	r2, #2
 80062b8:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fa6d 	bl	800679c <CODEC_IO_Write>
 80062c2:	4603      	mov	r3, r0
 80062c4:	461a      	mov	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
     break;
 80062cc:	e0bc      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_32K:
     /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2263      	movs	r2, #99	@ 0x63
 80062d4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fa5f 	bl	800679c <CODEC_IO_Write>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2202      	movs	r2, #2
 80062ee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fa52 	bl	800679c <CODEC_IO_Write>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
     break;
 8006302:	e0a1      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_48K:
     /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006304:	88fb      	ldrh	r3, [r7, #6]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2283      	movs	r2, #131	@ 0x83
 800630a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fa44 	bl	800679c <CODEC_IO_Write>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2202      	movs	r2, #2
 8006324:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa37 	bl	800679c <CODEC_IO_Write>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
     break;
 8006338:	e086      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_96K:
     /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	22a3      	movs	r2, #163	@ 0xa3
 8006340:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fa29 	bl	800679c <CODEC_IO_Write>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2202      	movs	r2, #2
 800635a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fa1c 	bl	800679c <CODEC_IO_Write>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
     break;
 800636e:	e06b      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_11K:
     /* ADC oversample disable */
 	counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0000);
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2200      	movs	r2, #0
 8006376:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fa0e 	bl	800679c <CODEC_IO_Write>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

     /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2213      	movs	r2, #19
 8006390:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa01 	bl	800679c <CODEC_IO_Write>
 800639a:	4603      	mov	r3, r0
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
     break;
 80063a4:	e050      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_22K:
     /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2243      	movs	r2, #67	@ 0x43
 80063ac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f9f3 	bl	800679c <CODEC_IO_Write>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2202      	movs	r2, #2
 80063c6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f9e6 	bl	800679c <CODEC_IO_Write>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
     break;
 80063da:	e035      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   case  AUDIO_FREQUENCY_44K:
     /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2273      	movs	r2, #115	@ 0x73
 80063e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f9d8 	bl	800679c <CODEC_IO_Write>
 80063ec:	4603      	mov	r3, r0
 80063ee:	461a      	mov	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2202      	movs	r2, #2
 80063fc:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f9cb 	bl	800679c <CODEC_IO_Write>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
     break;
 8006410:	e01a      	b.n	8006448 <wm8994_SetFrequency+0x28c>

   default:
     /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
     counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2283      	movs	r2, #131	@ 0x83
 8006418:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f9bd 	bl	800679c <CODEC_IO_Write>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

     /* ADC oversample enable */
     counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2202      	movs	r2, #2
 8006432:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f9b0 	bl	800679c <CODEC_IO_Write>
 800643c:	4603      	mov	r3, r0
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
     break;
 8006446:	bf00      	nop
//  default:
//    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
//    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
//    break;
//  }
  return counter;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	00017700 	.word	0x00017700

08006458 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2200      	movs	r2, #0
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f994 	bl	800679c <CODEC_IO_Write>
 8006474:	4603      	mov	r3, r0
 8006476:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <wm8994_Reset+0x38>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <wm8994_Reset+0x3c>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]

  return counter;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20030d1c 	.word	0x20030d1c
 8006494:	20030d20 	.word	0x20030d20

08006498 <wm8994_SetOutputVolume_dB>:


// output volume from -57 dB to +6 dB
uint32_t wm8994_SetOutputVolume_dB(uint16_t DeviceAddr, float volume){
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	ed87 0a00 	vstr	s0, [r7]
 80064a4:	80fb      	strh	r3, [r7, #6]

  uint32_t counter = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t regVal = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]

  if(volume < -57){	// limit the volume
 80064ae:	edd7 7a00 	vldr	s15, [r7]
 80064b2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800660c <wm8994_SetOutputVolume_dB+0x174>
 80064b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	d501      	bpl.n	80064c4 <wm8994_SetOutputVolume_dB+0x2c>
	  volume = -57;
 80064c0:	4b53      	ldr	r3, [pc, #332]	@ (8006610 <wm8994_SetOutputVolume_dB+0x178>)
 80064c2:	603b      	str	r3, [r7, #0]
  }

  if(volume > 6){	// limit the volume
 80064c4:	edd7 7a00 	vldr	s15, [r7]
 80064c8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80064cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d4:	dd01      	ble.n	80064da <wm8994_SetOutputVolume_dB+0x42>
	  volume = 6;
 80064d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006614 <wm8994_SetOutputVolume_dB+0x17c>)
 80064d8:	603b      	str	r3, [r7, #0]

//  volume = volume  (CODEC_MIN_OUTPUT_VOLUE_dB);
  volume = volume / CODEC_MAX_OUTPUT_VOLUE_STEP;

  // set the volume
  regVal = (volume + 57);
 80064da:	edd7 7a00 	vldr	s15, [r7]
 80064de:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006618 <wm8994_SetOutputVolume_dB+0x180>
 80064e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ea:	ee17 3a90 	vmov	r3, s15
 80064ee:	60bb      	str	r3, [r7, #8]
  regVal = regVal | 0x0140; // unmute the channel
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80064f6:	60bb      	str	r3, [r7, #8]

  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fceb 	bl	8005ed8 <wm8994_SetMute>
 8006502:	4602      	mov	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  counter += CODEC_IO_Write(DeviceAddr, 0x001C, regVal);
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	b292      	uxth	r2, r2
 8006512:	211c      	movs	r1, #28
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f941 	bl	800679c <CODEC_IO_Write>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x001D, regVal);
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	b292      	uxth	r2, r2
 800652c:	211d      	movs	r1, #29
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f934 	bl	800679c <CODEC_IO_Write>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0026, regVal);
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	b292      	uxth	r2, r2
 8006546:	2126      	movs	r1, #38	@ 0x26
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f927 	bl	800679c <CODEC_IO_Write>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0027, regVal);
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	b292      	uxth	r2, r2
 8006560:	2127      	movs	r1, #39	@ 0x27
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f91a 	bl	800679c <CODEC_IO_Write>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]


  // set the digital volume to 0 dB
  regVal = 0x01C0;
 8006572:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8006576:	60bb      	str	r3, [r7, #8]
  counter += CODEC_IO_Write(DeviceAddr, 0x0402, regVal);
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	b292      	uxth	r2, r2
 8006580:	f240 4102 	movw	r1, #1026	@ 0x402
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f909 	bl	800679c <CODEC_IO_Write>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0403, regVal);
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	b292      	uxth	r2, r2
 800659c:	f240 4103 	movw	r1, #1027	@ 0x403
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 f8fb 	bl	800679c <CODEC_IO_Write>
 80065a6:	4603      	mov	r3, r0
 80065a8:	461a      	mov	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0406, regVal);
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	b292      	uxth	r2, r2
 80065b8:	f240 4106 	movw	r1, #1030	@ 0x406
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f8ed 	bl	800679c <CODEC_IO_Write>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0407, regVal);
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	b292      	uxth	r2, r2
 80065d4:	f240 4107 	movw	r1, #1031	@ 0x407
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 f8df 	bl	800679c <CODEC_IO_Write>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

 // counter += CODEC_IO_Write(DeviceAddr, 0x0620, 0x00);		// disable oversampling
  counter += CODEC_IO_Write(DeviceAddr, 0x0620, 0x03);		// enable oversampling
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2203      	movs	r2, #3
 80065ee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f8d2 	bl	800679c <CODEC_IO_Write>
 80065f8:	4603      	mov	r3, r0
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
//  readValue = AUDIO_IO_Read(DeviceAddr, 0x0620);

  return counter;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	c2640000 	.word	0xc2640000
 8006610:	c2640000 	.word	0xc2640000
 8006614:	40c00000 	.word	0x40c00000
 8006618:	42640000 	.word	0x42640000

0800661c <wm8994_SetInputVolume_dB>:




// input volume from -16.5 dB to +30 dB
uint32_t wm8994_SetInputVolume_dB(uint16_t DeviceAddr, float volume){
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	ed87 0a00 	vstr	s0, [r7]
 8006628:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t regVal = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

  if(volume < -16.5){	// limit the volume
 8006632:	edd7 7a00 	vldr	s15, [r7]
 8006636:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800678c <wm8994_SetInputVolume_dB+0x170>
 800663a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006642:	d501      	bpl.n	8006648 <wm8994_SetInputVolume_dB+0x2c>
	  volume = -16.5;
 8006644:	4b52      	ldr	r3, [pc, #328]	@ (8006790 <wm8994_SetInputVolume_dB+0x174>)
 8006646:	603b      	str	r3, [r7, #0]
  }

  if(volume > 30){	// limit the volume
 8006648:	edd7 7a00 	vldr	s15, [r7]
 800664c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8006650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006658:	dd01      	ble.n	800665e <wm8994_SetInputVolume_dB+0x42>
	  volume = 30;
 800665a:	4b4e      	ldr	r3, [pc, #312]	@ (8006794 <wm8994_SetInputVolume_dB+0x178>)
 800665c:	603b      	str	r3, [r7, #0]
  }

  volume = volume + 16.5;
 800665e:	edd7 7a00 	vldr	s15, [r7]
 8006662:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006798 <wm8994_SetInputVolume_dB+0x17c>
 8006666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800666a:	edc7 7a00 	vstr	s15, [r7]
  volume = volume / CODEC_MAX_INPUT_VOLUE_STEP;
 800666e:	ed97 7a00 	vldr	s14, [r7]
 8006672:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800667a:	edc7 7a00 	vstr	s15, [r7]

  // set the volume
  regVal = (uint32_t)round(volume);
 800667e:	edd7 7a00 	vldr	s15, [r7]
 8006682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006686:	eeb0 0b47 	vmov.f64	d0, d7
 800668a:	f00e ffc9 	bl	8015620 <round>
 800668e:	eeb0 7b40 	vmov.f64	d7, d0
 8006692:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006696:	ee17 3a90 	vmov	r3, s15
 800669a:	60bb      	str	r3, [r7, #8]
  regVal = regVal | 0x0140; // unmute the channel
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80066a2:	60bb      	str	r3, [r7, #8]

 // counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);

  counter += CODEC_IO_Write(DeviceAddr, 0x0018, regVal);
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	b292      	uxth	r2, r2
 80066ac:	2118      	movs	r1, #24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f874 	bl	800679c <CODEC_IO_Write>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0019, regVal);
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	b292      	uxth	r2, r2
 80066c6:	2119      	movs	r1, #25
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f867 	bl	800679c <CODEC_IO_Write>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x001A, regVal);
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	b292      	uxth	r2, r2
 80066e0:	211a      	movs	r1, #26
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f85a 	bl	800679c <CODEC_IO_Write>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x001B, regVal);
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	b292      	uxth	r2, r2
 80066fa:	211b      	movs	r1, #27
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f84d 	bl	800679c <CODEC_IO_Write>
 8006702:	4603      	mov	r3, r0
 8006704:	461a      	mov	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]


  // set the digital volume to 0 dB
  regVal = 0x01C0;
 800670c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8006710:	60bb      	str	r3, [r7, #8]
  counter += CODEC_IO_Write(DeviceAddr, 0x0400, regVal);
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	b292      	uxth	r2, r2
 800671a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f83c 	bl	800679c <CODEC_IO_Write>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0401, regVal);
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	b292      	uxth	r2, r2
 8006736:	f240 4101 	movw	r1, #1025	@ 0x401
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f82e 	bl	800679c <CODEC_IO_Write>
 8006740:	4603      	mov	r3, r0
 8006742:	461a      	mov	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0404, regVal);
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	b292      	uxth	r2, r2
 8006752:	f240 4104 	movw	r1, #1028	@ 0x404
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f820 	bl	800679c <CODEC_IO_Write>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  counter += CODEC_IO_Write(DeviceAddr, 0x0405, regVal);
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	b292      	uxth	r2, r2
 800676e:	f240 4105 	movw	r1, #1029	@ 0x405
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f812 	bl	800679c <CODEC_IO_Write>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  return counter;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	c1840000 	.word	0xc1840000
 8006790:	c1840000 	.word	0xc1840000
 8006794:	41f00000 	.word	0x41f00000
 8006798:	41840000 	.word	0x41840000

0800679c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	71fb      	strb	r3, [r7, #7]
 80067a6:	460b      	mov	r3, r1
 80067a8:	80bb      	strh	r3, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]

 AUDIO_IO_Write(Addr, Reg, Value);
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	88b9      	ldrh	r1, [r7, #4]
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f008 f9b3 	bl	800eb24 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	b2db      	uxtb	r3, r3
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80067d0:	4b08      	ldr	r3, [pc, #32]	@ (80067f4 <HAL_Init+0x28>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a07      	ldr	r2, [pc, #28]	@ (80067f4 <HAL_Init+0x28>)
 80067d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067da:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067dc:	2003      	movs	r0, #3
 80067de:	f000 f925 	bl	8006a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067e2:	200f      	movs	r0, #15
 80067e4:	f000 f808 	bl	80067f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80067e8:	f004 f974 	bl	800aad4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40023c00 	.word	0x40023c00

080067f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8006800:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <HAL_InitTick+0x30>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a09      	ldr	r2, [pc, #36]	@ (800682c <HAL_InitTick+0x34>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f942 	bl	8006a96 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8006812:	2200      	movs	r2, #0
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	f000 f912 	bl	8006a42 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2002067c 	.word	0x2002067c
 800682c:	10624dd3 	.word	0x10624dd3

08006830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  uwTick++;
 8006834:	4b04      	ldr	r3, [pc, #16]	@ (8006848 <HAL_IncTick+0x18>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a03      	ldr	r2, [pc, #12]	@ (8006848 <HAL_IncTick+0x18>)
 800683c:	6013      	str	r3, [r2, #0]
}
 800683e:	bf00      	nop
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	20030d24 	.word	0x20030d24

0800684c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return uwTick;
 8006850:	4b03      	ldr	r3, [pc, #12]	@ (8006860 <HAL_GetTick+0x14>)
 8006852:	681b      	ldr	r3, [r3, #0]
}
 8006854:	4618      	mov	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20030d24 	.word	0x20030d24

08006864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8006870:	f7ff ffec 	bl	800684c <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8006876:	bf00      	nop
 8006878:	f7ff ffe8 	bl	800684c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad2      	subs	r2, r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d3f7      	bcc.n	8006878 <HAL_Delay+0x14>
  {
  }
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <NVIC_SetPriorityGrouping>:
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068a4:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <NVIC_SetPriorityGrouping+0x40>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068b0:	4013      	ands	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <NVIC_SetPriorityGrouping+0x44>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068c2:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <NVIC_SetPriorityGrouping+0x40>)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	60d3      	str	r3, [r2, #12]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	e000ed00 	.word	0xe000ed00
 80068d8:	05fa0000 	.word	0x05fa0000

080068dc <NVIC_GetPriorityGrouping>:
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068e0:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <NVIC_GetPriorityGrouping+0x18>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 0307 	and.w	r3, r3, #7
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	e000ed00 	.word	0xe000ed00

080068f8 <NVIC_EnableIRQ>:
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	f003 021f 	and.w	r2, r3, #31
 8006908:	4907      	ldr	r1, [pc, #28]	@ (8006928 <NVIC_EnableIRQ+0x30>)
 800690a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2001      	movs	r0, #1
 8006912:	fa00 f202 	lsl.w	r2, r0, r2
 8006916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	e000e100 	.word	0xe000e100

0800692c <NVIC_SetPriority>:
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693c:	2b00      	cmp	r3, #0
 800693e:	da0b      	bge.n	8006958 <NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	490c      	ldr	r1, [pc, #48]	@ (8006978 <NVIC_SetPriority+0x4c>)
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	3b04      	subs	r3, #4
 800694e:	0112      	lsls	r2, r2, #4
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	440b      	add	r3, r1
 8006954:	761a      	strb	r2, [r3, #24]
}
 8006956:	e009      	b.n	800696c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	4907      	ldr	r1, [pc, #28]	@ (800697c <NVIC_SetPriority+0x50>)
 800695e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006962:	0112      	lsls	r2, r2, #4
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	440b      	add	r3, r1
 8006968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	e000ed00 	.word	0xe000ed00
 800697c:	e000e100 	.word	0xe000e100

08006980 <NVIC_EncodePriority>:
{
 8006980:	b480      	push	{r7}
 8006982:	b089      	sub	sp, #36	@ 0x24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f1c3 0307 	rsb	r3, r3, #7
 800699a:	2b04      	cmp	r3, #4
 800699c:	bf28      	it	cs
 800699e:	2304      	movcs	r3, #4
 80069a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3304      	adds	r3, #4
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d902      	bls.n	80069b0 <NVIC_EncodePriority+0x30>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3b03      	subs	r3, #3
 80069ae:	e000      	b.n	80069b2 <NVIC_EncodePriority+0x32>
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	401a      	ands	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069c8:	f04f 31ff 	mov.w	r1, #4294967295
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	fa01 f303 	lsl.w	r3, r1, r3
 80069d2:	43d9      	mvns	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d8:	4313      	orrs	r3, r2
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3724      	adds	r7, #36	@ 0x24
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f8:	d301      	bcc.n	80069fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069fa:	2301      	movs	r3, #1
 80069fc:	e00f      	b.n	8006a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006a28 <SysTick_Config+0x40>)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a06:	210f      	movs	r1, #15
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	f7ff ff8e 	bl	800692c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a10:	4b05      	ldr	r3, [pc, #20]	@ (8006a28 <SysTick_Config+0x40>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a16:	4b04      	ldr	r3, [pc, #16]	@ (8006a28 <SysTick_Config+0x40>)
 8006a18:	2207      	movs	r2, #7
 8006a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	e000e010 	.word	0xe000e010

08006a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff2d 	bl	8006894 <NVIC_SetPriorityGrouping>
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	4603      	mov	r3, r0
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a54:	f7ff ff42 	bl	80068dc <NVIC_GetPriorityGrouping>
 8006a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	6978      	ldr	r0, [r7, #20]
 8006a60:	f7ff ff8e 	bl	8006980 <NVIC_EncodePriority>
 8006a64:	4602      	mov	r2, r0
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ff5d 	bl	800692c <NVIC_SetPriority>
}
 8006a72:	bf00      	nop
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	4603      	mov	r3, r0
 8006a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff ff35 	bl	80068f8 <NVIC_EnableIRQ>
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff ffa2 	bl	80069e8 <SysTick_Config>
 8006aa4:	4603      	mov	r3, r0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006ab4:	f3bf 8f5f 	dmb	sy
}
 8006ab8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006aba:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <HAL_MPU_Disable+0x28>)
 8006abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abe:	4a06      	ldr	r2, [pc, #24]	@ (8006ad8 <HAL_MPU_Disable+0x28>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006ac6:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <HAL_MPU_Disable+0x2c>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	605a      	str	r2, [r3, #4]
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000ed00 	.word	0xe000ed00
 8006adc:	e000ed90 	.word	0xe000ed90

08006ae0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8006b18 <HAL_MPU_Enable+0x38>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006af2:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <HAL_MPU_Enable+0x3c>)
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	4a09      	ldr	r2, [pc, #36]	@ (8006b1c <HAL_MPU_Enable+0x3c>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006afc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006afe:	f3bf 8f4f 	dsb	sy
}
 8006b02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b04:	f3bf 8f6f 	isb	sy
}
 8006b08:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	e000ed90 	.word	0xe000ed90
 8006b1c:	e000ed00 	.word	0xe000ed00

08006b20 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	785a      	ldrb	r2, [r3, #1]
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba4 <HAL_MPU_ConfigRegion+0x84>)
 8006b2e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d029      	beq.n	8006b8c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006b38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba4 <HAL_MPU_ConfigRegion+0x84>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7b1b      	ldrb	r3, [r3, #12]
 8006b44:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7adb      	ldrb	r3, [r3, #11]
 8006b4a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7a9b      	ldrb	r3, [r3, #10]
 8006b52:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7b5b      	ldrb	r3, [r3, #13]
 8006b5a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7b9b      	ldrb	r3, [r3, #14]
 8006b62:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7bdb      	ldrb	r3, [r3, #15]
 8006b6a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7a5b      	ldrb	r3, [r3, #9]
 8006b72:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7a1b      	ldrb	r3, [r3, #8]
 8006b7a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b7c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b84:	4a07      	ldr	r2, [pc, #28]	@ (8006ba4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b86:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b88:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006b8a:	e005      	b.n	8006b98 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <HAL_MPU_ConfigRegion+0x84>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006b92:	4b04      	ldr	r3, [pc, #16]	@ (8006ba4 <HAL_MPU_ConfigRegion+0x84>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	e000ed90 	.word	0xe000ed90

08006ba8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
 8006bc8:	e066      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bd8:	d002      	beq.n	8006be0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
 8006bde:	e05b      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10e      	bne.n	8006c06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d002      	beq.n	8006c06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
 8006c04:	e048      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10c      	bne.n	8006c28 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d108      	bne.n	8006c28 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	d102      	bne.n	8006c28 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
 8006c26:	e037      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d004      	beq.n	8006c3c <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d12b      	bne.n	8006c94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	4a18      	ldr	r2, [pc, #96]	@ (8006ca4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8006c42:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	4a17      	ldr	r2, [pc, #92]	@ (8006ca8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8006c4a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8006c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c56:	d101      	bne.n	8006c5c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8006c58:	4a14      	ldr	r2, [pc, #80]	@ (8006cac <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8006c5a:	e000      	b.n	8006c5e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8006c5c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	331c      	adds	r3, #28
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f000 f9a4 	bl	8006fc0 <HAL_DMA_Start_IT>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d006      	beq.n	8006c8c <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	22ff      	movs	r2, #255	@ 0xff
 8006c82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006c8a:	e005      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f846 	bl	8006d1e <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006c92:	e001      	b.n	8006c98 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08006ce1 	.word	0x08006ce1
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006cc5 	.word	0x08006cc5

08006cb0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma : DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f008 fe46 	bl	800f964 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma : DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f008 fc68 	bl	800f5c4 <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma : DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ffcd 	bl	8006cb0 <HAL_DFSDM_FilterErrorCallback>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d108      	bne.n	8006d40 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e033      	b.n	8006da8 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0201 	bic.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006d5e:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d116      	bne.n	8006da8 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0202 	orr.w	r2, r2, #2
 8006d90:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d102      	bne.n	8006da2 <DFSDM_RegConvStart+0x84>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	e000      	b.n	8006da4 <DFSDM_RegConvStart+0x86>
 8006da2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <DFSDM_RegConvStart+0x98>
 8006db2:	2202      	movs	r2, #2
 8006db4:	e000      	b.n	8006db8 <DFSDM_RegConvStart+0x9a>
 8006db6:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006dd8:	f7ff fd38 	bl	800684c <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e099      	b.n	8006f1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e08:	e00f      	b.n	8006e2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e0a:	f7ff fd1f 	bl	800684c <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d908      	bls.n	8006e2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2203      	movs	r2, #3
 8006e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e078      	b.n	8006f1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e8      	bne.n	8006e0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <HAL_DMA_Init+0x158>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d107      	bne.n	8006e94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d117      	bne.n	8006eee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fac7 	bl	8007464 <DMA_CheckFifoParam>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d008      	beq.n	8006eee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2240      	movs	r2, #64	@ 0x40
 8006ee0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006eea:	2301      	movs	r3, #1
 8006eec:	e016      	b.n	8006f1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa7e 	bl	80073f8 <DMA_CalcBaseAndBitshift>
 8006efc:	4603      	mov	r3, r0
 8006efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f04:	223f      	movs	r2, #63	@ 0x3f
 8006f06:	409a      	lsls	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	e010803f 	.word	0xe010803f

08006f28 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e03e      	b.n	8006fb8 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d101      	bne.n	8006f4a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006f46:	2302      	movs	r3, #2
 8006f48:	e036      	b.n	8006fb8 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2200      	movs	r2, #0
 8006f68:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2221      	movs	r2, #33	@ 0x21
 8006f88:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa34 	bl	80073f8 <DMA_CalcBaseAndBitshift>
 8006f90:	4603      	mov	r3, r0
 8006f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f98:	223f      	movs	r2, #63	@ 0x3f
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_DMA_Start_IT+0x26>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e048      	b.n	8007078 <HAL_DMA_Start_IT+0xb8>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d137      	bne.n	800706a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f9c4 	bl	800739c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007018:	223f      	movs	r2, #63	@ 0x3f
 800701a:	409a      	lsls	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0216 	orr.w	r2, r2, #22
 800702e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800703e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0208 	orr.w	r2, r2, #8
 8007056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e005      	b.n	8007076 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007072:	2302      	movs	r3, #2
 8007074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800708c:	4b8e      	ldr	r3, [pc, #568]	@ (80072c8 <HAL_DMA_IRQHandler+0x248>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a8e      	ldr	r2, [pc, #568]	@ (80072cc <HAL_DMA_IRQHandler+0x24c>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	0a9b      	lsrs	r3, r3, #10
 8007098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070aa:	2208      	movs	r2, #8
 80070ac:	409a      	lsls	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01a      	beq.n	80070ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0204 	bic.w	r2, r2, #4
 80070d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d8:	2208      	movs	r2, #8
 80070da:	409a      	lsls	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e4:	f043 0201 	orr.w	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f0:	4a77      	ldr	r2, [pc, #476]	@ (80072d0 <HAL_DMA_IRQHandler+0x250>)
 80070f2:	409a      	lsls	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710e:	4a70      	ldr	r2, [pc, #448]	@ (80072d0 <HAL_DMA_IRQHandler+0x250>)
 8007110:	409a      	lsls	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711a:	f043 0202 	orr.w	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007126:	4a6b      	ldr	r2, [pc, #428]	@ (80072d4 <HAL_DMA_IRQHandler+0x254>)
 8007128:	409a      	lsls	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007144:	4a63      	ldr	r2, [pc, #396]	@ (80072d4 <HAL_DMA_IRQHandler+0x254>)
 8007146:	409a      	lsls	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	f043 0204 	orr.w	r2, r3, #4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800715c:	2210      	movs	r2, #16
 800715e:	409a      	lsls	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4013      	ands	r3, r2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d043      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d03c      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800717a:	2210      	movs	r2, #16
 800717c:	409a      	lsls	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d018      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d108      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d024      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	e01f      	b.n	80071f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01b      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
 80071c0:	e016      	b.n	80071f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0208 	bic.w	r2, r2, #8
 80071de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f4:	2220      	movs	r2, #32
 80071f6:	409a      	lsls	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8093 	beq.w	8007328 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 808b 	beq.w	8007328 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007216:	2220      	movs	r2, #32
 8007218:	409a      	lsls	r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b05      	cmp	r3, #5
 8007228:	d137      	bne.n	800729a <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0216 	bic.w	r2, r2, #22
 8007238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <HAL_DMA_IRQHandler+0x1da>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0208 	bic.w	r2, r2, #8
 8007268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726e:	223f      	movs	r2, #63	@ 0x3f
 8007270:	409a      	lsls	r2, r3
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8082 	beq.w	8007394 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
        }
        return;
 8007298:	e07c      	b.n	8007394 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d020      	beq.n	80072ea <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d110      	bne.n	80072d8 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d034      	beq.n	8007328 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	e02f      	b.n	8007328 <HAL_DMA_IRQHandler+0x2a8>
 80072c8:	2002067c 	.word	0x2002067c
 80072cc:	1b4e81b5 	.word	0x1b4e81b5
 80072d0:	00800001 	.word	0x00800001
 80072d4:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d023      	beq.n	8007328 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
 80072e8:	e01e      	b.n	8007328 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10f      	bne.n	8007318 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0210 	bic.w	r2, r2, #16
 8007306:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800732c:	2b00      	cmp	r3, #0
 800732e:	d032      	beq.n	8007396 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d022      	beq.n	8007382 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2205      	movs	r2, #5
 8007340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0201 	bic.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	3301      	adds	r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	429a      	cmp	r2, r3
 800735e:	d307      	bcc.n	8007370 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f2      	bne.n	8007354 <HAL_DMA_IRQHandler+0x2d4>
 800736e:	e000      	b.n	8007372 <HAL_DMA_IRQHandler+0x2f2>
          break;
 8007370:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	e000      	b.n	8007396 <HAL_DMA_IRQHandler+0x316>
        return;
 8007394:	bf00      	nop
    }
  }
}
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b40      	cmp	r3, #64	@ 0x40
 80073c8:	d108      	bne.n	80073dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073da:	e007      	b.n	80073ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	60da      	str	r2, [r3, #12]
}
 80073ec:	bf00      	nop
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3b10      	subs	r3, #16
 8007408:	4a13      	ldr	r2, [pc, #76]	@ (8007458 <DMA_CalcBaseAndBitshift+0x60>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	091b      	lsrs	r3, r3, #4
 8007410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007412:	4a12      	ldr	r2, [pc, #72]	@ (800745c <DMA_CalcBaseAndBitshift+0x64>)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d908      	bls.n	8007438 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <DMA_CalcBaseAndBitshift+0x68>)
 800742e:	4013      	ands	r3, r2
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	659a      	str	r2, [r3, #88]	@ 0x58
 8007436:	e006      	b.n	8007446 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	4b08      	ldr	r3, [pc, #32]	@ (8007460 <DMA_CalcBaseAndBitshift+0x68>)
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	aaaaaaab 	.word	0xaaaaaaab
 800745c:	0801b0e4 	.word	0x0801b0e4
 8007460:	fffffc00 	.word	0xfffffc00

08007464 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11f      	bne.n	80074be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d856      	bhi.n	8007532 <DMA_CheckFifoParam+0xce>
 8007484:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <DMA_CheckFifoParam+0x28>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	0800749d 	.word	0x0800749d
 8007490:	080074af 	.word	0x080074af
 8007494:	0800749d 	.word	0x0800749d
 8007498:	08007533 	.word	0x08007533
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d046      	beq.n	8007536 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074ac:	e043      	b.n	8007536 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80074b6:	d140      	bne.n	800753a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074bc:	e03d      	b.n	800753a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c6:	d121      	bne.n	800750c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d837      	bhi.n	800753e <DMA_CheckFifoParam+0xda>
 80074ce:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <DMA_CheckFifoParam+0x70>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	080074eb 	.word	0x080074eb
 80074dc:	080074e5 	.word	0x080074e5
 80074e0:	080074fd 	.word	0x080074fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
      break;
 80074e8:	e030      	b.n	800754c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d025      	beq.n	8007542 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074fa:	e022      	b.n	8007542 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007504:	d11f      	bne.n	8007546 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800750a:	e01c      	b.n	8007546 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d903      	bls.n	800751a <DMA_CheckFifoParam+0xb6>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b03      	cmp	r3, #3
 8007516:	d003      	beq.n	8007520 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007518:	e018      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
      break;
 800751e:	e015      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00e      	beq.n	800754a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	73fb      	strb	r3, [r7, #15]
      break;
 8007530:	e00b      	b.n	800754a <DMA_CheckFifoParam+0xe6>
      break;
 8007532:	bf00      	nop
 8007534:	e00a      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;
 8007536:	bf00      	nop
 8007538:	e008      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;
 800753a:	bf00      	nop
 800753c:	e006      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;
 800753e:	bf00      	nop
 8007540:	e004      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;
 8007542:	bf00      	nop
 8007544:	e002      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;   
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <DMA_CheckFifoParam+0xe8>
      break;
 800754a:	bf00      	nop
    }
  } 
  
  return status; 
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop

0800755c <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e067      	b.n	800763e <HAL_DMA2D_Init+0xe2>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f862 	bl	800764c <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	f023 0107 	bic.w	r1, r3, #7
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c2:	4b21      	ldr	r3, [pc, #132]	@ (8007648 <HAL_DMA2D_Init+0xec>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	68d1      	ldr	r1, [r2, #12]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6413      	str	r3, [r2, #64]	@ 0x40

#if defined (DMA2D_OPFCCR_AI)
  /* DMA2D OPFCCR AI fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_AI, (hdma2d->Init.AlphaInverted << DMA2D_POSITION_OPFCCR_AI));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d8:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80075e4:	60fa      	str	r2, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	fa92 f2a2 	rbit	r2, r2
 80075ec:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	fab2 f282 	clz	r2, r2
 80075f4:	fa03 f202 	lsl.w	r2, r3, r2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* DMA2D_OPFCCR_AI */ 
  
#if defined (DMA2D_OPFCCR_RBS) 
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007606:	f423 1100 	bic.w	r1, r3, #2097152	@ 0x200000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	fa92 f2a2 	rbit	r2, r2
 800761a:	613a      	str	r2, [r7, #16]
  return(result);
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	fab2 f282 	clz	r2, r2
 8007622:	fa03 f202 	lsl.w	r2, r3, r2
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	ffffc000 	.word	0xffffc000

0800764c <HAL_DMA2D_MspInit>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af02      	add	r7, sp, #8
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_DMA2D_Start+0x1c>
 8007678:	2302      	movs	r3, #2
 800767a:	e018      	b.n	80076ae <HAL_DMA2D_Start+0x4e>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f9cc 	bl	8007a34 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 80076c4:	2300      	movs	r3, #0
 80076c6:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d056      	beq.n	8007784 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80076d6:	f7ff f8b9 	bl	800684c <HAL_GetTick>
 80076da:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80076dc:	e04b      	b.n	8007776 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d023      	beq.n	8007738 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fe:	f043 0202 	orr.w	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007714:	f043 0201 	orr.w	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2221      	movs	r2, #33	@ 0x21
 8007722:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0a2      	b.n	800787e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d01a      	beq.n	8007776 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <HAL_DMA2D_PollForTransfer+0xa0>
 8007746:	f7ff f881 	bl	800684c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d20f      	bcs.n	8007776 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2203      	movs	r2, #3
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
           
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e083      	b.n	800787e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0ac      	beq.n	80076de <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800779c:	2b00      	cmp	r3, #0
 800779e:	d061      	beq.n	8007864 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80077a0:	f7ff f854 	bl	800684c <HAL_GetTick>
 80077a4:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80077a6:	e056      	b.n	8007856 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d02e      	beq.n	8007818 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c8:	f043 0204 	orr.w	r2, r3, #4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	655a      	str	r2, [r3, #84]	@ 0x54
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f4:	f043 0201 	orr.w	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2229      	movs	r2, #41	@ 0x29
 8007802:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          
        return HAL_ERROR;      
 8007814:	2301      	movs	r3, #1
 8007816:	e032      	b.n	800787e <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d01a      	beq.n	8007856 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_DMA2D_PollForTransfer+0x180>
 8007826:	f7ff f811 	bl	800684c <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d20f      	bcs.n	8007856 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	655a      	str	r2, [r3, #84]	@ 0x54
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2203      	movs	r2, #3
 8007846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e013      	b.n	800787e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0a1      	beq.n	80077a8 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2212      	movs	r2, #18
 800786a:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8007888:	b480      	push	{r7}
 800788a:	b08f      	sub	sp, #60	@ 0x3c
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	3320      	adds	r3, #32
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	633b      	str	r3, [r7, #48]	@ 0x30
  
  uint32_t regMask = 0, regValue = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a8:	2300      	movs	r3, #0
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_DMA2D_ConfigLayer+0x3a>
 80078be:	2302      	movs	r3, #2
 80078c0:	e0af      	b.n	8007a22 <HAL_DMA2D_ConfigLayer+0x19a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80078de:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	fa91 f1a1 	rbit	r1, r1
 80078e6:	6179      	str	r1, [r7, #20]
  return(result);
 80078e8:	6979      	ldr	r1, [r7, #20]
 80078ea:	fab1 f181 	clz	r1, r1
 80078ee:	408b      	lsls	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80078f4:	4b4e      	ldr	r3, [pc, #312]	@ (8007a30 <HAL_DMA2D_ConfigLayer+0x1a8>)
 80078f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
#if defined (DMA2D_FGPFCCR_AI) && defined (DMA2D_BGPFCCR_AI)
  regValue |= (pLayerCfg->AlphaInverted << DMA2D_POSITION_BGPFCCR_AI);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007900:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007902:	6a3a      	ldr	r2, [r7, #32]
 8007904:	fa92 f2a2 	rbit	r2, r2
 8007908:	61fa      	str	r2, [r7, #28]
  return(result);
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	fab2 f282 	clz	r2, r2
 8007910:	4093      	lsls	r3, r2
 8007912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007914:	4313      	orrs	r3, r2
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
  regMask  |= DMA2D_BGPFCCR_AI;  
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800791e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* (DMA2D_FGPFCCR_AI) && (DMA2D_BGPFCCR_AI)  */ 
  
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_POSITION_BGPFCCR_RBS);
 8007920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007928:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800792a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792c:	fa92 f2a2 	rbit	r2, r2
 8007930:	627a      	str	r2, [r7, #36]	@ 0x24
  return(result);
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	fab2 f282 	clz	r2, r2
 8007938:	4093      	lsls	r3, r2
 800793a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800793c:	4313      	orrs	r3, r2
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
  regMask  |= DMA2D_BGPFCCR_RBS;  
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007946:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b0a      	cmp	r3, #10
 800794e:	d003      	beq.n	8007958 <HAL_DMA2D_ConfigLayer+0xd0>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b09      	cmp	r3, #9
 8007956:	d107      	bne.n	8007968 <HAL_DMA2D_ConfigLayer+0xe0>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007962:	4313      	orrs	r3, r2
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
 8007966:	e00f      	b.n	8007988 <HAL_DMA2D_ConfigLayer+0x100>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8007970:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	fa92 f2a2 	rbit	r2, r2
 8007978:	60fa      	str	r2, [r7, #12]
  return(result);
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	fab2 f282 	clz	r2, r2
 8007980:	4093      	lsls	r3, r2
 8007982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007984:	4313      	orrs	r3, r2
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d120      	bne.n	80079d0 <HAL_DMA2D_ConfigLayer+0x148>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007996:	43db      	mvns	r3, r3
 8007998:	ea02 0103 	and.w	r1, r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079a2:	430a      	orrs	r2, r1
 80079a4:	625a      	str	r2, [r3, #36]	@ 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b0a      	cmp	r3, #10
 80079b6:	d003      	beq.n	80079c0 <HAL_DMA2D_ConfigLayer+0x138>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b09      	cmp	r3, #9
 80079be:	d127      	bne.n	8007a10 <HAL_DMA2D_ConfigLayer+0x188>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80079ce:	e01f      	b.n	8007a10 <HAL_DMA2D_ConfigLayer+0x188>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69da      	ldr	r2, [r3, #28]
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	43db      	mvns	r3, r3
 80079da:	ea02 0103 	and.w	r1, r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079e4:	430a      	orrs	r2, r1
 80079e6:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b0a      	cmp	r3, #10
 80079f8:	d003      	beq.n	8007a02 <HAL_DMA2D_ConfigLayer+0x17a>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d106      	bne.n	8007a10 <HAL_DMA2D_ConfigLayer+0x188>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007a0e:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	373c      	adds	r7, #60	@ 0x3c
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	ff03000f 	.word	0xff03000f

08007a34 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8007a34:	b480      	push	{r7}
 8007a36:	b08d      	sub	sp, #52	@ 0x34
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t tmp1 = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t tmp2 = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp3 = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	623b      	str	r3, [r7, #32]
  uint32_t tmp4 = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007a60:	4b4d      	ldr	r3, [pc, #308]	@ (8007b98 <DMA2D_SetConfig+0x164>)
 8007a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	fa93 f3a3 	rbit	r3, r3
 8007a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	fab3 f383 	clz	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	fa03 f202 	lsl.w	r2, r3, r2
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a96:	d174      	bne.n	8007b82 <DMA2D_SetConfig+0x14e>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007aae:	623b      	str	r3, [r7, #32]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	61fb      	str	r3, [r7, #28]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d108      	bne.n	8007ad0 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007abe:	6a3a      	ldr	r2, [r7, #32]
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ace:	e053      	b.n	8007b78 <DMA2D_SetConfig+0x144>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d106      	bne.n	8007ae6 <DMA2D_SetConfig+0xb2>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	4313      	orrs	r3, r2
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae4:	e048      	b.n	8007b78 <DMA2D_SetConfig+0x144>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d111      	bne.n	8007b12 <DMA2D_SetConfig+0xde>
    {
      tmp2 = (tmp2 >> 19);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	0cdb      	lsrs	r3, r3, #19
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
      tmp3 = (tmp3 >> 10);
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	0a9b      	lsrs	r3, r3, #10
 8007af8:	623b      	str	r3, [r7, #32]
      tmp4 = (tmp4 >> 3 );
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	61fb      	str	r3, [r7, #28]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	02db      	lsls	r3, r3, #11
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b10:	e032      	b.n	8007b78 <DMA2D_SetConfig+0x144>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d117      	bne.n	8007b4a <DMA2D_SetConfig+0x116>
    { 
      tmp1 = (tmp1 >> 31);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	0fdb      	lsrs	r3, r3, #31
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp2 = (tmp2 >> 19);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	0cdb      	lsrs	r3, r3, #19
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
      tmp3 = (tmp3 >> 11);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	0adb      	lsrs	r3, r3, #11
 8007b2a:	623b      	str	r3, [r7, #32]
      tmp4 = (tmp4 >> 3 );      
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	61fb      	str	r3, [r7, #28]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	029b      	lsls	r3, r3, #10
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	03db      	lsls	r3, r3, #15
 8007b40:	4313      	orrs	r3, r2
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b48:	e016      	b.n	8007b78 <DMA2D_SetConfig+0x144>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	0f1b      	lsrs	r3, r3, #28
 8007b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp2 = (tmp2 >> 20);
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	0d1b      	lsrs	r3, r3, #20
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
      tmp3 = (tmp3 >> 12);
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	0b1b      	lsrs	r3, r3, #12
 8007b5a:	623b      	str	r3, [r7, #32]
      tmp4 = (tmp4 >> 4 );
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	091b      	lsrs	r3, r3, #4
 8007b60:	61fb      	str	r3, [r7, #28]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	011a      	lsls	r2, r3, #4
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	031b      	lsls	r3, r3, #12
 8007b70:	4313      	orrs	r3, r2
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007b80:	e003      	b.n	8007b8a <DMA2D_SetConfig+0x156>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	60da      	str	r2, [r3, #12]
}
 8007b8a:	bf00      	nop
 8007b8c:	3734      	adds	r7, #52	@ 0x34
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	3fff0000 	.word	0x3fff0000

08007b9c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID<<6) | (Data0<<8) | (Data1<<16));
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	019a      	lsls	r2, r3, #6
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <HAL_DSI_Init>:
  * @param  PLLInit: pointer to a DSI_PLLInitTypeDef structure that contains
  *               the PLL Clock structure definition for the DSI.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  uint32_t unitIntervalx4 = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
  uint32_t tempIDF = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DSI handle allocation */
  if(hdsi == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_DSI_Init+0x20>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e0f0      	b.n	8007dd2 <HAL_DSI_Init+0x202>
  assert_param(IS_DSI_PLL_IDF(PLLInit->PLLIDF));
  assert_param(IS_DSI_PLL_ODF(PLLInit->PLLODF));
  assert_param(IS_DSI_AUTO_CLKLANE_CONTROL(hdsi->Init.AutomaticClockLaneControl));
  assert_param(IS_DSI_NUMBER_OF_LANES(hdsi->Init.NumberOfLanes));
  
  if(hdsi->State == HAL_DSI_STATE_RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7c5b      	ldrb	r3, [r3, #17]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <HAL_DSI_Init+0x30>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f93f 	bl	8007e7e <HAL_DSI_MspInit>
  }
  
  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2203      	movs	r2, #3
 8007c04:	745a      	strb	r2, [r3, #17]
  
  /**************** Turn on the regulator and enable the DSI PLL ****************/
  
    /* Enable the regulator */
    __HAL_DSI_REG_ENABLE(hdsi);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007c16:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    
	/* Get tick */ 
    tickstart = HAL_GetTick();
 8007c1a:	f7fe fe17 	bl	800684c <HAL_GetTick>
 8007c1e:	6178      	str	r0, [r7, #20]
	
    /* Wait until the regulator is ready */
	while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == RESET)
 8007c20:	e009      	b.n	8007c36 <HAL_DSI_Init+0x66>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007c22:	f7fe fe13 	bl	800684c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c30:	d901      	bls.n	8007c36 <HAL_DSI_Init+0x66>
      {
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e0cd      	b.n	8007dd2 <HAL_DSI_Init+0x202>
	while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8007c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0ed      	beq.n	8007c22 <HAL_DSI_Init+0x52>
      }
    }
    
    /* Set the PLL division factors */
    hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b62      	ldr	r3, [pc, #392]	@ (8007ddc <HAL_DSI_Init+0x20c>)
 8007c54:	400b      	ands	r3, r1
 8007c56:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
    hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV)<<2) | ((PLLInit->PLLIDF)<<11) | ((PLLInit->PLLODF)<<16));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	009a      	lsls	r2, r3, #2
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	02db      	lsls	r3, r3, #11
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    
    /* Enable the DSI PLL */
    __HAL_DSI_PLL_ENABLE(hdsi);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0201 	orr.w	r2, r2, #1
 8007c92:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    
	/* Get tick */ 
    tickstart = HAL_GetTick();
 8007c96:	f7fe fdd9 	bl	800684c <HAL_GetTick>
 8007c9a:	6178      	str	r0, [r7, #20]
	
    /* Wait for the lock of the PLL */
    while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == RESET)
 8007c9c:	e009      	b.n	8007cb2 <HAL_DSI_Init+0xe2>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007c9e:	f7fe fdd5 	bl	800684c <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cac:	d901      	bls.n	8007cb2 <HAL_DSI_Init+0xe2>
      {
        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e08f      	b.n	8007dd2 <HAL_DSI_Init+0x202>
    while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8007cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ed      	beq.n	8007c9e <HAL_DSI_Init+0xce>
    }
  
  /*************************** Set the PHY parameters ***************************/
  
    /* D-PHY clock and digital enable*/
    hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0206 	orr.w	r2, r2, #6
 8007cd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    
    /* Clock lane configuration */
    hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0203 	bic.w	r2, r2, #3
 8007ce6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0201 	orr.w	r2, r2, #1
 8007d00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    
    /* Configure the number of active data lanes */
    hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0203 	bic.w	r2, r2, #3
 8007d14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  
  /************************ Set the DSI clock parameters ************************/
  
    /* Set the TX escape clock division factor */
    hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007d3c:	609a      	str	r2, [r3, #8]
    hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6899      	ldr	r1, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]
    
    /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
    /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
    /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
    tempIDF = (PLLInit->PLLIDF > 0) ? PLLInit->PLLIDF : 1;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_DSI_Init+0x18e>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	e000      	b.n	8007d60 <HAL_DSI_Init+0x190>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
    unitIntervalx4 = (4000000 * tempIDF * (1 << PLLInit->PLLODF)) / ((HSE_VALUE/1000) * PLLInit->PLLNDIV);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4a1e      	ldr	r2, [pc, #120]	@ (8007de0 <HAL_DSI_Init+0x210>)
 8007d66:	fb03 f202 	mul.w	r2, r3, r2
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	409a      	lsls	r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	613b      	str	r3, [r7, #16]
	
    /* Set the bit period in high-speed mode */
    hdsi->Instance->WPCR[0] &= ~DSI_WPCR0_UIX4;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007d92:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    hdsi->Instance->WPCR[0] |= unitIntervalx4;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  
  /****************************** Error management *****************************/
  
    /* Disable all error interrupts and reset the Error Mask */
    hdsi->Instance->IER[0] = 0;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    hdsi->Instance->IER[1] = 0;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    hdsi->ErrorMsk = 0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	619a      	str	r2, [r3, #24]
    
    /* Initialise the error code */
    hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	615a      	str	r2, [r3, #20]
  
  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	745a      	strb	r2, [r3, #17]
  
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	fffc8603 	.word	0xfffc8603
 8007de0:	003d0900 	.word	0x003d0900

08007de4 <HAL_DSI_DeInit>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if(hdsi == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e03f      	b.n	8007e76 <HAL_DSI_DeInit+0x92>
  }
  
  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	745a      	strb	r2, [r3, #17]
  
  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0208 	bic.w	r2, r2, #8
 8007e0c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  
  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0201 	bic.w	r2, r2, #1
 8007e1e:	605a      	str	r2, [r3, #4]
  
  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0206 	bic.w	r2, r2, #6
 8007e30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  
  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  
  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e58:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi); 
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f818 	bl	8007e92 <HAL_DSI_MspDeInit>
  
  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	615a      	str	r2, [r3, #20]
  
  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	745a      	strb	r2, [r3, #17]
  
  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_DSI_MspInit>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UNUSED(hdsi);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */ 
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <HAL_DSI_MspDeInit>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  UNUSED(hdsi);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg: pointer to a DSI_VidCfgTypeDef structure that contains
  *                 the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7c1b      	ldrb	r3, [r3, #16]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_DSI_ConfigVideoMode+0x16>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e1ee      	b.n	800829c <HAL_DSI_ConfigVideoMode+0x3f4>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }
  
  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  
  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0203 	bic.w	r2, r2, #3
 8007ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b8b      	ldr	r3, [pc, #556]	@ (8008144 <HAL_DSI_ConfigVideoMode+0x29c>)
 8007f16:	400b      	ands	r3, r1
 8007f18:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b84      	ldr	r3, [pc, #528]	@ (8008148 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007f38:	400b      	ands	r3, r1
 8007f3a:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695a      	ldr	r2, [r3, #20]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4b7b      	ldr	r3, [pc, #492]	@ (8008148 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007f5a:	400b      	ands	r3, r1
 8007f5c:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0203 	bic.w	r2, r2, #3
 8007f7e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68d9      	ldr	r1, [r3, #12]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	60da      	str	r2, [r3, #12]
  
  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695a      	ldr	r2, [r3, #20]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0207 	bic.w	r2, r2, #7
 8007fa0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6959      	ldr	r1, [r3, #20]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	615a      	str	r2, [r3, #20]
  
  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691a      	ldr	r2, [r3, #16]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 020f 	bic.w	r2, r2, #15
 8007fce:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6919      	ldr	r1, [r3, #16]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	611a      	str	r2, [r3, #16]
    
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 020e 	bic.w	r2, r2, #14
 8007ff2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding)<<1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	005a      	lsls	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  
  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if(VidCfg->ColorCoding == DSI_RGB666)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d110      	bne.n	8008038 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008024:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6919      	ldr	r1, [r3, #16]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	611a      	str	r2, [r3, #16]
  }
  
  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b42      	ldr	r3, [pc, #264]	@ (800814c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008044:	400b      	ands	r3, r1
 8008046:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	4b39      	ldr	r3, [pc, #228]	@ (800814c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8008066:	400b      	ands	r3, r1
 8008068:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b32      	ldr	r3, [pc, #200]	@ (8008150 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8008088:	400b      	ands	r3, r1
 800808a:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b2a      	ldr	r3, [pc, #168]	@ (8008154 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80080aa:	400b      	ands	r3, r1
 80080ac:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b22      	ldr	r3, [pc, #136]	@ (8008154 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80080cc:	400b      	ands	r3, r1
 80080ce:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b19      	ldr	r3, [pc, #100]	@ (8008154 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4b0d      	ldr	r3, [pc, #52]	@ (8008144 <HAL_DSI_ConfigVideoMode+0x29c>)
 8008110:	400b      	ands	r3, r1
 8008112:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	661a      	str	r2, [r3, #96]	@ 0x60
  
  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008134:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008140:	e00a      	b.n	8008158 <HAL_DSI_ConfigVideoMode+0x2b0>
 8008142:	bf00      	nop
 8008144:	ffffc000 	.word	0xffffc000
 8008148:	ffffe000 	.word	0xffffe000
 800814c:	fffff000 	.word	0xfffff000
 8008150:	ffff8000 	.word	0xffff8000
 8008154:	fffffc00 	.word	0xfffffc00
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800816e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize)<<16);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6999      	ldr	r1, [r3, #24]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817a:	041a      	lsls	r2, r3, #16
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	619a      	str	r2, [r3, #24]
  
  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008192:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6999      	ldr	r1, [r3, #24]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	619a      	str	r2, [r3, #24]
  
  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800821a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800823c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008280:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_DSI_Start>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7c1b      	ldrb	r3, [r3, #16]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_DSI_Start+0x14>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e018      	b.n	80082ee <HAL_DSI_Start+0x46>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	741a      	strb	r2, [r3, #16]
  
  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	605a      	str	r2, [r3, #4]
  
  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0208 	orr.w	r2, r2, #8
 80082e2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b088      	sub	sp, #32
 80082fe:	af02      	add	r7, sp, #8
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	7c1b      	ldrb	r3, [r3, #16]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_DSI_ShortWrite+0x1e>
 8008314:	2302      	movs	r3, #2
 8008316:	e027      	b.n	8008368 <HAL_DSI_ShortWrite+0x6e>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	741a      	strb	r2, [r3, #16]
  
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));
  
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800831e:	f7fe fa95 	bl	800684c <HAL_GetTick>
 8008322:	6178      	str	r0, [r7, #20]
  
  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0)
 8008324:	e00c      	b.n	8008340 <HAL_DSI_ShortWrite+0x46>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8008326:	f7fe fa91 	bl	800684c <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008334:	d904      	bls.n	8008340 <HAL_DSI_ShortWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	741a      	strb	r2, [r3, #16]
      
      return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e013      	b.n	8008368 <HAL_DSI_ShortWrite+0x6e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0eb      	beq.n	8008326 <HAL_DSI_ShortWrite+0x2c>
    }
  }
  
  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	f7ff fc1e 	bl	8007b9c <DSI_ConfigPacketHeader>
                         Mode,
                         Param1,
                         Param2);
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t* ParametersTable)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
  
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	7c1b      	ldrb	r3, [r3, #16]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_DSI_LongWrite+0x22>
 800838e:	2302      	movs	r3, #2
 8008390:	e074      	b.n	800847c <HAL_DSI_LongWrite+0x10c>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	741a      	strb	r2, [r3, #16]
  
  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));
  
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008398:	f7fe fa58 	bl	800684c <HAL_GetTick>
 800839c:	6138      	str	r0, [r7, #16]
  
  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == RESET)
 800839e:	e00c      	b.n	80083ba <HAL_DSI_LongWrite+0x4a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80083a0:	f7fe fa54 	bl	800684c <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083ae:	d904      	bls.n	80083ba <HAL_DSI_LongWrite+0x4a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	741a      	strb	r2, [r3, #16]
      
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e060      	b.n	800847c <HAL_DSI_LongWrite+0x10c>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == RESET)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0eb      	beq.n	80083a0 <HAL_DSI_LongWrite+0x30>
    }
  }
  
  /* Set the DCS code hexadecimal on payload byte 1, and the other parameters on the write FIFO command*/
  while(uicounter < NbParams)
 80083c8:	e041      	b.n	800844e <HAL_DSI_LongWrite+0xde>
  {
    if(uicounter == 0x00)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11c      	bne.n	800840a <HAL_DSI_LongWrite+0x9a>
    {
      hdsi->Instance->GPDR=(Param1 | \
                            ((uint32_t)(*(ParametersTable + uicounter)) << 8) | \
 80083d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	021a      	lsls	r2, r3, #8
      hdsi->Instance->GPDR=(Param1 | \
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	431a      	orrs	r2, r3
                            ((uint32_t)(*(ParametersTable + uicounter+1))<<16) | \
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	3301      	adds	r3, #1
 80083e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083e4:	440b      	add	r3, r1
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)(*(ParametersTable + uicounter)) << 8) | \
 80083ea:	ea42 0103 	orr.w	r1, r2, r3
                            ((uint32_t)(*(ParametersTable + uicounter+2))<<24));
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	3302      	adds	r3, #2
 80083f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f4:	4413      	add	r3, r2
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	061a      	lsls	r2, r3, #24
      hdsi->Instance->GPDR=(Param1 | \
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
                            ((uint32_t)(*(ParametersTable + uicounter+1))<<16) | \
 80083fe:	430a      	orrs	r2, r1
      hdsi->Instance->GPDR=(Param1 | \
 8008400:	671a      	str	r2, [r3, #112]	@ 0x70
      uicounter += 3;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	3303      	adds	r3, #3
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	e021      	b.n	800844e <HAL_DSI_LongWrite+0xde>
    }
    else
    {
      hdsi->Instance->GPDR=((uint32_t)(*(ParametersTable + uicounter)) | \
 800840a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
                            ((uint32_t)(*(ParametersTable + uicounter+1)) << 8) | \
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	3301      	adds	r3, #1
 8008418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841a:	4413      	add	r3, r2
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	021b      	lsls	r3, r3, #8
      hdsi->Instance->GPDR=((uint32_t)(*(ParametersTable + uicounter)) | \
 8008420:	ea41 0203 	orr.w	r2, r1, r3
                            ((uint32_t)(*(ParametersTable + uicounter+2)) << 16) | \
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	3302      	adds	r3, #2
 8008428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800842a:	440b      	add	r3, r1
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	041b      	lsls	r3, r3, #16
                            ((uint32_t)(*(ParametersTable + uicounter+1)) << 8) | \
 8008430:	ea42 0103 	orr.w	r1, r2, r3
                            ((uint32_t)(*(ParametersTable + uicounter+3)) << 24));
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3303      	adds	r3, #3
 8008438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843a:	4413      	add	r3, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	061a      	lsls	r2, r3, #24
      hdsi->Instance->GPDR=((uint32_t)(*(ParametersTable + uicounter)) | \
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
                            ((uint32_t)(*(ParametersTable + uicounter+2)) << 16) | \
 8008444:	430a      	orrs	r2, r1
      hdsi->Instance->GPDR=((uint32_t)(*(ParametersTable + uicounter)) | \
 8008446:	671a      	str	r2, [r3, #112]	@ 0x70
      uicounter+=4;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	3304      	adds	r3, #4
 800844c:	617b      	str	r3, [r7, #20]
  while(uicounter < NbParams)
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3b9      	bcc.n	80083ca <HAL_DSI_LongWrite+0x5a>
    }
  }
  
  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams+1)&0x00FF),
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800845e:	b2da      	uxtb	r2, r3
                         (((NbParams+1)&0xFF00)>>8));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8008466:	b2db      	uxtb	r3, r3
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4613      	mov	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	f7ff fb94 	bl	8007b9c <DSI_ConfigPacketHeader>
  
  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	@ 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	e175      	b.n	8008790 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80084a4:	2201      	movs	r2, #1
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4013      	ands	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	429a      	cmp	r2, r3
 80084be:	f040 8164 	bne.w	800878a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d003      	beq.n	80084d2 <HAL_GPIO_Init+0x4e>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b12      	cmp	r3, #18
 80084d0:	d123      	bne.n	800851a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	08da      	lsrs	r2, r3, #3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3208      	adds	r2, #8
 80084da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	220f      	movs	r2, #15
 80084ea:	fa02 f303 	lsl.w	r3, r2, r3
 80084ee:	43db      	mvns	r3, r3
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	4013      	ands	r3, r2
 80084f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	fa02 f303 	lsl.w	r3, r2, r3
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	4313      	orrs	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	08da      	lsrs	r2, r3, #3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3208      	adds	r2, #8
 8008514:	69b9      	ldr	r1, [r7, #24]
 8008516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	2203      	movs	r2, #3
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	43db      	mvns	r3, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4013      	ands	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f003 0203 	and.w	r2, r3, #3
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4313      	orrs	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d00b      	beq.n	800856e <HAL_GPIO_Init+0xea>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d007      	beq.n	800856e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008562:	2b11      	cmp	r3, #17
 8008564:	d003      	beq.n	800856e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b12      	cmp	r3, #18
 800856c:	d130      	bne.n	80085d0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	2203      	movs	r2, #3
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4313      	orrs	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085a4:	2201      	movs	r2, #1
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ac:	43db      	mvns	r3, r3
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	4013      	ands	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	091b      	lsrs	r3, r3, #4
 80085ba:	f003 0201 	and.w	r2, r3, #1
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	2203      	movs	r2, #3
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4013      	ands	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80be 	beq.w	800878a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800860e:	4b66      	ldr	r3, [pc, #408]	@ (80087a8 <HAL_GPIO_Init+0x324>)
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	4a65      	ldr	r2, [pc, #404]	@ (80087a8 <HAL_GPIO_Init+0x324>)
 8008614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008618:	6453      	str	r3, [r2, #68]	@ 0x44
 800861a:	4b63      	ldr	r3, [pc, #396]	@ (80087a8 <HAL_GPIO_Init+0x324>)
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008626:	4a61      	ldr	r2, [pc, #388]	@ (80087ac <HAL_GPIO_Init+0x328>)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	3302      	adds	r3, #2
 800862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008632:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	220f      	movs	r2, #15
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a58      	ldr	r2, [pc, #352]	@ (80087b0 <HAL_GPIO_Init+0x32c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d037      	beq.n	80086c2 <HAL_GPIO_Init+0x23e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a57      	ldr	r2, [pc, #348]	@ (80087b4 <HAL_GPIO_Init+0x330>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d031      	beq.n	80086be <HAL_GPIO_Init+0x23a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a56      	ldr	r2, [pc, #344]	@ (80087b8 <HAL_GPIO_Init+0x334>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d02b      	beq.n	80086ba <HAL_GPIO_Init+0x236>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a55      	ldr	r2, [pc, #340]	@ (80087bc <HAL_GPIO_Init+0x338>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d025      	beq.n	80086b6 <HAL_GPIO_Init+0x232>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a54      	ldr	r2, [pc, #336]	@ (80087c0 <HAL_GPIO_Init+0x33c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <HAL_GPIO_Init+0x22e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a53      	ldr	r2, [pc, #332]	@ (80087c4 <HAL_GPIO_Init+0x340>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d019      	beq.n	80086ae <HAL_GPIO_Init+0x22a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a52      	ldr	r2, [pc, #328]	@ (80087c8 <HAL_GPIO_Init+0x344>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <HAL_GPIO_Init+0x226>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a51      	ldr	r2, [pc, #324]	@ (80087cc <HAL_GPIO_Init+0x348>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00d      	beq.n	80086a6 <HAL_GPIO_Init+0x222>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a50      	ldr	r2, [pc, #320]	@ (80087d0 <HAL_GPIO_Init+0x34c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <HAL_GPIO_Init+0x21e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4f      	ldr	r2, [pc, #316]	@ (80087d4 <HAL_GPIO_Init+0x350>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d101      	bne.n	800869e <HAL_GPIO_Init+0x21a>
 800869a:	2309      	movs	r3, #9
 800869c:	e012      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 800869e:	230a      	movs	r3, #10
 80086a0:	e010      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a2:	2308      	movs	r3, #8
 80086a4:	e00e      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a6:	2307      	movs	r3, #7
 80086a8:	e00c      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e00a      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e008      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e006      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e004      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e002      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086c2:	2300      	movs	r3, #0
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f002 0203 	and.w	r2, r2, #3
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	4093      	lsls	r3, r2
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80086d4:	4935      	ldr	r1, [pc, #212]	@ (80087ac <HAL_GPIO_Init+0x328>)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086e2:	4b3d      	ldr	r3, [pc, #244]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008706:	4a34      	ldr	r2, [pc, #208]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800870c:	4b32      	ldr	r3, [pc, #200]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008730:	4a29      	ldr	r2, [pc, #164]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008736:	4b28      	ldr	r3, [pc, #160]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800875a:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008760:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008784:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <HAL_GPIO_Init+0x354>)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	f67f ae86 	bls.w	80084a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	@ 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40021c00 	.word	0x40021c00
 80087d0:	40022000 	.word	0x40022000
 80087d4:	40022400 	.word	0x40022400
 80087d8:	40013c00 	.word	0x40013c00

080087dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	887b      	ldrh	r3, [r7, #2]
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e001      	b.n	80087fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	807b      	strh	r3, [r7, #2]
 8008818:	4613      	mov	r3, r2
 800881a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800881c:	787b      	ldrb	r3, [r7, #1]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008822:	887a      	ldrh	r2, [r7, #2]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008828:	e003      	b.n	8008832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800882a:	887b      	ldrh	r3, [r7, #2]
 800882c:	041a      	lsls	r2, r3, #16
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	613b      	str	r3, [r7, #16]
  uint32_t i = 0 , interrupt = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f005 fd10 	bl	800e27e <USB_GetMode>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	f040 80ea 	bne.w	8008a3a <HAL_HCD_IRQHandler+0x1fc>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f005 fcf2 	bl	800e254 <USB_ReadInterrupts>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80e0 	beq.w	8008a38 <HAL_HCD_IRQHandler+0x1fa>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f005 fce9 	bl	800e254 <USB_ReadInterrupts>
 8008882:	4603      	mov	r3, r0
 8008884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008888:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800888c:	d104      	bne.n	8008898 <HAL_HCD_IRQHandler+0x5a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008896:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4618      	mov	r0, r3
 800889e:	f005 fcd9 	bl	800e254 <USB_ReadInterrupts>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ac:	d104      	bne.n	80088b8 <HAL_HCD_IRQHandler+0x7a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088b6:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f005 fcc9 	bl	800e254 <USB_ReadInterrupts>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088cc:	d104      	bne.n	80088d8 <HAL_HCD_IRQHandler+0x9a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80088d6:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f005 fcb9 	bl	800e254 <USB_ReadInterrupts>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d103      	bne.n	80088f4 <HAL_HCD_IRQHandler+0xb6>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2202      	movs	r2, #2
 80088f2:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f005 fcab 	bl	800e254 <USB_ReadInterrupts>
 80088fe:	4603      	mov	r3, r0
 8008900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008908:	d117      	bne.n	800893a <HAL_HCD_IRQHandler+0xfc>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008918:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800891c:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
       
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f009 fb3a 	bl	8011f98 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2101      	movs	r1, #1
 800892a:	4618      	mov	r0, r3
 800892c:	f005 fcb5 	bl	800e29a <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008938:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f005 fc88 	bl	800e254 <USB_ReadInterrupts>
 8008944:	4603      	mov	r3, r0
 8008946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800894a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800894e:	d102      	bne.n	8008956 <HAL_HCD_IRQHandler+0x118>
    {
      HCD_Port_IRQHandler (hhcd);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 ffd1 	bl	80098f8 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4618      	mov	r0, r3
 800895c:	f005 fc7a 	bl	800e254 <USB_ReadInterrupts>
 8008960:	4603      	mov	r3, r0
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b08      	cmp	r3, #8
 8008968:	d106      	bne.n	8008978 <HAL_HCD_IRQHandler+0x13a>
    {
      HAL_HCD_SOF_Callback(hhcd);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f009 faf8 	bl	8011f60 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2208      	movs	r2, #8
 8008976:	615a      	str	r2, [r3, #20]
    }
          
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f005 fc69 	bl	800e254 <USB_ReadInterrupts>
 8008982:	4603      	mov	r3, r0
 8008984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800898c:	d136      	bne.n	80089fc <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f005 fcee 	bl	800e374 <USB_HC_ReadInterrupt>
 8008998:	60f8      	str	r0, [r7, #12]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e023      	b.n	80089e8 <HAL_HCD_IRQHandler+0x1aa>
      {
        if (interrupt & (1 << i))
 80089a0:	2201      	movs	r2, #1
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d017      	beq.n	80089e2 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d006      	beq.n	80089d6 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler (hhcd, i);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f876 	bl	8008ac0 <HCD_HC_IN_IRQHandler>
 80089d4:	e005      	b.n	80089e2 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fba7 	bl	8009130 <HCD_HC_OUT_IRQHandler>
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	3301      	adds	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d3d6      	bcc.n	80089a0 <HAL_HCD_IRQHandler+0x162>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80089fa:	615a      	str	r2, [r3, #20]
    } 
    
        /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f005 fc27 	bl	800e254 <USB_ReadInterrupts>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d114      	bne.n	8008a3a <HAL_HCD_IRQHandler+0x1fc>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0210 	bic.w	r2, r2, #16
 8008a1e:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 feb7 	bl	8009794 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699a      	ldr	r2, [r3, #24]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f042 0210 	orr.w	r2, r2, #16
 8008a34:	619a      	str	r2, [r3, #24]
 8008a36:	e000      	b.n	8008a3a <HAL_HCD_IRQHandler+0x1fc>
      return;
 8008a38:	bf00      	nop
    }
  }
}
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd: HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_HCD_Start+0x16>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e013      	b.n	8008a7e <HAL_HCD_Start+0x3e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_HCD_ENABLE(hhcd);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f005 fb61 	bl	800e12a <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);  
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f005 fc4b 	bl	800e30a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_HCD_Stop>:
  * @param  hhcd: HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d101      	bne.n	8008a9c <HAL_HCD_Stop+0x16>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e00d      	b.n	8008ab8 <HAL_HCD_Stop+0x32>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  USB_StopHost(hhcd->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f005 fd72 	bl	800e592 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum: Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler   (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ac0:	b590      	push	{r4, r7, lr}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d019      	beq.n	8008b20 <HCD_HC_IN_IRQHandler+0x60>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af8:	461a      	mov	r2, r3
 8008afa:	2304      	movs	r3, #4
 8008afc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	60d3      	str	r3, [r2, #12]
 8008b1e:	e092      	b.n	8008c46 <HCD_HC_IN_IRQHandler+0x186>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <HCD_HC_IN_IRQHandler+0x8a>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b42:	461a      	mov	r2, r3
 8008b44:	2320      	movs	r3, #32
 8008b46:	6093      	str	r3, [r2, #8]
 8008b48:	e07d      	b.n	8008c46 <HCD_HC_IN_IRQHandler+0x186>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d033      	beq.n	8008bc8 <HCD_HC_IN_IRQHandler+0x108>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b7a:	f043 0302 	orr.w	r3, r3, #2
 8008b7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	440b      	add	r3, r1
 8008b8e:	335d      	adds	r3, #93	@ 0x5d
 8008b90:	2205      	movs	r2, #5
 8008b92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	2310      	movs	r3, #16
 8008ba4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f005 fbe6 	bl	800e392 <USB_HC_Halt>
 8008bc6:	e03e      	b.n	8008c46 <HCD_HC_IN_IRQHandler+0x186>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d033      	beq.n	8008c46 <HCD_HC_IN_IRQHandler+0x186>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf8:	f043 0302 	orr.w	r3, r3, #2
 8008bfc:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f005 fbc3 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c18:	461a      	mov	r2, r3
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	440b      	add	r3, r1
 8008c2c:	335d      	adds	r3, #93	@ 0x5d
 8008c2e:	2208      	movs	r2, #8
 8008c30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c44:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d021      	beq.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c76:	f043 0302 	orr.w	r3, r3, #2
 8008c7a:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f005 fb84 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c96:	461a      	mov	r2, r3
 8008c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c9c:	6093      	str	r3, [r2, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
    hhcd->hc[chnum].state = HC_NAK;
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
  }
}
 8008c9e:	e243      	b.n	8009128 <HCD_HC_IN_IRQHandler+0x668>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80be 	beq.w	8008e34 <HCD_HC_IN_IRQHandler+0x374>
    if (hhcd->Init.dma_enable)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01b      	beq.n	8008cf8 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	440b      	add	r3, r1
 8008cce:	3348      	adds	r3, #72	@ 0x48
 8008cd0:	6819      	ldr	r1, [r3, #0]
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	1ac9      	subs	r1, r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4403      	add	r3, r0
 8008cf4:	334c      	adds	r3, #76	@ 0x4c
 8008cf6:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	440b      	add	r3, r1
 8008d06:	335d      	adds	r3, #93	@ 0x5d
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0;
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	440b      	add	r3, r1
 8008d1a:	3358      	adds	r3, #88	@ 0x58
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	2301      	movs	r3, #1
 8008d30:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	440b      	add	r3, r1
 8008d40:	333f      	adds	r3, #63	@ 0x3f
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <HCD_HC_IN_IRQHandler+0x29e>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	440b      	add	r3, r1
 8008d56:	333f      	adds	r3, #63	@ 0x3f
 8008d58:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d120      	bne.n	8008da0 <HCD_HC_IN_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	0151      	lsls	r1, r2, #5
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	440a      	add	r2, r1
 8008d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d78:	f043 0302 	orr.w	r3, r3, #2
 8008d7c:	60d3      	str	r3, [r2, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f005 fb03 	bl	800e392 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	6093      	str	r3, [r2, #8]
 8008d9e:	e032      	b.n	8008e06 <HCD_HC_IN_IRQHandler+0x346>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008da0:	78fa      	ldrb	r2, [r7, #3]
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	440b      	add	r3, r1
 8008dae:	333f      	adds	r3, #63	@ 0x3f
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d127      	bne.n	8008e06 <HCD_HC_IN_IRQHandler+0x346>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	440b      	add	r3, r1
 8008de4:	335c      	adds	r3, #92	@ 0x5c
 8008de6:	2201      	movs	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	440b      	add	r3, r1
 8008df8:	335c      	adds	r3, #92	@ 0x5c
 8008dfa:	781a      	ldrb	r2, [r3, #0]
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f009 f8d7 	bl	8011fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1;
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	440b      	add	r3, r1
 8008e14:	3350      	adds	r3, #80	@ 0x50
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	f083 0301 	eor.w	r3, r3, #1
 8008e1e:	b2d8      	uxtb	r0, r3
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3350      	adds	r3, #80	@ 0x50
 8008e2e:	4602      	mov	r2, r0
 8008e30:	701a      	strb	r2, [r3, #0]
}
 8008e32:	e179      	b.n	8009128 <HCD_HC_IN_IRQHandler+0x668>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 80b6 	beq.w	8008fb8 <HCD_HC_IN_IRQHandler+0x4f8>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	78fa      	ldrb	r2, [r7, #3]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e66:	f023 0302 	bic.w	r3, r3, #2
 8008e6a:	60d3      	str	r3, [r2, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	440b      	add	r3, r1
 8008e7a:	335d      	adds	r3, #93	@ 0x5d
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d10a      	bne.n	8008e98 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	440b      	add	r3, r1
 8008e90:	335c      	adds	r3, #92	@ 0x5c
 8008e92:	2201      	movs	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e077      	b.n	8008f88 <HCD_HC_IN_IRQHandler+0x4c8>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	440b      	add	r3, r1
 8008ea6:	335d      	adds	r3, #93	@ 0x5d
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d10a      	bne.n	8008ec4 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	440b      	add	r3, r1
 8008ebc:	335c      	adds	r3, #92	@ 0x5c
 8008ebe:	2205      	movs	r2, #5
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	e061      	b.n	8008f88 <HCD_HC_IN_IRQHandler+0x4c8>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	440b      	add	r3, r1
 8008ed2:	335d      	adds	r3, #93	@ 0x5d
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b06      	cmp	r3, #6
 8008ed8:	d00a      	beq.n	8008ef0 <HCD_HC_IN_IRQHandler+0x430>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	440b      	add	r3, r1
 8008ee8:	335d      	adds	r3, #93	@ 0x5d
 8008eea:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d14b      	bne.n	8008f88 <HCD_HC_IN_IRQHandler+0x4c8>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	440b      	add	r3, r1
 8008efe:	3358      	adds	r3, #88	@ 0x58
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	1c48      	adds	r0, r1, #1
 8008f04:	687c      	ldr	r4, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4423      	add	r3, r4
 8008f10:	3358      	adds	r3, #88	@ 0x58
 8008f12:	6018      	str	r0, [r3, #0]
 8008f14:	2903      	cmp	r1, #3
 8008f16:	d914      	bls.n	8008f42 <HCD_HC_IN_IRQHandler+0x482>
        hhcd->hc[chnum].ErrCnt = 0;
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	440b      	add	r3, r1
 8008f26:	3358      	adds	r3, #88	@ 0x58
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	440b      	add	r3, r1
 8008f3a:	335c      	adds	r3, #92	@ 0x5c
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	e009      	b.n	8008f56 <HCD_HC_IN_IRQHandler+0x496>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	440b      	add	r3, r1
 8008f50:	335c      	adds	r3, #92	@ 0x5c
 8008f52:	2202      	movs	r2, #2
 8008f54:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f6c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f74:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;    
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f82:	461a      	mov	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f94:	461a      	mov	r2, r3
 8008f96:	2302      	movs	r3, #2
 8008f98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	440b      	add	r3, r1
 8008fa8:	335c      	adds	r3, #92	@ 0x5c
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f008 ffff 	bl	8011fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008fb6:	e0b7      	b.n	8009128 <HCD_HC_IN_IRQHandler+0x668>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d03c      	beq.n	8009048 <HCD_HC_IN_IRQHandler+0x588>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fe8:	f043 0302 	orr.w	r3, r3, #2
 8008fec:	60d3      	str	r3, [r2, #12]
     hhcd->hc[chnum].ErrCnt++;
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	440b      	add	r3, r1
 8008ffc:	3358      	adds	r3, #88	@ 0x58
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1c59      	adds	r1, r3, #1
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	4403      	add	r3, r0
 800900e:	3358      	adds	r3, #88	@ 0x58
 8009010:	6019      	str	r1, [r3, #0]
     hhcd->hc[chnum].state = HC_XACTERR;
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	440b      	add	r3, r1
 8009020:	335d      	adds	r3, #93	@ 0x5d
 8009022:	2206      	movs	r2, #6
 8009024:	701a      	strb	r2, [r3, #0]
     USB_HC_Halt(hhcd->Instance, chnum);     
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f005 f9af 	bl	800e392 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009040:	461a      	mov	r2, r3
 8009042:	2380      	movs	r3, #128	@ 0x80
 8009044:	6093      	str	r3, [r2, #8]
}
 8009046:	e06f      	b.n	8009128 <HCD_HC_IN_IRQHandler+0x668>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b00      	cmp	r3, #0
 800905c:	d064      	beq.n	8009128 <HCD_HC_IN_IRQHandler+0x668>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	440b      	add	r3, r1
 800906c:	333f      	adds	r3, #63	@ 0x3f
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d117      	bne.n	80090a4 <HCD_HC_IN_IRQHandler+0x5e4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	440a      	add	r2, r1
 800908a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800908e:	f043 0302 	orr.w	r3, r3, #2
 8009092:	60d3      	str	r3, [r2, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f005 f978 	bl	800e392 <USB_HC_Halt>
 80090a2:	e02e      	b.n	8009102 <HCD_HC_IN_IRQHandler+0x642>
    else if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	440b      	add	r3, r1
 80090b2:	333f      	adds	r3, #63	@ 0x3f
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <HCD_HC_IN_IRQHandler+0x610>
         (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	440b      	add	r3, r1
 80090c8:	333f      	adds	r3, #63	@ 0x3f
 80090ca:	781b      	ldrb	r3, [r3, #0]
    else if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d118      	bne.n	8009102 <HCD_HC_IN_IRQHandler+0x642>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fc:	461a      	mov	r2, r3
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6013      	str	r3, [r2, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	335d      	adds	r3, #93	@ 0x5d
 8009112:	2203      	movs	r2, #3
 8009114:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009122:	461a      	mov	r2, r3
 8009124:	2310      	movs	r3, #16
 8009126:	6093      	str	r3, [r2, #8]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	bd90      	pop	{r4, r7, pc}

08009130 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum: Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009130:	b590      	push	{r4, r7, lr}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d019      	beq.n	8009190 <HCD_HC_OUT_IRQHandler+0x60>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009168:	461a      	mov	r2, r3
 800916a:	2304      	movs	r3, #4
 800916c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4413      	add	r3, r2
 8009176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	0151      	lsls	r1, r2, #5
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	440a      	add	r2, r1
 8009184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009188:	f043 0302 	orr.w	r3, r3, #2
 800918c:	60d3      	str	r3, [r2, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 800918e:	e2fd      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d040      	beq.n	8009228 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b2:	461a      	mov	r2, r3
 80091b4:	2320      	movs	r3, #32
 80091b6:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	440b      	add	r3, r1
 80091c6:	333d      	adds	r3, #61	@ 0x3d
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	f040 82de 	bne.w	800978c <HCD_HC_OUT_IRQHandler+0x65c>
      hhcd->hc[chnum].state = HC_NYET;     
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	440b      	add	r3, r1
 80091de:	335d      	adds	r3, #93	@ 0x5d
 80091e0:	2204      	movs	r2, #4
 80091e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	0151      	lsls	r1, r2, #5
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	440a      	add	r2, r1
 80091fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091fe:	f043 0302 	orr.w	r3, r3, #2
 8009202:	60d3      	str	r3, [r2, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	78fa      	ldrb	r2, [r7, #3]
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f005 f8c0 	bl	800e392 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	440b      	add	r3, r1
 8009220:	335c      	adds	r3, #92	@ 0x5c
 8009222:	2202      	movs	r2, #2
 8009224:	701a      	strb	r2, [r3, #0]
} 
 8009226:	e2b1      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d034      	beq.n	80092a8 <HCD_HC_OUT_IRQHandler+0x178>
    hhcd->hc[chnum].state = HC_NYET;
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	440b      	add	r3, r1
 800924c:	335d      	adds	r3, #93	@ 0x5d
 800924e:	2204      	movs	r2, #4
 8009250:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0;    
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	440b      	add	r3, r1
 8009260:	3358      	adds	r3, #88	@ 0x58
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	440a      	add	r2, r1
 800927c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009280:	f043 0302 	orr.w	r3, r3, #2
 8009284:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f005 f87f 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a0:	461a      	mov	r2, r3
 80092a2:	2340      	movs	r3, #64	@ 0x40
 80092a4:	6093      	str	r3, [r2, #8]
} 
 80092a6:	e271      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d021      	beq.n	8009302 <HCD_HC_OUT_IRQHandler+0x1d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f005 f853 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092f8:	461a      	mov	r2, r3
 80092fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092fe:	6093      	str	r3, [r2, #8]
} 
 8009300:	e244      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d034      	beq.n	8009382 <HCD_HC_OUT_IRQHandler+0x252>
      hhcd->hc[chnum].ErrCnt = 0;  
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	440b      	add	r3, r1
 8009326:	3358      	adds	r3, #88	@ 0x58
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	440a      	add	r2, r1
 8009342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009346:	f043 0302 	orr.w	r3, r3, #2
 800934a:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	78fa      	ldrb	r2, [r7, #3]
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f005 f81c 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009366:	461a      	mov	r2, r3
 8009368:	2301      	movs	r3, #1
 800936a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	440b      	add	r3, r1
 800937a:	335d      	adds	r3, #93	@ 0x5d
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
} 
 8009380:	e204      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8009382:	78fb      	ldrb	r3, [r7, #3]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4413      	add	r3, r2
 800938a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f003 0308 	and.w	r3, r3, #8
 8009394:	2b00      	cmp	r3, #0
 8009396:	d02a      	beq.n	80093ee <HCD_HC_OUT_IRQHandler+0x2be>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093a4:	461a      	mov	r2, r3
 80093a6:	2308      	movs	r3, #8
 80093a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f004 ffdd 	bl	800e392 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	440b      	add	r3, r1
 80093e6:	335d      	adds	r3, #93	@ 0x5d
 80093e8:	2205      	movs	r2, #5
 80093ea:	701a      	strb	r2, [r3, #0]
} 
 80093ec:	e1ce      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b00      	cmp	r3, #0
 8009402:	d034      	beq.n	800946e <HCD_HC_OUT_IRQHandler+0x33e>
    hhcd->hc[chnum].ErrCnt = 0;  
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	440b      	add	r3, r1
 8009412:	3358      	adds	r3, #88	@ 0x58
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	440a      	add	r2, r1
 800942e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009432:	f043 0302 	orr.w	r3, r3, #2
 8009436:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	4611      	mov	r1, r2
 8009440:	4618      	mov	r0, r3
 8009442:	f004 ffa6 	bl	800e392 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	440b      	add	r3, r1
 8009454:	335d      	adds	r3, #93	@ 0x5d
 8009456:	2203      	movs	r2, #3
 8009458:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009466:	461a      	mov	r2, r3
 8009468:	2310      	movs	r3, #16
 800946a:	6093      	str	r3, [r2, #8]
} 
 800946c:	e18e      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009480:	2b00      	cmp	r3, #0
 8009482:	d02a      	beq.n	80094da <HCD_HC_OUT_IRQHandler+0x3aa>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4413      	add	r3, r2
 800948c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	440a      	add	r2, r1
 800949a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800949e:	f043 0302 	orr.w	r3, r3, #2
 80094a2:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f004 ff70 	bl	800e392 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	440b      	add	r3, r1
 80094c0:	335d      	adds	r3, #93	@ 0x5d
 80094c2:	2206      	movs	r2, #6
 80094c4:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094d2:	461a      	mov	r2, r3
 80094d4:	2380      	movs	r3, #128	@ 0x80
 80094d6:	6093      	str	r3, [r2, #8]
} 
 80094d8:	e158      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d034      	beq.n	800955a <HCD_HC_OUT_IRQHandler+0x42a>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	440a      	add	r2, r1
 8009506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800950a:	f043 0302 	orr.w	r3, r3, #2
 800950e:	60d3      	str	r3, [r2, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f004 ff3a 	bl	800e392 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800952a:	461a      	mov	r2, r3
 800952c:	2310      	movs	r3, #16
 800952e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800953c:	461a      	mov	r2, r3
 800953e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009542:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009544:	78fa      	ldrb	r2, [r7, #3]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	440b      	add	r3, r1
 8009552:	335d      	adds	r3, #93	@ 0x5d
 8009554:	2208      	movs	r2, #8
 8009556:	701a      	strb	r2, [r3, #0]
} 
 8009558:	e118      	b.n	800978c <HCD_HC_OUT_IRQHandler+0x65c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 810d 	beq.w	800978c <HCD_HC_OUT_IRQHandler+0x65c>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	440a      	add	r2, r1
 8009588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800958c:	f023 0302 	bic.w	r3, r3, #2
 8009590:	60d3      	str	r3, [r2, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	440b      	add	r3, r1
 80095a0:	335d      	adds	r3, #93	@ 0x5d
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d12c      	bne.n	8009602 <HCD_HC_OUT_IRQHandler+0x4d2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	440b      	add	r3, r1
 80095b6:	335c      	adds	r3, #92	@ 0x5c
 80095b8:	2201      	movs	r2, #1
 80095ba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	440b      	add	r3, r1
 80095ca:	333f      	adds	r3, #63	@ 0x3f
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	f040 80c5 	bne.w	800975e <HCD_HC_OUT_IRQHandler+0x62e>
        hhcd->hc[chnum].toggle_out ^= 1; 
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	440b      	add	r3, r1
 80095e2:	3351      	adds	r3, #81	@ 0x51
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	f083 0301 	eor.w	r3, r3, #1
 80095ec:	b2d8      	uxtb	r0, r3
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	440b      	add	r3, r1
 80095fa:	3351      	adds	r3, #81	@ 0x51
 80095fc:	4602      	mov	r2, r0
 80095fe:	701a      	strb	r2, [r3, #0]
 8009600:	e0ad      	b.n	800975e <HCD_HC_OUT_IRQHandler+0x62e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	440b      	add	r3, r1
 8009610:	335d      	adds	r3, #93	@ 0x5d
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d10a      	bne.n	800962e <HCD_HC_OUT_IRQHandler+0x4fe>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	440b      	add	r3, r1
 8009626:	335c      	adds	r3, #92	@ 0x5c
 8009628:	2202      	movs	r2, #2
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e097      	b.n	800975e <HCD_HC_OUT_IRQHandler+0x62e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	440b      	add	r3, r1
 800963c:	335d      	adds	r3, #93	@ 0x5d
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b04      	cmp	r3, #4
 8009642:	d114      	bne.n	800966e <HCD_HC_OUT_IRQHandler+0x53e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	440b      	add	r3, r1
 8009652:	335c      	adds	r3, #92	@ 0x5c
 8009654:	2202      	movs	r2, #2
 8009656:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0;
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	440b      	add	r3, r1
 8009666:	333d      	adds	r3, #61	@ 0x3d
 8009668:	2200      	movs	r2, #0
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e077      	b.n	800975e <HCD_HC_OUT_IRQHandler+0x62e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	440b      	add	r3, r1
 800967c:	335d      	adds	r3, #93	@ 0x5d
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b05      	cmp	r3, #5
 8009682:	d10a      	bne.n	800969a <HCD_HC_OUT_IRQHandler+0x56a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	440b      	add	r3, r1
 8009692:	335c      	adds	r3, #92	@ 0x5c
 8009694:	2205      	movs	r2, #5
 8009696:	701a      	strb	r2, [r3, #0]
 8009698:	e061      	b.n	800975e <HCD_HC_OUT_IRQHandler+0x62e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	440b      	add	r3, r1
 80096a8:	335d      	adds	r3, #93	@ 0x5d
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b06      	cmp	r3, #6
 80096ae:	d00a      	beq.n	80096c6 <HCD_HC_OUT_IRQHandler+0x596>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	440b      	add	r3, r1
 80096be:	335d      	adds	r3, #93	@ 0x5d
 80096c0:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	d14b      	bne.n	800975e <HCD_HC_OUT_IRQHandler+0x62e>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	440b      	add	r3, r1
 80096d4:	3358      	adds	r3, #88	@ 0x58
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	1c48      	adds	r0, r1, #1
 80096da:	687c      	ldr	r4, [r7, #4]
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	4423      	add	r3, r4
 80096e6:	3358      	adds	r3, #88	@ 0x58
 80096e8:	6018      	str	r0, [r3, #0]
 80096ea:	2903      	cmp	r1, #3
 80096ec:	d914      	bls.n	8009718 <HCD_HC_OUT_IRQHandler+0x5e8>
        hhcd->hc[chnum].ErrCnt = 0;
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	440b      	add	r3, r1
 80096fc:	3358      	adds	r3, #88	@ 0x58
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	440b      	add	r3, r1
 8009710:	335c      	adds	r3, #92	@ 0x5c
 8009712:	2204      	movs	r2, #4
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e009      	b.n	800972c <HCD_HC_OUT_IRQHandler+0x5fc>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	440b      	add	r3, r1
 8009726:	335c      	adds	r3, #92	@ 0x5c
 8009728:	2202      	movs	r2, #2
 800972a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009742:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800974a:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;   
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009758:	461a      	mov	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800976a:	461a      	mov	r2, r3
 800976c:	2302      	movs	r3, #2
 800976e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	440b      	add	r3, r1
 800977e:	335c      	adds	r3, #92	@ 0x5c
 8009780:	781a      	ldrb	r2, [r3, #0]
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f008 fc14 	bl	8011fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 800978c:	bf00      	nop
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	bd90      	pop	{r4, r7, pc}

08009794 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd: HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	61fb      	str	r3, [r7, #28]
  uint8_t                       channelnum =0;  
 80097a2:	2300      	movs	r3, #0
 80097a4:	76fb      	strb	r3, [r7, #27]
  uint32_t                      pktsts;
  uint32_t                      pktcnt; 
  uint32_t                      temp = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP ;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	0c5b      	lsrs	r3, r3, #17
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	091b      	lsrs	r3, r3, #4
 80097ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097d2:	60bb      	str	r3, [r7, #8]
    
  switch (pktsts)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d004      	beq.n	80097e4 <HCD_RXQLVL_IRQHandler+0x50>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2b05      	cmp	r3, #5
 80097de:	f000 8082 	beq.w	80098e6 <HCD_RXQLVL_IRQHandler+0x152>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80097e2:	e083      	b.n	80098ec <HCD_RXQLVL_IRQHandler+0x158>
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d07f      	beq.n	80098ea <HCD_RXQLVL_IRQHandler+0x156>
 80097ea:	7efa      	ldrb	r2, [r7, #27]
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	440b      	add	r3, r1
 80097f8:	3344      	adds	r3, #68	@ 0x44
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d074      	beq.n	80098ea <HCD_RXQLVL_IRQHandler+0x156>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	7efa      	ldrb	r2, [r7, #27]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	440b      	add	r3, r1
 8009812:	3344      	adds	r3, #68	@ 0x44
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	b292      	uxth	r2, r2
 800981a:	4619      	mov	r1, r3
 800981c:	f004 fcf0 	bl	800e200 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8009820:	7efa      	ldrb	r2, [r7, #27]
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	440b      	add	r3, r1
 800982e:	3344      	adds	r3, #68	@ 0x44
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	7efa      	ldrb	r2, [r7, #27]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4419      	add	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	4403      	add	r3, r0
 8009844:	3344      	adds	r3, #68	@ 0x44
 8009846:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8009848:	7efa      	ldrb	r2, [r7, #27]
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	440b      	add	r3, r1
 8009856:	334c      	adds	r3, #76	@ 0x4c
 8009858:	6819      	ldr	r1, [r3, #0]
 800985a:	7efa      	ldrb	r2, [r7, #27]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4419      	add	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4403      	add	r3, r0
 800986c:	334c      	adds	r3, #76	@ 0x4c
 800986e:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8009870:	7efb      	ldrb	r3, [r7, #27]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4413      	add	r3, r2
 8009878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800987c:	691a      	ldr	r2, [r3, #16]
 800987e:	4b1d      	ldr	r3, [pc, #116]	@ (80098f4 <HCD_RXQLVL_IRQHandler+0x160>)
 8009880:	4013      	ands	r3, r2
 8009882:	2b00      	cmp	r3, #0
 8009884:	d031      	beq.n	80098ea <HCD_RXQLVL_IRQHandler+0x156>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8009886:	7efb      	ldrb	r3, [r7, #27]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800989c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098a4:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 80098a6:	7efb      	ldrb	r3, [r7, #27]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 80098b8:	7efa      	ldrb	r2, [r7, #27]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	440b      	add	r3, r1
 80098c6:	3350      	adds	r3, #80	@ 0x50
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	7efa      	ldrb	r2, [r7, #27]
 80098cc:	f083 0301 	eor.w	r3, r3, #1
 80098d0:	b2d8      	uxtb	r0, r3
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	440b      	add	r3, r1
 80098de:	3350      	adds	r3, #80	@ 0x50
 80098e0:	4602      	mov	r2, r0
 80098e2:	701a      	strb	r2, [r3, #0]
    break;
 80098e4:	e001      	b.n	80098ea <HCD_RXQLVL_IRQHandler+0x156>
    break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <HCD_RXQLVL_IRQHandler+0x158>
    break;
 80098ea:	bf00      	nop
  }
}
 80098ec:	bf00      	nop
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	1ff80000 	.word	0x1ff80000

080098f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009920:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b02      	cmp	r3, #2
 800992a:	d113      	bne.n	8009954 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b01      	cmp	r3, #1
 8009934:	d10a      	bne.n	800994c <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699a      	ldr	r2, [r3, #24]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8009944:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f008 fb18 	bl	8011f7c <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f043 0302 	orr.w	r3, r3, #2
 8009952:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b08      	cmp	r3, #8
 800995c:	d141      	bne.n	80099e2 <HCD_Port_IRQHandler+0xea>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f043 0308 	orr.w	r3, r3, #8
 8009964:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b04      	cmp	r3, #4
 800996e:	d126      	bne.n	80099be <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d113      	bne.n	80099a0 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800997e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009982:	d106      	bne.n	8009992 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2102      	movs	r1, #2
 800998a:	4618      	mov	r0, r3
 800998c:	f004 fc85 	bl	800e29a <USB_InitFSLSPClkSel>
 8009990:	e011      	b.n	80099b6 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2101      	movs	r1, #1
 8009998:	4618      	mov	r0, r3
 800999a:	f004 fc7e 	bl	800e29a <USB_InitFSLSPClkSel>
 800999e:	e00a      	b.n	80099b6 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d106      	bne.n	80099b6 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099ae:	461a      	mov	r2, r3
 80099b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80099b4:	6053      	str	r3, [r2, #4]
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f008 fae0 	bl	8011f7c <HAL_HCD_Connect_Callback>
 80099bc:	e011      	b.n	80099e2 <HCD_Port_IRQHandler+0xea>
      
    }
    else
    {
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80099cc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80099d0:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80099e0:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d103      	bne.n	80099f4 <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f043 0320 	orr.w	r3, r3, #32
 80099f2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80099fa:	461a      	mov	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6013      	str	r3, [r2, #0]
}
 8009a00:	bf00      	nop
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e07f      	b.n	8009b1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f8a9 	bl	8009b86 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2224      	movs	r2, #36	@ 0x24
 8009a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0201 	bic.w	r2, r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d107      	bne.n	8009a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a7e:	609a      	str	r2, [r3, #8]
 8009a80:	e006      	b.n	8009a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689a      	ldr	r2, [r3, #8]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d104      	bne.n	8009aa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6859      	ldr	r1, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	4b1d      	ldr	r3, [pc, #116]	@ (8009b24 <HAL_I2C_Init+0x11c>)
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ac0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	ea42 0103 	orr.w	r1, r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	021a      	lsls	r2, r3, #8
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69d9      	ldr	r1, [r3, #28]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1a      	ldr	r2, [r3, #32]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	02008000 	.word	0x02008000

08009b28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e021      	b.n	8009b7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2224      	movs	r2, #36	@ 0x24
 8009b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0201 	bic.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f821 	bl	8009b9a <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
	...

08009bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	817b      	strh	r3, [r7, #10]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	813b      	strh	r3, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	f040 8109 	bne.w	8009dee <HAL_I2C_Mem_Write+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HAL_I2C_Mem_Write+0x38>
 8009be2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e101      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <HAL_I2C_Mem_Write+0x4a>
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e0fa      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c02:	f7fc fe23 	bl	800684c <HAL_GetTick>
 8009c06:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	2319      	movs	r3, #25
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 fb06 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e0e5      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2221      	movs	r2, #33	@ 0x21
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2240      	movs	r2, #64	@ 0x40
 8009c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a3a      	ldr	r2, [r7, #32]
 8009c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c4c:	88f8      	ldrh	r0, [r7, #6]
 8009c4e:	893a      	ldrh	r2, [r7, #8]
 8009c50:	8979      	ldrh	r1, [r7, #10]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 fa01 	bl	800a064 <I2C_RequestMemoryWrite>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00f      	beq.n	8009c88 <HAL_I2C_Mem_Write+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d105      	bne.n	8009c7c <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e0b9      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e0b3      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2bff      	cmp	r3, #255	@ 0xff
 8009c90:	d90e      	bls.n	8009cb0 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	22ff      	movs	r2, #255	@ 0xff
 8009c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	8979      	ldrh	r1, [r7, #10]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fbd1 	bl	800a450 <I2C_TransferConfig>
 8009cae:	e00f      	b.n	8009cd0 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	8979      	ldrh	r1, [r7, #10]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 fbc0 	bl	800a450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 fae0 	bl	800a29a <I2C_WaitOnTXISFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <HAL_I2C_Mem_Write+0x140>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d101      	bne.n	8009cec <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e081      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e07f      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	1c59      	adds	r1, r3, #1
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	6251      	str	r1, [r2, #36]	@ 0x24
 8009cfa:	781a      	ldrb	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d135      	bne.n	8009d90 <HAL_I2C_Mem_Write+0x1e0>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d030      	beq.n	8009d90 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	2200      	movs	r2, #0
 8009d36:	2180      	movs	r1, #128	@ 0x80
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fa74 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e053      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2bff      	cmp	r3, #255	@ 0xff
 8009d50:	d90e      	bls.n	8009d70 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	22ff      	movs	r2, #255	@ 0xff
 8009d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	8979      	ldrh	r1, [r7, #10]
 8009d60:	2300      	movs	r3, #0
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fb71 	bl	800a450 <I2C_TransferConfig>
 8009d6e:	e00f      	b.n	8009d90 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	8979      	ldrh	r1, [r7, #10]
 8009d82:	2300      	movs	r3, #0
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fb60 	bl	800a450 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d19a      	bne.n	8009cd0 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fabb 	bl	800a31a <I2C_WaitOnSTOPFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <HAL_I2C_Mem_Write+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d101      	bne.n	8009db6 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e01c      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e01a      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6859      	ldr	r1, [r3, #4]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009df8 <HAL_I2C_Mem_Write+0x248>)
 8009dce:	400b      	ands	r3, r1
 8009dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	e000      	b.n	8009df0 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8009dee:	2302      	movs	r3, #2
  }
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	fe00e800 	.word	0xfe00e800

08009dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	817b      	strh	r3, [r7, #10]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	813b      	strh	r3, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	f040 8109 	bne.w	800a03a <HAL_I2C_Mem_Read+0x23e>
  {
    if((pData == NULL) || (Size == 0U))
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_I2C_Mem_Read+0x38>
 8009e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e101      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_I2C_Mem_Read+0x4a>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e0fa      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e4e:	f7fc fcfd 	bl	800684c <HAL_GetTick>
 8009e52:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	2319      	movs	r3, #25
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f9e0 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e0e5      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2222      	movs	r2, #34	@ 0x22
 8009e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2240      	movs	r2, #64	@ 0x40
 8009e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a3a      	ldr	r2, [r7, #32]
 8009e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e98:	88f8      	ldrh	r0, [r7, #6]
 8009e9a:	893a      	ldrh	r2, [r7, #8]
 8009e9c:	8979      	ldrh	r1, [r7, #10]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f93a 	bl	800a122 <I2C_RequestMemoryRead>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00f      	beq.n	8009ed4 <HAL_I2C_Mem_Read+0xd8>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d105      	bne.n	8009ec8 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e0b9      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e0b3      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2bff      	cmp	r3, #255	@ 0xff
 8009edc:	d90f      	bls.n	8009efe <HAL_I2C_Mem_Read+0x102>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	22ff      	movs	r2, #255	@ 0xff
 8009ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	8979      	ldrh	r1, [r7, #10]
 8009eec:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 faaa 	bl	800a450 <I2C_TransferConfig>
 8009efc:	e010      	b.n	8009f20 <HAL_I2C_Mem_Read+0x124>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	8979      	ldrh	r1, [r7, #10]
 8009f10:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fa98 	bl	800a450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	2200      	movs	r2, #0
 8009f28:	2104      	movs	r1, #4
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f97b 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <HAL_I2C_Mem_Read+0x13e>
      {
        return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e080      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	1c59      	adds	r1, r3, #1
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	6251      	str	r1, [r2, #36]	@ 0x24
 8009f4a:	b2c2      	uxtb	r2, r0
 8009f4c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d135      	bne.n	8009fdc <HAL_I2C_Mem_Read+0x1e0>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d030      	beq.n	8009fdc <HAL_I2C_Mem_Read+0x1e0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	2200      	movs	r2, #0
 8009f82:	2180      	movs	r1, #128	@ 0x80
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f94e 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_I2C_Mem_Read+0x198>
        {
          return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e053      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2bff      	cmp	r3, #255	@ 0xff
 8009f9c:	d90e      	bls.n	8009fbc <HAL_I2C_Mem_Read+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	22ff      	movs	r2, #255	@ 0xff
 8009fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	8979      	ldrh	r1, [r7, #10]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fa4b 	bl	800a450 <I2C_TransferConfig>
 8009fba:	e00f      	b.n	8009fdc <HAL_I2C_Mem_Read+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	8979      	ldrh	r1, [r7, #10]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 fa3a 	bl	800a450 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d19c      	bne.n	8009f20 <HAL_I2C_Mem_Read+0x124>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f995 	bl	800a31a <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <HAL_I2C_Mem_Read+0x20a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d101      	bne.n	800a002 <HAL_I2C_Mem_Read+0x206>
      {
        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e01c      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e01a      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2220      	movs	r2, #32
 800a00c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6859      	ldr	r1, [r3, #4]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	4b0a      	ldr	r3, [pc, #40]	@ (800a044 <HAL_I2C_Mem_Read+0x248>)
 800a01a:	400b      	ands	r3, r1
 800a01c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	e000      	b.n	800a03c <HAL_I2C_Mem_Read+0x240>
  }
  else
  {
    return HAL_BUSY;
 800a03a:	2302      	movs	r3, #2
  }
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	fe00e800 	.word	0xfe00e800

0800a048 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a056:	b2db      	uxtb	r3, r3
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af02      	add	r7, sp, #8
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	4608      	mov	r0, r1
 800a06e:	4611      	mov	r1, r2
 800a070:	461a      	mov	r2, r3
 800a072:	4603      	mov	r3, r0
 800a074:	817b      	strh	r3, [r7, #10]
 800a076:	460b      	mov	r3, r1
 800a078:	813b      	strh	r3, [r7, #8]
 800a07a:	4613      	mov	r3, r2
 800a07c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	b2da      	uxtb	r2, r3
 800a082:	8979      	ldrh	r1, [r7, #10]
 800a084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 f9de 	bl	800a450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	69b9      	ldr	r1, [r7, #24]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f8fe 	bl	800a29a <I2C_WaitOnTXISFlagUntilTimeout>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d007      	beq.n	800a0b4 <I2C_RequestMemoryWrite+0x50>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d101      	bne.n	800a0b0 <I2C_RequestMemoryWrite+0x4c>
    {
      return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e034      	b.n	800a11a <I2C_RequestMemoryWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e032      	b.n	800a11a <I2C_RequestMemoryWrite+0xb6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d105      	bne.n	800a0c6 <I2C_RequestMemoryWrite+0x62>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ba:	893b      	ldrh	r3, [r7, #8]
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0c4:	e01b      	b.n	800a0fe <I2C_RequestMemoryWrite+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0c6:	893b      	ldrh	r3, [r7, #8]
 800a0c8:	0a1b      	lsrs	r3, r3, #8
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	69b9      	ldr	r1, [r7, #24]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f8de 	bl	800a29a <I2C_WaitOnTXISFlagUntilTimeout>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <I2C_RequestMemoryWrite+0x90>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d101      	bne.n	800a0f0 <I2C_RequestMemoryWrite+0x8c>
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e014      	b.n	800a11a <I2C_RequestMemoryWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e012      	b.n	800a11a <I2C_RequestMemoryWrite+0xb6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0f4:	893b      	ldrh	r3, [r7, #8]
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2200      	movs	r2, #0
 800a106:	2180      	movs	r1, #128	@ 0x80
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f88c 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <I2C_RequestMemoryWrite+0xb4>
  {
    return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e000      	b.n	800a11a <I2C_RequestMemoryWrite+0xb6>
  }

return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af02      	add	r7, sp, #8
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	461a      	mov	r2, r3
 800a130:	4603      	mov	r3, r0
 800a132:	817b      	strh	r3, [r7, #10]
 800a134:	460b      	mov	r3, r1
 800a136:	813b      	strh	r3, [r7, #8]
 800a138:	4613      	mov	r3, r2
 800a13a:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a13c:	88fb      	ldrh	r3, [r7, #6]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	8979      	ldrh	r1, [r7, #10]
 800a142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	2300      	movs	r3, #0
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 f980 	bl	800a450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	69b9      	ldr	r1, [r7, #24]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f8a0 	bl	800a29a <I2C_WaitOnTXISFlagUntilTimeout>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <I2C_RequestMemoryRead+0x4e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a164:	2b04      	cmp	r3, #4
 800a166:	d101      	bne.n	800a16c <I2C_RequestMemoryRead+0x4a>
    {
      return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e034      	b.n	800a1d6 <I2C_RequestMemoryRead+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e032      	b.n	800a1d6 <I2C_RequestMemoryRead+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a170:	88fb      	ldrh	r3, [r7, #6]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d105      	bne.n	800a182 <I2C_RequestMemoryRead+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a176:	893b      	ldrh	r3, [r7, #8]
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a180:	e01b      	b.n	800a1ba <I2C_RequestMemoryRead+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a182:	893b      	ldrh	r3, [r7, #8]
 800a184:	0a1b      	lsrs	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	69b9      	ldr	r1, [r7, #24]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f880 	bl	800a29a <I2C_WaitOnTXISFlagUntilTimeout>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <I2C_RequestMemoryRead+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d101      	bne.n	800a1ac <I2C_RequestMemoryRead+0x8a>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e014      	b.n	800a1d6 <I2C_RequestMemoryRead+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e012      	b.n	800a1d6 <I2C_RequestMemoryRead+0xb4>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b0:	893b      	ldrh	r3, [r7, #8]
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2140      	movs	r1, #64	@ 0x40
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 f82e 	bl	800a226 <I2C_WaitOnFlagUntilTimeout>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <I2C_RequestMemoryRead+0xb2>
  {
    return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e000      	b.n	800a1d6 <I2C_RequestMemoryRead+0xb4>
  }
  
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d103      	bne.n	800a1fc <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b01      	cmp	r3, #1
 800a208:	d007      	beq.n	800a21a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699a      	ldr	r2, [r3, #24]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	619a      	str	r2, [r3, #24]
  }
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	603b      	str	r3, [r7, #0]
 800a232:	4613      	mov	r3, r2
 800a234:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a236:	e01c      	b.n	800a272 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d018      	beq.n	800a272 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a246:	f7fc fb01 	bl	800684c <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d20d      	bcs.n	800a272 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2220      	movs	r2, #32
 800a25a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e00f      	b.n	800a292 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	699a      	ldr	r2, [r3, #24]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4013      	ands	r3, r2
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	429a      	cmp	r2, r3
 800a280:	bf0c      	ite	eq
 800a282:	2301      	moveq	r3, #1
 800a284:	2300      	movne	r3, #0
 800a286:	b2db      	uxtb	r3, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d0d3      	beq.n	800a238 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2a6:	e02c      	b.n	800a302 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f871 	bl	800a394 <I2C_IsAcknowledgeFailed>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e02a      	b.n	800a312 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d01e      	beq.n	800a302 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a2ca:	f7fc fabf 	bl	800684c <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d213      	bcs.n	800a302 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2de:	f043 0220 	orr.w	r2, r3, #32
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e007      	b.n	800a312 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d1cb      	bne.n	800a2a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a326:	e028      	b.n	800a37a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 f831 	bl	800a394 <I2C_IsAcknowledgeFailed>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d001      	beq.n	800a33c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e026      	b.n	800a38a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a342:	f7fc fa83 	bl	800684c <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d213      	bcs.n	800a37a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a356:	f043 0220 	orr.w	r2, r3, #32
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2220      	movs	r2, #32
 800a362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e007      	b.n	800a38a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b20      	cmp	r3, #32
 800a386:	d1cf      	bne.n	800a328 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d148      	bne.n	800a440 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3ae:	e01c      	b.n	800a3ea <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d018      	beq.n	800a3ea <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <I2C_IsAcknowledgeFailed+0x3a>
 800a3be:	f7fc fa45 	bl	800684c <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d20d      	bcs.n	800a3ea <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e02b      	b.n	800a442 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	d1db      	bne.n	800a3b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2210      	movs	r2, #16
 800a3fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2220      	movs	r2, #32
 800a406:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f7ff fee8 	bl	800a1de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6859      	ldr	r1, [r3, #4]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	4b0c      	ldr	r3, [pc, #48]	@ (800a44c <I2C_IsAcknowledgeFailed+0xb8>)
 800a41a:	400b      	ands	r3, r1
 800a41c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2204      	movs	r2, #4
 800a422:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2220      	movs	r2, #32
 800a428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	fe00e800 	.word	0xfe00e800

0800a450 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	607b      	str	r3, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	817b      	strh	r3, [r7, #10]
 800a45e:	4613      	mov	r3, r2
 800a460:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <I2C_TransferConfig+0x58>)
 800a472:	4013      	ands	r3, r2
 800a474:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a476:	897b      	ldrh	r3, [r7, #10]
 800a478:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a47c:	7a7b      	ldrb	r3, [r7, #9]
 800a47e:	041b      	lsls	r3, r3, #16
 800a480:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a484:	431a      	orrs	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	431a      	orrs	r2, r3
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	605a      	str	r2, [r3, #4]
}
 800a49c:	bf00      	nop
 800a49e:	371c      	adds	r7, #28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	fc009800 	.word	0xfc009800

0800a4ac <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e0c7      	b.n	800a656 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f8c2 	bl	800a664 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a4f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6999      	ldr	r1, [r3, #24]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a50c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6899      	ldr	r1, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	4b4e      	ldr	r3, [pc, #312]	@ (800a660 <HAL_LTDC_Init+0x1b4>)
 800a528:	400b      	ands	r3, r1
 800a52a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	041b      	lsls	r3, r3, #16
 800a532:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6899      	ldr	r1, [r3, #8]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699a      	ldr	r2, [r3, #24]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68d9      	ldr	r1, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	4b42      	ldr	r3, [pc, #264]	@ (800a660 <HAL_LTDC_Init+0x1b4>)
 800a556:	400b      	ands	r3, r1
 800a558:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	041b      	lsls	r3, r3, #16
 800a560:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68d9      	ldr	r1, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1a      	ldr	r2, [r3, #32]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	430a      	orrs	r2, r1
 800a576:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6919      	ldr	r1, [r3, #16]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b37      	ldr	r3, [pc, #220]	@ (800a660 <HAL_LTDC_Init+0x1b4>)
 800a584:	400b      	ands	r3, r1
 800a586:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	041b      	lsls	r3, r3, #16
 800a58e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6919      	ldr	r1, [r3, #16]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6959      	ldr	r1, [r3, #20]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a660 <HAL_LTDC_Init+0x1b4>)
 800a5b2:	400b      	ands	r3, r1
 800a5b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6959      	ldr	r1, [r3, #20]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a5da:	021b      	lsls	r3, r3, #8
 800a5dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a5e4:	041b      	lsls	r3, r3, #16
 800a5e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0204 	orr.w	r2, r2, #4
 800a622:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0202 	orr.w	r2, r2, #2
 800a632:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	f000f800 	.word	0xf000f800

0800a664 <HAL_LTDC_MspInit>:
  * @param  hltdc : pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800a678:	b5b0      	push	{r4, r5, r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <HAL_LTDC_ConfigLayer+0x1a>
 800a68e:	2302      	movs	r3, #2
 800a690:	e02c      	b.n	800a6ec <HAL_LTDC_ConfigLayer+0x74>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2134      	movs	r1, #52	@ 0x34
 800a6a8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	461d      	mov	r5, r3
 800a6b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 f811 	bl	800a6f4 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bdb0      	pop	{r4, r5, r7, pc}

0800a6f4 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b089      	sub	sp, #36	@ 0x24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a71c:	4413      	add	r3, r2
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	01db      	lsls	r3, r3, #7
 800a72c:	4413      	add	r3, r2
 800a72e:	3384      	adds	r3, #132	@ 0x84
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	4611      	mov	r1, r2
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	01d2      	lsls	r2, r2, #7
 800a73c:	440a      	add	r2, r1
 800a73e:	3284      	adds	r2, #132	@ 0x84
 800a740:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a744:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	0c1b      	lsrs	r3, r3, #16
 800a752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a756:	4413      	add	r3, r2
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4619      	mov	r1, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	01db      	lsls	r3, r3, #7
 800a764:	440b      	add	r3, r1
 800a766:	3384      	adds	r3, #132	@ 0x84
 800a768:	4619      	mov	r1, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a77e:	4413      	add	r3, r2
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	01db      	lsls	r3, r3, #7
 800a78e:	4413      	add	r3, r2
 800a790:	3384      	adds	r3, #132	@ 0x84
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	4611      	mov	r1, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	01d2      	lsls	r2, r2, #7
 800a79e:	440a      	add	r2, r1
 800a7a0:	3284      	adds	r2, #132	@ 0x84
 800a7a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a7a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7b6:	4413      	add	r3, r2
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	01db      	lsls	r3, r3, #7
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3384      	adds	r3, #132	@ 0x84
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	01db      	lsls	r3, r3, #7
 800a7da:	4413      	add	r3, r2
 800a7dc:	3384      	adds	r3, #132	@ 0x84
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	01d2      	lsls	r2, r2, #7
 800a7ea:	440a      	add	r2, r1
 800a7ec:	3284      	adds	r2, #132	@ 0x84
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	01db      	lsls	r3, r3, #7
 800a7fe:	4413      	add	r3, r2
 800a800:	3384      	adds	r3, #132	@ 0x84
 800a802:	461a      	mov	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	061b      	lsls	r3, r3, #24
 800a824:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	01db      	lsls	r3, r3, #7
 800a830:	4413      	add	r3, r2
 800a832:	3384      	adds	r3, #132	@ 0x84
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	01db      	lsls	r3, r3, #7
 800a840:	4413      	add	r3, r2
 800a842:	3384      	adds	r3, #132	@ 0x84
 800a844:	461a      	mov	r2, r3
 800a846:	2300      	movs	r3, #0
 800a848:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a850:	461a      	mov	r2, r3
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	431a      	orrs	r2, r3
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	431a      	orrs	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	01db      	lsls	r3, r3, #7
 800a864:	440b      	add	r3, r1
 800a866:	3384      	adds	r3, #132	@ 0x84
 800a868:	4619      	mov	r1, r3
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	01db      	lsls	r3, r3, #7
 800a87a:	4413      	add	r3, r2
 800a87c:	3384      	adds	r3, #132	@ 0x84
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	4611      	mov	r1, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	01d2      	lsls	r2, r2, #7
 800a88a:	440a      	add	r2, r1
 800a88c:	3284      	adds	r2, #132	@ 0x84
 800a88e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a892:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	01db      	lsls	r3, r3, #7
 800a89e:	4413      	add	r3, r2
 800a8a0:	3384      	adds	r3, #132	@ 0x84
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	01db      	lsls	r3, r3, #7
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3384      	adds	r3, #132	@ 0x84
 800a8b8:	69da      	ldr	r2, [r3, #28]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	01db      	lsls	r3, r3, #7
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3384      	adds	r3, #132	@ 0x84
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4b58      	ldr	r3, [pc, #352]	@ (800aa2c <LTDC_SetConfig+0x338>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	69da      	ldr	r2, [r3, #28]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	68f9      	ldr	r1, [r7, #12]
 800a8da:	6809      	ldr	r1, [r1, #0]
 800a8dc:	4608      	mov	r0, r1
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	01c9      	lsls	r1, r1, #7
 800a8e2:	4401      	add	r1, r0
 800a8e4:	3184      	adds	r1, #132	@ 0x84
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	01db      	lsls	r3, r3, #7
 800a8f4:	4413      	add	r3, r2
 800a8f6:	3384      	adds	r3, #132	@ 0x84
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	01db      	lsls	r3, r3, #7
 800a904:	4413      	add	r3, r2
 800a906:	3384      	adds	r3, #132	@ 0x84
 800a908:	461a      	mov	r2, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	01db      	lsls	r3, r3, #7
 800a918:	4413      	add	r3, r2
 800a91a:	3384      	adds	r3, #132	@ 0x84
 800a91c:	461a      	mov	r2, r3
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a922:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 800a92c:	2304      	movs	r3, #4
 800a92e:	61fb      	str	r3, [r7, #28]
 800a930:	e01b      	b.n	800a96a <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d102      	bne.n	800a940 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 800a93a:	2303      	movs	r3, #3
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	e014      	b.n	800a96a <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b04      	cmp	r3, #4
 800a946:	d00b      	beq.n	800a960 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d007      	beq.n	800a960 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a954:	2b03      	cmp	r3, #3
 800a956:	d003      	beq.n	800a960 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a95c:	2b07      	cmp	r3, #7
 800a95e:	d102      	bne.n	800a966 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 800a960:	2302      	movs	r3, #2
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e001      	b.n	800a96a <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 800a966:	2301      	movs	r3, #1
 800a968:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	01db      	lsls	r3, r3, #7
 800a974:	4413      	add	r3, r2
 800a976:	3384      	adds	r3, #132	@ 0x84
 800a978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	4611      	mov	r1, r2
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	01d2      	lsls	r2, r2, #7
 800a984:	440a      	add	r2, r1
 800a986:	3284      	adds	r2, #132	@ 0x84
 800a988:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a98c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	69fa      	ldr	r2, [r7, #28]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	041a      	lsls	r2, r3, #16
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	6859      	ldr	r1, [r3, #4]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	1acb      	subs	r3, r1, r3
 800a9a4:	69f9      	ldr	r1, [r7, #28]
 800a9a6:	fb01 f303 	mul.w	r3, r1, r3
 800a9aa:	3303      	adds	r3, #3
 800a9ac:	68f9      	ldr	r1, [r7, #12]
 800a9ae:	6809      	ldr	r1, [r1, #0]
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	01c9      	lsls	r1, r1, #7
 800a9b6:	4401      	add	r1, r0
 800a9b8:	3184      	adds	r1, #132	@ 0x84
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	01db      	lsls	r3, r3, #7
 800a9c8:	4413      	add	r3, r2
 800a9ca:	3384      	adds	r3, #132	@ 0x84
 800a9cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	01db      	lsls	r3, r3, #7
 800a9d8:	440b      	add	r3, r1
 800a9da:	3384      	adds	r3, #132	@ 0x84
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4b14      	ldr	r3, [pc, #80]	@ (800aa30 <LTDC_SetConfig+0x33c>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	01db      	lsls	r3, r3, #7
 800a9ee:	4413      	add	r3, r2
 800a9f0:	3384      	adds	r3, #132	@ 0x84
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	01db      	lsls	r3, r3, #7
 800aa04:	4413      	add	r3, r2
 800aa06:	3384      	adds	r3, #132	@ 0x84
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	4611      	mov	r1, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	01d2      	lsls	r2, r2, #7
 800aa14:	440a      	add	r2, r1
 800aa16:	3284      	adds	r2, #132	@ 0x84
 800aa18:	f043 0301 	orr.w	r3, r3, #1
 800aa1c:	6013      	str	r3, [r2, #0]
}
 800aa1e:	bf00      	nop
 800aa20:	3724      	adds	r7, #36	@ 0x24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	fffff8f8 	.word	0xfffff8f8
 800aa30:	fffff800 	.word	0xfffff800

0800aa34 <HAL_LTDC_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_StructInitFromVideoConfig(LTDC_HandleTypeDef* hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */
  
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_LTDC_StructInitFromVideoConfig+0x16>
 800aa46:	2200      	movs	r2, #0
 800aa48:	e001      	b.n	800aa4e <HAL_LTDC_StructInitFromVideoConfig+0x1a>
 800aa4a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d102      	bne.n	800aa60 <HAL_LTDC_StructInitFromVideoConfig+0x2c>
 800aa5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aa5e:	e000      	b.n	800aa62 <HAL_LTDC_StructInitFromVideoConfig+0x2e>
 800aa60:	2200      	movs	r2, #0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d102      	bne.n	800aa74 <HAL_LTDC_StructInitFromVideoConfig+0x40>
 800aa6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa72:	e000      	b.n	800aa76 <HAL_LTDC_StructInitFromVideoConfig+0x42>
 800aa74:	2200      	movs	r2, #0
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */
    
  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8c:	4413      	add	r3, r2
 800aa8e:	1e5a      	subs	r2, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9c:	441a      	add	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa2:	4413      	add	r3, r2
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab2:	441a      	add	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab8:	441a      	add	r2, r3
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aabe:	4413      	add	r3, r2
 800aac0:	1e5a      	subs	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	631a      	str	r2, [r3, #48]	@ 0x30
  
  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
 
}
 800aad8:	bf00      	nop
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
	...

0800aae4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aaee:	4b23      	ldr	r3, [pc, #140]	@ (800ab7c <HAL_PWREx_EnableOverDrive+0x98>)
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf2:	4a22      	ldr	r2, [pc, #136]	@ (800ab7c <HAL_PWREx_EnableOverDrive+0x98>)
 800aaf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaf8:	6413      	str	r3, [r2, #64]	@ 0x40
 800aafa:	4b20      	ldr	r3, [pc, #128]	@ (800ab7c <HAL_PWREx_EnableOverDrive+0x98>)
 800aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ab06:	4b1e      	ldr	r3, [pc, #120]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a1d      	ldr	r2, [pc, #116]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab12:	f7fb fe9b 	bl	800684c <HAL_GetTick>
 800ab16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ab18:	e009      	b.n	800ab2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ab1a:	f7fb fe97 	bl	800684c <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ab28:	d901      	bls.n	800ab2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e022      	b.n	800ab74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ab2e:	4b14      	ldr	r3, [pc, #80]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab3a:	d1ee      	bne.n	800ab1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ab3c:	4b10      	ldr	r3, [pc, #64]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a0f      	ldr	r2, [pc, #60]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab48:	f7fb fe80 	bl	800684c <HAL_GetTick>
 800ab4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab4e:	e009      	b.n	800ab64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ab50:	f7fb fe7c 	bl	800684c <HAL_GetTick>
 800ab54:	4602      	mov	r2, r0
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ab5e:	d901      	bls.n	800ab64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e007      	b.n	800ab74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ab64:	4b06      	ldr	r3, [pc, #24]	@ (800ab80 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab70:	d1ee      	bne.n	800ab50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	40023800 	.word	0x40023800
 800ab80:	40007000 	.word	0x40007000

0800ab84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi: qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800ab90:	f7fb fe5c 	bl	800684c <HAL_GetTick>
 800ab94:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e073      	b.n	800ac88 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_QSPI_Init+0x2c>
 800abac:	2302      	movs	r3, #2
 800abae:	e06b      	b.n	800ac88 <HAL_QSPI_Init+0x104>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10b      	bne.n	800abdc <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
     
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f893 	bl	800acf8 <HAL_QSPI_MspInit>
             
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800abd2:	f241 3188 	movw	r1, #5000	@ 0x1388
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fb0a 	bl	800b1f0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	3b01      	subs	r3, #1
 800abec:	021a      	lsls	r2, r3, #8
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2200      	movs	r2, #0
 800ac00:	2120      	movs	r1, #32
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fb02 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d135      	bne.n	800ac7e <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b1d      	ldr	r3, [pc, #116]	@ (800ac90 <HAL_QSPI_Init+0x10c>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6852      	ldr	r2, [r2, #4]
 800ac20:	0611      	lsls	r1, r2, #24
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	68d2      	ldr	r2, [r2, #12]
 800ac26:	4311      	orrs	r1, r2
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	69d2      	ldr	r2, [r2, #28]
 800ac2c:	4311      	orrs	r1, r2
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6a12      	ldr	r2, [r2, #32]
 800ac32:	4311      	orrs	r1, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	4b14      	ldr	r3, [pc, #80]	@ (800ac94 <HAL_QSPI_Init+0x110>)
 800ac44:	4013      	ands	r3, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6912      	ldr	r2, [r2, #16]
 800ac4a:	0411      	lsls	r1, r2, #16
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6952      	ldr	r2, [r2, #20]
 800ac50:	4311      	orrs	r1, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	6992      	ldr	r2, [r2, #24]
 800ac56:	4311      	orrs	r1, r2
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6812      	ldr	r2, [r2, #0]
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	00ffff2f 	.word	0x00ffff2f
 800ac94:	ffe0f8fe 	.word	0xffe0f8fe

0800ac98 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi: qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e022      	b.n	800acf0 <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <HAL_QSPI_DeInit+0x22>
 800acb6:	2302      	movs	r3, #2
 800acb8:	e01a      	b.n	800acf0 <HAL_QSPI_DeInit+0x58>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f81a 	bl	800ad0c <HAL_QSPI_MspDeInit>

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_QSPI_MspInit>:
  * @brief QSPI MSP Init
  * @param hqspi: QSPI handle
  * @retval None
  */
 __weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */ 
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_QSPI_MspDeInit>:
  * @brief QSPI MSP DeInit
  * @param hqspi: QSPI handle
  * @retval None
  */
 __weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */ 
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_QSPI_Command>:
  * @param Timeout : Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800ad30:	f7fb fd8c 	bl	800684c <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d101      	bne.n	800ad46 <HAL_QSPI_Command+0x26>
 800ad42:	2302      	movs	r3, #2
 800ad44:	e048      	b.n	800add8 <HAL_QSPI_Command+0xb8>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d137      	bne.n	800adca <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2120      	movs	r1, #32
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fa4a 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d125      	bne.n	800adce <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ad82:	2200      	movs	r2, #0
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fa77 	bl	800b27a <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d115      	bne.n	800adc0 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	2102      	movs	r1, #2
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 fa34 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800ada4:	4603      	mov	r3, r0
 800ada6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10f      	bne.n	800adce <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2202      	movs	r2, #2
 800adb4:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adbe:	e006      	b.n	800adce <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800adc8:	e001      	b.n	800adce <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800adca:	2302      	movs	r3, #2
 800adcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800add6:	7dfb      	ldrb	r3, [r7, #23]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_QSPI_Transmit>:
  * @param Timeout : Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	@ 0x28
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800adf0:	f7fb fd2c 	bl	800684c <HAL_GetTick>
 800adf4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3320      	adds	r3, #32
 800adfc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <HAL_QSPI_Transmit+0x2e>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e074      	b.n	800aef8 <HAL_QSPI_Transmit+0x118>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d163      	bne.n	800aeea <HAL_QSPI_Transmit+0x10a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d054      	beq.n	800aed8 <HAL_QSPI_Transmit+0xf8>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2212      	movs	r2, #18
 800ae32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	625a      	str	r2, [r3, #36]	@ 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	695a      	ldr	r2, [r3, #20]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800ae62:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 800ae64:	e019      	b.n	800ae9a <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	2104      	movs	r1, #4
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 f9cb 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800ae76:	4603      	mov	r3, r0
 800ae78:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ae7a:	7ffb      	ldrb	r3, [r7, #31]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d111      	bne.n	800aea4 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae84:	1c59      	adds	r1, r3, #1
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	6251      	str	r1, [r2, #36]	@ 0x24
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e1      	bne.n	800ae66 <HAL_QSPI_Transmit+0x86>
 800aea2:	e000      	b.n	800aea6 <HAL_QSPI_Transmit+0xc6>
          break;
 800aea4:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800aea6:	7ffb      	ldrb	r3, [r7, #31]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d110      	bne.n	800aece <HAL_QSPI_Transmit+0xee>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2102      	movs	r1, #2
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 f9a8 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800aebc:	4603      	mov	r3, r0
 800aebe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aec0:	7ffb      	ldrb	r3, [r7, #31]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <HAL_QSPI_Transmit+0xee>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2202      	movs	r2, #2
 800aecc:	60da      	str	r2, [r3, #12]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aed6:	e00a      	b.n	800aeee <HAL_QSPI_Transmit+0x10e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aedc:	f043 0208 	orr.w	r2, r3, #8
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	77fb      	strb	r3, [r7, #31]
 800aee8:	e001      	b.n	800aeee <HAL_QSPI_Transmit+0x10e>
    }
  }
  else
  {
    status = HAL_BUSY;
 800aeea:	2302      	movs	r3, #2
 800aeec:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800aef6:	7ffb      	ldrb	r3, [r7, #31]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_QSPI_Receive>:
  * @param Timeout : Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	@ 0x28
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800af10:	f7fb fc9c 	bl	800684c <HAL_GetTick>
 800af14:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3320      	adds	r3, #32
 800af24:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_QSPI_Receive+0x36>
 800af32:	2302      	movs	r3, #2
 800af34:	e07b      	b.n	800b02e <HAL_QSPI_Receive+0x12e>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b01      	cmp	r3, #1
 800af48:	d16a      	bne.n	800b020 <HAL_QSPI_Receive+0x120>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	645a      	str	r2, [r3, #68]	@ 0x44
    if(pData != NULL )
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d05b      	beq.n	800b00e <HAL_QSPI_Receive+0x10e>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2222      	movs	r2, #34	@ 0x22
 800af5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800af8e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 800af98:	e01a      	b.n	800afd0 <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	2201      	movs	r2, #1
 800afa2:	2106      	movs	r1, #6
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f931 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800afaa:	4603      	mov	r3, r0
 800afac:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800afae:	7ffb      	ldrb	r3, [r7, #31]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d112      	bne.n	800afda <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb8:	1c59      	adds	r1, r3, #1
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	6311      	str	r1, [r2, #48]	@ 0x30
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	7812      	ldrb	r2, [r2, #0]
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afca:	1e5a      	subs	r2, r3, #1
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1e0      	bne.n	800af9a <HAL_QSPI_Receive+0x9a>
 800afd8:	e000      	b.n	800afdc <HAL_QSPI_Receive+0xdc>
          break;
 800afda:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800afdc:	7ffb      	ldrb	r3, [r7, #31]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d110      	bne.n	800b004 <HAL_QSPI_Receive+0x104>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2201      	movs	r2, #1
 800afea:	2102      	movs	r1, #2
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f90d 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800aff6:	7ffb      	ldrb	r3, [r7, #31]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <HAL_QSPI_Receive+0x104>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2202      	movs	r2, #2
 800b002:	60da      	str	r2, [r3, #12]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b00c:	e00a      	b.n	800b024 <HAL_QSPI_Receive+0x124>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b012:	f043 0208 	orr.w	r2, r3, #8
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e001      	b.n	800b024 <HAL_QSPI_Receive+0x124>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b020:	2302      	movs	r3, #2
 800b022:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800b02c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b088      	sub	sp, #32
 800b03a:	af02      	add	r7, sp, #8
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800b048:	f7fb fc00 	bl	800684c <HAL_GetTick>
 800b04c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_QSPI_AutoPolling+0x28>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e060      	b.n	800b120 <HAL_QSPI_AutoPolling+0xea>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d14f      	bne.n	800b112 <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2242      	movs	r2, #66	@ 0x42
 800b07c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2200      	movs	r2, #0
 800b088:	2120      	movs	r1, #32
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 f8be 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800b090:	4603      	mov	r3, r0
 800b092:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d13d      	bne.n	800b116 <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	6852      	ldr	r2, [r2, #4]
 800b0ac:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6892      	ldr	r2, [r2, #8]
 800b0b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800b0d0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b0da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b0de:	68b9      	ldr	r1, [r7, #8]
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f8ca 	bl	800b27a <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	2108      	movs	r1, #8
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f88b 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2208      	movs	r2, #8
 800b106:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b110:	e001      	b.n	800b116 <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800b112:	2302      	movs	r3, #2
 800b114:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  /* Return function status */
  return status;  
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_QSPI_MemoryMapped>:
  * @param  cfg: structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 800b138:	f7fb fb88 	bl	800684c <HAL_GetTick>
 800b13c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b01      	cmp	r3, #1
 800b148:	d101      	bne.n	800b14e <HAL_QSPI_MemoryMapped+0x26>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e04c      	b.n	800b1e8 <HAL_QSPI_MemoryMapped+0xc0>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d13b      	bne.n	800b1da <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2282      	movs	r2, #130	@ 0x82
 800b16c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2200      	movs	r2, #0
 800b17a:	2120      	movs	r1, #32
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f845 	bl	800b20c <QSPI_WaitFlagStateUntilTimeout>
 800b182:	4603      	mov	r3, r0
 800b184:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d128      	bne.n	800b1de <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f023 0108 	bic.w	r1, r3, #8
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	d110      	bne.n	800b1cc <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	631a      	str	r2, [r3, #48]	@ 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2210      	movs	r2, #16
 800b1ba:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b1ca:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b1cc:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f851 	bl	800b27a <QSPI_Config>
 800b1d8:	e001      	b.n	800b1de <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 800b1da:	2302      	movs	r3, #2
 800b1dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  /* Return function status */
  return status;  
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi: QSPI handle.
  * @param  Timeout: Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	603b      	str	r3, [r7, #0]
 800b218:	4613      	mov	r3, r2
 800b21a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b21c:	e01a      	b.n	800b254 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b224:	d016      	beq.n	800b254 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d007      	beq.n	800b23c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b22c:	f7fb fb0e 	bl	800684c <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d20b      	bcs.n	800b254 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2204      	movs	r2, #4
 800b240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b248:	f043 0201 	orr.w	r2, r3, #1
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e00e      	b.n	800b272 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4013      	ands	r3, r2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bf14      	ite	ne
 800b262:	2301      	movne	r3, #1
 800b264:	2300      	moveq	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	461a      	mov	r2, r3
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d1d6      	bne.n	800b21e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b085      	sub	sp, #20
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <QSPI_Config+0x28>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b294:	d005      	beq.n	800b2a2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3a01      	subs	r2, #1
 800b2a0:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 80b9 	beq.w	800b41e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d05f      	beq.n	800b374 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	6892      	ldr	r2, [r2, #8]
 800b2bc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d031      	beq.n	800b32a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	049b      	lsls	r3, r3, #18
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	431a      	orrs	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	431a      	orrs	r2, r3
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	ea42 0103 	orr.w	r1, r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	430a      	orrs	r2, r1
 800b312:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b31a:	f000 812e 	beq.w	800b57a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	6852      	ldr	r2, [r2, #4]
 800b326:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b328:	e127      	b.n	800b57a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b332:	431a      	orrs	r2, r3
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b338:	431a      	orrs	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b33e:	431a      	orrs	r2, r3
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	049b      	lsls	r3, r3, #18
 800b346:	431a      	orrs	r2, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	431a      	orrs	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	431a      	orrs	r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	431a      	orrs	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	ea42 0103 	orr.w	r1, r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	430a      	orrs	r2, r1
 800b370:	615a      	str	r2, [r3, #20]
}
 800b372:	e102      	b.n	800b57a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d02e      	beq.n	800b3da <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b384:	431a      	orrs	r2, r3
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38a:	431a      	orrs	r2, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b390:	431a      	orrs	r2, r3
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	049b      	lsls	r3, r3, #18
 800b398:	431a      	orrs	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	431a      	orrs	r2, r3
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	ea42 0103 	orr.w	r1, r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3ca:	f000 80d6 	beq.w	800b57a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	6852      	ldr	r2, [r2, #4]
 800b3d6:	619a      	str	r2, [r3, #24]
}
 800b3d8:	e0cf      	b.n	800b57a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	049b      	lsls	r3, r3, #18
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	431a      	orrs	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	431a      	orrs	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	ea42 0103 	orr.w	r1, r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	430a      	orrs	r2, r1
 800b41a:	615a      	str	r2, [r3, #20]
}
 800b41c:	e0ad      	b.n	800b57a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d058      	beq.n	800b4d8 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	6892      	ldr	r2, [r2, #8]
 800b42e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d02d      	beq.n	800b494 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b440:	431a      	orrs	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b446:	431a      	orrs	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44c:	431a      	orrs	r2, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	049b      	lsls	r3, r3, #18
 800b454:	431a      	orrs	r2, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	431a      	orrs	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	431a      	orrs	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	431a      	orrs	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	431a      	orrs	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	ea42 0103 	orr.w	r1, r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b486:	d078      	beq.n	800b57a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	6852      	ldr	r2, [r2, #4]
 800b490:	619a      	str	r2, [r3, #24]
}
 800b492:	e072      	b.n	800b57a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49c:	431a      	orrs	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	049b      	lsls	r3, r3, #18
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	ea42 0103 	orr.w	r1, r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	615a      	str	r2, [r3, #20]
}
 800b4d6:	e050      	b.n	800b57a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d02a      	beq.n	800b536 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	049b      	lsls	r3, r3, #18
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	431a      	orrs	r2, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	431a      	orrs	r2, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	431a      	orrs	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	ea42 0103 	orr.w	r1, r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	430a      	orrs	r2, r1
 800b520:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b528:	d027      	beq.n	800b57a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	6852      	ldr	r2, [r2, #4]
 800b532:	619a      	str	r2, [r3, #24]
}
 800b534:	e021      	b.n	800b57a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01d      	beq.n	800b57a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b546:	431a      	orrs	r2, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54c:	431a      	orrs	r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b552:	431a      	orrs	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	049b      	lsls	r3, r3, #18
 800b55a:	431a      	orrs	r2, r3
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	431a      	orrs	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	431a      	orrs	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	ea42 0103 	orr.w	r1, r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	430a      	orrs	r2, r1
 800b578:	615a      	str	r2, [r3, #20]
}
 800b57a:	bf00      	nop
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
	...

0800b588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b092      	sub	sp, #72	@ 0x48
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	643b      	str	r3, [r7, #64]	@ 0x40
  FlagStatus pwrclkchanged = RESET;
 800b594:	2300      	movs	r3, #0
 800b596:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8087 	beq.w	800b6b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800b5a8:	4b97      	ldr	r3, [pc, #604]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f003 030c 	and.w	r3, r3, #12
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d00c      	beq.n	800b5ce <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5b4:	4b94      	ldr	r3, [pc, #592]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 030c 	and.w	r3, r3, #12
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d112      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x5e>
 800b5c0:	4b91      	ldr	r3, [pc, #580]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5cc:	d10b      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x5e>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5ce:	4b8e      	ldr	r3, [pc, #568]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d06c      	beq.n	800b6b4 <HAL_RCC_OscConfig+0x12c>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d168      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e281      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ee:	d106      	bne.n	800b5fe <HAL_RCC_OscConfig+0x76>
 800b5f0:	4b85      	ldr	r3, [pc, #532]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a84      	ldr	r2, [pc, #528]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b5f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	e02e      	b.n	800b65c <HAL_RCC_OscConfig+0xd4>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10c      	bne.n	800b620 <HAL_RCC_OscConfig+0x98>
 800b606:	4b80      	ldr	r3, [pc, #512]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a7f      	ldr	r2, [pc, #508]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b60c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	4b7d      	ldr	r3, [pc, #500]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a7c      	ldr	r2, [pc, #496]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	e01d      	b.n	800b65c <HAL_RCC_OscConfig+0xd4>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b628:	d10c      	bne.n	800b644 <HAL_RCC_OscConfig+0xbc>
 800b62a:	4b77      	ldr	r3, [pc, #476]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a76      	ldr	r2, [pc, #472]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	4b74      	ldr	r3, [pc, #464]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a73      	ldr	r2, [pc, #460]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b63c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b640:	6013      	str	r3, [r2, #0]
 800b642:	e00b      	b.n	800b65c <HAL_RCC_OscConfig+0xd4>
 800b644:	4b70      	ldr	r3, [pc, #448]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a6f      	ldr	r2, [pc, #444]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b64a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	4b6d      	ldr	r3, [pc, #436]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a6c      	ldr	r2, [pc, #432]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b65a:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d013      	beq.n	800b68c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b664:	f7fb f8f2 	bl	800684c <HAL_GetTick>
 800b668:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b66a:	e008      	b.n	800b67e <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b66c:	f7fb f8ee 	bl	800684c <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b64      	cmp	r3, #100	@ 0x64
 800b678:	d901      	bls.n	800b67e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e235      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b67e:	4b62      	ldr	r3, [pc, #392]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0f0      	beq.n	800b66c <HAL_RCC_OscConfig+0xe4>
 800b68a:	e014      	b.n	800b6b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b68c:	f7fb f8de 	bl	800684c <HAL_GetTick>
 800b690:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b692:	e008      	b.n	800b6a6 <HAL_RCC_OscConfig+0x11e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b694:	f7fb f8da 	bl	800684c <HAL_GetTick>
 800b698:	4602      	mov	r2, r0
 800b69a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	2b64      	cmp	r3, #100	@ 0x64
 800b6a0:	d901      	bls.n	800b6a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e221      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6a6:	4b58      	ldr	r3, [pc, #352]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1f0      	bne.n	800b694 <HAL_RCC_OscConfig+0x10c>
 800b6b2:	e000      	b.n	800b6b6 <HAL_RCC_OscConfig+0x12e>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d07d      	beq.n	800b7be <HAL_RCC_OscConfig+0x236>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800b6c2:	4b51      	ldr	r3, [pc, #324]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f003 030c 	and.w	r3, r3, #12
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6ce:	4b4e      	ldr	r3, [pc, #312]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f003 030c 	and.w	r3, r3, #12
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	d126      	bne.n	800b728 <HAL_RCC_OscConfig+0x1a0>
 800b6da:	4b4b      	ldr	r3, [pc, #300]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d120      	bne.n	800b728 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6e6:	4b48      	ldr	r3, [pc, #288]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <HAL_RCC_OscConfig+0x176>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d001      	beq.n	800b6fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e1f5      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6fe:	4b42      	ldr	r3, [pc, #264]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6919      	ldr	r1, [r3, #16]
 800b70a:	23f8      	movs	r3, #248	@ 0xf8
 800b70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b710:	fa93 f3a3 	rbit	r3, r3
 800b714:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800b716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b718:	fab3 f383 	clz	r3, r3
 800b71c:	fa01 f303 	lsl.w	r3, r1, r3
 800b720:	4939      	ldr	r1, [pc, #228]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b722:	4313      	orrs	r3, r2
 800b724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b726:	e04a      	b.n	800b7be <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d02d      	beq.n	800b78c <HAL_RCC_OscConfig+0x204>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b730:	4b35      	ldr	r3, [pc, #212]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a34      	ldr	r2, [pc, #208]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b73c:	f7fb f886 	bl	800684c <HAL_GetTick>
 800b740:	6438      	str	r0, [r7, #64]	@ 0x40

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b742:	e008      	b.n	800b756 <HAL_RCC_OscConfig+0x1ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b744:	f7fb f882 	bl	800684c <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d901      	bls.n	800b756 <HAL_RCC_OscConfig+0x1ce>
          {
            return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e1c9      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b756:	4b2c      	ldr	r3, [pc, #176]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0f0      	beq.n	800b744 <HAL_RCC_OscConfig+0x1bc>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b762:	4b29      	ldr	r3, [pc, #164]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6919      	ldr	r1, [r3, #16]
 800b76e:	23f8      	movs	r3, #248	@ 0xf8
 800b770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b774:	fa93 f3a3 	rbit	r3, r3
 800b778:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77c:	fab3 f383 	clz	r3, r3
 800b780:	fa01 f303 	lsl.w	r3, r1, r3
 800b784:	4920      	ldr	r1, [pc, #128]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b786:	4313      	orrs	r3, r2
 800b788:	600b      	str	r3, [r1, #0]
 800b78a:	e018      	b.n	800b7be <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b78c:	4b1e      	ldr	r3, [pc, #120]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a1d      	ldr	r2, [pc, #116]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b792:	f023 0301 	bic.w	r3, r3, #1
 800b796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b798:	f7fb f858 	bl	800684c <HAL_GetTick>
 800b79c:	6438      	str	r0, [r7, #64]	@ 0x40
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b79e:	e008      	b.n	800b7b2 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7a0:	f7fb f854 	bl	800684c <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d901      	bls.n	800b7b2 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e19b      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7b2:	4b15      	ldr	r3, [pc, #84]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0302 	and.w	r3, r3, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f0      	bne.n	800b7a0 <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0308 	and.w	r3, r3, #8
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d039      	beq.n	800b83e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d01c      	beq.n	800b80c <HAL_RCC_OscConfig+0x284>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7d6:	4a0c      	ldr	r2, [pc, #48]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b7d8:	f043 0301 	orr.w	r3, r3, #1
 800b7dc:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7de:	f7fb f835 	bl	800684c <HAL_GetTick>
 800b7e2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7e4:	e008      	b.n	800b7f8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b7e6:	f7fb f831 	bl	800684c <HAL_GetTick>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d901      	bls.n	800b7f8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e178      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7f8:	4b03      	ldr	r3, [pc, #12]	@ (800b808 <HAL_RCC_OscConfig+0x280>)
 800b7fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7fc:	f003 0302 	and.w	r3, r3, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0f0      	beq.n	800b7e6 <HAL_RCC_OscConfig+0x25e>
 800b804:	e01b      	b.n	800b83e <HAL_RCC_OscConfig+0x2b6>
 800b806:	bf00      	nop
 800b808:	40023800 	.word	0x40023800
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b80c:	4b9e      	ldr	r3, [pc, #632]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b80e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b810:	4a9d      	ldr	r2, [pc, #628]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	6753      	str	r3, [r2, #116]	@ 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b818:	f7fb f818 	bl	800684c <HAL_GetTick>
 800b81c:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b81e:	e008      	b.n	800b832 <HAL_RCC_OscConfig+0x2aa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b820:	f7fb f814 	bl	800684c <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d901      	bls.n	800b832 <HAL_RCC_OscConfig+0x2aa>
        {
          return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e15b      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b832:	4b95      	ldr	r3, [pc, #596]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1f0      	bne.n	800b820 <HAL_RCC_OscConfig+0x298>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 0304 	and.w	r3, r3, #4
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 80a6 	beq.w	800b998 <HAL_RCC_OscConfig+0x410>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b84c:	4b8e      	ldr	r3, [pc, #568]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10e      	bne.n	800b876 <HAL_RCC_OscConfig+0x2ee>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b858:	4b8b      	ldr	r3, [pc, #556]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85c:	4a8a      	ldr	r2, [pc, #552]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b85e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b862:	6413      	str	r3, [r2, #64]	@ 0x40
 800b864:	4b88      	ldr	r3, [pc, #544]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b870:	2301      	movs	r3, #1
 800b872:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b876:	4b85      	ldr	r3, [pc, #532]	@ (800ba8c <HAL_RCC_OscConfig+0x504>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d118      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x32c>
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b882:	4b82      	ldr	r3, [pc, #520]	@ (800ba8c <HAL_RCC_OscConfig+0x504>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a81      	ldr	r2, [pc, #516]	@ (800ba8c <HAL_RCC_OscConfig+0x504>)
 800b888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b88c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b88e:	f7fa ffdd 	bl	800684c <HAL_GetTick>
 800b892:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b894:	e008      	b.n	800b8a8 <HAL_RCC_OscConfig+0x320>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b896:	f7fa ffd9 	bl	800684c <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b64      	cmp	r3, #100	@ 0x64
 800b8a2:	d901      	bls.n	800b8a8 <HAL_RCC_OscConfig+0x320>
        {
          return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e120      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8a8:	4b78      	ldr	r3, [pc, #480]	@ (800ba8c <HAL_RCC_OscConfig+0x504>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0f0      	beq.n	800b896 <HAL_RCC_OscConfig+0x30e>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d106      	bne.n	800b8ca <HAL_RCC_OscConfig+0x342>
 800b8bc:	4b72      	ldr	r3, [pc, #456]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8c0:	4a71      	ldr	r2, [pc, #452]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8c2:	f043 0301 	orr.w	r3, r3, #1
 800b8c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8c8:	e02d      	b.n	800b926 <HAL_RCC_OscConfig+0x39e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10c      	bne.n	800b8ec <HAL_RCC_OscConfig+0x364>
 800b8d2:	4b6d      	ldr	r3, [pc, #436]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8d6:	4a6c      	ldr	r2, [pc, #432]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8d8:	f023 0301 	bic.w	r3, r3, #1
 800b8dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8de:	4b6a      	ldr	r3, [pc, #424]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8e2:	4a69      	ldr	r2, [pc, #420]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8e4:	f023 0304 	bic.w	r3, r3, #4
 800b8e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8ea:	e01c      	b.n	800b926 <HAL_RCC_OscConfig+0x39e>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	2b05      	cmp	r3, #5
 800b8f2:	d10c      	bne.n	800b90e <HAL_RCC_OscConfig+0x386>
 800b8f4:	4b64      	ldr	r3, [pc, #400]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8f8:	4a63      	ldr	r2, [pc, #396]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b8fa:	f043 0304 	orr.w	r3, r3, #4
 800b8fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800b900:	4b61      	ldr	r3, [pc, #388]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b904:	4a60      	ldr	r2, [pc, #384]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b90c:	e00b      	b.n	800b926 <HAL_RCC_OscConfig+0x39e>
 800b90e:	4b5e      	ldr	r3, [pc, #376]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b912:	4a5d      	ldr	r2, [pc, #372]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b914:	f023 0301 	bic.w	r3, r3, #1
 800b918:	6713      	str	r3, [r2, #112]	@ 0x70
 800b91a:	4b5b      	ldr	r3, [pc, #364]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b91c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b91e:	4a5a      	ldr	r2, [pc, #360]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b920:	f023 0304 	bic.w	r3, r3, #4
 800b924:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d015      	beq.n	800b95a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b92e:	f7fa ff8d 	bl	800684c <HAL_GetTick>
 800b932:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b934:	e00a      	b.n	800b94c <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b936:	f7fa ff89 	bl	800684c <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b944:	4293      	cmp	r3, r2
 800b946:	d901      	bls.n	800b94c <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e0ce      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b94c:	4b4e      	ldr	r3, [pc, #312]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b94e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b950:	f003 0302 	and.w	r3, r3, #2
 800b954:	2b00      	cmp	r3, #0
 800b956:	d0ee      	beq.n	800b936 <HAL_RCC_OscConfig+0x3ae>
 800b958:	e014      	b.n	800b984 <HAL_RCC_OscConfig+0x3fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b95a:	f7fa ff77 	bl	800684c <HAL_GetTick>
 800b95e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b960:	e00a      	b.n	800b978 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b962:	f7fa ff73 	bl	800684c <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b970:	4293      	cmp	r3, r2
 800b972:	d901      	bls.n	800b978 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e0b8      	b.n	800baea <HAL_RCC_OscConfig+0x562>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b978:	4b43      	ldr	r3, [pc, #268]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b97a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1ee      	bne.n	800b962 <HAL_RCC_OscConfig+0x3da>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b984:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d105      	bne.n	800b998 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b98c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b990:	4a3d      	ldr	r2, [pc, #244]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b996:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 80a3 	beq.w	800bae8 <HAL_RCC_OscConfig+0x560>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b9a2:	4b39      	ldr	r3, [pc, #228]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f003 030c 	and.w	r3, r3, #12
 800b9aa:	2b08      	cmp	r3, #8
 800b9ac:	f000 809a 	beq.w	800bae4 <HAL_RCC_OscConfig+0x55c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d17b      	bne.n	800bab0 <HAL_RCC_OscConfig+0x528>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9b8:	4b33      	ldr	r3, [pc, #204]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a32      	ldr	r2, [pc, #200]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b9be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c4:	f7fa ff42 	bl	800684c <HAL_GetTick>
 800b9c8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9ca:	e008      	b.n	800b9de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9cc:	f7fa ff3e 	bl	800684c <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e085      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9de:	4b2a      	ldr	r3, [pc, #168]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1f0      	bne.n	800b9cc <HAL_RCC_OscConfig+0x444>
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69da      	ldr	r2, [r3, #28]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b9f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	fa93 f3a3 	rbit	r3, r3
 800ba04:	613b      	str	r3, [r7, #16]
  return(result);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	fab3 f383 	clz	r3, r3
 800ba0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	1e59      	subs	r1, r3, #1
 800ba1a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800ba1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	fa93 f3a3 	rbit	r3, r3
 800ba26:	61bb      	str	r3, [r7, #24]
  return(result);
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	fab3 f383 	clz	r3, r3
 800ba2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ba38:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800ba3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba40:	fa93 f3a3 	rbit	r3, r3
 800ba44:	623b      	str	r3, [r7, #32]
  return(result);
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	fab3 f383 	clz	r3, r3
 800ba4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba50:	431a      	orrs	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ba56:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ba5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	fa93 f3a3 	rbit	r3, r3
 800ba62:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ba64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba66:	fab3 f383 	clz	r3, r3
 800ba6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba6e:	4906      	ldr	r1, [pc, #24]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba74:	4b04      	ldr	r3, [pc, #16]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a03      	ldr	r2, [pc, #12]	@ (800ba88 <HAL_RCC_OscConfig+0x500>)
 800ba7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba80:	f7fa fee4 	bl	800684c <HAL_GetTick>
 800ba84:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba86:	e00c      	b.n	800baa2 <HAL_RCC_OscConfig+0x51a>
 800ba88:	40023800 	.word	0x40023800
 800ba8c:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba90:	f7fa fedc 	bl	800684c <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x51a>
          {
            return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e023      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baa2:	4b14      	ldr	r3, [pc, #80]	@ (800baf4 <HAL_RCC_OscConfig+0x56c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0f0      	beq.n	800ba90 <HAL_RCC_OscConfig+0x508>
 800baae:	e01b      	b.n	800bae8 <HAL_RCC_OscConfig+0x560>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bab0:	4b10      	ldr	r3, [pc, #64]	@ (800baf4 <HAL_RCC_OscConfig+0x56c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a0f      	ldr	r2, [pc, #60]	@ (800baf4 <HAL_RCC_OscConfig+0x56c>)
 800bab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800babc:	f7fa fec6 	bl	800684c <HAL_GetTick>
 800bac0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bac2:	e008      	b.n	800bad6 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bac4:	f7fa fec2 	bl	800684c <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d901      	bls.n	800bad6 <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e009      	b.n	800baea <HAL_RCC_OscConfig+0x562>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bad6:	4b07      	ldr	r3, [pc, #28]	@ (800baf4 <HAL_RCC_OscConfig+0x56c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f0      	bne.n	800bac4 <HAL_RCC_OscConfig+0x53c>
 800bae2:	e001      	b.n	800bae8 <HAL_RCC_OscConfig+0x560>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e000      	b.n	800baea <HAL_RCC_OscConfig+0x562>
    }
  }
  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3748      	adds	r7, #72	@ 0x48
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	40023800 	.word	0x40023800

0800baf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800bb06:	4b77      	ldr	r3, [pc, #476]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d910      	bls.n	800bb36 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb14:	4b73      	ldr	r3, [pc, #460]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f023 020f 	bic.w	r2, r3, #15
 800bb1c:	4971      	ldr	r1, [pc, #452]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bb24:	4b6f      	ldr	r3, [pc, #444]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 030f 	and.w	r3, r3, #15
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d001      	beq.n	800bb36 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e0d2      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d008      	beq.n	800bb54 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb42:	4b69      	ldr	r3, [pc, #420]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	4966      	ldr	r1, [pc, #408]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d06a      	beq.n	800bc36 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d107      	bne.n	800bb78 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb68:	4b5f      	ldr	r3, [pc, #380]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d115      	bne.n	800bba0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0b1      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d107      	bne.n	800bb90 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb80:	4b59      	ldr	r3, [pc, #356]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e0a5      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb90:	4b55      	ldr	r3, [pc, #340]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e09d      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bba0:	4b51      	ldr	r3, [pc, #324]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f023 0203 	bic.w	r2, r3, #3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	494e      	ldr	r1, [pc, #312]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb2:	f7fa fe4b 	bl	800684c <HAL_GetTick>
 800bbb6:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d112      	bne.n	800bbe6 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bbc0:	e00a      	b.n	800bbd8 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbc2:	f7fa fe43 	bl	800684c <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d901      	bls.n	800bbd8 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e081      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bbd8:	4b43      	ldr	r3, [pc, #268]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f003 030c 	and.w	r3, r3, #12
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d1ee      	bne.n	800bbc2 <HAL_RCC_ClockConfig+0xca>
 800bbe4:	e027      	b.n	800bc36 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d11d      	bne.n	800bc2a <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbee:	e00a      	b.n	800bc06 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbf0:	f7fa fe2c 	bl	800684c <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d901      	bls.n	800bc06 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e06a      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc06:	4b38      	ldr	r3, [pc, #224]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	f003 030c 	and.w	r3, r3, #12
 800bc0e:	2b08      	cmp	r3, #8
 800bc10:	d1ee      	bne.n	800bbf0 <HAL_RCC_ClockConfig+0xf8>
 800bc12:	e010      	b.n	800bc36 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc14:	f7fa fe1a 	bl	800684c <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d901      	bls.n	800bc2a <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e058      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f003 030c 	and.w	r3, r3, #12
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1ee      	bne.n	800bc14 <HAL_RCC_ClockConfig+0x11c>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800bc36:	4b2b      	ldr	r3, [pc, #172]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 030f 	and.w	r3, r3, #15
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d210      	bcs.n	800bc66 <HAL_RCC_ClockConfig+0x16e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc44:	4b27      	ldr	r3, [pc, #156]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f023 020f 	bic.w	r2, r3, #15
 800bc4c:	4925      	ldr	r1, [pc, #148]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bc54:	4b23      	ldr	r3, [pc, #140]	@ (800bce4 <HAL_RCC_ClockConfig+0x1ec>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 030f 	and.w	r3, r3, #15
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d001      	beq.n	800bc66 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e03a      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc72:	4b1d      	ldr	r3, [pc, #116]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	491a      	ldr	r1, [pc, #104]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0308 	and.w	r3, r3, #8
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d009      	beq.n	800bca4 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc90:	4b15      	ldr	r3, [pc, #84]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	4912      	ldr	r1, [pc, #72]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800bca4:	f000 f826 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800bca8:	4601      	mov	r1, r0
 800bcaa:	4b0f      	ldr	r3, [pc, #60]	@ (800bce8 <HAL_RCC_ClockConfig+0x1f0>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bcb2:	23f0      	movs	r3, #240	@ 0xf0
 800bcb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	fa93 f3a3 	rbit	r3, r3
 800bcbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	fab3 f383 	clz	r3, r3
 800bcc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc8:	4a08      	ldr	r2, [pc, #32]	@ (800bcec <HAL_RCC_ClockConfig+0x1f4>)
 800bcca:	5cd3      	ldrb	r3, [r2, r3]
 800bccc:	fa21 f303 	lsr.w	r3, r1, r3
 800bcd0:	4a07      	ldr	r2, [pc, #28]	@ (800bcf0 <HAL_RCC_ClockConfig+0x1f8>)
 800bcd2:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800bcd4:	200f      	movs	r0, #15
 800bcd6:	f7fa fd8f 	bl	80067f8 <HAL_InitTick>
  
  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	40023c00 	.word	0x40023c00
 800bce8:	40023800 	.word	0x40023800
 800bcec:	0801b0ec 	.word	0x0801b0ec
 800bcf0:	2002067c 	.word	0x2002067c

0800bcf4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b08b      	sub	sp, #44	@ 0x2c
 800bcf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61fb      	str	r3, [r7, #28]
 800bcfe:	2300      	movs	r3, #0
 800bd00:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd02:	2300      	movs	r3, #0
 800bd04:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd0a:	4b38      	ldr	r3, [pc, #224]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f003 030c 	and.w	r3, r3, #12
 800bd12:	2b08      	cmp	r3, #8
 800bd14:	d00c      	beq.n	800bd30 <HAL_RCC_GetSysClockFreq+0x3c>
 800bd16:	2b08      	cmp	r3, #8
 800bd18:	d85d      	bhi.n	800bdd6 <HAL_RCC_GetSysClockFreq+0xe2>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <HAL_RCC_GetSysClockFreq+0x30>
 800bd1e:	2b04      	cmp	r3, #4
 800bd20:	d003      	beq.n	800bd2a <HAL_RCC_GetSysClockFreq+0x36>
 800bd22:	e058      	b.n	800bdd6 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd24:	4b32      	ldr	r3, [pc, #200]	@ (800bdf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bd26:	623b      	str	r3, [r7, #32]
       break;
 800bd28:	e058      	b.n	800bddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd2a:	4b32      	ldr	r3, [pc, #200]	@ (800bdf4 <HAL_RCC_GetSysClockFreq+0x100>)
 800bd2c:	623b      	str	r3, [r7, #32]
      break;
 800bd2e:	e055      	b.n	800bddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd30:	4b2e      	ldr	r3, [pc, #184]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd38:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bd3a:	4b2c      	ldr	r3, [pc, #176]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d017      	beq.n	800bd76 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800bd46:	4a2b      	ldr	r2, [pc, #172]	@ (800bdf4 <HAL_RCC_GetSysClockFreq+0x100>)
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd4e:	4b27      	ldr	r3, [pc, #156]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd50:	6859      	ldr	r1, [r3, #4]
 800bd52:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800bd56:	400b      	ands	r3, r1
 800bd58:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 800bd5c:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd5e:	6979      	ldr	r1, [r7, #20]
 800bd60:	fa91 f1a1 	rbit	r1, r1
 800bd64:	6139      	str	r1, [r7, #16]
  return(result);
 800bd66:	6939      	ldr	r1, [r7, #16]
 800bd68:	fab1 f181 	clz	r1, r1
 800bd6c:	40cb      	lsrs	r3, r1
 800bd6e:	fb02 f303 	mul.w	r3, r2, r3
 800bd72:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd74:	e016      	b.n	800bda4 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800bd76:	4a1e      	ldr	r2, [pc, #120]	@ (800bdf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd7e:	4b1b      	ldr	r3, [pc, #108]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd80:	6859      	ldr	r1, [r3, #4]
 800bd82:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800bd86:	400b      	ands	r3, r1
 800bd88:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 800bd8c:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd8e:	68f9      	ldr	r1, [r7, #12]
 800bd90:	fa91 f1a1 	rbit	r1, r1
 800bd94:	60b9      	str	r1, [r7, #8]
  return(result);
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	fab1 f181 	clz	r1, r1
 800bd9c:	40cb      	lsrs	r3, r1
 800bd9e:	fb02 f303 	mul.w	r3, r2, r3
 800bda2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800bda4:	4b11      	ldr	r3, [pc, #68]	@ (800bdec <HAL_RCC_GetSysClockFreq+0xf8>)
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800bdac:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800bdb0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	fa93 f3a3 	rbit	r3, r3
 800bdb8:	603b      	str	r3, [r7, #0]
  return(result);
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	fab3 f383 	clz	r3, r3
 800bdc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800bdca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd2:	623b      	str	r3, [r7, #32]
      break;
 800bdd4:	e002      	b.n	800bddc <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdd6:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bdd8:	623b      	str	r3, [r7, #32]
      break;
 800bdda:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bddc:	6a3b      	ldr	r3, [r7, #32]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	372c      	adds	r7, #44	@ 0x2c
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	40023800 	.word	0x40023800
 800bdf0:	00f42400 	.word	0x00f42400
 800bdf4:	017d7840 	.word	0x017d7840

0800bdf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b0d8      	sub	sp, #352	@ 0x160
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be02:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be06:	6018      	str	r0, [r3, #0]
  uint32_t tickstart = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  uint32_t tmpreg0 = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  uint32_t tmpreg1 = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint32_t plli2sused = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  uint32_t pllsaiused = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be26:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be2a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d01b      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be3a:	4b94      	ldr	r3, [pc, #592]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	4a93      	ldr	r2, [pc, #588]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800be44:	6093      	str	r3, [r2, #8]
 800be46:	4b91      	ldr	r3, [pc, #580]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be4e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be56:	498d      	ldr	r1, [pc, #564]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800be5c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be60:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1; 
 800be6c:	2301      	movs	r3, #1
 800be6e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800be72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be76:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d025      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be86:	4b81      	ldr	r3, [pc, #516]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be90:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800be94:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be9c:	497b      	ldr	r1, [pc, #492]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bea4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bea8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beb4:	d102      	bne.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      plli2sused = 1; 
 800beb6:	2301      	movs	r3, #1
 800beb8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bebc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bec0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      pllsaiused = 1; 
 800becc:	2301      	movs	r3, #1
 800bece:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bed2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bed6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d025      	beq.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bee6:	4b69      	ldr	r3, [pc, #420]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800beec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bef0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bef4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800befc:	4963      	ldr	r1, [pc, #396]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bf04:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf08:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf14:	d102      	bne.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      plli2sused = 1; 
 800bf16:	2301      	movs	r3, #1
 800bf18:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bf1c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf20:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      pllsaiused = 1; 
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf32:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf36:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {    
      plli2sused = 1; 
 800bf46:	2301      	movs	r3, #1
 800bf48:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bf4c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf50:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 0320 	and.w	r3, r3, #32
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 80ae 	beq.w	800c0be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf62:	4b4a      	ldr	r3, [pc, #296]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bf64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf66:	4a49      	ldr	r2, [pc, #292]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bf68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf6c:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf6e:	4b47      	ldr	r3, [pc, #284]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bf70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf72:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800bf76:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf7a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bf84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800bf88:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bf8a:	4b41      	ldr	r3, [pc, #260]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a40      	ldr	r2, [pc, #256]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800bf90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf94:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf96:	f7fa fc59 	bl	800684c <HAL_GetTick>
 800bf9a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bf9e:	e00a      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfa0:	f7fa fc54 	bl	800684c <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b64      	cmp	r3, #100	@ 0x64
 800bfae:	d902      	bls.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      {
        return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	f000 bfd9 	b.w	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfb6:	4b36      	ldr	r3, [pc, #216]	@ (800c090 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ee      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bfc2:	4b32      	ldr	r3, [pc, #200]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bfc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bfce:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d03f      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800bfd6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800bfda:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfe6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d033      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfee:	4b27      	ldr	r3, [pc, #156]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bff6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bffa:	4b24      	ldr	r3, [pc, #144]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800bffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bffe:	4a23      	ldr	r2, [pc, #140]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c004:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c006:	4b21      	ldr	r3, [pc, #132]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c00a:	4a20      	ldr	r2, [pc, #128]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c00c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c010:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c012:	4a1e      	ldr	r2, [pc, #120]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c014:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c018:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c01a:	4b1c      	ldr	r3, [pc, #112]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d017      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c026:	f7fa fc11 	bl	800684c <HAL_GetTick>
 800c02a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c02e:	e00c      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c030:	f7fa fc0c 	bl	800684c <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c040:	4293      	cmp	r3, r2
 800c042:	d902      	bls.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x252>
          {
            return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	f000 bf8f 	b.w	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c04a:	4b10      	ldr	r3, [pc, #64]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c04c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0ec      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x238>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c056:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c05a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c06a:	d115      	bne.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800c06c:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c074:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c078:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c080:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c082:	400b      	ands	r3, r1
 800c084:	4901      	ldr	r1, [pc, #4]	@ (800c08c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c086:	4313      	orrs	r3, r2
 800c088:	608b      	str	r3, [r1, #8]
 800c08a:	e00b      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800c08c:	40023800 	.word	0x40023800
 800c090:	40007000 	.word	0x40007000
 800c094:	0ffffcff 	.word	0x0ffffcff
 800c098:	4bbb      	ldr	r3, [pc, #748]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	4aba      	ldr	r2, [pc, #744]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c09e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c0a2:	6093      	str	r3, [r2, #8]
 800c0a4:	4bb8      	ldr	r3, [pc, #736]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c0ac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0b8:	49b3      	ldr	r1, [pc, #716]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c0be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c0c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0310 	and.w	r3, r3, #16
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d014      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0d2:	4bad      	ldr	r3, [pc, #692]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0d8:	4aab      	ldr	r2, [pc, #684]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c0e2:	4ba9      	ldr	r3, [pc, #676]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800c0e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c0ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0f4:	49a4      	ldr	r1, [pc, #656]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c100:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00e      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c110:	4b9d      	ldr	r3, [pc, #628]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c116:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c11a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c11e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c126:	4998      	ldr	r1, [pc, #608]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c12e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c132:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00e      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c142:	4b91      	ldr	r3, [pc, #580]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c14c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c150:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c158:	498b      	ldr	r1, [pc, #556]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c160:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c164:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c174:	4b84      	ldr	r3, [pc, #528]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c17a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c17e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c182:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c18a:	497f      	ldr	r1, [pc, #508]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c192:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c196:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00e      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1a6:	4b78      	ldr	r3, [pc, #480]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c1b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c1b4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1bc:	4972      	ldr	r1, [pc, #456]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c1c4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c1c8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00e      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c1d8:	4b6b      	ldr	r3, [pc, #428]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1de:	f023 0203 	bic.w	r2, r3, #3
 800c1e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c1e6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ee:	4966      	ldr	r1, [pc, #408]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c1f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c1fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00e      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c20a:	4b5f      	ldr	r3, [pc, #380]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c210:	f023 020c 	bic.w	r2, r3, #12
 800c214:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c218:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c220:	4959      	ldr	r1, [pc, #356]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c222:	4313      	orrs	r3, r2
 800c224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c228:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c22c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00e      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c23c:	4b52      	ldr	r3, [pc, #328]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c242:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c246:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c24a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c252:	494d      	ldr	r1, [pc, #308]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c254:	4313      	orrs	r3, r2
 800c256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c25a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c25e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00e      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c26e:	4b46      	ldr	r3, [pc, #280]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c274:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c278:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c27c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c284:	4940      	ldr	r1, [pc, #256]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c286:	4313      	orrs	r3, r2
 800c288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c28c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c290:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c2a0:	4b39      	ldr	r3, [pc, #228]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c2aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c2ae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b6:	4934      	ldr	r1, [pc, #208]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c2be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c2c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00e      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c2d2:	4b2d      	ldr	r3, [pc, #180]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c2dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c2e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2e8:	4927      	ldr	r1, [pc, #156]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c2f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c2f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00e      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c304:	4b20      	ldr	r3, [pc, #128]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c30a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c30e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c312:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c31a:	491b      	ldr	r1, [pc, #108]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c322:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c326:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00e      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c336:	4b14      	ldr	r3, [pc, #80]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c33c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c340:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c344:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c34c:	490e      	ldr	r1, [pc, #56]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c354:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c358:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d011      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c368:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c36e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c372:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c376:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c37e:	4902      	ldr	r1, [pc, #8]	@ (800c388 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800c380:	4313      	orrs	r3, r2
 800c382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c386:	e001      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c388:	40023800 	.word	0x40023800
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c38c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c390:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01a      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c3a0:	4b66      	ldr	r3, [pc, #408]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c3aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c3ae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3b6:	4961      	ldr	r1, [pc, #388]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c3be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c3c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3ce:	d102      	bne.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    {
      pllsaiused = 1; 
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c3d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c3da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    pllsaiused = 1; 
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c3f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c3f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c404:	4b4d      	ldr	r3, [pc, #308]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c40a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c40e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c412:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c41a:	4948      	ldr	r1, [pc, #288]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c41c:	4313      	orrs	r3, r2
 800c41e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c422:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c426:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00f      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x65e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c436:	4b41      	ldr	r3, [pc, #260]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c43c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c440:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c444:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c44e:	493b      	ldr	r1, [pc, #236]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c450:	4313      	orrs	r3, r2
 800c452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c456:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c45a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00f      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c46a:	4b34      	ldr	r3, [pc, #208]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c470:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c474:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c478:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c482:	492e      	ldr	r1, [pc, #184]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c484:	4313      	orrs	r3, r2
 800c486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c48a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c48e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00f      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c49e:	4b27      	ldr	r3, [pc, #156]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4a4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c4a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c4ac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4b6:	4921      	ldr	r1, [pc, #132]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c4be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c4c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00f      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c4d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4d8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c4dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c4e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4ea:	4914      	ldr	r1, [pc, #80]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c4f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d009      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x716>
 800c4fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c4fe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c50a:	f040 8284 	bne.w	800ca16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800c50e:	4b0b      	ldr	r3, [pc, #44]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a0a      	ldr	r2, [pc, #40]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800c514:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c518:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c51a:	f7fa f997 	bl	800684c <HAL_GetTick>
 800c51e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c522:	e00d      	b.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c524:	f7fa f992 	bl	800684c <HAL_GetTick>
 800c528:	4602      	mov	r2, r0
 800c52a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	2b64      	cmp	r3, #100	@ 0x64
 800c532:	d905      	bls.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x748>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	f000 bd17 	b.w	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 800c53a:	bf00      	nop
 800c53c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c540:	4be4      	ldr	r3, [pc, #912]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1eb      	bne.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c54c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c550:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 808c 	beq.w	800c67a <HAL_RCCEx_PeriphCLKConfig+0x882>
 800c562:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c566:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f040 8083 	bne.w	800c67a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800c574:	4bd7      	ldr	r3, [pc, #860]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c57a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c57e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c582:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c586:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c58a:	fa93 f3a3 	rbit	r3, r3
 800c58e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  return(result);
 800c592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c596:	fab3 f383 	clz	r3, r3
 800c59a:	fa22 f303 	lsr.w	r3, r2, r3
 800c59e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800c5a2:	4bcc      	ldr	r3, [pc, #816]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5a8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c5ac:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c5b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5b8:	fa93 f3a3 	rbit	r3, r3
 800c5bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  return(result);
 800c5c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c5c4:	fab3 f383 	clz	r3, r3
 800c5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c5d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c5d4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685a      	ldr	r2, [r3, #4]
 800c5dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c5e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c5e8:	fa93 f3a3 	rbit	r3, r3
 800c5ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return(result);
 800c5f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c5f4:	fab3 f383 	clz	r3, r3
 800c5f8:	409a      	lsls	r2, r3
 800c5fa:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c5fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c602:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800c606:	fa93 f3a3 	rbit	r3, r3
 800c60a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return(result);
 800c60e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c612:	fab3 f383 	clz	r3, r3
 800c616:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c61a:	fa01 f303 	lsl.w	r3, r1, r3
 800c61e:	431a      	orrs	r2, r3
 800c620:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c624:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c628:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c62c:	fa93 f3a3 	rbit	r3, r3
 800c630:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  return(result);
 800c634:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800c638:	fab3 f383 	clz	r3, r3
 800c63c:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800c640:	fa01 f303 	lsl.w	r3, r1, r3
 800c644:	431a      	orrs	r2, r3
 800c646:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c64a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6899      	ldr	r1, [r3, #8]
 800c652:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c656:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c65a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c65e:	fa93 f3a3 	rbit	r3, r3
 800c662:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 800c666:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800c66a:	fab3 f383 	clz	r3, r3
 800c66e:	fa01 f303 	lsl.w	r3, r1, r3
 800c672:	4998      	ldr	r1, [pc, #608]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c674:	4313      	orrs	r3, r2
 800c676:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c67a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c67e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d008      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800c68e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c692:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c69a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c69e:	d014      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x8d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800c6a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c6a4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 809d 	beq.w	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800c6b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c6ba:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6c6:	f040 8093 	bne.w	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800c6ca:	4b82      	ldr	r3, [pc, #520]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6d0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c6d4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c6d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c6e0:	fa93 f3a3 	rbit	r3, r3
 800c6e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  return(result);
 800c6e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c6ec:	fab3 f383 	clz	r3, r3
 800c6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800c6f8:	4b76      	ldr	r3, [pc, #472]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800c702:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c706:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c70a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c70e:	fa93 f3a3 	rbit	r3, r3
 800c712:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  return(result);
 800c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71a:	fab3 f383 	clz	r3, r3
 800c71e:	fa22 f303 	lsr.w	r3, r2, r3
 800c722:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c726:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c72a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c736:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c73a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c73e:	fa93 f3a3 	rbit	r3, r3
 800c742:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  return(result);
 800c746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c74a:	fab3 f383 	clz	r3, r3
 800c74e:	409a      	lsls	r2, r3
 800c750:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c754:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c758:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c75c:	fa93 f3a3 	rbit	r3, r3
 800c760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  return(result);
 800c764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c768:	fab3 f383 	clz	r3, r3
 800c76c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c770:	fa01 f303 	lsl.w	r3, r1, r3
 800c774:	431a      	orrs	r2, r3
 800c776:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c77a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68d9      	ldr	r1, [r3, #12]
 800c782:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c786:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c78a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c78e:	fa93 f3a3 	rbit	r3, r3
 800c792:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return(result);
 800c796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c79a:	fab3 f383 	clz	r3, r3
 800c79e:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c7a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c7b0:	fa93 f3a3 	rbit	r3, r3
 800c7b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  return(result);
 800c7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7bc:	fab3 f383 	clz	r3, r3
 800c7c0:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800c7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c8:	4942      	ldr	r1, [pc, #264]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 800c7d0:	4b40      	ldr	r3, [pc, #256]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c7d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7d6:	f023 021f 	bic.w	r2, r3, #31
 800c7da:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c7de:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	493a      	ldr	r1, [pc, #232]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c7f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c7f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 8086 	beq.w	800c912 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800c806:	4b33      	ldr	r3, [pc, #204]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c80c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c810:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c814:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c81c:	fa93 f3a3 	rbit	r3, r3
 800c820:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  return(result);
 800c824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c828:	fab3 f383 	clz	r3, r3
 800c82c:	fa22 f303 	lsr.w	r3, r2, r3
 800c830:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800c834:	4b27      	ldr	r3, [pc, #156]	@ (800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>)
 800c836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c83a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800c83e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c84a:	fa93 f3a3 	rbit	r3, r3
 800c84e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 800c852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c856:	fab3 f383 	clz	r3, r3
 800c85a:	fa22 f303 	lsr.w	r3, r2, r3
 800c85e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c862:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c866:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c872:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c876:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c87a:	fa93 f3a3 	rbit	r3, r3
 800c87e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return(result);
 800c882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c886:	fab3 f383 	clz	r3, r3
 800c88a:	409a      	lsls	r2, r3
 800c88c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c890:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6919      	ldr	r1, [r3, #16]
 800c898:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c89c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8a4:	fa93 f3a3 	rbit	r3, r3
 800c8a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  return(result);
 800c8ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8b0:	fab3 f383 	clz	r3, r3
 800c8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c8be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8c6:	fa93 f3a3 	rbit	r3, r3
 800c8ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  return(result);
 800c8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8d2:	e001      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800c8d4:	40023800 	.word	0x40023800
 800c8d8:	fab3 f383 	clz	r3, r3
 800c8dc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c8ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c8f2:	fa93 f3a3 	rbit	r3, r3
 800c8f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  return(result);
 800c8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8fe:	fab3 f383 	clz	r3, r3
 800c902:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800c906:	fa01 f303 	lsl.w	r3, r1, r3
 800c90a:	4950      	ldr	r1, [pc, #320]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c912:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c916:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d05c      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c926:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c92a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c93a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c93e:	fa93 f3a3 	rbit	r3, r3
 800c942:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return(result);
 800c946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c94a:	fab3 f383 	clz	r3, r3
 800c94e:	409a      	lsls	r2, r3
 800c950:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c954:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6919      	ldr	r1, [r3, #16]
 800c95c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800c960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c968:	fa93 f3a3 	rbit	r3, r3
 800c96c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return(result);
 800c970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c974:	fab3 f383 	clz	r3, r3
 800c978:	fa01 f303 	lsl.w	r3, r1, r3
 800c97c:	431a      	orrs	r2, r3
 800c97e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c982:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68d9      	ldr	r1, [r3, #12]
 800c98a:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800c98e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c992:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c996:	fa93 f3a3 	rbit	r3, r3
 800c99a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return(result);
 800c99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a2:	fab3 f383 	clz	r3, r3
 800c9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800c9b0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6899      	ldr	r1, [r3, #8]
 800c9b8:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c9bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9c4:	fa93 f3a3 	rbit	r3, r3
 800c9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return(result);
 800c9cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9d0:	fab3 f383 	clz	r3, r3
 800c9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d8:	491c      	ldr	r1, [pc, #112]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a19      	ldr	r2, [pc, #100]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800c9e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9ea:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9ec:	f7f9 ff2e 	bl	800684c <HAL_GetTick>
 800c9f0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c9f4:	e009      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c9f6:	f7f9 ff29 	bl	800684c <HAL_GetTick>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	2b64      	cmp	r3, #100	@ 0x64
 800ca04:	d901      	bls.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0xc12>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 800ca06:	2303      	movs	r3, #3
 800ca08:	e2ae      	b.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca0a:	4b10      	ldr	r3, [pc, #64]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0ef      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ca16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	f040 82a3 	bne.w	800cf66 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800ca20:	4b0a      	ldr	r3, [pc, #40]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a09      	ldr	r2, [pc, #36]	@ (800ca4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800ca26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca2a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca2c:	f7f9 ff0e 	bl	800684c <HAL_GetTick>
 800ca30:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca34:	e00c      	b.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ca36:	f7f9 ff09 	bl	800684c <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b64      	cmp	r3, #100	@ 0x64
 800ca44:	d904      	bls.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0xc58>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e28e      	b.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
 800ca4a:	bf00      	nop
 800ca4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca50:	4bd4      	ldr	r3, [pc, #848]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca5c:	d0eb      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0xc3e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ca5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ca62:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d007      	beq.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 800ca72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ca76:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d013      	beq.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0xcb2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ca82:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ca86:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 8093 	beq.w	800cbbe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ca98:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ca9c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f040 808a 	bne.w	800cbbe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800caaa:	4bbe      	ldr	r3, [pc, #760]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800caac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cab0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cab4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800cab8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cabc:	fa93 f3a3 	rbit	r3, r3
 800cac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return(result);
 800cac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac4:	fab3 f383 	clz	r3, r3
 800cac8:	fa22 f303 	lsr.w	r3, r2, r3
 800cacc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800cad0:	4bb4      	ldr	r3, [pc, #720]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cad6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800cada:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800cade:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cae2:	fa93 f3a3 	rbit	r3, r3
 800cae6:	677b      	str	r3, [r7, #116]	@ 0x74
  return(result);
 800cae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caea:	fab3 f383 	clz	r3, r3
 800caee:	fa22 f303 	lsr.w	r3, r2, r3
 800caf2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800caf6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cafa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	695a      	ldr	r2, [r3, #20]
 800cb02:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cb06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb0e:	fa93 f3a3 	rbit	r3, r3
 800cb12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return(result);
 800cb14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cb16:	fab3 f383 	clz	r3, r3
 800cb1a:	409a      	lsls	r2, r3
 800cb1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800cb20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb28:	fa93 f3a3 	rbit	r3, r3
 800cb2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 800cb30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb34:	fab3 f383 	clz	r3, r3
 800cb38:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb40:	431a      	orrs	r2, r3
 800cb42:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cb46:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6999      	ldr	r1, [r3, #24]
 800cb4e:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800cb52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb5a:	fa93 f3a3 	rbit	r3, r3
 800cb5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 800cb62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb66:	fab3 f383 	clz	r3, r3
 800cb6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800cb74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb7c:	fa93 f3a3 	rbit	r3, r3
 800cb80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return(result);
 800cb84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cb88:	fab3 f383 	clz	r3, r3
 800cb8c:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800cb90:	fa01 f303 	lsl.w	r3, r1, r3
 800cb94:	4983      	ldr	r1, [pc, #524]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cb9c:	4b81      	ldr	r3, [pc, #516]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cba2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cba6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cbaa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	021b      	lsls	r3, r3, #8
 800cbb6:	497b      	ldr	r1, [pc, #492]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cbbe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cbc2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 80c5 	beq.w	800cd5e <HAL_RCCEx_PeriphCLKConfig+0xf66>
 800cbd4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cbd8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cbe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbe4:	f040 80bb 	bne.w	800cd5e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800cbe8:	4b6e      	ldr	r3, [pc, #440]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cbf2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cbf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cbfa:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800cbfe:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc00:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc04:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	fa93 f1a3 	rbit	r1, r3
 800cc0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cc16:	6019      	str	r1, [r3, #0]
  return(result);
 800cc18:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	fab3 f383 	clz	r3, r3
 800cc26:	fa22 f303 	lsr.w	r3, r2, r3
 800cc2a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800cc2e:	4b5d      	ldr	r3, [pc, #372]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc34:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800cc38:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800cc40:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800cc44:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc46:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	fa93 f1a3 	rbit	r1, r3
 800cc54:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800cc5c:	6019      	str	r1, [r3, #0]
  return(result);
 800cc5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	fab3 f383 	clz	r3, r3
 800cc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cc74:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc78:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	695a      	ldr	r2, [r3, #20]
 800cc80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cc88:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 800cc8c:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc8e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cc92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	fa93 f1a3 	rbit	r1, r3
 800cc9c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cca0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cca4:	6019      	str	r1, [r3, #0]
  return(result);
 800cca6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ccaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	fab3 f383 	clz	r3, r3
 800ccb4:	409a      	lsls	r2, r3
 800ccb6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ccba:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6a19      	ldr	r1, [r3, #32]
 800ccc2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ccc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccca:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800ccce:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccd0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ccd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	fa93 f0a3 	rbit	r0, r3
 800ccde:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cce2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cce6:	6018      	str	r0, [r3, #0]
  return(result);
 800cce8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ccec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	fab3 f383 	clz	r3, r3
 800ccf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfa:	431a      	orrs	r2, r3
 800ccfc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800cd04:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800cd08:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd0a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	fa93 f1a3 	rbit	r1, r3
 800cd18:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd20:	6019      	str	r1, [r3, #0]
  return(result);
 800cd22:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	fab3 f383 	clz	r3, r3
 800cd30:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cd34:	fa01 f303 	lsl.w	r3, r1, r3
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800cd3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd42:	fa93 f3a3 	rbit	r3, r3
 800cd46:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 800cd48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd4a:	fab3 f383 	clz	r3, r3
 800cd4e:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800cd52:	fa01 f303 	lsl.w	r3, r1, r3
 800cd56:	4913      	ldr	r1, [pc, #76]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cd5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd62:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0308 	and.w	r3, r3, #8
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80dd 	beq.w	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800cd74:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <HAL_RCCEx_PeriphCLKConfig+0xfac>)
 800cd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cd7e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd82:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800cd86:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800cd8a:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd8c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	fa93 f1a3 	rbit	r1, r3
 800cd9a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cd9e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800cda2:	e001      	b.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 800cda4:	40023800 	.word	0x40023800
 800cda8:	6019      	str	r1, [r3, #0]
  return(result);
 800cdaa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cdae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	fab3 f383 	clz	r3, r3
 800cdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800cdc0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cdc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cdca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cdce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800cdd2:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 800cdd6:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdd8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cddc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	fa93 f1a3 	rbit	r1, r3
 800cde6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cdea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800cdee:	6019      	str	r1, [r3, #0]
  return(result);
 800cdf0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cdf4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	fab3 f383 	clz	r3, r3
 800cdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ce02:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ce06:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce0a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	695a      	ldr	r2, [r3, #20]
 800ce12:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce16:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ce1a:	f647 71c0 	movw	r1, #32704	@ 0x7fc0
 800ce1e:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	fa93 f1a3 	rbit	r1, r3
 800ce2e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ce36:	6019      	str	r1, [r3, #0]
  return(result);
 800ce38:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce3c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	fab3 f383 	clz	r3, r3
 800ce46:	409a      	lsls	r2, r3
 800ce48:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce4c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ce50:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 800ce54:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce56:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	fa93 f1a3 	rbit	r1, r3
 800ce64:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ce6c:	6019      	str	r1, [r3, #0]
  return(result);
 800ce6e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	fab3 f383 	clz	r3, r3
 800ce7c:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800ce80:	fa01 f303 	lsl.w	r3, r1, r3
 800ce84:	431a      	orrs	r2, r3
 800ce86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ce8e:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800ce92:	6019      	str	r1, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce94:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ce98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	fa93 f1a3 	rbit	r1, r3
 800cea2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cea6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ceaa:	6019      	str	r1, [r3, #0]
  return(result);
 800ceac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ceb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	fab3 f383 	clz	r3, r3
 800ceba:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cebe:	fa01 f303 	lsl.w	r3, r1, r3
 800cec2:	431a      	orrs	r2, r3
 800cec4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cec8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	69d9      	ldr	r1, [r3, #28]
 800ced0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ced4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ced8:	f04f 40e0 	mov.w	r0, #1879048192	@ 0x70000000
 800cedc:	6018      	str	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cede:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cee2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	fa93 f0a3 	rbit	r0, r3
 800ceec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cef0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cef4:	6018      	str	r0, [r3, #0]
  return(result);
 800cef6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cefa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	fab3 f383 	clz	r3, r3
 800cf04:	fa01 f303 	lsl.w	r3, r1, r3
 800cf08:	491a      	ldr	r1, [pc, #104]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cf10:	4b18      	ldr	r3, [pc, #96]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cf1a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800cf1e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf26:	4913      	ldr	r1, [pc, #76]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cf2e:	4b11      	ldr	r3, [pc, #68]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a10      	ldr	r2, [pc, #64]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf38:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf3a:	f7f9 fc87 	bl	800684c <HAL_GetTick>
 800cf3e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cf42:	e009      	b.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cf44:	f7f9 fc82 	bl	800684c <HAL_GetTick>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	2b64      	cmp	r3, #100	@ 0x64
 800cf52:	d901      	bls.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1160>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800cf54:	2303      	movs	r3, #3
 800cf56:	e007      	b.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x1170>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <HAL_RCCEx_PeriphCLKConfig+0x117c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf64:	d1ee      	bne.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x114c>
      }
    }
  }
  return HAL_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	40023800 	.word	0x40023800

0800cf78 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b09b      	sub	sp, #108	@ 0x6c
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	667b      	str	r3, [r7, #100]	@ 0x64
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4ab6      	ldr	r2, [pc, #728]	@ (800d260 <HAL_RCCEx_GetPeriphCLKConfig+0x2e8>)
 800cf88:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 800cf8a:	4bb6      	ldr	r3, [pc, #728]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800cf8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800cf90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cf94:	4013      	ands	r3, r2
 800cf96:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800cf9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	fa92 f2a2 	rbit	r2, r2
 800cfa2:	60fa      	str	r2, [r7, #12]
  return(result);
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	fab2 f282 	clz	r2, r2
 800cfaa:	fa23 f202 	lsr.w	r2, r3, r2
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800cfb2:	4bac      	ldr	r3, [pc, #688]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800cfb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfb8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cfbc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800cfc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	fa93 f3a3 	rbit	r3, r3
 800cfc8:	617b      	str	r3, [r7, #20]
  return(result);
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	fab3 f383 	clz	r3, r3
 800cfd0:	40da      	lsrs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800cfd6:	4ba3      	ldr	r3, [pc, #652]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800cfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfdc:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cfe0:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800cfe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	fa93 f3a3 	rbit	r3, r3
 800cfec:	61fb      	str	r3, [r7, #28]
  return(result);
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	fab3 f383 	clz	r3, r3
 800cff4:	40da      	lsrs	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800cffa:	4b9a      	ldr	r3, [pc, #616]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800cffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d000:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800d004:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800d008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00c:	fa93 f3a3 	rbit	r3, r3
 800d010:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	fab3 f383 	clz	r3, r3
 800d018:	40da      	lsrs	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 800d01e:	4b91      	ldr	r3, [pc, #580]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d020:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d024:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d028:	4013      	ands	r3, r2
 800d02a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800d02e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d032:	fa92 f2a2 	rbit	r2, r2
 800d036:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 800d038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d03a:	fab2 f282 	clz	r2, r2
 800d03e:	fa23 f202 	lsr.w	r2, r3, r2
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800d046:	4b87      	ldr	r3, [pc, #540]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d04c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d050:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800d054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d058:	fa93 f3a3 	rbit	r3, r3
 800d05c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800d05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d060:	fab3 f383 	clz	r3, r3
 800d064:	40da      	lsrs	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 800d06a:	4b7e      	ldr	r3, [pc, #504]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d070:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d074:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 800d078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d07a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d07c:	fa93 f3a3 	rbit	r3, r3
 800d080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800d082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d084:	fab3 f383 	clz	r3, r3
 800d088:	40da      	lsrs	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 800d08e:	4b75      	ldr	r3, [pc, #468]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d094:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800d098:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800d09c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d09e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0a0:	fa93 f3a3 	rbit	r3, r3
 800d0a4:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800d0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0a8:	fab3 f383 	clz	r3, r3
 800d0ac:	40da      	lsrs	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 800d0b2:	4b6c      	ldr	r3, [pc, #432]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0b8:	f003 021f 	and.w	r2, r3, #31
 800d0bc:	231f      	movs	r3, #31
 800d0be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0c2:	fa93 f3a3 	rbit	r3, r3
 800d0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 800d0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ca:	fab3 f383 	clz	r3, r3
 800d0ce:	40da      	lsrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 800d0d4:	4b63      	ldr	r3, [pc, #396]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d0d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0da:	f403 52f8 	and.w	r2, r3, #7936	@ 0x1f00
 800d0de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800d0e2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d0e6:	fa93 f3a3 	rbit	r3, r3
 800d0ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800d0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0ee:	fab3 f383 	clz	r3, r3
 800d0f2:	40da      	lsrs	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 800d0f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d102:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800d106:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d10a:	fa93 f3a3 	rbit	r3, r3
 800d10e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return(result);
 800d110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d112:	fab3 f383 	clz	r3, r3
 800d116:	40da      	lsrs	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d11c:	4b51      	ldr	r3, [pc, #324]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d122:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d12a:	4b4e      	ldr	r3, [pc, #312]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d130:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d138:	4b4a      	ldr	r3, [pc, #296]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d144:	4b47      	ldr	r3, [pc, #284]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d14a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	665a      	str	r2, [r3, #100]	@ 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d152:	4b44      	ldr	r3, [pc, #272]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d158:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	669a      	str	r2, [r3, #104]	@ 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d160:	4b40      	ldr	r3, [pc, #256]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d166:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	66da      	str	r2, [r3, #108]	@ 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d16e:	4b3d      	ldr	r3, [pc, #244]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d174:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	671a      	str	r2, [r3, #112]	@ 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d17c:	4b39      	ldr	r3, [pc, #228]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d182:	f003 0203 	and.w	r2, r3, #3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d18a:	4b36      	ldr	r3, [pc, #216]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d190:	f003 020c 	and.w	r2, r3, #12
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d198:	4b32      	ldr	r3, [pc, #200]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d1a6:	4b2f      	ldr	r3, [pc, #188]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ac:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d1b4:	4b2b      	ldr	r3, [pc, #172]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ba:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	655a      	str	r2, [r3, #84]	@ 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d1c2:	4b28      	ldr	r3, [pc, #160]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	659a      	str	r2, [r3, #88]	@ 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d1d0:	4b24      	ldr	r3, [pc, #144]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d6:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d1de:	4b21      	ldr	r3, [pc, #132]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1e4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	661a      	str	r2, [r3, #96]	@ 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d1ec:	4b1d      	ldr	r3, [pc, #116]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1f2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	675a      	str	r2, [r3, #116]	@ 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d1fa:	4b1a      	ldr	r3, [pc, #104]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d200:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	679a      	str	r2, [r3, #120]	@ 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d208:	4b16      	ldr	r3, [pc, #88]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d216:	4b13      	ldr	r3, [pc, #76]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d21c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800d226:	4b0f      	ldr	r3, [pc, #60]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d22c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800d236:	4b0b      	ldr	r3, [pc, #44]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d23c:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 800d246:	4b07      	ldr	r3, [pc, #28]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d24c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d256:	4b03      	ldr	r3, [pc, #12]	@ (800d264 <HAL_RCCEx_GetPeriphCLKConfig+0x2ec>)
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d25e:	e003      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKConfig+0x2f0>
 800d260:	1cfffff1 	.word	0x1cfffff1
 800d264:	40023800 	.word	0x40023800
 800d268:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d26a:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a4 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 800d26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d26e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800d272:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d274:	431a      	orrs	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	631a      	str	r2, [r3, #48]	@ 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d27a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a4 <HAL_RCCEx_GetPeriphCLKConfig+0x32c>)
 800d27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d284:	2b00      	cmp	r3, #0
 800d286:	d103      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKConfig+0x318>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d28e:	e003      	b.n	800d298 <HAL_RCCEx_GetPeriphCLKConfig+0x320>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d296:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d298:	bf00      	nop
 800d29a:	376c      	adds	r7, #108	@ 0x6c
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	40023800 	.word	0x40023800

0800d2a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d2c6:	f040 80a4 	bne.w	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;   
 800d2ca:	4ba6      	ldr	r3, [pc, #664]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2d0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d2d8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d2e0:	f000 808a 	beq.w	800d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d2ea:	f200 8091 	bhi.w	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2f4:	d07d      	beq.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2fc:	f200 8088 	bhi.w	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d30c:	d039      	beq.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 800d30e:	e07f      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d310:	4b94      	ldr	r3, [pc, #592]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d108      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d31c:	4b91      	ldr	r3, [pc, #580]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d324:	4a90      	ldr	r2, [pc, #576]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d326:	fbb2 f3f3 	udiv	r3, r2, r3
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	e007      	b.n	800d33e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d32e:	4b8d      	ldr	r3, [pc, #564]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d336:	4a8d      	ldr	r2, [pc, #564]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d338:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d33e:	4b89      	ldr	r3, [pc, #548]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d344:	0e1b      	lsrs	r3, r3, #24
 800d346:	f003 030f 	and.w	r3, r3, #15
 800d34a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d34c:	4b85      	ldr	r3, [pc, #532]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d352:	099b      	lsrs	r3, r3, #6
 800d354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	fb03 f202 	mul.w	r2, r3, r2
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	fbb2 f3f3 	udiv	r3, r2, r3
 800d364:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d366:	4b7f      	ldr	r3, [pc, #508]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	f003 031f 	and.w	r3, r3, #31
 800d372:	3301      	adds	r3, #1
 800d374:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d37e:	617b      	str	r3, [r7, #20]
        break;       
 800d380:	e047      	b.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d382:	4b78      	ldr	r3, [pc, #480]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d108      	bne.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d38e:	4b75      	ldr	r3, [pc, #468]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d396:	4a74      	ldr	r2, [pc, #464]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d398:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39c:	613b      	str	r3, [r7, #16]
 800d39e:	e007      	b.n	800d3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d3a0:	4b70      	ldr	r3, [pc, #448]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d3a8:	4a70      	ldr	r2, [pc, #448]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d3b0:	4b6c      	ldr	r3, [pc, #432]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3b6:	0e1b      	lsrs	r3, r3, #24
 800d3b8:	f003 030f 	and.w	r3, r3, #15
 800d3bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d3be:	4b69      	ldr	r3, [pc, #420]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3c4:	099b      	lsrs	r3, r3, #6
 800d3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	fb03 f202 	mul.w	r2, r3, r2
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d6:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 800d3d8:	4b62      	ldr	r3, [pc, #392]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3de:	f003 031f 	and.w	r3, r3, #31
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ee:	617b      	str	r3, [r7, #20]
        break;
 800d3f0:	e00f      	b.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d3f2:	4b5f      	ldr	r3, [pc, #380]	@ (800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d3f4:	617b      	str	r3, [r7, #20]
        break;       
 800d3f6:	e00c      	b.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d3f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800d404:	4b58      	ldr	r3, [pc, #352]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d406:	617b      	str	r3, [r7, #20]
        break;       
 800d408:	e003      	b.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800d40a:	4b58      	ldr	r3, [pc, #352]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d40c:	617b      	str	r3, [r7, #20]
        break;       
 800d40e:	e000      	b.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800d410:	bf00      	nop
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d418:	f040 80ad 	bne.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;   
 800d41c:	4b51      	ldr	r3, [pc, #324]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d422:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d42a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d432:	f000 808a 	beq.w	800d54a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d43c:	f200 809a 	bhi.w	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d446:	d07d      	beq.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d44e:	f200 8091 	bhi.w	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d45e:	d039      	beq.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 800d460:	e088      	b.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d462:	4b40      	ldr	r3, [pc, #256]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d108      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d46e:	4b3d      	ldr	r3, [pc, #244]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d476:	4a3c      	ldr	r2, [pc, #240]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d478:	fbb2 f3f3 	udiv	r3, r2, r3
 800d47c:	613b      	str	r3, [r7, #16]
 800d47e:	e007      	b.n	800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d480:	4b38      	ldr	r3, [pc, #224]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d488:	4a38      	ldr	r2, [pc, #224]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d490:	4b34      	ldr	r3, [pc, #208]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d496:	0e1b      	lsrs	r3, r3, #24
 800d498:	f003 030f 	and.w	r3, r3, #15
 800d49c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d49e:	4b31      	ldr	r3, [pc, #196]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4a4:	099b      	lsrs	r3, r3, #6
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	fb03 f202 	mul.w	r2, r3, r2
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4be:	0a1b      	lsrs	r3, r3, #8
 800d4c0:	f003 031f 	and.w	r3, r3, #31
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]
        break;       
 800d4d2:	e050      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d4d4:	4b23      	ldr	r3, [pc, #140]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d108      	bne.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d4e0:	4b20      	ldr	r3, [pc, #128]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4e8:	4a1f      	ldr	r2, [pc, #124]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ee:	613b      	str	r3, [r7, #16]
 800d4f0:	e007      	b.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d4f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4fa:	4a1c      	ldr	r2, [pc, #112]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d500:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d502:	4b18      	ldr	r3, [pc, #96]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d508:	0e1b      	lsrs	r3, r3, #24
 800d50a:	f003 030f 	and.w	r3, r3, #15
 800d50e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d510:	4b14      	ldr	r3, [pc, #80]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d516:	099b      	lsrs	r3, r3, #6
 800d518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	fb03 f202 	mul.w	r2, r3, r2
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	fbb2 f3f3 	udiv	r3, r2, r3
 800d528:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 800d52a:	4b0e      	ldr	r3, [pc, #56]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d530:	f003 031f 	and.w	r3, r3, #31
 800d534:	3301      	adds	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d540:	617b      	str	r3, [r7, #20]
        break;
 800d542:	e018      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d544:	4b0a      	ldr	r3, [pc, #40]	@ (800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d546:	617b      	str	r3, [r7, #20]
        break;       
 800d548:	e015      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d54a:	4b06      	ldr	r3, [pc, #24]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d552:	2b00      	cmp	r3, #0
 800d554:	d102      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800d556:	4b04      	ldr	r3, [pc, #16]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d558:	617b      	str	r3, [r7, #20]
        break;       
 800d55a:	e00c      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800d55c:	4b03      	ldr	r3, [pc, #12]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d55e:	617b      	str	r3, [r7, #20]
        break;       
 800d560:	e009      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800d562:	bf00      	nop
 800d564:	40023800 	.word	0x40023800
 800d568:	00f42400 	.word	0x00f42400
 800d56c:	017d7840 	.word	0x017d7840
 800d570:	00bb8000 	.word	0x00bb8000
        break;
 800d574:	bf00      	nop
      }
    }
  }
  
  return frequency;
 800d576:	697b      	ldr	r3, [r7, #20]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	371c      	adds	r7, #28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e14d      	b.n	800d83e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f98f 	bl	800d8da <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fafd 	bl	800dbc4 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	d00c      	beq.n	800d5ec <HAL_SAI_Init+0x68>
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d80d      	bhi.n	800d5f2 <HAL_SAI_Init+0x6e>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d002      	beq.n	800d5e0 <HAL_SAI_Init+0x5c>
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d003      	beq.n	800d5e6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800d5de:	e008      	b.n	800d5f2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61fb      	str	r3, [r7, #28]
      break;
 800d5e4:	e006      	b.n	800d5f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d5e6:	2310      	movs	r3, #16
 800d5e8:	61fb      	str	r3, [r7, #28]
      break;
 800d5ea:	e003      	b.n	800d5f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d5ec:	2320      	movs	r3, #32
 800d5ee:	61fb      	str	r3, [r7, #28]
      break;
 800d5f0:	e000      	b.n	800d5f4 <HAL_SAI_Init+0x70>
    break;
 800d5f2:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	2b03      	cmp	r3, #3
 800d5fa:	d81e      	bhi.n	800d63a <HAL_SAI_Init+0xb6>
 800d5fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d604 <HAL_SAI_Init+0x80>)
 800d5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d602:	bf00      	nop
 800d604:	0800d615 	.word	0x0800d615
 800d608:	0800d61b 	.word	0x0800d61b
 800d60c:	0800d623 	.word	0x0800d623
 800d610:	0800d62b 	.word	0x0800d62b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	617b      	str	r3, [r7, #20]
      }
      break;
 800d618:	e010      	b.n	800d63c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800d61a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d61e:	617b      	str	r3, [r7, #20]
      }
      break;
 800d620:	e00c      	b.n	800d63c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d622:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d626:	617b      	str	r3, [r7, #20]
      }
      break;
 800d628:	e008      	b.n	800d63c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d62a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d62e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	f043 0301 	orr.w	r3, r3, #1
 800d636:	61fb      	str	r3, [r7, #28]
      }
      break;
 800d638:	e000      	b.n	800d63c <HAL_SAI_Init+0xb8>
  default:
    break;      
 800d63a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a81      	ldr	r2, [pc, #516]	@ (800d848 <HAL_SAI_Init+0x2c4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d004      	beq.n	800d650 <HAL_SAI_Init+0xcc>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a80      	ldr	r2, [pc, #512]	@ (800d84c <HAL_SAI_Init+0x2c8>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d103      	bne.n	800d658 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d650:	4a7f      	ldr	r2, [pc, #508]	@ (800d850 <HAL_SAI_Init+0x2cc>)
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	e002      	b.n	800d65e <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 800d658:	4a7e      	ldr	r2, [pc, #504]	@ (800d854 <HAL_SAI_Init+0x2d0>)
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d043      	beq.n	800d6ee <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a76      	ldr	r2, [pc, #472]	@ (800d848 <HAL_SAI_Init+0x2c4>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d004      	beq.n	800d67e <HAL_SAI_Init+0xfa>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a74      	ldr	r2, [pc, #464]	@ (800d84c <HAL_SAI_Init+0x2c8>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d104      	bne.n	800d688 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d67e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d682:	f7ff fe11 	bl	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d686:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a72      	ldr	r2, [pc, #456]	@ (800d858 <HAL_SAI_Init+0x2d4>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d004      	beq.n	800d69c <HAL_SAI_Init+0x118>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a71      	ldr	r2, [pc, #452]	@ (800d85c <HAL_SAI_Init+0x2d8>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d104      	bne.n	800d6a6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d69c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d6a0:	f7ff fe02 	bl	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	025b      	lsls	r3, r3, #9
 800d6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	4a67      	ldr	r2, [pc, #412]	@ (800d860 <HAL_SAI_Init+0x2dc>)
 800d6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c6:	08da      	lsrs	r2, r3, #3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800d6cc:	68f9      	ldr	r1, [r7, #12]
 800d6ce:	4b64      	ldr	r3, [pc, #400]	@ (800d860 <HAL_SAI_Init+0x2dc>)
 800d6d0:	fba3 2301 	umull	r2, r3, r3, r1
 800d6d4:	08da      	lsrs	r2, r3, #3
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4413      	add	r3, r2
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	1aca      	subs	r2, r1, r3
 800d6e0:	2a08      	cmp	r2, #8
 800d6e2:	d904      	bls.n	800d6ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	1c5a      	adds	r2, r3, #1
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <HAL_SAI_Init+0x17a>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d109      	bne.n	800d712 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <HAL_SAI_Init+0x186>
 800d706:	2300      	movs	r3, #0
 800d708:	e001      	b.n	800d70e <HAL_SAI_Init+0x18a>
 800d70a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d70e:	61bb      	str	r3, [r7, #24]
 800d710:	e008      	b.n	800d724 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d716:	2b01      	cmp	r3, #1
 800d718:	d102      	bne.n	800d720 <HAL_SAI_Init+0x19c>
 800d71a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d71e:	e000      	b.n	800d722 <HAL_SAI_Init+0x19e>
 800d720:	2300      	movs	r3, #0
 800d722:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	4b4d      	ldr	r3, [pc, #308]	@ (800d864 <HAL_SAI_Init+0x2e0>)
 800d730:	400b      	ands	r3, r1
 800d732:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d742:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d748:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d74e:	431a      	orrs	r2, r3
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 800d75c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d768:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	051b      	lsls	r3, r3, #20
 800d770:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	430a      	orrs	r2, r1
 800d778:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6859      	ldr	r1, [r3, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	4b38      	ldr	r3, [pc, #224]	@ (800d868 <HAL_SAI_Init+0x2e4>)
 800d786:	400b      	ands	r3, r1
 800d788:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6859      	ldr	r1, [r3, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	699a      	ldr	r2, [r3, #24]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d798:	431a      	orrs	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79e:	431a      	orrs	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6899      	ldr	r1, [r3, #8]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	4b2e      	ldr	r3, [pc, #184]	@ (800d86c <HAL_SAI_Init+0x2e8>)
 800d7b4:	400b      	ands	r3, r1
 800d7b6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6899      	ldr	r1, [r3, #8]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7c2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d7c8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 800d7ce:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 800d7d4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800d7de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68d9      	ldr	r1, [r3, #12]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800d7f6:	400b      	ands	r3, r1
 800d7f8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68d9      	ldr	r1, [r3, #12]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d808:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d80e:	041b      	lsls	r3, r3, #16
 800d810:	431a      	orrs	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d816:	3b01      	subs	r3, #1
 800d818:	021b      	lsls	r3, r3, #8
 800d81a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	430a      	orrs	r2, r1
 800d822:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  
  return HAL_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	40015804 	.word	0x40015804
 800d84c:	40015824 	.word	0x40015824
 800d850:	40015800 	.word	0x40015800
 800d854:	40015c00 	.word	0x40015c00
 800d858:	40015c04 	.word	0x40015c04
 800d85c:	40015c24 	.word	0x40015c24
 800d860:	cccccccd 	.word	0xcccccccd
 800d864:	ff05c010 	.word	0xff05c010
 800d868:	ffff1ff0 	.word	0xffff1ff0
 800d86c:	fff88000 	.word	0xfff88000

0800d870 <HAL_SAI_DeInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e027      	b.n	800d8d2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2202      	movs	r2, #2
 800d886:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2200      	movs	r2, #0
 800d890:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f04f 32ff 	mov.w	r2, #4294967295
 800d89a:	619a      	str	r2, [r3, #24]
  
  /* Disable the SAI */
  SAI_Disable(hsai);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f991 	bl	800dbc4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f042 0208 	orr.w	r2, r2, #8
 800d8b0:	605a      	str	r2, [r3, #4]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f81b 	bl	800d8ee <HAL_SAI_MspDeInit>

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <HAL_SAI_MspInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800d8e2:	bf00      	nop
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <HAL_SAI_MspDeInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800d8ee:	b480      	push	{r7}
 800d8f0:	b083      	sub	sp, #12
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <HAL_SAI_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	4613      	mov	r3, r2
 800d910:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <HAL_SAI_Transmit_DMA+0x1a>
 800d918:	88fb      	ldrh	r3, [r7, #6]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e074      	b.n	800da0c <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d16d      	bne.n	800da0a <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d934:	2b01      	cmp	r3, #1
 800d936:	d101      	bne.n	800d93c <HAL_SAI_Transmit_DMA+0x38>
 800d938:	2302      	movs	r3, #2
 800d93a:	e067      	b.n	800da0c <HAL_SAI_Transmit_DMA+0x108>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	88fa      	ldrh	r2, [r7, #6]
 800d94e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	88fa      	ldrh	r2, [r7, #6]
 800d956:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2212      	movs	r2, #18
 800d966:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d96e:	4a29      	ldr	r2, [pc, #164]	@ (800da14 <HAL_SAI_Transmit_DMA+0x110>)
 800d970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d976:	4a28      	ldr	r2, [pc, #160]	@ (800da18 <HAL_SAI_Transmit_DMA+0x114>)
 800d978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d97e:	4a27      	ldr	r2, [pc, #156]	@ (800da1c <HAL_SAI_Transmit_DMA+0x118>)
 800d980:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d986:	2200      	movs	r2, #0
 800d988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d992:	4619      	mov	r1, r3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	331c      	adds	r3, #28
 800d99a:	461a      	mov	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d9a2:	f7f9 fb0d 	bl	8006fc0 <HAL_DMA_Start_IT>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e029      	b.n	800da0c <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d107      	bne.n	800d9d6 <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d9d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f8bd 	bl	800db58 <SAI_InterruptFlag>
 800d9de:	4601      	mov	r1, r0
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691a      	ldr	r2, [r3, #16]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d9fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	e000      	b.n	800da0c <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800da0a:	2302      	movs	r3, #2
  }
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	0800dc95 	.word	0x0800dc95
 800da18:	0800dc31 	.word	0x0800dc31
 800da1c:	0800dd31 	.word	0x0800dd31

0800da20 <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	4613      	mov	r3, r2
 800da2c:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <HAL_SAI_Receive_DMA+0x1a>
 800da34:	88fb      	ldrh	r3, [r7, #6]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e074      	b.n	800db28 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b01      	cmp	r3, #1
 800da48:	d16d      	bne.n	800db26 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800da50:	2b01      	cmp	r3, #1
 800da52:	d101      	bne.n	800da58 <HAL_SAI_Receive_DMA+0x38>
 800da54:	2302      	movs	r3, #2
 800da56:	e067      	b.n	800db28 <HAL_SAI_Receive_DMA+0x108>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	88fa      	ldrh	r2, [r7, #6]
 800da6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	88fa      	ldrh	r2, [r7, #6]
 800da72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2222      	movs	r2, #34	@ 0x22
 800da82:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da8a:	4a29      	ldr	r2, [pc, #164]	@ (800db30 <HAL_SAI_Receive_DMA+0x110>)
 800da8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da92:	4a28      	ldr	r2, [pc, #160]	@ (800db34 <HAL_SAI_Receive_DMA+0x114>)
 800da94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da9a:	4a27      	ldr	r2, [pc, #156]	@ (800db38 <HAL_SAI_Receive_DMA+0x118>)
 800da9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daa2:	2200      	movs	r2, #0
 800daa4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	331c      	adds	r3, #28
 800dab0:	4619      	mov	r1, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dab6:	461a      	mov	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dabe:	f7f9 fa7f 	bl	8006fc0 <HAL_DMA_Start_IT>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d005      	beq.n	800dad4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e029      	b.n	800db28 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d107      	bne.n	800daf2 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800daf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800daf2:	2100      	movs	r1, #0
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 f82f 	bl	800db58 <SAI_InterruptFlag>
 800dafa:	4601      	mov	r1, r0
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	691a      	ldr	r2, [r3, #16]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	430a      	orrs	r2, r1
 800db08:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800db18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	e000      	b.n	800db28 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800db26:	2302      	movs	r3, #2
  }
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	0800dd15 	.word	0x0800dd15
 800db34:	0800dcb1 	.word	0x0800dcb1
 800db38:	0800dd31 	.word	0x0800dd31

0800db3c <HAL_SAI_GetState>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800db4a:	b2db      	uxtb	r3, r3
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode: SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800db62:	2301      	movs	r3, #1
 800db64:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d103      	bne.n	800db74 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f043 0308 	orr.w	r3, r3, #8
 800db72:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db78:	2b08      	cmp	r3, #8
 800db7a:	d10b      	bne.n	800db94 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800db80:	2b03      	cmp	r3, #3
 800db82:	d003      	beq.n	800db8c <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d103      	bne.n	800db94 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f043 0310 	orr.w	r3, r3, #16
 800db92:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d003      	beq.n	800dba4 <SAI_InterruptFlag+0x4c>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d104      	bne.n	800dbae <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	e003      	b.n	800dbb6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f043 0304 	orr.w	r3, r3, #4
 800dbb4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800dbc4:	b490      	push	{r4, r7}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800dbcc:	4b16      	ldr	r3, [pc, #88]	@ (800dc28 <SAI_Disable+0x64>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a16      	ldr	r2, [pc, #88]	@ (800dc2c <SAI_Disable+0x68>)
 800dbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd6:	0b1b      	lsrs	r3, r3, #12
 800dbd8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800dbec:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800dbee:	4623      	mov	r3, r4
 800dbf0:	1e5c      	subs	r4, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10a      	bne.n	800dc0c <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800dc06:	2303      	movs	r3, #3
 800dc08:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0a:	e006      	b.n	800dc1a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1e9      	bne.n	800dbee <SAI_Disable+0x2a>

  return status;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bc90      	pop	{r4, r7}
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	2002067c 	.word	0x2002067c
 800dc2c:	95cbec1b 	.word	0x95cbec1b

0800dc30 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc3c:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d11c      	bne.n	800dc86 <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800dc62:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dc64:	2100      	movs	r1, #0
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff ff76 	bl	800db58 <SAI_InterruptFlag>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	43d9      	mvns	r1, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	691a      	ldr	r2, [r3, #16]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	400a      	ands	r2, r1
 800dc7c:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f001 f8b0 	bl	800edec <HAL_SAI_TxCpltCallback>
}
 800dc8c:	bf00      	nop
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca0:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f001 f8ac 	bl	800ee00 <HAL_SAI_TxHalfCpltCallback>
}
 800dca8:	bf00      	nop
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcbc:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d11c      	bne.n	800dd06 <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800dcda:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dce4:	2100      	movs	r1, #0
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7ff ff36 	bl	800db58 <SAI_InterruptFlag>
 800dcec:	4603      	mov	r3, r0
 800dcee:	43d9      	mvns	r1, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	691a      	ldr	r2, [r3, #16]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	400a      	ands	r2, r1
 800dcfc:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f002 f806 	bl	800fd18 <HAL_SAI_RxCpltCallback>
}
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd20:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f001 ffee 	bl	800fd04 <HAL_SAI_RxHalfCpltCallback>
}
 800dd28:	bf00      	nop
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd3c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d004      	beq.n	800dd62 <SAI_DMAError+0x32>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d112      	bne.n	800dd88 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800dd70:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f7ff ff26 	bl	800dbc4 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f001 f843 	bl	800ee14 <HAL_SAI_ErrorCallback>
}
 800dd8e:	bf00      	nop
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b082      	sub	sp, #8
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
 800dd9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e025      	b.n	800ddf6 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d106      	bne.n	800ddc4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f81d 	bl	800ddfe <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	f000 f866 	bl	800dea8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	461a      	mov	r2, r3
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	f000 f8d0 	bl	800df8c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <HAL_SDRAM_MspInit>:
  * @param  hsdram: pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800ddfe:	b480      	push	{r7}
 800de00:	b083      	sub	sp, #12
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	af00      	add	r7, sp, #0
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b02      	cmp	r3, #2
 800de28:	d101      	bne.n	800de2e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800de2a:	2302      	movs	r3, #2
 800de2c:	e018      	b.n	800de60 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2202      	movs	r2, #2
 800de32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	68b9      	ldr	r1, [r7, #8]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 f924 	bl	800e08c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d104      	bne.n	800de56 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2205      	movs	r2, #5
 800de50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800de54:	e003      	b.n	800de5e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d101      	bne.n	800de82 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800de7e:	2302      	movs	r3, #2
 800de80:	e00e      	b.n	800dea0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2202      	movs	r2, #2
 800de86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	4618      	mov	r0, r3
 800de92:	f000 f937 	bl	800e104 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <FMC_SDRAM_Init>:
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d027      	beq.n	800df12 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4b2f      	ldr	r3, [pc, #188]	@ (800df88 <FMC_SDRAM_Init+0xe0>)
 800decc:	4013      	ands	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ded8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800dede:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800dee4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800deea:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800def0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800def6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800defc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800df02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	4313      	orrs	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	e032      	b.n	800df78 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800df1e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df28:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800df2e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	4313      	orrs	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	4b12      	ldr	r3, [pc, #72]	@ (800df88 <FMC_SDRAM_Init+0xe0>)
 800df40:	4013      	ands	r3, r2
 800df42:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df4c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800df52:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800df58:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800df5e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800df64:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	4313      	orrs	r3, r2
 800df6a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	ffff8000 	.word	0xffff8000

0800df8c <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d02e      	beq.n	800e004 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dfb2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dfc2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800dfcc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	3b01      	subs	r3, #1
 800dfd4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800dfd6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800dfe0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800dfea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dff4:	4313      	orrs	r3, r2
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	609a      	str	r2, [r3, #8]
 800e002:	e039      	b.n	800e078 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	4b1e      	ldr	r3, [pc, #120]	@ (800e088 <FMC_SDRAM_Timing_Init+0xfc>)
 800e00e:	4013      	ands	r3, r2
 800e010:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	3b01      	subs	r3, #1
 800e018:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	3b01      	subs	r3, #1
 800e020:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e022:	4313      	orrs	r3, r2
 800e024:	697a      	ldr	r2, [r7, #20]
 800e026:	4313      	orrs	r3, r2
 800e028:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e036:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	3b01      	subs	r3, #1
 800e044:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e046:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e050:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	3b01      	subs	r3, #1
 800e058:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e05a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	699b      	ldr	r3, [r3, #24]
 800e060:	3b01      	subs	r3, #1
 800e062:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e064:	4313      	orrs	r3, r2
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	4313      	orrs	r3, r2
 800e06a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	371c      	adds	r7, #28
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	ff0f0fff 	.word	0xff0f0fff

0800e08c <FMC_SDRAM_SendCommand>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e0a8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800e0b2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800e0c4:	f7f8 fbc2 	bl	800684c <HAL_GetTick>
 800e0c8:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800e0ca:	e010      	b.n	800e0ee <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d2:	d00c      	beq.n	800e0ee <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d007      	beq.n	800e0ea <FMC_SDRAM_SendCommand+0x5e>
 800e0da:	f7f8 fbb7 	bl	800684c <HAL_GetTick>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d201      	bcs.n	800e0ee <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	e006      	b.n	800e0fc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	f003 0320 	and.w	r3, r3, #32
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e8      	bne.n	800e0cc <FMC_SDRAM_SendCommand+0x40>
      }
    }     
  }
  
  return HAL_OK;  
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device: Pointer to SDRAM device instance  
  * @param  RefreshRate: The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	695a      	ldr	r2, [r3, #20]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr

0800e12a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e12a:	b480      	push	{r7}
 800e12c:	b083      	sub	sp, #12
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	f043 0201 	orr.w	r2, r3, #1
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	f023 0201 	bic.w	r2, r3, #1
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
	...

0800e170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	019b      	lsls	r3, r3, #6
 800e182:	f043 0220 	orr.w	r2, r3, #32
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3301      	adds	r3, #1
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4a09      	ldr	r2, [pc, #36]	@ (800e1b8 <USB_FlushTxFifo+0x48>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d901      	bls.n	800e19c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e006      	b.n	800e1aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	f003 0320 	and.w	r3, r3, #32
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	d0f0      	beq.n	800e18a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	00030d40 	.word	0x00030d40

0800e1bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2210      	movs	r2, #16
 800e1cc:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4a09      	ldr	r2, [pc, #36]	@ (800e1fc <USB_FlushRxFifo+0x40>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d901      	bls.n	800e1e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	e006      	b.n	800e1ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	f003 0310 	and.w	r3, r3, #16
 800e1e8:	2b10      	cmp	r3, #16
 800e1ea:	d0f0      	beq.n	800e1ce <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	00030d40 	.word	0x00030d40

0800e200 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e200:	b480      	push	{r7}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	4613      	mov	r3, r2
 800e20c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800e20e:	2300      	movs	r3, #0
 800e210:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	3303      	adds	r3, #3
 800e216:	2b00      	cmp	r3, #0
 800e218:	da00      	bge.n	800e21c <USB_ReadPacket+0x1c>
 800e21a:	3303      	adds	r3, #3
 800e21c:	109b      	asrs	r3, r3, #2
 800e21e:	613b      	str	r3, [r7, #16]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 800e220:	2300      	movs	r3, #0
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	e00b      	b.n	800e23e <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	3301      	adds	r3, #1
 800e236:	617b      	str	r3, [r7, #20]
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	3304      	adds	r3, #4
 800e23c:	60bb      	str	r3, [r7, #8]
 800e23e:	697a      	ldr	r2, [r7, #20]
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	429a      	cmp	r2, r3
 800e244:	d3ef      	bcc.n	800e226 <USB_ReadPacket+0x26>
    
  }
  return ((void *)dest);
 800e246:	68bb      	ldr	r3, [r7, #8]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	371c      	adds	r7, #28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	695b      	ldr	r3, [r3, #20]
 800e264:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	699b      	ldr	r3, [r3, #24]
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	4013      	ands	r3, r2
 800e26e:	60fb      	str	r3, [r7, #12]
  return v;  
 800e270:	68fb      	ldr	r3, [r7, #12]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	f003 0301 	and.w	r3, r3, #1
}
 800e28e:	4618      	mov	r0, r3
 800e290:	370c      	adds	r7, #12
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b083      	sub	sp, #12
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e2b4:	f023 0303 	bic.w	r3, r3, #3
 800e2b8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	78fb      	ldrb	r3, [r7, #3]
 800e2c4:	f003 0303 	and.w	r3, r3, #3
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 800e2d2:	78fb      	ldrb	r3, [r7, #3]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d107      	bne.n	800e2e8 <USB_InitFSLSPClkSel+0x4e>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e2e4:	6053      	str	r3, [r2, #4]
 800e2e6:	e009      	b.n	800e2fc <USB_InitFSLSPClkSel+0x62>
  }
  else if (freq ==  HCFG_6_MHZ)
 800e2e8:	78fb      	ldrb	r3, [r7, #3]
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d106      	bne.n	800e2fc <USB_InitFSLSPClkSel+0x62>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e2fa:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	460b      	mov	r3, r1
 800e314:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e326:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d109      	bne.n	800e346 <USB_DriveVbus+0x3c>
 800e332:	78fb      	ldrb	r3, [r7, #3]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d106      	bne.n	800e346 <USB_DriveVbus+0x3c>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e344:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e34c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e350:	d109      	bne.n	800e366 <USB_DriveVbus+0x5c>
 800e352:	78fb      	ldrb	r3, [r7, #3]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <USB_DriveVbus+0x5c>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e364:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	b29b      	uxth	r3, r3
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800e3a2:	78fb      	ldrb	r3, [r7, #3]
 800e3a4:	015a      	lsls	r2, r3, #5
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	0c9b      	lsrs	r3, r3, #18
 800e3b2:	f003 0303 	and.w	r3, r3, #3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00b      	beq.n	800e3d2 <USB_HC_Halt+0x40>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 800e3ba:	78fb      	ldrb	r3, [r7, #3]
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	0c9b      	lsrs	r3, r3, #18
 800e3ca:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d16b      	bne.n	800e4aa <USB_HC_Halt+0x118>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	015a      	lsls	r2, r3, #5
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4413      	add	r3, r2
 800e3da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	78fa      	ldrb	r2, [r7, #3]
 800e3e2:	0151      	lsls	r1, r2, #5
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	440a      	add	r2, r1
 800e3e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e3f0:	6013      	str	r3, [r2, #0]
    
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d143      	bne.n	800e484 <USB_HC_Halt+0xf2>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e3fc:	78fb      	ldrb	r3, [r7, #3]
 800e3fe:	015a      	lsls	r2, r3, #5
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4413      	add	r3, r2
 800e404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	0151      	lsls	r1, r2, #5
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	440a      	add	r2, r1
 800e412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e41a:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	015a      	lsls	r2, r3, #5
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4413      	add	r3, r2
 800e424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	0151      	lsls	r1, r2, #5
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	440a      	add	r2, r1
 800e432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e43a:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e43c:	78fb      	ldrb	r3, [r7, #3]
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4413      	add	r3, r2
 800e444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	78fa      	ldrb	r2, [r7, #3]
 800e44c:	0151      	lsls	r1, r2, #5
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	440a      	add	r2, r1
 800e452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e456:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e45a:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000) 
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3301      	adds	r3, #1
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e468:	d81d      	bhi.n	800e4a6 <USB_HC_Halt+0x114>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800e46a:	78fb      	ldrb	r3, [r7, #3]
 800e46c:	015a      	lsls	r2, r3, #5
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4413      	add	r3, r2
 800e472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e47c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e480:	d0ec      	beq.n	800e45c <USB_HC_Halt+0xca>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800e482:	e07f      	b.n	800e584 <USB_HC_Halt+0x1f2>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	78fa      	ldrb	r2, [r7, #3]
 800e494:	0151      	lsls	r1, r2, #5
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	440a      	add	r2, r1
 800e49a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e49e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4a2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800e4a4:	e06e      	b.n	800e584 <USB_HC_Halt+0x1f2>
          break;
 800e4a6:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800e4a8:	e06c      	b.n	800e584 <USB_HC_Halt+0x1f2>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e4aa:	78fb      	ldrb	r3, [r7, #3]
 800e4ac:	015a      	lsls	r2, r3, #5
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	78fa      	ldrb	r2, [r7, #3]
 800e4ba:	0151      	lsls	r1, r2, #5
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	440a      	add	r2, r1
 800e4c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e4c8:	6013      	str	r3, [r2, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d143      	bne.n	800e560 <USB_HC_Halt+0x1ce>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e4d8:	78fb      	ldrb	r3, [r7, #3]
 800e4da:	015a      	lsls	r2, r3, #5
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	78fa      	ldrb	r2, [r7, #3]
 800e4e8:	0151      	lsls	r1, r2, #5
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	440a      	add	r2, r1
 800e4ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800e4f8:	78fb      	ldrb	r3, [r7, #3]
 800e4fa:	015a      	lsls	r2, r3, #5
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4413      	add	r3, r2
 800e500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	0151      	lsls	r1, r2, #5
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	440a      	add	r2, r1
 800e50e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e516:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e518:	78fb      	ldrb	r3, [r7, #3]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e532:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e536:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000) 
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e544:	d81d      	bhi.n	800e582 <USB_HC_Halt+0x1f0>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800e546:	78fb      	ldrb	r3, [r7, #3]
 800e548:	015a      	lsls	r2, r3, #5
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4413      	add	r3, r2
 800e54e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e55c:	d0ec      	beq.n	800e538 <USB_HC_Halt+0x1a6>
 800e55e:	e011      	b.n	800e584 <USB_HC_Halt+0x1f2>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4413      	add	r3, r2
 800e568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	78fa      	ldrb	r2, [r7, #3]
 800e570:	0151      	lsls	r1, r2, #5
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	440a      	add	r2, r1
 800e576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e57a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	e000      	b.n	800e584 <USB_HC_Halt+0x1f2>
          break;
 800e582:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b086      	sub	sp, #24
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fdd4 	bl	800e14c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 800e5a4:	2110      	movs	r1, #16
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff fde2 	bl	800e170 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff fe05 	bl	800e1bc <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	75fb      	strb	r3, [r7, #23]
 800e5b6:	e01f      	b.n	800e5f8 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5ce:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5d6:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e5de:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 800e5e0:	7dfb      	ldrb	r3, [r7, #23]
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	75fb      	strb	r3, [r7, #23]
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	2b0f      	cmp	r3, #15
 800e5fc:	d9dc      	bls.n	800e5b8 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 800e5fe:	2300      	movs	r3, #0
 800e600:	75fb      	strb	r3, [r7, #23]
 800e602:	e034      	b.n	800e66e <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e61a:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e622:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e62a:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4413      	add	r3, r2
 800e634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e638:	461a      	mov	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000) 
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	3301      	adds	r3, #1
 800e642:	613b      	str	r3, [r7, #16]
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e64a:	d80c      	bhi.n	800e666 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	015a      	lsls	r2, r3, #5
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4413      	add	r3, r2
 800e654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e65e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e662:	d0ec      	beq.n	800e63e <USB_StopHost+0xac>
 800e664:	e000      	b.n	800e668 <USB_StopHost+0xd6>
        break;
 800e666:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	3301      	adds	r3, #1
 800e66c:	75fb      	strb	r3, [r7, #23]
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
 800e670:	2b0f      	cmp	r3, #15
 800e672:	d9c7      	bls.n	800e604 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e67a:	461a      	mov	r2, r3
 800e67c:	f04f 33ff 	mov.w	r3, #4294967295
 800e680:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f04f 32ff 	mov.w	r2, #4294967295
 800e688:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff fd4d 	bl	800e12a <USB_EnableGlobalInt>
  return HAL_OK;  
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3718      	adds	r7, #24
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 800e6a6:	4b12      	ldr	r3, [pc, #72]	@ (800e6f0 <BSP_LED_Init+0x54>)
 800e6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6aa:	4a11      	ldr	r2, [pc, #68]	@ (800e6f0 <BSP_LED_Init+0x54>)
 800e6ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e6b0:	6313      	str	r3, [r2, #48]	@ 0x30
 800e6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f0 <BSP_LED_Init+0x54>)
 800e6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e6ba:	60bb      	str	r3, [r7, #8]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e6f4 <BSP_LED_Init+0x58>)
 800e6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	4a08      	ldr	r2, [pc, #32]	@ (800e6f8 <BSP_LED_Init+0x5c>)
 800e6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6dc:	f107 020c 	add.w	r2, r7, #12
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f9 fece 	bl	8008484 <HAL_GPIO_Init>

}
 800e6e8:	bf00      	nop
 800e6ea:	3720      	adds	r7, #32
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	40023800 	.word	0x40023800
 800e6f4:	20020658 	.word	0x20020658
 800e6f8:	20020660 	.word	0x20020660

0800e6fc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	4a07      	ldr	r2, [pc, #28]	@ (800e728 <BSP_LED_On+0x2c>)
 800e70a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	4a06      	ldr	r2, [pc, #24]	@ (800e72c <BSP_LED_On+0x30>)
 800e712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e716:	b29b      	uxth	r3, r3
 800e718:	2201      	movs	r2, #1
 800e71a:	4619      	mov	r1, r3
 800e71c:	f7fa f876 	bl	800880c <HAL_GPIO_WritePin>
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20020660 	.word	0x20020660
 800e72c:	20020658 	.word	0x20020658

0800e730 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	4a07      	ldr	r2, [pc, #28]	@ (800e75c <BSP_LED_Off+0x2c>)
 800e73e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	4a06      	ldr	r2, [pc, #24]	@ (800e760 <BSP_LED_Off+0x30>)
 800e746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	2200      	movs	r2, #0
 800e74e:	4619      	mov	r1, r3
 800e750:	f7fa f85c 	bl	800880c <HAL_GPIO_WritePin>
}
 800e754:	bf00      	nop
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20020660 	.word	0x20020660
 800e760:	20020658 	.word	0x20020658

0800e764 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	460a      	mov	r2, r1
 800e76e:	71fb      	strb	r3, [r7, #7]
 800e770:	4613      	mov	r3, r2
 800e772:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 800e774:	4b22      	ldr	r3, [pc, #136]	@ (800e800 <BSP_PB_Init+0x9c>)
 800e776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e778:	4a21      	ldr	r2, [pc, #132]	@ (800e800 <BSP_PB_Init+0x9c>)
 800e77a:	f043 0301 	orr.w	r3, r3, #1
 800e77e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e780:	4b1f      	ldr	r3, [pc, #124]	@ (800e800 <BSP_PB_Init+0x9c>)
 800e782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e784:	f003 0301 	and.w	r3, r3, #1
 800e788:	60bb      	str	r3, [r7, #8]
 800e78a:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 800e78c:	79bb      	ldrb	r3, [r7, #6]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d111      	bne.n	800e7b6 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800e792:	2301      	movs	r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800e796:	2300      	movs	r3, #0
 800e798:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e79e:	2302      	movs	r3, #2
 800e7a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	4a17      	ldr	r2, [pc, #92]	@ (800e804 <BSP_PB_Init+0xa0>)
 800e7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7aa:	f107 020c 	add.w	r2, r7, #12
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f9 fe67 	bl	8008484 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 800e7b6:	79bb      	ldrb	r3, [r7, #6]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d11d      	bne.n	800e7f8 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800e7bc:	2301      	movs	r3, #1
 800e7be:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800e7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e808 <BSP_PB_Init+0xa4>)
 800e7ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e7cc:	79fb      	ldrb	r3, [r7, #7]
 800e7ce:	4a0d      	ldr	r2, [pc, #52]	@ (800e804 <BSP_PB_Init+0xa0>)
 800e7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d4:	f107 020c 	add.w	r2, r7, #12
 800e7d8:	4611      	mov	r1, r2
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7f9 fe52 	bl	8008484 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800e7e0:	2306      	movs	r3, #6
 800e7e2:	b25b      	sxtb	r3, r3
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	210f      	movs	r1, #15
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f8 f92a 	bl	8006a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800e7ee:	2306      	movs	r3, #6
 800e7f0:	b25b      	sxtb	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f8 f941 	bl	8006a7a <HAL_NVIC_EnableIRQ>
  }
}
 800e7f8:	bf00      	nop
 800e7fa:	3720      	adds	r7, #32
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	40023800 	.word	0x40023800
 800e804:	20020668 	.word	0x20020668
 800e808:	10110000 	.word	0x10110000

0800e80c <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	4603      	mov	r3, r0
 800e814:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800e816:	79fb      	ldrb	r3, [r7, #7]
 800e818:	4a06      	ldr	r2, [pc, #24]	@ (800e834 <BSP_PB_GetState+0x28>)
 800e81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e81e:	2201      	movs	r2, #1
 800e820:	4611      	mov	r1, r2
 800e822:	4618      	mov	r0, r3
 800e824:	f7f9 ffda 	bl	80087dc <HAL_GPIO_ReadPin>
 800e828:	4603      	mov	r3, r0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	20020668 	.word	0x20020668

0800e838 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08c      	sub	sp, #48	@ 0x30
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a58      	ldr	r2, [pc, #352]	@ (800e9a4 <I2Cx_MspInit+0x16c>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d15b      	bne.n	800e900 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800e848:	4b57      	ldr	r3, [pc, #348]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e84c:	4a56      	ldr	r2, [pc, #344]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e84e:	f043 0308 	orr.w	r3, r3, #8
 800e852:	6313      	str	r3, [r2, #48]	@ 0x30
 800e854:	4b54      	ldr	r3, [pc, #336]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e858:	f003 0308 	and.w	r3, r3, #8
 800e85c:	61bb      	str	r3, [r7, #24]
 800e85e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800e860:	4b51      	ldr	r3, [pc, #324]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e864:	4a50      	ldr	r2, [pc, #320]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e866:	f043 0302 	orr.w	r3, r3, #2
 800e86a:	6313      	str	r3, [r2, #48]	@ 0x30
 800e86c:	4b4e      	ldr	r3, [pc, #312]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e870:	f003 0302 	and.w	r3, r3, #2
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800e878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e87c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800e87e:	2312      	movs	r3, #18
 800e880:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800e882:	2300      	movs	r3, #0
 800e884:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e886:	2302      	movs	r3, #2
 800e888:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800e88a:	2304      	movs	r3, #4
 800e88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800e88e:	f107 031c 	add.w	r3, r7, #28
 800e892:	4619      	mov	r1, r3
 800e894:	4845      	ldr	r0, [pc, #276]	@ (800e9ac <I2Cx_MspInit+0x174>)
 800e896:	f7f9 fdf5 	bl	8008484 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800e89a:	2380      	movs	r3, #128	@ 0x80
 800e89c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800e89e:	230b      	movs	r3, #11
 800e8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800e8a2:	f107 031c 	add.w	r3, r7, #28
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	4841      	ldr	r0, [pc, #260]	@ (800e9b0 <I2Cx_MspInit+0x178>)
 800e8aa:	f7f9 fdeb 	bl	8008484 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800e8ae:	4b3e      	ldr	r3, [pc, #248]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b2:	4a3d      	ldr	r2, [pc, #244]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e8b8:	6413      	str	r3, [r2, #64]	@ 0x40
 800e8ba:	4b3b      	ldr	r3, [pc, #236]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e8c2:	613b      	str	r3, [r7, #16]
 800e8c4:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800e8c6:	4b38      	ldr	r3, [pc, #224]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	4a37      	ldr	r2, [pc, #220]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e8d0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800e8d2:	4b35      	ldr	r3, [pc, #212]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	4a34      	ldr	r2, [pc, #208]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e8d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e8dc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800e8de:	2200      	movs	r2, #0
 800e8e0:	210f      	movs	r1, #15
 800e8e2:	205f      	movs	r0, #95	@ 0x5f
 800e8e4:	f7f8 f8ad 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800e8e8:	205f      	movs	r0, #95	@ 0x5f
 800e8ea:	f7f8 f8c6 	bl	8006a7a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	210f      	movs	r1, #15
 800e8f2:	2060      	movs	r0, #96	@ 0x60
 800e8f4:	f7f8 f8a5 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 800e8f8:	2060      	movs	r0, #96	@ 0x60
 800e8fa:	f7f8 f8be 	bl	8006a7a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800e8fe:	e04d      	b.n	800e99c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800e900:	4b29      	ldr	r3, [pc, #164]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e904:	4a28      	ldr	r2, [pc, #160]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e906:	f043 0302 	orr.w	r3, r3, #2
 800e90a:	6313      	str	r3, [r2, #48]	@ 0x30
 800e90c:	4b26      	ldr	r3, [pc, #152]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e910:	f003 0302 	and.w	r3, r3, #2
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800e918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e91c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800e91e:	2312      	movs	r3, #18
 800e920:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800e922:	2300      	movs	r3, #0
 800e924:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e926:	2302      	movs	r3, #2
 800e928:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800e92a:	2304      	movs	r3, #4
 800e92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e92e:	f107 031c 	add.w	r3, r7, #28
 800e932:	4619      	mov	r1, r3
 800e934:	481e      	ldr	r0, [pc, #120]	@ (800e9b0 <I2Cx_MspInit+0x178>)
 800e936:	f7f9 fda5 	bl	8008484 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800e93a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e93e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e940:	f107 031c 	add.w	r3, r7, #28
 800e944:	4619      	mov	r1, r3
 800e946:	481a      	ldr	r0, [pc, #104]	@ (800e9b0 <I2Cx_MspInit+0x178>)
 800e948:	f7f9 fd9c 	bl	8008484 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800e94c:	4b16      	ldr	r3, [pc, #88]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e950:	4a15      	ldr	r2, [pc, #84]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e956:	6413      	str	r3, [r2, #64]	@ 0x40
 800e958:	4b13      	ldr	r3, [pc, #76]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e95c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e960:	60bb      	str	r3, [r7, #8]
 800e962:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800e964:	4b10      	ldr	r3, [pc, #64]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	4a0f      	ldr	r2, [pc, #60]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e96a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e96e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800e970:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e972:	6a1b      	ldr	r3, [r3, #32]
 800e974:	4a0c      	ldr	r2, [pc, #48]	@ (800e9a8 <I2Cx_MspInit+0x170>)
 800e976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e97a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800e97c:	2200      	movs	r2, #0
 800e97e:	210f      	movs	r1, #15
 800e980:	201f      	movs	r0, #31
 800e982:	f7f8 f85e 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800e986:	201f      	movs	r0, #31
 800e988:	f7f8 f877 	bl	8006a7a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800e98c:	2200      	movs	r2, #0
 800e98e:	210f      	movs	r1, #15
 800e990:	2020      	movs	r0, #32
 800e992:	f7f8 f856 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800e996:	2020      	movs	r0, #32
 800e998:	f7f8 f86f 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 800e99c:	bf00      	nop
 800e99e:	3730      	adds	r7, #48	@ 0x30
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20030d28 	.word	0x20030d28
 800e9a8:	40023800 	.word	0x40023800
 800e9ac:	40020c00 	.word	0x40020c00
 800e9b0:	40020400 	.word	0x40020400

0800e9b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7fb fb43 	bl	800a048 <HAL_I2C_GetState>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d125      	bne.n	800ea14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a14      	ldr	r2, [pc, #80]	@ (800ea1c <I2Cx_Init+0x68>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d103      	bne.n	800e9d8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a13      	ldr	r2, [pc, #76]	@ (800ea20 <I2Cx_Init+0x6c>)
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	e002      	b.n	800e9de <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a12      	ldr	r2, [pc, #72]	@ (800ea24 <I2Cx_Init+0x70>)
 800e9dc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a11      	ldr	r2, [pc, #68]	@ (800ea28 <I2Cx_Init+0x74>)
 800e9e2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff ff15 	bl	800e838 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7fa fffa 	bl	8009a08 <HAL_I2C_Init>
  }
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20030d28 	.word	0x20030d28
 800ea20:	40006000 	.word	0x40006000
 800ea24:	40005400 	.word	0x40005400
 800ea28:	40912732 	.word	0x40912732

0800ea2c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08a      	sub	sp, #40	@ 0x28
 800ea30:	af04      	add	r7, sp, #16
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	4608      	mov	r0, r1
 800ea36:	4611      	mov	r1, r2
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	72fb      	strb	r3, [r7, #11]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	813b      	strh	r3, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ea4a:	7afb      	ldrb	r3, [r7, #11]
 800ea4c:	b299      	uxth	r1, r3
 800ea4e:	88f8      	ldrh	r0, [r7, #6]
 800ea50:	893a      	ldrh	r2, [r7, #8]
 800ea52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea56:	9302      	str	r3, [sp, #8]
 800ea58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea5a:	9301      	str	r3, [sp, #4]
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	4603      	mov	r3, r0
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7fb f9ca 	bl	8009dfc <HAL_I2C_Mem_Read>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800ea6c:	7dfb      	ldrb	r3, [r7, #23]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d004      	beq.n	800ea7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800ea72:	7afb      	ldrb	r3, [r7, #11]
 800ea74:	4619      	mov	r1, r3
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f000 f832 	bl	800eae0 <I2Cx_Error>
  }
  return status;
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b08a      	sub	sp, #40	@ 0x28
 800ea8a:	af04      	add	r7, sp, #16
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	4608      	mov	r0, r1
 800ea90:	4611      	mov	r1, r2
 800ea92:	461a      	mov	r2, r3
 800ea94:	4603      	mov	r3, r0
 800ea96:	72fb      	strb	r3, [r7, #11]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	813b      	strh	r3, [r7, #8]
 800ea9c:	4613      	mov	r3, r2
 800ea9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eaa4:	7afb      	ldrb	r3, [r7, #11]
 800eaa6:	b299      	uxth	r1, r3
 800eaa8:	88f8      	ldrh	r0, [r7, #6]
 800eaaa:	893a      	ldrh	r2, [r7, #8]
 800eaac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eab0:	9302      	str	r3, [sp, #8]
 800eab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	4603      	mov	r3, r0
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f7fb f877 	bl	8009bb0 <HAL_I2C_Mem_Write>
 800eac2:	4603      	mov	r3, r0
 800eac4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800eac6:	7dfb      	ldrb	r3, [r7, #23]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d004      	beq.n	800ead6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800eacc:	7afb      	ldrb	r3, [r7, #11]
 800eace:	4619      	mov	r1, r3
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f805 	bl	800eae0 <I2Cx_Error>
  }
  return status;
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fb f81b 	bl	8009b28 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7ff ff5e 	bl	800e9b4 <I2Cx_Init>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800eb04:	4802      	ldr	r0, [pc, #8]	@ (800eb10 <AUDIO_IO_Init+0x10>)
 800eb06:	f7ff ff55 	bl	800e9b4 <I2Cx_Init>
}
 800eb0a:	bf00      	nop
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20030d28 	.word	0x20030d28

0800eb14 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 800eb14:	b480      	push	{r7}
 800eb16:	af00      	add	r7, sp, #0

}
 800eb18:	bf00      	nop
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
	...

0800eb24 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	71fb      	strb	r3, [r7, #7]
 800eb2e:	460b      	mov	r3, r1
 800eb30:	80bb      	strh	r3, [r7, #4]
 800eb32:	4613      	mov	r3, r2
 800eb34:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800eb36:	887b      	ldrh	r3, [r7, #2]
 800eb38:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800eb3a:	89fb      	ldrh	r3, [r7, #14]
 800eb3c:	0a1b      	lsrs	r3, r3, #8
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800eb42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eb46:	021b      	lsls	r3, r3, #8
 800eb48:	b21a      	sxth	r2, r3
 800eb4a:	887b      	ldrh	r3, [r7, #2]
 800eb4c:	b21b      	sxth	r3, r3
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	b21b      	sxth	r3, r3
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800eb56:	88ba      	ldrh	r2, [r7, #4]
 800eb58:	79f9      	ldrb	r1, [r7, #7]
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	9301      	str	r3, [sp, #4]
 800eb5e:	1cbb      	adds	r3, r7, #2
 800eb60:	9300      	str	r3, [sp, #0]
 800eb62:	2302      	movs	r3, #2
 800eb64:	4803      	ldr	r0, [pc, #12]	@ (800eb74 <AUDIO_IO_Write+0x50>)
 800eb66:	f7ff ff8e 	bl	800ea86 <I2Cx_WriteMultiple>
}
 800eb6a:	bf00      	nop
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20030d28 	.word	0x20030d28

0800eb78 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	4603      	mov	r3, r0
 800eb80:	460a      	mov	r2, r1
 800eb82:	71fb      	strb	r3, [r7, #7]
 800eb84:	4613      	mov	r3, r2
 800eb86:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	81bb      	strh	r3, [r7, #12]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800eb90:	88ba      	ldrh	r2, [r7, #4]
 800eb92:	79f9      	ldrb	r1, [r7, #7]
 800eb94:	2302      	movs	r3, #2
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	f107 030c 	add.w	r3, r7, #12
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	2302      	movs	r3, #2
 800eba0:	480a      	ldr	r0, [pc, #40]	@ (800ebcc <AUDIO_IO_Read+0x54>)
 800eba2:	f7ff ff43 	bl	800ea2c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800eba6:	89bb      	ldrh	r3, [r7, #12]
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800ebac:	89bb      	ldrh	r3, [r7, #12]
 800ebae:	b21b      	sxth	r3, r3
 800ebb0:	021b      	lsls	r3, r3, #8
 800ebb2:	b21a      	sxth	r2, r3
 800ebb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	b21b      	sxth	r3, r3
 800ebbc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800ebbe:	89fb      	ldrh	r3, [r7, #14]
 800ebc0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800ebc2:	89bb      	ldrh	r3, [r7, #12]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	20030d28 	.word	0x20030d28

0800ebd0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7f7 fe43 	bl	8006864 <HAL_Delay>
}
 800ebde:	bf00      	nop
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
	...

0800ebe8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ebec:	4802      	ldr	r0, [pc, #8]	@ (800ebf8 <TS_IO_Init+0x10>)
 800ebee:	f7ff fee1 	bl	800e9b4 <I2Cx_Init>
}
 800ebf2:	bf00      	nop
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20030d28 	.word	0x20030d28

0800ebfc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	4603      	mov	r3, r0
 800ec04:	71fb      	strb	r3, [r7, #7]
 800ec06:	460b      	mov	r3, r1
 800ec08:	71bb      	strb	r3, [r7, #6]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ec0e:	79bb      	ldrb	r3, [r7, #6]
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	79f9      	ldrb	r1, [r7, #7]
 800ec14:	2301      	movs	r3, #1
 800ec16:	9301      	str	r3, [sp, #4]
 800ec18:	1d7b      	adds	r3, r7, #5
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	4803      	ldr	r0, [pc, #12]	@ (800ec2c <TS_IO_Write+0x30>)
 800ec20:	f7ff ff31 	bl	800ea86 <I2Cx_WriteMultiple>
}
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	20030d28 	.word	0x20030d28

0800ec30 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	4603      	mov	r3, r0
 800ec38:	460a      	mov	r2, r1
 800ec3a:	71fb      	strb	r3, [r7, #7]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ec44:	79bb      	ldrb	r3, [r7, #6]
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	79f9      	ldrb	r1, [r7, #7]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f107 030f 	add.w	r3, r7, #15
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	2301      	movs	r3, #1
 800ec56:	4804      	ldr	r0, [pc, #16]	@ (800ec68 <TS_IO_Read+0x38>)
 800ec58:	f7ff fee8 	bl	800ea2c <I2Cx_ReadMultiple>

  return read_value;
 800ec5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20030d28 	.word	0x20030d28

0800ec6c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af02      	add	r7, sp, #8
 800ec72:	603a      	str	r2, [r7, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	4603      	mov	r3, r0
 800ec78:	71fb      	strb	r3, [r7, #7]
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	71bb      	strb	r3, [r7, #6]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800ec82:	79bb      	ldrb	r3, [r7, #6]
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	79f9      	ldrb	r1, [r7, #7]
 800ec88:	88bb      	ldrh	r3, [r7, #4]
 800ec8a:	9301      	str	r3, [sp, #4]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	2301      	movs	r3, #1
 800ec92:	4804      	ldr	r0, [pc, #16]	@ (800eca4 <TS_IO_ReadMultiple+0x38>)
 800ec94:	f7ff feca 	bl	800ea2c <I2Cx_ReadMultiple>
 800ec98:	4603      	mov	r3, r0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20030d28 	.word	0x20030d28

0800eca8 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7f7 fdd7 	bl	8006864 <HAL_Delay>
}
 800ecb6:	bf00      	nop
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 800ecc0:	b590      	push	{r4, r7, lr}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	603a      	str	r2, [r7, #0]
 800ecca:	80fb      	strh	r3, [r7, #6]
 800eccc:	460b      	mov	r3, r1
 800ecce:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 800ecd8:	f000 fabe 	bl	800f258 <SAIx_Out_DeInit>

  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800ecdc:	2200      	movs	r2, #0
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	481c      	ldr	r0, [pc, #112]	@ (800ed54 <BSP_AUDIO_OUT_Init+0x94>)
 800ece2:	f000 fa07 	bl	800f0f4 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800ece6:	4b1b      	ldr	r3, [pc, #108]	@ (800ed54 <BSP_AUDIO_OUT_Init+0x94>)
 800ece8:	4a1b      	ldr	r2, [pc, #108]	@ (800ed58 <BSP_AUDIO_OUT_Init+0x98>)
 800ecea:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 800ecec:	4819      	ldr	r0, [pc, #100]	@ (800ed54 <BSP_AUDIO_OUT_Init+0x94>)
 800ecee:	f7fe ff25 	bl	800db3c <HAL_SAI_GetState>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d103      	bne.n	800ed00 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	4816      	ldr	r0, [pc, #88]	@ (800ed54 <BSP_AUDIO_OUT_Init+0x94>)
 800ecfc:	f000 f8a6 	bl	800ee4c <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 800ed00:	6838      	ldr	r0, [r7, #0]
 800ed02:	f000 fa3b 	bl	800f17c <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800ed06:	4b15      	ldr	r3, [pc, #84]	@ (800ed5c <BSP_AUDIO_OUT_Init+0x9c>)
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	2034      	movs	r0, #52	@ 0x34
 800ed0c:	4798      	blx	r3
 800ed0e:	60b8      	str	r0, [r7, #8]

  if((deviceid) == WM8994_ID)
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f648 1294 	movw	r2, #35220	@ 0x8994
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d109      	bne.n	800ed2e <BSP_AUDIO_OUT_Init+0x6e>
  {
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800ed1a:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <BSP_AUDIO_OUT_Init+0x9c>)
 800ed1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1e:	2034      	movs	r0, #52	@ 0x34
 800ed20:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv;
 800ed22:	4b0f      	ldr	r3, [pc, #60]	@ (800ed60 <BSP_AUDIO_OUT_Init+0xa0>)
 800ed24:	4a0d      	ldr	r2, [pc, #52]	@ (800ed5c <BSP_AUDIO_OUT_Init+0x9c>)
 800ed26:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	73fb      	strb	r3, [r7, #15]
 800ed2c:	e001      	b.n	800ed32 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d107      	bne.n	800ed48 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800ed38:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <BSP_AUDIO_OUT_Init+0xa0>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681c      	ldr	r4, [r3, #0]
 800ed3e:	797a      	ldrb	r2, [r7, #5]
 800ed40:	88f9      	ldrh	r1, [r7, #6]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2034      	movs	r0, #52	@ 0x34
 800ed46:	47a0      	blx	r4
  }
 
  return ret;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd90      	pop	{r4, r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20030dc4 	.word	0x20030dc4
 800ed58:	40015804 	.word	0x40015804
 800ed5c:	20020628 	.word	0x20020628
 800ed60:	20030dc0 	.word	0x20030dc0

0800ed64 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 800ed6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eda4 <BSP_AUDIO_OUT_Play+0x40>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	b292      	uxth	r2, r2
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	2034      	movs	r0, #52	@ 0x34
 800ed7c:	4798      	blx	r3
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 800ed84:	2301      	movs	r3, #1
 800ed86:	e008      	b.n	800ed9a <BSP_AUDIO_OUT_Play+0x36>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
 //   HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size / AUDIODATA_SIZE);
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	085b      	lsrs	r3, r3, #1
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	461a      	mov	r2, r3
 800ed90:	6879      	ldr	r1, [r7, #4]
 800ed92:	4805      	ldr	r0, [pc, #20]	@ (800eda8 <BSP_AUDIO_OUT_Play+0x44>)
 800ed94:	f7fe fdb6 	bl	800d904 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 800ed98:	2300      	movs	r3, #0
  }
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20030dc0 	.word	0x20030dc0
 800eda8:	20030dc4 	.word	0x20030dc4

0800edac <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800edb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	4b0b      	ldr	r3, [pc, #44]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800edc2:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800edc4:	4a08      	ldr	r2, [pc, #32]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800edca:	4807      	ldr	r0, [pc, #28]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edcc:	f7fe fbda 	bl	800d584 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800edd0:	4b05      	ldr	r3, [pc, #20]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800edde:	601a      	str	r2, [r3, #0]
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20030dc4 	.word	0x20030dc4

0800edec <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800edf4:	f7f1 fb28 	bl	8000448 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800edf8:	bf00      	nop
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800ee08:	f7f1 fb86 	bl	8000518 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a05      	ldr	r2, [pc, #20]	@ (800ee38 <HAL_SAI_ErrorCallback+0x24>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d102      	bne.n	800ee2c <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 800ee26:	f000 f809 	bl	800ee3c <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 800ee2a:	e001      	b.n	800ee30 <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 800ee2c:	f000 ff7e 	bl	800fd2c <BSP_AUDIO_IN_Error_CallBack>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	40015804 	.word	0x40015804

0800ee3c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	af00      	add	r7, sp, #0
}
 800ee40:	bf00      	nop
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b08c      	sub	sp, #48	@ 0x30
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800ee56:	4b48      	ldr	r3, [pc, #288]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee5a:	4a47      	ldr	r2, [pc, #284]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ee60:	6453      	str	r3, [r2, #68]	@ 0x44
 800ee62:	4b45      	ldr	r3, [pc, #276]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee6a:	61bb      	str	r3, [r7, #24]
 800ee6c:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800ee6e:	4b42      	ldr	r3, [pc, #264]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee72:	4a41      	ldr	r2, [pc, #260]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee78:	6313      	str	r3, [r2, #48]	@ 0x30
 800ee7a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 800ee86:	4b3c      	ldr	r3, [pc, #240]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee8a:	4a3b      	ldr	r2, [pc, #236]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee8c:	f043 0310 	orr.w	r3, r3, #16
 800ee90:	6313      	str	r3, [r2, #48]	@ 0x30
 800ee92:	4b39      	ldr	r3, [pc, #228]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800ee94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee96:	f003 0310 	and.w	r3, r3, #16
 800ee9a:	613b      	str	r3, [r7, #16]
 800ee9c:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800ee9e:	2370      	movs	r3, #112	@ 0x70
 800eea0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800eea2:	2302      	movs	r3, #2
 800eea4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800eeae:	2306      	movs	r3, #6
 800eeb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800eeb2:	f107 031c 	add.w	r3, r7, #28
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4830      	ldr	r0, [pc, #192]	@ (800ef7c <BSP_AUDIO_OUT_MspInit+0x130>)
 800eeba:	f7f9 fae3 	bl	8008484 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800eebe:	2380      	movs	r3, #128	@ 0x80
 800eec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800eec2:	f107 031c 	add.w	r3, r7, #28
 800eec6:	4619      	mov	r1, r3
 800eec8:	482d      	ldr	r0, [pc, #180]	@ (800ef80 <BSP_AUDIO_OUT_MspInit+0x134>)
 800eeca:	f7f9 fadb 	bl	8008484 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800eece:	4b2a      	ldr	r3, [pc, #168]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800eed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eed2:	4a29      	ldr	r2, [pc, #164]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800eed4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800eed8:	6313      	str	r3, [r2, #48]	@ 0x30
 800eeda:	4b27      	ldr	r3, [pc, #156]	@ (800ef78 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800eedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a26      	ldr	r2, [pc, #152]	@ (800ef84 <BSP_AUDIO_OUT_MspInit+0x138>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d137      	bne.n	800ef60 <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800eef0:	4b25      	ldr	r3, [pc, #148]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800eef2:	2200      	movs	r2, #0
 800eef4:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800eef6:	4b24      	ldr	r3, [pc, #144]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800eef8:	2240      	movs	r2, #64	@ 0x40
 800eefa:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800eefc:	4b22      	ldr	r3, [pc, #136]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800ef02:	4b21      	ldr	r3, [pc, #132]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ef08:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800ef0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ef10:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800ef12:	4b1d      	ldr	r3, [pc, #116]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ef18:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ef20:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800ef22:	4b19      	ldr	r3, [pc, #100]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ef28:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800ef2a:	4b17      	ldr	r3, [pc, #92]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef2c:	2204      	movs	r2, #4
 800ef2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ef30:	4b15      	ldr	r3, [pc, #84]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef32:	2203      	movs	r2, #3
 800ef34:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ef36:	4b14      	ldr	r3, [pc, #80]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800ef3c:	4b12      	ldr	r3, [pc, #72]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800ef42:	4b11      	ldr	r3, [pc, #68]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef44:	4a11      	ldr	r2, [pc, #68]	@ (800ef8c <BSP_AUDIO_OUT_MspInit+0x140>)
 800ef46:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a0f      	ldr	r2, [pc, #60]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef4c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ef4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800ef54:	480c      	ldr	r0, [pc, #48]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef56:	f7f7 ffe7 	bl	8006f28 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 800ef5a:	480b      	ldr	r0, [pc, #44]	@ (800ef88 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800ef5c:	f7f7 ff36 	bl	8006dcc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800ef60:	2200      	movs	r2, #0
 800ef62:	210e      	movs	r1, #14
 800ef64:	2039      	movs	r0, #57	@ 0x39
 800ef66:	f7f7 fd6c 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800ef6a:	2039      	movs	r0, #57	@ 0x39
 800ef6c:	f7f7 fd85 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 800ef70:	bf00      	nop
 800ef72:	3730      	adds	r7, #48	@ 0x30
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	40023800 	.word	0x40023800
 800ef7c:	40021000 	.word	0x40021000
 800ef80:	40021800 	.word	0x40021800
 800ef84:	40015804 	.word	0x40015804
 800ef88:	200312c4 	.word	0x200312c4
 800ef8c:	40026428 	.word	0x40026428

0800ef90 <SAI_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b08c      	sub	sp, #48	@ 0x30
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800ef9a:	4b50      	ldr	r3, [pc, #320]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800ef9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef9e:	4a4f      	ldr	r2, [pc, #316]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800efa4:	6453      	str	r3, [r2, #68]	@ 0x44
 800efa6:	4b4d      	ldr	r3, [pc, #308]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800efae:	61bb      	str	r3, [r7, #24]
 800efb0:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 800efb2:	4b4a      	ldr	r3, [pc, #296]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efb6:	4a49      	ldr	r2, [pc, #292]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efb8:	f043 0310 	orr.w	r3, r3, #16
 800efbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800efbe:	4b47      	ldr	r3, [pc, #284]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efc2:	f003 0310 	and.w	r3, r3, #16
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800efca:	2308      	movs	r3, #8
 800efcc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800efce:	2302      	movs	r3, #2
 800efd0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800efd6:	2302      	movs	r3, #2
 800efd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800efda:	2306      	movs	r3, #6
 800efdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800efde:	f107 031c 	add.w	r3, r7, #28
 800efe2:	4619      	mov	r1, r3
 800efe4:	483e      	ldr	r0, [pc, #248]	@ (800f0e0 <SAI_AUDIO_IN_MspInit+0x150>)
 800efe6:	f7f9 fa4d 	bl	8008484 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 800efea:	4b3c      	ldr	r3, [pc, #240]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800efec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efee:	4a3b      	ldr	r2, [pc, #236]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800eff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eff4:	6313      	str	r3, [r2, #48]	@ 0x30
 800eff6:	4b39      	ldr	r3, [pc, #228]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800eff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800effa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800effe:	613b      	str	r3, [r7, #16]
 800f000:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800f002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f006:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800f008:	2300      	movs	r3, #0
 800f00a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800f00c:	2300      	movs	r3, #0
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f010:	2302      	movs	r3, #2
 800f012:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800f014:	f107 031c 	add.w	r3, r7, #28
 800f018:	4619      	mov	r1, r3
 800f01a:	4832      	ldr	r0, [pc, #200]	@ (800f0e4 <SAI_AUDIO_IN_MspInit+0x154>)
 800f01c:	f7f9 fa32 	bl	8008484 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800f020:	4b2e      	ldr	r3, [pc, #184]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800f022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f024:	4a2d      	ldr	r2, [pc, #180]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800f026:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f02a:	6313      	str	r3, [r2, #48]	@ 0x30
 800f02c:	4b2b      	ldr	r3, [pc, #172]	@ (800f0dc <SAI_AUDIO_IN_MspInit+0x14c>)
 800f02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a2a      	ldr	r2, [pc, #168]	@ (800f0e8 <SAI_AUDIO_IN_MspInit+0x158>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d138      	bne.n	800f0b4 <SAI_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800f042:	4b2a      	ldr	r3, [pc, #168]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f044:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800f048:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800f04a:	4b28      	ldr	r3, [pc, #160]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800f050:	4b26      	ldr	r3, [pc, #152]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f052:	2200      	movs	r2, #0
 800f054:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800f056:	4b25      	ldr	r3, [pc, #148]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f05c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800f05e:	4b23      	ldr	r3, [pc, #140]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f060:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f064:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800f066:	4b21      	ldr	r3, [pc, #132]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f068:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800f06c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800f06e:	4b1f      	ldr	r3, [pc, #124]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f074:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800f076:	4b1d      	ldr	r3, [pc, #116]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f078:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f07c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800f07e:	4b1b      	ldr	r3, [pc, #108]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f080:	2200      	movs	r2, #0
 800f082:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800f084:	4b19      	ldr	r3, [pc, #100]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f086:	2203      	movs	r2, #3
 800f088:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800f08a:	4b18      	ldr	r3, [pc, #96]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800f090:	4b16      	ldr	r3, [pc, #88]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f092:	2200      	movs	r2, #0
 800f094:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800f096:	4b15      	ldr	r3, [pc, #84]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f098:	4a15      	ldr	r2, [pc, #84]	@ (800f0f0 <SAI_AUDIO_IN_MspInit+0x160>)
 800f09a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a13      	ldr	r2, [pc, #76]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f0a0:	671a      	str	r2, [r3, #112]	@ 0x70
 800f0a2:	4a12      	ldr	r2, [pc, #72]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800f0a8:	4810      	ldr	r0, [pc, #64]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f0aa:	f7f7 ff3d 	bl	8006f28 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800f0ae:	480f      	ldr	r0, [pc, #60]	@ (800f0ec <SAI_AUDIO_IN_MspInit+0x15c>)
 800f0b0:	f7f7 fe8c 	bl	8006dcc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	210f      	movs	r1, #15
 800f0b8:	203c      	movs	r0, #60	@ 0x3c
 800f0ba:	f7f7 fcc2 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800f0be:	203c      	movs	r0, #60	@ 0x3c
 800f0c0:	f7f7 fcdb 	bl	8006a7a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	210f      	movs	r1, #15
 800f0c8:	2028      	movs	r0, #40	@ 0x28
 800f0ca:	f7f7 fcba 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800f0ce:	2028      	movs	r0, #40	@ 0x28
 800f0d0:	f7f7 fcd3 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 800f0d4:	bf00      	nop
 800f0d6:	3730      	adds	r7, #48	@ 0x30
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	40023800 	.word	0x40023800
 800f0e0:	40021000 	.word	0x40021000
 800f0e4:	40022400 	.word	0x40022400
 800f0e8:	40015824 	.word	0x40015824
 800f0ec:	20031324 	.word	0x20031324
 800f0f0:	40026470 	.word	0x40026470

0800f0f4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b0a8      	sub	sp, #160	@ 0xa0
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800f100:	f107 0310 	add.w	r3, r7, #16
 800f104:	4618      	mov	r0, r3
 800f106:	f7fd ff37 	bl	800cf78 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800f110:	4293      	cmp	r3, r2
 800f112:	d009      	beq.n	800f128 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	f245 6222 	movw	r2, #22050	@ 0x5622
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d004      	beq.n	800f128 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800f124:	4293      	cmp	r3, r2
 800f126:	d112      	bne.n	800f14e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800f128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f12c:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800f12e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f132:	64fb      	str	r3, [r7, #76]	@ 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800f134:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800f138:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800f13a:	2302      	movs	r3, #2
 800f13c:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800f13e:	2313      	movs	r3, #19
 800f140:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800f142:	f107 0310 	add.w	r3, r7, #16
 800f146:	4618      	mov	r0, r3
 800f148:	f7fc fe56 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 800f14c:	e012      	b.n	800f174 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800f14e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f152:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800f154:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f158:	64fb      	str	r3, [r7, #76]	@ 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 800f15a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800f15e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800f160:	2307      	movs	r3, #7
 800f162:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 800f164:	2301      	movs	r3, #1
 800f166:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800f168:	f107 0310 	add.w	r3, r7, #16
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7fc fe43 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800f172:	bf00      	nop
 800f174:	bf00      	nop
 800f176:	37a0      	adds	r7, #160	@ 0xa0
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800f184:	4b32      	ldr	r3, [pc, #200]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f186:	4a33      	ldr	r2, [pc, #204]	@ (800f254 <SAIx_Out_Init+0xd8>)
 800f188:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800f18a:	4b31      	ldr	r3, [pc, #196]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	4b2f      	ldr	r3, [pc, #188]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f198:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800f19a:	4b2d      	ldr	r3, [pc, #180]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	625a      	str	r2, [r3, #36]	@ 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800f1a0:	4a2b      	ldr	r2, [pc, #172]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800f1a6:	4b2a      	ldr	r3, [pc, #168]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800f1ac:	4b28      	ldr	r3, [pc, #160]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800f1b2:	4b27      	ldr	r3, [pc, #156]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_24;
 800f1b8:	4b25      	ldr	r3, [pc, #148]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1ba:	22c0      	movs	r2, #192	@ 0xc0
 800f1bc:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800f1be:	4b24      	ldr	r3, [pc, #144]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800f1c4:	4b22      	ldr	r3, [pc, #136]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800f1ca:	4b21      	ldr	r3, [pc, #132]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800f1d0:	4b1f      	ldr	r3, [pc, #124]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f1d6:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800f1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1da:	2201      	movs	r2, #1
 800f1dc:	619a      	str	r2, [r3, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800f1de:	4b1c      	ldr	r3, [pc, #112]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800f1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	629a      	str	r2, [r3, #40]	@ 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800f1ea:	4b19      	ldr	r3, [pc, #100]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 800f1f0:	4b17      	ldr	r3, [pc, #92]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	621a      	str	r2, [r3, #32]
  Frame Length: 128
  Frame active Length: 64
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 128; 
 800f1f6:	4b16      	ldr	r3, [pc, #88]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1f8:	2280      	movs	r2, #128	@ 0x80
 800f1fa:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 800f1fc:	4b14      	ldr	r3, [pc, #80]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f1fe:	2240      	movs	r2, #64	@ 0x40
 800f200:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800f202:	4b13      	ldr	r3, [pc, #76]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f204:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f208:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f20a:	4b11      	ldr	r3, [pc, #68]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800f210:	4b0f      	ldr	r3, [pc, #60]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f212:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f216:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 32
  Slot Number: 4
  Slot Active: All slot active */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800f218:	4b0d      	ldr	r3, [pc, #52]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f21e:	4b0c      	ldr	r3, [pc, #48]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f220:	2280      	movs	r2, #128	@ 0x80
 800f222:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 800f224:	4b0a      	ldr	r3, [pc, #40]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f226:	2204      	movs	r2, #4
 800f228:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800f22a:	4b09      	ldr	r3, [pc, #36]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f22c:	220f      	movs	r2, #15
 800f22e:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800f230:	4807      	ldr	r0, [pc, #28]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f232:	f7fe f9a7 	bl	800d584 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800f236:	4b06      	ldr	r3, [pc, #24]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	4b04      	ldr	r3, [pc, #16]	@ (800f250 <SAIx_Out_Init+0xd4>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f244:	601a      	str	r2, [r3, #0]
}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	20030dc4 	.word	0x20030dc4
 800f254:	40015804 	.word	0x40015804

0800f258 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800f25c:	4b07      	ldr	r3, [pc, #28]	@ (800f27c <SAIx_Out_DeInit+0x24>)
 800f25e:	4a08      	ldr	r2, [pc, #32]	@ (800f280 <SAIx_Out_DeInit+0x28>)
 800f260:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800f262:	4b06      	ldr	r3, [pc, #24]	@ (800f27c <SAIx_Out_DeInit+0x24>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	4b04      	ldr	r3, [pc, #16]	@ (800f27c <SAIx_Out_DeInit+0x24>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f270:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 800f272:	4802      	ldr	r0, [pc, #8]	@ (800f27c <SAIx_Out_DeInit+0x24>)
 800f274:	f7fe fafc 	bl	800d870 <HAL_SAI_DeInit>
}
 800f278:	bf00      	nop
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20030dc4 	.word	0x20030dc4
 800f280:	40015804 	.word	0x40015804

0800f284 <SAIx_In_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_In_Init(uint32_t AudioFreq)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

  /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800f28c:	4b31      	ldr	r3, [pc, #196]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f28e:	4a32      	ldr	r2, [pc, #200]	@ (800f358 <SAIx_In_Init+0xd4>)
 800f290:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800f292:	4b30      	ldr	r3, [pc, #192]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	4b2e      	ldr	r3, [pc, #184]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f2a0:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800f2a2:	4b2c      	ldr	r3, [pc, #176]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	625a      	str	r2, [r3, #36]	@ 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800f2a8:	4a2a      	ldr	r2, [pc, #168]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800f2ae:	4b29      	ldr	r3, [pc, #164]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2b0:	2203      	movs	r2, #3
 800f2b2:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800f2b4:	4b27      	ldr	r3, [pc, #156]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800f2ba:	4b26      	ldr	r3, [pc, #152]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize       = SAI_DATASIZE_24;
 800f2c0:	4b24      	ldr	r3, [pc, #144]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2c2:	22c0      	movs	r2, #192	@ 0xc0
 800f2c4:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800f2c6:	4b23      	ldr	r3, [pc, #140]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_RISINGEDGE;
 800f2cc:	4b21      	ldr	r3, [pc, #132]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800f2d2:	4b20      	ldr	r3, [pc, #128]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 800f2d8:	4b1e      	ldr	r3, [pc, #120]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800f2de:	4b1d      	ldr	r3, [pc, #116]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	619a      	str	r2, [r3, #24]
  haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800f2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	60da      	str	r2, [r3, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800f2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	629a      	str	r2, [r3, #40]	@ 0x28
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800f2f0:	4b18      	ldr	r3, [pc, #96]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2f2:	2210      	movs	r2, #16
 800f2f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  haudio_in_sai.Init.Mckdiv         = 0;
 800f2f6:	4b17      	ldr	r3, [pc, #92]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	621a      	str	r2, [r3, #32]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength       = 128;
 800f2fc:	4b15      	ldr	r3, [pc, #84]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f2fe:	2280      	movs	r2, #128	@ 0x80
 800f300:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 64;
 800f302:	4b14      	ldr	r3, [pc, #80]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f304:	2240      	movs	r2, #64	@ 0x40
 800f306:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800f308:	4b12      	ldr	r3, [pc, #72]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f30a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f30e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800f310:	4b10      	ldr	r3, [pc, #64]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f312:	2200      	movs	r2, #0
 800f314:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800f316:	4b0f      	ldr	r3, [pc, #60]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f318:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f31c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800f31e:	4b0d      	ldr	r3, [pc, #52]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f320:	2200      	movs	r2, #0
 800f322:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_32B;
 800f324:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f326:	2280      	movs	r2, #128	@ 0x80
 800f328:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber     = 4;
 800f32a:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f32c:	2204      	movs	r2, #4
 800f32e:	65da      	str	r2, [r3, #92]	@ 0x5c
 // haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
  haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 800f330:	4b08      	ldr	r3, [pc, #32]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f332:	2205      	movs	r2, #5
 800f334:	661a      	str	r2, [r3, #96]	@ 0x60



  HAL_SAI_Init(&haudio_in_sai);
 800f336:	4807      	ldr	r0, [pc, #28]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f338:	f7fe f924 	bl	800d584 <HAL_SAI_Init>

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	4b04      	ldr	r3, [pc, #16]	@ (800f354 <SAIx_In_Init+0xd0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f34a:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral to generate MCLK */
//  __HAL_SAI_ENABLE(&haudio_out_sai);
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20030e48 	.word	0x20030e48
 800f358:	40015824 	.word	0x40015824

0800f35c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800f360:	4b07      	ldr	r3, [pc, #28]	@ (800f380 <SAIx_In_DeInit+0x24>)
 800f362:	4a08      	ldr	r2, [pc, #32]	@ (800f384 <SAIx_In_DeInit+0x28>)
 800f364:	601a      	str	r2, [r3, #0]
//  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800f366:	4b06      	ldr	r3, [pc, #24]	@ (800f380 <SAIx_In_DeInit+0x24>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	4b04      	ldr	r3, [pc, #16]	@ (800f380 <SAIx_In_DeInit+0x24>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f374:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800f376:	4802      	ldr	r0, [pc, #8]	@ (800f380 <SAIx_In_DeInit+0x24>)
 800f378:	f7fe fa7a 	bl	800d870 <HAL_SAI_DeInit>
//  HAL_SAI_DeInit(&haudio_out_sai);
}
 800f37c:	bf00      	nop
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20030e48 	.word	0x20030e48
 800f384:	40015824 	.word	0x40015824

0800f388 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured for the DFSDM peripheral.
  * @param  ChnlNbr: Audio frequency to be configured for the DFSDM peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{ 
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx((INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE), AudioFreq, BitRes, ChnlNbr);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	68f9      	ldr	r1, [r7, #12]
 800f39a:	f240 3002 	movw	r0, #770	@ 0x302
 800f39e:	f000 f805 	bl	800f3ac <BSP_AUDIO_IN_InitEx>
 800f3a2:	4603      	mov	r3, r0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio bit resolution to be configured..
  * @param  ChnlNbr: Number of channel to be configured.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{ 
 800f3ac:	b590      	push	{r4, r7, lr}
 800f3ae:	b087      	sub	sp, #28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60b9      	str	r1, [r7, #8]
 800f3b4:	607a      	str	r2, [r7, #4]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	75fb      	strb	r3, [r7, #23]
  AudioIn_Device = InputDevice;
 800f3c0:	4a24      	ldr	r2, [pc, #144]	@ (800f454 <BSP_AUDIO_IN_InitEx+0xa8>)
 800f3c2:	89fb      	ldrh	r3, [r7, #14]
 800f3c4:	8013      	strh	r3, [r2, #0]
  
  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 800f3c6:	89fb      	ldrh	r3, [r7, #14]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10d      	bne.n	800f3e8 <BSP_AUDIO_IN_InitEx+0x3c>
  {
    AudioIn_ChannelNumber = ChnlNbr;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	b2da      	uxtb	r2, r3
 800f3d0:	4b21      	ldr	r3, [pc, #132]	@ (800f458 <BSP_AUDIO_IN_InitEx+0xac>)
 800f3d2:	701a      	strb	r2, [r3, #0]
    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	68b9      	ldr	r1, [r7, #8]
 800f3d8:	4820      	ldr	r0, [pc, #128]	@ (800f45c <BSP_AUDIO_IN_InitEx+0xb0>)
 800f3da:	f000 fcbf 	bl	800fd5c <BSP_AUDIO_IN_ClockConfig>
    
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_IN_MspInit();
 800f3de:	f000 fcad 	bl	800fd3c <BSP_AUDIO_IN_MspInit>
    
    /* Initializes DFSDM peripheral */
 //   DFSDMx_Init(AudioFreq);
    ret = AUDIO_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	75fb      	strb	r3, [r7, #23]
 800f3e6:	e02f      	b.n	800f448 <BSP_AUDIO_IN_InitEx+0x9c>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 800f3e8:	f7ff ffb8 	bl	800f35c <SAIx_In_DeInit>
    
    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
 //   BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
    
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800f3ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f460 <BSP_AUDIO_IN_InitEx+0xb4>)
 800f3ee:	4a1d      	ldr	r2, [pc, #116]	@ (800f464 <BSP_AUDIO_IN_InitEx+0xb8>)
 800f3f0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800f3f2:	481b      	ldr	r0, [pc, #108]	@ (800f460 <BSP_AUDIO_IN_InitEx+0xb4>)
 800f3f4:	f7fe fba2 	bl	800db3c <HAL_SAI_GetState>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <BSP_AUDIO_IN_InitEx+0x56>
    {    
 //   BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
    BSP_AUDIO_IN_MspInit();
 800f3fe:	f000 fc9d 	bl	800fd3c <BSP_AUDIO_IN_MspInit>
    }

    SAIx_In_Init(AudioFreq);
 800f402:	68b8      	ldr	r0, [r7, #8]
 800f404:	f7ff ff3e 	bl	800f284 <SAIx_In_Init>
    
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 800f408:	4b17      	ldr	r3, [pc, #92]	@ (800f468 <BSP_AUDIO_IN_InitEx+0xbc>)
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	2034      	movs	r0, #52	@ 0x34
 800f40e:	4798      	blx	r3
 800f410:	4603      	mov	r3, r0
 800f412:	f648 1294 	movw	r2, #35220	@ 0x8994
 800f416:	4293      	cmp	r3, r2
 800f418:	d109      	bne.n	800f42e <BSP_AUDIO_IN_InitEx+0x82>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800f41a:	4b13      	ldr	r3, [pc, #76]	@ (800f468 <BSP_AUDIO_IN_InitEx+0xbc>)
 800f41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f41e:	2034      	movs	r0, #52	@ 0x34
 800f420:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800f422:	4b12      	ldr	r3, [pc, #72]	@ (800f46c <BSP_AUDIO_IN_InitEx+0xc0>)
 800f424:	4a10      	ldr	r2, [pc, #64]	@ (800f468 <BSP_AUDIO_IN_InitEx+0xbc>)
 800f426:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 800f428:	2300      	movs	r3, #0
 800f42a:	75fb      	strb	r3, [r7, #23]
 800f42c:	e001      	b.n	800f432 <BSP_AUDIO_IN_InitEx+0x86>
    }
    else
    {
      ret = AUDIO_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	75fb      	strb	r3, [r7, #23]
    }
    
    if(ret == AUDIO_OK)
 800f432:	7dfb      	ldrb	r3, [r7, #23]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d107      	bne.n	800f448 <BSP_AUDIO_IN_InitEx+0x9c>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 0, AudioFreq);
 800f438:	4b0c      	ldr	r3, [pc, #48]	@ (800f46c <BSP_AUDIO_IN_InitEx+0xc0>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681c      	ldr	r4, [r3, #0]
 800f43e:	89f9      	ldrh	r1, [r7, #14]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2200      	movs	r2, #0
 800f444:	2034      	movs	r0, #52	@ 0x34
 800f446:	47a0      	blx	r4
    }    
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 800f448:	7dfb      	ldrb	r3, [r7, #23]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	371c      	adds	r7, #28
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd90      	pop	{r4, r7, pc}
 800f452:	bf00      	nop
 800f454:	20031298 	.word	0x20031298
 800f458:	2002066c 	.word	0x2002066c
 800f45c:	20030f44 	.word	0x20030f44
 800f460:	20030e48 	.word	0x20030e48
 800f464:	40015824 	.word	0x40015824
 800f468:	20020628 	.word	0x20020628
 800f46c:	20030dc0 	.word	0x20030dc0

0800f470 <BSP_AUDIO_IN_AllocScratch>:
  * @brief  Allocate channel buffer scratch 
  * @param  pScratch : pointer to scratch tables.
  * @param  size of scratch buffer
  */
uint8_t BSP_AUDIO_IN_AllocScratch (int32_t *pScratch, uint32_t size)
{ 
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  uint32_t idx;
  
  ScratchSize = (size / AudioIn_ChannelNumber);
 800f47a:	4b14      	ldr	r3, [pc, #80]	@ (800f4cc <BSP_AUDIO_IN_AllocScratch+0x5c>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	461a      	mov	r2, r3
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	fbb3 f3f2 	udiv	r3, r3, r2
 800f486:	461a      	mov	r2, r3
 800f488:	4b11      	ldr	r3, [pc, #68]	@ (800f4d0 <BSP_AUDIO_IN_AllocScratch+0x60>)
 800f48a:	601a      	str	r2, [r3, #0]
  
  /* copy scratch pointers */
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 800f48c:	2300      	movs	r3, #0
 800f48e:	60fb      	str	r3, [r7, #12]
 800f490:	e00f      	b.n	800f4b2 <BSP_AUDIO_IN_AllocScratch+0x42>
  {
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 800f492:	4b0f      	ldr	r3, [pc, #60]	@ (800f4d0 <BSP_AUDIO_IN_AllocScratch+0x60>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	461a      	mov	r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	fb02 f303 	mul.w	r3, r2, r3
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	441a      	add	r2, r3
 800f4a4:	490b      	ldr	r1, [pc, #44]	@ (800f4d4 <BSP_AUDIO_IN_AllocScratch+0x64>)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	4b06      	ldr	r3, [pc, #24]	@ (800f4cc <BSP_AUDIO_IN_AllocScratch+0x5c>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d3e9      	bcc.n	800f492 <BSP_AUDIO_IN_AllocScratch+0x22>
  }
  /* Return AUDIO_OK */
  return AUDIO_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr
 800f4cc:	2002066c 	.word	0x2002066c
 800f4d0:	20031294 	.word	0x20031294
 800f4d4:	20031284 	.word	0x20031284

0800f4d8 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{  
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 800f4e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f594 <BSP_AUDIO_IN_Record+0xbc>)
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d143      	bne.n	800f572 <BSP_AUDIO_IN_Record+0x9a>
  {
    hAudioIn.pRecBuf = pbuf;
 800f4ea:	4a2b      	ldr	r2, [pc, #172]	@ (800f598 <BSP_AUDIO_IN_Record+0xc0>)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6013      	str	r3, [r2, #0]
    hAudioIn.RecSize = size;
 800f4f0:	4a29      	ldr	r2, [pc, #164]	@ (800f598 <BSP_AUDIO_IN_Record+0xc0>)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	6053      	str	r3, [r2, #4]
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 800f4f6:	4b29      	ldr	r3, [pc, #164]	@ (800f59c <BSP_AUDIO_IN_Record+0xc4>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0;
 800f4fc:	4b28      	ldr	r3, [pc, #160]	@ (800f5a0 <BSP_AUDIO_IN_Record+0xc8>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
    
    if(AudioIn_ChannelNumber > 2)
 800f502:	4b28      	ldr	r3, [pc, #160]	@ (800f5a4 <BSP_AUDIO_IN_Record+0xcc>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	2b02      	cmp	r3, #2
 800f508:	d919      	bls.n	800f53e <BSP_AUDIO_IN_Record+0x66>
    {
      /* Call the Media layer start function for buttom right channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 800f50a:	4b27      	ldr	r3, [pc, #156]	@ (800f5a8 <BSP_AUDIO_IN_Record+0xd0>)
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	4a27      	ldr	r2, [pc, #156]	@ (800f5ac <BSP_AUDIO_IN_Record+0xd4>)
 800f510:	6812      	ldr	r2, [r2, #0]
 800f512:	4619      	mov	r1, r3
 800f514:	4826      	ldr	r0, [pc, #152]	@ (800f5b0 <BSP_AUDIO_IN_Record+0xd8>)
 800f516:	f7f7 fb47 	bl	8006ba8 <HAL_DFSDM_FilterRegularStart_DMA>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <BSP_AUDIO_IN_Record+0x4c>
      {
        return AUDIO_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	e033      	b.n	800f58c <BSP_AUDIO_IN_Record+0xb4>
      } 
      
      /* Call the Media layer start function for buttom left channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 800f524:	4b20      	ldr	r3, [pc, #128]	@ (800f5a8 <BSP_AUDIO_IN_Record+0xd0>)
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	4a20      	ldr	r2, [pc, #128]	@ (800f5ac <BSP_AUDIO_IN_Record+0xd4>)
 800f52a:	6812      	ldr	r2, [r2, #0]
 800f52c:	4619      	mov	r1, r3
 800f52e:	4821      	ldr	r0, [pc, #132]	@ (800f5b4 <BSP_AUDIO_IN_Record+0xdc>)
 800f530:	f7f7 fb3a 	bl	8006ba8 <HAL_DFSDM_FilterRegularStart_DMA>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <BSP_AUDIO_IN_Record+0x66>
      {
        return AUDIO_ERROR;
 800f53a:	2301      	movs	r3, #1
 800f53c:	e026      	b.n	800f58c <BSP_AUDIO_IN_Record+0xb4>
      }
    }

    /* Call the Media layer start function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 800f53e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a8 <BSP_AUDIO_IN_Record+0xd0>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a1a      	ldr	r2, [pc, #104]	@ (800f5ac <BSP_AUDIO_IN_Record+0xd4>)
 800f544:	6812      	ldr	r2, [r2, #0]
 800f546:	4619      	mov	r1, r3
 800f548:	481b      	ldr	r0, [pc, #108]	@ (800f5b8 <BSP_AUDIO_IN_Record+0xe0>)
 800f54a:	f7f7 fb2d 	bl	8006ba8 <HAL_DFSDM_FilterRegularStart_DMA>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <BSP_AUDIO_IN_Record+0x80>
    {
      return AUDIO_ERROR;
 800f554:	2301      	movs	r3, #1
 800f556:	e019      	b.n	800f58c <BSP_AUDIO_IN_Record+0xb4>
    }
    
    /* Call the Media layer start function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 800f558:	4b13      	ldr	r3, [pc, #76]	@ (800f5a8 <BSP_AUDIO_IN_Record+0xd0>)
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	4a13      	ldr	r2, [pc, #76]	@ (800f5ac <BSP_AUDIO_IN_Record+0xd4>)
 800f55e:	6812      	ldr	r2, [r2, #0]
 800f560:	4619      	mov	r1, r3
 800f562:	4816      	ldr	r0, [pc, #88]	@ (800f5bc <BSP_AUDIO_IN_Record+0xe4>)
 800f564:	f7f7 fb20 	bl	8006ba8 <HAL_DFSDM_FilterRegularStart_DMA>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00d      	beq.n	800f58a <BSP_AUDIO_IN_Record+0xb2>
    {
      return AUDIO_ERROR;
 800f56e:	2301      	movs	r3, #1
 800f570:	e00c      	b.n	800f58c <BSP_AUDIO_IN_Record+0xb4>
    }
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_OK !=HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size))
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	b29b      	uxth	r3, r3
 800f576:	461a      	mov	r2, r3
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	4811      	ldr	r0, [pc, #68]	@ (800f5c0 <BSP_AUDIO_IN_Record+0xe8>)
 800f57c:	f7fe fa50 	bl	800da20 <HAL_SAI_Receive_DMA>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <BSP_AUDIO_IN_Record+0xb2>
    {
      return AUDIO_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e000      	b.n	800f58c <BSP_AUDIO_IN_Record+0xb4>
    }
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;  
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20031298 	.word	0x20031298
 800f598:	20030ecc 	.word	0x20030ecc
 800f59c:	200312bc 	.word	0x200312bc
 800f5a0:	200312c0 	.word	0x200312c0
 800f5a4:	2002066c 	.word	0x2002066c
 800f5a8:	20031284 	.word	0x20031284
 800f5ac:	20031294 	.word	0x20031294
 800f5b0:	20031170 	.word	0x20031170
 800f5b4:	2003111c 	.word	0x2003111c
 800f5b8:	20030f98 	.word	0x20030f98
 800f5bc:	20030f44 	.word	0x20030f44
 800f5c0:	20030e48 	.word	0x20030e48

0800f5c4 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	60fb      	str	r3, [r7, #12]
  
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a9a      	ldr	r2, [pc, #616]	@ (800f83c <HAL_DFSDM_FilterRegConvCpltCallback+0x278>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d103      	bne.n	800f5e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
  {
    DmaTopLeftRecCplt = 1;
 800f5d8:	4b99      	ldr	r3, [pc, #612]	@ (800f840 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 800f5da:	2201      	movs	r2, #1
 800f5dc:	601a      	str	r2, [r3, #0]
 800f5de:	e012      	b.n	800f606 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a98      	ldr	r2, [pc, #608]	@ (800f844 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d103      	bne.n	800f5f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
  {
    DmaTopRightRecCplt = 1;
 800f5e8:	4b97      	ldr	r3, [pc, #604]	@ (800f848 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	e00a      	b.n	800f606 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a96      	ldr	r2, [pc, #600]	@ (800f84c <HAL_DFSDM_FilterRegConvCpltCallback+0x288>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d103      	bne.n	800f600 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
  {
    DmaButtomLeftRecCplt = 1;
 800f5f8:	4b95      	ldr	r3, [pc, #596]	@ (800f850 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	601a      	str	r2, [r3, #0]
 800f5fe:	e002      	b.n	800f606 <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
  }
  else
  {
    DmaButtomRightRecCplt = 1;
 800f600:	4b94      	ldr	r3, [pc, #592]	@ (800f854 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 800f602:	2201      	movs	r2, #1
 800f604:	601a      	str	r2, [r3, #0]
  }
  
  if(AudioIn_ChannelNumber > 2)
 800f606:	4b94      	ldr	r3, [pc, #592]	@ (800f858 <HAL_DFSDM_FilterRegConvCpltCallback+0x294>)
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	f240 80e3 	bls.w	800f7d6 <HAL_DFSDM_FilterRegConvCpltCallback+0x212>
  {
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 800f610:	4b8b      	ldr	r3, [pc, #556]	@ (800f840 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b01      	cmp	r3, #1
 800f616:	f040 8173 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 800f61a:	4b8b      	ldr	r3, [pc, #556]	@ (800f848 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	f040 816e 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 800f624:	4b8a      	ldr	r3, [pc, #552]	@ (800f850 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b01      	cmp	r3, #1
 800f62a:	f040 8169 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 800f62e:	4b89      	ldr	r3, [pc, #548]	@ (800f854 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b01      	cmp	r3, #1
 800f634:	f040 8164 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    {
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 800f638:	4b88      	ldr	r3, [pc, #544]	@ (800f85c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	da00      	bge.n	800f642 <HAL_DFSDM_FilterRegConvCpltCallback+0x7e>
 800f640:	3301      	adds	r3, #1
 800f642:	105b      	asrs	r3, r3, #1
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	e0b2      	b.n	800f7ae <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800f648:	4b85      	ldr	r3, [pc, #532]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	121b      	asrs	r3, r3, #8
 800f656:	4a83      	ldr	r2, [pc, #524]	@ (800f864 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	db16      	blt.n	800f68a <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
 800f65c:	4b80      	ldr	r3, [pc, #512]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	4413      	add	r3, r2
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	121b      	asrs	r3, r3, #8
 800f66a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f66e:	4293      	cmp	r3, r2
 800f670:	dc08      	bgt.n	800f684 <HAL_DFSDM_FilterRegConvCpltCallback+0xc0>
 800f672:	4b7b      	ldr	r3, [pc, #492]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	121b      	asrs	r3, r3, #8
 800f680:	b29b      	uxth	r3, r3
 800f682:	e004      	b.n	800f68e <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
 800f684:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f688:	e001      	b.n	800f68e <HAL_DFSDM_FilterRegConvCpltCallback+0xca>
 800f68a:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f68e:	4a76      	ldr	r2, [pc, #472]	@ (800f868 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 800f690:	6811      	ldr	r1, [r2, #0]
 800f692:	4a76      	ldr	r2, [pc, #472]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f694:	6812      	ldr	r2, [r2, #0]
 800f696:	0052      	lsls	r2, r2, #1
 800f698:	440a      	add	r2, r1
 800f69a:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));       
 800f69c:	4b70      	ldr	r3, [pc, #448]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	4413      	add	r3, r2
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	121b      	asrs	r3, r3, #8
 800f6aa:	4a6e      	ldr	r2, [pc, #440]	@ (800f864 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	db16      	blt.n	800f6de <HAL_DFSDM_FilterRegConvCpltCallback+0x11a>
 800f6b0:	4b6b      	ldr	r3, [pc, #428]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	121b      	asrs	r3, r3, #8
 800f6be:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	dc08      	bgt.n	800f6d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x114>
 800f6c6:	4b66      	ldr	r3, [pc, #408]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	121b      	asrs	r3, r3, #8
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	e004      	b.n	800f6e2 <HAL_DFSDM_FilterRegConvCpltCallback+0x11e>
 800f6d8:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f6dc:	e001      	b.n	800f6e2 <HAL_DFSDM_FilterRegConvCpltCallback+0x11e>
 800f6de:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f6e2:	4a61      	ldr	r2, [pc, #388]	@ (800f868 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 800f6e4:	6811      	ldr	r1, [r2, #0]
 800f6e6:	4a61      	ldr	r2, [pc, #388]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f6e8:	6812      	ldr	r2, [r2, #0]
 800f6ea:	3201      	adds	r2, #1
 800f6ec:	0052      	lsls	r2, r2, #1
 800f6ee:	440a      	add	r2, r1
 800f6f0:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 800f6f2:	4b5b      	ldr	r3, [pc, #364]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4413      	add	r3, r2
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	121b      	asrs	r3, r3, #8
 800f700:	4a58      	ldr	r2, [pc, #352]	@ (800f864 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 800f702:	4293      	cmp	r3, r2
 800f704:	db16      	blt.n	800f734 <HAL_DFSDM_FilterRegConvCpltCallback+0x170>
 800f706:	4b56      	ldr	r3, [pc, #344]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f708:	68da      	ldr	r2, [r3, #12]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	121b      	asrs	r3, r3, #8
 800f714:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f718:	4293      	cmp	r3, r2
 800f71a:	dc08      	bgt.n	800f72e <HAL_DFSDM_FilterRegConvCpltCallback+0x16a>
 800f71c:	4b50      	ldr	r3, [pc, #320]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f71e:	68da      	ldr	r2, [r3, #12]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4413      	add	r3, r2
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	121b      	asrs	r3, r3, #8
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	e004      	b.n	800f738 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>
 800f72e:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f732:	e001      	b.n	800f738 <HAL_DFSDM_FilterRegConvCpltCallback+0x174>
 800f734:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f738:	4a4b      	ldr	r2, [pc, #300]	@ (800f868 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 800f73a:	6811      	ldr	r1, [r2, #0]
 800f73c:	4a4b      	ldr	r2, [pc, #300]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f73e:	6812      	ldr	r2, [r2, #0]
 800f740:	3202      	adds	r2, #2
 800f742:	0052      	lsls	r2, r2, #1
 800f744:	440a      	add	r2, r1
 800f746:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));      
 800f748:	4b45      	ldr	r3, [pc, #276]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f74a:	689a      	ldr	r2, [r3, #8]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	121b      	asrs	r3, r3, #8
 800f756:	4a43      	ldr	r2, [pc, #268]	@ (800f864 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	db16      	blt.n	800f78a <HAL_DFSDM_FilterRegConvCpltCallback+0x1c6>
 800f75c:	4b40      	ldr	r3, [pc, #256]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4413      	add	r3, r2
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	121b      	asrs	r3, r3, #8
 800f76a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f76e:	4293      	cmp	r3, r2
 800f770:	dc08      	bgt.n	800f784 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c0>
 800f772:	4b3b      	ldr	r3, [pc, #236]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f774:	689a      	ldr	r2, [r3, #8]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4413      	add	r3, r2
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	121b      	asrs	r3, r3, #8
 800f780:	b29b      	uxth	r3, r3
 800f782:	e004      	b.n	800f78e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ca>
 800f784:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f788:	e001      	b.n	800f78e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ca>
 800f78a:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f78e:	4a36      	ldr	r2, [pc, #216]	@ (800f868 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a4>)
 800f790:	6811      	ldr	r1, [r2, #0]
 800f792:	4a36      	ldr	r2, [pc, #216]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f794:	6812      	ldr	r2, [r2, #0]
 800f796:	3203      	adds	r2, #3
 800f798:	0052      	lsls	r2, r2, #1
 800f79a:	440a      	add	r2, r1
 800f79c:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=4;
 800f79e:	4b33      	ldr	r3, [pc, #204]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4a31      	ldr	r2, [pc, #196]	@ (800f86c <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800f7a6:	6013      	str	r3, [r2, #0]
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	60fb      	str	r3, [r7, #12]
 800f7ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f85c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	f4ff af46 	bcc.w	800f648 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
      }
      DmaTopLeftRecCplt  = 0;
 800f7bc:	4b20      	ldr	r3, [pc, #128]	@ (800f840 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;
 800f7c2:	4b21      	ldr	r3, [pc, #132]	@ (800f848 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecCplt  = 0;
 800f7c8:	4b21      	ldr	r3, [pc, #132]	@ (800f850 <HAL_DFSDM_FilterRegConvCpltCallback+0x28c>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecCplt = 0;     
 800f7ce:	4b21      	ldr	r3, [pc, #132]	@ (800f854 <HAL_DFSDM_FilterRegConvCpltCallback+0x290>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	e094      	b.n	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    }
  }
  else
  {
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 800f7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f840 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	f040 8090 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
 800f7e0:	4b19      	ldr	r3, [pc, #100]	@ (800f848 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	f040 808b 	bne.w	800f900 <HAL_DFSDM_FilterRegConvCpltCallback+0x33c>
    {    
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 800f7ea:	4b1c      	ldr	r3, [pc, #112]	@ (800f85c <HAL_DFSDM_FilterRegConvCpltCallback+0x298>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	da00      	bge.n	800f7f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x230>
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	105b      	asrs	r3, r3, #1
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	e076      	b.n	800f8e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x324>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800f7fa:	4b19      	ldr	r3, [pc, #100]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f7fc:	685a      	ldr	r2, [r3, #4]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	121b      	asrs	r3, r3, #8
 800f808:	4a16      	ldr	r2, [pc, #88]	@ (800f864 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a0>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	db30      	blt.n	800f870 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>
 800f80e:	4b14      	ldr	r3, [pc, #80]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f810:	685a      	ldr	r2, [r3, #4]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	4413      	add	r3, r2
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	121b      	asrs	r3, r3, #8
 800f81c:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f820:	4293      	cmp	r3, r2
 800f822:	dc08      	bgt.n	800f836 <HAL_DFSDM_FilterRegConvCpltCallback+0x272>
 800f824:	4b0e      	ldr	r3, [pc, #56]	@ (800f860 <HAL_DFSDM_FilterRegConvCpltCallback+0x29c>)
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	121b      	asrs	r3, r3, #8
 800f832:	b29b      	uxth	r3, r3
 800f834:	e01e      	b.n	800f874 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>
 800f836:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f83a:	e01b      	b.n	800f874 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>
 800f83c:	20030f44 	.word	0x20030f44
 800f840:	200312a0 	.word	0x200312a0
 800f844:	20030f98 	.word	0x20030f98
 800f848:	200312a8 	.word	0x200312a8
 800f84c:	2003111c 	.word	0x2003111c
 800f850:	200312b0 	.word	0x200312b0
 800f854:	200312b8 	.word	0x200312b8
 800f858:	2002066c 	.word	0x2002066c
 800f85c:	20031294 	.word	0x20031294
 800f860:	20031284 	.word	0x20031284
 800f864:	ffff8008 	.word	0xffff8008
 800f868:	20030ecc 	.word	0x20030ecc
 800f86c:	200312bc 	.word	0x200312bc
 800f870:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f874:	4a33      	ldr	r2, [pc, #204]	@ (800f944 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 800f876:	6811      	ldr	r1, [r2, #0]
 800f878:	4a33      	ldr	r2, [pc, #204]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	0052      	lsls	r2, r2, #1
 800f87e:	440a      	add	r2, r1
 800f880:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 800f882:	4b32      	ldr	r3, [pc, #200]	@ (800f94c <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	121b      	asrs	r3, r3, #8
 800f890:	4a2f      	ldr	r2, [pc, #188]	@ (800f950 <HAL_DFSDM_FilterRegConvCpltCallback+0x38c>)
 800f892:	4293      	cmp	r3, r2
 800f894:	db16      	blt.n	800f8c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x300>
 800f896:	4b2d      	ldr	r3, [pc, #180]	@ (800f94c <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	4413      	add	r3, r2
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	121b      	asrs	r3, r3, #8
 800f8a4:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	dc08      	bgt.n	800f8be <HAL_DFSDM_FilterRegConvCpltCallback+0x2fa>
 800f8ac:	4b27      	ldr	r3, [pc, #156]	@ (800f94c <HAL_DFSDM_FilterRegConvCpltCallback+0x388>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4413      	add	r3, r2
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	121b      	asrs	r3, r3, #8
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	e004      	b.n	800f8c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x304>
 800f8be:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800f8c2:	e001      	b.n	800f8c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x304>
 800f8c4:	f248 0308 	movw	r3, #32776	@ 0x8008
 800f8c8:	4a1e      	ldr	r2, [pc, #120]	@ (800f944 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 800f8ca:	6811      	ldr	r1, [r2, #0]
 800f8cc:	4a1e      	ldr	r2, [pc, #120]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f8ce:	6812      	ldr	r2, [r2, #0]
 800f8d0:	3201      	adds	r2, #1
 800f8d2:	0052      	lsls	r2, r2, #1
 800f8d4:	440a      	add	r2, r1
 800f8d6:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=2;
 800f8d8:	4b1b      	ldr	r3, [pc, #108]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3302      	adds	r3, #2
 800f8de:	4a1a      	ldr	r2, [pc, #104]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f8e0:	6013      	str	r3, [r2, #0]
      for(index = (ScratchSize/2) ; index < ScratchSize; index++)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f954 <HAL_DFSDM_FilterRegConvCpltCallback+0x390>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d382      	bcc.n	800f7fa <HAL_DFSDM_FilterRegConvCpltCallback+0x236>
      }
      DmaTopLeftRecCplt  = 0;
 800f8f4:	4b18      	ldr	r3, [pc, #96]	@ (800f958 <HAL_DFSDM_FilterRegConvCpltCallback+0x394>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;  
 800f8fa:	4b18      	ldr	r3, [pc, #96]	@ (800f95c <HAL_DFSDM_FilterRegConvCpltCallback+0x398>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Call Half Transfer Complete callback */
  if((AppBuffTrigger == hAudioIn.RecSize/2) && (AppBuffHalf == 0))
 800f900:	4b10      	ldr	r3, [pc, #64]	@ (800f944 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	085a      	lsrs	r2, r3, #1
 800f906:	4b10      	ldr	r3, [pc, #64]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d108      	bne.n	800f920 <HAL_DFSDM_FilterRegConvCpltCallback+0x35c>
 800f90e:	4b14      	ldr	r3, [pc, #80]	@ (800f960 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d104      	bne.n	800f920 <HAL_DFSDM_FilterRegConvCpltCallback+0x35c>
  {
    AppBuffHalf = 1;  
 800f916:	4b12      	ldr	r3, [pc, #72]	@ (800f960 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 800f918:	2201      	movs	r2, #1
 800f91a:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 800f91c:	f7f0 ff5a 	bl	80007d4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  /* Call Transfer Complete callback */
  if(AppBuffTrigger == hAudioIn.RecSize)
 800f920:	4b08      	ldr	r3, [pc, #32]	@ (800f944 <HAL_DFSDM_FilterRegConvCpltCallback+0x380>)
 800f922:	685a      	ldr	r2, [r3, #4]
 800f924:	4b08      	ldr	r3, [pc, #32]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d107      	bne.n	800f93c <HAL_DFSDM_FilterRegConvCpltCallback+0x378>
  {
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 800f92c:	4b06      	ldr	r3, [pc, #24]	@ (800f948 <HAL_DFSDM_FilterRegConvCpltCallback+0x384>)
 800f92e:	2200      	movs	r2, #0
 800f930:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0; 
 800f932:	4b0b      	ldr	r3, [pc, #44]	@ (800f960 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>)
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
    /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
    BSP_AUDIO_IN_TransferComplete_CallBack();
 800f938:	f7f0 fe3c 	bl	80005b4 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }  
}
 800f93c:	bf00      	nop
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	20030ecc 	.word	0x20030ecc
 800f948:	200312bc 	.word	0x200312bc
 800f94c:	20031284 	.word	0x20031284
 800f950:	ffff8008 	.word	0xffff8008
 800f954:	20031294 	.word	0x20031294
 800f958:	200312a0 	.word	0x200312a0
 800f95c:	200312a8 	.word	0x200312a8
 800f960:	200312c0 	.word	0x200312c0

0800f964 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback. 
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	60fb      	str	r3, [r7, #12]
  
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a97      	ldr	r2, [pc, #604]	@ (800fbd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d103      	bne.n	800f980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>
  {
    DmaTopLeftRecHalfCplt = 1;
 800f978:	4b96      	ldr	r3, [pc, #600]	@ (800fbd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 800f97a:	2201      	movs	r2, #1
 800f97c:	601a      	str	r2, [r3, #0]
 800f97e:	e012      	b.n	800f9a6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a95      	ldr	r2, [pc, #596]	@ (800fbd8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d103      	bne.n	800f990 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
  {
    DmaTopRightRecHalfCplt = 1;
 800f988:	4b94      	ldr	r3, [pc, #592]	@ (800fbdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 800f98a:	2201      	movs	r2, #1
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	e00a      	b.n	800f9a6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a93      	ldr	r2, [pc, #588]	@ (800fbe0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d103      	bne.n	800f9a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3c>
  {
    DmaButtomLeftRecHalfCplt = 1;
 800f998:	4b92      	ldr	r3, [pc, #584]	@ (800fbe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 800f99a:	2201      	movs	r2, #1
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	e002      	b.n	800f9a6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
  }
  else
  {
    DmaButtomRightRecHalfCplt = 1;
 800f9a0:	4b91      	ldr	r3, [pc, #580]	@ (800fbe8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	601a      	str	r2, [r3, #0]
  }
  
  if(AudioIn_ChannelNumber > 2)
 800f9a6:	4b91      	ldr	r3, [pc, #580]	@ (800fbec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x288>)
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	f240 80e2 	bls.w	800fb74 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x210>
  {
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 800f9b0:	4b88      	ldr	r3, [pc, #544]	@ (800fbd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	f040 8172 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 800f9ba:	4b88      	ldr	r3, [pc, #544]	@ (800fbdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	f040 816d 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 800f9c4:	4b87      	ldr	r3, [pc, #540]	@ (800fbe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	f040 8168 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 800f9ce:	4b86      	ldr	r3, [pc, #536]	@ (800fbe8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	f040 8163 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    {
      for(index = 0 ; index < ScratchSize/2; index++)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	e0b2      	b.n	800fb44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e0>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800f9de:	4b84      	ldr	r3, [pc, #528]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	4413      	add	r3, r2
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	121b      	asrs	r3, r3, #8
 800f9ec:	4a81      	ldr	r2, [pc, #516]	@ (800fbf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	db16      	blt.n	800fa20 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
 800f9f2:	4b7f      	ldr	r3, [pc, #508]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	121b      	asrs	r3, r3, #8
 800fa00:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800fa04:	4293      	cmp	r3, r2
 800fa06:	dc08      	bgt.n	800fa1a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb6>
 800fa08:	4b79      	ldr	r3, [pc, #484]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa0a:	685a      	ldr	r2, [r3, #4]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	4413      	add	r3, r2
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	121b      	asrs	r3, r3, #8
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	e004      	b.n	800fa24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>
 800fa1a:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fa1e:	e001      	b.n	800fa24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>
 800fa20:	f248 0308 	movw	r3, #32776	@ 0x8008
 800fa24:	4a74      	ldr	r2, [pc, #464]	@ (800fbf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 800fa26:	6811      	ldr	r1, [r2, #0]
 800fa28:	4a74      	ldr	r2, [pc, #464]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fa2a:	6812      	ldr	r2, [r2, #0]
 800fa2c:	0052      	lsls	r2, r2, #1
 800fa2e:	440a      	add	r2, r1
 800fa30:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760)); 
 800fa32:	4b6f      	ldr	r3, [pc, #444]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	121b      	asrs	r3, r3, #8
 800fa40:	4a6c      	ldr	r2, [pc, #432]	@ (800fbf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	db16      	blt.n	800fa74 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x110>
 800fa46:	4b6a      	ldr	r3, [pc, #424]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	4413      	add	r3, r2
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	121b      	asrs	r3, r3, #8
 800fa54:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	dc08      	bgt.n	800fa6e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10a>
 800fa5c:	4b64      	ldr	r3, [pc, #400]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	121b      	asrs	r3, r3, #8
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	e004      	b.n	800fa78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x114>
 800fa6e:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fa72:	e001      	b.n	800fa78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x114>
 800fa74:	f248 0308 	movw	r3, #32776	@ 0x8008
 800fa78:	4a5f      	ldr	r2, [pc, #380]	@ (800fbf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 800fa7a:	6811      	ldr	r1, [r2, #0]
 800fa7c:	4a5f      	ldr	r2, [pc, #380]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fa7e:	6812      	ldr	r2, [r2, #0]
 800fa80:	3201      	adds	r2, #1
 800fa82:	0052      	lsls	r2, r2, #1
 800fa84:	440a      	add	r2, r1
 800fa86:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 800fa88:	4b59      	ldr	r3, [pc, #356]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa8a:	68da      	ldr	r2, [r3, #12]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	4413      	add	r3, r2
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	121b      	asrs	r3, r3, #8
 800fa96:	4a57      	ldr	r2, [pc, #348]	@ (800fbf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	db16      	blt.n	800faca <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x166>
 800fa9c:	4b54      	ldr	r3, [pc, #336]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fa9e:	68da      	ldr	r2, [r3, #12]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	4413      	add	r3, r2
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	121b      	asrs	r3, r3, #8
 800faaa:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800faae:	4293      	cmp	r3, r2
 800fab0:	dc08      	bgt.n	800fac4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x160>
 800fab2:	4b4f      	ldr	r3, [pc, #316]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fab4:	68da      	ldr	r2, [r3, #12]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	4413      	add	r3, r2
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	121b      	asrs	r3, r3, #8
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	e004      	b.n	800face <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16a>
 800fac4:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fac8:	e001      	b.n	800face <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16a>
 800faca:	f248 0308 	movw	r3, #32776	@ 0x8008
 800face:	4a4a      	ldr	r2, [pc, #296]	@ (800fbf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 800fad0:	6811      	ldr	r1, [r2, #0]
 800fad2:	4a4a      	ldr	r2, [pc, #296]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	3202      	adds	r2, #2
 800fad8:	0052      	lsls	r2, r2, #1
 800fada:	440a      	add	r2, r1
 800fadc:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));      
 800fade:	4b44      	ldr	r3, [pc, #272]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fae0:	689a      	ldr	r2, [r3, #8]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4413      	add	r3, r2
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	121b      	asrs	r3, r3, #8
 800faec:	4a41      	ldr	r2, [pc, #260]	@ (800fbf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	db16      	blt.n	800fb20 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1bc>
 800faf2:	4b3f      	ldr	r3, [pc, #252]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800faf4:	689a      	ldr	r2, [r3, #8]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	4413      	add	r3, r2
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	121b      	asrs	r3, r3, #8
 800fb00:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800fb04:	4293      	cmp	r3, r2
 800fb06:	dc08      	bgt.n	800fb1a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b6>
 800fb08:	4b39      	ldr	r3, [pc, #228]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fb0a:	689a      	ldr	r2, [r3, #8]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	121b      	asrs	r3, r3, #8
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	e004      	b.n	800fb24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 800fb1a:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fb1e:	e001      	b.n	800fb24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
 800fb20:	f248 0308 	movw	r3, #32776	@ 0x8008
 800fb24:	4a34      	ldr	r2, [pc, #208]	@ (800fbf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x294>)
 800fb26:	6811      	ldr	r1, [r2, #0]
 800fb28:	4a34      	ldr	r2, [pc, #208]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fb2a:	6812      	ldr	r2, [r2, #0]
 800fb2c:	3203      	adds	r2, #3
 800fb2e:	0052      	lsls	r2, r2, #1
 800fb30:	440a      	add	r2, r1
 800fb32:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=4;
 800fb34:	4b31      	ldr	r3, [pc, #196]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3304      	adds	r3, #4
 800fb3a:	4a30      	ldr	r2, [pc, #192]	@ (800fbfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x298>)
 800fb3c:	6013      	str	r3, [r2, #0]
      for(index = 0 ; index < ScratchSize/2; index++)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3301      	adds	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	4b2e      	ldr	r3, [pc, #184]	@ (800fc00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x29c>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	da00      	bge.n	800fb4e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ea>
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	105b      	asrs	r3, r3, #1
 800fb50:	461a      	mov	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	4293      	cmp	r3, r2
 800fb56:	f4ff af42 	bcc.w	800f9de <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x7a>
      }
      DmaTopLeftRecHalfCplt  = 0;
 800fb5a:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;
 800fb60:	4b1e      	ldr	r3, [pc, #120]	@ (800fbdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecHalfCplt  = 0;
 800fb66:	4b1f      	ldr	r3, [pc, #124]	@ (800fbe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecHalfCplt = 0;     
 800fb6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fbe8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	e094      	b.n	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    }
  }
  else
  {
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 800fb74:	4b17      	ldr	r3, [pc, #92]	@ (800fbd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	f040 8090 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
 800fb7e:	4b17      	ldr	r3, [pc, #92]	@ (800fbdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	f040 808b 	bne.w	800fc9e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x33a>
    {    
      for(index = 0 ; index < ScratchSize/2; index++)
 800fb88:	2300      	movs	r3, #0
 800fb8a:	60fb      	str	r3, [r7, #12]
 800fb8c:	e076      	b.n	800fc7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x318>
      {
        hAudioIn.pRecBuf[AppBuffTrigger]     = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800fb8e:	4b18      	ldr	r3, [pc, #96]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fb90:	685a      	ldr	r2, [r3, #4]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	4413      	add	r3, r2
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	121b      	asrs	r3, r3, #8
 800fb9c:	4a15      	ldr	r2, [pc, #84]	@ (800fbf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x290>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	db30      	blt.n	800fc04 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>
 800fba2:	4b13      	ldr	r3, [pc, #76]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4413      	add	r3, r2
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	121b      	asrs	r3, r3, #8
 800fbb0:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	dc08      	bgt.n	800fbca <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x266>
 800fbb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28c>)
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4413      	add	r3, r2
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	121b      	asrs	r3, r3, #8
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	e01e      	b.n	800fc08 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>
 800fbca:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fbce:	e01b      	b.n	800fc08 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>
 800fbd0:	20030f44 	.word	0x20030f44
 800fbd4:	2003129c 	.word	0x2003129c
 800fbd8:	20030f98 	.word	0x20030f98
 800fbdc:	200312a4 	.word	0x200312a4
 800fbe0:	2003111c 	.word	0x2003111c
 800fbe4:	200312ac 	.word	0x200312ac
 800fbe8:	200312b4 	.word	0x200312b4
 800fbec:	2002066c 	.word	0x2002066c
 800fbf0:	20031284 	.word	0x20031284
 800fbf4:	ffff8008 	.word	0xffff8008
 800fbf8:	20030ecc 	.word	0x20030ecc
 800fbfc:	200312bc 	.word	0x200312bc
 800fc00:	20031294 	.word	0x20031294
 800fc04:	f248 0308 	movw	r3, #32776	@ 0x8008
 800fc08:	4a36      	ldr	r2, [pc, #216]	@ (800fce4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 800fc0a:	6811      	ldr	r1, [r2, #0]
 800fc0c:	4a36      	ldr	r2, [pc, #216]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fc0e:	6812      	ldr	r2, [r2, #0]
 800fc10:	0052      	lsls	r2, r2, #1
 800fc12:	440a      	add	r2, r1
 800fc14:	8013      	strh	r3, [r2, #0]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 800fc16:	4b35      	ldr	r3, [pc, #212]	@ (800fcec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	121b      	asrs	r3, r3, #8
 800fc24:	4a32      	ldr	r2, [pc, #200]	@ (800fcf0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38c>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	db16      	blt.n	800fc58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f4>
 800fc2a:	4b30      	ldr	r3, [pc, #192]	@ (800fcec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	4413      	add	r3, r2
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	121b      	asrs	r3, r3, #8
 800fc38:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	dc08      	bgt.n	800fc52 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ee>
 800fc40:	4b2a      	ldr	r3, [pc, #168]	@ (800fcec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x388>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	121b      	asrs	r3, r3, #8
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	e004      	b.n	800fc5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f8>
 800fc52:	f647 73f8 	movw	r3, #32760	@ 0x7ff8
 800fc56:	e001      	b.n	800fc5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2f8>
 800fc58:	f248 0308 	movw	r3, #32776	@ 0x8008
 800fc5c:	4a21      	ldr	r2, [pc, #132]	@ (800fce4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 800fc5e:	6811      	ldr	r1, [r2, #0]
 800fc60:	4a21      	ldr	r2, [pc, #132]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fc62:	6812      	ldr	r2, [r2, #0]
 800fc64:	3201      	adds	r2, #1
 800fc66:	0052      	lsls	r2, r2, #1
 800fc68:	440a      	add	r2, r1
 800fc6a:	8013      	strh	r3, [r2, #0]
        AppBuffTrigger +=2;
 800fc6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3302      	adds	r3, #2
 800fc72:	4a1d      	ldr	r2, [pc, #116]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fc74:	6013      	str	r3, [r2, #0]
      for(index = 0 ; index < ScratchSize/2; index++)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	4b1d      	ldr	r3, [pc, #116]	@ (800fcf4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x390>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	da00      	bge.n	800fc86 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x322>
 800fc84:	3301      	adds	r3, #1
 800fc86:	105b      	asrs	r3, r3, #1
 800fc88:	461a      	mov	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	f4ff af7e 	bcc.w	800fb8e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22a>
      }
      DmaTopLeftRecHalfCplt  = 0;
 800fc92:	4b19      	ldr	r3, [pc, #100]	@ (800fcf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x394>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;  
 800fc98:	4b18      	ldr	r3, [pc, #96]	@ (800fcfc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x398>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Call Half Transfer Complete callback */
  if((AppBuffTrigger == hAudioIn.RecSize/2) && (AppBuffHalf == 0))
 800fc9e:	4b11      	ldr	r3, [pc, #68]	@ (800fce4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	085a      	lsrs	r2, r3, #1
 800fca4:	4b10      	ldr	r3, [pc, #64]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d108      	bne.n	800fcbe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x35a>
 800fcac:	4b14      	ldr	r3, [pc, #80]	@ (800fd00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d104      	bne.n	800fcbe <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x35a>
  { 
    AppBuffHalf = 1;  
 800fcb4:	4b12      	ldr	r3, [pc, #72]	@ (800fd00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 800fcba:	f7f0 fd8b 	bl	80007d4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  /* Call Transfer Complete callback */
  if(AppBuffTrigger == hAudioIn.RecSize)
 800fcbe:	4b09      	ldr	r3, [pc, #36]	@ (800fce4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>)
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	4b09      	ldr	r3, [pc, #36]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d107      	bne.n	800fcda <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x376>
  {
    /* Reset Application Buffer Trigger */
    AppBuffTrigger = 0;
 800fcca:	4b07      	ldr	r3, [pc, #28]	@ (800fce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x384>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]
    AppBuffHalf = 0;
 800fcd0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x39c>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	601a      	str	r2, [r3, #0]
    /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
    BSP_AUDIO_IN_TransferComplete_CallBack();
 800fcd6:	f7f0 fc6d 	bl	80005b4 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }  
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	20030ecc 	.word	0x20030ecc
 800fce8:	200312bc 	.word	0x200312bc
 800fcec:	20031284 	.word	0x20031284
 800fcf0:	ffff8008 	.word	0xffff8008
 800fcf4:	20031294 	.word	0x20031294
 800fcf8:	2003129c 	.word	0x2003129c
 800fcfc:	200312a4 	.word	0x200312a4
 800fd00:	200312c0 	.word	0x200312c0

0800fd04 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800fd0c:	f7f0 fd62 	bl	80007d4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800fd10:	bf00      	nop
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800fd20:	f7f0 fc48 	bl	80005b4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800fd24:	bf00      	nop
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 800fd2c:	b480      	push	{r7}
 800fd2e:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800fd30:	bf00      	nop
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr
	...

0800fd3c <BSP_AUDIO_IN_MspInit>:
/**
  * @brief  Initialize BSP_AUDIO_IN MSP.
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(void)
{ 
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 800fd40:	4b04      	ldr	r3, [pc, #16]	@ (800fd54 <BSP_AUDIO_IN_MspInit+0x18>)
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d003      	beq.n	800fd50 <BSP_AUDIO_IN_MspInit+0x14>
  /* MSP filters initialization */
//  DFSDMx_FilterMspInit();
  }
  else
  {
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL); 
 800fd48:	2100      	movs	r1, #0
 800fd4a:	4803      	ldr	r0, [pc, #12]	@ (800fd58 <BSP_AUDIO_IN_MspInit+0x1c>)
 800fd4c:	f7ff f920 	bl	800ef90 <SAI_AUDIO_IN_MspInit>
  }
}
 800fd50:	bf00      	nop
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	20031298 	.word	0x20031298
 800fd58:	20030e48 	.word	0x20030e48

0800fd5c <BSP_AUDIO_IN_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_IN_ClockConfig(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t AudioFreq, void *Params)
{ 
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b0a8      	sub	sp, #160	@ 0xa0
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800fd68:	f107 0310 	add.w	r3, r7, #16
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fd f903 	bl	800cf78 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d009      	beq.n	800fd90 <BSP_AUDIO_IN_ClockConfig+0x34>
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	f245 6222 	movw	r2, #22050	@ 0x5622
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d004      	beq.n	800fd90 <BSP_AUDIO_IN_ClockConfig+0x34>
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d112      	bne.n	800fdb6 <BSP_AUDIO_IN_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M 
    SAI_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800fd90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fd94:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800fd96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fd9a:	653b      	str	r3, [r7, #80]	@ 0x50
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800fd9c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800fda0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800fda2:	2302      	movs	r3, #2
 800fda4:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800fda6:	2313      	movs	r3, #19
 800fda8:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800fdaa:	f107 0310 	add.w	r3, r7, #16
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fc f822 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
 800fdb4:	e011      	b.n	800fdda <BSP_AUDIO_IN_ClockConfig+0x7e>
  {
    /* SAI clock config 
    PLLI2S_VCO: VCO_344M 
    SAI_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800fdb6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fdba:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800fdbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fdc0:	653b      	str	r3, [r7, #80]	@ 0x50
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 800fdc2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800fdc6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800fdc8:	2307      	movs	r3, #7
 800fdca:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;   
 800fdcc:	2301      	movs	r3, #1
 800fdce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800fdd0:	f107 0310 	add.w	r3, r7, #16
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fc f80f 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
  }
  
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 800fdda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800fdde:	613b      	str	r3, [r7, #16]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 800fde0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800fde4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 800fde8:	f107 0310 	add.w	r3, r7, #16
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fc f803 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>
}
 800fdf2:	bf00      	nop
 800fdf4:	37a0      	adds	r7, #160	@ 0xa0
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800fdfe:	2001      	movs	r0, #1
 800fe00:	f000 f804 	bl	800fe0c <BSP_LCD_InitEx>
 800fe04:	4603      	mov	r3, r0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b090      	sub	sp, #64	@ 0x40
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800fe16:	f646 3325 	movw	r3, #27429	@ 0x6b25
 800fe1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t read_id = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	877b      	strh	r3, [r7, #58]	@ 0x3a

  uint32_t laneByteClk_kHz = 0;
 800fe20:	2300      	movs	r3, #0
 800fe22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800fe24:	f000 f936 	bl	8010094 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 800fe28:	f000 fce2 	bl	80107f0 <LCD_IO_GetID>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	877b      	strh	r3, [r7, #58]	@ 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 800fe30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fe32:	2b11      	cmp	r3, #17
 800fe34:	d001      	beq.n	800fe3a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800fe36:	2301      	movs	r3, #1
 800fe38:	e113      	b.n	8010062 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800fe3a:	f000 fce1 	bl	8010800 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800fe3e:	4b8b      	ldr	r3, [pc, #556]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800fe40:	4a8b      	ldr	r2, [pc, #556]	@ (8010070 <BSP_LCD_InitEx+0x264>)
 800fe42:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 800fe44:	4889      	ldr	r0, [pc, #548]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800fe46:	f7f7 ffcd 	bl	8007de4 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800fe4a:	2364      	movs	r3, #100	@ 0x64
 800fe4c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800fe4e:	2305      	movs	r3, #5
 800fe50:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800fe52:	2300      	movs	r3, #0
 800fe54:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800fe56:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800fe5a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800fe5c:	4b83      	ldr	r3, [pc, #524]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800fe5e:	2201      	movs	r2, #1
 800fe60:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800fe62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe64:	089b      	lsrs	r3, r3, #2
 800fe66:	4a83      	ldr	r2, [pc, #524]	@ (8010074 <BSP_LCD_InitEx+0x268>)
 800fe68:	fba2 2303 	umull	r2, r3, r2, r3
 800fe6c:	0a9b      	lsrs	r3, r3, #10
 800fe6e:	4a7f      	ldr	r2, [pc, #508]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800fe70:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800fe72:	f107 0308 	add.w	r3, r7, #8
 800fe76:	4619      	mov	r1, r3
 800fe78:	487c      	ldr	r0, [pc, #496]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800fe7a:	f7f7 fea9 	bl	8007bd0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d108      	bne.n	800fe96 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800fe84:	4b7c      	ldr	r3, [pc, #496]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800fe86:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fe8a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800fe8c:	4b7b      	ldr	r3, [pc, #492]	@ (801007c <BSP_LCD_InitEx+0x270>)
 800fe8e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800fe92:	601a      	str	r2, [r3, #0]
 800fe94:	e007      	b.n	800fea6 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800fe96:	4b78      	ldr	r3, [pc, #480]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800fe98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800fe9c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800fe9e:	4b77      	ldr	r3, [pc, #476]	@ (801007c <BSP_LCD_InitEx+0x270>)
 800fea0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fea4:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800fea6:	4b74      	ldr	r3, [pc, #464]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	633b      	str	r3, [r7, #48]	@ 0x30
  VACT = lcd_y_size;
 800feac:	4b73      	ldr	r3, [pc, #460]	@ (801007c <BSP_LCD_InitEx+0x270>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800feb2:	230c      	movs	r3, #12
 800feb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 800feb6:	230c      	movs	r3, #12
 800feb8:	627b      	str	r3, [r7, #36]	@ 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800feba:	230c      	movs	r3, #12
 800febc:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800febe:	233f      	movs	r3, #63	@ 0x3f
 800fec0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800fec2:	2378      	movs	r3, #120	@ 0x78
 800fec4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800fec6:	2378      	movs	r3, #120	@ 0x78
 800fec8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800feca:	4b6d      	ldr	r3, [pc, #436]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fecc:	2200      	movs	r2, #0
 800fece:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800fed0:	4b6b      	ldr	r3, [pc, #428]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fed2:	2205      	movs	r2, #5
 800fed4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800fed6:	4b6a      	ldr	r3, [pc, #424]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fed8:	2200      	movs	r2, #0
 800feda:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800fedc:	4b68      	ldr	r3, [pc, #416]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fede:	2200      	movs	r2, #0
 800fee0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800fee2:	4b67      	ldr	r3, [pc, #412]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800fee8:	4b65      	ldr	r3, [pc, #404]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800feea:	2202      	movs	r2, #2
 800feec:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800feee:	4b64      	ldr	r3, [pc, #400]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fef0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800fef4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800fef6:	4b62      	ldr	r3, [pc, #392]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800fefc:	4a60      	ldr	r2, [pc, #384]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800fefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff00:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff06:	fb03 f202 	mul.w	r2, r3, r2
 800ff0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff10:	4a5b      	ldr	r2, [pc, #364]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff12:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff18:	fb03 f202 	mul.w	r2, r3, r2
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff22:	4a57      	ldr	r2, [pc, #348]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff24:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800ff26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	441a      	add	r2, r3
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	441a      	add	r2, r3
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	4413      	add	r3, r2
 800ff34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff36:	fb03 f202 	mul.w	r2, r3, r2
 800ff3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff40:	4a4f      	ldr	r2, [pc, #316]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff42:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800ff44:	4a4e      	ldr	r2, [pc, #312]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff48:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800ff4a:	4a4d      	ldr	r2, [pc, #308]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4e:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800ff50:	4a4b      	ldr	r2, [pc, #300]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff52:	6a3b      	ldr	r3, [r7, #32]
 800ff54:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800ff56:	4a4a      	ldr	r2, [pc, #296]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5a:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800ff5c:	4b48      	ldr	r3, [pc, #288]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ff62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800ff64:	4b46      	ldr	r3, [pc, #280]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff66:	2210      	movs	r2, #16
 800ff68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800ff6a:	4b45      	ldr	r3, [pc, #276]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 800ff70:	4b43      	ldr	r3, [pc, #268]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ff76:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800ff78:	4b41      	ldr	r3, [pc, #260]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ff7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800ff80:	4b3f      	ldr	r3, [pc, #252]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff86:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800ff88:	4b3d      	ldr	r3, [pc, #244]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ff8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800ff90:	4b3b      	ldr	r3, [pc, #236]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff96:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800ff98:	4b39      	ldr	r3, [pc, #228]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ff9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 800ffa0:	4937      	ldr	r1, [pc, #220]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 800ffa2:	4832      	ldr	r0, [pc, #200]	@ (801006c <BSP_LCD_InitEx+0x260>)
 800ffa4:	f7f7 ff80 	bl	8007ea8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	4a35      	ldr	r2, [pc, #212]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800ffae:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 800ffb0:	69fa      	ldr	r2, [r7, #28]
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	4a32      	ldr	r2, [pc, #200]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800ffba:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800ffbc:	4b2e      	ldr	r3, [pc, #184]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	441a      	add	r2, r3
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	4a2e      	ldr	r2, [pc, #184]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800ffcc:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800ffce:	4b2a      	ldr	r3, [pc, #168]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	441a      	add	r2, r3
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	441a      	add	r2, r3
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	4413      	add	r3, r2
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	4a28      	ldr	r2, [pc, #160]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800ffe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 800ffe4:	4b24      	ldr	r3, [pc, #144]	@ (8010078 <BSP_LCD_InitEx+0x26c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a26      	ldr	r2, [pc, #152]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800ffea:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800ffec:	4b23      	ldr	r3, [pc, #140]	@ (801007c <BSP_LCD_InitEx+0x270>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a24      	ldr	r2, [pc, #144]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 800fff2:	6653      	str	r3, [r2, #100]	@ 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800fff4:	4b24      	ldr	r3, [pc, #144]	@ (8010088 <BSP_LCD_InitEx+0x27c>)
 800fff6:	2208      	movs	r2, #8
 800fff8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800fffa:	4b23      	ldr	r3, [pc, #140]	@ (8010088 <BSP_LCD_InitEx+0x27c>)
 800fffc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8010000:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8010002:	4b21      	ldr	r3, [pc, #132]	@ (8010088 <BSP_LCD_InitEx+0x27c>)
 8010004:	2207      	movs	r2, #7
 8010006:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8010008:	4b1f      	ldr	r3, [pc, #124]	@ (8010088 <BSP_LCD_InitEx+0x27c>)
 801000a:	2200      	movs	r2, #0
 801000c:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801000e:	481e      	ldr	r0, [pc, #120]	@ (8010088 <BSP_LCD_InitEx+0x27c>)
 8010010:	f7fb fef2 	bl	800bdf8 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8010014:	4b1b      	ldr	r3, [pc, #108]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 8010016:	2200      	movs	r2, #0
 8010018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 801001c:	4b19      	ldr	r3, [pc, #100]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 801001e:	2200      	movs	r2, #0
 8010020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8010024:	4b17      	ldr	r3, [pc, #92]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801002c:	4b15      	ldr	r3, [pc, #84]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 801002e:	2200      	movs	r2, #0
 8010030:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8010032:	4b14      	ldr	r3, [pc, #80]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 8010034:	4a15      	ldr	r2, [pc, #84]	@ (801008c <BSP_LCD_InitEx+0x280>)
 8010036:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8010038:	4911      	ldr	r1, [pc, #68]	@ (8010080 <BSP_LCD_InitEx+0x274>)
 801003a:	4812      	ldr	r0, [pc, #72]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 801003c:	f7fa fcfa 	bl	800aa34 <HAL_LTDC_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8010040:	4810      	ldr	r0, [pc, #64]	@ (8010084 <BSP_LCD_InitEx+0x278>)
 8010042:	f7fa fa33 	bl	800a4ac <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8010046:	4809      	ldr	r0, [pc, #36]	@ (801006c <BSP_LCD_InitEx+0x260>)
 8010048:	f7f8 f92e 	bl	80082a8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 801004c:	f001 faa6 	bl	801159c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8010050:	480f      	ldr	r0, [pc, #60]	@ (8010090 <BSP_LCD_InitEx+0x284>)
 8010052:	f000 f911 	bl	8010278 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	4619      	mov	r1, r3
 801005a:	2000      	movs	r0, #0
 801005c:	f7f4 faa2 	bl	80045a4 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3740      	adds	r7, #64	@ 0x40
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200314f0 	.word	0x200314f0
 8010070:	40016c00 	.word	0x40016c00
 8010074:	43215e57 	.word	0x43215e57
 8010078:	20020670 	.word	0x20020670
 801007c:	20020674 	.word	0x20020674
 8010080:	20031384 	.word	0x20031384
 8010084:	20031448 	.word	0x20031448
 8010088:	20031528 	.word	0x20031528
 801008c:	40016800 	.word	0x40016800
 8010090:	20020690 	.word	0x20020690

08010094 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801009a:	4b18      	ldr	r3, [pc, #96]	@ (80100fc <BSP_LCD_Reset+0x68>)
 801009c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801009e:	4a17      	ldr	r2, [pc, #92]	@ (80100fc <BSP_LCD_Reset+0x68>)
 80100a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80100a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80100a6:	4b15      	ldr	r3, [pc, #84]	@ (80100fc <BSP_LCD_Reset+0x68>)
 80100a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80100ae:	603b      	str	r3, [r7, #0]
 80100b0:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80100b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100b6:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80100b8:	2301      	movs	r3, #1
 80100ba:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80100bc:	2301      	movs	r3, #1
 80100be:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80100c0:	2303      	movs	r3, #3
 80100c2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80100c4:	1d3b      	adds	r3, r7, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	480d      	ldr	r0, [pc, #52]	@ (8010100 <BSP_LCD_Reset+0x6c>)
 80100ca:	f7f8 f9db 	bl	8008484 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80100ce:	2200      	movs	r2, #0
 80100d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80100d4:	480a      	ldr	r0, [pc, #40]	@ (8010100 <BSP_LCD_Reset+0x6c>)
 80100d6:	f7f8 fb99 	bl	800880c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80100da:	2014      	movs	r0, #20
 80100dc:	f7f6 fbc2 	bl	8006864 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80100e0:	2201      	movs	r2, #1
 80100e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80100e6:	4806      	ldr	r0, [pc, #24]	@ (8010100 <BSP_LCD_Reset+0x6c>)
 80100e8:	f7f8 fb90 	bl	800880c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80100ec:	200a      	movs	r0, #10
 80100ee:	f7f6 fbb9 	bl	8006864 <HAL_Delay>
}
 80100f2:	bf00      	nop
 80100f4:	3718      	adds	r7, #24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	40023800 	.word	0x40023800
 8010100:	40022400 	.word	0x40022400

08010104 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8010104:	b480      	push	{r7}
 8010106:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8010108:	4b03      	ldr	r3, [pc, #12]	@ (8010118 <BSP_LCD_GetXSize+0x14>)
 801010a:	681b      	ldr	r3, [r3, #0]
}
 801010c:	4618      	mov	r0, r3
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	20020670 	.word	0x20020670

0801011c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 801011c:	b480      	push	{r7}
 801011e:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8010120:	4b03      	ldr	r3, [pc, #12]	@ (8010130 <BSP_LCD_GetYSize+0x14>)
 8010122:	681b      	ldr	r3, [r3, #0]
}
 8010124:	4618      	mov	r0, r3
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	20020674 	.word	0x20020674

08010134 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b090      	sub	sp, #64	@ 0x40
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	6039      	str	r1, [r7, #0]
 801013e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8010140:	2300      	movs	r3, #0
 8010142:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8010144:	f7ff ffde 	bl	8010104 <BSP_LCD_GetXSize>
 8010148:	4603      	mov	r3, r0
 801014a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8010150:	f7ff ffe4 	bl	801011c <BSP_LCD_GetYSize>
 8010154:	4603      	mov	r3, r0
 8010156:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8010158:	2300      	movs	r3, #0
 801015a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8010160:	23ff      	movs	r3, #255	@ 0xff
 8010162:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 801016e:	2300      	movs	r3, #0
 8010170:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801017a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 801017e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8010180:	2307      	movs	r3, #7
 8010182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8010184:	f7ff ffbe 	bl	8010104 <BSP_LCD_GetXSize>
 8010188:	4603      	mov	r3, r0
 801018a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 801018c:	f7ff ffc6 	bl	801011c <BSP_LCD_GetYSize>
 8010190:	4603      	mov	r3, r0
 8010192:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8010194:	88fa      	ldrh	r2, [r7, #6]
 8010196:	f107 030c 	add.w	r3, r7, #12
 801019a:	4619      	mov	r1, r3
 801019c:	4812      	ldr	r0, [pc, #72]	@ (80101e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 801019e:	f7fa fa6b 	bl	800a678 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80101a2:	88fa      	ldrh	r2, [r7, #6]
 80101a4:	4911      	ldr	r1, [pc, #68]	@ (80101ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80101a6:	4613      	mov	r3, r2
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	4413      	add	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	440b      	add	r3, r1
 80101b0:	3304      	adds	r3, #4
 80101b2:	f04f 32ff 	mov.w	r2, #4294967295
 80101b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80101b8:	88fa      	ldrh	r2, [r7, #6]
 80101ba:	490c      	ldr	r1, [pc, #48]	@ (80101ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80101bc:	4613      	mov	r3, r2
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	4413      	add	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	440b      	add	r3, r1
 80101c6:	3308      	adds	r3, #8
 80101c8:	4a09      	ldr	r2, [pc, #36]	@ (80101f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80101ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80101cc:	88fa      	ldrh	r2, [r7, #6]
 80101ce:	4907      	ldr	r1, [pc, #28]	@ (80101ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80101d0:	4613      	mov	r3, r2
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	4413      	add	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	440b      	add	r3, r1
 80101da:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80101de:	601a      	str	r2, [r3, #0]
}
 80101e0:	bf00      	nop
 80101e2:	3740      	adds	r7, #64	@ 0x40
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	20031448 	.word	0x20031448
 80101ec:	20031510 	.word	0x20031510
 80101f0:	20020690 	.word	0x20020690

080101f4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80101fc:	4a04      	ldr	r2, [pc, #16]	@ (8010210 <BSP_LCD_SelectLayer+0x1c>)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6013      	str	r3, [r2, #0]
}
 8010202:	bf00      	nop
 8010204:	370c      	adds	r7, #12
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	2003150c 	.word	0x2003150c

08010214 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 801021c:	4b07      	ldr	r3, [pc, #28]	@ (801023c <BSP_LCD_SetTextColor+0x28>)
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	4907      	ldr	r1, [pc, #28]	@ (8010240 <BSP_LCD_SetTextColor+0x2c>)
 8010222:	4613      	mov	r3, r2
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	4413      	add	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	440b      	add	r3, r1
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	601a      	str	r2, [r3, #0]
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	2003150c 	.word	0x2003150c
 8010240:	20031510 	.word	0x20031510

08010244 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 801024c:	4b08      	ldr	r3, [pc, #32]	@ (8010270 <BSP_LCD_SetBackColor+0x2c>)
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	4908      	ldr	r1, [pc, #32]	@ (8010274 <BSP_LCD_SetBackColor+0x30>)
 8010252:	4613      	mov	r3, r2
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	4413      	add	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	440b      	add	r3, r1
 801025c:	3304      	adds	r3, #4
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	601a      	str	r2, [r3, #0]
}
 8010262:	bf00      	nop
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	2003150c 	.word	0x2003150c
 8010274:	20031510 	.word	0x20031510

08010278 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8010280:	4b08      	ldr	r3, [pc, #32]	@ (80102a4 <BSP_LCD_SetFont+0x2c>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	4908      	ldr	r1, [pc, #32]	@ (80102a8 <BSP_LCD_SetFont+0x30>)
 8010286:	4613      	mov	r3, r2
 8010288:	005b      	lsls	r3, r3, #1
 801028a:	4413      	add	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	440b      	add	r3, r1
 8010290:	3308      	adds	r3, #8
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	601a      	str	r2, [r3, #0]
}
 8010296:	bf00      	nop
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr
 80102a2:	bf00      	nop
 80102a4:	2003150c 	.word	0x2003150c
 80102a8:	20031510 	.word	0x20031510

080102ac <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af02      	add	r7, sp, #8
 80102b2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80102b4:	4b0f      	ldr	r3, [pc, #60]	@ (80102f4 <BSP_LCD_Clear+0x48>)
 80102b6:	681c      	ldr	r4, [r3, #0]
 80102b8:	4b0e      	ldr	r3, [pc, #56]	@ (80102f4 <BSP_LCD_Clear+0x48>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a0e      	ldr	r2, [pc, #56]	@ (80102f8 <BSP_LCD_Clear+0x4c>)
 80102be:	2134      	movs	r1, #52	@ 0x34
 80102c0:	fb01 f303 	mul.w	r3, r1, r3
 80102c4:	4413      	add	r3, r2
 80102c6:	335c      	adds	r3, #92	@ 0x5c
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	461e      	mov	r6, r3
 80102cc:	f7ff ff1a 	bl	8010104 <BSP_LCD_GetXSize>
 80102d0:	4605      	mov	r5, r0
 80102d2:	f7ff ff23 	bl	801011c <BSP_LCD_GetYSize>
 80102d6:	4602      	mov	r2, r0
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	2300      	movs	r3, #0
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	4613      	mov	r3, r2
 80102e2:	462a      	mov	r2, r5
 80102e4:	4631      	mov	r1, r6
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fbd2 	bl	8010a90 <LL_FillBuffer>
}
 80102ec:	bf00      	nop
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f4:	2003150c 	.word	0x2003150c
 80102f8:	20031448 	.word	0x20031448

080102fc <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80102fc:	b590      	push	{r4, r7, lr}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	80fb      	strh	r3, [r7, #6]
 8010306:	460b      	mov	r3, r1
 8010308:	80bb      	strh	r3, [r7, #4]
 801030a:	4613      	mov	r3, r2
 801030c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 801030e:	4b1b      	ldr	r3, [pc, #108]	@ (801037c <BSP_LCD_DisplayChar+0x80>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	491b      	ldr	r1, [pc, #108]	@ (8010380 <BSP_LCD_DisplayChar+0x84>)
 8010314:	4613      	mov	r3, r2
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	4413      	add	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	440b      	add	r3, r1
 801031e:	3308      	adds	r3, #8
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6819      	ldr	r1, [r3, #0]
 8010324:	78fb      	ldrb	r3, [r7, #3]
 8010326:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 801032a:	4b14      	ldr	r3, [pc, #80]	@ (801037c <BSP_LCD_DisplayChar+0x80>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	4c14      	ldr	r4, [pc, #80]	@ (8010380 <BSP_LCD_DisplayChar+0x84>)
 8010330:	4613      	mov	r3, r2
 8010332:	005b      	lsls	r3, r3, #1
 8010334:	4413      	add	r3, r2
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	4423      	add	r3, r4
 801033a:	3308      	adds	r3, #8
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8010340:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8010344:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <BSP_LCD_DisplayChar+0x80>)
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	4c0d      	ldr	r4, [pc, #52]	@ (8010380 <BSP_LCD_DisplayChar+0x84>)
 801034a:	4613      	mov	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	4413      	add	r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4423      	add	r3, r4
 8010354:	3308      	adds	r3, #8
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	889b      	ldrh	r3, [r3, #4]
 801035a:	3307      	adds	r3, #7
 801035c:	2b00      	cmp	r3, #0
 801035e:	da00      	bge.n	8010362 <BSP_LCD_DisplayChar+0x66>
 8010360:	3307      	adds	r3, #7
 8010362:	10db      	asrs	r3, r3, #3
 8010364:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8010368:	18ca      	adds	r2, r1, r3
 801036a:	88b9      	ldrh	r1, [r7, #4]
 801036c:	88fb      	ldrh	r3, [r7, #6]
 801036e:	4618      	mov	r0, r3
 8010370:	f000 fad6 	bl	8010920 <DrawChar>
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	bd90      	pop	{r4, r7, pc}
 801037c:	2003150c 	.word	0x2003150c
 8010380:	20031510 	.word	0x20031510

08010384 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8010384:	b5b0      	push	{r4, r5, r7, lr}
 8010386:	b088      	sub	sp, #32
 8010388:	af00      	add	r7, sp, #0
 801038a:	60ba      	str	r2, [r7, #8]
 801038c:	461a      	mov	r2, r3
 801038e:	4603      	mov	r3, r0
 8010390:	81fb      	strh	r3, [r7, #14]
 8010392:	460b      	mov	r3, r1
 8010394:	81bb      	strh	r3, [r7, #12]
 8010396:	4613      	mov	r3, r2
 8010398:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 801039a:	2301      	movs	r3, #1
 801039c:	83fb      	strh	r3, [r7, #30]
 801039e:	2300      	movs	r3, #0
 80103a0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	61bb      	str	r3, [r7, #24]
 80103a6:	2300      	movs	r3, #0
 80103a8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80103ae:	e002      	b.n	80103b6 <BSP_LCD_DisplayStringAt+0x32>
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	3301      	adds	r3, #1
 80103b4:	61bb      	str	r3, [r7, #24]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	617a      	str	r2, [r7, #20]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f6      	bne.n	80103b0 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80103c2:	f7ff fe9f 	bl	8010104 <BSP_LCD_GetXSize>
 80103c6:	4601      	mov	r1, r0
 80103c8:	4b50      	ldr	r3, [pc, #320]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	4850      	ldr	r0, [pc, #320]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 80103ce:	4613      	mov	r3, r2
 80103d0:	005b      	lsls	r3, r3, #1
 80103d2:	4413      	add	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4403      	add	r3, r0
 80103d8:	3308      	adds	r3, #8
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	889b      	ldrh	r3, [r3, #4]
 80103de:	fbb1 f3f3 	udiv	r3, r1, r3
 80103e2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80103e4:	79fb      	ldrb	r3, [r7, #7]
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d01c      	beq.n	8010424 <BSP_LCD_DisplayStringAt+0xa0>
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	dc33      	bgt.n	8010456 <BSP_LCD_DisplayStringAt+0xd2>
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d002      	beq.n	80103f8 <BSP_LCD_DisplayStringAt+0x74>
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d019      	beq.n	801042a <BSP_LCD_DisplayStringAt+0xa6>
 80103f6:	e02e      	b.n	8010456 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	1ad1      	subs	r1, r2, r3
 80103fe:	4b43      	ldr	r3, [pc, #268]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	4843      	ldr	r0, [pc, #268]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 8010404:	4613      	mov	r3, r2
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	4413      	add	r3, r2
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	4403      	add	r3, r0
 801040e:	3308      	adds	r3, #8
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	889b      	ldrh	r3, [r3, #4]
 8010414:	fb01 f303 	mul.w	r3, r1, r3
 8010418:	085b      	lsrs	r3, r3, #1
 801041a:	b29a      	uxth	r2, r3
 801041c:	89fb      	ldrh	r3, [r7, #14]
 801041e:	4413      	add	r3, r2
 8010420:	83fb      	strh	r3, [r7, #30]
      break;
 8010422:	e01b      	b.n	801045c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	83fb      	strh	r3, [r7, #30]
      break;
 8010428:	e018      	b.n	801045c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 801042a:	693a      	ldr	r2, [r7, #16]
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	b299      	uxth	r1, r3
 8010432:	4b36      	ldr	r3, [pc, #216]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	4836      	ldr	r0, [pc, #216]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 8010438:	4613      	mov	r3, r2
 801043a:	005b      	lsls	r3, r3, #1
 801043c:	4413      	add	r3, r2
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4403      	add	r3, r0
 8010442:	3308      	adds	r3, #8
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	889b      	ldrh	r3, [r3, #4]
 8010448:	fb11 f303 	smulbb	r3, r1, r3
 801044c:	b29a      	uxth	r2, r3
 801044e:	89fb      	ldrh	r3, [r7, #14]
 8010450:	1ad3      	subs	r3, r2, r3
 8010452:	83fb      	strh	r3, [r7, #30]
      break;
 8010454:	e002      	b.n	801045c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8010456:	89fb      	ldrh	r3, [r7, #14]
 8010458:	83fb      	strh	r3, [r7, #30]
      break;
 801045a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801045c:	8bfb      	ldrh	r3, [r7, #30]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d003      	beq.n	801046a <BSP_LCD_DisplayStringAt+0xe6>
 8010462:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010466:	2b00      	cmp	r3, #0
 8010468:	da1d      	bge.n	80104a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 801046a:	2301      	movs	r3, #1
 801046c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 801046e:	e01a      	b.n	80104a6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	781a      	ldrb	r2, [r3, #0]
 8010474:	89b9      	ldrh	r1, [r7, #12]
 8010476:	8bfb      	ldrh	r3, [r7, #30]
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff ff3f 	bl	80102fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 801047e:	4b23      	ldr	r3, [pc, #140]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	4923      	ldr	r1, [pc, #140]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 8010484:	4613      	mov	r3, r2
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	440b      	add	r3, r1
 801048e:	3308      	adds	r3, #8
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	889a      	ldrh	r2, [r3, #4]
 8010494:	8bfb      	ldrh	r3, [r7, #30]
 8010496:	4413      	add	r3, r2
 8010498:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	3301      	adds	r3, #1
 801049e:	60bb      	str	r3, [r7, #8]
    i++;
 80104a0:	8bbb      	ldrh	r3, [r7, #28]
 80104a2:	3301      	adds	r3, #1
 80104a4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	bf14      	ite	ne
 80104ae:	2301      	movne	r3, #1
 80104b0:	2300      	moveq	r3, #0
 80104b2:	b2dc      	uxtb	r4, r3
 80104b4:	f7ff fe26 	bl	8010104 <BSP_LCD_GetXSize>
 80104b8:	8bb9      	ldrh	r1, [r7, #28]
 80104ba:	4b14      	ldr	r3, [pc, #80]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	4d14      	ldr	r5, [pc, #80]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 80104c0:	4613      	mov	r3, r2
 80104c2:	005b      	lsls	r3, r3, #1
 80104c4:	4413      	add	r3, r2
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	442b      	add	r3, r5
 80104ca:	3308      	adds	r3, #8
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	889b      	ldrh	r3, [r3, #4]
 80104d0:	fb01 f303 	mul.w	r3, r1, r3
 80104d4:	1ac3      	subs	r3, r0, r3
 80104d6:	b299      	uxth	r1, r3
 80104d8:	4b0c      	ldr	r3, [pc, #48]	@ (801050c <BSP_LCD_DisplayStringAt+0x188>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	480c      	ldr	r0, [pc, #48]	@ (8010510 <BSP_LCD_DisplayStringAt+0x18c>)
 80104de:	4613      	mov	r3, r2
 80104e0:	005b      	lsls	r3, r3, #1
 80104e2:	4413      	add	r3, r2
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4403      	add	r3, r0
 80104e8:	3308      	adds	r3, #8
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	889b      	ldrh	r3, [r3, #4]
 80104ee:	4299      	cmp	r1, r3
 80104f0:	bf2c      	ite	cs
 80104f2:	2301      	movcs	r3, #1
 80104f4:	2300      	movcc	r3, #0
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	4023      	ands	r3, r4
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1b7      	bne.n	8010470 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8010500:	bf00      	nop
 8010502:	bf00      	nop
 8010504:	3720      	adds	r7, #32
 8010506:	46bd      	mov	sp, r7
 8010508:	bdb0      	pop	{r4, r5, r7, pc}
 801050a:	bf00      	nop
 801050c:	2003150c 	.word	0x2003150c
 8010510:	20031510 	.word	0x20031510

08010514 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8010514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010516:	b087      	sub	sp, #28
 8010518:	af02      	add	r7, sp, #8
 801051a:	4603      	mov	r3, r0
 801051c:	80fb      	strh	r3, [r7, #6]
 801051e:	460b      	mov	r3, r1
 8010520:	80bb      	strh	r3, [r7, #4]
 8010522:	4613      	mov	r3, r2
 8010524:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 801052a:	4b18      	ldr	r3, [pc, #96]	@ (801058c <BSP_LCD_DrawVLine+0x78>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4a18      	ldr	r2, [pc, #96]	@ (8010590 <BSP_LCD_DrawVLine+0x7c>)
 8010530:	2134      	movs	r1, #52	@ 0x34
 8010532:	fb01 f303 	mul.w	r3, r1, r3
 8010536:	4413      	add	r3, r2
 8010538:	335c      	adds	r3, #92	@ 0x5c
 801053a:	681c      	ldr	r4, [r3, #0]
 801053c:	f7ff fde2 	bl	8010104 <BSP_LCD_GetXSize>
 8010540:	4602      	mov	r2, r0
 8010542:	88bb      	ldrh	r3, [r7, #4]
 8010544:	fb03 f202 	mul.w	r2, r3, r2
 8010548:	88fb      	ldrh	r3, [r7, #6]
 801054a:	4413      	add	r3, r2
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	4423      	add	r3, r4
 8010550:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8010552:	4b0e      	ldr	r3, [pc, #56]	@ (801058c <BSP_LCD_DrawVLine+0x78>)
 8010554:	681c      	ldr	r4, [r3, #0]
 8010556:	68fd      	ldr	r5, [r7, #12]
 8010558:	887e      	ldrh	r6, [r7, #2]
 801055a:	f7ff fdd3 	bl	8010104 <BSP_LCD_GetXSize>
 801055e:	4603      	mov	r3, r0
 8010560:	1e59      	subs	r1, r3, #1
 8010562:	4b0a      	ldr	r3, [pc, #40]	@ (801058c <BSP_LCD_DrawVLine+0x78>)
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	480b      	ldr	r0, [pc, #44]	@ (8010594 <BSP_LCD_DrawVLine+0x80>)
 8010568:	4613      	mov	r3, r2
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	4413      	add	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4403      	add	r3, r0
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	9100      	str	r1, [sp, #0]
 8010578:	4633      	mov	r3, r6
 801057a:	2201      	movs	r2, #1
 801057c:	4629      	mov	r1, r5
 801057e:	4620      	mov	r0, r4
 8010580:	f000 fa86 	bl	8010a90 <LL_FillBuffer>
}
 8010584:	bf00      	nop
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801058c:	2003150c 	.word	0x2003150c
 8010590:	20031448 	.word	0x20031448
 8010594:	20031510 	.word	0x20031510

08010598 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, volatile uint8_t *pbmp)
{
 8010598:	b590      	push	{r4, r7, lr}
 801059a:	b08b      	sub	sp, #44	@ 0x2c
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
  volatile uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80105a4:	2300      	movs	r3, #0
 80105a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80105a8:	2300      	movs	r3, #0
 80105aa:	623b      	str	r3, [r7, #32]
 80105ac:	2300      	movs	r3, #0
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	2300      	movs	r3, #0
 80105b2:	61bb      	str	r3, [r7, #24]
  volatile uint32_t Address;
  volatile uint32_t InputColorMode = 0;
 80105b4:	2300      	movs	r3, #0
 80105b6:	613b      	str	r3, [r7, #16]

  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (pbmp + 10);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	330a      	adds	r3, #10
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	b29b      	uxth	r3, r3
 80105c0:	627b      	str	r3, [r7, #36]	@ 0x24
  index |= (*(__IO uint16_t *) (pbmp + 12)) << 16;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	330c      	adds	r3, #12
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	041b      	lsls	r3, r3, #16
 80105cc:	461a      	mov	r2, r3
 80105ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d0:	4313      	orrs	r3, r2
 80105d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	3312      	adds	r3, #18
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	623b      	str	r3, [r7, #32]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	3314      	adds	r3, #20
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	041a      	lsls	r2, r3, #16
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	623b      	str	r3, [r7, #32]

  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	3316      	adds	r3, #22
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	61fb      	str	r3, [r7, #28]
  height |= (*(uint16_t *) (pbmp + 24)) << 16;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3318      	adds	r3, #24
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	041a      	lsls	r2, r3, #16
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	61fb      	str	r3, [r7, #28]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (pbmp + 28);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	331c      	adds	r3, #28
 8010604:	881b      	ldrh	r3, [r3, #0]
 8010606:	61bb      	str	r3, [r7, #24]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8010608:	4b2b      	ldr	r3, [pc, #172]	@ (80106b8 <BSP_LCD_DrawBitmap+0x120>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a2b      	ldr	r2, [pc, #172]	@ (80106bc <BSP_LCD_DrawBitmap+0x124>)
 801060e:	2134      	movs	r1, #52	@ 0x34
 8010610:	fb01 f303 	mul.w	r3, r1, r3
 8010614:	4413      	add	r3, r2
 8010616:	335c      	adds	r3, #92	@ 0x5c
 8010618:	681c      	ldr	r4, [r3, #0]
 801061a:	f7ff fd73 	bl	8010104 <BSP_LCD_GetXSize>
 801061e:	4602      	mov	r2, r0
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	fb03 f202 	mul.w	r2, r3, r2
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	4413      	add	r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4423      	add	r3, r4
 801062e:	617b      	str	r3, [r7, #20]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	08db      	lsrs	r3, r3, #3
 8010634:	2b04      	cmp	r3, #4
 8010636:	d102      	bne.n	801063e <BSP_LCD_DrawBitmap+0xa6>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8010638:	2300      	movs	r3, #0
 801063a:	613b      	str	r3, [r7, #16]
 801063c:	e008      	b.n	8010650 <BSP_LCD_DrawBitmap+0xb8>
  }
  else if ((bit_pixel/8) == 2)
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	08db      	lsrs	r3, r3, #3
 8010642:	2b02      	cmp	r3, #2
 8010644:	d102      	bne.n	801064c <BSP_LCD_DrawBitmap+0xb4>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8010646:	2302      	movs	r3, #2
 8010648:	613b      	str	r3, [r7, #16]
 801064a:	e001      	b.n	8010650 <BSP_LCD_DrawBitmap+0xb8>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 801064c:	2301      	movs	r3, #1
 801064e:	613b      	str	r3, [r7, #16]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	3b01      	subs	r3, #1
 8010654:	6a3a      	ldr	r2, [r7, #32]
 8010656:	fb02 f303 	mul.w	r3, r2, r3
 801065a:	69ba      	ldr	r2, [r7, #24]
 801065c:	08d2      	lsrs	r2, r2, #3
 801065e:	fb03 f202 	mul.w	r2, r3, r2
 8010662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010664:	4413      	add	r3, r2
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	4413      	add	r3, r2
 801066a:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 801066c:	2300      	movs	r3, #0
 801066e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010670:	e019      	b.n	80106a6 <BSP_LCD_DrawBitmap+0x10e>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	4619      	mov	r1, r3
 8010676:	6a3a      	ldr	r2, [r7, #32]
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fa40 	bl	8010b00 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8010680:	f7ff fd40 	bl	8010104 <BSP_LCD_GetXSize>
 8010684:	4603      	mov	r3, r0
 8010686:	009a      	lsls	r2, r3, #2
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	4413      	add	r3, r2
 801068c:	617b      	str	r3, [r7, #20]
    pbmp -= width*(bit_pixel/8);
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	08db      	lsrs	r3, r3, #3
 8010692:	6a3a      	ldr	r2, [r7, #32]
 8010694:	fb02 f303 	mul.w	r3, r2, r3
 8010698:	425b      	negs	r3, r3
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	4413      	add	r3, r2
 801069e:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a2:	3301      	adds	r3, #1
 80106a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80106a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d3e1      	bcc.n	8010672 <BSP_LCD_DrawBitmap+0xda>
  }
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	372c      	adds	r7, #44	@ 0x2c
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd90      	pop	{r4, r7, pc}
 80106b8:	2003150c 	.word	0x2003150c
 80106bc:	20031448 	.word	0x20031448

080106c0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	b086      	sub	sp, #24
 80106c6:	af02      	add	r7, sp, #8
 80106c8:	4604      	mov	r4, r0
 80106ca:	4608      	mov	r0, r1
 80106cc:	4611      	mov	r1, r2
 80106ce:	461a      	mov	r2, r3
 80106d0:	4623      	mov	r3, r4
 80106d2:	80fb      	strh	r3, [r7, #6]
 80106d4:	4603      	mov	r3, r0
 80106d6:	80bb      	strh	r3, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	807b      	strh	r3, [r7, #2]
 80106dc:	4613      	mov	r3, r2
 80106de:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80106e4:	4b20      	ldr	r3, [pc, #128]	@ (8010768 <BSP_LCD_FillRect+0xa8>)
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	4920      	ldr	r1, [pc, #128]	@ (801076c <BSP_LCD_FillRect+0xac>)
 80106ea:	4613      	mov	r3, r2
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	4413      	add	r3, r2
 80106f0:	009b      	lsls	r3, r3, #2
 80106f2:	440b      	add	r3, r1
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fd8c 	bl	8010214 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80106fc:	4b1a      	ldr	r3, [pc, #104]	@ (8010768 <BSP_LCD_FillRect+0xa8>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4a1b      	ldr	r2, [pc, #108]	@ (8010770 <BSP_LCD_FillRect+0xb0>)
 8010702:	2134      	movs	r1, #52	@ 0x34
 8010704:	fb01 f303 	mul.w	r3, r1, r3
 8010708:	4413      	add	r3, r2
 801070a:	335c      	adds	r3, #92	@ 0x5c
 801070c:	681c      	ldr	r4, [r3, #0]
 801070e:	f7ff fcf9 	bl	8010104 <BSP_LCD_GetXSize>
 8010712:	4602      	mov	r2, r0
 8010714:	88bb      	ldrh	r3, [r7, #4]
 8010716:	fb03 f202 	mul.w	r2, r3, r2
 801071a:	88fb      	ldrh	r3, [r7, #6]
 801071c:	4413      	add	r3, r2
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	4423      	add	r3, r4
 8010722:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8010724:	4b10      	ldr	r3, [pc, #64]	@ (8010768 <BSP_LCD_FillRect+0xa8>)
 8010726:	681c      	ldr	r4, [r3, #0]
 8010728:	68fd      	ldr	r5, [r7, #12]
 801072a:	887e      	ldrh	r6, [r7, #2]
 801072c:	f8b7 8000 	ldrh.w	r8, [r7]
 8010730:	f7ff fce8 	bl	8010104 <BSP_LCD_GetXSize>
 8010734:	4602      	mov	r2, r0
 8010736:	887b      	ldrh	r3, [r7, #2]
 8010738:	1ad1      	subs	r1, r2, r3
 801073a:	4b0b      	ldr	r3, [pc, #44]	@ (8010768 <BSP_LCD_FillRect+0xa8>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	480b      	ldr	r0, [pc, #44]	@ (801076c <BSP_LCD_FillRect+0xac>)
 8010740:	4613      	mov	r3, r2
 8010742:	005b      	lsls	r3, r3, #1
 8010744:	4413      	add	r3, r2
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4403      	add	r3, r0
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	9100      	str	r1, [sp, #0]
 8010750:	4643      	mov	r3, r8
 8010752:	4632      	mov	r2, r6
 8010754:	4629      	mov	r1, r5
 8010756:	4620      	mov	r0, r4
 8010758:	f000 f99a 	bl	8010a90 <LL_FillBuffer>
}
 801075c:	bf00      	nop
 801075e:	3710      	adds	r7, #16
 8010760:	46bd      	mov	sp, r7
 8010762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010766:	bf00      	nop
 8010768:	2003150c 	.word	0x2003150c
 801076c:	20031510 	.word	0x20031510
 8010770:	20031448 	.word	0x20031448

08010774 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af02      	add	r7, sp, #8
  }
  else
#endif /* USE_LCD_HDMI */    
  {  
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 801077a:	4b06      	ldr	r3, [pc, #24]	@ (8010794 <BSP_LCD_DisplayOn+0x20>)
 801077c:	6819      	ldr	r1, [r3, #0]
 801077e:	2300      	movs	r3, #0
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	2329      	movs	r3, #41	@ 0x29
 8010784:	2215      	movs	r2, #21
 8010786:	4804      	ldr	r0, [pc, #16]	@ (8010798 <BSP_LCD_DisplayOn+0x24>)
 8010788:	f7f7 fdb7 	bl	80082fa <HAL_DSI_ShortWrite>
                       hdsivideo_handle.VirtualChannelID,
                       DSI_DCS_SHORT_PKT_WRITE_P1,
                       OTM8009A_CMD_DISPON,
                       0x00);
  }  
}
 801078c:	bf00      	nop
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	20031384 	.word	0x20031384
 8010798:	200314f0 	.word	0x200314f0

0801079c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af02      	add	r7, sp, #8
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d80d      	bhi.n	80107c8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	461a      	mov	r2, r3
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	3301      	adds	r3, #1
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4613      	mov	r3, r2
 80107bc:	2215      	movs	r2, #21
 80107be:	2100      	movs	r1, #0
 80107c0:	480a      	ldr	r0, [pc, #40]	@ (80107ec <DSI_IO_WriteCmd+0x50>)
 80107c2:	f7f7 fd9a 	bl	80082fa <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80107c6:	e00d      	b.n	80107e4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80107c8:	683a      	ldr	r2, [r7, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4413      	add	r3, r2
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	9301      	str	r3, [sp, #4]
 80107d6:	9200      	str	r2, [sp, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2239      	movs	r2, #57	@ 0x39
 80107dc:	2100      	movs	r1, #0
 80107de:	4803      	ldr	r0, [pc, #12]	@ (80107ec <DSI_IO_WriteCmd+0x50>)
 80107e0:	f7f7 fdc6 	bl	8008370 <HAL_DSI_LongWrite>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	200314f0 	.word	0x200314f0

080107f0 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80107f4:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8010806:	4b32      	ldr	r3, [pc, #200]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801080a:	4a31      	ldr	r2, [pc, #196]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801080c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010810:	6453      	str	r3, [r2, #68]	@ 0x44
 8010812:	4b2f      	ldr	r3, [pc, #188]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010816:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 801081e:	4b2c      	ldr	r3, [pc, #176]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010822:	4a2b      	ldr	r2, [pc, #172]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010828:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 801082a:	4b29      	ldr	r3, [pc, #164]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801082c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801082e:	4a28      	ldr	r2, [pc, #160]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010830:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010834:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8010836:	4b26      	ldr	r3, [pc, #152]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801083a:	4a25      	ldr	r2, [pc, #148]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801083c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010840:	6313      	str	r3, [r2, #48]	@ 0x30
 8010842:	4b23      	ldr	r3, [pc, #140]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801084a:	60bb      	str	r3, [r7, #8]
 801084c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 801084e:	4b20      	ldr	r3, [pc, #128]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	4a1f      	ldr	r2, [pc, #124]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010858:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 801085a:	4b1d      	ldr	r3, [pc, #116]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801085c:	691b      	ldr	r3, [r3, #16]
 801085e:	4a1c      	ldr	r2, [pc, #112]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010860:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010864:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8010866:	4b1a      	ldr	r3, [pc, #104]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801086a:	4a19      	ldr	r2, [pc, #100]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801086c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010870:	6453      	str	r3, [r2, #68]	@ 0x44
 8010872:	4b17      	ldr	r3, [pc, #92]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801087a:	607b      	str	r3, [r7, #4]
 801087c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 801087e:	4b14      	ldr	r3, [pc, #80]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010882:	4a13      	ldr	r2, [pc, #76]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010888:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 801088a:	4b11      	ldr	r3, [pc, #68]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 801088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088e:	4a10      	ldr	r2, [pc, #64]	@ (80108d0 <BSP_LCD_MspInit+0xd0>)
 8010890:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8010894:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8010896:	2200      	movs	r2, #0
 8010898:	2103      	movs	r1, #3
 801089a:	2058      	movs	r0, #88	@ 0x58
 801089c:	f7f6 f8d1 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80108a0:	2058      	movs	r0, #88	@ 0x58
 80108a2:	f7f6 f8ea 	bl	8006a7a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80108a6:	2200      	movs	r2, #0
 80108a8:	2103      	movs	r1, #3
 80108aa:	205a      	movs	r0, #90	@ 0x5a
 80108ac:	f7f6 f8c9 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80108b0:	205a      	movs	r0, #90	@ 0x5a
 80108b2:	f7f6 f8e2 	bl	8006a7a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80108b6:	2200      	movs	r2, #0
 80108b8:	2103      	movs	r1, #3
 80108ba:	2062      	movs	r0, #98	@ 0x62
 80108bc:	f7f6 f8c1 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80108c0:	2062      	movs	r0, #98	@ 0x62
 80108c2:	f7f6 f8da 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 80108c6:	bf00      	nop
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	40023800 	.word	0x40023800

080108d4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80108d4:	b5b0      	push	{r4, r5, r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	603a      	str	r2, [r7, #0]
 80108de:	80fb      	strh	r3, [r7, #6]
 80108e0:	460b      	mov	r3, r1
 80108e2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80108e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010918 <BSP_LCD_DrawPixel+0x44>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a0c      	ldr	r2, [pc, #48]	@ (801091c <BSP_LCD_DrawPixel+0x48>)
 80108ea:	2134      	movs	r1, #52	@ 0x34
 80108ec:	fb01 f303 	mul.w	r3, r1, r3
 80108f0:	4413      	add	r3, r2
 80108f2:	335c      	adds	r3, #92	@ 0x5c
 80108f4:	681c      	ldr	r4, [r3, #0]
 80108f6:	88bd      	ldrh	r5, [r7, #4]
 80108f8:	f7ff fc04 	bl	8010104 <BSP_LCD_GetXSize>
 80108fc:	4603      	mov	r3, r0
 80108fe:	fb03 f205 	mul.w	r2, r3, r5
 8010902:	88fb      	ldrh	r3, [r7, #6]
 8010904:	4413      	add	r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	4423      	add	r3, r4
 801090a:	461a      	mov	r2, r3
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	6013      	str	r3, [r2, #0]
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bdb0      	pop	{r4, r5, r7, pc}
 8010918:	2003150c 	.word	0x2003150c
 801091c:	20031448 	.word	0x20031448

08010920 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b088      	sub	sp, #32
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	603a      	str	r2, [r7, #0]
 801092a:	80fb      	strh	r3, [r7, #6]
 801092c:	460b      	mov	r3, r1
 801092e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8010930:	2300      	movs	r3, #0
 8010932:	61fb      	str	r3, [r7, #28]
 8010934:	2300      	movs	r3, #0
 8010936:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8010938:	4b53      	ldr	r3, [pc, #332]	@ (8010a88 <DrawChar+0x168>)
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	4953      	ldr	r1, [pc, #332]	@ (8010a8c <DrawChar+0x16c>)
 801093e:	4613      	mov	r3, r2
 8010940:	005b      	lsls	r3, r3, #1
 8010942:	4413      	add	r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	440b      	add	r3, r1
 8010948:	3308      	adds	r3, #8
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	88db      	ldrh	r3, [r3, #6]
 801094e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8010950:	4b4d      	ldr	r3, [pc, #308]	@ (8010a88 <DrawChar+0x168>)
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	494d      	ldr	r1, [pc, #308]	@ (8010a8c <DrawChar+0x16c>)
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	440b      	add	r3, r1
 8010960:	3308      	adds	r3, #8
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	889b      	ldrh	r3, [r3, #4]
 8010966:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8010968:	8a3b      	ldrh	r3, [r7, #16]
 801096a:	3307      	adds	r3, #7
 801096c:	2b00      	cmp	r3, #0
 801096e:	da00      	bge.n	8010972 <DrawChar+0x52>
 8010970:	3307      	adds	r3, #7
 8010972:	10db      	asrs	r3, r3, #3
 8010974:	b2db      	uxtb	r3, r3
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	b2da      	uxtb	r2, r3
 801097a:	8a3b      	ldrh	r3, [r7, #16]
 801097c:	b2db      	uxtb	r3, r3
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8010982:	2300      	movs	r3, #0
 8010984:	61fb      	str	r3, [r7, #28]
 8010986:	e076      	b.n	8010a76 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8010988:	8a3b      	ldrh	r3, [r7, #16]
 801098a:	3307      	adds	r3, #7
 801098c:	2b00      	cmp	r3, #0
 801098e:	da00      	bge.n	8010992 <DrawChar+0x72>
 8010990:	3307      	adds	r3, #7
 8010992:	10db      	asrs	r3, r3, #3
 8010994:	461a      	mov	r2, r3
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	fb02 f303 	mul.w	r3, r2, r3
 801099c:	683a      	ldr	r2, [r7, #0]
 801099e:	4413      	add	r3, r2
 80109a0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80109a2:	8a3b      	ldrh	r3, [r7, #16]
 80109a4:	3307      	adds	r3, #7
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	da00      	bge.n	80109ac <DrawChar+0x8c>
 80109aa:	3307      	adds	r3, #7
 80109ac:	10db      	asrs	r3, r3, #3
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d002      	beq.n	80109b8 <DrawChar+0x98>
 80109b2:	2b02      	cmp	r3, #2
 80109b4:	d004      	beq.n	80109c0 <DrawChar+0xa0>
 80109b6:	e00c      	b.n	80109d2 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	617b      	str	r3, [r7, #20]
      break;
 80109be:	e016      	b.n	80109ee <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	021b      	lsls	r3, r3, #8
 80109c6:	68ba      	ldr	r2, [r7, #8]
 80109c8:	3201      	adds	r2, #1
 80109ca:	7812      	ldrb	r2, [r2, #0]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	617b      	str	r3, [r7, #20]
      break;
 80109d0:	e00d      	b.n	80109ee <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	041a      	lsls	r2, r3, #16
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	3301      	adds	r3, #1
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	021b      	lsls	r3, r3, #8
 80109e0:	4313      	orrs	r3, r2
 80109e2:	68ba      	ldr	r2, [r7, #8]
 80109e4:	3202      	adds	r2, #2
 80109e6:	7812      	ldrb	r2, [r2, #0]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	617b      	str	r3, [r7, #20]
      break;
 80109ec:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80109ee:	2300      	movs	r3, #0
 80109f0:	61bb      	str	r3, [r7, #24]
 80109f2:	e036      	b.n	8010a62 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80109f4:	8a3a      	ldrh	r2, [r7, #16]
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	1ad2      	subs	r2, r2, r3
 80109fa:	7bfb      	ldrb	r3, [r7, #15]
 80109fc:	4413      	add	r3, r2
 80109fe:	3b01      	subs	r3, #1
 8010a00:	2201      	movs	r2, #1
 8010a02:	fa02 f303 	lsl.w	r3, r2, r3
 8010a06:	461a      	mov	r2, r3
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d012      	beq.n	8010a36 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	88fb      	ldrh	r3, [r7, #6]
 8010a16:	4413      	add	r3, r2
 8010a18:	b298      	uxth	r0, r3
 8010a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010a88 <DrawChar+0x168>)
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	491b      	ldr	r1, [pc, #108]	@ (8010a8c <DrawChar+0x16c>)
 8010a20:	4613      	mov	r3, r2
 8010a22:	005b      	lsls	r3, r3, #1
 8010a24:	4413      	add	r3, r2
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	440b      	add	r3, r1
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	88bb      	ldrh	r3, [r7, #4]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	f7ff ff50 	bl	80108d4 <BSP_LCD_DrawPixel>
 8010a34:	e012      	b.n	8010a5c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	b298      	uxth	r0, r3
 8010a40:	4b11      	ldr	r3, [pc, #68]	@ (8010a88 <DrawChar+0x168>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	4911      	ldr	r1, [pc, #68]	@ (8010a8c <DrawChar+0x16c>)
 8010a46:	4613      	mov	r3, r2
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	4413      	add	r3, r2
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	440b      	add	r3, r1
 8010a50:	3304      	adds	r3, #4
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	88bb      	ldrh	r3, [r7, #4]
 8010a56:	4619      	mov	r1, r3
 8010a58:	f7ff ff3c 	bl	80108d4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	61bb      	str	r3, [r7, #24]
 8010a62:	8a3b      	ldrh	r3, [r7, #16]
 8010a64:	69ba      	ldr	r2, [r7, #24]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d3c4      	bcc.n	80109f4 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8010a6a:	88bb      	ldrh	r3, [r7, #4]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	3301      	adds	r3, #1
 8010a74:	61fb      	str	r3, [r7, #28]
 8010a76:	8a7b      	ldrh	r3, [r7, #18]
 8010a78:	69fa      	ldr	r2, [r7, #28]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d384      	bcc.n	8010988 <DrawChar+0x68>
  }
}
 8010a7e:	bf00      	nop
 8010a80:	bf00      	nop
 8010a82:	3720      	adds	r7, #32
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	2003150c 	.word	0x2003150c
 8010a8c:	20031510 	.word	0x20031510

08010a90 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8010a9e:	4b16      	ldr	r3, [pc, #88]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010aa0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8010aa4:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8010aa6:	4b14      	ldr	r3, [pc, #80]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8010aac:	4a12      	ldr	r2, [pc, #72]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8010ab2:	4b11      	ldr	r3, [pc, #68]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010ab4:	4a11      	ldr	r2, [pc, #68]	@ (8010afc <LL_FillBuffer+0x6c>)
 8010ab6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8010ab8:	480f      	ldr	r0, [pc, #60]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010aba:	f7f6 fd4f 	bl	800755c <HAL_DMA2D_Init>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d115      	bne.n	8010af0 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8010ac4:	68f9      	ldr	r1, [r7, #12]
 8010ac6:	480c      	ldr	r0, [pc, #48]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010ac8:	f7f6 fede 	bl	8007888 <HAL_DMA2D_ConfigLayer>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10e      	bne.n	8010af0 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8010ad2:	68ba      	ldr	r2, [r7, #8]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	69f9      	ldr	r1, [r7, #28]
 8010adc:	4806      	ldr	r0, [pc, #24]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010ade:	f7f6 fdbf 	bl	8007660 <HAL_DMA2D_Start>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d103      	bne.n	8010af0 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8010ae8:	210a      	movs	r1, #10
 8010aea:	4803      	ldr	r0, [pc, #12]	@ (8010af8 <LL_FillBuffer+0x68>)
 8010aec:	f7f6 fde3 	bl	80076b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8010af0:	bf00      	nop
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	200313f0 	.word	0x200313f0
 8010afc:	4002b000 	.word	0x4002b000

08010b00 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b086      	sub	sp, #24
 8010b04:	af02      	add	r7, sp, #8
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8010b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010b14:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8010b16:	4b1a      	ldr	r3, [pc, #104]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8010b1c:	4b18      	ldr	r3, [pc, #96]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010b22:	4b17      	ldr	r3, [pc, #92]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b24:	2200      	movs	r2, #0
 8010b26:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8010b28:	4b15      	ldr	r3, [pc, #84]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b2a:	22ff      	movs	r2, #255	@ 0xff
 8010b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8010b2e:	4a14      	ldr	r2, [pc, #80]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8010b34:	4b12      	ldr	r3, [pc, #72]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma2d_discovery.Instance = DMA2D;
 8010b3a:	4b11      	ldr	r3, [pc, #68]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b3c:	4a11      	ldr	r2, [pc, #68]	@ (8010b84 <LL_ConvertLineToARGB8888+0x84>)
 8010b3e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8010b40:	480f      	ldr	r0, [pc, #60]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b42:	f7f6 fd0b 	bl	800755c <HAL_DMA2D_Init>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d115      	bne.n	8010b78 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8010b4c:	2101      	movs	r1, #1
 8010b4e:	480c      	ldr	r0, [pc, #48]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b50:	f7f6 fe9a 	bl	8007888 <HAL_DMA2D_ConfigLayer>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d10e      	bne.n	8010b78 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8010b5a:	68f9      	ldr	r1, [r7, #12]
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	2301      	movs	r3, #1
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4806      	ldr	r0, [pc, #24]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b66:	f7f6 fd7b 	bl	8007660 <HAL_DMA2D_Start>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d103      	bne.n	8010b78 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8010b70:	210a      	movs	r1, #10
 8010b72:	4803      	ldr	r0, [pc, #12]	@ (8010b80 <LL_ConvertLineToARGB8888+0x80>)
 8010b74:	f7f6 fd9f 	bl	80076b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8010b78:	bf00      	nop
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	200313f0 	.word	0x200313f0
 8010b84:	4002b000 	.word	0x4002b000

08010b88 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8010b8e:	4b34      	ldr	r3, [pc, #208]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010b90:	4a34      	ldr	r2, [pc, #208]	@ (8010c64 <BSP_QSPI_Init+0xdc>)
 8010b92:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8010b94:	4832      	ldr	r0, [pc, #200]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010b96:	f7fa f87f 	bl	800ac98 <HAL_QSPI_DeInit>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d001      	beq.n	8010ba4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e058      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	482e      	ldr	r0, [pc, #184]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010ba8:	f000 f890 	bl	8010ccc <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8010bac:	4b2c      	ldr	r3, [pc, #176]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bae:	2201      	movs	r2, #1
 8010bb0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8010bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bb4:	2210      	movs	r2, #16
 8010bb6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8010bb8:	4b29      	ldr	r3, [pc, #164]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bba:	2210      	movs	r2, #16
 8010bbc:	60da      	str	r2, [r3, #12]
 8010bbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010bc2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	fa93 f3a3 	rbit	r3, r3
 8010bca:	603b      	str	r3, [r7, #0]
  return(result);
 8010bcc:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 8010bce:	fab3 f383 	clz	r3, r3
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	4b22      	ldr	r3, [pc, #136]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bd8:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8010bda:	4b21      	ldr	r3, [pc, #132]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bdc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8010be0:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8010be2:	4b1f      	ldr	r3, [pc, #124]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8010be8:	4b1d      	ldr	r3, [pc, #116]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8010bee:	4b1c      	ldr	r3, [pc, #112]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8010bf4:	481a      	ldr	r0, [pc, #104]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010bf6:	f7f9 ffc5 	bl	800ab84 <HAL_QSPI_Init>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <BSP_QSPI_Init+0x7c>
  {
    return QSPI_ERROR;
 8010c00:	2301      	movs	r3, #1
 8010c02:	e028      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8010c04:	4816      	ldr	r0, [pc, #88]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010c06:	f000 f923 	bl	8010e50 <QSPI_ResetMemory>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <BSP_QSPI_Init+0x8c>
  {
    return QSPI_NOT_SUPPORTED;
 8010c10:	2304      	movs	r3, #4
 8010c12:	e020      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8010c14:	4812      	ldr	r0, [pc, #72]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010c16:	f000 fb39 	bl	801128c <QSPI_EnterMemory_QPI>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_NOT_SUPPORTED;
 8010c20:	2304      	movs	r3, #4
 8010c22:	e018      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8010c24:	480e      	ldr	r0, [pc, #56]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010c26:	f000 fa3b 	bl	80110a0 <QSPI_EnterFourBytesAddress>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <BSP_QSPI_Init+0xac>
  {
    return QSPI_NOT_SUPPORTED;
 8010c30:	2304      	movs	r3, #4
 8010c32:	e010      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8010c34:	480a      	ldr	r0, [pc, #40]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010c36:	f000 fa6e 	bl	8011116 <QSPI_DummyCyclesCfg>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <BSP_QSPI_Init+0xbc>
  {
    return QSPI_NOT_SUPPORTED;
 8010c40:	2304      	movs	r3, #4
 8010c42:	e008      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8010c44:	4806      	ldr	r0, [pc, #24]	@ (8010c60 <BSP_QSPI_Init+0xd8>)
 8010c46:	f000 fb6d 	bl	8011324 <QSPI_OutDrvStrengthCfg>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <BSP_QSPI_Init+0xcc>
  {
    return QSPI_NOT_SUPPORTED;
 8010c50:	2304      	movs	r3, #4
 8010c52:	e000      	b.n	8010c56 <BSP_QSPI_Init+0xce>
  }
  
  return QSPI_OK;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	200315b8 	.word	0x200315b8
 8010c64:	a0001000 	.word	0xa0001000

08010c68 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b090      	sub	sp, #64	@ 0x40
 8010c6c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8010c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c72:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8010c74:	23ec      	movs	r3, #236	@ 0xec
 8010c76:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8010c78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8010c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8010c7e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8010c82:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010c84:	2300      	movs	r3, #0
 8010c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8010c88:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8010c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8010c8e:	230a      	movs	r3, #10
 8010c90:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010c92:	2300      	movs	r3, #0
 8010c94:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010c96:	2300      	movs	r3, #0
 8010c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8010ca6:	463a      	mov	r2, r7
 8010ca8:	f107 0308 	add.w	r3, r7, #8
 8010cac:	4619      	mov	r1, r3
 8010cae:	4806      	ldr	r0, [pc, #24]	@ (8010cc8 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8010cb0:	f7fa fa3a 	bl	800b128 <HAL_QSPI_MemoryMapped>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e000      	b.n	8010cc0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3740      	adds	r7, #64	@ 0x40
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	200315b8 	.word	0x200315b8

08010ccc <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08e      	sub	sp, #56	@ 0x38
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8010cd6:	4b59      	ldr	r3, [pc, #356]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cda:	4a58      	ldr	r2, [pc, #352]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010cdc:	f043 0302 	orr.w	r3, r3, #2
 8010ce0:	6393      	str	r3, [r2, #56]	@ 0x38
 8010ce2:	4b56      	ldr	r3, [pc, #344]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ce6:	f003 0302 	and.w	r3, r3, #2
 8010cea:	623b      	str	r3, [r7, #32]
 8010cec:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8010cee:	4b53      	ldr	r3, [pc, #332]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010cf0:	699b      	ldr	r3, [r3, #24]
 8010cf2:	4a52      	ldr	r2, [pc, #328]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010cf4:	f043 0302 	orr.w	r3, r3, #2
 8010cf8:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8010cfa:	4b50      	ldr	r3, [pc, #320]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010cfc:	699b      	ldr	r3, [r3, #24]
 8010cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d00:	f023 0302 	bic.w	r3, r3, #2
 8010d04:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8010d06:	4b4d      	ldr	r3, [pc, #308]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d0c:	f043 0302 	orr.w	r3, r3, #2
 8010d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d12:	4b4a      	ldr	r3, [pc, #296]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d16:	f003 0302 	and.w	r3, r3, #2
 8010d1a:	61fb      	str	r3, [r7, #28]
 8010d1c:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8010d1e:	4b47      	ldr	r3, [pc, #284]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d22:	4a46      	ldr	r2, [pc, #280]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d24:	f043 0302 	orr.w	r3, r3, #2
 8010d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d2a:	4b44      	ldr	r3, [pc, #272]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d2e:	f003 0302 	and.w	r3, r3, #2
 8010d32:	61bb      	str	r3, [r7, #24]
 8010d34:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8010d36:	4b41      	ldr	r3, [pc, #260]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d3a:	4a40      	ldr	r2, [pc, #256]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d3c:	f043 0304 	orr.w	r3, r3, #4
 8010d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d42:	4b3e      	ldr	r3, [pc, #248]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d46:	f003 0304 	and.w	r3, r3, #4
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8010d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d52:	4a3a      	ldr	r2, [pc, #232]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d54:	f043 0304 	orr.w	r3, r3, #4
 8010d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d5a:	4b38      	ldr	r3, [pc, #224]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d5e:	f003 0304 	and.w	r3, r3, #4
 8010d62:	613b      	str	r3, [r7, #16]
 8010d64:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8010d66:	4b35      	ldr	r3, [pc, #212]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d6a:	4a34      	ldr	r2, [pc, #208]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d6c:	f043 0310 	orr.w	r3, r3, #16
 8010d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d72:	4b32      	ldr	r3, [pc, #200]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d76:	f003 0310 	and.w	r3, r3, #16
 8010d7a:	60fb      	str	r3, [r7, #12]
 8010d7c:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8010d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d82:	4a2e      	ldr	r2, [pc, #184]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d84:	f043 0308 	orr.w	r3, r3, #8
 8010d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8010d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8010e3c <BSP_QSPI_MspInit+0x170>)
 8010d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d8e:	f003 0308 	and.w	r3, r3, #8
 8010d92:	60bb      	str	r3, [r7, #8]
 8010d94:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8010d96:	2340      	movs	r3, #64	@ 0x40
 8010d98:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8010d9a:	230a      	movs	r3, #10
 8010d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010d9e:	2302      	movs	r3, #2
 8010da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010da2:	2301      	movs	r3, #1
 8010da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8010da6:	2302      	movs	r3, #2
 8010da8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8010daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010dae:	4619      	mov	r1, r3
 8010db0:	4823      	ldr	r0, [pc, #140]	@ (8010e40 <BSP_QSPI_MspInit+0x174>)
 8010db2:	f7f7 fb67 	bl	8008484 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8010db6:	2304      	movs	r3, #4
 8010db8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8010dba:	2309      	movs	r3, #9
 8010dbc:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8010dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	481d      	ldr	r0, [pc, #116]	@ (8010e40 <BSP_QSPI_MspInit+0x174>)
 8010dca:	f7f7 fb5b 	bl	8008484 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8010dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8010dd4:	2309      	movs	r3, #9
 8010dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8010dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4819      	ldr	r0, [pc, #100]	@ (8010e44 <BSP_QSPI_MspInit+0x178>)
 8010de0:	f7f7 fb50 	bl	8008484 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8010de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010de8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8010dea:	2309      	movs	r3, #9
 8010dec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8010dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010df2:	4619      	mov	r1, r3
 8010df4:	4813      	ldr	r0, [pc, #76]	@ (8010e44 <BSP_QSPI_MspInit+0x178>)
 8010df6:	f7f7 fb45 	bl	8008484 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8010dfa:	2304      	movs	r3, #4
 8010dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8010dfe:	2309      	movs	r3, #9
 8010e00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8010e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e06:	4619      	mov	r1, r3
 8010e08:	480f      	ldr	r0, [pc, #60]	@ (8010e48 <BSP_QSPI_MspInit+0x17c>)
 8010e0a:	f7f7 fb3b 	bl	8008484 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8010e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e12:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8010e14:	2309      	movs	r3, #9
 8010e16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8010e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	480b      	ldr	r0, [pc, #44]	@ (8010e4c <BSP_QSPI_MspInit+0x180>)
 8010e20:	f7f7 fb30 	bl	8008484 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8010e24:	2200      	movs	r2, #0
 8010e26:	210f      	movs	r1, #15
 8010e28:	205c      	movs	r0, #92	@ 0x5c
 8010e2a:	f7f5 fe0a 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8010e2e:	205c      	movs	r0, #92	@ 0x5c
 8010e30:	f7f5 fe23 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 8010e34:	bf00      	nop
 8010e36:	3738      	adds	r7, #56	@ 0x38
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	40023800 	.word	0x40023800
 8010e40:	40020400 	.word	0x40020400
 8010e44:	40020800 	.word	0x40020800
 8010e48:	40021000 	.word	0x40021000
 8010e4c:	40020c00 	.word	0x40020c00

08010e50 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b098      	sub	sp, #96	@ 0x60
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8010e58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010e5c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8010e5e:	2366      	movs	r3, #102	@ 0x66
 8010e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010e62:	2300      	movs	r3, #0
 8010e64:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010e66:	2300      	movs	r3, #0
 8010e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010e72:	2300      	movs	r3, #0
 8010e74:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010e76:	2300      	movs	r3, #0
 8010e78:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e86:	4619      	mov	r1, r3
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7f9 ff49 	bl	800ad20 <HAL_QSPI_Command>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8010e94:	2301      	movs	r3, #1
 8010e96:	e0ff      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8010e98:	2399      	movs	r3, #153	@ 0x99
 8010e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010e9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7f9 ff3a 	bl	800ad20 <HAL_QSPI_Command>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e0f0      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010eba:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8010ebc:	2366      	movs	r3, #102	@ 0x66
 8010ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010ec0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ec8:	4619      	mov	r1, r3
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7f9 ff28 	bl	800ad20 <HAL_QSPI_Command>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e0de      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8010eda:	2399      	movs	r3, #153	@ 0x99
 8010edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f7f9 ff19 	bl	800ad20 <HAL_QSPI_Command>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d001      	beq.n	8010ef8 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e0cf      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8010ef8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010efc:	f7f5 fcb2 	bl	8006864 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8010f04:	2301      	movs	r3, #1
 8010f06:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8010f10:	2310      	movs	r3, #16
 8010f12:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8010f14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010f18:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8010f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8010f20:	2305      	movs	r3, #5
 8010f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8010f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010f28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010f2a:	f107 0210 	add.w	r2, r7, #16
 8010f2e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010f32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7fa f87d 	bl	800b036 <HAL_QSPI_AutoPolling>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	e0a8      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8010f4c:	2305      	movs	r3, #5
 8010f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010f50:	2300      	movs	r3, #0
 8010f52:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010f54:	2300      	movs	r3, #0
 8010f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8010f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 8010f62:	2301      	movs	r3, #1
 8010f64:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010f66:	2300      	movs	r3, #0
 8010f68:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7f9 fecf 	bl	800ad20 <HAL_QSPI_Command>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e085      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010f8c:	f107 030f 	add.w	r3, r7, #15
 8010f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f94:	4619      	mov	r1, r3
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7f9 ffb2 	bl	800af00 <HAL_QSPI_Receive>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d001      	beq.n	8010fa6 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e078      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8010fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010faa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8010fac:	2306      	movs	r3, #6
 8010fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010fcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7f9 fea2 	bl	800ad20 <HAL_QSPI_Command>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d001      	beq.n	8010fe6 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e058      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8010fea:	2302      	movs	r3, #2
 8010fec:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8010ff6:	2310      	movs	r3, #16
 8010ff8:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8010ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8011000:	2305      	movs	r3, #5
 8011002:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8011004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011008:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801100a:	f107 0210 	add.w	r2, r7, #16
 801100e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011012:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7fa f80d 	bl	800b036 <HAL_QSPI_AutoPolling>
 801101c:	4603      	mov	r3, r0
 801101e:	2b00      	cmp	r3, #0
 8011020:	d001      	beq.n	8011026 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8011022:	2301      	movs	r3, #1
 8011024:	e038      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8011026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801102a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 801102c:	2301      	movs	r3, #1
 801102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011030:	2300      	movs	r3, #0
 8011032:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8011034:	2300      	movs	r3, #0
 8011036:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8011038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801103c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 8011042:	2301      	movs	r3, #1
 8011044:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8011046:	2300      	movs	r3, #0
 8011048:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 801104a:	2300      	movs	r3, #0
 801104c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 801104e:	2300      	movs	r3, #0
 8011050:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011058:	b2db      	uxtb	r3, r3
 801105a:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801105c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011064:	4619      	mov	r1, r3
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f7f9 fe5a 	bl	800ad20 <HAL_QSPI_Command>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d001      	beq.n	8011076 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 8011072:	2301      	movs	r3, #1
 8011074:	e010      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011076:	f107 030f 	add.w	r3, r7, #15
 801107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7f9 fead 	bl	800ade0 <HAL_QSPI_Transmit>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d001      	beq.n	8011090 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 801108c:	2301      	movs	r3, #1
 801108e:	e003      	b.n	8011098 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8011090:	2028      	movs	r0, #40	@ 0x28
 8011092:	f7f5 fbe7 	bl	8006864 <HAL_Delay>

  return QSPI_OK;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3760      	adds	r7, #96	@ 0x60
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b090      	sub	sp, #64	@ 0x40
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80110a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80110ac:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80110ae:	23b7      	movs	r3, #183	@ 0xb7
 80110b0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80110b2:	2300      	movs	r3, #0
 80110b4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80110b6:	2300      	movs	r3, #0
 80110b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80110ba:	2300      	movs	r3, #0
 80110bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 80110be:	2300      	movs	r3, #0
 80110c0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80110c2:	2300      	movs	r3, #0
 80110c4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80110c6:	2300      	movs	r3, #0
 80110c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80110ca:	2300      	movs	r3, #0
 80110cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f000 f9e2 	bl	8011498 <QSPI_WriteEnable>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 80110da:	2301      	movs	r3, #1
 80110dc:	e017      	b.n	801110e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80110de:	f107 0308 	add.w	r3, r7, #8
 80110e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110e6:	4619      	mov	r1, r3
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7f9 fe19 	bl	800ad20 <HAL_QSPI_Command>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80110f4:	2301      	movs	r3, #1
 80110f6:	e00a      	b.n	801110e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80110f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f000 fa14 	bl	801152a <QSPI_AutoPollingMemReady>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 8011108:	2301      	movs	r3, #1
 801110a:	e000      	b.n	801110e <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3740      	adds	r7, #64	@ 0x40
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b094      	sub	sp, #80	@ 0x50
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801111e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011122:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8011124:	2305      	movs	r3, #5
 8011126:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011128:	2300      	movs	r3, #0
 801112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801112c:	2300      	movs	r3, #0
 801112e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8011130:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011134:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 801113a:	2301      	movs	r3, #1
 801113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801113e:	2300      	movs	r3, #0
 8011140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8011142:	2300      	movs	r3, #0
 8011144:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011146:	2300      	movs	r3, #0
 8011148:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801114a:	f107 0310 	add.w	r3, r7, #16
 801114e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7f9 fde3 	bl	800ad20 <HAL_QSPI_Command>
 801115a:	4603      	mov	r3, r0
 801115c:	2b00      	cmp	r3, #0
 801115e:	d001      	beq.n	8011164 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8011160:	2301      	movs	r3, #1
 8011162:	e08f      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011164:	f107 030c 	add.w	r3, r7, #12
 8011168:	f241 3288 	movw	r2, #5000	@ 0x1388
 801116c:	4619      	mov	r1, r3
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7f9 fec6 	bl	800af00 <HAL_QSPI_Receive>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 801117a:	2301      	movs	r3, #1
 801117c:	e082      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801117e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011182:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8011184:	2315      	movs	r3, #21
 8011186:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011188:	2300      	movs	r3, #0
 801118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801118c:	2300      	movs	r3, #0
 801118e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8011190:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011194:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 801119a:	2301      	movs	r3, #1
 801119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801119e:	2300      	movs	r3, #0
 80111a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80111a2:	2300      	movs	r3, #0
 80111a4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80111a6:	2300      	movs	r3, #0
 80111a8:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80111aa:	f107 0310 	add.w	r3, r7, #16
 80111ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111b2:	4619      	mov	r1, r3
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7f9 fdb3 	bl	800ad20 <HAL_QSPI_Command>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 80111c0:	2301      	movs	r3, #1
 80111c2:	e05f      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80111c4:	f107 030c 	add.w	r3, r7, #12
 80111c8:	3301      	adds	r3, #1
 80111ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111ce:	4619      	mov	r1, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7f9 fe95 	bl	800af00 <HAL_QSPI_Receive>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 80111dc:	2301      	movs	r3, #1
 80111de:	e051      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f959 	bl	8011498 <QSPI_WriteEnable>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 80111ec:	2301      	movs	r3, #1
 80111ee:	e049      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80111f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80111f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80111f6:	2301      	movs	r3, #1
 80111f8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80111fa:	2300      	movs	r3, #0
 80111fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80111fe:	2300      	movs	r3, #0
 8011200:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8011202:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011206:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 801120c:	2302      	movs	r3, #2
 801120e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8011210:	2300      	movs	r3, #0
 8011212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8011214:	2300      	movs	r3, #0
 8011216:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011218:	2300      	movs	r3, #0
 801121a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 801121c:	7b7b      	ldrb	r3, [r7, #13]
 801121e:	b25b      	sxtb	r3, r3
 8011220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011224:	b25a      	sxtb	r2, r3
 8011226:	23c0      	movs	r3, #192	@ 0xc0
 8011228:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801122a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801122c:	fa93 f3a3 	rbit	r3, r3
 8011230:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011234:	fab3 f383 	clz	r3, r3
 8011238:	2103      	movs	r1, #3
 801123a:	fa01 f303 	lsl.w	r3, r1, r3
 801123e:	b25b      	sxtb	r3, r3
 8011240:	4313      	orrs	r3, r2
 8011242:	b25b      	sxtb	r3, r3
 8011244:	b2db      	uxtb	r3, r3
 8011246:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011248:	f107 0310 	add.w	r3, r7, #16
 801124c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011250:	4619      	mov	r1, r3
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f7f9 fd64 	bl	800ad20 <HAL_QSPI_Command>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d001      	beq.n	8011262 <QSPI_DummyCyclesCfg+0x14c>
  {
    return QSPI_ERROR;
 801125e:	2301      	movs	r3, #1
 8011260:	e010      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011262:	f107 030c 	add.w	r3, r7, #12
 8011266:	f241 3288 	movw	r2, #5000	@ 0x1388
 801126a:	4619      	mov	r1, r3
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7f9 fdb7 	bl	800ade0 <HAL_QSPI_Transmit>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d001      	beq.n	801127c <QSPI_DummyCyclesCfg+0x166>
  {
    return QSPI_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	e003      	b.n	8011284 <QSPI_DummyCyclesCfg+0x16e>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 801127c:	2028      	movs	r0, #40	@ 0x28
 801127e:	f7f5 faf1 	bl	8006864 <HAL_Delay>
  
  return QSPI_OK;
 8011282:	2300      	movs	r3, #0
}
 8011284:	4618      	mov	r0, r3
 8011286:	3750      	adds	r7, #80	@ 0x50
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b096      	sub	sp, #88	@ 0x58
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 8011294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011298:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 801129a:	2335      	movs	r3, #53	@ 0x35
 801129c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801129e:	2300      	movs	r3, #0
 80112a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80112a2:	2300      	movs	r3, #0
 80112a4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80112a6:	2300      	movs	r3, #0
 80112a8:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 80112aa:	2300      	movs	r3, #0
 80112ac:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80112ae:	2300      	movs	r3, #0
 80112b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80112b2:	2300      	movs	r3, #0
 80112b4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80112b6:	2300      	movs	r3, #0
 80112b8:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80112ba:	f107 0320 	add.w	r3, r7, #32
 80112be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7f9 fd2b 	bl	800ad20 <HAL_QSPI_Command>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d001      	beq.n	80112d4 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 80112d0:	2301      	movs	r3, #1
 80112d2:	e023      	b.n	801131c <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 80112d4:	2340      	movs	r3, #64	@ 0x40
 80112d6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80112d8:	2341      	movs	r3, #65	@ 0x41
 80112da:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80112dc:	2300      	movs	r3, #0
 80112de:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80112e0:	2301      	movs	r3, #1
 80112e2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80112e4:	2310      	movs	r3, #16
 80112e6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80112e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80112ec:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80112ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80112f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80112f4:	2305      	movs	r3, #5
 80112f6:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80112f8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80112fc:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80112fe:	f107 0208 	add.w	r2, r7, #8
 8011302:	f107 0120 	add.w	r1, r7, #32
 8011306:	f241 3388 	movw	r3, #5000	@ 0x1388
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7f9 fe93 	bl	800b036 <HAL_QSPI_AutoPolling>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	e000      	b.n	801131c <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3758      	adds	r7, #88	@ 0x58
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b094      	sub	sp, #80	@ 0x50
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801132c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011330:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8011332:	2305      	movs	r3, #5
 8011334:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011336:	2300      	movs	r3, #0
 8011338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801133a:	2300      	movs	r3, #0
 801133c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801133e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011342:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8011344:	2300      	movs	r3, #0
 8011346:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 8011348:	2301      	movs	r3, #1
 801134a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801134c:	2300      	movs	r3, #0
 801134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8011350:	2300      	movs	r3, #0
 8011352:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011354:	2300      	movs	r3, #0
 8011356:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011358:	f107 0310 	add.w	r3, r7, #16
 801135c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f7f9 fcdc 	bl	800ad20 <HAL_QSPI_Command>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d001      	beq.n	8011372 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e08c      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011372:	f107 030c 	add.w	r3, r7, #12
 8011376:	f241 3288 	movw	r2, #5000	@ 0x1388
 801137a:	4619      	mov	r1, r3
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7f9 fdbf 	bl	800af00 <HAL_QSPI_Receive>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8011388:	2301      	movs	r3, #1
 801138a:	e07f      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801138c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011390:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8011392:	2315      	movs	r3, #21
 8011394:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011396:	2300      	movs	r3, #0
 8011398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801139a:	2300      	movs	r3, #0
 801139c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801139e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80113a2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 80113a4:	2300      	movs	r3, #0
 80113a6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80113ac:	2300      	movs	r3, #0
 80113ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80113b0:	2300      	movs	r3, #0
 80113b2:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80113b4:	2300      	movs	r3, #0
 80113b6:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80113b8:	f107 0310 	add.w	r3, r7, #16
 80113bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113c0:	4619      	mov	r1, r3
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7f9 fcac 	bl	800ad20 <HAL_QSPI_Command>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 80113ce:	2301      	movs	r3, #1
 80113d0:	e05c      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80113d2:	f107 030c 	add.w	r3, r7, #12
 80113d6:	3301      	adds	r3, #1
 80113d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7f9 fd8e 	bl	800af00 <HAL_QSPI_Receive>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 80113ea:	2301      	movs	r3, #1
 80113ec:	e04e      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80113ee:	4829      	ldr	r0, [pc, #164]	@ (8011494 <QSPI_OutDrvStrengthCfg+0x170>)
 80113f0:	f000 f852 	bl	8011498 <QSPI_WriteEnable>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80113fa:	2301      	movs	r3, #1
 80113fc:	e046      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80113fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011402:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8011404:	2301      	movs	r3, #1
 8011406:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8011408:	2300      	movs	r3, #0
 801140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801140c:	2300      	movs	r3, #0
 801140e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8011410:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011414:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 801141a:	2302      	movs	r3, #2
 801141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801141e:	2300      	movs	r3, #0
 8011420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8011422:	2300      	movs	r3, #0
 8011424:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011426:	2300      	movs	r3, #0
 8011428:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 801142a:	7b7b      	ldrb	r3, [r7, #13]
 801142c:	b25b      	sxtb	r3, r3
 801142e:	f023 0307 	bic.w	r3, r3, #7
 8011432:	b25a      	sxtb	r2, r3
 8011434:	2307      	movs	r3, #7
 8011436:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801143a:	fa93 f3a3 	rbit	r3, r3
 801143e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011442:	fab3 f383 	clz	r3, r3
 8011446:	2106      	movs	r1, #6
 8011448:	fa01 f303 	lsl.w	r3, r1, r3
 801144c:	b25b      	sxtb	r3, r3
 801144e:	4313      	orrs	r3, r2
 8011450:	b25b      	sxtb	r3, r3
 8011452:	b2db      	uxtb	r3, r3
 8011454:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011456:	f107 0310 	add.w	r3, r7, #16
 801145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801145e:	4619      	mov	r1, r3
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7f9 fc5d 	bl	800ad20 <HAL_QSPI_Command>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <QSPI_OutDrvStrengthCfg+0x14c>
  {
    return QSPI_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	e00d      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011470:	f107 030c 	add.w	r3, r7, #12
 8011474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011478:	4619      	mov	r1, r3
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7f9 fcb0 	bl	800ade0 <HAL_QSPI_Transmit>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <QSPI_OutDrvStrengthCfg+0x166>
  {
    return QSPI_ERROR;
 8011486:	2301      	movs	r3, #1
 8011488:	e000      	b.n	801148c <QSPI_OutDrvStrengthCfg+0x168>
  }

  return QSPI_OK;
 801148a:	2300      	movs	r3, #0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3750      	adds	r7, #80	@ 0x50
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	200315b8 	.word	0x200315b8

08011498 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b096      	sub	sp, #88	@ 0x58
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80114a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80114a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80114a6:	2306      	movs	r3, #6
 80114a8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80114aa:	2300      	movs	r3, #0
 80114ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80114ae:	2300      	movs	r3, #0
 80114b0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80114b2:	2300      	movs	r3, #0
 80114b4:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80114ba:	2300      	movs	r3, #0
 80114bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80114be:	2300      	movs	r3, #0
 80114c0:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80114c2:	2300      	movs	r3, #0
 80114c4:	657b      	str	r3, [r7, #84]	@ 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80114c6:	f107 0320 	add.w	r3, r7, #32
 80114ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f7f9 fc25 	bl	800ad20 <HAL_QSPI_Command>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d001      	beq.n	80114e0 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80114dc:	2301      	movs	r3, #1
 80114de:	e020      	b.n	8011522 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 80114e0:	2302      	movs	r3, #2
 80114e2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80114e4:	2302      	movs	r3, #2
 80114e6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80114e8:	2300      	movs	r3, #0
 80114ea:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80114ec:	2301      	movs	r3, #1
 80114ee:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80114f0:	2310      	movs	r3, #16
 80114f2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80114f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80114f8:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80114fa:	2305      	movs	r3, #5
 80114fc:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80114fe:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8011502:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8011504:	f107 0208 	add.w	r2, r7, #8
 8011508:	f107 0120 	add.w	r1, r7, #32
 801150c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7f9 fd90 	bl	800b036 <HAL_QSPI_AutoPolling>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	e000      	b.n	8011522 <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3758      	adds	r7, #88	@ 0x58
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b096      	sub	sp, #88	@ 0x58
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8011534:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8011538:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 801153a:	2305      	movs	r3, #5
 801153c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801153e:	2300      	movs	r3, #0
 8011540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8011542:	2300      	movs	r3, #0
 8011544:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8011546:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 801154a:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 801154c:	2300      	movs	r3, #0
 801154e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8011550:	2300      	movs	r3, #0
 8011552:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8011554:	2300      	movs	r3, #0
 8011556:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8011558:	2300      	movs	r3, #0
 801155a:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 801155c:	2300      	movs	r3, #0
 801155e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8011560:	2301      	movs	r3, #1
 8011562:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8011564:	2300      	movs	r3, #0
 8011566:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8011568:	2301      	movs	r3, #1
 801156a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 801156c:	2310      	movs	r3, #16
 801156e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8011570:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011574:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8011576:	f107 0208 	add.w	r2, r7, #8
 801157a:	f107 0120 	add.w	r1, r7, #32
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7f9 fd58 	bl	800b036 <HAL_QSPI_AutoPolling>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	d001      	beq.n	8011590 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	e000      	b.n	8011592 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3758      	adds	r7, #88	@ 0x58
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
	...

0801159c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80115a0:	4b29      	ldr	r3, [pc, #164]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115a2:	4a2a      	ldr	r2, [pc, #168]	@ (801164c <BSP_SDRAM_Init+0xb0>)
 80115a4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80115a6:	4b2a      	ldr	r3, [pc, #168]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115a8:	2202      	movs	r2, #2
 80115aa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80115ac:	4b28      	ldr	r3, [pc, #160]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115ae:	2207      	movs	r2, #7
 80115b0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80115b2:	4b27      	ldr	r3, [pc, #156]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115b4:	2204      	movs	r2, #4
 80115b6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80115b8:	4b25      	ldr	r3, [pc, #148]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115ba:	2207      	movs	r2, #7
 80115bc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80115be:	4b24      	ldr	r3, [pc, #144]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115c0:	2202      	movs	r2, #2
 80115c2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80115c4:	4b22      	ldr	r3, [pc, #136]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115c6:	2202      	movs	r2, #2
 80115c8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80115ca:	4b21      	ldr	r3, [pc, #132]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 80115cc:	2202      	movs	r2, #2
 80115ce:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80115d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80115d6:	4b1c      	ldr	r3, [pc, #112]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115d8:	2200      	movs	r2, #0
 80115da:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80115dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115de:	2204      	movs	r2, #4
 80115e0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80115e2:	4b19      	ldr	r3, [pc, #100]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115e4:	2220      	movs	r2, #32
 80115e6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80115e8:	4b17      	ldr	r3, [pc, #92]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115ea:	2240      	movs	r2, #64	@ 0x40
 80115ec:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80115ee:	4b16      	ldr	r3, [pc, #88]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115f0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80115f4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80115f6:	4b14      	ldr	r3, [pc, #80]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115f8:	2200      	movs	r2, #0
 80115fa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80115fc:	4b12      	ldr	r3, [pc, #72]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 80115fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011602:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8011604:	4b10      	ldr	r3, [pc, #64]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 8011606:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801160a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 801160c:	4b0e      	ldr	r3, [pc, #56]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 801160e:	2200      	movs	r2, #0
 8011610:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8011612:	2100      	movs	r1, #0
 8011614:	480c      	ldr	r0, [pc, #48]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 8011616:	f000 f87f 	bl	8011718 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 801161a:	490d      	ldr	r1, [pc, #52]	@ (8011650 <BSP_SDRAM_Init+0xb4>)
 801161c:	480a      	ldr	r0, [pc, #40]	@ (8011648 <BSP_SDRAM_Init+0xac>)
 801161e:	f7fc fbba 	bl	800dd96 <HAL_SDRAM_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d003      	beq.n	8011630 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8011628:	4b0a      	ldr	r3, [pc, #40]	@ (8011654 <BSP_SDRAM_Init+0xb8>)
 801162a:	2201      	movs	r2, #1
 801162c:	701a      	strb	r2, [r3, #0]
 801162e:	e002      	b.n	8011636 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8011630:	4b08      	ldr	r3, [pc, #32]	@ (8011654 <BSP_SDRAM_Init+0xb8>)
 8011632:	2200      	movs	r2, #0
 8011634:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8011636:	f240 6003 	movw	r0, #1539	@ 0x603
 801163a:	f000 f80d 	bl	8011658 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 801163e:	4b05      	ldr	r3, [pc, #20]	@ (8011654 <BSP_SDRAM_Init+0xb8>)
 8011640:	781b      	ldrb	r3, [r3, #0]
}
 8011642:	4618      	mov	r0, r3
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	20031604 	.word	0x20031604
 801164c:	a0000140 	.word	0xa0000140
 8011650:	20031638 	.word	0x20031638
 8011654:	20020678 	.word	0x20020678

08011658 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8011660:	2300      	movs	r3, #0
 8011662:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8011664:	4b2a      	ldr	r3, [pc, #168]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011666:	2201      	movs	r2, #1
 8011668:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801166a:	4b29      	ldr	r3, [pc, #164]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801166c:	2210      	movs	r2, #16
 801166e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8011670:	4b27      	ldr	r3, [pc, #156]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011672:	2201      	movs	r2, #1
 8011674:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011676:	4b26      	ldr	r3, [pc, #152]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011678:	2200      	movs	r2, #0
 801167a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 801167c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011680:	4923      	ldr	r1, [pc, #140]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011682:	4824      	ldr	r0, [pc, #144]	@ (8011714 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011684:	f7fc fbc5 	bl	800de12 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8011688:	2001      	movs	r0, #1
 801168a:	f7f5 f8eb 	bl	8006864 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 801168e:	4b20      	ldr	r3, [pc, #128]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011690:	2202      	movs	r2, #2
 8011692:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011694:	4b1e      	ldr	r3, [pc, #120]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011696:	2210      	movs	r2, #16
 8011698:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801169a:	4b1d      	ldr	r3, [pc, #116]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 801169c:	2201      	movs	r2, #1
 801169e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80116a0:	4b1b      	ldr	r3, [pc, #108]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80116a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116aa:	4919      	ldr	r1, [pc, #100]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116ac:	4819      	ldr	r0, [pc, #100]	@ (8011714 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80116ae:	f7fc fbb0 	bl	800de12 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80116b2:	4b17      	ldr	r3, [pc, #92]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116b4:	2203      	movs	r2, #3
 80116b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80116b8:	4b15      	ldr	r3, [pc, #84]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116ba:	2210      	movs	r2, #16
 80116bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80116be:	4b14      	ldr	r3, [pc, #80]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116c0:	2208      	movs	r2, #8
 80116c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80116c4:	4b12      	ldr	r3, [pc, #72]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116c6:	2200      	movs	r2, #0
 80116c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80116ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116ce:	4910      	ldr	r1, [pc, #64]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116d0:	4810      	ldr	r0, [pc, #64]	@ (8011714 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80116d2:	f7fc fb9e 	bl	800de12 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80116d6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80116da:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80116dc:	4b0c      	ldr	r3, [pc, #48]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116de:	2204      	movs	r2, #4
 80116e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80116e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116e4:	2210      	movs	r2, #16
 80116e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80116e8:	4b09      	ldr	r3, [pc, #36]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116ea:	2201      	movs	r2, #1
 80116ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	4a07      	ldr	r2, [pc, #28]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116f2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80116f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116f8:	4905      	ldr	r1, [pc, #20]	@ (8011710 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80116fa:	4806      	ldr	r0, [pc, #24]	@ (8011714 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80116fc:	f7fc fb89 	bl	800de12 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	4804      	ldr	r0, [pc, #16]	@ (8011714 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011704:	f7fc fbb0 	bl	800de68 <HAL_SDRAM_ProgramRefreshRate>
}
 8011708:	bf00      	nop
 801170a:	3710      	adds	r7, #16
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	20031654 	.word	0x20031654
 8011714:	20031604 	.word	0x20031604

08011718 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8011718:	b580      	push	{r7, lr}
 801171a:	b090      	sub	sp, #64	@ 0x40
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8011722:	4b71      	ldr	r3, [pc, #452]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011726:	4a70      	ldr	r2, [pc, #448]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011728:	f043 0301 	orr.w	r3, r3, #1
 801172c:	6393      	str	r3, [r2, #56]	@ 0x38
 801172e:	4b6e      	ldr	r3, [pc, #440]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011732:	f003 0301 	and.w	r3, r3, #1
 8011736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 801173a:	4b6b      	ldr	r3, [pc, #428]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 801173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801173e:	4a6a      	ldr	r2, [pc, #424]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8011744:	6313      	str	r3, [r2, #48]	@ 0x30
 8011746:	4b68      	ldr	r3, [pc, #416]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011752:	4b65      	ldr	r3, [pc, #404]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011756:	4a64      	ldr	r2, [pc, #400]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011758:	f043 0308 	orr.w	r3, r3, #8
 801175c:	6313      	str	r3, [r2, #48]	@ 0x30
 801175e:	4b62      	ldr	r3, [pc, #392]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011762:	f003 0308 	and.w	r3, r3, #8
 8011766:	623b      	str	r3, [r7, #32]
 8011768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801176a:	4b5f      	ldr	r3, [pc, #380]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 801176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801176e:	4a5e      	ldr	r2, [pc, #376]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011770:	f043 0310 	orr.w	r3, r3, #16
 8011774:	6313      	str	r3, [r2, #48]	@ 0x30
 8011776:	4b5c      	ldr	r3, [pc, #368]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801177a:	f003 0310 	and.w	r3, r3, #16
 801177e:	61fb      	str	r3, [r7, #28]
 8011780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8011782:	4b59      	ldr	r3, [pc, #356]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011786:	4a58      	ldr	r2, [pc, #352]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011788:	f043 0320 	orr.w	r3, r3, #32
 801178c:	6313      	str	r3, [r2, #48]	@ 0x30
 801178e:	4b56      	ldr	r3, [pc, #344]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 8011790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011792:	f003 0320 	and.w	r3, r3, #32
 8011796:	61bb      	str	r3, [r7, #24]
 8011798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801179a:	4b53      	ldr	r3, [pc, #332]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 801179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801179e:	4a52      	ldr	r2, [pc, #328]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80117a6:	4b50      	ldr	r3, [pc, #320]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117ae:	617b      	str	r3, [r7, #20]
 80117b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80117b2:	4b4d      	ldr	r3, [pc, #308]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117b6:	4a4c      	ldr	r2, [pc, #304]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80117be:	4b4a      	ldr	r3, [pc, #296]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117c6:	613b      	str	r3, [r7, #16]
 80117c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80117ca:	4b47      	ldr	r3, [pc, #284]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117ce:	4a46      	ldr	r2, [pc, #280]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80117d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80117d6:	4b44      	ldr	r3, [pc, #272]	@ (80118e8 <BSP_SDRAM_MspInit+0x1d0>)
 80117d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80117e2:	2302      	movs	r3, #2
 80117e4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80117e6:	2301      	movs	r3, #1
 80117e8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80117ea:	2303      	movs	r3, #3
 80117ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80117ee:	230c      	movs	r3, #12
 80117f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80117f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80117f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80117f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80117fc:	4619      	mov	r1, r3
 80117fe:	483b      	ldr	r0, [pc, #236]	@ (80118ec <BSP_SDRAM_MspInit+0x1d4>)
 8011800:	f7f6 fe40 	bl	8008484 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8011804:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8011808:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801180a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801180e:	4619      	mov	r1, r3
 8011810:	4837      	ldr	r0, [pc, #220]	@ (80118f0 <BSP_SDRAM_MspInit+0x1d8>)
 8011812:	f7f6 fe37 	bl	8008484 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8011816:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801181c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011820:	4619      	mov	r1, r3
 8011822:	4834      	ldr	r0, [pc, #208]	@ (80118f4 <BSP_SDRAM_MspInit+0x1dc>)
 8011824:	f7f6 fe2e 	bl	8008484 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8011828:	f248 1337 	movw	r3, #33079	@ 0x8137
 801182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801182e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011832:	4619      	mov	r1, r3
 8011834:	4830      	ldr	r0, [pc, #192]	@ (80118f8 <BSP_SDRAM_MspInit+0x1e0>)
 8011836:	f7f6 fe25 	bl	8008484 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 801183a:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 801183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8011840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011844:	4619      	mov	r1, r3
 8011846:	482d      	ldr	r0, [pc, #180]	@ (80118fc <BSP_SDRAM_MspInit+0x1e4>)
 8011848:	f7f6 fe1c 	bl	8008484 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 801184c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8011850:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8011852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011856:	4619      	mov	r1, r3
 8011858:	4829      	ldr	r0, [pc, #164]	@ (8011900 <BSP_SDRAM_MspInit+0x1e8>)
 801185a:	f7f6 fe13 	bl	8008484 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 801185e:	4b29      	ldr	r3, [pc, #164]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 8011860:	2200      	movs	r2, #0
 8011862:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8011864:	4b27      	ldr	r3, [pc, #156]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 8011866:	2280      	movs	r2, #128	@ 0x80
 8011868:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 801186a:	4b26      	ldr	r3, [pc, #152]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 801186c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011870:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8011872:	4b24      	ldr	r3, [pc, #144]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 8011874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011878:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801187a:	4b22      	ldr	r3, [pc, #136]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 801187c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011880:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8011882:	4b20      	ldr	r3, [pc, #128]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 8011884:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011888:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 801188a:	4b1e      	ldr	r3, [pc, #120]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 801188c:	2200      	movs	r2, #0
 801188e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8011890:	4b1c      	ldr	r3, [pc, #112]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 8011892:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8011896:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8011898:	4b1a      	ldr	r3, [pc, #104]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 801189a:	2200      	movs	r2, #0
 801189c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 801189e:	4b19      	ldr	r3, [pc, #100]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118a0:	2203      	movs	r2, #3
 80118a2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80118a4:	4b17      	ldr	r3, [pc, #92]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118a6:	2200      	movs	r2, #0
 80118a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80118aa:	4b16      	ldr	r3, [pc, #88]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80118b0:	4b14      	ldr	r3, [pc, #80]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118b2:	4a15      	ldr	r2, [pc, #84]	@ (8011908 <BSP_SDRAM_MspInit+0x1f0>)
 80118b4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4a12      	ldr	r2, [pc, #72]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80118bc:	4a11      	ldr	r2, [pc, #68]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80118c2:	4810      	ldr	r0, [pc, #64]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118c4:	f7f5 fb30 	bl	8006f28 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80118c8:	480e      	ldr	r0, [pc, #56]	@ (8011904 <BSP_SDRAM_MspInit+0x1ec>)
 80118ca:	f7f5 fa7f 	bl	8006dcc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80118ce:	2200      	movs	r2, #0
 80118d0:	210f      	movs	r1, #15
 80118d2:	2038      	movs	r0, #56	@ 0x38
 80118d4:	f7f5 f8b5 	bl	8006a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80118d8:	2038      	movs	r0, #56	@ 0x38
 80118da:	f7f5 f8ce 	bl	8006a7a <HAL_NVIC_EnableIRQ>
}
 80118de:	bf00      	nop
 80118e0:	3740      	adds	r7, #64	@ 0x40
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	40023800 	.word	0x40023800
 80118ec:	40020c00 	.word	0x40020c00
 80118f0:	40021000 	.word	0x40021000
 80118f4:	40021400 	.word	0x40021400
 80118f8:	40021800 	.word	0x40021800
 80118fc:	40021c00 	.word	0x40021c00
 8011900:	40022000 	.word	0x40022000
 8011904:	20031664 	.word	0x20031664
 8011908:	40026410 	.word	0x40026410

0801190c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	4603      	mov	r3, r0
 8011914:	460a      	mov	r2, r1
 8011916:	80fb      	strh	r3, [r7, #6]
 8011918:	4613      	mov	r3, r2
 801191a:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8011920:	2300      	movs	r3, #0
 8011922:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8011924:	4b24      	ldr	r3, [pc, #144]	@ (80119b8 <BSP_TS_Init+0xac>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a24      	ldr	r2, [pc, #144]	@ (80119bc <BSP_TS_Init+0xb0>)
 801192a:	7812      	ldrb	r2, [r2, #0]
 801192c:	4610      	mov	r0, r2
 801192e:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8011930:	4b21      	ldr	r3, [pc, #132]	@ (80119b8 <BSP_TS_Init+0xac>)
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	2054      	movs	r0, #84	@ 0x54
 8011936:	4798      	blx	r3
 8011938:	4603      	mov	r3, r0
 801193a:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 801193c:	7b7b      	ldrb	r3, [r7, #13]
 801193e:	2b11      	cmp	r3, #17
 8011940:	d009      	beq.n	8011956 <BSP_TS_Init+0x4a>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8011942:	4b1d      	ldr	r3, [pc, #116]	@ (80119b8 <BSP_TS_Init+0xac>)
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	2070      	movs	r0, #112	@ 0x70
 8011948:	4798      	blx	r3
 801194a:	4603      	mov	r3, r0
 801194c:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 801194e:	4b1b      	ldr	r3, [pc, #108]	@ (80119bc <BSP_TS_Init+0xb0>)
 8011950:	2270      	movs	r2, #112	@ 0x70
 8011952:	701a      	strb	r2, [r3, #0]
 8011954:	e002      	b.n	801195c <BSP_TS_Init+0x50>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8011956:	4b19      	ldr	r3, [pc, #100]	@ (80119bc <BSP_TS_Init+0xb0>)
 8011958:	2254      	movs	r2, #84	@ 0x54
 801195a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 801195c:	7b7b      	ldrb	r3, [r7, #13]
 801195e:	2b11      	cmp	r3, #17
 8011960:	d002      	beq.n	8011968 <BSP_TS_Init+0x5c>
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	2b11      	cmp	r3, #17
 8011966:	d11f      	bne.n	80119a8 <BSP_TS_Init+0x9c>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8011968:	4b15      	ldr	r3, [pc, #84]	@ (80119c0 <BSP_TS_Init+0xb4>)
 801196a:	4a13      	ldr	r2, [pc, #76]	@ (80119b8 <BSP_TS_Init+0xac>)
 801196c:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 801196e:	88fa      	ldrh	r2, [r7, #6]
 8011970:	88bb      	ldrh	r3, [r7, #4]
 8011972:	429a      	cmp	r2, r3
 8011974:	d203      	bcs.n	801197e <BSP_TS_Init+0x72>
    {
      ts_orientation = TS_SWAP_NONE;                
 8011976:	4b13      	ldr	r3, [pc, #76]	@ (80119c4 <BSP_TS_Init+0xb8>)
 8011978:	2201      	movs	r2, #1
 801197a:	701a      	strb	r2, [r3, #0]
 801197c:	e002      	b.n	8011984 <BSP_TS_Init+0x78>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 801197e:	4b11      	ldr	r3, [pc, #68]	@ (80119c4 <BSP_TS_Init+0xb8>)
 8011980:	220c      	movs	r2, #12
 8011982:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8011984:	7bfb      	ldrb	r3, [r7, #15]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d110      	bne.n	80119ac <BSP_TS_Init+0xa0>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 801198a:	4b0d      	ldr	r3, [pc, #52]	@ (80119c0 <BSP_TS_Init+0xb4>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	4a0a      	ldr	r2, [pc, #40]	@ (80119bc <BSP_TS_Init+0xb0>)
 8011992:	7812      	ldrb	r2, [r2, #0]
 8011994:	4610      	mov	r0, r2
 8011996:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8011998:	4b09      	ldr	r3, [pc, #36]	@ (80119c0 <BSP_TS_Init+0xb4>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	4a07      	ldr	r2, [pc, #28]	@ (80119bc <BSP_TS_Init+0xb0>)
 80119a0:	7812      	ldrb	r2, [r2, #0]
 80119a2:	4610      	mov	r0, r2
 80119a4:	4798      	blx	r3
    if(ts_status == TS_OK)
 80119a6:	e001      	b.n	80119ac <BSP_TS_Init+0xa0>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80119a8:	2303      	movs	r3, #3
 80119aa:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	20020600 	.word	0x20020600
 80119bc:	20031729 	.word	0x20031729
 80119c0:	20031724 	.word	0x20031724
 80119c4:	20031728 	.word	0x20031728

080119c8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80119c8:	b590      	push	{r4, r7, lr}
 80119ca:	b089      	sub	sp, #36	@ 0x24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80119d0:	2300      	movs	r3, #0
 80119d2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80119d4:	4b81      	ldr	r3, [pc, #516]	@ (8011bdc <BSP_TS_GetState+0x214>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	4a81      	ldr	r2, [pc, #516]	@ (8011be0 <BSP_TS_GetState+0x218>)
 80119dc:	7812      	ldrb	r2, [r2, #0]
 80119de:	4610      	mov	r0, r2
 80119e0:	4798      	blx	r3
 80119e2:	4603      	mov	r3, r0
 80119e4:	461a      	mov	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 80ef 	beq.w	8011bd2 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80119f4:	2300      	movs	r3, #0
 80119f6:	61fb      	str	r3, [r7, #28]
 80119f8:	e0e4      	b.n	8011bc4 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80119fa:	4b78      	ldr	r3, [pc, #480]	@ (8011bdc <BSP_TS_GetState+0x214>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	695b      	ldr	r3, [r3, #20]
 8011a00:	4a77      	ldr	r2, [pc, #476]	@ (8011be0 <BSP_TS_GetState+0x218>)
 8011a02:	7812      	ldrb	r2, [r2, #0]
 8011a04:	4614      	mov	r4, r2
 8011a06:	f107 0110 	add.w	r1, r7, #16
 8011a0a:	69fa      	ldr	r2, [r7, #28]
 8011a0c:	0052      	lsls	r2, r2, #1
 8011a0e:	1888      	adds	r0, r1, r2
 8011a10:	f107 010c 	add.w	r1, r7, #12
 8011a14:	69fa      	ldr	r2, [r7, #28]
 8011a16:	0052      	lsls	r2, r2, #1
 8011a18:	440a      	add	r2, r1
 8011a1a:	4601      	mov	r1, r0
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8011a20:	4b70      	ldr	r3, [pc, #448]	@ (8011be4 <BSP_TS_GetState+0x21c>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f003 0308 	and.w	r3, r3, #8
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d019      	beq.n	8011a60 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	005b      	lsls	r3, r3, #1
 8011a30:	3320      	adds	r3, #32
 8011a32:	443b      	add	r3, r7
 8011a34:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8011a38:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	005b      	lsls	r3, r3, #1
 8011a3e:	3320      	adds	r3, #32
 8011a40:	443b      	add	r3, r7
 8011a42:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	3320      	adds	r3, #32
 8011a4c:	443b      	add	r3, r7
 8011a4e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	3320      	adds	r3, #32
 8011a58:	443b      	add	r3, r7
 8011a5a:	8b3a      	ldrh	r2, [r7, #24]
 8011a5c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8011a60:	4b60      	ldr	r3, [pc, #384]	@ (8011be4 <BSP_TS_GetState+0x21c>)
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	f003 0302 	and.w	r3, r3, #2
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00f      	beq.n	8011a8c <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	005b      	lsls	r3, r3, #1
 8011a70:	3320      	adds	r3, #32
 8011a72:	443b      	add	r3, r7
 8011a74:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8011a78:	f240 331f 	movw	r3, #799	@ 0x31f
 8011a7c:	1a9b      	subs	r3, r3, r2
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	3320      	adds	r3, #32
 8011a86:	443b      	add	r3, r7
 8011a88:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8011a8c:	4b55      	ldr	r3, [pc, #340]	@ (8011be4 <BSP_TS_GetState+0x21c>)
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	f003 0304 	and.w	r3, r3, #4
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d00f      	beq.n	8011ab8 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	005b      	lsls	r3, r3, #1
 8011a9c:	3320      	adds	r3, #32
 8011a9e:	443b      	add	r3, r7
 8011aa0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8011aa4:	f240 13df 	movw	r3, #479	@ 0x1df
 8011aa8:	1a9b      	subs	r3, r3, r2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	3320      	adds	r3, #32
 8011ab2:	443b      	add	r3, r7
 8011ab4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	3320      	adds	r3, #32
 8011abe:	443b      	add	r3, r7
 8011ac0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4a48      	ldr	r2, [pc, #288]	@ (8011be8 <BSP_TS_GetState+0x220>)
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ace:	4299      	cmp	r1, r3
 8011ad0:	d90d      	bls.n	8011aee <BSP_TS_GetState+0x126>
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	3320      	adds	r3, #32
 8011ad8:	443b      	add	r3, r7
 8011ada:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8011ade:	4942      	ldr	r1, [pc, #264]	@ (8011be8 <BSP_TS_GetState+0x220>)
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	e00c      	b.n	8011b08 <BSP_TS_GetState+0x140>
 8011aee:	4a3e      	ldr	r2, [pc, #248]	@ (8011be8 <BSP_TS_GetState+0x220>)
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	3320      	adds	r3, #32
 8011afe:	443b      	add	r3, r7
 8011b00:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	005b      	lsls	r3, r3, #1
 8011b0e:	3320      	adds	r3, #32
 8011b10:	443b      	add	r3, r7
 8011b12:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8011b16:	4619      	mov	r1, r3
 8011b18:	4a34      	ldr	r2, [pc, #208]	@ (8011bec <BSP_TS_GetState+0x224>)
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b20:	4299      	cmp	r1, r3
 8011b22:	d90d      	bls.n	8011b40 <BSP_TS_GetState+0x178>
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	005b      	lsls	r3, r3, #1
 8011b28:	3320      	adds	r3, #32
 8011b2a:	443b      	add	r3, r7
 8011b2c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8011b30:	492e      	ldr	r1, [pc, #184]	@ (8011bec <BSP_TS_GetState+0x224>)
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	e00c      	b.n	8011b5a <BSP_TS_GetState+0x192>
 8011b40:	4a2a      	ldr	r2, [pc, #168]	@ (8011bec <BSP_TS_GetState+0x224>)
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	3320      	adds	r3, #32
 8011b50:	443b      	add	r3, r7
 8011b52:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8011b5c:	8afa      	ldrh	r2, [r7, #22]
 8011b5e:	8abb      	ldrh	r3, [r7, #20]
 8011b60:	4413      	add	r3, r2
 8011b62:	2b05      	cmp	r3, #5
 8011b64:	dd15      	ble.n	8011b92 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	3320      	adds	r3, #32
 8011b6c:	443b      	add	r3, r7
 8011b6e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8011b72:	4619      	mov	r1, r3
 8011b74:	4a1c      	ldr	r2, [pc, #112]	@ (8011be8 <BSP_TS_GetState+0x220>)
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	3320      	adds	r3, #32
 8011b82:	443b      	add	r3, r7
 8011b84:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8011b88:	4619      	mov	r1, r3
 8011b8a:	4a18      	ldr	r2, [pc, #96]	@ (8011bec <BSP_TS_GetState+0x224>)
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8011b92:	4a15      	ldr	r2, [pc, #84]	@ (8011be8 <BSP_TS_GetState+0x220>)
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b9a:	b299      	uxth	r1, r3
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	005b      	lsls	r3, r3, #1
 8011ba2:	4413      	add	r3, r2
 8011ba4:	460a      	mov	r2, r1
 8011ba6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8011ba8:	4a10      	ldr	r2, [pc, #64]	@ (8011bec <BSP_TS_GetState+0x224>)
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bb0:	b299      	uxth	r1, r3
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	4413      	add	r3, r2
 8011bba:	460a      	mov	r2, r1
 8011bbc:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	61fb      	str	r3, [r7, #28]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	f4ff af14 	bcc.w	80119fa <BSP_TS_GetState+0x32>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8011bd2:	7efb      	ldrb	r3, [r7, #27]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3724      	adds	r7, #36	@ 0x24
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd90      	pop	{r4, r7, pc}
 8011bdc:	20031724 	.word	0x20031724
 8011be0:	20031729 	.word	0x20031729
 8011be4:	20031728 	.word	0x20031728
 8011be8:	2003172c 	.word	0x2003172c
 8011bec:	20031734 	.word	0x20031734

08011bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011bf0:	f8df d064 	ldr.w	sp, [pc, #100]	@ 8011c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011bf6:	e003      	b.n	8011c00 <LoopCopyDataInit>

08011bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011bf8:	4b18      	ldr	r3, [pc, #96]	@ (8011c5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011bfe:	3104      	adds	r1, #4

08011c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011c00:	4817      	ldr	r0, [pc, #92]	@ (8011c60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011c02:	4b18      	ldr	r3, [pc, #96]	@ (8011c64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011c08:	d3f6      	bcc.n	8011bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8011c0a:	4a17      	ldr	r2, [pc, #92]	@ (8011c68 <LoopFillZerobss+0x24>)
  movs  r1, #0
 8011c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInitDTCM
 8011c0e:	e003      	b.n	8011c18 <LoopCopyDataInitDTCM>

08011c10 <CopyDataInitDTCM>:



CopyDataInitDTCM:
  ldr  r3, =_sidatadtcm
 8011c10:	4b16      	ldr	r3, [pc, #88]	@ (8011c6c <LoopFillZerobss+0x28>)
  ldr  r3, [r3, r1]
 8011c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011c16:	3104      	adds	r1, #4

08011c18 <LoopCopyDataInitDTCM>:

LoopCopyDataInitDTCM:
  ldr  r0, =_sdatadtcm
 8011c18:	4815      	ldr	r0, [pc, #84]	@ (8011c70 <LoopFillZerobss+0x2c>)
  ldr  r3, =_edatadtcm
 8011c1a:	4b16      	ldr	r3, [pc, #88]	@ (8011c74 <LoopFillZerobss+0x30>)
  adds  r2, r0, r1
 8011c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInitDTCM
 8011c20:	d3f6      	bcc.n	8011c10 <CopyDataInitDTCM>
  ldr  r2, =_sbss
 8011c22:	4a11      	ldr	r2, [pc, #68]	@ (8011c68 <LoopFillZerobss+0x24>)
  movs  r1, #0
 8011c24:	2100      	movs	r1, #0
  b  LoopCopyDataInitITCM
 8011c26:	e003      	b.n	8011c30 <LoopCopyDataInitITCM>

08011c28 <CopyDataInitITCM>:




CopyDataInitITCM:
  ldr  r3, =_sidataitcm
 8011c28:	4b13      	ldr	r3, [pc, #76]	@ (8011c78 <LoopFillZerobss+0x34>)
  ldr  r3, [r3, r1]
 8011c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011c2e:	3104      	adds	r1, #4

08011c30 <LoopCopyDataInitITCM>:

LoopCopyDataInitITCM:
  ldr  r0, =_sdataitcm
 8011c30:	4812      	ldr	r0, [pc, #72]	@ (8011c7c <LoopFillZerobss+0x38>)
  ldr  r3, =_edataitcm
 8011c32:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <LoopFillZerobss+0x3c>)
  adds  r2, r0, r1
 8011c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011c36:	429a      	cmp	r2, r3
  bcc  CopyDataInitITCM
 8011c38:	d3f6      	bcc.n	8011c28 <CopyDataInitITCM>
  ldr  r2, =_sbss
 8011c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8011c68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011c3c:	e002      	b.n	8011c44 <LoopFillZerobss>

08011c3e <FillZerobss>:



/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011c40:	f842 3b04 	str.w	r3, [r2], #4

08011c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011c44:	4b0f      	ldr	r3, [pc, #60]	@ (8011c84 <LoopFillZerobss+0x40>)
  cmp  r2, r3
 8011c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011c48:	d3f9      	bcc.n	8011c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011c4a:	f000 f953 	bl	8011ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011c4e:	f002 fa6d 	bl	801412c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011c52:	f7f2 f931 	bl	8003eb8 <main>
  bx  lr    
 8011c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011c58:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8011c5c:	08045f10 	.word	0x08045f10
  ldr  r0, =_sdata
 8011c60:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 8011c64:	200206f4 	.word	0x200206f4
  ldr  r2, =_sbss
 8011c68:	200206f8 	.word	0x200206f8
  ldr  r3, =_sidatadtcm
 8011c6c:	08046604 	.word	0x08046604
  ldr  r0, =_sdatadtcm
 8011c70:	20000000 	.word	0x20000000
  ldr  r3, =_edatadtcm
 8011c74:	20014660 	.word	0x20014660
  ldr  r3, =_sidataitcm
 8011c78:	0805ac64 	.word	0x0805ac64
	...
  ldr  r3, = _ebss
 8011c84:	20031b24 	.word	0x20031b24

08011c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011c88:	e7fe      	b.n	8011c88 <ADC_IRQHandler>

08011c8a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8011c8a:	b480      	push	{r7}
 8011c8c:	af00      	add	r7, sp, #0
}
 8011c8e:	bf00      	nop
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <HardFault_Handler>:

/* The fault handler implementation calls a function called
prvGetRegistersFromStack(). */
void HardFault_Handler(void)
{
    __asm volatile
 8011c98:	f01e 0f04 	tst.w	lr, #4
 8011c9c:	bf0c      	ite	eq
 8011c9e:	f3ef 8008 	mrseq	r0, MSP
 8011ca2:	f3ef 8009 	mrsne	r0, PSP
 8011ca6:	6981      	ldr	r1, [r0, #24]
 8011ca8:	4a00      	ldr	r2, [pc, #0]	@ (8011cac <handler2_address_const>)
 8011caa:	4710      	bx	r2

08011cac <handler2_address_const>:
 8011cac:	08011cb3 	.word	0x08011cb3
        " ldr r1, [r0, #24]                                         \n"
        " ldr r2, handler2_address_const                            \n"
        " bx r2                                                     \n"
        " handler2_address_const: .word prvGetRegistersFromStack    \n"
    );
}
 8011cb0:	bf00      	nop

08011cb2 <prvGetRegistersFromStack>:


void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8011cb2:	b480      	push	{r7}
 8011cb4:	b08b      	sub	sp, #44	@ 0x2c
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
volatile uint32_t r12 __attribute__ ((unused));
volatile uint32_t lr __attribute__ ((unused)); /* Link register. */
volatile uint32_t pc __attribute__ ((unused)); /* Program counter. */
volatile uint32_t psr __attribute__ ((unused));/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    r1 = pulFaultStackAddress[ 1 ];
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	623b      	str	r3, [r7, #32]
    r2 = pulFaultStackAddress[ 2 ];
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	689b      	ldr	r3, [r3, #8]
 8011cca:	61fb      	str	r3, [r7, #28]
    r3 = pulFaultStackAddress[ 3 ];
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	61bb      	str	r3, [r7, #24]

    r12 = pulFaultStackAddress[ 4 ];
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	691b      	ldr	r3, [r3, #16]
 8011cd6:	617b      	str	r3, [r7, #20]
    lr = pulFaultStackAddress[ 5 ];
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	695b      	ldr	r3, [r3, #20]
 8011cdc:	613b      	str	r3, [r7, #16]
    pc = pulFaultStackAddress[ 6 ];
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	699b      	ldr	r3, [r3, #24]
 8011ce2:	60fb      	str	r3, [r7, #12]
    psr = pulFaultStackAddress[ 7 ];
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	69db      	ldr	r3, [r3, #28]
 8011ce8:	60bb      	str	r3, [r7, #8]

    /* When the following line is hit, the variables contain the register values. */
    for( ;; );
 8011cea:	bf00      	nop
 8011cec:	e7fd      	b.n	8011cea <prvGetRegistersFromStack+0x38>

08011cee <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
    __asm volatile
 8011cee:	f01e 0f04 	tst.w	lr, #4
 8011cf2:	bf0c      	ite	eq
 8011cf4:	f3ef 8008 	mrseq	r0, MSP
 8011cf8:	f3ef 8009 	mrsne	r0, PSP
 8011cfc:	6981      	ldr	r1, [r0, #24]
 8011cfe:	4a00      	ldr	r2, [pc, #0]	@ (8011d00 <MemManage_Handler+0x12>)
 8011d00:	4710      	bx	r2

08011d02 <handler3_address_const>:
 8011d02:	1cb3      	.short	0x1cb3
 8011d04:	0801      	.short	0x0801
        " ldr r1, [r0, #24]                                         \n"
        " ldr r2, handler3_address_const                            \n"
        " bx r2                                                     \n"
        " handler3_address_const: .word prvGetRegistersFromStack    \n"
    );
}
 8011d06:	bf00      	nop

08011d08 <BusFault_Handler>:
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
    __asm volatile
 8011d08:	f01e 0f04 	tst.w	lr, #4
 8011d0c:	bf0c      	ite	eq
 8011d0e:	f3ef 8008 	mrseq	r0, MSP
 8011d12:	f3ef 8009 	mrsne	r0, PSP
 8011d16:	6981      	ldr	r1, [r0, #24]
 8011d18:	4a00      	ldr	r2, [pc, #0]	@ (8011d1c <handler4_address_const>)
 8011d1a:	4710      	bx	r2

08011d1c <handler4_address_const>:
 8011d1c:	08011cb3 	.word	0x08011cb3
        " ldr r1, [r0, #24]                                         \n"
        " ldr r2, handler4_address_const                            \n"
        " bx r2                                                     \n"
        " handler4_address_const: .word prvGetRegistersFromStack    \n"
    );
}
 8011d20:	bf00      	nop

08011d22 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void){
 8011d22:	b480      	push	{r7}
 8011d24:	af00      	add	r7, sp, #0
	__asm volatile
 8011d26:	f01e 0f04 	tst.w	lr, #4
 8011d2a:	bf0c      	ite	eq
 8011d2c:	f3ef 8008 	mrseq	r0, MSP
 8011d30:	f3ef 8009 	mrsne	r0, PSP
 8011d34:	6981      	ldr	r1, [r0, #24]
 8011d36:	4a00      	ldr	r2, [pc, #0]	@ (8011d38 <UsageFault_Handler+0x16>)
 8011d38:	4710      	bx	r2

08011d3a <handler5_address_const>:
 8011d3a:	1cb3      	.short	0x1cb3
 8011d3c:	0801      	.short	0x0801
		" ldr r1, [r0, #24]                                         \n"
		" ldr r2, handler5_address_const                            \n"
		" bx r2                                                     \n"
		" handler5_address_const: .word prvGetRegistersFromStack    \n"
	);
}
 8011d3e:	bf00      	nop
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	af00      	add	r7, sp, #0
}
 8011d4c:	bf00      	nop
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8011d56:	b480      	push	{r7}
 8011d58:	af00      	add	r7, sp, #0
}
 8011d5a:	bf00      	nop
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8011d64:	b480      	push	{r7}
 8011d66:	af00      	add	r7, sp, #0
}
 8011d68:	bf00      	nop
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr

08011d72 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8011d76:	f7f4 fd5b 	bl	8006830 <HAL_IncTick>
}
 8011d7a:	bf00      	nop
 8011d7c:	bd80      	pop	{r7, pc}
	...

08011d80 <OTG_HS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 8011d84:	4802      	ldr	r0, [pc, #8]	@ (8011d90 <OTG_HS_IRQHandler+0x10>)
 8011d86:	f7f6 fd5a 	bl	800883e <HAL_HCD_IRQHandler>
}
 8011d8a:	bf00      	nop
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20031740 	.word	0x20031740

08011d94 <DMA2_Stream1_IRQHandler>:
  * @brief This function handles DMA2 Stream 4 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	af00      	add	r7, sp, #0
//	BSP_LED_On(LED_RED);
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8011d98:	4b03      	ldr	r3, [pc, #12]	@ (8011da8 <DMA2_Stream1_IRQHandler+0x14>)
 8011d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7f5 f96f 	bl	8007080 <HAL_DMA_IRQHandler>
//  BSP_LED_Off(LED_RED);
}
 8011da2:	bf00      	nop
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20030dc4 	.word	0x20030dc4

08011dac <_sbrk>:




caddr_t _sbrk(int incr)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8011db4:	4b15      	ldr	r3, [pc, #84]	@ (8011e0c <_sbrk+0x60>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d102      	bne.n	8011dc2 <_sbrk+0x16>
		heap_end = &end;
 8011dbc:	4b13      	ldr	r3, [pc, #76]	@ (8011e0c <_sbrk+0x60>)
 8011dbe:	4a14      	ldr	r2, [pc, #80]	@ (8011e10 <_sbrk+0x64>)
 8011dc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011dc2:	4b12      	ldr	r3, [pc, #72]	@ (8011e0c <_sbrk+0x60>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8011dc8:	4b12      	ldr	r3, [pc, #72]	@ (8011e14 <_sbrk+0x68>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8011dd6:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 8011dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8011e0c <_sbrk+0x60>)
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4413      	add	r3, r2
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d207      	bcs.n	8011df6 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8011de6:	f002 f99b 	bl	8014120 <__errno>
 8011dea:	4603      	mov	r3, r0
 8011dec:	220c      	movs	r2, #12
 8011dee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8011df0:	f04f 33ff 	mov.w	r3, #4294967295
 8011df4:	e006      	b.n	8011e04 <_sbrk+0x58>
	}

	heap_end += incr;
 8011df6:	4b05      	ldr	r3, [pc, #20]	@ (8011e0c <_sbrk+0x60>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	4a03      	ldr	r2, [pc, #12]	@ (8011e0c <_sbrk+0x60>)
 8011e00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011e02:	68fb      	ldr	r3, [r7, #12]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	2003173c 	.word	0x2003173c
 8011e10:	20031b28 	.word	0x20031b28
 8011e14:	e000ed08 	.word	0xe000ed08

08011e18 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e24:	2300      	movs	r3, #0
 8011e26:	617b      	str	r3, [r7, #20]
 8011e28:	e009      	b.n	8011e3e <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	1c5a      	adds	r2, r3, #1
 8011e2e:	60ba      	str	r2, [r7, #8]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	617b      	str	r3, [r7, #20]
 8011e3e:	697a      	ldr	r2, [r7, #20]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	dbf1      	blt.n	8011e2a <_write+0x12>
		}
	return len;
 8011e46:	687b      	ldr	r3, [r7, #4]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <_close>:

int _close(int file)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
	return -1;
 8011e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8011e78:	605a      	str	r2, [r3, #4]
	return 0;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <_isatty>:

int _isatty(int file)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
	return 1;
 8011e90:	2301      	movs	r3, #1
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b085      	sub	sp, #20
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	60f8      	str	r0, [r7, #12]
 8011ea6:	60b9      	str	r1, [r7, #8]
 8011ea8:	607a      	str	r2, [r7, #4]
	return 0;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3714      	adds	r7, #20
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <_read>:

int _read(int file, char *ptr, int len)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b086      	sub	sp, #24
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	617b      	str	r3, [r7, #20]
 8011ec8:	e00a      	b.n	8011ee0 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 8011eca:	f3af 8000 	nop.w
 8011ece:	4601      	mov	r1, r0
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	1c5a      	adds	r2, r3, #1
 8011ed4:	60ba      	str	r2, [r7, #8]
 8011ed6:	b2ca      	uxtb	r2, r1
 8011ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	3301      	adds	r3, #1
 8011ede:	617b      	str	r3, [r7, #20]
 8011ee0:	697a      	ldr	r2, [r7, #20]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	dbf0      	blt.n	8011eca <_read+0x12>
	}

   return len;
 8011ee8:	687b      	ldr	r3, [r7, #4]
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3718      	adds	r7, #24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011ef8:	4b15      	ldr	r3, [pc, #84]	@ (8011f50 <SystemInit+0x5c>)
 8011efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011efe:	4a14      	ldr	r2, [pc, #80]	@ (8011f50 <SystemInit+0x5c>)
 8011f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011f08:	4b12      	ldr	r3, [pc, #72]	@ (8011f54 <SystemInit+0x60>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a11      	ldr	r2, [pc, #68]	@ (8011f54 <SystemInit+0x60>)
 8011f0e:	f043 0301 	orr.w	r3, r3, #1
 8011f12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011f14:	4b0f      	ldr	r3, [pc, #60]	@ (8011f54 <SystemInit+0x60>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8011f54 <SystemInit+0x60>)
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	490d      	ldr	r1, [pc, #52]	@ (8011f54 <SystemInit+0x60>)
 8011f20:	4b0d      	ldr	r3, [pc, #52]	@ (8011f58 <SystemInit+0x64>)
 8011f22:	4013      	ands	r3, r2
 8011f24:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011f26:	4b0b      	ldr	r3, [pc, #44]	@ (8011f54 <SystemInit+0x60>)
 8011f28:	4a0c      	ldr	r2, [pc, #48]	@ (8011f5c <SystemInit+0x68>)
 8011f2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011f2c:	4b09      	ldr	r3, [pc, #36]	@ (8011f54 <SystemInit+0x60>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a08      	ldr	r2, [pc, #32]	@ (8011f54 <SystemInit+0x60>)
 8011f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011f38:	4b06      	ldr	r3, [pc, #24]	@ (8011f54 <SystemInit+0x60>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f3e:	4b04      	ldr	r3, [pc, #16]	@ (8011f50 <SystemInit+0x5c>)
 8011f40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011f44:	609a      	str	r2, [r3, #8]
#endif
}
 8011f46:	bf00      	nop
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	e000ed00 	.word	0xe000ed00
 8011f54:	40023800 	.word	0x40023800
 8011f58:	fef6ffff 	.word	0xfef6ffff
 8011f5c:	24003010 	.word	0x24003010

08011f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f000 f84c 	bl	801200c <USBH_LL_IncTimer>
}
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f000 f868 	bl	8012060 <USBH_LL_Connect>
}
 8011f90:	bf00      	nop
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f000 f880 	bl	80120ac <USBH_LL_Disconnect>
} 
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: Channel number 
  * @param  urb_state: URB State
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	70fb      	strb	r3, [r7, #3]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7f6 fd2e 	bl	8008a40 <HAL_HCD_Start>
  return USBH_OK; 
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3708      	adds	r7, #8
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b082      	sub	sp, #8
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7f6 fd42 	bl	8008a86 <HAL_HCD_Stop>
  return USBH_OK; 
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 801201a:	1c5a      	adds	r2, r3, #1
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
  USBH_HandleSof(phost);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f804 	bl	8012030 <USBH_HandleSof>
}
 8012028:	bf00      	nop
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	b2db      	uxtb	r3, r3
 801203e:	2b0a      	cmp	r3, #10
 8012040:	d10a      	bne.n	8012058 <USBH_HandleSof+0x28>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8012048:	2b00      	cmp	r3, #0
 801204a:	d005      	beq.n	8012058 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	4798      	blx	r3
  }
}
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	b2db      	uxtb	r3, r3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d10f      	bne.n	8012092 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
    
    if(phost->pUser != NULL)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00e      	beq.n	80120a2 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801208a:	2104      	movs	r1, #4
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	4798      	blx	r3
 8012090:	e007      	b.n	80120a2 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	2b01      	cmp	r3, #1
 801209a:	d102      	bne.n	80120a2 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2202      	movs	r2, #2
 80120a0:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f7ff ff9a 	bl	8011fee <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	791b      	ldrb	r3, [r3, #4]
 80120be:	4619      	mov	r1, r3
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 f829 	bl	8012118 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	795b      	ldrb	r3, [r3, #5]
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f000 f823 	bl	8012118 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
   
  if(phost->pUser != NULL)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d005      	beq.n	80120f0 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ea:	2105      	movs	r1, #5
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
 80120f0:	4808      	ldr	r0, [pc, #32]	@ (8012114 <USBH_LL_Disconnect+0x68>)
 80120f2:	f001 ff25 	bl	8013f40 <iprintf>
 80120f6:	200a      	movs	r0, #10
 80120f8:	f001 ff34 	bl	8013f64 <putchar>
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7ff ff67 	bl	8011fd0 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2203      	movs	r2, #3
 8012106:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	0801b364 	.word	0x0801b364

08012118 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 8012124:	78fb      	ldrb	r3, [r7, #3]
 8012126:	2b0a      	cmp	r3, #10
 8012128:	d80d      	bhi.n	8012146 <USBH_FreePipe+0x2e>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 801212a:	78fb      	ldrb	r3, [r7, #3]
 801212c:	687a      	ldr	r2, [r7, #4]
 801212e:	339a      	adds	r3, #154	@ 0x9a
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4413      	add	r3, r2
 8012134:	685a      	ldr	r2, [r3, #4]
 8012136:	78fb      	ldrb	r3, [r7, #3]
 8012138:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	339a      	adds	r3, #154	@ 0x9a
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	440b      	add	r3, r1
 8012144:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <arm_rfft_fast_init_f32>:
 8012154:	084b      	lsrs	r3, r1, #1
 8012156:	2b80      	cmp	r3, #128	@ 0x80
 8012158:	b430      	push	{r4, r5}
 801215a:	8201      	strh	r1, [r0, #16]
 801215c:	8003      	strh	r3, [r0, #0]
 801215e:	d06f      	beq.n	8012240 <arm_rfft_fast_init_f32+0xec>
 8012160:	d916      	bls.n	8012190 <arm_rfft_fast_init_f32+0x3c>
 8012162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012166:	d05e      	beq.n	8012226 <arm_rfft_fast_init_f32+0xd2>
 8012168:	d935      	bls.n	80121d6 <arm_rfft_fast_init_f32+0x82>
 801216a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801216e:	d025      	beq.n	80121bc <arm_rfft_fast_init_f32+0x68>
 8012170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012174:	d112      	bne.n	801219c <arm_rfft_fast_init_f32+0x48>
 8012176:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 801217a:	4c37      	ldr	r4, [pc, #220]	@ (8012258 <arm_rfft_fast_init_f32+0x104>)
 801217c:	4937      	ldr	r1, [pc, #220]	@ (801225c <arm_rfft_fast_init_f32+0x108>)
 801217e:	2300      	movs	r3, #0
 8012180:	4a37      	ldr	r2, [pc, #220]	@ (8012260 <arm_rfft_fast_init_f32+0x10c>)
 8012182:	8185      	strh	r5, [r0, #12]
 8012184:	6084      	str	r4, [r0, #8]
 8012186:	6041      	str	r1, [r0, #4]
 8012188:	6142      	str	r2, [r0, #20]
 801218a:	b258      	sxtb	r0, r3
 801218c:	bc30      	pop	{r4, r5}
 801218e:	4770      	bx	lr
 8012190:	2b20      	cmp	r3, #32
 8012192:	d030      	beq.n	80121f6 <arm_rfft_fast_init_f32+0xa2>
 8012194:	2b40      	cmp	r3, #64	@ 0x40
 8012196:	d005      	beq.n	80121a4 <arm_rfft_fast_init_f32+0x50>
 8012198:	2b10      	cmp	r3, #16
 801219a:	d038      	beq.n	801220e <arm_rfft_fast_init_f32+0xba>
 801219c:	23ff      	movs	r3, #255	@ 0xff
 801219e:	bc30      	pop	{r4, r5}
 80121a0:	b258      	sxtb	r0, r3
 80121a2:	4770      	bx	lr
 80121a4:	2538      	movs	r5, #56	@ 0x38
 80121a6:	4c2f      	ldr	r4, [pc, #188]	@ (8012264 <arm_rfft_fast_init_f32+0x110>)
 80121a8:	492f      	ldr	r1, [pc, #188]	@ (8012268 <arm_rfft_fast_init_f32+0x114>)
 80121aa:	2300      	movs	r3, #0
 80121ac:	4a2f      	ldr	r2, [pc, #188]	@ (801226c <arm_rfft_fast_init_f32+0x118>)
 80121ae:	8185      	strh	r5, [r0, #12]
 80121b0:	6084      	str	r4, [r0, #8]
 80121b2:	6041      	str	r1, [r0, #4]
 80121b4:	6142      	str	r2, [r0, #20]
 80121b6:	b258      	sxtb	r0, r3
 80121b8:	bc30      	pop	{r4, r5}
 80121ba:	4770      	bx	lr
 80121bc:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80121c0:	4c2b      	ldr	r4, [pc, #172]	@ (8012270 <arm_rfft_fast_init_f32+0x11c>)
 80121c2:	492c      	ldr	r1, [pc, #176]	@ (8012274 <arm_rfft_fast_init_f32+0x120>)
 80121c4:	2300      	movs	r3, #0
 80121c6:	4a2c      	ldr	r2, [pc, #176]	@ (8012278 <arm_rfft_fast_init_f32+0x124>)
 80121c8:	8185      	strh	r5, [r0, #12]
 80121ca:	6084      	str	r4, [r0, #8]
 80121cc:	6041      	str	r1, [r0, #4]
 80121ce:	6142      	str	r2, [r0, #20]
 80121d0:	b258      	sxtb	r0, r3
 80121d2:	bc30      	pop	{r4, r5}
 80121d4:	4770      	bx	lr
 80121d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121da:	d1df      	bne.n	801219c <arm_rfft_fast_init_f32+0x48>
 80121dc:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80121e0:	4c26      	ldr	r4, [pc, #152]	@ (801227c <arm_rfft_fast_init_f32+0x128>)
 80121e2:	4927      	ldr	r1, [pc, #156]	@ (8012280 <arm_rfft_fast_init_f32+0x12c>)
 80121e4:	2300      	movs	r3, #0
 80121e6:	4a27      	ldr	r2, [pc, #156]	@ (8012284 <arm_rfft_fast_init_f32+0x130>)
 80121e8:	8185      	strh	r5, [r0, #12]
 80121ea:	6084      	str	r4, [r0, #8]
 80121ec:	6041      	str	r1, [r0, #4]
 80121ee:	6142      	str	r2, [r0, #20]
 80121f0:	b258      	sxtb	r0, r3
 80121f2:	bc30      	pop	{r4, r5}
 80121f4:	4770      	bx	lr
 80121f6:	2530      	movs	r5, #48	@ 0x30
 80121f8:	4c23      	ldr	r4, [pc, #140]	@ (8012288 <arm_rfft_fast_init_f32+0x134>)
 80121fa:	4924      	ldr	r1, [pc, #144]	@ (801228c <arm_rfft_fast_init_f32+0x138>)
 80121fc:	2300      	movs	r3, #0
 80121fe:	4a24      	ldr	r2, [pc, #144]	@ (8012290 <arm_rfft_fast_init_f32+0x13c>)
 8012200:	8185      	strh	r5, [r0, #12]
 8012202:	6084      	str	r4, [r0, #8]
 8012204:	6041      	str	r1, [r0, #4]
 8012206:	6142      	str	r2, [r0, #20]
 8012208:	b258      	sxtb	r0, r3
 801220a:	bc30      	pop	{r4, r5}
 801220c:	4770      	bx	lr
 801220e:	2514      	movs	r5, #20
 8012210:	4c20      	ldr	r4, [pc, #128]	@ (8012294 <arm_rfft_fast_init_f32+0x140>)
 8012212:	4921      	ldr	r1, [pc, #132]	@ (8012298 <arm_rfft_fast_init_f32+0x144>)
 8012214:	2300      	movs	r3, #0
 8012216:	4a21      	ldr	r2, [pc, #132]	@ (801229c <arm_rfft_fast_init_f32+0x148>)
 8012218:	8185      	strh	r5, [r0, #12]
 801221a:	6084      	str	r4, [r0, #8]
 801221c:	6041      	str	r1, [r0, #4]
 801221e:	6142      	str	r2, [r0, #20]
 8012220:	b258      	sxtb	r0, r3
 8012222:	bc30      	pop	{r4, r5}
 8012224:	4770      	bx	lr
 8012226:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 801222a:	4c1d      	ldr	r4, [pc, #116]	@ (80122a0 <arm_rfft_fast_init_f32+0x14c>)
 801222c:	491d      	ldr	r1, [pc, #116]	@ (80122a4 <arm_rfft_fast_init_f32+0x150>)
 801222e:	2300      	movs	r3, #0
 8012230:	4a1d      	ldr	r2, [pc, #116]	@ (80122a8 <arm_rfft_fast_init_f32+0x154>)
 8012232:	8185      	strh	r5, [r0, #12]
 8012234:	6084      	str	r4, [r0, #8]
 8012236:	6041      	str	r1, [r0, #4]
 8012238:	6142      	str	r2, [r0, #20]
 801223a:	b258      	sxtb	r0, r3
 801223c:	bc30      	pop	{r4, r5}
 801223e:	4770      	bx	lr
 8012240:	25d0      	movs	r5, #208	@ 0xd0
 8012242:	4c1a      	ldr	r4, [pc, #104]	@ (80122ac <arm_rfft_fast_init_f32+0x158>)
 8012244:	491a      	ldr	r1, [pc, #104]	@ (80122b0 <arm_rfft_fast_init_f32+0x15c>)
 8012246:	2300      	movs	r3, #0
 8012248:	4a1a      	ldr	r2, [pc, #104]	@ (80122b4 <arm_rfft_fast_init_f32+0x160>)
 801224a:	8185      	strh	r5, [r0, #12]
 801224c:	6084      	str	r4, [r0, #8]
 801224e:	6041      	str	r1, [r0, #4]
 8012250:	6142      	str	r2, [r0, #20]
 8012252:	b258      	sxtb	r0, r3
 8012254:	bc30      	pop	{r4, r5}
 8012256:	4770      	bx	lr
 8012258:	0803ed74 	.word	0x0803ed74
 801225c:	08026a5c 	.word	0x08026a5c
 8012260:	0803028c 	.word	0x0803028c
 8012264:	0802da5c 	.word	0x0802da5c
 8012268:	08040b34 	.word	0x08040b34
 801226c:	080437fc 	.word	0x080437fc
 8012270:	0803a86c 	.word	0x0803a86c
 8012274:	0803876c 	.word	0x0803876c
 8012278:	0802dacc 	.word	0x0802dacc
 801227c:	0804320c 	.word	0x0804320c
 8012280:	0803428c 	.word	0x0803428c
 8012284:	08040d34 	.word	0x08040d34
 8012288:	0803b754 	.word	0x0803b754
 801228c:	0803a76c 	.word	0x0803a76c
 8012290:	0802d95c 	.word	0x0802d95c
 8012294:	0803b6ac 	.word	0x0803b6ac
 8012298:	080356ec 	.word	0x080356ec
 801229c:	0803b6d4 	.word	0x0803b6d4
 80122a0:	08041534 	.word	0x08041534
 80122a4:	0803dd74 	.word	0x0803dd74
 80122a8:	08041e0c 	.word	0x08041e0c
 80122ac:	080439fc 	.word	0x080439fc
 80122b0:	0803b7b4 	.word	0x0803b7b4
 80122b4:	08042e0c 	.word	0x08042e0c

080122b8 <arm_rfft_fast_f32>:
 80122b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122bc:	8a05      	ldrh	r5, [r0, #16]
 80122be:	4606      	mov	r6, r0
 80122c0:	4690      	mov	r8, r2
 80122c2:	460c      	mov	r4, r1
 80122c4:	086d      	lsrs	r5, r5, #1
 80122c6:	8005      	strh	r5, [r0, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d15e      	bne.n	801238a <arm_rfft_fast_f32+0xd2>
 80122cc:	461a      	mov	r2, r3
 80122ce:	2301      	movs	r3, #1
 80122d0:	f000 fbe0 	bl	8012a94 <arm_cfft_f32>
 80122d4:	edd4 7a00 	vldr	s15, [r4]
 80122d8:	ed94 7a01 	vldr	s14, [r4, #4]
 80122dc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80122e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80122e4:	8837      	ldrh	r7, [r6, #0]
 80122e6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80122ea:	6975      	ldr	r5, [r6, #20]
 80122ec:	3f01      	subs	r7, #1
 80122ee:	eef0 3a46 	vmov.f32	s7, s12
 80122f2:	3510      	adds	r5, #16
 80122f4:	f108 0610 	add.w	r6, r8, #16
 80122f8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80122fc:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8012300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012304:	f104 0310 	add.w	r3, r4, #16
 8012308:	3808      	subs	r0, #8
 801230a:	ee26 7a86 	vmul.f32	s14, s13, s12
 801230e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012312:	ed88 7a00 	vstr	s14, [r8]
 8012316:	edc8 7a01 	vstr	s15, [r8, #4]
 801231a:	edd0 6a02 	vldr	s13, [r0, #8]
 801231e:	3f01      	subs	r7, #1
 8012320:	ed13 5a02 	vldr	s10, [r3, #-8]
 8012324:	f1a0 0008 	sub.w	r0, r0, #8
 8012328:	ed13 7a01 	vldr	s14, [r3, #-4]
 801232c:	f105 0508 	add.w	r5, r5, #8
 8012330:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8012334:	ed15 6a04 	vldr	s12, [r5, #-16]
 8012338:	edd0 5a05 	vldr	s11, [r0, #20]
 801233c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8012340:	ed55 6a03 	vldr	s13, [r5, #-12]
 8012344:	f103 0308 	add.w	r3, r3, #8
 8012348:	ee35 4a87 	vadd.f32	s8, s11, s14
 801234c:	f106 0608 	add.w	r6, r6, #8
 8012350:	ee66 4a27 	vmul.f32	s9, s12, s15
 8012354:	ee77 5a65 	vsub.f32	s11, s14, s11
 8012358:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801235c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8012360:	ee26 6a04 	vmul.f32	s12, s12, s8
 8012364:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012368:	ee77 7a25 	vadd.f32	s15, s14, s11
 801236c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012370:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012374:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8012378:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801237c:	ed46 6a04 	vstr	s13, [r6, #-16]
 8012380:	ed46 7a03 	vstr	s15, [r6, #-12]
 8012384:	d1c9      	bne.n	801231a <arm_rfft_fast_f32+0x62>
 8012386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238a:	edd1 7a00 	vldr	s15, [r1]
 801238e:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8012392:	edd1 6a01 	vldr	s13, [r1, #4]
 8012396:	1e68      	subs	r0, r5, #1
 8012398:	6975      	ldr	r5, [r6, #20]
 801239a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801239e:	00c1      	lsls	r1, r0, #3
 80123a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80123a4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80123a8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80123ac:	ed82 7a00 	vstr	s14, [r2]
 80123b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80123b4:	b3e0      	cbz	r0, 8012430 <arm_rfft_fast_f32+0x178>
 80123b6:	3908      	subs	r1, #8
 80123b8:	f104 0210 	add.w	r2, r4, #16
 80123bc:	3510      	adds	r5, #16
 80123be:	440c      	add	r4, r1
 80123c0:	f108 0110 	add.w	r1, r8, #16
 80123c4:	ed94 7a02 	vldr	s14, [r4, #8]
 80123c8:	3801      	subs	r0, #1
 80123ca:	ed52 6a02 	vldr	s13, [r2, #-8]
 80123ce:	f1a4 0408 	sub.w	r4, r4, #8
 80123d2:	ed15 6a02 	vldr	s12, [r5, #-8]
 80123d6:	f102 0208 	add.w	r2, r2, #8
 80123da:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80123de:	ed94 4a05 	vldr	s8, [r4, #20]
 80123e2:	ed12 5a03 	vldr	s10, [r2, #-12]
 80123e6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80123ea:	ed55 5a01 	vldr	s11, [r5, #-4]
 80123ee:	f101 0108 	add.w	r1, r1, #8
 80123f2:	ee26 3a27 	vmul.f32	s6, s12, s15
 80123f6:	f105 0508 	add.w	r5, r5, #8
 80123fa:	ee74 4a05 	vadd.f32	s9, s8, s10
 80123fe:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8012402:	ee35 5a44 	vsub.f32	s10, s10, s8
 8012406:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801240a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801240e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8012412:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012416:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801241a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801241e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012422:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012426:	ed41 7a03 	vstr	s15, [r1, #-12]
 801242a:	ed01 7a04 	vstr	s14, [r1, #-16]
 801242e:	d1c9      	bne.n	80123c4 <arm_rfft_fast_f32+0x10c>
 8012430:	4630      	mov	r0, r6
 8012432:	4641      	mov	r1, r8
 8012434:	461a      	mov	r2, r3
 8012436:	2301      	movs	r3, #1
 8012438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801243c:	f000 bb2a 	b.w	8012a94 <arm_cfft_f32>

08012440 <arm_cfft_radix8by2_f32>:
 8012440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012444:	ed2d 8b06 	vpush	{d8-d10}
 8012448:	f8b0 e000 	ldrh.w	lr, [r0]
 801244c:	4607      	mov	r7, r0
 801244e:	6842      	ldr	r2, [r0, #4]
 8012450:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8012454:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8012458:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801245c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8012460:	f000 80af 	beq.w	80125c2 <arm_cfft_radix8by2_f32+0x182>
 8012464:	3310      	adds	r3, #16
 8012466:	3210      	adds	r2, #16
 8012468:	f101 0610 	add.w	r6, r1, #16
 801246c:	f108 0510 	add.w	r5, r8, #16
 8012470:	18cc      	adds	r4, r1, r3
 8012472:	4443      	add	r3, r8
 8012474:	ed55 6a04 	vldr	s13, [r5, #-16]
 8012478:	f1be 0e01 	subs.w	lr, lr, #1
 801247c:	ed56 4a04 	vldr	s9, [r6, #-16]
 8012480:	f104 0410 	add.w	r4, r4, #16
 8012484:	ed55 7a02 	vldr	s15, [r5, #-8]
 8012488:	f106 0610 	add.w	r6, r6, #16
 801248c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8012490:	ed53 0a04 	vldr	s1, [r3, #-16]
 8012494:	ed13 5a03 	vldr	s10, [r3, #-12]
 8012498:	ee74 4ae6 	vsub.f32	s9, s9, s13
 801249c:	ed13 3a02 	vldr	s6, [r3, #-8]
 80124a0:	f102 0210 	add.w	r2, r2, #16
 80124a4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80124a8:	f103 0310 	add.w	r3, r3, #16
 80124ac:	ed55 2a01 	vldr	s5, [r5, #-4]
 80124b0:	f105 0510 	add.w	r5, r5, #16
 80124b4:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80124b8:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80124bc:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80124c0:	ee33 8a83 	vadd.f32	s16, s7, s6
 80124c4:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80124c8:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80124cc:	ee34 0a06 	vadd.f32	s0, s8, s12
 80124d0:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80124d4:	ee76 aa87 	vadd.f32	s21, s13, s14
 80124d8:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80124dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80124e0:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80124e4:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80124e8:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80124ec:	ee71 8a05 	vadd.f32	s17, s2, s10
 80124f0:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80124f4:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80124f8:	ee72 9a22 	vadd.f32	s19, s4, s5
 80124fc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8012500:	ee35 5a41 	vsub.f32	s10, s10, s2
 8012504:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8012508:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 801250c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012510:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8012514:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8012518:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 801251c:	ee72 7a62 	vsub.f32	s15, s4, s5
 8012520:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8012524:	ee73 2a63 	vsub.f32	s5, s6, s7
 8012528:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 801252c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8012530:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8012534:	ee24 3a84 	vmul.f32	s6, s9, s8
 8012538:	ee27 2a26 	vmul.f32	s4, s14, s13
 801253c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8012540:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8012544:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012548:	ee65 5a84 	vmul.f32	s11, s11, s8
 801254c:	ee65 6a26 	vmul.f32	s13, s10, s13
 8012550:	ee25 5a04 	vmul.f32	s10, s10, s8
 8012554:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012558:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801255c:	ee33 4a02 	vadd.f32	s8, s6, s4
 8012560:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8012564:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8012568:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 801256c:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8012570:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8012574:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8012578:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 801257c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8012580:	ee27 4a87 	vmul.f32	s8, s15, s14
 8012584:	ee61 5a87 	vmul.f32	s11, s3, s14
 8012588:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801258c:	ee22 5a87 	vmul.f32	s10, s5, s14
 8012590:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012594:	ee26 6a26 	vmul.f32	s12, s12, s13
 8012598:	ee62 6aa6 	vmul.f32	s13, s5, s13
 801259c:	ee74 4a84 	vadd.f32	s9, s9, s8
 80125a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80125a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80125a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80125ac:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 80125b0:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 80125b4:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80125b8:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 80125bc:	f47f af5a 	bne.w	8012474 <arm_cfft_radix8by2_f32+0x34>
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	fa1f f48c 	uxth.w	r4, ip
 80125c6:	4608      	mov	r0, r1
 80125c8:	2302      	movs	r3, #2
 80125ca:	4621      	mov	r1, r4
 80125cc:	f001 f868 	bl	80136a0 <arm_radix8_butterfly_f32>
 80125d0:	4640      	mov	r0, r8
 80125d2:	4621      	mov	r1, r4
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	2302      	movs	r3, #2
 80125d8:	ecbd 8b06 	vpop	{d8-d10}
 80125dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125e0:	f001 b85e 	b.w	80136a0 <arm_radix8_butterfly_f32>

080125e4 <arm_cfft_radix8by4_f32>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	ed2d 8b06 	vpush	{d8-d10}
 80125ec:	8804      	ldrh	r4, [r0, #0]
 80125ee:	b08f      	sub	sp, #60	@ 0x3c
 80125f0:	ed91 6a00 	vldr	s12, [r1]
 80125f4:	460a      	mov	r2, r1
 80125f6:	0864      	lsrs	r4, r4, #1
 80125f8:	ed91 7a01 	vldr	s14, [r1, #4]
 80125fc:	9101      	str	r1, [sp, #4]
 80125fe:	00a3      	lsls	r3, r4, #2
 8012600:	9104      	str	r1, [sp, #16]
 8012602:	0864      	lsrs	r4, r4, #1
 8012604:	6841      	ldr	r1, [r0, #4]
 8012606:	900c      	str	r0, [sp, #48]	@ 0x30
 8012608:	4625      	mov	r5, r4
 801260a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801260c:	f101 0408 	add.w	r4, r1, #8
 8012610:	f101 0610 	add.w	r6, r1, #16
 8012614:	9406      	str	r4, [sp, #24]
 8012616:	18d4      	adds	r4, r2, r3
 8012618:	1eaa      	subs	r2, r5, #2
 801261a:	f101 0518 	add.w	r5, r1, #24
 801261e:	18e0      	adds	r0, r4, r3
 8012620:	ed94 4a00 	vldr	s8, [r4]
 8012624:	edd4 3a01 	vldr	s7, [r4, #4]
 8012628:	46a6      	mov	lr, r4
 801262a:	edd0 6a00 	vldr	s13, [r0]
 801262e:	18c7      	adds	r7, r0, r3
 8012630:	edd0 7a01 	vldr	s15, [r0, #4]
 8012634:	46a0      	mov	r8, r4
 8012636:	ee76 5a26 	vadd.f32	s11, s12, s13
 801263a:	edd7 4a00 	vldr	s9, [r7]
 801263e:	9402      	str	r4, [sp, #8]
 8012640:	4604      	mov	r4, r0
 8012642:	9507      	str	r5, [sp, #28]
 8012644:	4605      	mov	r5, r0
 8012646:	ee75 2a84 	vadd.f32	s5, s11, s8
 801264a:	900a      	str	r0, [sp, #40]	@ 0x28
 801264c:	9801      	ldr	r0, [sp, #4]
 801264e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012652:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012656:	ed97 5a01 	vldr	s10, [r7, #4]
 801265a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 801265e:	46bc      	mov	ip, r7
 8012660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012664:	9605      	str	r6, [sp, #20]
 8012666:	ee36 7a63 	vsub.f32	s14, s12, s7
 801266a:	9703      	str	r7, [sp, #12]
 801266c:	ee12 9a90 	vmov	r9, s5
 8012670:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8012674:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8012678:	1f3e      	subs	r6, r7, #4
 801267a:	f840 9b08 	str.w	r9, [r0], #8
 801267e:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012682:	edde 2a01 	vldr	s5, [lr, #4]
 8012686:	ee77 3ac4 	vsub.f32	s7, s15, s8
 801268a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801268e:	ed9c 4a01 	vldr	s8, [ip, #4]
 8012692:	ee36 6a22 	vadd.f32	s12, s12, s5
 8012696:	9001      	str	r0, [sp, #4]
 8012698:	ee37 7a45 	vsub.f32	s14, s14, s10
 801269c:	9804      	ldr	r0, [sp, #16]
 801269e:	ee75 6a26 	vadd.f32	s13, s10, s13
 80126a2:	f1ae 0704 	sub.w	r7, lr, #4
 80126a6:	ee36 6a04 	vadd.f32	s12, s12, s8
 80126aa:	ee33 4a45 	vsub.f32	s8, s6, s10
 80126ae:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80126b2:	ee33 5aa4 	vadd.f32	s10, s7, s9
 80126b6:	ed80 6a01 	vstr	s12, [r0, #4]
 80126ba:	ee14 9a10 	vmov	r9, s8
 80126be:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80126c2:	f848 9b08 	str.w	r9, [r8], #8
 80126c6:	ed8e 5a01 	vstr	s10, [lr, #4]
 80126ca:	ee15 ea90 	vmov	lr, s11
 80126ce:	f844 eb08 	str.w	lr, [r4], #8
 80126d2:	ee16 ea90 	vmov	lr, s13
 80126d6:	9408      	str	r4, [sp, #32]
 80126d8:	462c      	mov	r4, r5
 80126da:	ed85 7a01 	vstr	s14, [r5, #4]
 80126de:	9d03      	ldr	r5, [sp, #12]
 80126e0:	f84c eb08 	str.w	lr, [ip], #8
 80126e4:	edc5 7a01 	vstr	s15, [r5, #4]
 80126e8:	0855      	lsrs	r5, r2, #1
 80126ea:	9509      	str	r5, [sp, #36]	@ 0x24
 80126ec:	f000 8130 	beq.w	8012950 <arm_cfft_radix8by4_f32+0x36c>
 80126f0:	9804      	ldr	r0, [sp, #16]
 80126f2:	3b08      	subs	r3, #8
 80126f4:	46ab      	mov	fp, r5
 80126f6:	f1a4 020c 	sub.w	r2, r4, #12
 80126fa:	f100 0510 	add.w	r5, r0, #16
 80126fe:	f101 0920 	add.w	r9, r1, #32
 8012702:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8012706:	f8dd a014 	ldr.w	sl, [sp, #20]
 801270a:	4433      	add	r3, r6
 801270c:	3410      	adds	r4, #16
 801270e:	4660      	mov	r0, ip
 8012710:	4641      	mov	r1, r8
 8012712:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8012716:	ed54 6a02 	vldr	s13, [r4, #-8]
 801271a:	f1bb 0b01 	subs.w	fp, fp, #1
 801271e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8012722:	f10a 0a08 	add.w	sl, sl, #8
 8012726:	edd1 7a00 	vldr	s15, [r1]
 801272a:	f105 0508 	add.w	r5, r5, #8
 801272e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8012732:	edd0 2a00 	vldr	s5, [r0]
 8012736:	ed14 7a01 	vldr	s14, [r4, #-4]
 801273a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801273e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8012742:	f1a2 0208 	sub.w	r2, r2, #8
 8012746:	ee73 4aa7 	vadd.f32	s9, s7, s15
 801274a:	ed90 2a01 	vldr	s4, [r0, #4]
 801274e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8012752:	ed91 6a01 	vldr	s12, [r1, #4]
 8012756:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801275a:	f109 0910 	add.w	r9, r9, #16
 801275e:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8012762:	f104 0408 	add.w	r4, r4, #8
 8012766:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801276a:	f10e 0e18 	add.w	lr, lr, #24
 801276e:	ee37 3a67 	vsub.f32	s6, s14, s15
 8012772:	f1a3 0308 	sub.w	r3, r3, #8
 8012776:	ed45 6a04 	vstr	s13, [r5, #-16]
 801277a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801277e:	edd1 6a01 	vldr	s13, [r1, #4]
 8012782:	ee76 1a25 	vadd.f32	s3, s12, s11
 8012786:	edd0 4a01 	vldr	s9, [r0, #4]
 801278a:	ee33 3a22 	vadd.f32	s6, s6, s5
 801278e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8012792:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012796:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801279a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801279e:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80127a2:	ee35 5a42 	vsub.f32	s10, s10, s4
 80127a6:	ed45 6a03 	vstr	s13, [r5, #-12]
 80127aa:	ee32 2a06 	vadd.f32	s4, s4, s12
 80127ae:	edd6 7a00 	vldr	s15, [r6]
 80127b2:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80127b6:	ed97 1a00 	vldr	s2, [r7]
 80127ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80127be:	ed92 8a04 	vldr	s16, [r2, #16]
 80127c2:	ee71 8a27 	vadd.f32	s17, s2, s15
 80127c6:	ed93 aa04 	vldr	s20, [r3, #16]
 80127ca:	ed16 7a01 	vldr	s14, [r6, #-4]
 80127ce:	ee71 7a67 	vsub.f32	s15, s2, s15
 80127d2:	ed57 0a01 	vldr	s1, [r7, #-4]
 80127d6:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80127da:	ee38 6a88 	vadd.f32	s12, s17, s16
 80127de:	edd3 9a03 	vldr	s19, [r3, #12]
 80127e2:	ee30 0a87 	vadd.f32	s0, s1, s14
 80127e6:	ed92 9a03 	vldr	s18, [r2, #12]
 80127ea:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80127ee:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80127f2:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80127f6:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80127fa:	ee16 ca10 	vmov	ip, s12
 80127fe:	ee30 6a49 	vsub.f32	s12, s0, s18
 8012802:	ee71 4a07 	vadd.f32	s9, s2, s14
 8012806:	f847 c908 	str.w	ip, [r7], #-8
 801280a:	ee34 4a29 	vadd.f32	s8, s8, s19
 801280e:	edd2 8a03 	vldr	s17, [r2, #12]
 8012812:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8012816:	ed93 8a03 	vldr	s16, [r3, #12]
 801281a:	ee71 0a47 	vsub.f32	s1, s2, s14
 801281e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8012822:	ee39 1a67 	vsub.f32	s2, s18, s15
 8012826:	ee36 6a69 	vsub.f32	s12, s12, s19
 801282a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801282e:	ee75 5aca 	vsub.f32	s11, s11, s20
 8012832:	ed87 0a01 	vstr	s0, [r7, #4]
 8012836:	ed1a 0a04 	vldr	s0, [sl, #-16]
 801283a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 801283e:	ee21 8a80 	vmul.f32	s16, s3, s0
 8012842:	ee23 7a26 	vmul.f32	s14, s6, s13
 8012846:	ee64 7a26 	vmul.f32	s15, s8, s13
 801284a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801284e:	ee24 4a00 	vmul.f32	s8, s8, s0
 8012852:	ee23 3a00 	vmul.f32	s6, s6, s0
 8012856:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801285a:	ee24 0a80 	vmul.f32	s0, s9, s0
 801285e:	ee38 7a07 	vadd.f32	s14, s16, s14
 8012862:	ee76 6a84 	vadd.f32	s13, s13, s8
 8012866:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801286a:	ee33 3a61 	vsub.f32	s6, s6, s3
 801286e:	ee17 ca10 	vmov	ip, s14
 8012872:	f841 cb08 	str.w	ip, [r1], #8
 8012876:	ed01 3a01 	vstr	s6, [r1, #-4]
 801287a:	ed82 0a04 	vstr	s0, [r2, #16]
 801287e:	edc2 6a03 	vstr	s13, [r2, #12]
 8012882:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8012886:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 801288a:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 801288e:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8012892:	ee65 4a27 	vmul.f32	s9, s10, s15
 8012896:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801289a:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801289e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80128a2:	ee25 5a26 	vmul.f32	s10, s10, s13
 80128a6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80128aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128ae:	ee34 6a24 	vadd.f32	s12, s8, s9
 80128b2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80128b6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80128ba:	ee17 ca90 	vmov	ip, s15
 80128be:	ed04 6a04 	vstr	s12, [r4, #-16]
 80128c2:	ed04 5a03 	vstr	s10, [r4, #-12]
 80128c6:	f846 c908 	str.w	ip, [r6], #-8
 80128ca:	edc6 6a01 	vstr	s13, [r6, #4]
 80128ce:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 80128d2:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80128d6:	ee62 5a27 	vmul.f32	s11, s4, s15
 80128da:	ee22 6a87 	vmul.f32	s12, s5, s14
 80128de:	ee22 2a07 	vmul.f32	s4, s4, s14
 80128e2:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80128e6:	ee61 6a07 	vmul.f32	s13, s2, s14
 80128ea:	ee20 7a87 	vmul.f32	s14, s1, s14
 80128ee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80128f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80128f6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80128fa:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80128fe:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8012902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012906:	ee16 ca10 	vmov	ip, s12
 801290a:	f840 cb08 	str.w	ip, [r0], #8
 801290e:	ed40 2a01 	vstr	s5, [r0, #-4]
 8012912:	edc3 0a04 	vstr	s1, [r3, #16]
 8012916:	edc3 7a03 	vstr	s15, [r3, #12]
 801291a:	f47f aefc 	bne.w	8012716 <arm_cfft_radix8by4_f32+0x132>
 801291e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012920:	9805      	ldr	r0, [sp, #20]
 8012922:	00cb      	lsls	r3, r1, #3
 8012924:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8012928:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801292c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8012930:	4498      	add	r8, r3
 8012932:	449c      	add	ip, r3
 8012934:	9105      	str	r1, [sp, #20]
 8012936:	9901      	ldr	r1, [sp, #4]
 8012938:	4419      	add	r1, r3
 801293a:	9101      	str	r1, [sp, #4]
 801293c:	9906      	ldr	r1, [sp, #24]
 801293e:	4419      	add	r1, r3
 8012940:	9106      	str	r1, [sp, #24]
 8012942:	9908      	ldr	r1, [sp, #32]
 8012944:	4419      	add	r1, r3
 8012946:	9b07      	ldr	r3, [sp, #28]
 8012948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801294c:	9108      	str	r1, [sp, #32]
 801294e:	9307      	str	r3, [sp, #28]
 8012950:	9a01      	ldr	r2, [sp, #4]
 8012952:	2304      	movs	r3, #4
 8012954:	9e08      	ldr	r6, [sp, #32]
 8012956:	edd2 6a00 	vldr	s13, [r2]
 801295a:	ed96 4a00 	vldr	s8, [r6]
 801295e:	edd8 7a00 	vldr	s15, [r8]
 8012962:	ee36 6a84 	vadd.f32	s12, s13, s8
 8012966:	eddc 2a00 	vldr	s5, [ip]
 801296a:	ed96 7a01 	vldr	s14, [r6, #4]
 801296e:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8012972:	edd2 6a01 	vldr	s13, [r2, #4]
 8012976:	ee76 4a27 	vadd.f32	s9, s12, s15
 801297a:	ed98 2a01 	vldr	s4, [r8, #4]
 801297e:	ee76 5a87 	vadd.f32	s11, s13, s14
 8012982:	ed9c 5a01 	vldr	s10, [ip, #4]
 8012986:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801298a:	9d05      	ldr	r5, [sp, #20]
 801298c:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8012990:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8012994:	ee72 3a04 	vadd.f32	s7, s4, s8
 8012998:	9804      	ldr	r0, [sp, #16]
 801299a:	ee77 4a67 	vsub.f32	s9, s14, s15
 801299e:	4621      	mov	r1, r4
 80129a0:	edc2 6a00 	vstr	s13, [r2]
 80129a4:	ee76 6a67 	vsub.f32	s13, s12, s15
 80129a8:	ed98 3a01 	vldr	s6, [r8, #4]
 80129ac:	ee35 6ac2 	vsub.f32	s12, s11, s4
 80129b0:	eddc 1a01 	vldr	s3, [ip, #4]
 80129b4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80129b8:	ee35 3a83 	vadd.f32	s6, s11, s6
 80129bc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80129c0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80129c4:	ee73 5a21 	vadd.f32	s11, s6, s3
 80129c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129cc:	ee36 6a45 	vsub.f32	s12, s12, s10
 80129d0:	edc2 5a01 	vstr	s11, [r2, #4]
 80129d4:	ee35 5a04 	vadd.f32	s10, s10, s8
 80129d8:	9a06      	ldr	r2, [sp, #24]
 80129da:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80129de:	edd2 7a00 	vldr	s15, [r2]
 80129e2:	edd2 5a01 	vldr	s11, [r2, #4]
 80129e6:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80129ea:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80129ee:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80129f2:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80129f6:	ee77 7a62 	vsub.f32	s15, s14, s5
 80129fa:	ee74 5a25 	vadd.f32	s11, s8, s11
 80129fe:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8012a02:	edc8 5a00 	vstr	s11, [r8]
 8012a06:	edc8 4a01 	vstr	s9, [r8, #4]
 8012a0a:	edd5 4a01 	vldr	s9, [r5, #4]
 8012a0e:	ed95 7a00 	vldr	s14, [r5]
 8012a12:	9d07      	ldr	r5, [sp, #28]
 8012a14:	ee66 5a87 	vmul.f32	s11, s13, s14
 8012a18:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8012a1c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012a20:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012a24:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012a28:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012a2c:	edc6 6a01 	vstr	s13, [r6, #4]
 8012a30:	ed86 6a00 	vstr	s12, [r6]
 8012a34:	ed95 6a01 	vldr	s12, [r5, #4]
 8012a38:	ed95 7a00 	vldr	s14, [r5]
 8012a3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a3e:	ee65 6a07 	vmul.f32	s13, s10, s14
 8012a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012a46:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012a4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a4e:	ee37 5a45 	vsub.f32	s10, s14, s10
 8012a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a56:	ed8c 5a01 	vstr	s10, [ip, #4]
 8012a5a:	edcc 7a00 	vstr	s15, [ip]
 8012a5e:	6872      	ldr	r2, [r6, #4]
 8012a60:	f000 fe1e 	bl	80136a0 <arm_radix8_butterfly_f32>
 8012a64:	9802      	ldr	r0, [sp, #8]
 8012a66:	4621      	mov	r1, r4
 8012a68:	6872      	ldr	r2, [r6, #4]
 8012a6a:	2304      	movs	r3, #4
 8012a6c:	f000 fe18 	bl	80136a0 <arm_radix8_butterfly_f32>
 8012a70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012a72:	4621      	mov	r1, r4
 8012a74:	6872      	ldr	r2, [r6, #4]
 8012a76:	2304      	movs	r3, #4
 8012a78:	f000 fe12 	bl	80136a0 <arm_radix8_butterfly_f32>
 8012a7c:	9803      	ldr	r0, [sp, #12]
 8012a7e:	4621      	mov	r1, r4
 8012a80:	6872      	ldr	r2, [r6, #4]
 8012a82:	2304      	movs	r3, #4
 8012a84:	b00f      	add	sp, #60	@ 0x3c
 8012a86:	ecbd 8b06 	vpop	{d8-d10}
 8012a8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8e:	f000 be07 	b.w	80136a0 <arm_radix8_butterfly_f32>
 8012a92:	bf00      	nop

08012a94 <arm_cfft_f32>:
 8012a94:	2a01      	cmp	r2, #1
 8012a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	4617      	mov	r7, r2
 8012a9e:	460c      	mov	r4, r1
 8012aa0:	4698      	mov	r8, r3
 8012aa2:	8805      	ldrh	r5, [r0, #0]
 8012aa4:	d053      	beq.n	8012b4e <arm_cfft_f32+0xba>
 8012aa6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012aaa:	d04b      	beq.n	8012b44 <arm_cfft_f32+0xb0>
 8012aac:	d916      	bls.n	8012adc <arm_cfft_f32+0x48>
 8012aae:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8012ab2:	d01a      	beq.n	8012aea <arm_cfft_f32+0x56>
 8012ab4:	d95a      	bls.n	8012b6c <arm_cfft_f32+0xd8>
 8012ab6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8012aba:	d043      	beq.n	8012b44 <arm_cfft_f32+0xb0>
 8012abc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8012ac0:	d105      	bne.n	8012ace <arm_cfft_f32+0x3a>
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	4629      	mov	r1, r5
 8012ac6:	6872      	ldr	r2, [r6, #4]
 8012ac8:	2301      	movs	r3, #1
 8012aca:	f000 fde9 	bl	80136a0 <arm_radix8_butterfly_f32>
 8012ace:	f1b8 0f00 	cmp.w	r8, #0
 8012ad2:	d111      	bne.n	8012af8 <arm_cfft_f32+0x64>
 8012ad4:	2f01      	cmp	r7, #1
 8012ad6:	d016      	beq.n	8012b06 <arm_cfft_f32+0x72>
 8012ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012adc:	2d20      	cmp	r5, #32
 8012ade:	d031      	beq.n	8012b44 <arm_cfft_f32+0xb0>
 8012ae0:	d948      	bls.n	8012b74 <arm_cfft_f32+0xe0>
 8012ae2:	2d40      	cmp	r5, #64	@ 0x40
 8012ae4:	d0ed      	beq.n	8012ac2 <arm_cfft_f32+0x2e>
 8012ae6:	2d80      	cmp	r5, #128	@ 0x80
 8012ae8:	d1f1      	bne.n	8012ace <arm_cfft_f32+0x3a>
 8012aea:	4630      	mov	r0, r6
 8012aec:	4621      	mov	r1, r4
 8012aee:	f7ff fca7 	bl	8012440 <arm_cfft_radix8by2_f32>
 8012af2:	f1b8 0f00 	cmp.w	r8, #0
 8012af6:	d0ed      	beq.n	8012ad4 <arm_cfft_f32+0x40>
 8012af8:	4620      	mov	r0, r4
 8012afa:	89b1      	ldrh	r1, [r6, #12]
 8012afc:	68b2      	ldr	r2, [r6, #8]
 8012afe:	f7ed fb9f 	bl	8000240 <arm_bitreversal_32>
 8012b02:	2f01      	cmp	r7, #1
 8012b04:	d1e8      	bne.n	8012ad8 <arm_cfft_f32+0x44>
 8012b06:	ee07 5a90 	vmov	s15, r5
 8012b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b0e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012b12:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8012b16:	2d00      	cmp	r5, #0
 8012b18:	d0de      	beq.n	8012ad8 <arm_cfft_f32+0x44>
 8012b1a:	f104 0108 	add.w	r1, r4, #8
 8012b1e:	2300      	movs	r3, #0
 8012b20:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012b24:	3301      	adds	r3, #1
 8012b26:	ed51 7a01 	vldr	s15, [r1, #-4]
 8012b2a:	3108      	adds	r1, #8
 8012b2c:	429d      	cmp	r5, r3
 8012b2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012b32:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012b36:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012b3a:	ed41 7a03 	vstr	s15, [r1, #-12]
 8012b3e:	d1ef      	bne.n	8012b20 <arm_cfft_f32+0x8c>
 8012b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b44:	4630      	mov	r0, r6
 8012b46:	4621      	mov	r1, r4
 8012b48:	f7ff fd4c 	bl	80125e4 <arm_cfft_radix8by4_f32>
 8012b4c:	e7bf      	b.n	8012ace <arm_cfft_f32+0x3a>
 8012b4e:	b1a5      	cbz	r5, 8012b7a <arm_cfft_f32+0xe6>
 8012b50:	f101 030c 	add.w	r3, r1, #12
 8012b54:	2200      	movs	r2, #0
 8012b56:	ed53 7a02 	vldr	s15, [r3, #-8]
 8012b5a:	3201      	adds	r2, #1
 8012b5c:	3308      	adds	r3, #8
 8012b5e:	eef1 7a67 	vneg.f32	s15, s15
 8012b62:	4295      	cmp	r5, r2
 8012b64:	ed43 7a04 	vstr	s15, [r3, #-16]
 8012b68:	d1f5      	bne.n	8012b56 <arm_cfft_f32+0xc2>
 8012b6a:	e79c      	b.n	8012aa6 <arm_cfft_f32+0x12>
 8012b6c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8012b70:	d0a7      	beq.n	8012ac2 <arm_cfft_f32+0x2e>
 8012b72:	e7ac      	b.n	8012ace <arm_cfft_f32+0x3a>
 8012b74:	2d10      	cmp	r5, #16
 8012b76:	d0b8      	beq.n	8012aea <arm_cfft_f32+0x56>
 8012b78:	e7a9      	b.n	8012ace <arm_cfft_f32+0x3a>
 8012b7a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012b7e:	d896      	bhi.n	8012aae <arm_cfft_f32+0x1a>
 8012b80:	e7ac      	b.n	8012adc <arm_cfft_f32+0x48>
 8012b82:	bf00      	nop

08012b84 <arm_rfft_init_q15>:
 8012b84:	b289      	uxth	r1, r1
 8012b86:	b430      	push	{r4, r5}
 8012b88:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012b8c:	4d36      	ldr	r5, [pc, #216]	@ (8012c68 <arm_rfft_init_q15+0xe4>)
 8012b8e:	4c37      	ldr	r4, [pc, #220]	@ (8012c6c <arm_rfft_init_q15+0xe8>)
 8012b90:	7102      	strb	r2, [r0, #4]
 8012b92:	7143      	strb	r3, [r0, #5]
 8012b94:	6001      	str	r1, [r0, #0]
 8012b96:	60c5      	str	r5, [r0, #12]
 8012b98:	6104      	str	r4, [r0, #16]
 8012b9a:	d050      	beq.n	8012c3e <arm_rfft_init_q15+0xba>
 8012b9c:	d911      	bls.n	8012bc2 <arm_rfft_init_q15+0x3e>
 8012b9e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8012ba2:	d054      	beq.n	8012c4e <arm_rfft_init_q15+0xca>
 8012ba4:	d938      	bls.n	8012c18 <arm_rfft_init_q15+0x94>
 8012ba6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8012baa:	d022      	beq.n	8012bf2 <arm_rfft_init_q15+0x6e>
 8012bac:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8012bb0:	d155      	bne.n	8012c5e <arm_rfft_init_q15+0xda>
 8012bb2:	2101      	movs	r1, #1
 8012bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8012c70 <arm_rfft_init_q15+0xec>)
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	6081      	str	r1, [r0, #8]
 8012bba:	6142      	str	r2, [r0, #20]
 8012bbc:	b258      	sxtb	r0, r3
 8012bbe:	bc30      	pop	{r4, r5}
 8012bc0:	4770      	bx	lr
 8012bc2:	2940      	cmp	r1, #64	@ 0x40
 8012bc4:	d033      	beq.n	8012c2e <arm_rfft_init_q15+0xaa>
 8012bc6:	d91c      	bls.n	8012c02 <arm_rfft_init_q15+0x7e>
 8012bc8:	2980      	cmp	r1, #128	@ 0x80
 8012bca:	d00a      	beq.n	8012be2 <arm_rfft_init_q15+0x5e>
 8012bcc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8012bd0:	d145      	bne.n	8012c5e <arm_rfft_init_q15+0xda>
 8012bd2:	2120      	movs	r1, #32
 8012bd4:	4a27      	ldr	r2, [pc, #156]	@ (8012c74 <arm_rfft_init_q15+0xf0>)
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	6081      	str	r1, [r0, #8]
 8012bda:	6142      	str	r2, [r0, #20]
 8012bdc:	b258      	sxtb	r0, r3
 8012bde:	bc30      	pop	{r4, r5}
 8012be0:	4770      	bx	lr
 8012be2:	2140      	movs	r1, #64	@ 0x40
 8012be4:	4a24      	ldr	r2, [pc, #144]	@ (8012c78 <arm_rfft_init_q15+0xf4>)
 8012be6:	2300      	movs	r3, #0
 8012be8:	6081      	str	r1, [r0, #8]
 8012bea:	6142      	str	r2, [r0, #20]
 8012bec:	b258      	sxtb	r0, r3
 8012bee:	bc30      	pop	{r4, r5}
 8012bf0:	4770      	bx	lr
 8012bf2:	2102      	movs	r1, #2
 8012bf4:	4a21      	ldr	r2, [pc, #132]	@ (8012c7c <arm_rfft_init_q15+0xf8>)
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	6081      	str	r1, [r0, #8]
 8012bfa:	6142      	str	r2, [r0, #20]
 8012bfc:	b258      	sxtb	r0, r3
 8012bfe:	bc30      	pop	{r4, r5}
 8012c00:	4770      	bx	lr
 8012c02:	2920      	cmp	r1, #32
 8012c04:	d12b      	bne.n	8012c5e <arm_rfft_init_q15+0xda>
 8012c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8012c80 <arm_rfft_init_q15+0xfc>)
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	6081      	str	r1, [r0, #8]
 8012c10:	6142      	str	r2, [r0, #20]
 8012c12:	b258      	sxtb	r0, r3
 8012c14:	bc30      	pop	{r4, r5}
 8012c16:	4770      	bx	lr
 8012c18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012c1c:	d11f      	bne.n	8012c5e <arm_rfft_init_q15+0xda>
 8012c1e:	2108      	movs	r1, #8
 8012c20:	4a18      	ldr	r2, [pc, #96]	@ (8012c84 <arm_rfft_init_q15+0x100>)
 8012c22:	2300      	movs	r3, #0
 8012c24:	6081      	str	r1, [r0, #8]
 8012c26:	6142      	str	r2, [r0, #20]
 8012c28:	b258      	sxtb	r0, r3
 8012c2a:	bc30      	pop	{r4, r5}
 8012c2c:	4770      	bx	lr
 8012c2e:	2180      	movs	r1, #128	@ 0x80
 8012c30:	4a15      	ldr	r2, [pc, #84]	@ (8012c88 <arm_rfft_init_q15+0x104>)
 8012c32:	2300      	movs	r3, #0
 8012c34:	6081      	str	r1, [r0, #8]
 8012c36:	6142      	str	r2, [r0, #20]
 8012c38:	b258      	sxtb	r0, r3
 8012c3a:	bc30      	pop	{r4, r5}
 8012c3c:	4770      	bx	lr
 8012c3e:	2110      	movs	r1, #16
 8012c40:	4a12      	ldr	r2, [pc, #72]	@ (8012c8c <arm_rfft_init_q15+0x108>)
 8012c42:	2300      	movs	r3, #0
 8012c44:	6081      	str	r1, [r0, #8]
 8012c46:	6142      	str	r2, [r0, #20]
 8012c48:	b258      	sxtb	r0, r3
 8012c4a:	bc30      	pop	{r4, r5}
 8012c4c:	4770      	bx	lr
 8012c4e:	2104      	movs	r1, #4
 8012c50:	4a0f      	ldr	r2, [pc, #60]	@ (8012c90 <arm_rfft_init_q15+0x10c>)
 8012c52:	2300      	movs	r3, #0
 8012c54:	6081      	str	r1, [r0, #8]
 8012c56:	6142      	str	r2, [r0, #20]
 8012c58:	b258      	sxtb	r0, r3
 8012c5a:	bc30      	pop	{r4, r5}
 8012c5c:	4770      	bx	lr
 8012c5e:	23ff      	movs	r3, #255	@ 0xff
 8012c60:	bc30      	pop	{r4, r5}
 8012c62:	b258      	sxtb	r0, r3
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop
 8012c68:	0801e8ec 	.word	0x0801e8ec
 8012c6c:	080228ec 	.word	0x080228ec
 8012c70:	0802691c 	.word	0x0802691c
 8012c74:	0802695c 	.word	0x0802695c
 8012c78:	0802693c 	.word	0x0802693c
 8012c7c:	0802696c 	.word	0x0802696c
 8012c80:	080268fc 	.word	0x080268fc
 8012c84:	0802692c 	.word	0x0802692c
 8012c88:	0802690c 	.word	0x0802690c
 8012c8c:	0802694c 	.word	0x0802694c
 8012c90:	080268ec 	.word	0x080268ec

08012c94 <arm_fir_q15>:
 8012c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c98:	4605      	mov	r5, r0
 8012c9a:	b095      	sub	sp, #84	@ 0x54
 8012c9c:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8012ca0:	686c      	ldr	r4, [r5, #4]
 8012ca2:	9012      	str	r0, [sp, #72]	@ 0x48
 8012ca4:	8800      	ldrh	r0, [r0, #0]
 8012ca6:	4626      	mov	r6, r4
 8012ca8:	940c      	str	r4, [sp, #48]	@ 0x30
 8012caa:	4486      	add	lr, r0
 8012cac:	68ac      	ldr	r4, [r5, #8]
 8012cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012cb0:	089b      	lsrs	r3, r3, #2
 8012cb2:	4627      	mov	r7, r4
 8012cb4:	9408      	str	r4, [sp, #32]
 8012cb6:	eb06 044e 	add.w	r4, r6, lr, lsl #1
 8012cba:	910e      	str	r1, [sp, #56]	@ 0x38
 8012cbc:	9010      	str	r0, [sp, #64]	@ 0x40
 8012cbe:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012cc0:	4625      	mov	r5, r4
 8012cc2:	940d      	str	r4, [sp, #52]	@ 0x34
 8012cc4:	9311      	str	r3, [sp, #68]	@ 0x44
 8012cc6:	f000 80be 	beq.w	8012e46 <arm_fir_q15+0x1b2>
 8012cca:	4604      	mov	r4, r0
 8012ccc:	3108      	adds	r1, #8
 8012cce:	0880      	lsrs	r0, r0, #2
 8012cd0:	3208      	adds	r2, #8
 8012cd2:	f004 0403 	and.w	r4, r4, #3
 8012cd6:	9102      	str	r1, [sp, #8]
 8012cd8:	00c1      	lsls	r1, r0, #3
 8012cda:	9205      	str	r2, [sp, #20]
 8012cdc:	9409      	str	r4, [sp, #36]	@ 0x24
 8012cde:	462c      	mov	r4, r5
 8012ce0:	f106 0208 	add.w	r2, r6, #8
 8012ce4:	9304      	str	r3, [sp, #16]
 8012ce6:	3408      	adds	r4, #8
 8012ce8:	187b      	adds	r3, r7, r1
 8012cea:	9007      	str	r0, [sp, #28]
 8012cec:	9401      	str	r4, [sp, #4]
 8012cee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012cf0:	9203      	str	r2, [sp, #12]
 8012cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cf4:	9a02      	ldr	r2, [sp, #8]
 8012cf6:	9d01      	ldr	r5, [sp, #4]
 8012cf8:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 8012cfc:	4610      	mov	r0, r2
 8012cfe:	9e03      	ldr	r6, [sp, #12]
 8012d00:	f825 3c08 	strh.w	r3, [r5, #-8]
 8012d04:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 8012d08:	4631      	mov	r1, r6
 8012d0a:	f825 3c06 	strh.w	r3, [r5, #-6]
 8012d0e:	f830 3c04 	ldrh.w	r3, [r0, #-4]
 8012d12:	f825 3c04 	strh.w	r3, [r5, #-4]
 8012d16:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 8012d1a:	f825 3c02 	strh.w	r3, [r5, #-2]
 8012d1e:	9d07      	ldr	r5, [sp, #28]
 8012d20:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8012d24:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8012d28:	2d00      	cmp	r5, #0
 8012d2a:	f000 8111 	beq.w	8012f50 <arm_fir_q15+0x2bc>
 8012d2e:	f106 0308 	add.w	r3, r6, #8
 8012d32:	9a08      	ldr	r2, [sp, #32]
 8012d34:	9500      	str	r5, [sp, #0]
 8012d36:	4619      	mov	r1, r3
 8012d38:	9306      	str	r3, [sp, #24]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	f102 0b08 	add.w	fp, r2, #8
 8012d40:	468a      	mov	sl, r1
 8012d42:	469c      	mov	ip, r3
 8012d44:	461e      	mov	r6, r3
 8012d46:	469e      	mov	lr, r3
 8012d48:	461a      	mov	r2, r3
 8012d4a:	461f      	mov	r7, r3
 8012d4c:	4698      	mov	r8, r3
 8012d4e:	4665      	mov	r5, ip
 8012d50:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 8012d54:	fbc0 85c1 	smlald	r8, r5, r0, r1
 8012d58:	fbc4 cec1 	smlald	ip, lr, r4, r1
 8012d5c:	eac4 0900 	pkhbt	r9, r4, r0
 8012d60:	f85a 0c08 	ldr.w	r0, [sl, #-8]
 8012d64:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8012d68:	eac0 0904 	pkhbt	r9, r0, r4
 8012d6c:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8012d70:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8012d74:	fbc4 85c1 	smlald	r8, r5, r4, r1
 8012d78:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 8012d7c:	fbc0 cec1 	smlald	ip, lr, r0, r1
 8012d80:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 8012d84:	eac4 0900 	pkhbt	r9, r4, r0
 8012d88:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 8012d8c:	9900      	ldr	r1, [sp, #0]
 8012d8e:	f10b 0b08 	add.w	fp, fp, #8
 8012d92:	f10a 0a08 	add.w	sl, sl, #8
 8012d96:	3901      	subs	r1, #1
 8012d98:	9100      	str	r1, [sp, #0]
 8012d9a:	d1d9      	bne.n	8012d50 <arm_fir_q15+0xbc>
 8012d9c:	46c1      	mov	r9, r8
 8012d9e:	9903      	ldr	r1, [sp, #12]
 8012da0:	46a8      	mov	r8, r5
 8012da2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012da4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012da8:	4429      	add	r1, r5
 8012daa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012dac:	b175      	cbz	r5, 8012dcc <arm_fir_q15+0x138>
 8012dae:	f8da 5000 	ldr.w	r5, [sl]
 8012db2:	fbc0 98c5 	smlald	r9, r8, r0, r5
 8012db6:	fbc4 cec5 	smlald	ip, lr, r4, r5
 8012dba:	eac4 0000 	pkhbt	r0, r4, r0
 8012dbe:	6809      	ldr	r1, [r1, #0]
 8012dc0:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 8012dc4:	eac1 0404 	pkhbt	r4, r1, r4
 8012dc8:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 8012dcc:	9901      	ldr	r1, [sp, #4]
 8012dce:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 8012dd2:	9805      	ldr	r0, [sp, #20]
 8012dd4:	0bdb      	lsrs	r3, r3, #15
 8012dd6:	3108      	adds	r1, #8
 8012dd8:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8012ddc:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8012de0:	9101      	str	r1, [sp, #4]
 8012de2:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 8012de6:	9902      	ldr	r1, [sp, #8]
 8012de8:	0bd2      	lsrs	r2, r2, #15
 8012dea:	f30c 0c0f 	ssat	ip, #16, ip
 8012dee:	f303 030f 	ssat	r3, #16, r3
 8012df2:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 8012df6:	f840 3c04 	str.w	r3, [r0, #-4]
 8012dfa:	f100 0308 	add.w	r3, r0, #8
 8012dfe:	3108      	adds	r1, #8
 8012e00:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 8012e04:	9305      	str	r3, [sp, #20]
 8012e06:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 8012e0a:	9b04      	ldr	r3, [sp, #16]
 8012e0c:	9102      	str	r1, [sp, #8]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	9906      	ldr	r1, [sp, #24]
 8012e12:	f309 090f 	ssat	r9, #16, r9
 8012e16:	f302 020f 	ssat	r2, #16, r2
 8012e1a:	9103      	str	r1, [sp, #12]
 8012e1c:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 8012e20:	9304      	str	r3, [sp, #16]
 8012e22:	f840 2c08 	str.w	r2, [r0, #-8]
 8012e26:	f47f af65 	bne.w	8012cf4 <arm_fir_q15+0x60>
 8012e2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e2e:	00db      	lsls	r3, r3, #3
 8012e30:	441a      	add	r2, r3
 8012e32:	920d      	str	r2, [sp, #52]	@ 0x34
 8012e34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e36:	441a      	add	r2, r3
 8012e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8012e3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e3c:	441a      	add	r2, r3
 8012e3e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012e42:	441a      	add	r2, r3
 8012e44:	920c      	str	r2, [sp, #48]	@ 0x30
 8012e46:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012e48:	f013 0b03 	ands.w	fp, r3, #3
 8012e4c:	d03f      	beq.n	8012ece <arm_fir_q15+0x23a>
 8012e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e50:	465e      	mov	r6, fp
 8012e52:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8012e56:	f1a3 0e02 	sub.w	lr, r3, #2
 8012e5a:	9b08      	ldr	r3, [sp, #32]
 8012e5c:	f8cd b004 	str.w	fp, [sp, #4]
 8012e60:	f103 0804 	add.w	r8, r3, #4
 8012e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012e66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8012e6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e6c:	f8cd c000 	str.w	ip, [sp]
 8012e70:	1d1f      	adds	r7, r3, #4
 8012e72:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 8012e76:	f83c 0b02 	ldrh.w	r0, [ip], #2
 8012e7a:	4642      	mov	r2, r8
 8012e7c:	463b      	mov	r3, r7
 8012e7e:	9900      	ldr	r1, [sp, #0]
 8012e80:	2400      	movs	r4, #0
 8012e82:	2500      	movs	r5, #0
 8012e84:	f82e 0f02 	strh.w	r0, [lr, #2]!
 8012e88:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 8012e8c:	3901      	subs	r1, #1
 8012e8e:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 8012e92:	f102 0204 	add.w	r2, r2, #4
 8012e96:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 8012e9a:	f103 0304 	add.w	r3, r3, #4
 8012e9e:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8012ea2:	f832 ac06 	ldrh.w	sl, [r2, #-6]
 8012ea6:	fbc0 458a 	smlalbb	r4, r5, r0, sl
 8012eaa:	d1ed      	bne.n	8012e88 <arm_fir_q15+0x1f4>
 8012eac:	0be3      	lsrs	r3, r4, #15
 8012eae:	3e01      	subs	r6, #1
 8012eb0:	f107 0702 	add.w	r7, r7, #2
 8012eb4:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8012eb8:	f303 030f 	ssat	r3, #16, r3
 8012ebc:	f829 3b02 	strh.w	r3, [r9], #2
 8012ec0:	d1d9      	bne.n	8012e76 <arm_fir_q15+0x1e2>
 8012ec2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ec4:	f8dd b004 	ldr.w	fp, [sp, #4]
 8012ec8:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8012ecc:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ed0:	1e5f      	subs	r7, r3, #1
 8012ed2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ed4:	08bd      	lsrs	r5, r7, #2
 8012ed6:	685e      	ldr	r6, [r3, #4]
 8012ed8:	d02c      	beq.n	8012f34 <arm_fir_q15+0x2a0>
 8012eda:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012edc:	f106 0210 	add.w	r2, r6, #16
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	3310      	adds	r3, #16
 8012ee4:	4290      	cmp	r0, r2
 8012ee6:	bf38      	it	cc
 8012ee8:	429e      	cmpcc	r6, r3
 8012eea:	bf2c      	ite	cs
 8012eec:	2301      	movcs	r3, #1
 8012eee:	2300      	movcc	r3, #0
 8012ef0:	2d06      	cmp	r5, #6
 8012ef2:	bf94      	ite	ls
 8012ef4:	2300      	movls	r3, #0
 8012ef6:	f003 0301 	andhi.w	r3, r3, #1
 8012efa:	b3bb      	cbz	r3, 8012f6c <arm_fir_q15+0x2d8>
 8012efc:	4603      	mov	r3, r0
 8012efe:	4333      	orrs	r3, r6
 8012f00:	079b      	lsls	r3, r3, #30
 8012f02:	d133      	bne.n	8012f6c <arm_fir_q15+0x2d8>
 8012f04:	f100 0208 	add.w	r2, r0, #8
 8012f08:	f106 0308 	add.w	r3, r6, #8
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	3101      	adds	r1, #1
 8012f10:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8012f14:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012f18:	3308      	adds	r3, #8
 8012f1a:	42a9      	cmp	r1, r5
 8012f1c:	f843 4c10 	str.w	r4, [r3, #-16]
 8012f20:	f843 0c0c 	str.w	r0, [r3, #-12]
 8012f24:	f102 0208 	add.w	r2, r2, #8
 8012f28:	d1f1      	bne.n	8012f0e <arm_fir_q15+0x27a>
 8012f2a:	00ed      	lsls	r5, r5, #3
 8012f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f2e:	442e      	add	r6, r5
 8012f30:	442b      	add	r3, r5
 8012f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f34:	f017 0303 	ands.w	r3, r7, #3
 8012f38:	d007      	beq.n	8012f4a <arm_fir_q15+0x2b6>
 8012f3a:	3e02      	subs	r6, #2
 8012f3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012f3e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8012f42:	3b01      	subs	r3, #1
 8012f44:	f826 1f02 	strh.w	r1, [r6, #2]!
 8012f48:	d1f9      	bne.n	8012f3e <arm_fir_q15+0x2aa>
 8012f4a:	b015      	add	sp, #84	@ 0x54
 8012f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f50:	46a8      	mov	r8, r5
 8012f52:	462b      	mov	r3, r5
 8012f54:	462e      	mov	r6, r5
 8012f56:	46ac      	mov	ip, r5
 8012f58:	46ae      	mov	lr, r5
 8012f5a:	462a      	mov	r2, r5
 8012f5c:	462f      	mov	r7, r5
 8012f5e:	46a9      	mov	r9, r5
 8012f60:	f101 0508 	add.w	r5, r1, #8
 8012f64:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012f68:	9506      	str	r5, [sp, #24]
 8012f6a:	e71e      	b.n	8012daa <arm_fir_q15+0x116>
 8012f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f6e:	f106 0208 	add.w	r2, r6, #8
 8012f72:	4629      	mov	r1, r5
 8012f74:	3308      	adds	r3, #8
 8012f76:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8012f7a:	3901      	subs	r1, #1
 8012f7c:	f103 0308 	add.w	r3, r3, #8
 8012f80:	f102 0208 	add.w	r2, r2, #8
 8012f84:	f822 0c10 	strh.w	r0, [r2, #-16]
 8012f88:	f833 0c0e 	ldrh.w	r0, [r3, #-14]
 8012f8c:	f822 0c0e 	strh.w	r0, [r2, #-14]
 8012f90:	f833 0c0c 	ldrh.w	r0, [r3, #-12]
 8012f94:	f822 0c0c 	strh.w	r0, [r2, #-12]
 8012f98:	f833 0c0a 	ldrh.w	r0, [r3, #-10]
 8012f9c:	f822 0c0a 	strh.w	r0, [r2, #-10]
 8012fa0:	d1e9      	bne.n	8012f76 <arm_fir_q15+0x2e2>
 8012fa2:	e7c2      	b.n	8012f2a <arm_fir_q15+0x296>

08012fa4 <arm_fir_init_q15>:
 8012fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa6:	f011 0401 	ands.w	r4, r1, #1
 8012faa:	d10e      	bne.n	8012fca <arm_fir_init_q15+0x26>
 8012fac:	461f      	mov	r7, r3
 8012fae:	9b06      	ldr	r3, [sp, #24]
 8012fb0:	8001      	strh	r1, [r0, #0]
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	18ce      	adds	r6, r1, r3
 8012fb6:	6082      	str	r2, [r0, #8]
 8012fb8:	4621      	mov	r1, r4
 8012fba:	4638      	mov	r0, r7
 8012fbc:	0072      	lsls	r2, r6, #1
 8012fbe:	f001 f850 	bl	8014062 <memset>
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	606f      	str	r7, [r5, #4]
 8012fc6:	b240      	sxtb	r0, r0
 8012fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fca:	20ff      	movs	r0, #255	@ 0xff
 8012fcc:	e7fb      	b.n	8012fc6 <arm_fir_init_q15+0x22>
 8012fce:	bf00      	nop

08012fd0 <arm_fir_init_f32>:
 8012fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd2:	9e06      	ldr	r6, [sp, #24]
 8012fd4:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8012fd8:	460f      	mov	r7, r1
 8012fda:	6082      	str	r2, [r0, #8]
 8012fdc:	4434      	add	r4, r6
 8012fde:	4605      	mov	r5, r0
 8012fe0:	461e      	mov	r6, r3
 8012fe2:	8007      	strh	r7, [r0, #0]
 8012fe4:	19e2      	adds	r2, r4, r7
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	4618      	mov	r0, r3
 8012fea:	0092      	lsls	r2, r2, #2
 8012fec:	f001 f839 	bl	8014062 <memset>
 8012ff0:	606e      	str	r6, [r5, #4]
 8012ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ff4 <arm_fir_f32>:
 8012ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	ed2d 8b10 	vpush	{d8-d15}
 8012ffe:	b089      	sub	sp, #36	@ 0x24
 8013000:	8834      	ldrh	r4, [r6, #0]
 8013002:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8013006:	9004      	str	r0, [sp, #16]
 8013008:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 801300c:	9305      	str	r3, [sp, #20]
 801300e:	08db      	lsrs	r3, r3, #3
 8013010:	4420      	add	r0, r4
 8013012:	9402      	str	r4, [sp, #8]
 8013014:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8013018:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 801301c:	9303      	str	r3, [sp, #12]
 801301e:	9001      	str	r0, [sp, #4]
 8013020:	f000 81eb 	beq.w	80133fa <arm_fir_f32+0x406>
 8013024:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8013028:	469e      	mov	lr, r3
 801302a:	f004 0a07 	and.w	sl, r4, #7
 801302e:	f100 0720 	add.w	r7, r0, #32
 8013032:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8013036:	f101 0620 	add.w	r6, r1, #32
 801303a:	9107      	str	r1, [sp, #28]
 801303c:	4611      	mov	r1, r2
 801303e:	eb08 0003 	add.w	r0, r8, r3
 8013042:	3b04      	subs	r3, #4
 8013044:	f10c 0420 	add.w	r4, ip, #32
 8013048:	f102 0520 	add.w	r5, r2, #32
 801304c:	f8cd c018 	str.w	ip, [sp, #24]
 8013050:	4652      	mov	r2, sl
 8013052:	4684      	mov	ip, r0
 8013054:	468a      	mov	sl, r1
 8013056:	4648      	mov	r0, r9
 8013058:	4699      	mov	r9, r3
 801305a:	f856 3c20 	ldr.w	r3, [r6, #-32]
 801305e:	1f21      	subs	r1, r4, #4
 8013060:	ed9f 3aef 	vldr	s6, [pc, #956]	@ 8013420 <arm_fir_f32+0x42c>
 8013064:	f847 3c20 	str.w	r3, [r7, #-32]
 8013068:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 801306c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8013070:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8013074:	f847 3c18 	str.w	r3, [r7, #-24]
 8013078:	f856 3c14 	ldr.w	r3, [r6, #-20]
 801307c:	f847 3c14 	str.w	r3, [r7, #-20]
 8013080:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8013084:	f847 3c10 	str.w	r3, [r7, #-16]
 8013088:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 801308c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8013090:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8013094:	f847 3c08 	str.w	r3, [r7, #-8]
 8013098:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801309c:	f847 3c04 	str.w	r3, [r7, #-4]
 80130a0:	ed14 8a08 	vldr	s16, [r4, #-32]	@ 0xffffffe0
 80130a4:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 80130a8:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 80130ac:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 80130b0:	ed14 1a04 	vldr	s2, [r4, #-16]
 80130b4:	ed54 0a03 	vldr	s1, [r4, #-12]
 80130b8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80130bc:	2800      	cmp	r0, #0
 80130be:	f000 81f6 	beq.w	80134ae <arm_fir_f32+0x4ba>
 80130c2:	eeb0 9a43 	vmov.f32	s18, s6
 80130c6:	f108 0120 	add.w	r1, r8, #32
 80130ca:	eeb0 aa43 	vmov.f32	s20, s6
 80130ce:	f104 031c 	add.w	r3, r4, #28
 80130d2:	eef0 aa43 	vmov.f32	s21, s6
 80130d6:	4683      	mov	fp, r0
 80130d8:	eeb0 ba43 	vmov.f32	s22, s6
 80130dc:	eef0 ba43 	vmov.f32	s23, s6
 80130e0:	eeb0 ca43 	vmov.f32	s24, s6
 80130e4:	eeb0 4a43 	vmov.f32	s8, s6
 80130e8:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 80130ec:	f1bb 0b01 	subs.w	fp, fp, #1
 80130f0:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 80130f4:	f101 0120 	add.w	r1, r1, #32
 80130f8:	ee28 fa23 	vmul.f32	s30, s16, s7
 80130fc:	ed51 4a0f 	vldr	s9, [r1, #-60]	@ 0xffffffc4
 8013100:	ee62 eaa3 	vmul.f32	s29, s5, s7
 8013104:	ed13 8a07 	vldr	s16, [r3, #-28]	@ 0xffffffe4
 8013108:	ee22 ea23 	vmul.f32	s28, s4, s7
 801310c:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 8013110:	ee61 daa3 	vmul.f32	s27, s3, s7
 8013114:	ed51 5a0d 	vldr	s11, [r1, #-52]	@ 0xffffffcc
 8013118:	ee21 da23 	vmul.f32	s26, s2, s7
 801311c:	ed11 6a0c 	vldr	s12, [r1, #-48]	@ 0xffffffd0
 8013120:	ee60 caa3 	vmul.f32	s25, s1, s7
 8013124:	ed51 6a0b 	vldr	s13, [r1, #-44]	@ 0xffffffd4
 8013128:	ee60 9a23 	vmul.f32	s19, s0, s7
 801312c:	ed11 7a0a 	vldr	s14, [r1, #-40]	@ 0xffffffd8
 8013130:	ee68 3aa3 	vmul.f32	s7, s17, s7
 8013134:	ed51 7a09 	vldr	s15, [r1, #-36]	@ 0xffffffdc
 8013138:	ee3f 4a04 	vadd.f32	s8, s30, s8
 801313c:	f103 0320 	add.w	r3, r3, #32
 8013140:	ee22 faa4 	vmul.f32	s30, s5, s9
 8013144:	ed53 2a0e 	vldr	s5, [r3, #-56]	@ 0xffffffc8
 8013148:	ee3e ca8c 	vadd.f32	s24, s29, s24
 801314c:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8013150:	ee62 ea24 	vmul.f32	s29, s4, s9
 8013154:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8013158:	ee3d ba8b 	vadd.f32	s22, s27, s22
 801315c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8013160:	ee61 da24 	vmul.f32	s27, s2, s9
 8013164:	ee20 daa4 	vmul.f32	s26, s1, s9
 8013168:	ee3c aa8a 	vadd.f32	s20, s25, s20
 801316c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8013170:	ee60 ca24 	vmul.f32	s25, s0, s9
 8013174:	ee68 9aa4 	vmul.f32	s19, s17, s9
 8013178:	ee33 3a83 	vadd.f32	s6, s7, s6
 801317c:	ee68 4a24 	vmul.f32	s9, s16, s9
 8013180:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8013184:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8013188:	ee22 fa05 	vmul.f32	s30, s4, s10
 801318c:	ed13 2a0d 	vldr	s4, [r3, #-52]	@ 0xffffffcc
 8013190:	ee61 ea85 	vmul.f32	s29, s3, s10
 8013194:	ee74 4a83 	vadd.f32	s9, s9, s6
 8013198:	ee7e ba2b 	vadd.f32	s23, s28, s23
 801319c:	ee3d ba8b 	vadd.f32	s22, s27, s22
 80131a0:	ee21 ea05 	vmul.f32	s28, s2, s10
 80131a4:	ee60 da85 	vmul.f32	s27, s1, s10
 80131a8:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80131ac:	ee3c aa8a 	vadd.f32	s20, s25, s20
 80131b0:	ee20 da05 	vmul.f32	s26, s0, s10
 80131b4:	ee68 ca85 	vmul.f32	s25, s17, s10
 80131b8:	ee39 9a89 	vadd.f32	s18, s19, s18
 80131bc:	ee68 9a05 	vmul.f32	s19, s16, s10
 80131c0:	ee22 5a85 	vmul.f32	s10, s5, s10
 80131c4:	ee3f 4a04 	vadd.f32	s8, s30, s8
 80131c8:	ee3e ca8c 	vadd.f32	s24, s29, s24
 80131cc:	ee21 faa5 	vmul.f32	s30, s3, s11
 80131d0:	ed53 1a0c 	vldr	s3, [r3, #-48]	@ 0xffffffd0
 80131d4:	ee61 ea25 	vmul.f32	s29, s2, s11
 80131d8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80131dc:	ee7e ba2b 	vadd.f32	s23, s28, s23
 80131e0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 80131e4:	ee20 eaa5 	vmul.f32	s28, s1, s11
 80131e8:	ee60 da25 	vmul.f32	s27, s0, s11
 80131ec:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80131f0:	ee3c aa8a 	vadd.f32	s20, s25, s20
 80131f4:	ee28 daa5 	vmul.f32	s26, s17, s11
 80131f8:	ee68 ca25 	vmul.f32	s25, s16, s11
 80131fc:	ee39 9a89 	vadd.f32	s18, s19, s18
 8013200:	ee62 9aa5 	vmul.f32	s19, s5, s11
 8013204:	ee62 5a25 	vmul.f32	s11, s4, s11
 8013208:	ee3c aa8a 	vadd.f32	s20, s25, s20
 801320c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8013210:	ee75 5a85 	vadd.f32	s11, s11, s10
 8013214:	ee21 fa06 	vmul.f32	s30, s2, s12
 8013218:	ed13 1a0b 	vldr	s2, [r3, #-44]	@ 0xffffffd4
 801321c:	ee22 5a06 	vmul.f32	s10, s4, s12
 8013220:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8013224:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8013228:	ee60 ea86 	vmul.f32	s29, s1, s12
 801322c:	ee20 ea06 	vmul.f32	s28, s0, s12
 8013230:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8013234:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8013238:	ee68 da86 	vmul.f32	s27, s17, s12
 801323c:	ee28 da06 	vmul.f32	s26, s16, s12
 8013240:	ee62 ca86 	vmul.f32	s25, s5, s12
 8013244:	ee39 9a89 	vadd.f32	s18, s19, s18
 8013248:	ee21 6a86 	vmul.f32	s12, s3, s12
 801324c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8013250:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8013254:	ee20 faa6 	vmul.f32	s30, s1, s13
 8013258:	ed53 0a0a 	vldr	s1, [r3, #-40]	@ 0xffffffd8
 801325c:	ee60 ea26 	vmul.f32	s29, s0, s13
 8013260:	ee36 6a25 	vadd.f32	s12, s12, s11
 8013264:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8013268:	ee61 5aa6 	vmul.f32	s11, s3, s13
 801326c:	ee28 eaa6 	vmul.f32	s28, s17, s13
 8013270:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8013274:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8013278:	ee68 da26 	vmul.f32	s27, s16, s13
 801327c:	ee22 daa6 	vmul.f32	s26, s5, s13
 8013280:	ee7c ca8a 	vadd.f32	s25, s25, s20
 8013284:	ee35 9a09 	vadd.f32	s18, s10, s18
 8013288:	ee22 aa26 	vmul.f32	s20, s4, s13
 801328c:	ee61 6a26 	vmul.f32	s13, s2, s13
 8013290:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8013294:	ee35 9a89 	vadd.f32	s18, s11, s18
 8013298:	ee3f 4a04 	vadd.f32	s8, s30, s8
 801329c:	ee3e ca8c 	vadd.f32	s24, s29, s24
 80132a0:	ee20 fa07 	vmul.f32	s30, s0, s14
 80132a4:	ed13 0a09 	vldr	s0, [r3, #-36]	@ 0xffffffdc
 80132a8:	ee68 ea87 	vmul.f32	s29, s17, s14
 80132ac:	ee7e ba2b 	vadd.f32	s23, s28, s23
 80132b0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 80132b4:	ee28 ea07 	vmul.f32	s28, s16, s14
 80132b8:	ee62 da87 	vmul.f32	s27, s5, s14
 80132bc:	ee22 da07 	vmul.f32	s26, s4, s14
 80132c0:	ee7a ca2c 	vadd.f32	s25, s20, s25
 80132c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80132c8:	ee21 aa87 	vmul.f32	s20, s3, s14
 80132cc:	ee20 3a87 	vmul.f32	s6, s1, s14
 80132d0:	ee21 6a07 	vmul.f32	s12, s2, s14
 80132d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80132d8:	ee68 5a27 	vmul.f32	s11, s16, s15
 80132dc:	ee22 5aa7 	vmul.f32	s10, s5, s15
 80132e0:	ee62 4a27 	vmul.f32	s9, s4, s15
 80132e4:	ee3d da2a 	vadd.f32	s26, s26, s21
 80132e8:	ee7a ca2c 	vadd.f32	s25, s20, s25
 80132ec:	ee61 aaa7 	vmul.f32	s21, s3, s15
 80132f0:	ee21 aa27 	vmul.f32	s20, s2, s15
 80132f4:	ee36 7a09 	vadd.f32	s14, s12, s18
 80132f8:	ee3f 4a04 	vadd.f32	s8, s30, s8
 80132fc:	ee20 9aa7 	vmul.f32	s18, s1, s15
 8013300:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8013304:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8013308:	ee3d ba8b 	vadd.f32	s22, s27, s22
 801330c:	ee33 3a26 	vadd.f32	s6, s6, s13
 8013310:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013314:	ee38 4a84 	vadd.f32	s8, s17, s8
 8013318:	ee35 ca8c 	vadd.f32	s24, s11, s24
 801331c:	ee75 ba2b 	vadd.f32	s23, s10, s23
 8013320:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8013324:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8013328:	ee3a aa2c 	vadd.f32	s20, s20, s25
 801332c:	ee39 9a07 	vadd.f32	s18, s18, s14
 8013330:	ee37 3a83 	vadd.f32	s6, s15, s6
 8013334:	f47f aed8 	bne.w	80130e8 <arm_fir_f32+0xf4>
 8013338:	eb09 0104 	add.w	r1, r9, r4
 801333c:	46e3      	mov	fp, ip
 801333e:	b3a2      	cbz	r2, 80133aa <arm_fir_f32+0x3b6>
 8013340:	4613      	mov	r3, r2
 8013342:	ecbb 6a01 	vldmia	fp!, {s12}
 8013346:	3b01      	subs	r3, #1
 8013348:	ecf1 5a01 	vldmia	r1!, {s11}
 801334c:	ee68 8a06 	vmul.f32	s17, s16, s12
 8013350:	ee62 3a86 	vmul.f32	s7, s5, s12
 8013354:	ee62 4a06 	vmul.f32	s9, s4, s12
 8013358:	ee21 5a86 	vmul.f32	s10, s3, s12
 801335c:	ee61 6a06 	vmul.f32	s13, s2, s12
 8013360:	ee20 7a86 	vmul.f32	s14, s1, s12
 8013364:	ee60 7a06 	vmul.f32	s15, s0, s12
 8013368:	ee25 6a86 	vmul.f32	s12, s11, s12
 801336c:	eeb0 8a62 	vmov.f32	s16, s5
 8013370:	ee34 4a28 	vadd.f32	s8, s8, s17
 8013374:	eef0 2a42 	vmov.f32	s5, s4
 8013378:	ee3c ca23 	vadd.f32	s24, s24, s7
 801337c:	eeb0 2a61 	vmov.f32	s4, s3
 8013380:	ee7b baa4 	vadd.f32	s23, s23, s9
 8013384:	eef0 1a41 	vmov.f32	s3, s2
 8013388:	ee3b ba05 	vadd.f32	s22, s22, s10
 801338c:	eeb0 1a60 	vmov.f32	s2, s1
 8013390:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8013394:	eef0 0a40 	vmov.f32	s1, s0
 8013398:	ee3a aa07 	vadd.f32	s20, s20, s14
 801339c:	eeb0 0a65 	vmov.f32	s0, s11
 80133a0:	ee39 9a27 	vadd.f32	s18, s18, s15
 80133a4:	ee33 3a06 	vadd.f32	s6, s6, s12
 80133a8:	d1cb      	bne.n	8013342 <arm_fir_f32+0x34e>
 80133aa:	f1be 0e01 	subs.w	lr, lr, #1
 80133ae:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 80133b2:	ed05 ca07 	vstr	s24, [r5, #-28]	@ 0xffffffe4
 80133b6:	f107 0720 	add.w	r7, r7, #32
 80133ba:	ed45 ba06 	vstr	s23, [r5, #-24]	@ 0xffffffe8
 80133be:	f106 0620 	add.w	r6, r6, #32
 80133c2:	ed05 ba05 	vstr	s22, [r5, #-20]	@ 0xffffffec
 80133c6:	f104 0420 	add.w	r4, r4, #32
 80133ca:	ed45 aa04 	vstr	s21, [r5, #-16]
 80133ce:	f105 0520 	add.w	r5, r5, #32
 80133d2:	ed05 aa0b 	vstr	s20, [r5, #-44]	@ 0xffffffd4
 80133d6:	ed05 9a0a 	vstr	s18, [r5, #-40]	@ 0xffffffd8
 80133da:	ed05 3a09 	vstr	s6, [r5, #-36]	@ 0xffffffdc
 80133de:	f47f ae3c 	bne.w	801305a <arm_fir_f32+0x66>
 80133e2:	9b03      	ldr	r3, [sp, #12]
 80133e4:	4652      	mov	r2, sl
 80133e6:	9801      	ldr	r0, [sp, #4]
 80133e8:	015b      	lsls	r3, r3, #5
 80133ea:	f8dd c018 	ldr.w	ip, [sp, #24]
 80133ee:	9907      	ldr	r1, [sp, #28]
 80133f0:	4418      	add	r0, r3
 80133f2:	449c      	add	ip, r3
 80133f4:	4419      	add	r1, r3
 80133f6:	441a      	add	r2, r3
 80133f8:	9001      	str	r0, [sp, #4]
 80133fa:	9b05      	ldr	r3, [sp, #20]
 80133fc:	f013 0e07 	ands.w	lr, r3, #7
 8013400:	d022      	beq.n	8013448 <arm_fir_f32+0x454>
 8013402:	9f01      	ldr	r7, [sp, #4]
 8013404:	4676      	mov	r6, lr
 8013406:	4665      	mov	r5, ip
 8013408:	f8dd a008 	ldr.w	sl, [sp, #8]
 801340c:	f851 9b04 	ldr.w	r9, [r1], #4
 8013410:	4653      	mov	r3, sl
 8013412:	4644      	mov	r4, r8
 8013414:	eddf 6a02 	vldr	s13, [pc, #8]	@ 8013420 <arm_fir_f32+0x42c>
 8013418:	4628      	mov	r0, r5
 801341a:	f847 9b04 	str.w	r9, [r7], #4
 801341e:	e001      	b.n	8013424 <arm_fir_f32+0x430>
 8013420:	00000000 	.word	0x00000000
 8013424:	ecb0 7a01 	vldmia	r0!, {s14}
 8013428:	3b01      	subs	r3, #1
 801342a:	ecf4 7a01 	vldmia	r4!, {s15}
 801342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013432:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013436:	d1f5      	bne.n	8013424 <arm_fir_f32+0x430>
 8013438:	3e01      	subs	r6, #1
 801343a:	ece2 6a01 	vstmia	r2!, {s13}
 801343e:	f105 0504 	add.w	r5, r5, #4
 8013442:	d1e3      	bne.n	801340c <arm_fir_f32+0x418>
 8013444:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8013448:	9b02      	ldr	r3, [sp, #8]
 801344a:	1e59      	subs	r1, r3, #1
 801344c:	9b04      	ldr	r3, [sp, #16]
 801344e:	088e      	lsrs	r6, r1, #2
 8013450:	685c      	ldr	r4, [r3, #4]
 8013452:	d01d      	beq.n	8013490 <arm_fir_f32+0x49c>
 8013454:	f104 0210 	add.w	r2, r4, #16
 8013458:	f10c 0310 	add.w	r3, ip, #16
 801345c:	4630      	mov	r0, r6
 801345e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8013462:	3801      	subs	r0, #1
 8013464:	f103 0310 	add.w	r3, r3, #16
 8013468:	f102 0210 	add.w	r2, r2, #16
 801346c:	f842 5c20 	str.w	r5, [r2, #-32]
 8013470:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 8013474:	f842 5c1c 	str.w	r5, [r2, #-28]
 8013478:	f853 5c18 	ldr.w	r5, [r3, #-24]
 801347c:	f842 5c18 	str.w	r5, [r2, #-24]
 8013480:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8013484:	f842 5c14 	str.w	r5, [r2, #-20]
 8013488:	d1e9      	bne.n	801345e <arm_fir_f32+0x46a>
 801348a:	0133      	lsls	r3, r6, #4
 801348c:	441c      	add	r4, r3
 801348e:	449c      	add	ip, r3
 8013490:	f011 0303 	ands.w	r3, r1, #3
 8013494:	d006      	beq.n	80134a4 <arm_fir_f32+0x4b0>
 8013496:	4622      	mov	r2, r4
 8013498:	f85c 1b04 	ldr.w	r1, [ip], #4
 801349c:	3b01      	subs	r3, #1
 801349e:	f842 1b04 	str.w	r1, [r2], #4
 80134a2:	d1f9      	bne.n	8013498 <arm_fir_f32+0x4a4>
 80134a4:	b009      	add	sp, #36	@ 0x24
 80134a6:	ecbd 8b10 	vpop	{d8-d15}
 80134aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ae:	46c3      	mov	fp, r8
 80134b0:	eeb0 9a43 	vmov.f32	s18, s6
 80134b4:	eeb0 aa43 	vmov.f32	s20, s6
 80134b8:	eef0 aa43 	vmov.f32	s21, s6
 80134bc:	eeb0 ba43 	vmov.f32	s22, s6
 80134c0:	eef0 ba43 	vmov.f32	s23, s6
 80134c4:	eeb0 ca43 	vmov.f32	s24, s6
 80134c8:	eeb0 4a43 	vmov.f32	s8, s6
 80134cc:	e737      	b.n	801333e <arm_fir_f32+0x34a>
 80134ce:	bf00      	nop

080134d0 <arm_cmplx_mag_f32>:
 80134d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80134d8:	b084      	sub	sp, #16
 80134da:	d07f      	beq.n	80135dc <arm_cmplx_mag_f32+0x10c>
 80134dc:	f100 0420 	add.w	r4, r0, #32
 80134e0:	f101 0510 	add.w	r5, r1, #16
 80134e4:	4646      	mov	r6, r8
 80134e6:	2700      	movs	r7, #0
 80134e8:	e05a      	b.n	80135a0 <arm_cmplx_mag_f32+0xd0>
 80134ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80134ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80134f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f6:	f040 80a4 	bne.w	8013642 <arm_cmplx_mag_f32+0x172>
 80134fa:	ed05 0a04 	vstr	s0, [r5, #-16]
 80134fe:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8013502:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8013506:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801350a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801350e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351a:	f2c0 808f 	blt.w	801363c <arm_cmplx_mag_f32+0x16c>
 801351e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013522:	eeb4 0a40 	vcmp.f32	s0, s0
 8013526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352a:	f040 80af 	bne.w	801368c <arm_cmplx_mag_f32+0x1bc>
 801352e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8013532:	ed54 7a04 	vldr	s15, [r4, #-16]
 8013536:	ed14 0a03 	vldr	s0, [r4, #-12]
 801353a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801353e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013542:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801354e:	db72      	blt.n	8013636 <arm_cmplx_mag_f32+0x166>
 8013550:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013554:	eeb4 0a40 	vcmp.f32	s0, s0
 8013558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355c:	f040 808c 	bne.w	8013678 <arm_cmplx_mag_f32+0x1a8>
 8013560:	ed05 0a02 	vstr	s0, [r5, #-8]
 8013564:	ed54 7a02 	vldr	s15, [r4, #-8]
 8013568:	ed14 0a01 	vldr	s0, [r4, #-4]
 801356c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013570:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013574:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013580:	db20      	blt.n	80135c4 <arm_cmplx_mag_f32+0xf4>
 8013582:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013586:	eeb4 0a40 	vcmp.f32	s0, s0
 801358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358e:	d169      	bne.n	8013664 <arm_cmplx_mag_f32+0x194>
 8013590:	3e01      	subs	r6, #1
 8013592:	ed05 0a01 	vstr	s0, [r5, #-4]
 8013596:	f104 0420 	add.w	r4, r4, #32
 801359a:	f105 0510 	add.w	r5, r5, #16
 801359e:	d019      	beq.n	80135d4 <arm_cmplx_mag_f32+0x104>
 80135a0:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80135a4:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80135a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80135b0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135bc:	da95      	bge.n	80134ea <arm_cmplx_mag_f32+0x1a>
 80135be:	f845 7c10 	str.w	r7, [r5, #-16]
 80135c2:	e79c      	b.n	80134fe <arm_cmplx_mag_f32+0x2e>
 80135c4:	3e01      	subs	r6, #1
 80135c6:	f845 7c04 	str.w	r7, [r5, #-4]
 80135ca:	f104 0420 	add.w	r4, r4, #32
 80135ce:	f105 0510 	add.w	r5, r5, #16
 80135d2:	d1e5      	bne.n	80135a0 <arm_cmplx_mag_f32+0xd0>
 80135d4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80135d8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80135dc:	f012 0503 	ands.w	r5, r2, #3
 80135e0:	d026      	beq.n	8013630 <arm_cmplx_mag_f32+0x160>
 80135e2:	f100 0408 	add.w	r4, r0, #8
 80135e6:	2600      	movs	r6, #0
 80135e8:	e00c      	b.n	8013604 <arm_cmplx_mag_f32+0x134>
 80135ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80135ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80135f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f6:	d12e      	bne.n	8013656 <arm_cmplx_mag_f32+0x186>
 80135f8:	3d01      	subs	r5, #1
 80135fa:	ed01 0a01 	vstr	s0, [r1, #-4]
 80135fe:	f104 0408 	add.w	r4, r4, #8
 8013602:	d015      	beq.n	8013630 <arm_cmplx_mag_f32+0x160>
 8013604:	ed54 7a02 	vldr	s15, [r4, #-8]
 8013608:	3104      	adds	r1, #4
 801360a:	ed14 0a01 	vldr	s0, [r4, #-4]
 801360e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013612:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013616:	ee77 7a80 	vadd.f32	s15, s15, s0
 801361a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013622:	dae2      	bge.n	80135ea <arm_cmplx_mag_f32+0x11a>
 8013624:	3d01      	subs	r5, #1
 8013626:	f841 6c04 	str.w	r6, [r1, #-4]
 801362a:	f104 0408 	add.w	r4, r4, #8
 801362e:	d1e9      	bne.n	8013604 <arm_cmplx_mag_f32+0x134>
 8013630:	b004      	add	sp, #16
 8013632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013636:	f845 7c08 	str.w	r7, [r5, #-8]
 801363a:	e793      	b.n	8013564 <arm_cmplx_mag_f32+0x94>
 801363c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8013640:	e777      	b.n	8013532 <arm_cmplx_mag_f32+0x62>
 8013642:	eeb0 0a67 	vmov.f32	s0, s15
 8013646:	9203      	str	r2, [sp, #12]
 8013648:	9102      	str	r1, [sp, #8]
 801364a:	9001      	str	r0, [sp, #4]
 801364c:	f001 fd0c 	bl	8015068 <sqrtf>
 8013650:	a801      	add	r0, sp, #4
 8013652:	c807      	ldmia	r0, {r0, r1, r2}
 8013654:	e751      	b.n	80134fa <arm_cmplx_mag_f32+0x2a>
 8013656:	eeb0 0a67 	vmov.f32	s0, s15
 801365a:	9101      	str	r1, [sp, #4]
 801365c:	f001 fd04 	bl	8015068 <sqrtf>
 8013660:	9901      	ldr	r1, [sp, #4]
 8013662:	e7c9      	b.n	80135f8 <arm_cmplx_mag_f32+0x128>
 8013664:	eeb0 0a67 	vmov.f32	s0, s15
 8013668:	9203      	str	r2, [sp, #12]
 801366a:	9102      	str	r1, [sp, #8]
 801366c:	9001      	str	r0, [sp, #4]
 801366e:	f001 fcfb 	bl	8015068 <sqrtf>
 8013672:	a801      	add	r0, sp, #4
 8013674:	c807      	ldmia	r0, {r0, r1, r2}
 8013676:	e78b      	b.n	8013590 <arm_cmplx_mag_f32+0xc0>
 8013678:	eeb0 0a67 	vmov.f32	s0, s15
 801367c:	9203      	str	r2, [sp, #12]
 801367e:	9102      	str	r1, [sp, #8]
 8013680:	9001      	str	r0, [sp, #4]
 8013682:	f001 fcf1 	bl	8015068 <sqrtf>
 8013686:	a801      	add	r0, sp, #4
 8013688:	c807      	ldmia	r0, {r0, r1, r2}
 801368a:	e769      	b.n	8013560 <arm_cmplx_mag_f32+0x90>
 801368c:	eeb0 0a67 	vmov.f32	s0, s15
 8013690:	9203      	str	r2, [sp, #12]
 8013692:	9102      	str	r1, [sp, #8]
 8013694:	9001      	str	r0, [sp, #4]
 8013696:	f001 fce7 	bl	8015068 <sqrtf>
 801369a:	a801      	add	r0, sp, #4
 801369c:	c807      	ldmia	r0, {r0, r1, r2}
 801369e:	e746      	b.n	801352e <arm_cmplx_mag_f32+0x5e>

080136a0 <arm_radix8_butterfly_f32>:
 80136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a4:	469e      	mov	lr, r3
 80136a6:	1d03      	adds	r3, r0, #4
 80136a8:	4683      	mov	fp, r0
 80136aa:	468a      	mov	sl, r1
 80136ac:	4688      	mov	r8, r1
 80136ae:	469c      	mov	ip, r3
 80136b0:	ed2d 8b10 	vpush	{d8-d15}
 80136b4:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 80139c8 <arm_radix8_butterfly_f32+0x328>
 80136b8:	b09f      	sub	sp, #124	@ 0x7c
 80136ba:	921c      	str	r2, [sp, #112]	@ 0x70
 80136bc:	931d      	str	r3, [sp, #116]	@ 0x74
 80136be:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80136c2:	f04f 0900 	mov.w	r9, #0
 80136c6:	461a      	mov	r2, r3
 80136c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80136ca:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80136ce:	0051      	lsls	r1, r2, #1
 80136d0:	4608      	mov	r0, r1
 80136d2:	9103      	str	r1, [sp, #12]
 80136d4:	00d1      	lsls	r1, r2, #3
 80136d6:	1885      	adds	r5, r0, r2
 80136d8:	0110      	lsls	r0, r2, #4
 80136da:	eb0b 0601 	add.w	r6, fp, r1
 80136de:	9101      	str	r1, [sp, #4]
 80136e0:	18ac      	adds	r4, r5, r2
 80136e2:	9002      	str	r0, [sp, #8]
 80136e4:	1877      	adds	r7, r6, r1
 80136e6:	4611      	mov	r1, r2
 80136e8:	4422      	add	r2, r4
 80136ea:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80136ee:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80136f2:	1850      	adds	r0, r2, r1
 80136f4:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80136f8:	4401      	add	r1, r0
 80136fa:	3204      	adds	r2, #4
 80136fc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8013700:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8013704:	3104      	adds	r1, #4
 8013706:	ed1c 7a01 	vldr	s14, [ip, #-4]
 801370a:	44c1      	add	r9, r8
 801370c:	edd4 6a00 	vldr	s13, [r4]
 8013710:	ed97 6a00 	vldr	s12, [r7]
 8013714:	45ca      	cmp	sl, r9
 8013716:	edd0 7a00 	vldr	s15, [r0]
 801371a:	ee37 5a66 	vsub.f32	s10, s14, s13
 801371e:	edd6 5a00 	vldr	s11, [r6]
 8013722:	ee37 2a26 	vadd.f32	s4, s14, s13
 8013726:	ee76 2a67 	vsub.f32	s5, s12, s15
 801372a:	edd5 6a00 	vldr	s13, [r5]
 801372e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8013732:	ee76 4a27 	vadd.f32	s9, s12, s15
 8013736:	ed11 6a01 	vldr	s12, [r1, #-4]
 801373a:	ee75 1a87 	vadd.f32	s3, s11, s14
 801373e:	ee36 4a86 	vadd.f32	s8, s13, s12
 8013742:	ee72 7a24 	vadd.f32	s15, s4, s9
 8013746:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801374a:	ee76 5ac6 	vsub.f32	s11, s13, s12
 801374e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8013752:	ee32 2a64 	vsub.f32	s4, s4, s9
 8013756:	ee77 6a65 	vsub.f32	s13, s14, s11
 801375a:	ee77 4a86 	vadd.f32	s9, s15, s12
 801375e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013762:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013766:	ed4c 4a01 	vstr	s9, [ip, #-4]
 801376a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801376e:	edc4 7a00 	vstr	s15, [r4]
 8013772:	ee66 6a89 	vmul.f32	s13, s13, s18
 8013776:	edd6 5a01 	vldr	s11, [r6, #4]
 801377a:	ee27 6a09 	vmul.f32	s12, s14, s18
 801377e:	edd5 3a01 	vldr	s7, [r5, #4]
 8013782:	ed92 4a00 	vldr	s8, [r2]
 8013786:	ee35 1a26 	vadd.f32	s2, s10, s13
 801378a:	edd1 4a00 	vldr	s9, [r1]
 801378e:	ee75 6a66 	vsub.f32	s13, s10, s13
 8013792:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8013796:	ed94 0a01 	vldr	s0, [r4, #4]
 801379a:	ee73 7ae4 	vsub.f32	s15, s7, s9
 801379e:	ed9c 7a00 	vldr	s14, [ip]
 80137a2:	edd0 0a01 	vldr	s1, [r0, #4]
 80137a6:	ee35 4a84 	vadd.f32	s8, s11, s8
 80137aa:	ed97 5a01 	vldr	s10, [r7, #4]
 80137ae:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80137b2:	ee73 5a27 	vadd.f32	s11, s6, s15
 80137b6:	ee77 3a00 	vadd.f32	s7, s14, s0
 80137ba:	ee33 3a67 	vsub.f32	s6, s6, s15
 80137be:	ee37 7a40 	vsub.f32	s14, s14, s0
 80137c2:	ee35 0a20 	vadd.f32	s0, s10, s1
 80137c6:	ee63 7a09 	vmul.f32	s15, s6, s18
 80137ca:	ee35 5a60 	vsub.f32	s10, s10, s1
 80137ce:	ee33 3a80 	vadd.f32	s6, s7, s0
 80137d2:	ee74 0a24 	vadd.f32	s1, s8, s9
 80137d6:	ee65 5a89 	vmul.f32	s11, s11, s18
 80137da:	ee74 4a64 	vsub.f32	s9, s8, s9
 80137de:	ee33 4ac0 	vsub.f32	s8, s7, s0
 80137e2:	ee75 3a25 	vadd.f32	s7, s10, s11
 80137e6:	ee75 5a65 	vsub.f32	s11, s10, s11
 80137ea:	ee37 5a27 	vadd.f32	s10, s14, s15
 80137ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137f2:	ee32 7a86 	vadd.f32	s14, s5, s12
 80137f6:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80137fa:	ee73 2a20 	vadd.f32	s5, s6, s1
 80137fe:	ee33 3a60 	vsub.f32	s6, s6, s1
 8013802:	ee72 0a24 	vadd.f32	s1, s4, s9
 8013806:	edcc 2a00 	vstr	s5, [ip]
 801380a:	ee72 4a64 	vsub.f32	s9, s4, s9
 801380e:	ed84 3a01 	vstr	s6, [r4, #4]
 8013812:	ee74 2a61 	vsub.f32	s5, s8, s3
 8013816:	ee31 3a23 	vadd.f32	s6, s2, s7
 801381a:	edc7 0a00 	vstr	s1, [r7]
 801381e:	ee31 1a63 	vsub.f32	s2, s2, s7
 8013822:	edc0 4a00 	vstr	s9, [r0]
 8013826:	ee76 3aa5 	vadd.f32	s7, s13, s11
 801382a:	edc7 2a01 	vstr	s5, [r7, #4]
 801382e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013832:	441c      	add	r4, r3
 8013834:	ee75 5a47 	vsub.f32	s11, s10, s14
 8013838:	449c      	add	ip, r3
 801383a:	ee35 5a07 	vadd.f32	s10, s10, s14
 801383e:	441f      	add	r7, r3
 8013840:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8013844:	ee34 4a21 	vadd.f32	s8, s8, s3
 8013848:	ee77 7a86 	vadd.f32	s15, s15, s12
 801384c:	ed80 4a01 	vstr	s8, [r0, #4]
 8013850:	4418      	add	r0, r3
 8013852:	ed86 3a00 	vstr	s6, [r6]
 8013856:	ed01 1a01 	vstr	s2, [r1, #-4]
 801385a:	ed42 3a01 	vstr	s7, [r2, #-4]
 801385e:	edc5 6a00 	vstr	s13, [r5]
 8013862:	edc6 5a01 	vstr	s11, [r6, #4]
 8013866:	441e      	add	r6, r3
 8013868:	ed81 5a00 	vstr	s10, [r1]
 801386c:	4419      	add	r1, r3
 801386e:	ed82 7a00 	vstr	s14, [r2]
 8013872:	441a      	add	r2, r3
 8013874:	edc5 7a01 	vstr	s15, [r5, #4]
 8013878:	441d      	add	r5, r3
 801387a:	f63f af44 	bhi.w	8013706 <arm_radix8_butterfly_f32+0x66>
 801387e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8013880:	2f07      	cmp	r7, #7
 8013882:	f240 81e8 	bls.w	8013c56 <arm_radix8_butterfly_f32+0x5b6>
 8013886:	9903      	ldr	r1, [sp, #12]
 8013888:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 801388c:	9e01      	ldr	r6, [sp, #4]
 801388e:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8013892:	19ca      	adds	r2, r1, r7
 8013894:	1c4c      	adds	r4, r1, #1
 8013896:	eb05 010e 	add.w	r1, r5, lr
 801389a:	00ed      	lsls	r5, r5, #3
 801389c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80138a0:	3608      	adds	r6, #8
 80138a2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80138a4:	eb01 050e 	add.w	r5, r1, lr
 80138a8:	00c9      	lsls	r1, r1, #3
 80138aa:	443c      	add	r4, r7
 80138ac:	9618      	str	r6, [sp, #96]	@ 0x60
 80138ae:	00ee      	lsls	r6, r5, #3
 80138b0:	460f      	mov	r7, r1
 80138b2:	9114      	str	r1, [sp, #80]	@ 0x50
 80138b4:	9902      	ldr	r1, [sp, #8]
 80138b6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80138ba:	9611      	str	r6, [sp, #68]	@ 0x44
 80138bc:	00c0      	lsls	r0, r0, #3
 80138be:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80138c0:	3108      	adds	r1, #8
 80138c2:	3404      	adds	r4, #4
 80138c4:	f04f 0901 	mov.w	r9, #1
 80138c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80138ca:	eb05 010e 	add.w	r1, r5, lr
 80138ce:	4635      	mov	r5, r6
 80138d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80138d2:	9301      	str	r3, [sp, #4]
 80138d4:	443d      	add	r5, r7
 80138d6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80138d8:	9507      	str	r5, [sp, #28]
 80138da:	eb01 050e 	add.w	r5, r1, lr
 80138de:	00c9      	lsls	r1, r1, #3
 80138e0:	19f7      	adds	r7, r6, r7
 80138e2:	00ed      	lsls	r5, r5, #3
 80138e4:	9110      	str	r1, [sp, #64]	@ 0x40
 80138e6:	00d1      	lsls	r1, r2, #3
 80138e8:	970a      	str	r7, [sp, #40]	@ 0x28
 80138ea:	462f      	mov	r7, r5
 80138ec:	9515      	str	r5, [sp, #84]	@ 0x54
 80138ee:	0112      	lsls	r2, r2, #4
 80138f0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80138f2:	19f4      	adds	r4, r6, r7
 80138f4:	320c      	adds	r2, #12
 80138f6:	3108      	adds	r1, #8
 80138f8:	1975      	adds	r5, r6, r5
 80138fa:	9408      	str	r4, [sp, #32]
 80138fc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80138fe:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8013902:	9509      	str	r5, [sp, #36]	@ 0x24
 8013904:	f100 020c 	add.w	r2, r0, #12
 8013908:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801390a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801390c:	1975      	adds	r5, r6, r5
 801390e:	9216      	str	r2, [sp, #88]	@ 0x58
 8013910:	1932      	adds	r2, r6, r4
 8013912:	911b      	str	r1, [sp, #108]	@ 0x6c
 8013914:	9505      	str	r5, [sp, #20]
 8013916:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801391a:	0179      	lsls	r1, r7, #5
 801391c:	9204      	str	r2, [sp, #16]
 801391e:	1972      	adds	r2, r6, r5
 8013920:	9412      	str	r4, [sp, #72]	@ 0x48
 8013922:	9513      	str	r5, [sp, #76]	@ 0x4c
 8013924:	9206      	str	r2, [sp, #24]
 8013926:	f101 0208 	add.w	r2, r1, #8
 801392a:	921a      	str	r2, [sp, #104]	@ 0x68
 801392c:	2200      	movs	r2, #0
 801392e:	f102 0108 	add.w	r1, r2, #8
 8013932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013934:	46cc      	mov	ip, r9
 8013936:	460f      	mov	r7, r1
 8013938:	910c      	str	r1, [sp, #48]	@ 0x30
 801393a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801393c:	eb0b 0e07 	add.w	lr, fp, r7
 8013940:	9f04      	ldr	r7, [sp, #16]
 8013942:	188e      	adds	r6, r1, r2
 8013944:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013946:	edd7 fa00 	vldr	s31, [r7]
 801394a:	9f06      	ldr	r7, [sp, #24]
 801394c:	188d      	adds	r5, r1, r2
 801394e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8013950:	445e      	add	r6, fp
 8013952:	ed97 fa00 	vldr	s30, [r7]
 8013956:	445d      	add	r5, fp
 8013958:	9f05      	ldr	r7, [sp, #20]
 801395a:	188c      	adds	r4, r1, r2
 801395c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801395e:	edd7 ea00 	vldr	s29, [r7]
 8013962:	445c      	add	r4, fp
 8013964:	9f07      	ldr	r7, [sp, #28]
 8013966:	1888      	adds	r0, r1, r2
 8013968:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801396a:	ed97 ea00 	vldr	s28, [r7]
 801396e:	4458      	add	r0, fp
 8013970:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8013972:	4411      	add	r1, r2
 8013974:	441a      	add	r2, r3
 8013976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013978:	edd7 da00 	vldr	s27, [r7]
 801397c:	4459      	add	r1, fp
 801397e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8013980:	445a      	add	r2, fp
 8013982:	930d      	str	r3, [sp, #52]	@ 0x34
 8013984:	ed97 da00 	vldr	s26, [r7]
 8013988:	9f08      	ldr	r7, [sp, #32]
 801398a:	edd7 ca00 	vldr	s25, [r7]
 801398e:	9f04      	ldr	r7, [sp, #16]
 8013990:	ed97 ca01 	vldr	s24, [r7, #4]
 8013994:	9f06      	ldr	r7, [sp, #24]
 8013996:	edd7 ba01 	vldr	s23, [r7, #4]
 801399a:	9f05      	ldr	r7, [sp, #20]
 801399c:	ed97 ba01 	vldr	s22, [r7, #4]
 80139a0:	9f07      	ldr	r7, [sp, #28]
 80139a2:	edd7 aa01 	vldr	s21, [r7, #4]
 80139a6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80139a8:	ed97 aa01 	vldr	s20, [r7, #4]
 80139ac:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80139ae:	9b01      	ldr	r3, [sp, #4]
 80139b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80139b4:	9f08      	ldr	r7, [sp, #32]
 80139b6:	edcd 7a02 	vstr	s15, [sp, #8]
 80139ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80139be:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80139c0:	edcd 7a03 	vstr	s15, [sp, #12]
 80139c4:	e002      	b.n	80139cc <arm_radix8_butterfly_f32+0x32c>
 80139c6:	bf00      	nop
 80139c8:	3f3504f3 	.word	0x3f3504f3
 80139cc:	ed90 2a00 	vldr	s4, [r0]
 80139d0:	44c4      	add	ip, r8
 80139d2:	ed96 7a00 	vldr	s14, [r6]
 80139d6:	ed94 8a00 	vldr	s16, [r4]
 80139da:	45e2      	cmp	sl, ip
 80139dc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80139e0:	ed95 5a00 	vldr	s10, [r5]
 80139e4:	ed51 5a01 	vldr	s11, [r1, #-4]
 80139e8:	ee38 6a27 	vadd.f32	s12, s16, s15
 80139ec:	ed9e 1a00 	vldr	s2, [lr]
 80139f0:	ee78 2a67 	vsub.f32	s5, s16, s15
 80139f4:	ed17 4a01 	vldr	s8, [r7, #-4]
 80139f8:	ee75 3a25 	vadd.f32	s7, s10, s11
 80139fc:	ee31 3a07 	vadd.f32	s6, s2, s14
 8013a00:	edde 4a01 	vldr	s9, [lr, #4]
 8013a04:	ee72 6a04 	vadd.f32	s13, s4, s8
 8013a08:	ee75 5a65 	vsub.f32	s11, s10, s11
 8013a0c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8013a10:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8013a14:	ee32 4a44 	vsub.f32	s8, s4, s8
 8013a18:	ee31 1a47 	vsub.f32	s2, s2, s14
 8013a1c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8013a20:	ee75 7a84 	vadd.f32	s15, s11, s8
 8013a24:	ee33 3a46 	vsub.f32	s6, s6, s12
 8013a28:	ed8e 7a00 	vstr	s14, [lr]
 8013a2c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8013a30:	ee67 7a89 	vmul.f32	s15, s15, s18
 8013a34:	ed90 2a01 	vldr	s4, [r0, #4]
 8013a38:	ed95 7a01 	vldr	s14, [r5, #4]
 8013a3c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8013a40:	ed91 6a00 	vldr	s12, [r1]
 8013a44:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8013a48:	edd7 8a00 	vldr	s17, [r7]
 8013a4c:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8013a50:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8013a54:	edd2 0a00 	vldr	s1, [r2]
 8013a58:	ee72 6a68 	vsub.f32	s13, s4, s17
 8013a5c:	edd6 7a01 	vldr	s15, [r6, #4]
 8013a60:	ee77 2a46 	vsub.f32	s5, s14, s12
 8013a64:	ee37 0a06 	vadd.f32	s0, s14, s12
 8013a68:	ed94 7a01 	vldr	s14, [r4, #4]
 8013a6c:	ee32 6a28 	vadd.f32	s12, s4, s17
 8013a70:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8013a74:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8013a78:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8013a7c:	ee77 6a20 	vadd.f32	s13, s14, s1
 8013a80:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8013a84:	ee37 7a60 	vsub.f32	s14, s14, s1
 8013a88:	ee24 4a09 	vmul.f32	s8, s8, s18
 8013a8c:	ee70 0a06 	vadd.f32	s1, s0, s12
 8013a90:	ee69 7a89 	vmul.f32	s15, s19, s18
 8013a94:	ee62 2a89 	vmul.f32	s5, s5, s18
 8013a98:	ee30 6a46 	vsub.f32	s12, s0, s12
 8013a9c:	ee32 0a26 	vadd.f32	s0, s4, s13
 8013aa0:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013aa4:	ee77 8a62 	vsub.f32	s17, s14, s5
 8013aa8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8013aac:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8013ab0:	ee77 4a22 	vadd.f32	s9, s14, s5
 8013ab4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8013ab8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8013abc:	ee30 1a60 	vsub.f32	s2, s0, s1
 8013ac0:	ee73 1a06 	vadd.f32	s3, s6, s12
 8013ac4:	ee33 6a46 	vsub.f32	s12, s6, s12
 8013ac8:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8013acc:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8013ad0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013ad4:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013ad8:	ee72 3a65 	vsub.f32	s7, s4, s11
 8013adc:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8013ae0:	ee72 5a25 	vadd.f32	s11, s4, s11
 8013ae4:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8013ae8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8013aec:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8013af0:	ee77 2a28 	vadd.f32	s5, s14, s17
 8013af4:	ee37 7a68 	vsub.f32	s14, s14, s17
 8013af8:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8013afc:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8013b00:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8013b04:	ee70 0a20 	vadd.f32	s1, s0, s1
 8013b08:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8013b0c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8013b10:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8013b14:	edce 0a01 	vstr	s1, [lr, #4]
 8013b18:	ee38 8a88 	vadd.f32	s16, s17, s16
 8013b1c:	449e      	add	lr, r3
 8013b1e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8013b22:	ee31 5a45 	vsub.f32	s10, s2, s10
 8013b26:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8013b2a:	ed86 8a00 	vstr	s16, [r6]
 8013b2e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8013b32:	ee33 3a61 	vsub.f32	s6, s6, s3
 8013b36:	ed86 5a01 	vstr	s10, [r6, #4]
 8013b3a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8013b3e:	edcd 3a01 	vstr	s7, [sp, #4]
 8013b42:	ed9d 5a03 	vldr	s10, [sp, #12]
 8013b46:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8013b4a:	eddd 3a02 	vldr	s7, [sp, #8]
 8013b4e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8013b52:	ed84 0a00 	vstr	s0, [r4]
 8013b56:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013b5a:	ed84 3a01 	vstr	s6, [r4, #4]
 8013b5e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8013b62:	ee23 6a86 	vmul.f32	s12, s7, s12
 8013b66:	eddd 3a01 	vldr	s7, [sp, #4]
 8013b6a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8013b6e:	441e      	add	r6, r3
 8013b70:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8013b74:	441c      	add	r4, r3
 8013b76:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8013b7a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8013b7e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8013b82:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8013b86:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8013b8a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8013b8e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8013b92:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8013b96:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8013b9a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8013b9e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8013ba2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8013ba6:	ee38 8a01 	vadd.f32	s16, s16, s2
 8013baa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8013bae:	ee39 5a85 	vadd.f32	s10, s19, s10
 8013bb2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8013bb6:	ed02 8a01 	vstr	s16, [r2, #-4]
 8013bba:	ee30 0a21 	vadd.f32	s0, s0, s3
 8013bbe:	ed82 6a00 	vstr	s12, [r2]
 8013bc2:	ee74 2a62 	vsub.f32	s5, s8, s5
 8013bc6:	edc5 0a00 	vstr	s1, [r5]
 8013bca:	ee33 3a28 	vadd.f32	s6, s6, s17
 8013bce:	edc5 3a01 	vstr	s7, [r5, #4]
 8013bd2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013bd6:	ed07 5a01 	vstr	s10, [r7, #-4]
 8013bda:	edc7 4a00 	vstr	s9, [r7]
 8013bde:	441d      	add	r5, r3
 8013be0:	ed01 0a01 	vstr	s0, [r1, #-4]
 8013be4:	441a      	add	r2, r3
 8013be6:	edc1 2a00 	vstr	s5, [r1]
 8013bea:	441f      	add	r7, r3
 8013bec:	ed80 3a00 	vstr	s6, [r0]
 8013bf0:	4419      	add	r1, r3
 8013bf2:	ed80 7a01 	vstr	s14, [r0, #4]
 8013bf6:	4418      	add	r0, r3
 8013bf8:	f63f aee8 	bhi.w	80139cc <arm_radix8_butterfly_f32+0x32c>
 8013bfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013bfe:	f109 0901 	add.w	r9, r9, #1
 8013c02:	9301      	str	r3, [sp, #4]
 8013c04:	9b04      	ldr	r3, [sp, #16]
 8013c06:	4413      	add	r3, r2
 8013c08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c0a:	9304      	str	r3, [sp, #16]
 8013c0c:	9b06      	ldr	r3, [sp, #24]
 8013c0e:	4413      	add	r3, r2
 8013c10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013c12:	9306      	str	r3, [sp, #24]
 8013c14:	9b05      	ldr	r3, [sp, #20]
 8013c16:	4413      	add	r3, r2
 8013c18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013c1a:	9305      	str	r3, [sp, #20]
 8013c1c:	9b07      	ldr	r3, [sp, #28]
 8013c1e:	4413      	add	r3, r2
 8013c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c22:	9307      	str	r3, [sp, #28]
 8013c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c26:	4413      	add	r3, r2
 8013c28:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c2e:	4413      	add	r3, r2
 8013c30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c34:	9b08      	ldr	r3, [sp, #32]
 8013c36:	4413      	add	r3, r2
 8013c38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013c3a:	9308      	str	r3, [sp, #32]
 8013c3c:	3208      	adds	r2, #8
 8013c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c40:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013c42:	4599      	cmp	r9, r3
 8013c44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013c46:	f47f ae72 	bne.w	801392e <arm_radix8_butterfly_f32+0x28e>
 8013c4a:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8013c4e:	46c8      	mov	r8, r9
 8013c50:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 8013c54:	e533      	b.n	80136be <arm_radix8_butterfly_f32+0x1e>
 8013c56:	b01f      	add	sp, #124	@ 0x7c
 8013c58:	ecbd 8b10 	vpop	{d8-d15}
 8013c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c60 <sbrk_aligned>:
 8013c60:	b570      	push	{r4, r5, r6, lr}
 8013c62:	4e0f      	ldr	r6, [pc, #60]	@ (8013ca0 <sbrk_aligned+0x40>)
 8013c64:	460c      	mov	r4, r1
 8013c66:	6831      	ldr	r1, [r6, #0]
 8013c68:	4605      	mov	r5, r0
 8013c6a:	b911      	cbnz	r1, 8013c72 <sbrk_aligned+0x12>
 8013c6c:	f000 fa36 	bl	80140dc <_sbrk_r>
 8013c70:	6030      	str	r0, [r6, #0]
 8013c72:	4621      	mov	r1, r4
 8013c74:	4628      	mov	r0, r5
 8013c76:	f000 fa31 	bl	80140dc <_sbrk_r>
 8013c7a:	1c43      	adds	r3, r0, #1
 8013c7c:	d103      	bne.n	8013c86 <sbrk_aligned+0x26>
 8013c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8013c82:	4620      	mov	r0, r4
 8013c84:	bd70      	pop	{r4, r5, r6, pc}
 8013c86:	1cc4      	adds	r4, r0, #3
 8013c88:	f024 0403 	bic.w	r4, r4, #3
 8013c8c:	42a0      	cmp	r0, r4
 8013c8e:	d0f8      	beq.n	8013c82 <sbrk_aligned+0x22>
 8013c90:	1a21      	subs	r1, r4, r0
 8013c92:	4628      	mov	r0, r5
 8013c94:	f000 fa22 	bl	80140dc <_sbrk_r>
 8013c98:	3001      	adds	r0, #1
 8013c9a:	d1f2      	bne.n	8013c82 <sbrk_aligned+0x22>
 8013c9c:	e7ef      	b.n	8013c7e <sbrk_aligned+0x1e>
 8013c9e:	bf00      	nop
 8013ca0:	200319d8 	.word	0x200319d8

08013ca4 <_malloc_r>:
 8013ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca8:	1ccd      	adds	r5, r1, #3
 8013caa:	f025 0503 	bic.w	r5, r5, #3
 8013cae:	3508      	adds	r5, #8
 8013cb0:	2d0c      	cmp	r5, #12
 8013cb2:	bf38      	it	cc
 8013cb4:	250c      	movcc	r5, #12
 8013cb6:	2d00      	cmp	r5, #0
 8013cb8:	4606      	mov	r6, r0
 8013cba:	db01      	blt.n	8013cc0 <_malloc_r+0x1c>
 8013cbc:	42a9      	cmp	r1, r5
 8013cbe:	d904      	bls.n	8013cca <_malloc_r+0x26>
 8013cc0:	230c      	movs	r3, #12
 8013cc2:	6033      	str	r3, [r6, #0]
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013da0 <_malloc_r+0xfc>
 8013cce:	f000 f869 	bl	8013da4 <__malloc_lock>
 8013cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8013cd6:	461c      	mov	r4, r3
 8013cd8:	bb44      	cbnz	r4, 8013d2c <_malloc_r+0x88>
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f7ff ffbf 	bl	8013c60 <sbrk_aligned>
 8013ce2:	1c43      	adds	r3, r0, #1
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	d158      	bne.n	8013d9a <_malloc_r+0xf6>
 8013ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8013cec:	4627      	mov	r7, r4
 8013cee:	2f00      	cmp	r7, #0
 8013cf0:	d143      	bne.n	8013d7a <_malloc_r+0xd6>
 8013cf2:	2c00      	cmp	r4, #0
 8013cf4:	d04b      	beq.n	8013d8e <_malloc_r+0xea>
 8013cf6:	6823      	ldr	r3, [r4, #0]
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	eb04 0903 	add.w	r9, r4, r3
 8013d00:	f000 f9ec 	bl	80140dc <_sbrk_r>
 8013d04:	4581      	cmp	r9, r0
 8013d06:	d142      	bne.n	8013d8e <_malloc_r+0xea>
 8013d08:	6821      	ldr	r1, [r4, #0]
 8013d0a:	1a6d      	subs	r5, r5, r1
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f7ff ffa6 	bl	8013c60 <sbrk_aligned>
 8013d14:	3001      	adds	r0, #1
 8013d16:	d03a      	beq.n	8013d8e <_malloc_r+0xea>
 8013d18:	6823      	ldr	r3, [r4, #0]
 8013d1a:	442b      	add	r3, r5
 8013d1c:	6023      	str	r3, [r4, #0]
 8013d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8013d22:	685a      	ldr	r2, [r3, #4]
 8013d24:	bb62      	cbnz	r2, 8013d80 <_malloc_r+0xdc>
 8013d26:	f8c8 7000 	str.w	r7, [r8]
 8013d2a:	e00f      	b.n	8013d4c <_malloc_r+0xa8>
 8013d2c:	6822      	ldr	r2, [r4, #0]
 8013d2e:	1b52      	subs	r2, r2, r5
 8013d30:	d420      	bmi.n	8013d74 <_malloc_r+0xd0>
 8013d32:	2a0b      	cmp	r2, #11
 8013d34:	d917      	bls.n	8013d66 <_malloc_r+0xc2>
 8013d36:	1961      	adds	r1, r4, r5
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	6025      	str	r5, [r4, #0]
 8013d3c:	bf18      	it	ne
 8013d3e:	6059      	strne	r1, [r3, #4]
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	bf08      	it	eq
 8013d44:	f8c8 1000 	streq.w	r1, [r8]
 8013d48:	5162      	str	r2, [r4, r5]
 8013d4a:	604b      	str	r3, [r1, #4]
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	f000 f82f 	bl	8013db0 <__malloc_unlock>
 8013d52:	f104 000b 	add.w	r0, r4, #11
 8013d56:	1d23      	adds	r3, r4, #4
 8013d58:	f020 0007 	bic.w	r0, r0, #7
 8013d5c:	1ac2      	subs	r2, r0, r3
 8013d5e:	bf1c      	itt	ne
 8013d60:	1a1b      	subne	r3, r3, r0
 8013d62:	50a3      	strne	r3, [r4, r2]
 8013d64:	e7af      	b.n	8013cc6 <_malloc_r+0x22>
 8013d66:	6862      	ldr	r2, [r4, #4]
 8013d68:	42a3      	cmp	r3, r4
 8013d6a:	bf0c      	ite	eq
 8013d6c:	f8c8 2000 	streq.w	r2, [r8]
 8013d70:	605a      	strne	r2, [r3, #4]
 8013d72:	e7eb      	b.n	8013d4c <_malloc_r+0xa8>
 8013d74:	4623      	mov	r3, r4
 8013d76:	6864      	ldr	r4, [r4, #4]
 8013d78:	e7ae      	b.n	8013cd8 <_malloc_r+0x34>
 8013d7a:	463c      	mov	r4, r7
 8013d7c:	687f      	ldr	r7, [r7, #4]
 8013d7e:	e7b6      	b.n	8013cee <_malloc_r+0x4a>
 8013d80:	461a      	mov	r2, r3
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	42a3      	cmp	r3, r4
 8013d86:	d1fb      	bne.n	8013d80 <_malloc_r+0xdc>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	6053      	str	r3, [r2, #4]
 8013d8c:	e7de      	b.n	8013d4c <_malloc_r+0xa8>
 8013d8e:	230c      	movs	r3, #12
 8013d90:	6033      	str	r3, [r6, #0]
 8013d92:	4630      	mov	r0, r6
 8013d94:	f000 f80c 	bl	8013db0 <__malloc_unlock>
 8013d98:	e794      	b.n	8013cc4 <_malloc_r+0x20>
 8013d9a:	6005      	str	r5, [r0, #0]
 8013d9c:	e7d6      	b.n	8013d4c <_malloc_r+0xa8>
 8013d9e:	bf00      	nop
 8013da0:	200319dc 	.word	0x200319dc

08013da4 <__malloc_lock>:
 8013da4:	4801      	ldr	r0, [pc, #4]	@ (8013dac <__malloc_lock+0x8>)
 8013da6:	f000 b9e6 	b.w	8014176 <__retarget_lock_acquire_recursive>
 8013daa:	bf00      	nop
 8013dac:	20031b20 	.word	0x20031b20

08013db0 <__malloc_unlock>:
 8013db0:	4801      	ldr	r0, [pc, #4]	@ (8013db8 <__malloc_unlock+0x8>)
 8013db2:	f000 b9e1 	b.w	8014178 <__retarget_lock_release_recursive>
 8013db6:	bf00      	nop
 8013db8:	20031b20 	.word	0x20031b20

08013dbc <std>:
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	b510      	push	{r4, lr}
 8013dc0:	4604      	mov	r4, r0
 8013dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8013dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013dca:	6083      	str	r3, [r0, #8]
 8013dcc:	8181      	strh	r1, [r0, #12]
 8013dce:	6643      	str	r3, [r0, #100]	@ 0x64
 8013dd0:	81c2      	strh	r2, [r0, #14]
 8013dd2:	6183      	str	r3, [r0, #24]
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	2208      	movs	r2, #8
 8013dd8:	305c      	adds	r0, #92	@ 0x5c
 8013dda:	f000 f942 	bl	8014062 <memset>
 8013dde:	4b0d      	ldr	r3, [pc, #52]	@ (8013e14 <std+0x58>)
 8013de0:	6263      	str	r3, [r4, #36]	@ 0x24
 8013de2:	4b0d      	ldr	r3, [pc, #52]	@ (8013e18 <std+0x5c>)
 8013de4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013de6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e1c <std+0x60>)
 8013de8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013dea:	4b0d      	ldr	r3, [pc, #52]	@ (8013e20 <std+0x64>)
 8013dec:	6323      	str	r3, [r4, #48]	@ 0x30
 8013dee:	4b0d      	ldr	r3, [pc, #52]	@ (8013e24 <std+0x68>)
 8013df0:	6224      	str	r4, [r4, #32]
 8013df2:	429c      	cmp	r4, r3
 8013df4:	d006      	beq.n	8013e04 <std+0x48>
 8013df6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013dfa:	4294      	cmp	r4, r2
 8013dfc:	d002      	beq.n	8013e04 <std+0x48>
 8013dfe:	33d0      	adds	r3, #208	@ 0xd0
 8013e00:	429c      	cmp	r4, r3
 8013e02:	d105      	bne.n	8013e10 <std+0x54>
 8013e04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e0c:	f000 b9b2 	b.w	8014174 <__retarget_lock_init_recursive>
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	bf00      	nop
 8013e14:	08013fdd 	.word	0x08013fdd
 8013e18:	08013fff 	.word	0x08013fff
 8013e1c:	08014037 	.word	0x08014037
 8013e20:	0801405b 	.word	0x0801405b
 8013e24:	200319e0 	.word	0x200319e0

08013e28 <stdio_exit_handler>:
 8013e28:	4a02      	ldr	r2, [pc, #8]	@ (8013e34 <stdio_exit_handler+0xc>)
 8013e2a:	4903      	ldr	r1, [pc, #12]	@ (8013e38 <stdio_exit_handler+0x10>)
 8013e2c:	4803      	ldr	r0, [pc, #12]	@ (8013e3c <stdio_exit_handler+0x14>)
 8013e2e:	f000 b869 	b.w	8013f04 <_fwalk_sglue>
 8013e32:	bf00      	nop
 8013e34:	20020698 	.word	0x20020698
 8013e38:	08014b95 	.word	0x08014b95
 8013e3c:	200206a8 	.word	0x200206a8

08013e40 <cleanup_stdio>:
 8013e40:	6841      	ldr	r1, [r0, #4]
 8013e42:	4b0c      	ldr	r3, [pc, #48]	@ (8013e74 <cleanup_stdio+0x34>)
 8013e44:	4299      	cmp	r1, r3
 8013e46:	b510      	push	{r4, lr}
 8013e48:	4604      	mov	r4, r0
 8013e4a:	d001      	beq.n	8013e50 <cleanup_stdio+0x10>
 8013e4c:	f000 fea2 	bl	8014b94 <_fflush_r>
 8013e50:	68a1      	ldr	r1, [r4, #8]
 8013e52:	4b09      	ldr	r3, [pc, #36]	@ (8013e78 <cleanup_stdio+0x38>)
 8013e54:	4299      	cmp	r1, r3
 8013e56:	d002      	beq.n	8013e5e <cleanup_stdio+0x1e>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f000 fe9b 	bl	8014b94 <_fflush_r>
 8013e5e:	68e1      	ldr	r1, [r4, #12]
 8013e60:	4b06      	ldr	r3, [pc, #24]	@ (8013e7c <cleanup_stdio+0x3c>)
 8013e62:	4299      	cmp	r1, r3
 8013e64:	d004      	beq.n	8013e70 <cleanup_stdio+0x30>
 8013e66:	4620      	mov	r0, r4
 8013e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e6c:	f000 be92 	b.w	8014b94 <_fflush_r>
 8013e70:	bd10      	pop	{r4, pc}
 8013e72:	bf00      	nop
 8013e74:	200319e0 	.word	0x200319e0
 8013e78:	20031a48 	.word	0x20031a48
 8013e7c:	20031ab0 	.word	0x20031ab0

08013e80 <global_stdio_init.part.0>:
 8013e80:	b510      	push	{r4, lr}
 8013e82:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb0 <global_stdio_init.part.0+0x30>)
 8013e84:	4c0b      	ldr	r4, [pc, #44]	@ (8013eb4 <global_stdio_init.part.0+0x34>)
 8013e86:	4a0c      	ldr	r2, [pc, #48]	@ (8013eb8 <global_stdio_init.part.0+0x38>)
 8013e88:	601a      	str	r2, [r3, #0]
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2104      	movs	r1, #4
 8013e90:	f7ff ff94 	bl	8013dbc <std>
 8013e94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013e98:	2201      	movs	r2, #1
 8013e9a:	2109      	movs	r1, #9
 8013e9c:	f7ff ff8e 	bl	8013dbc <std>
 8013ea0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013ea4:	2202      	movs	r2, #2
 8013ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eaa:	2112      	movs	r1, #18
 8013eac:	f7ff bf86 	b.w	8013dbc <std>
 8013eb0:	20031b18 	.word	0x20031b18
 8013eb4:	200319e0 	.word	0x200319e0
 8013eb8:	08013e29 	.word	0x08013e29

08013ebc <__sfp_lock_acquire>:
 8013ebc:	4801      	ldr	r0, [pc, #4]	@ (8013ec4 <__sfp_lock_acquire+0x8>)
 8013ebe:	f000 b95a 	b.w	8014176 <__retarget_lock_acquire_recursive>
 8013ec2:	bf00      	nop
 8013ec4:	20031b21 	.word	0x20031b21

08013ec8 <__sfp_lock_release>:
 8013ec8:	4801      	ldr	r0, [pc, #4]	@ (8013ed0 <__sfp_lock_release+0x8>)
 8013eca:	f000 b955 	b.w	8014178 <__retarget_lock_release_recursive>
 8013ece:	bf00      	nop
 8013ed0:	20031b21 	.word	0x20031b21

08013ed4 <__sinit>:
 8013ed4:	b510      	push	{r4, lr}
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	f7ff fff0 	bl	8013ebc <__sfp_lock_acquire>
 8013edc:	6a23      	ldr	r3, [r4, #32]
 8013ede:	b11b      	cbz	r3, 8013ee8 <__sinit+0x14>
 8013ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ee4:	f7ff bff0 	b.w	8013ec8 <__sfp_lock_release>
 8013ee8:	4b04      	ldr	r3, [pc, #16]	@ (8013efc <__sinit+0x28>)
 8013eea:	6223      	str	r3, [r4, #32]
 8013eec:	4b04      	ldr	r3, [pc, #16]	@ (8013f00 <__sinit+0x2c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1f5      	bne.n	8013ee0 <__sinit+0xc>
 8013ef4:	f7ff ffc4 	bl	8013e80 <global_stdio_init.part.0>
 8013ef8:	e7f2      	b.n	8013ee0 <__sinit+0xc>
 8013efa:	bf00      	nop
 8013efc:	08013e41 	.word	0x08013e41
 8013f00:	20031b18 	.word	0x20031b18

08013f04 <_fwalk_sglue>:
 8013f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f08:	4607      	mov	r7, r0
 8013f0a:	4688      	mov	r8, r1
 8013f0c:	4614      	mov	r4, r2
 8013f0e:	2600      	movs	r6, #0
 8013f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f14:	f1b9 0901 	subs.w	r9, r9, #1
 8013f18:	d505      	bpl.n	8013f26 <_fwalk_sglue+0x22>
 8013f1a:	6824      	ldr	r4, [r4, #0]
 8013f1c:	2c00      	cmp	r4, #0
 8013f1e:	d1f7      	bne.n	8013f10 <_fwalk_sglue+0xc>
 8013f20:	4630      	mov	r0, r6
 8013f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f26:	89ab      	ldrh	r3, [r5, #12]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d907      	bls.n	8013f3c <_fwalk_sglue+0x38>
 8013f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f30:	3301      	adds	r3, #1
 8013f32:	d003      	beq.n	8013f3c <_fwalk_sglue+0x38>
 8013f34:	4629      	mov	r1, r5
 8013f36:	4638      	mov	r0, r7
 8013f38:	47c0      	blx	r8
 8013f3a:	4306      	orrs	r6, r0
 8013f3c:	3568      	adds	r5, #104	@ 0x68
 8013f3e:	e7e9      	b.n	8013f14 <_fwalk_sglue+0x10>

08013f40 <iprintf>:
 8013f40:	b40f      	push	{r0, r1, r2, r3}
 8013f42:	b507      	push	{r0, r1, r2, lr}
 8013f44:	4906      	ldr	r1, [pc, #24]	@ (8013f60 <iprintf+0x20>)
 8013f46:	ab04      	add	r3, sp, #16
 8013f48:	6808      	ldr	r0, [r1, #0]
 8013f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f4e:	6881      	ldr	r1, [r0, #8]
 8013f50:	9301      	str	r3, [sp, #4]
 8013f52:	f000 faf5 	bl	8014540 <_vfiprintf_r>
 8013f56:	b003      	add	sp, #12
 8013f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f5c:	b004      	add	sp, #16
 8013f5e:	4770      	bx	lr
 8013f60:	200206a4 	.word	0x200206a4

08013f64 <putchar>:
 8013f64:	4b02      	ldr	r3, [pc, #8]	@ (8013f70 <putchar+0xc>)
 8013f66:	4601      	mov	r1, r0
 8013f68:	6818      	ldr	r0, [r3, #0]
 8013f6a:	6882      	ldr	r2, [r0, #8]
 8013f6c:	f000 be3a 	b.w	8014be4 <_putc_r>
 8013f70:	200206a4 	.word	0x200206a4

08013f74 <sniprintf>:
 8013f74:	b40c      	push	{r2, r3}
 8013f76:	b530      	push	{r4, r5, lr}
 8013f78:	4b17      	ldr	r3, [pc, #92]	@ (8013fd8 <sniprintf+0x64>)
 8013f7a:	1e0c      	subs	r4, r1, #0
 8013f7c:	681d      	ldr	r5, [r3, #0]
 8013f7e:	b09d      	sub	sp, #116	@ 0x74
 8013f80:	da08      	bge.n	8013f94 <sniprintf+0x20>
 8013f82:	238b      	movs	r3, #139	@ 0x8b
 8013f84:	602b      	str	r3, [r5, #0]
 8013f86:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8a:	b01d      	add	sp, #116	@ 0x74
 8013f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f90:	b002      	add	sp, #8
 8013f92:	4770      	bx	lr
 8013f94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013f9c:	bf14      	ite	ne
 8013f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013fa2:	4623      	moveq	r3, r4
 8013fa4:	9304      	str	r3, [sp, #16]
 8013fa6:	9307      	str	r3, [sp, #28]
 8013fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013fac:	9002      	str	r0, [sp, #8]
 8013fae:	9006      	str	r0, [sp, #24]
 8013fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013fb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013fb6:	ab21      	add	r3, sp, #132	@ 0x84
 8013fb8:	a902      	add	r1, sp, #8
 8013fba:	4628      	mov	r0, r5
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	f000 f999 	bl	80142f4 <_svfiprintf_r>
 8013fc2:	1c43      	adds	r3, r0, #1
 8013fc4:	bfbc      	itt	lt
 8013fc6:	238b      	movlt	r3, #139	@ 0x8b
 8013fc8:	602b      	strlt	r3, [r5, #0]
 8013fca:	2c00      	cmp	r4, #0
 8013fcc:	d0dd      	beq.n	8013f8a <sniprintf+0x16>
 8013fce:	9b02      	ldr	r3, [sp, #8]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	701a      	strb	r2, [r3, #0]
 8013fd4:	e7d9      	b.n	8013f8a <sniprintf+0x16>
 8013fd6:	bf00      	nop
 8013fd8:	200206a4 	.word	0x200206a4

08013fdc <__sread>:
 8013fdc:	b510      	push	{r4, lr}
 8013fde:	460c      	mov	r4, r1
 8013fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe4:	f000 f868 	bl	80140b8 <_read_r>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	bfab      	itete	ge
 8013fec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013fee:	89a3      	ldrhlt	r3, [r4, #12]
 8013ff0:	181b      	addge	r3, r3, r0
 8013ff2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013ff6:	bfac      	ite	ge
 8013ff8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013ffa:	81a3      	strhlt	r3, [r4, #12]
 8013ffc:	bd10      	pop	{r4, pc}

08013ffe <__swrite>:
 8013ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014002:	461f      	mov	r7, r3
 8014004:	898b      	ldrh	r3, [r1, #12]
 8014006:	05db      	lsls	r3, r3, #23
 8014008:	4605      	mov	r5, r0
 801400a:	460c      	mov	r4, r1
 801400c:	4616      	mov	r6, r2
 801400e:	d505      	bpl.n	801401c <__swrite+0x1e>
 8014010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014014:	2302      	movs	r3, #2
 8014016:	2200      	movs	r2, #0
 8014018:	f000 f83c 	bl	8014094 <_lseek_r>
 801401c:	89a3      	ldrh	r3, [r4, #12]
 801401e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014022:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014026:	81a3      	strh	r3, [r4, #12]
 8014028:	4632      	mov	r2, r6
 801402a:	463b      	mov	r3, r7
 801402c:	4628      	mov	r0, r5
 801402e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014032:	f000 b863 	b.w	80140fc <_write_r>

08014036 <__sseek>:
 8014036:	b510      	push	{r4, lr}
 8014038:	460c      	mov	r4, r1
 801403a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801403e:	f000 f829 	bl	8014094 <_lseek_r>
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	89a3      	ldrh	r3, [r4, #12]
 8014046:	bf15      	itete	ne
 8014048:	6560      	strne	r0, [r4, #84]	@ 0x54
 801404a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801404e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014052:	81a3      	strheq	r3, [r4, #12]
 8014054:	bf18      	it	ne
 8014056:	81a3      	strhne	r3, [r4, #12]
 8014058:	bd10      	pop	{r4, pc}

0801405a <__sclose>:
 801405a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801405e:	f000 b809 	b.w	8014074 <_close_r>

08014062 <memset>:
 8014062:	4402      	add	r2, r0
 8014064:	4603      	mov	r3, r0
 8014066:	4293      	cmp	r3, r2
 8014068:	d100      	bne.n	801406c <memset+0xa>
 801406a:	4770      	bx	lr
 801406c:	f803 1b01 	strb.w	r1, [r3], #1
 8014070:	e7f9      	b.n	8014066 <memset+0x4>
	...

08014074 <_close_r>:
 8014074:	b538      	push	{r3, r4, r5, lr}
 8014076:	4d06      	ldr	r5, [pc, #24]	@ (8014090 <_close_r+0x1c>)
 8014078:	2300      	movs	r3, #0
 801407a:	4604      	mov	r4, r0
 801407c:	4608      	mov	r0, r1
 801407e:	602b      	str	r3, [r5, #0]
 8014080:	f7fd fee6 	bl	8011e50 <_close>
 8014084:	1c43      	adds	r3, r0, #1
 8014086:	d102      	bne.n	801408e <_close_r+0x1a>
 8014088:	682b      	ldr	r3, [r5, #0]
 801408a:	b103      	cbz	r3, 801408e <_close_r+0x1a>
 801408c:	6023      	str	r3, [r4, #0]
 801408e:	bd38      	pop	{r3, r4, r5, pc}
 8014090:	20031b1c 	.word	0x20031b1c

08014094 <_lseek_r>:
 8014094:	b538      	push	{r3, r4, r5, lr}
 8014096:	4d07      	ldr	r5, [pc, #28]	@ (80140b4 <_lseek_r+0x20>)
 8014098:	4604      	mov	r4, r0
 801409a:	4608      	mov	r0, r1
 801409c:	4611      	mov	r1, r2
 801409e:	2200      	movs	r2, #0
 80140a0:	602a      	str	r2, [r5, #0]
 80140a2:	461a      	mov	r2, r3
 80140a4:	f7fd fefb 	bl	8011e9e <_lseek>
 80140a8:	1c43      	adds	r3, r0, #1
 80140aa:	d102      	bne.n	80140b2 <_lseek_r+0x1e>
 80140ac:	682b      	ldr	r3, [r5, #0]
 80140ae:	b103      	cbz	r3, 80140b2 <_lseek_r+0x1e>
 80140b0:	6023      	str	r3, [r4, #0]
 80140b2:	bd38      	pop	{r3, r4, r5, pc}
 80140b4:	20031b1c 	.word	0x20031b1c

080140b8 <_read_r>:
 80140b8:	b538      	push	{r3, r4, r5, lr}
 80140ba:	4d07      	ldr	r5, [pc, #28]	@ (80140d8 <_read_r+0x20>)
 80140bc:	4604      	mov	r4, r0
 80140be:	4608      	mov	r0, r1
 80140c0:	4611      	mov	r1, r2
 80140c2:	2200      	movs	r2, #0
 80140c4:	602a      	str	r2, [r5, #0]
 80140c6:	461a      	mov	r2, r3
 80140c8:	f7fd fef6 	bl	8011eb8 <_read>
 80140cc:	1c43      	adds	r3, r0, #1
 80140ce:	d102      	bne.n	80140d6 <_read_r+0x1e>
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	b103      	cbz	r3, 80140d6 <_read_r+0x1e>
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	20031b1c 	.word	0x20031b1c

080140dc <_sbrk_r>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	4d06      	ldr	r5, [pc, #24]	@ (80140f8 <_sbrk_r+0x1c>)
 80140e0:	2300      	movs	r3, #0
 80140e2:	4604      	mov	r4, r0
 80140e4:	4608      	mov	r0, r1
 80140e6:	602b      	str	r3, [r5, #0]
 80140e8:	f7fd fe60 	bl	8011dac <_sbrk>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_sbrk_r+0x1a>
 80140f0:	682b      	ldr	r3, [r5, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_sbrk_r+0x1a>
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	20031b1c 	.word	0x20031b1c

080140fc <_write_r>:
 80140fc:	b538      	push	{r3, r4, r5, lr}
 80140fe:	4d07      	ldr	r5, [pc, #28]	@ (801411c <_write_r+0x20>)
 8014100:	4604      	mov	r4, r0
 8014102:	4608      	mov	r0, r1
 8014104:	4611      	mov	r1, r2
 8014106:	2200      	movs	r2, #0
 8014108:	602a      	str	r2, [r5, #0]
 801410a:	461a      	mov	r2, r3
 801410c:	f7fd fe84 	bl	8011e18 <_write>
 8014110:	1c43      	adds	r3, r0, #1
 8014112:	d102      	bne.n	801411a <_write_r+0x1e>
 8014114:	682b      	ldr	r3, [r5, #0]
 8014116:	b103      	cbz	r3, 801411a <_write_r+0x1e>
 8014118:	6023      	str	r3, [r4, #0]
 801411a:	bd38      	pop	{r3, r4, r5, pc}
 801411c:	20031b1c 	.word	0x20031b1c

08014120 <__errno>:
 8014120:	4b01      	ldr	r3, [pc, #4]	@ (8014128 <__errno+0x8>)
 8014122:	6818      	ldr	r0, [r3, #0]
 8014124:	4770      	bx	lr
 8014126:	bf00      	nop
 8014128:	200206a4 	.word	0x200206a4

0801412c <__libc_init_array>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	4d0d      	ldr	r5, [pc, #52]	@ (8014164 <__libc_init_array+0x38>)
 8014130:	4c0d      	ldr	r4, [pc, #52]	@ (8014168 <__libc_init_array+0x3c>)
 8014132:	1b64      	subs	r4, r4, r5
 8014134:	10a4      	asrs	r4, r4, #2
 8014136:	2600      	movs	r6, #0
 8014138:	42a6      	cmp	r6, r4
 801413a:	d109      	bne.n	8014150 <__libc_init_array+0x24>
 801413c:	4d0b      	ldr	r5, [pc, #44]	@ (801416c <__libc_init_array+0x40>)
 801413e:	4c0c      	ldr	r4, [pc, #48]	@ (8014170 <__libc_init_array+0x44>)
 8014140:	f002 fb3a 	bl	80167b8 <_init>
 8014144:	1b64      	subs	r4, r4, r5
 8014146:	10a4      	asrs	r4, r4, #2
 8014148:	2600      	movs	r6, #0
 801414a:	42a6      	cmp	r6, r4
 801414c:	d105      	bne.n	801415a <__libc_init_array+0x2e>
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	f855 3b04 	ldr.w	r3, [r5], #4
 8014154:	4798      	blx	r3
 8014156:	3601      	adds	r6, #1
 8014158:	e7ee      	b.n	8014138 <__libc_init_array+0xc>
 801415a:	f855 3b04 	ldr.w	r3, [r5], #4
 801415e:	4798      	blx	r3
 8014160:	3601      	adds	r6, #1
 8014162:	e7f2      	b.n	801414a <__libc_init_array+0x1e>
 8014164:	08045f08 	.word	0x08045f08
 8014168:	08045f08 	.word	0x08045f08
 801416c:	08045f08 	.word	0x08045f08
 8014170:	08045f0c 	.word	0x08045f0c

08014174 <__retarget_lock_init_recursive>:
 8014174:	4770      	bx	lr

08014176 <__retarget_lock_acquire_recursive>:
 8014176:	4770      	bx	lr

08014178 <__retarget_lock_release_recursive>:
 8014178:	4770      	bx	lr

0801417a <strcpy>:
 801417a:	4603      	mov	r3, r0
 801417c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014180:	f803 2b01 	strb.w	r2, [r3], #1
 8014184:	2a00      	cmp	r2, #0
 8014186:	d1f9      	bne.n	801417c <strcpy+0x2>
 8014188:	4770      	bx	lr

0801418a <memcpy>:
 801418a:	440a      	add	r2, r1
 801418c:	4291      	cmp	r1, r2
 801418e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014192:	d100      	bne.n	8014196 <memcpy+0xc>
 8014194:	4770      	bx	lr
 8014196:	b510      	push	{r4, lr}
 8014198:	f811 4b01 	ldrb.w	r4, [r1], #1
 801419c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141a0:	4291      	cmp	r1, r2
 80141a2:	d1f9      	bne.n	8014198 <memcpy+0xe>
 80141a4:	bd10      	pop	{r4, pc}
	...

080141a8 <_free_r>:
 80141a8:	b538      	push	{r3, r4, r5, lr}
 80141aa:	4605      	mov	r5, r0
 80141ac:	2900      	cmp	r1, #0
 80141ae:	d041      	beq.n	8014234 <_free_r+0x8c>
 80141b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141b4:	1f0c      	subs	r4, r1, #4
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	bfb8      	it	lt
 80141ba:	18e4      	addlt	r4, r4, r3
 80141bc:	f7ff fdf2 	bl	8013da4 <__malloc_lock>
 80141c0:	4a1d      	ldr	r2, [pc, #116]	@ (8014238 <_free_r+0x90>)
 80141c2:	6813      	ldr	r3, [r2, #0]
 80141c4:	b933      	cbnz	r3, 80141d4 <_free_r+0x2c>
 80141c6:	6063      	str	r3, [r4, #4]
 80141c8:	6014      	str	r4, [r2, #0]
 80141ca:	4628      	mov	r0, r5
 80141cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141d0:	f7ff bdee 	b.w	8013db0 <__malloc_unlock>
 80141d4:	42a3      	cmp	r3, r4
 80141d6:	d908      	bls.n	80141ea <_free_r+0x42>
 80141d8:	6820      	ldr	r0, [r4, #0]
 80141da:	1821      	adds	r1, r4, r0
 80141dc:	428b      	cmp	r3, r1
 80141de:	bf01      	itttt	eq
 80141e0:	6819      	ldreq	r1, [r3, #0]
 80141e2:	685b      	ldreq	r3, [r3, #4]
 80141e4:	1809      	addeq	r1, r1, r0
 80141e6:	6021      	streq	r1, [r4, #0]
 80141e8:	e7ed      	b.n	80141c6 <_free_r+0x1e>
 80141ea:	461a      	mov	r2, r3
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	b10b      	cbz	r3, 80141f4 <_free_r+0x4c>
 80141f0:	42a3      	cmp	r3, r4
 80141f2:	d9fa      	bls.n	80141ea <_free_r+0x42>
 80141f4:	6811      	ldr	r1, [r2, #0]
 80141f6:	1850      	adds	r0, r2, r1
 80141f8:	42a0      	cmp	r0, r4
 80141fa:	d10b      	bne.n	8014214 <_free_r+0x6c>
 80141fc:	6820      	ldr	r0, [r4, #0]
 80141fe:	4401      	add	r1, r0
 8014200:	1850      	adds	r0, r2, r1
 8014202:	4283      	cmp	r3, r0
 8014204:	6011      	str	r1, [r2, #0]
 8014206:	d1e0      	bne.n	80141ca <_free_r+0x22>
 8014208:	6818      	ldr	r0, [r3, #0]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	6053      	str	r3, [r2, #4]
 801420e:	4408      	add	r0, r1
 8014210:	6010      	str	r0, [r2, #0]
 8014212:	e7da      	b.n	80141ca <_free_r+0x22>
 8014214:	d902      	bls.n	801421c <_free_r+0x74>
 8014216:	230c      	movs	r3, #12
 8014218:	602b      	str	r3, [r5, #0]
 801421a:	e7d6      	b.n	80141ca <_free_r+0x22>
 801421c:	6820      	ldr	r0, [r4, #0]
 801421e:	1821      	adds	r1, r4, r0
 8014220:	428b      	cmp	r3, r1
 8014222:	bf04      	itt	eq
 8014224:	6819      	ldreq	r1, [r3, #0]
 8014226:	685b      	ldreq	r3, [r3, #4]
 8014228:	6063      	str	r3, [r4, #4]
 801422a:	bf04      	itt	eq
 801422c:	1809      	addeq	r1, r1, r0
 801422e:	6021      	streq	r1, [r4, #0]
 8014230:	6054      	str	r4, [r2, #4]
 8014232:	e7ca      	b.n	80141ca <_free_r+0x22>
 8014234:	bd38      	pop	{r3, r4, r5, pc}
 8014236:	bf00      	nop
 8014238:	200319dc 	.word	0x200319dc

0801423c <__ssputs_r>:
 801423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014240:	688e      	ldr	r6, [r1, #8]
 8014242:	461f      	mov	r7, r3
 8014244:	42be      	cmp	r6, r7
 8014246:	680b      	ldr	r3, [r1, #0]
 8014248:	4682      	mov	sl, r0
 801424a:	460c      	mov	r4, r1
 801424c:	4690      	mov	r8, r2
 801424e:	d82d      	bhi.n	80142ac <__ssputs_r+0x70>
 8014250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014254:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014258:	d026      	beq.n	80142a8 <__ssputs_r+0x6c>
 801425a:	6965      	ldr	r5, [r4, #20]
 801425c:	6909      	ldr	r1, [r1, #16]
 801425e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014262:	eba3 0901 	sub.w	r9, r3, r1
 8014266:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801426a:	1c7b      	adds	r3, r7, #1
 801426c:	444b      	add	r3, r9
 801426e:	106d      	asrs	r5, r5, #1
 8014270:	429d      	cmp	r5, r3
 8014272:	bf38      	it	cc
 8014274:	461d      	movcc	r5, r3
 8014276:	0553      	lsls	r3, r2, #21
 8014278:	d527      	bpl.n	80142ca <__ssputs_r+0x8e>
 801427a:	4629      	mov	r1, r5
 801427c:	f7ff fd12 	bl	8013ca4 <_malloc_r>
 8014280:	4606      	mov	r6, r0
 8014282:	b360      	cbz	r0, 80142de <__ssputs_r+0xa2>
 8014284:	6921      	ldr	r1, [r4, #16]
 8014286:	464a      	mov	r2, r9
 8014288:	f7ff ff7f 	bl	801418a <memcpy>
 801428c:	89a3      	ldrh	r3, [r4, #12]
 801428e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014296:	81a3      	strh	r3, [r4, #12]
 8014298:	6126      	str	r6, [r4, #16]
 801429a:	6165      	str	r5, [r4, #20]
 801429c:	444e      	add	r6, r9
 801429e:	eba5 0509 	sub.w	r5, r5, r9
 80142a2:	6026      	str	r6, [r4, #0]
 80142a4:	60a5      	str	r5, [r4, #8]
 80142a6:	463e      	mov	r6, r7
 80142a8:	42be      	cmp	r6, r7
 80142aa:	d900      	bls.n	80142ae <__ssputs_r+0x72>
 80142ac:	463e      	mov	r6, r7
 80142ae:	6820      	ldr	r0, [r4, #0]
 80142b0:	4632      	mov	r2, r6
 80142b2:	4641      	mov	r1, r8
 80142b4:	f000 fd5e 	bl	8014d74 <memmove>
 80142b8:	68a3      	ldr	r3, [r4, #8]
 80142ba:	1b9b      	subs	r3, r3, r6
 80142bc:	60a3      	str	r3, [r4, #8]
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	4433      	add	r3, r6
 80142c2:	6023      	str	r3, [r4, #0]
 80142c4:	2000      	movs	r0, #0
 80142c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ca:	462a      	mov	r2, r5
 80142cc:	f000 fd6c 	bl	8014da8 <_realloc_r>
 80142d0:	4606      	mov	r6, r0
 80142d2:	2800      	cmp	r0, #0
 80142d4:	d1e0      	bne.n	8014298 <__ssputs_r+0x5c>
 80142d6:	6921      	ldr	r1, [r4, #16]
 80142d8:	4650      	mov	r0, sl
 80142da:	f7ff ff65 	bl	80141a8 <_free_r>
 80142de:	230c      	movs	r3, #12
 80142e0:	f8ca 3000 	str.w	r3, [sl]
 80142e4:	89a3      	ldrh	r3, [r4, #12]
 80142e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142ea:	81a3      	strh	r3, [r4, #12]
 80142ec:	f04f 30ff 	mov.w	r0, #4294967295
 80142f0:	e7e9      	b.n	80142c6 <__ssputs_r+0x8a>
	...

080142f4 <_svfiprintf_r>:
 80142f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f8:	4698      	mov	r8, r3
 80142fa:	898b      	ldrh	r3, [r1, #12]
 80142fc:	061b      	lsls	r3, r3, #24
 80142fe:	b09d      	sub	sp, #116	@ 0x74
 8014300:	4607      	mov	r7, r0
 8014302:	460d      	mov	r5, r1
 8014304:	4614      	mov	r4, r2
 8014306:	d510      	bpl.n	801432a <_svfiprintf_r+0x36>
 8014308:	690b      	ldr	r3, [r1, #16]
 801430a:	b973      	cbnz	r3, 801432a <_svfiprintf_r+0x36>
 801430c:	2140      	movs	r1, #64	@ 0x40
 801430e:	f7ff fcc9 	bl	8013ca4 <_malloc_r>
 8014312:	6028      	str	r0, [r5, #0]
 8014314:	6128      	str	r0, [r5, #16]
 8014316:	b930      	cbnz	r0, 8014326 <_svfiprintf_r+0x32>
 8014318:	230c      	movs	r3, #12
 801431a:	603b      	str	r3, [r7, #0]
 801431c:	f04f 30ff 	mov.w	r0, #4294967295
 8014320:	b01d      	add	sp, #116	@ 0x74
 8014322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014326:	2340      	movs	r3, #64	@ 0x40
 8014328:	616b      	str	r3, [r5, #20]
 801432a:	2300      	movs	r3, #0
 801432c:	9309      	str	r3, [sp, #36]	@ 0x24
 801432e:	2320      	movs	r3, #32
 8014330:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014334:	f8cd 800c 	str.w	r8, [sp, #12]
 8014338:	2330      	movs	r3, #48	@ 0x30
 801433a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80144d8 <_svfiprintf_r+0x1e4>
 801433e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014342:	f04f 0901 	mov.w	r9, #1
 8014346:	4623      	mov	r3, r4
 8014348:	469a      	mov	sl, r3
 801434a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801434e:	b10a      	cbz	r2, 8014354 <_svfiprintf_r+0x60>
 8014350:	2a25      	cmp	r2, #37	@ 0x25
 8014352:	d1f9      	bne.n	8014348 <_svfiprintf_r+0x54>
 8014354:	ebba 0b04 	subs.w	fp, sl, r4
 8014358:	d00b      	beq.n	8014372 <_svfiprintf_r+0x7e>
 801435a:	465b      	mov	r3, fp
 801435c:	4622      	mov	r2, r4
 801435e:	4629      	mov	r1, r5
 8014360:	4638      	mov	r0, r7
 8014362:	f7ff ff6b 	bl	801423c <__ssputs_r>
 8014366:	3001      	adds	r0, #1
 8014368:	f000 80a7 	beq.w	80144ba <_svfiprintf_r+0x1c6>
 801436c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801436e:	445a      	add	r2, fp
 8014370:	9209      	str	r2, [sp, #36]	@ 0x24
 8014372:	f89a 3000 	ldrb.w	r3, [sl]
 8014376:	2b00      	cmp	r3, #0
 8014378:	f000 809f 	beq.w	80144ba <_svfiprintf_r+0x1c6>
 801437c:	2300      	movs	r3, #0
 801437e:	f04f 32ff 	mov.w	r2, #4294967295
 8014382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014386:	f10a 0a01 	add.w	sl, sl, #1
 801438a:	9304      	str	r3, [sp, #16]
 801438c:	9307      	str	r3, [sp, #28]
 801438e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014392:	931a      	str	r3, [sp, #104]	@ 0x68
 8014394:	4654      	mov	r4, sl
 8014396:	2205      	movs	r2, #5
 8014398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801439c:	484e      	ldr	r0, [pc, #312]	@ (80144d8 <_svfiprintf_r+0x1e4>)
 801439e:	f7eb ffbf 	bl	8000320 <memchr>
 80143a2:	9a04      	ldr	r2, [sp, #16]
 80143a4:	b9d8      	cbnz	r0, 80143de <_svfiprintf_r+0xea>
 80143a6:	06d0      	lsls	r0, r2, #27
 80143a8:	bf44      	itt	mi
 80143aa:	2320      	movmi	r3, #32
 80143ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143b0:	0711      	lsls	r1, r2, #28
 80143b2:	bf44      	itt	mi
 80143b4:	232b      	movmi	r3, #43	@ 0x2b
 80143b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143ba:	f89a 3000 	ldrb.w	r3, [sl]
 80143be:	2b2a      	cmp	r3, #42	@ 0x2a
 80143c0:	d015      	beq.n	80143ee <_svfiprintf_r+0xfa>
 80143c2:	9a07      	ldr	r2, [sp, #28]
 80143c4:	4654      	mov	r4, sl
 80143c6:	2000      	movs	r0, #0
 80143c8:	f04f 0c0a 	mov.w	ip, #10
 80143cc:	4621      	mov	r1, r4
 80143ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143d2:	3b30      	subs	r3, #48	@ 0x30
 80143d4:	2b09      	cmp	r3, #9
 80143d6:	d94b      	bls.n	8014470 <_svfiprintf_r+0x17c>
 80143d8:	b1b0      	cbz	r0, 8014408 <_svfiprintf_r+0x114>
 80143da:	9207      	str	r2, [sp, #28]
 80143dc:	e014      	b.n	8014408 <_svfiprintf_r+0x114>
 80143de:	eba0 0308 	sub.w	r3, r0, r8
 80143e2:	fa09 f303 	lsl.w	r3, r9, r3
 80143e6:	4313      	orrs	r3, r2
 80143e8:	9304      	str	r3, [sp, #16]
 80143ea:	46a2      	mov	sl, r4
 80143ec:	e7d2      	b.n	8014394 <_svfiprintf_r+0xa0>
 80143ee:	9b03      	ldr	r3, [sp, #12]
 80143f0:	1d19      	adds	r1, r3, #4
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	9103      	str	r1, [sp, #12]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	bfbb      	ittet	lt
 80143fa:	425b      	neglt	r3, r3
 80143fc:	f042 0202 	orrlt.w	r2, r2, #2
 8014400:	9307      	strge	r3, [sp, #28]
 8014402:	9307      	strlt	r3, [sp, #28]
 8014404:	bfb8      	it	lt
 8014406:	9204      	strlt	r2, [sp, #16]
 8014408:	7823      	ldrb	r3, [r4, #0]
 801440a:	2b2e      	cmp	r3, #46	@ 0x2e
 801440c:	d10a      	bne.n	8014424 <_svfiprintf_r+0x130>
 801440e:	7863      	ldrb	r3, [r4, #1]
 8014410:	2b2a      	cmp	r3, #42	@ 0x2a
 8014412:	d132      	bne.n	801447a <_svfiprintf_r+0x186>
 8014414:	9b03      	ldr	r3, [sp, #12]
 8014416:	1d1a      	adds	r2, r3, #4
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	9203      	str	r2, [sp, #12]
 801441c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014420:	3402      	adds	r4, #2
 8014422:	9305      	str	r3, [sp, #20]
 8014424:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80144e8 <_svfiprintf_r+0x1f4>
 8014428:	7821      	ldrb	r1, [r4, #0]
 801442a:	2203      	movs	r2, #3
 801442c:	4650      	mov	r0, sl
 801442e:	f7eb ff77 	bl	8000320 <memchr>
 8014432:	b138      	cbz	r0, 8014444 <_svfiprintf_r+0x150>
 8014434:	9b04      	ldr	r3, [sp, #16]
 8014436:	eba0 000a 	sub.w	r0, r0, sl
 801443a:	2240      	movs	r2, #64	@ 0x40
 801443c:	4082      	lsls	r2, r0
 801443e:	4313      	orrs	r3, r2
 8014440:	3401      	adds	r4, #1
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014448:	4824      	ldr	r0, [pc, #144]	@ (80144dc <_svfiprintf_r+0x1e8>)
 801444a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801444e:	2206      	movs	r2, #6
 8014450:	f7eb ff66 	bl	8000320 <memchr>
 8014454:	2800      	cmp	r0, #0
 8014456:	d036      	beq.n	80144c6 <_svfiprintf_r+0x1d2>
 8014458:	4b21      	ldr	r3, [pc, #132]	@ (80144e0 <_svfiprintf_r+0x1ec>)
 801445a:	bb1b      	cbnz	r3, 80144a4 <_svfiprintf_r+0x1b0>
 801445c:	9b03      	ldr	r3, [sp, #12]
 801445e:	3307      	adds	r3, #7
 8014460:	f023 0307 	bic.w	r3, r3, #7
 8014464:	3308      	adds	r3, #8
 8014466:	9303      	str	r3, [sp, #12]
 8014468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801446a:	4433      	add	r3, r6
 801446c:	9309      	str	r3, [sp, #36]	@ 0x24
 801446e:	e76a      	b.n	8014346 <_svfiprintf_r+0x52>
 8014470:	fb0c 3202 	mla	r2, ip, r2, r3
 8014474:	460c      	mov	r4, r1
 8014476:	2001      	movs	r0, #1
 8014478:	e7a8      	b.n	80143cc <_svfiprintf_r+0xd8>
 801447a:	2300      	movs	r3, #0
 801447c:	3401      	adds	r4, #1
 801447e:	9305      	str	r3, [sp, #20]
 8014480:	4619      	mov	r1, r3
 8014482:	f04f 0c0a 	mov.w	ip, #10
 8014486:	4620      	mov	r0, r4
 8014488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801448c:	3a30      	subs	r2, #48	@ 0x30
 801448e:	2a09      	cmp	r2, #9
 8014490:	d903      	bls.n	801449a <_svfiprintf_r+0x1a6>
 8014492:	2b00      	cmp	r3, #0
 8014494:	d0c6      	beq.n	8014424 <_svfiprintf_r+0x130>
 8014496:	9105      	str	r1, [sp, #20]
 8014498:	e7c4      	b.n	8014424 <_svfiprintf_r+0x130>
 801449a:	fb0c 2101 	mla	r1, ip, r1, r2
 801449e:	4604      	mov	r4, r0
 80144a0:	2301      	movs	r3, #1
 80144a2:	e7f0      	b.n	8014486 <_svfiprintf_r+0x192>
 80144a4:	ab03      	add	r3, sp, #12
 80144a6:	9300      	str	r3, [sp, #0]
 80144a8:	462a      	mov	r2, r5
 80144aa:	4b0e      	ldr	r3, [pc, #56]	@ (80144e4 <_svfiprintf_r+0x1f0>)
 80144ac:	a904      	add	r1, sp, #16
 80144ae:	4638      	mov	r0, r7
 80144b0:	f3af 8000 	nop.w
 80144b4:	1c42      	adds	r2, r0, #1
 80144b6:	4606      	mov	r6, r0
 80144b8:	d1d6      	bne.n	8014468 <_svfiprintf_r+0x174>
 80144ba:	89ab      	ldrh	r3, [r5, #12]
 80144bc:	065b      	lsls	r3, r3, #25
 80144be:	f53f af2d 	bmi.w	801431c <_svfiprintf_r+0x28>
 80144c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144c4:	e72c      	b.n	8014320 <_svfiprintf_r+0x2c>
 80144c6:	ab03      	add	r3, sp, #12
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	462a      	mov	r2, r5
 80144cc:	4b05      	ldr	r3, [pc, #20]	@ (80144e4 <_svfiprintf_r+0x1f0>)
 80144ce:	a904      	add	r1, sp, #16
 80144d0:	4638      	mov	r0, r7
 80144d2:	f000 f9bb 	bl	801484c <_printf_i>
 80144d6:	e7ed      	b.n	80144b4 <_svfiprintf_r+0x1c0>
 80144d8:	08043b9c 	.word	0x08043b9c
 80144dc:	08043ba6 	.word	0x08043ba6
 80144e0:	00000000 	.word	0x00000000
 80144e4:	0801423d 	.word	0x0801423d
 80144e8:	08043ba2 	.word	0x08043ba2

080144ec <__sfputc_r>:
 80144ec:	6893      	ldr	r3, [r2, #8]
 80144ee:	3b01      	subs	r3, #1
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	b410      	push	{r4}
 80144f4:	6093      	str	r3, [r2, #8]
 80144f6:	da08      	bge.n	801450a <__sfputc_r+0x1e>
 80144f8:	6994      	ldr	r4, [r2, #24]
 80144fa:	42a3      	cmp	r3, r4
 80144fc:	db01      	blt.n	8014502 <__sfputc_r+0x16>
 80144fe:	290a      	cmp	r1, #10
 8014500:	d103      	bne.n	801450a <__sfputc_r+0x1e>
 8014502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014506:	f000 bba1 	b.w	8014c4c <__swbuf_r>
 801450a:	6813      	ldr	r3, [r2, #0]
 801450c:	1c58      	adds	r0, r3, #1
 801450e:	6010      	str	r0, [r2, #0]
 8014510:	7019      	strb	r1, [r3, #0]
 8014512:	4608      	mov	r0, r1
 8014514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014518:	4770      	bx	lr

0801451a <__sfputs_r>:
 801451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451c:	4606      	mov	r6, r0
 801451e:	460f      	mov	r7, r1
 8014520:	4614      	mov	r4, r2
 8014522:	18d5      	adds	r5, r2, r3
 8014524:	42ac      	cmp	r4, r5
 8014526:	d101      	bne.n	801452c <__sfputs_r+0x12>
 8014528:	2000      	movs	r0, #0
 801452a:	e007      	b.n	801453c <__sfputs_r+0x22>
 801452c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014530:	463a      	mov	r2, r7
 8014532:	4630      	mov	r0, r6
 8014534:	f7ff ffda 	bl	80144ec <__sfputc_r>
 8014538:	1c43      	adds	r3, r0, #1
 801453a:	d1f3      	bne.n	8014524 <__sfputs_r+0xa>
 801453c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014540 <_vfiprintf_r>:
 8014540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	460d      	mov	r5, r1
 8014546:	b09d      	sub	sp, #116	@ 0x74
 8014548:	4614      	mov	r4, r2
 801454a:	4698      	mov	r8, r3
 801454c:	4606      	mov	r6, r0
 801454e:	b118      	cbz	r0, 8014558 <_vfiprintf_r+0x18>
 8014550:	6a03      	ldr	r3, [r0, #32]
 8014552:	b90b      	cbnz	r3, 8014558 <_vfiprintf_r+0x18>
 8014554:	f7ff fcbe 	bl	8013ed4 <__sinit>
 8014558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801455a:	07d9      	lsls	r1, r3, #31
 801455c:	d405      	bmi.n	801456a <_vfiprintf_r+0x2a>
 801455e:	89ab      	ldrh	r3, [r5, #12]
 8014560:	059a      	lsls	r2, r3, #22
 8014562:	d402      	bmi.n	801456a <_vfiprintf_r+0x2a>
 8014564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014566:	f7ff fe06 	bl	8014176 <__retarget_lock_acquire_recursive>
 801456a:	89ab      	ldrh	r3, [r5, #12]
 801456c:	071b      	lsls	r3, r3, #28
 801456e:	d501      	bpl.n	8014574 <_vfiprintf_r+0x34>
 8014570:	692b      	ldr	r3, [r5, #16]
 8014572:	b99b      	cbnz	r3, 801459c <_vfiprintf_r+0x5c>
 8014574:	4629      	mov	r1, r5
 8014576:	4630      	mov	r0, r6
 8014578:	f000 fba6 	bl	8014cc8 <__swsetup_r>
 801457c:	b170      	cbz	r0, 801459c <_vfiprintf_r+0x5c>
 801457e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014580:	07dc      	lsls	r4, r3, #31
 8014582:	d504      	bpl.n	801458e <_vfiprintf_r+0x4e>
 8014584:	f04f 30ff 	mov.w	r0, #4294967295
 8014588:	b01d      	add	sp, #116	@ 0x74
 801458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801458e:	89ab      	ldrh	r3, [r5, #12]
 8014590:	0598      	lsls	r0, r3, #22
 8014592:	d4f7      	bmi.n	8014584 <_vfiprintf_r+0x44>
 8014594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014596:	f7ff fdef 	bl	8014178 <__retarget_lock_release_recursive>
 801459a:	e7f3      	b.n	8014584 <_vfiprintf_r+0x44>
 801459c:	2300      	movs	r3, #0
 801459e:	9309      	str	r3, [sp, #36]	@ 0x24
 80145a0:	2320      	movs	r3, #32
 80145a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80145a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80145aa:	2330      	movs	r3, #48	@ 0x30
 80145ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801475c <_vfiprintf_r+0x21c>
 80145b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80145b4:	f04f 0901 	mov.w	r9, #1
 80145b8:	4623      	mov	r3, r4
 80145ba:	469a      	mov	sl, r3
 80145bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145c0:	b10a      	cbz	r2, 80145c6 <_vfiprintf_r+0x86>
 80145c2:	2a25      	cmp	r2, #37	@ 0x25
 80145c4:	d1f9      	bne.n	80145ba <_vfiprintf_r+0x7a>
 80145c6:	ebba 0b04 	subs.w	fp, sl, r4
 80145ca:	d00b      	beq.n	80145e4 <_vfiprintf_r+0xa4>
 80145cc:	465b      	mov	r3, fp
 80145ce:	4622      	mov	r2, r4
 80145d0:	4629      	mov	r1, r5
 80145d2:	4630      	mov	r0, r6
 80145d4:	f7ff ffa1 	bl	801451a <__sfputs_r>
 80145d8:	3001      	adds	r0, #1
 80145da:	f000 80a7 	beq.w	801472c <_vfiprintf_r+0x1ec>
 80145de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145e0:	445a      	add	r2, fp
 80145e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80145e4:	f89a 3000 	ldrb.w	r3, [sl]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f000 809f 	beq.w	801472c <_vfiprintf_r+0x1ec>
 80145ee:	2300      	movs	r3, #0
 80145f0:	f04f 32ff 	mov.w	r2, #4294967295
 80145f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145f8:	f10a 0a01 	add.w	sl, sl, #1
 80145fc:	9304      	str	r3, [sp, #16]
 80145fe:	9307      	str	r3, [sp, #28]
 8014600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014604:	931a      	str	r3, [sp, #104]	@ 0x68
 8014606:	4654      	mov	r4, sl
 8014608:	2205      	movs	r2, #5
 801460a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801460e:	4853      	ldr	r0, [pc, #332]	@ (801475c <_vfiprintf_r+0x21c>)
 8014610:	f7eb fe86 	bl	8000320 <memchr>
 8014614:	9a04      	ldr	r2, [sp, #16]
 8014616:	b9d8      	cbnz	r0, 8014650 <_vfiprintf_r+0x110>
 8014618:	06d1      	lsls	r1, r2, #27
 801461a:	bf44      	itt	mi
 801461c:	2320      	movmi	r3, #32
 801461e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014622:	0713      	lsls	r3, r2, #28
 8014624:	bf44      	itt	mi
 8014626:	232b      	movmi	r3, #43	@ 0x2b
 8014628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801462c:	f89a 3000 	ldrb.w	r3, [sl]
 8014630:	2b2a      	cmp	r3, #42	@ 0x2a
 8014632:	d015      	beq.n	8014660 <_vfiprintf_r+0x120>
 8014634:	9a07      	ldr	r2, [sp, #28]
 8014636:	4654      	mov	r4, sl
 8014638:	2000      	movs	r0, #0
 801463a:	f04f 0c0a 	mov.w	ip, #10
 801463e:	4621      	mov	r1, r4
 8014640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014644:	3b30      	subs	r3, #48	@ 0x30
 8014646:	2b09      	cmp	r3, #9
 8014648:	d94b      	bls.n	80146e2 <_vfiprintf_r+0x1a2>
 801464a:	b1b0      	cbz	r0, 801467a <_vfiprintf_r+0x13a>
 801464c:	9207      	str	r2, [sp, #28]
 801464e:	e014      	b.n	801467a <_vfiprintf_r+0x13a>
 8014650:	eba0 0308 	sub.w	r3, r0, r8
 8014654:	fa09 f303 	lsl.w	r3, r9, r3
 8014658:	4313      	orrs	r3, r2
 801465a:	9304      	str	r3, [sp, #16]
 801465c:	46a2      	mov	sl, r4
 801465e:	e7d2      	b.n	8014606 <_vfiprintf_r+0xc6>
 8014660:	9b03      	ldr	r3, [sp, #12]
 8014662:	1d19      	adds	r1, r3, #4
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	9103      	str	r1, [sp, #12]
 8014668:	2b00      	cmp	r3, #0
 801466a:	bfbb      	ittet	lt
 801466c:	425b      	neglt	r3, r3
 801466e:	f042 0202 	orrlt.w	r2, r2, #2
 8014672:	9307      	strge	r3, [sp, #28]
 8014674:	9307      	strlt	r3, [sp, #28]
 8014676:	bfb8      	it	lt
 8014678:	9204      	strlt	r2, [sp, #16]
 801467a:	7823      	ldrb	r3, [r4, #0]
 801467c:	2b2e      	cmp	r3, #46	@ 0x2e
 801467e:	d10a      	bne.n	8014696 <_vfiprintf_r+0x156>
 8014680:	7863      	ldrb	r3, [r4, #1]
 8014682:	2b2a      	cmp	r3, #42	@ 0x2a
 8014684:	d132      	bne.n	80146ec <_vfiprintf_r+0x1ac>
 8014686:	9b03      	ldr	r3, [sp, #12]
 8014688:	1d1a      	adds	r2, r3, #4
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	9203      	str	r2, [sp, #12]
 801468e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014692:	3402      	adds	r4, #2
 8014694:	9305      	str	r3, [sp, #20]
 8014696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801476c <_vfiprintf_r+0x22c>
 801469a:	7821      	ldrb	r1, [r4, #0]
 801469c:	2203      	movs	r2, #3
 801469e:	4650      	mov	r0, sl
 80146a0:	f7eb fe3e 	bl	8000320 <memchr>
 80146a4:	b138      	cbz	r0, 80146b6 <_vfiprintf_r+0x176>
 80146a6:	9b04      	ldr	r3, [sp, #16]
 80146a8:	eba0 000a 	sub.w	r0, r0, sl
 80146ac:	2240      	movs	r2, #64	@ 0x40
 80146ae:	4082      	lsls	r2, r0
 80146b0:	4313      	orrs	r3, r2
 80146b2:	3401      	adds	r4, #1
 80146b4:	9304      	str	r3, [sp, #16]
 80146b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146ba:	4829      	ldr	r0, [pc, #164]	@ (8014760 <_vfiprintf_r+0x220>)
 80146bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80146c0:	2206      	movs	r2, #6
 80146c2:	f7eb fe2d 	bl	8000320 <memchr>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d03f      	beq.n	801474a <_vfiprintf_r+0x20a>
 80146ca:	4b26      	ldr	r3, [pc, #152]	@ (8014764 <_vfiprintf_r+0x224>)
 80146cc:	bb1b      	cbnz	r3, 8014716 <_vfiprintf_r+0x1d6>
 80146ce:	9b03      	ldr	r3, [sp, #12]
 80146d0:	3307      	adds	r3, #7
 80146d2:	f023 0307 	bic.w	r3, r3, #7
 80146d6:	3308      	adds	r3, #8
 80146d8:	9303      	str	r3, [sp, #12]
 80146da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146dc:	443b      	add	r3, r7
 80146de:	9309      	str	r3, [sp, #36]	@ 0x24
 80146e0:	e76a      	b.n	80145b8 <_vfiprintf_r+0x78>
 80146e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80146e6:	460c      	mov	r4, r1
 80146e8:	2001      	movs	r0, #1
 80146ea:	e7a8      	b.n	801463e <_vfiprintf_r+0xfe>
 80146ec:	2300      	movs	r3, #0
 80146ee:	3401      	adds	r4, #1
 80146f0:	9305      	str	r3, [sp, #20]
 80146f2:	4619      	mov	r1, r3
 80146f4:	f04f 0c0a 	mov.w	ip, #10
 80146f8:	4620      	mov	r0, r4
 80146fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146fe:	3a30      	subs	r2, #48	@ 0x30
 8014700:	2a09      	cmp	r2, #9
 8014702:	d903      	bls.n	801470c <_vfiprintf_r+0x1cc>
 8014704:	2b00      	cmp	r3, #0
 8014706:	d0c6      	beq.n	8014696 <_vfiprintf_r+0x156>
 8014708:	9105      	str	r1, [sp, #20]
 801470a:	e7c4      	b.n	8014696 <_vfiprintf_r+0x156>
 801470c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014710:	4604      	mov	r4, r0
 8014712:	2301      	movs	r3, #1
 8014714:	e7f0      	b.n	80146f8 <_vfiprintf_r+0x1b8>
 8014716:	ab03      	add	r3, sp, #12
 8014718:	9300      	str	r3, [sp, #0]
 801471a:	462a      	mov	r2, r5
 801471c:	4b12      	ldr	r3, [pc, #72]	@ (8014768 <_vfiprintf_r+0x228>)
 801471e:	a904      	add	r1, sp, #16
 8014720:	4630      	mov	r0, r6
 8014722:	f3af 8000 	nop.w
 8014726:	4607      	mov	r7, r0
 8014728:	1c78      	adds	r0, r7, #1
 801472a:	d1d6      	bne.n	80146da <_vfiprintf_r+0x19a>
 801472c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801472e:	07d9      	lsls	r1, r3, #31
 8014730:	d405      	bmi.n	801473e <_vfiprintf_r+0x1fe>
 8014732:	89ab      	ldrh	r3, [r5, #12]
 8014734:	059a      	lsls	r2, r3, #22
 8014736:	d402      	bmi.n	801473e <_vfiprintf_r+0x1fe>
 8014738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801473a:	f7ff fd1d 	bl	8014178 <__retarget_lock_release_recursive>
 801473e:	89ab      	ldrh	r3, [r5, #12]
 8014740:	065b      	lsls	r3, r3, #25
 8014742:	f53f af1f 	bmi.w	8014584 <_vfiprintf_r+0x44>
 8014746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014748:	e71e      	b.n	8014588 <_vfiprintf_r+0x48>
 801474a:	ab03      	add	r3, sp, #12
 801474c:	9300      	str	r3, [sp, #0]
 801474e:	462a      	mov	r2, r5
 8014750:	4b05      	ldr	r3, [pc, #20]	@ (8014768 <_vfiprintf_r+0x228>)
 8014752:	a904      	add	r1, sp, #16
 8014754:	4630      	mov	r0, r6
 8014756:	f000 f879 	bl	801484c <_printf_i>
 801475a:	e7e4      	b.n	8014726 <_vfiprintf_r+0x1e6>
 801475c:	08043b9c 	.word	0x08043b9c
 8014760:	08043ba6 	.word	0x08043ba6
 8014764:	00000000 	.word	0x00000000
 8014768:	0801451b 	.word	0x0801451b
 801476c:	08043ba2 	.word	0x08043ba2

08014770 <_printf_common>:
 8014770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014774:	4616      	mov	r6, r2
 8014776:	4698      	mov	r8, r3
 8014778:	688a      	ldr	r2, [r1, #8]
 801477a:	690b      	ldr	r3, [r1, #16]
 801477c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014780:	4293      	cmp	r3, r2
 8014782:	bfb8      	it	lt
 8014784:	4613      	movlt	r3, r2
 8014786:	6033      	str	r3, [r6, #0]
 8014788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801478c:	4607      	mov	r7, r0
 801478e:	460c      	mov	r4, r1
 8014790:	b10a      	cbz	r2, 8014796 <_printf_common+0x26>
 8014792:	3301      	adds	r3, #1
 8014794:	6033      	str	r3, [r6, #0]
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	0699      	lsls	r1, r3, #26
 801479a:	bf42      	ittt	mi
 801479c:	6833      	ldrmi	r3, [r6, #0]
 801479e:	3302      	addmi	r3, #2
 80147a0:	6033      	strmi	r3, [r6, #0]
 80147a2:	6825      	ldr	r5, [r4, #0]
 80147a4:	f015 0506 	ands.w	r5, r5, #6
 80147a8:	d106      	bne.n	80147b8 <_printf_common+0x48>
 80147aa:	f104 0a19 	add.w	sl, r4, #25
 80147ae:	68e3      	ldr	r3, [r4, #12]
 80147b0:	6832      	ldr	r2, [r6, #0]
 80147b2:	1a9b      	subs	r3, r3, r2
 80147b4:	42ab      	cmp	r3, r5
 80147b6:	dc26      	bgt.n	8014806 <_printf_common+0x96>
 80147b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80147bc:	6822      	ldr	r2, [r4, #0]
 80147be:	3b00      	subs	r3, #0
 80147c0:	bf18      	it	ne
 80147c2:	2301      	movne	r3, #1
 80147c4:	0692      	lsls	r2, r2, #26
 80147c6:	d42b      	bmi.n	8014820 <_printf_common+0xb0>
 80147c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80147cc:	4641      	mov	r1, r8
 80147ce:	4638      	mov	r0, r7
 80147d0:	47c8      	blx	r9
 80147d2:	3001      	adds	r0, #1
 80147d4:	d01e      	beq.n	8014814 <_printf_common+0xa4>
 80147d6:	6823      	ldr	r3, [r4, #0]
 80147d8:	6922      	ldr	r2, [r4, #16]
 80147da:	f003 0306 	and.w	r3, r3, #6
 80147de:	2b04      	cmp	r3, #4
 80147e0:	bf02      	ittt	eq
 80147e2:	68e5      	ldreq	r5, [r4, #12]
 80147e4:	6833      	ldreq	r3, [r6, #0]
 80147e6:	1aed      	subeq	r5, r5, r3
 80147e8:	68a3      	ldr	r3, [r4, #8]
 80147ea:	bf0c      	ite	eq
 80147ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147f0:	2500      	movne	r5, #0
 80147f2:	4293      	cmp	r3, r2
 80147f4:	bfc4      	itt	gt
 80147f6:	1a9b      	subgt	r3, r3, r2
 80147f8:	18ed      	addgt	r5, r5, r3
 80147fa:	2600      	movs	r6, #0
 80147fc:	341a      	adds	r4, #26
 80147fe:	42b5      	cmp	r5, r6
 8014800:	d11a      	bne.n	8014838 <_printf_common+0xc8>
 8014802:	2000      	movs	r0, #0
 8014804:	e008      	b.n	8014818 <_printf_common+0xa8>
 8014806:	2301      	movs	r3, #1
 8014808:	4652      	mov	r2, sl
 801480a:	4641      	mov	r1, r8
 801480c:	4638      	mov	r0, r7
 801480e:	47c8      	blx	r9
 8014810:	3001      	adds	r0, #1
 8014812:	d103      	bne.n	801481c <_printf_common+0xac>
 8014814:	f04f 30ff 	mov.w	r0, #4294967295
 8014818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801481c:	3501      	adds	r5, #1
 801481e:	e7c6      	b.n	80147ae <_printf_common+0x3e>
 8014820:	18e1      	adds	r1, r4, r3
 8014822:	1c5a      	adds	r2, r3, #1
 8014824:	2030      	movs	r0, #48	@ 0x30
 8014826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801482a:	4422      	add	r2, r4
 801482c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014834:	3302      	adds	r3, #2
 8014836:	e7c7      	b.n	80147c8 <_printf_common+0x58>
 8014838:	2301      	movs	r3, #1
 801483a:	4622      	mov	r2, r4
 801483c:	4641      	mov	r1, r8
 801483e:	4638      	mov	r0, r7
 8014840:	47c8      	blx	r9
 8014842:	3001      	adds	r0, #1
 8014844:	d0e6      	beq.n	8014814 <_printf_common+0xa4>
 8014846:	3601      	adds	r6, #1
 8014848:	e7d9      	b.n	80147fe <_printf_common+0x8e>
	...

0801484c <_printf_i>:
 801484c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014850:	7e0f      	ldrb	r7, [r1, #24]
 8014852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014854:	2f78      	cmp	r7, #120	@ 0x78
 8014856:	4691      	mov	r9, r2
 8014858:	4680      	mov	r8, r0
 801485a:	460c      	mov	r4, r1
 801485c:	469a      	mov	sl, r3
 801485e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014862:	d807      	bhi.n	8014874 <_printf_i+0x28>
 8014864:	2f62      	cmp	r7, #98	@ 0x62
 8014866:	d80a      	bhi.n	801487e <_printf_i+0x32>
 8014868:	2f00      	cmp	r7, #0
 801486a:	f000 80d2 	beq.w	8014a12 <_printf_i+0x1c6>
 801486e:	2f58      	cmp	r7, #88	@ 0x58
 8014870:	f000 80b9 	beq.w	80149e6 <_printf_i+0x19a>
 8014874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801487c:	e03a      	b.n	80148f4 <_printf_i+0xa8>
 801487e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014882:	2b15      	cmp	r3, #21
 8014884:	d8f6      	bhi.n	8014874 <_printf_i+0x28>
 8014886:	a101      	add	r1, pc, #4	@ (adr r1, 801488c <_printf_i+0x40>)
 8014888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801488c:	080148e5 	.word	0x080148e5
 8014890:	080148f9 	.word	0x080148f9
 8014894:	08014875 	.word	0x08014875
 8014898:	08014875 	.word	0x08014875
 801489c:	08014875 	.word	0x08014875
 80148a0:	08014875 	.word	0x08014875
 80148a4:	080148f9 	.word	0x080148f9
 80148a8:	08014875 	.word	0x08014875
 80148ac:	08014875 	.word	0x08014875
 80148b0:	08014875 	.word	0x08014875
 80148b4:	08014875 	.word	0x08014875
 80148b8:	080149f9 	.word	0x080149f9
 80148bc:	08014923 	.word	0x08014923
 80148c0:	080149b3 	.word	0x080149b3
 80148c4:	08014875 	.word	0x08014875
 80148c8:	08014875 	.word	0x08014875
 80148cc:	08014a1b 	.word	0x08014a1b
 80148d0:	08014875 	.word	0x08014875
 80148d4:	08014923 	.word	0x08014923
 80148d8:	08014875 	.word	0x08014875
 80148dc:	08014875 	.word	0x08014875
 80148e0:	080149bb 	.word	0x080149bb
 80148e4:	6833      	ldr	r3, [r6, #0]
 80148e6:	1d1a      	adds	r2, r3, #4
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	6032      	str	r2, [r6, #0]
 80148ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80148f4:	2301      	movs	r3, #1
 80148f6:	e09d      	b.n	8014a34 <_printf_i+0x1e8>
 80148f8:	6833      	ldr	r3, [r6, #0]
 80148fa:	6820      	ldr	r0, [r4, #0]
 80148fc:	1d19      	adds	r1, r3, #4
 80148fe:	6031      	str	r1, [r6, #0]
 8014900:	0606      	lsls	r6, r0, #24
 8014902:	d501      	bpl.n	8014908 <_printf_i+0xbc>
 8014904:	681d      	ldr	r5, [r3, #0]
 8014906:	e003      	b.n	8014910 <_printf_i+0xc4>
 8014908:	0645      	lsls	r5, r0, #25
 801490a:	d5fb      	bpl.n	8014904 <_printf_i+0xb8>
 801490c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014910:	2d00      	cmp	r5, #0
 8014912:	da03      	bge.n	801491c <_printf_i+0xd0>
 8014914:	232d      	movs	r3, #45	@ 0x2d
 8014916:	426d      	negs	r5, r5
 8014918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801491c:	4859      	ldr	r0, [pc, #356]	@ (8014a84 <_printf_i+0x238>)
 801491e:	230a      	movs	r3, #10
 8014920:	e011      	b.n	8014946 <_printf_i+0xfa>
 8014922:	6821      	ldr	r1, [r4, #0]
 8014924:	6833      	ldr	r3, [r6, #0]
 8014926:	0608      	lsls	r0, r1, #24
 8014928:	f853 5b04 	ldr.w	r5, [r3], #4
 801492c:	d402      	bmi.n	8014934 <_printf_i+0xe8>
 801492e:	0649      	lsls	r1, r1, #25
 8014930:	bf48      	it	mi
 8014932:	b2ad      	uxthmi	r5, r5
 8014934:	2f6f      	cmp	r7, #111	@ 0x6f
 8014936:	4853      	ldr	r0, [pc, #332]	@ (8014a84 <_printf_i+0x238>)
 8014938:	6033      	str	r3, [r6, #0]
 801493a:	bf14      	ite	ne
 801493c:	230a      	movne	r3, #10
 801493e:	2308      	moveq	r3, #8
 8014940:	2100      	movs	r1, #0
 8014942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014946:	6866      	ldr	r6, [r4, #4]
 8014948:	60a6      	str	r6, [r4, #8]
 801494a:	2e00      	cmp	r6, #0
 801494c:	bfa2      	ittt	ge
 801494e:	6821      	ldrge	r1, [r4, #0]
 8014950:	f021 0104 	bicge.w	r1, r1, #4
 8014954:	6021      	strge	r1, [r4, #0]
 8014956:	b90d      	cbnz	r5, 801495c <_printf_i+0x110>
 8014958:	2e00      	cmp	r6, #0
 801495a:	d04b      	beq.n	80149f4 <_printf_i+0x1a8>
 801495c:	4616      	mov	r6, r2
 801495e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014962:	fb03 5711 	mls	r7, r3, r1, r5
 8014966:	5dc7      	ldrb	r7, [r0, r7]
 8014968:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801496c:	462f      	mov	r7, r5
 801496e:	42bb      	cmp	r3, r7
 8014970:	460d      	mov	r5, r1
 8014972:	d9f4      	bls.n	801495e <_printf_i+0x112>
 8014974:	2b08      	cmp	r3, #8
 8014976:	d10b      	bne.n	8014990 <_printf_i+0x144>
 8014978:	6823      	ldr	r3, [r4, #0]
 801497a:	07df      	lsls	r7, r3, #31
 801497c:	d508      	bpl.n	8014990 <_printf_i+0x144>
 801497e:	6923      	ldr	r3, [r4, #16]
 8014980:	6861      	ldr	r1, [r4, #4]
 8014982:	4299      	cmp	r1, r3
 8014984:	bfde      	ittt	le
 8014986:	2330      	movle	r3, #48	@ 0x30
 8014988:	f806 3c01 	strble.w	r3, [r6, #-1]
 801498c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014990:	1b92      	subs	r2, r2, r6
 8014992:	6122      	str	r2, [r4, #16]
 8014994:	f8cd a000 	str.w	sl, [sp]
 8014998:	464b      	mov	r3, r9
 801499a:	aa03      	add	r2, sp, #12
 801499c:	4621      	mov	r1, r4
 801499e:	4640      	mov	r0, r8
 80149a0:	f7ff fee6 	bl	8014770 <_printf_common>
 80149a4:	3001      	adds	r0, #1
 80149a6:	d14a      	bne.n	8014a3e <_printf_i+0x1f2>
 80149a8:	f04f 30ff 	mov.w	r0, #4294967295
 80149ac:	b004      	add	sp, #16
 80149ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149b2:	6823      	ldr	r3, [r4, #0]
 80149b4:	f043 0320 	orr.w	r3, r3, #32
 80149b8:	6023      	str	r3, [r4, #0]
 80149ba:	4833      	ldr	r0, [pc, #204]	@ (8014a88 <_printf_i+0x23c>)
 80149bc:	2778      	movs	r7, #120	@ 0x78
 80149be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	6831      	ldr	r1, [r6, #0]
 80149c6:	061f      	lsls	r7, r3, #24
 80149c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80149cc:	d402      	bmi.n	80149d4 <_printf_i+0x188>
 80149ce:	065f      	lsls	r7, r3, #25
 80149d0:	bf48      	it	mi
 80149d2:	b2ad      	uxthmi	r5, r5
 80149d4:	6031      	str	r1, [r6, #0]
 80149d6:	07d9      	lsls	r1, r3, #31
 80149d8:	bf44      	itt	mi
 80149da:	f043 0320 	orrmi.w	r3, r3, #32
 80149de:	6023      	strmi	r3, [r4, #0]
 80149e0:	b11d      	cbz	r5, 80149ea <_printf_i+0x19e>
 80149e2:	2310      	movs	r3, #16
 80149e4:	e7ac      	b.n	8014940 <_printf_i+0xf4>
 80149e6:	4827      	ldr	r0, [pc, #156]	@ (8014a84 <_printf_i+0x238>)
 80149e8:	e7e9      	b.n	80149be <_printf_i+0x172>
 80149ea:	6823      	ldr	r3, [r4, #0]
 80149ec:	f023 0320 	bic.w	r3, r3, #32
 80149f0:	6023      	str	r3, [r4, #0]
 80149f2:	e7f6      	b.n	80149e2 <_printf_i+0x196>
 80149f4:	4616      	mov	r6, r2
 80149f6:	e7bd      	b.n	8014974 <_printf_i+0x128>
 80149f8:	6833      	ldr	r3, [r6, #0]
 80149fa:	6825      	ldr	r5, [r4, #0]
 80149fc:	6961      	ldr	r1, [r4, #20]
 80149fe:	1d18      	adds	r0, r3, #4
 8014a00:	6030      	str	r0, [r6, #0]
 8014a02:	062e      	lsls	r6, r5, #24
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	d501      	bpl.n	8014a0c <_printf_i+0x1c0>
 8014a08:	6019      	str	r1, [r3, #0]
 8014a0a:	e002      	b.n	8014a12 <_printf_i+0x1c6>
 8014a0c:	0668      	lsls	r0, r5, #25
 8014a0e:	d5fb      	bpl.n	8014a08 <_printf_i+0x1bc>
 8014a10:	8019      	strh	r1, [r3, #0]
 8014a12:	2300      	movs	r3, #0
 8014a14:	6123      	str	r3, [r4, #16]
 8014a16:	4616      	mov	r6, r2
 8014a18:	e7bc      	b.n	8014994 <_printf_i+0x148>
 8014a1a:	6833      	ldr	r3, [r6, #0]
 8014a1c:	1d1a      	adds	r2, r3, #4
 8014a1e:	6032      	str	r2, [r6, #0]
 8014a20:	681e      	ldr	r6, [r3, #0]
 8014a22:	6862      	ldr	r2, [r4, #4]
 8014a24:	2100      	movs	r1, #0
 8014a26:	4630      	mov	r0, r6
 8014a28:	f7eb fc7a 	bl	8000320 <memchr>
 8014a2c:	b108      	cbz	r0, 8014a32 <_printf_i+0x1e6>
 8014a2e:	1b80      	subs	r0, r0, r6
 8014a30:	6060      	str	r0, [r4, #4]
 8014a32:	6863      	ldr	r3, [r4, #4]
 8014a34:	6123      	str	r3, [r4, #16]
 8014a36:	2300      	movs	r3, #0
 8014a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a3c:	e7aa      	b.n	8014994 <_printf_i+0x148>
 8014a3e:	6923      	ldr	r3, [r4, #16]
 8014a40:	4632      	mov	r2, r6
 8014a42:	4649      	mov	r1, r9
 8014a44:	4640      	mov	r0, r8
 8014a46:	47d0      	blx	sl
 8014a48:	3001      	adds	r0, #1
 8014a4a:	d0ad      	beq.n	80149a8 <_printf_i+0x15c>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	079b      	lsls	r3, r3, #30
 8014a50:	d413      	bmi.n	8014a7a <_printf_i+0x22e>
 8014a52:	68e0      	ldr	r0, [r4, #12]
 8014a54:	9b03      	ldr	r3, [sp, #12]
 8014a56:	4298      	cmp	r0, r3
 8014a58:	bfb8      	it	lt
 8014a5a:	4618      	movlt	r0, r3
 8014a5c:	e7a6      	b.n	80149ac <_printf_i+0x160>
 8014a5e:	2301      	movs	r3, #1
 8014a60:	4632      	mov	r2, r6
 8014a62:	4649      	mov	r1, r9
 8014a64:	4640      	mov	r0, r8
 8014a66:	47d0      	blx	sl
 8014a68:	3001      	adds	r0, #1
 8014a6a:	d09d      	beq.n	80149a8 <_printf_i+0x15c>
 8014a6c:	3501      	adds	r5, #1
 8014a6e:	68e3      	ldr	r3, [r4, #12]
 8014a70:	9903      	ldr	r1, [sp, #12]
 8014a72:	1a5b      	subs	r3, r3, r1
 8014a74:	42ab      	cmp	r3, r5
 8014a76:	dcf2      	bgt.n	8014a5e <_printf_i+0x212>
 8014a78:	e7eb      	b.n	8014a52 <_printf_i+0x206>
 8014a7a:	2500      	movs	r5, #0
 8014a7c:	f104 0619 	add.w	r6, r4, #25
 8014a80:	e7f5      	b.n	8014a6e <_printf_i+0x222>
 8014a82:	bf00      	nop
 8014a84:	08043bad 	.word	0x08043bad
 8014a88:	08043bbe 	.word	0x08043bbe

08014a8c <__sflush_r>:
 8014a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a94:	0716      	lsls	r6, r2, #28
 8014a96:	4605      	mov	r5, r0
 8014a98:	460c      	mov	r4, r1
 8014a9a:	d454      	bmi.n	8014b46 <__sflush_r+0xba>
 8014a9c:	684b      	ldr	r3, [r1, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	dc02      	bgt.n	8014aa8 <__sflush_r+0x1c>
 8014aa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	dd48      	ble.n	8014b3a <__sflush_r+0xae>
 8014aa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014aaa:	2e00      	cmp	r6, #0
 8014aac:	d045      	beq.n	8014b3a <__sflush_r+0xae>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014ab4:	682f      	ldr	r7, [r5, #0]
 8014ab6:	6a21      	ldr	r1, [r4, #32]
 8014ab8:	602b      	str	r3, [r5, #0]
 8014aba:	d030      	beq.n	8014b1e <__sflush_r+0x92>
 8014abc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014abe:	89a3      	ldrh	r3, [r4, #12]
 8014ac0:	0759      	lsls	r1, r3, #29
 8014ac2:	d505      	bpl.n	8014ad0 <__sflush_r+0x44>
 8014ac4:	6863      	ldr	r3, [r4, #4]
 8014ac6:	1ad2      	subs	r2, r2, r3
 8014ac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014aca:	b10b      	cbz	r3, 8014ad0 <__sflush_r+0x44>
 8014acc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014ace:	1ad2      	subs	r2, r2, r3
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014ad4:	6a21      	ldr	r1, [r4, #32]
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	47b0      	blx	r6
 8014ada:	1c43      	adds	r3, r0, #1
 8014adc:	89a3      	ldrh	r3, [r4, #12]
 8014ade:	d106      	bne.n	8014aee <__sflush_r+0x62>
 8014ae0:	6829      	ldr	r1, [r5, #0]
 8014ae2:	291d      	cmp	r1, #29
 8014ae4:	d82b      	bhi.n	8014b3e <__sflush_r+0xb2>
 8014ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8014b90 <__sflush_r+0x104>)
 8014ae8:	410a      	asrs	r2, r1
 8014aea:	07d6      	lsls	r6, r2, #31
 8014aec:	d427      	bmi.n	8014b3e <__sflush_r+0xb2>
 8014aee:	2200      	movs	r2, #0
 8014af0:	6062      	str	r2, [r4, #4]
 8014af2:	04d9      	lsls	r1, r3, #19
 8014af4:	6922      	ldr	r2, [r4, #16]
 8014af6:	6022      	str	r2, [r4, #0]
 8014af8:	d504      	bpl.n	8014b04 <__sflush_r+0x78>
 8014afa:	1c42      	adds	r2, r0, #1
 8014afc:	d101      	bne.n	8014b02 <__sflush_r+0x76>
 8014afe:	682b      	ldr	r3, [r5, #0]
 8014b00:	b903      	cbnz	r3, 8014b04 <__sflush_r+0x78>
 8014b02:	6560      	str	r0, [r4, #84]	@ 0x54
 8014b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b06:	602f      	str	r7, [r5, #0]
 8014b08:	b1b9      	cbz	r1, 8014b3a <__sflush_r+0xae>
 8014b0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	d002      	beq.n	8014b18 <__sflush_r+0x8c>
 8014b12:	4628      	mov	r0, r5
 8014b14:	f7ff fb48 	bl	80141a8 <_free_r>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b1c:	e00d      	b.n	8014b3a <__sflush_r+0xae>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	4628      	mov	r0, r5
 8014b22:	47b0      	blx	r6
 8014b24:	4602      	mov	r2, r0
 8014b26:	1c50      	adds	r0, r2, #1
 8014b28:	d1c9      	bne.n	8014abe <__sflush_r+0x32>
 8014b2a:	682b      	ldr	r3, [r5, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d0c6      	beq.n	8014abe <__sflush_r+0x32>
 8014b30:	2b1d      	cmp	r3, #29
 8014b32:	d001      	beq.n	8014b38 <__sflush_r+0xac>
 8014b34:	2b16      	cmp	r3, #22
 8014b36:	d11e      	bne.n	8014b76 <__sflush_r+0xea>
 8014b38:	602f      	str	r7, [r5, #0]
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e022      	b.n	8014b84 <__sflush_r+0xf8>
 8014b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b42:	b21b      	sxth	r3, r3
 8014b44:	e01b      	b.n	8014b7e <__sflush_r+0xf2>
 8014b46:	690f      	ldr	r7, [r1, #16]
 8014b48:	2f00      	cmp	r7, #0
 8014b4a:	d0f6      	beq.n	8014b3a <__sflush_r+0xae>
 8014b4c:	0793      	lsls	r3, r2, #30
 8014b4e:	680e      	ldr	r6, [r1, #0]
 8014b50:	bf08      	it	eq
 8014b52:	694b      	ldreq	r3, [r1, #20]
 8014b54:	600f      	str	r7, [r1, #0]
 8014b56:	bf18      	it	ne
 8014b58:	2300      	movne	r3, #0
 8014b5a:	eba6 0807 	sub.w	r8, r6, r7
 8014b5e:	608b      	str	r3, [r1, #8]
 8014b60:	f1b8 0f00 	cmp.w	r8, #0
 8014b64:	dde9      	ble.n	8014b3a <__sflush_r+0xae>
 8014b66:	6a21      	ldr	r1, [r4, #32]
 8014b68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014b6a:	4643      	mov	r3, r8
 8014b6c:	463a      	mov	r2, r7
 8014b6e:	4628      	mov	r0, r5
 8014b70:	47b0      	blx	r6
 8014b72:	2800      	cmp	r0, #0
 8014b74:	dc08      	bgt.n	8014b88 <__sflush_r+0xfc>
 8014b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b7e:	81a3      	strh	r3, [r4, #12]
 8014b80:	f04f 30ff 	mov.w	r0, #4294967295
 8014b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b88:	4407      	add	r7, r0
 8014b8a:	eba8 0800 	sub.w	r8, r8, r0
 8014b8e:	e7e7      	b.n	8014b60 <__sflush_r+0xd4>
 8014b90:	dfbffffe 	.word	0xdfbffffe

08014b94 <_fflush_r>:
 8014b94:	b538      	push	{r3, r4, r5, lr}
 8014b96:	690b      	ldr	r3, [r1, #16]
 8014b98:	4605      	mov	r5, r0
 8014b9a:	460c      	mov	r4, r1
 8014b9c:	b913      	cbnz	r3, 8014ba4 <_fflush_r+0x10>
 8014b9e:	2500      	movs	r5, #0
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	bd38      	pop	{r3, r4, r5, pc}
 8014ba4:	b118      	cbz	r0, 8014bae <_fflush_r+0x1a>
 8014ba6:	6a03      	ldr	r3, [r0, #32]
 8014ba8:	b90b      	cbnz	r3, 8014bae <_fflush_r+0x1a>
 8014baa:	f7ff f993 	bl	8013ed4 <__sinit>
 8014bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d0f3      	beq.n	8014b9e <_fflush_r+0xa>
 8014bb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014bb8:	07d0      	lsls	r0, r2, #31
 8014bba:	d404      	bmi.n	8014bc6 <_fflush_r+0x32>
 8014bbc:	0599      	lsls	r1, r3, #22
 8014bbe:	d402      	bmi.n	8014bc6 <_fflush_r+0x32>
 8014bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014bc2:	f7ff fad8 	bl	8014176 <__retarget_lock_acquire_recursive>
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	4621      	mov	r1, r4
 8014bca:	f7ff ff5f 	bl	8014a8c <__sflush_r>
 8014bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014bd0:	07da      	lsls	r2, r3, #31
 8014bd2:	4605      	mov	r5, r0
 8014bd4:	d4e4      	bmi.n	8014ba0 <_fflush_r+0xc>
 8014bd6:	89a3      	ldrh	r3, [r4, #12]
 8014bd8:	059b      	lsls	r3, r3, #22
 8014bda:	d4e1      	bmi.n	8014ba0 <_fflush_r+0xc>
 8014bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014bde:	f7ff facb 	bl	8014178 <__retarget_lock_release_recursive>
 8014be2:	e7dd      	b.n	8014ba0 <_fflush_r+0xc>

08014be4 <_putc_r>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	460d      	mov	r5, r1
 8014be8:	4614      	mov	r4, r2
 8014bea:	4606      	mov	r6, r0
 8014bec:	b118      	cbz	r0, 8014bf6 <_putc_r+0x12>
 8014bee:	6a03      	ldr	r3, [r0, #32]
 8014bf0:	b90b      	cbnz	r3, 8014bf6 <_putc_r+0x12>
 8014bf2:	f7ff f96f 	bl	8013ed4 <__sinit>
 8014bf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014bf8:	07d8      	lsls	r0, r3, #31
 8014bfa:	d405      	bmi.n	8014c08 <_putc_r+0x24>
 8014bfc:	89a3      	ldrh	r3, [r4, #12]
 8014bfe:	0599      	lsls	r1, r3, #22
 8014c00:	d402      	bmi.n	8014c08 <_putc_r+0x24>
 8014c02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c04:	f7ff fab7 	bl	8014176 <__retarget_lock_acquire_recursive>
 8014c08:	68a3      	ldr	r3, [r4, #8]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	60a3      	str	r3, [r4, #8]
 8014c10:	da05      	bge.n	8014c1e <_putc_r+0x3a>
 8014c12:	69a2      	ldr	r2, [r4, #24]
 8014c14:	4293      	cmp	r3, r2
 8014c16:	db12      	blt.n	8014c3e <_putc_r+0x5a>
 8014c18:	b2eb      	uxtb	r3, r5
 8014c1a:	2b0a      	cmp	r3, #10
 8014c1c:	d00f      	beq.n	8014c3e <_putc_r+0x5a>
 8014c1e:	6823      	ldr	r3, [r4, #0]
 8014c20:	1c5a      	adds	r2, r3, #1
 8014c22:	6022      	str	r2, [r4, #0]
 8014c24:	701d      	strb	r5, [r3, #0]
 8014c26:	b2ed      	uxtb	r5, r5
 8014c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c2a:	07da      	lsls	r2, r3, #31
 8014c2c:	d405      	bmi.n	8014c3a <_putc_r+0x56>
 8014c2e:	89a3      	ldrh	r3, [r4, #12]
 8014c30:	059b      	lsls	r3, r3, #22
 8014c32:	d402      	bmi.n	8014c3a <_putc_r+0x56>
 8014c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c36:	f7ff fa9f 	bl	8014178 <__retarget_lock_release_recursive>
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	bd70      	pop	{r4, r5, r6, pc}
 8014c3e:	4629      	mov	r1, r5
 8014c40:	4622      	mov	r2, r4
 8014c42:	4630      	mov	r0, r6
 8014c44:	f000 f802 	bl	8014c4c <__swbuf_r>
 8014c48:	4605      	mov	r5, r0
 8014c4a:	e7ed      	b.n	8014c28 <_putc_r+0x44>

08014c4c <__swbuf_r>:
 8014c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c4e:	460e      	mov	r6, r1
 8014c50:	4614      	mov	r4, r2
 8014c52:	4605      	mov	r5, r0
 8014c54:	b118      	cbz	r0, 8014c5e <__swbuf_r+0x12>
 8014c56:	6a03      	ldr	r3, [r0, #32]
 8014c58:	b90b      	cbnz	r3, 8014c5e <__swbuf_r+0x12>
 8014c5a:	f7ff f93b 	bl	8013ed4 <__sinit>
 8014c5e:	69a3      	ldr	r3, [r4, #24]
 8014c60:	60a3      	str	r3, [r4, #8]
 8014c62:	89a3      	ldrh	r3, [r4, #12]
 8014c64:	071a      	lsls	r2, r3, #28
 8014c66:	d501      	bpl.n	8014c6c <__swbuf_r+0x20>
 8014c68:	6923      	ldr	r3, [r4, #16]
 8014c6a:	b943      	cbnz	r3, 8014c7e <__swbuf_r+0x32>
 8014c6c:	4621      	mov	r1, r4
 8014c6e:	4628      	mov	r0, r5
 8014c70:	f000 f82a 	bl	8014cc8 <__swsetup_r>
 8014c74:	b118      	cbz	r0, 8014c7e <__swbuf_r+0x32>
 8014c76:	f04f 37ff 	mov.w	r7, #4294967295
 8014c7a:	4638      	mov	r0, r7
 8014c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c7e:	6823      	ldr	r3, [r4, #0]
 8014c80:	6922      	ldr	r2, [r4, #16]
 8014c82:	1a98      	subs	r0, r3, r2
 8014c84:	6963      	ldr	r3, [r4, #20]
 8014c86:	b2f6      	uxtb	r6, r6
 8014c88:	4283      	cmp	r3, r0
 8014c8a:	4637      	mov	r7, r6
 8014c8c:	dc05      	bgt.n	8014c9a <__swbuf_r+0x4e>
 8014c8e:	4621      	mov	r1, r4
 8014c90:	4628      	mov	r0, r5
 8014c92:	f7ff ff7f 	bl	8014b94 <_fflush_r>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d1ed      	bne.n	8014c76 <__swbuf_r+0x2a>
 8014c9a:	68a3      	ldr	r3, [r4, #8]
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	60a3      	str	r3, [r4, #8]
 8014ca0:	6823      	ldr	r3, [r4, #0]
 8014ca2:	1c5a      	adds	r2, r3, #1
 8014ca4:	6022      	str	r2, [r4, #0]
 8014ca6:	701e      	strb	r6, [r3, #0]
 8014ca8:	6962      	ldr	r2, [r4, #20]
 8014caa:	1c43      	adds	r3, r0, #1
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d004      	beq.n	8014cba <__swbuf_r+0x6e>
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	07db      	lsls	r3, r3, #31
 8014cb4:	d5e1      	bpl.n	8014c7a <__swbuf_r+0x2e>
 8014cb6:	2e0a      	cmp	r6, #10
 8014cb8:	d1df      	bne.n	8014c7a <__swbuf_r+0x2e>
 8014cba:	4621      	mov	r1, r4
 8014cbc:	4628      	mov	r0, r5
 8014cbe:	f7ff ff69 	bl	8014b94 <_fflush_r>
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d0d9      	beq.n	8014c7a <__swbuf_r+0x2e>
 8014cc6:	e7d6      	b.n	8014c76 <__swbuf_r+0x2a>

08014cc8 <__swsetup_r>:
 8014cc8:	b538      	push	{r3, r4, r5, lr}
 8014cca:	4b29      	ldr	r3, [pc, #164]	@ (8014d70 <__swsetup_r+0xa8>)
 8014ccc:	4605      	mov	r5, r0
 8014cce:	6818      	ldr	r0, [r3, #0]
 8014cd0:	460c      	mov	r4, r1
 8014cd2:	b118      	cbz	r0, 8014cdc <__swsetup_r+0x14>
 8014cd4:	6a03      	ldr	r3, [r0, #32]
 8014cd6:	b90b      	cbnz	r3, 8014cdc <__swsetup_r+0x14>
 8014cd8:	f7ff f8fc 	bl	8013ed4 <__sinit>
 8014cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ce0:	0719      	lsls	r1, r3, #28
 8014ce2:	d422      	bmi.n	8014d2a <__swsetup_r+0x62>
 8014ce4:	06da      	lsls	r2, r3, #27
 8014ce6:	d407      	bmi.n	8014cf8 <__swsetup_r+0x30>
 8014ce8:	2209      	movs	r2, #9
 8014cea:	602a      	str	r2, [r5, #0]
 8014cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cf0:	81a3      	strh	r3, [r4, #12]
 8014cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf6:	e033      	b.n	8014d60 <__swsetup_r+0x98>
 8014cf8:	0758      	lsls	r0, r3, #29
 8014cfa:	d512      	bpl.n	8014d22 <__swsetup_r+0x5a>
 8014cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cfe:	b141      	cbz	r1, 8014d12 <__swsetup_r+0x4a>
 8014d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d04:	4299      	cmp	r1, r3
 8014d06:	d002      	beq.n	8014d0e <__swsetup_r+0x46>
 8014d08:	4628      	mov	r0, r5
 8014d0a:	f7ff fa4d 	bl	80141a8 <_free_r>
 8014d0e:	2300      	movs	r3, #0
 8014d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014d18:	81a3      	strh	r3, [r4, #12]
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	6063      	str	r3, [r4, #4]
 8014d1e:	6923      	ldr	r3, [r4, #16]
 8014d20:	6023      	str	r3, [r4, #0]
 8014d22:	89a3      	ldrh	r3, [r4, #12]
 8014d24:	f043 0308 	orr.w	r3, r3, #8
 8014d28:	81a3      	strh	r3, [r4, #12]
 8014d2a:	6923      	ldr	r3, [r4, #16]
 8014d2c:	b94b      	cbnz	r3, 8014d42 <__swsetup_r+0x7a>
 8014d2e:	89a3      	ldrh	r3, [r4, #12]
 8014d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d38:	d003      	beq.n	8014d42 <__swsetup_r+0x7a>
 8014d3a:	4621      	mov	r1, r4
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	f000 f887 	bl	8014e50 <__smakebuf_r>
 8014d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d46:	f013 0201 	ands.w	r2, r3, #1
 8014d4a:	d00a      	beq.n	8014d62 <__swsetup_r+0x9a>
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	60a2      	str	r2, [r4, #8]
 8014d50:	6962      	ldr	r2, [r4, #20]
 8014d52:	4252      	negs	r2, r2
 8014d54:	61a2      	str	r2, [r4, #24]
 8014d56:	6922      	ldr	r2, [r4, #16]
 8014d58:	b942      	cbnz	r2, 8014d6c <__swsetup_r+0xa4>
 8014d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d5e:	d1c5      	bne.n	8014cec <__swsetup_r+0x24>
 8014d60:	bd38      	pop	{r3, r4, r5, pc}
 8014d62:	0799      	lsls	r1, r3, #30
 8014d64:	bf58      	it	pl
 8014d66:	6962      	ldrpl	r2, [r4, #20]
 8014d68:	60a2      	str	r2, [r4, #8]
 8014d6a:	e7f4      	b.n	8014d56 <__swsetup_r+0x8e>
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	e7f7      	b.n	8014d60 <__swsetup_r+0x98>
 8014d70:	200206a4 	.word	0x200206a4

08014d74 <memmove>:
 8014d74:	4288      	cmp	r0, r1
 8014d76:	b510      	push	{r4, lr}
 8014d78:	eb01 0402 	add.w	r4, r1, r2
 8014d7c:	d902      	bls.n	8014d84 <memmove+0x10>
 8014d7e:	4284      	cmp	r4, r0
 8014d80:	4623      	mov	r3, r4
 8014d82:	d807      	bhi.n	8014d94 <memmove+0x20>
 8014d84:	1e43      	subs	r3, r0, #1
 8014d86:	42a1      	cmp	r1, r4
 8014d88:	d008      	beq.n	8014d9c <memmove+0x28>
 8014d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d92:	e7f8      	b.n	8014d86 <memmove+0x12>
 8014d94:	4402      	add	r2, r0
 8014d96:	4601      	mov	r1, r0
 8014d98:	428a      	cmp	r2, r1
 8014d9a:	d100      	bne.n	8014d9e <memmove+0x2a>
 8014d9c:	bd10      	pop	{r4, pc}
 8014d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014da6:	e7f7      	b.n	8014d98 <memmove+0x24>

08014da8 <_realloc_r>:
 8014da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dac:	4680      	mov	r8, r0
 8014dae:	4615      	mov	r5, r2
 8014db0:	460c      	mov	r4, r1
 8014db2:	b921      	cbnz	r1, 8014dbe <_realloc_r+0x16>
 8014db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014db8:	4611      	mov	r1, r2
 8014dba:	f7fe bf73 	b.w	8013ca4 <_malloc_r>
 8014dbe:	b92a      	cbnz	r2, 8014dcc <_realloc_r+0x24>
 8014dc0:	f7ff f9f2 	bl	80141a8 <_free_r>
 8014dc4:	2400      	movs	r4, #0
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dcc:	f000 f89e 	bl	8014f0c <_malloc_usable_size_r>
 8014dd0:	4285      	cmp	r5, r0
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	d802      	bhi.n	8014ddc <_realloc_r+0x34>
 8014dd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014dda:	d8f4      	bhi.n	8014dc6 <_realloc_r+0x1e>
 8014ddc:	4629      	mov	r1, r5
 8014dde:	4640      	mov	r0, r8
 8014de0:	f7fe ff60 	bl	8013ca4 <_malloc_r>
 8014de4:	4607      	mov	r7, r0
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d0ec      	beq.n	8014dc4 <_realloc_r+0x1c>
 8014dea:	42b5      	cmp	r5, r6
 8014dec:	462a      	mov	r2, r5
 8014dee:	4621      	mov	r1, r4
 8014df0:	bf28      	it	cs
 8014df2:	4632      	movcs	r2, r6
 8014df4:	f7ff f9c9 	bl	801418a <memcpy>
 8014df8:	4621      	mov	r1, r4
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	f7ff f9d4 	bl	80141a8 <_free_r>
 8014e00:	463c      	mov	r4, r7
 8014e02:	e7e0      	b.n	8014dc6 <_realloc_r+0x1e>

08014e04 <__swhatbuf_r>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	460c      	mov	r4, r1
 8014e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e0c:	2900      	cmp	r1, #0
 8014e0e:	b096      	sub	sp, #88	@ 0x58
 8014e10:	4615      	mov	r5, r2
 8014e12:	461e      	mov	r6, r3
 8014e14:	da0d      	bge.n	8014e32 <__swhatbuf_r+0x2e>
 8014e16:	89a3      	ldrh	r3, [r4, #12]
 8014e18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e1c:	f04f 0100 	mov.w	r1, #0
 8014e20:	bf14      	ite	ne
 8014e22:	2340      	movne	r3, #64	@ 0x40
 8014e24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e28:	2000      	movs	r0, #0
 8014e2a:	6031      	str	r1, [r6, #0]
 8014e2c:	602b      	str	r3, [r5, #0]
 8014e2e:	b016      	add	sp, #88	@ 0x58
 8014e30:	bd70      	pop	{r4, r5, r6, pc}
 8014e32:	466a      	mov	r2, sp
 8014e34:	f000 f848 	bl	8014ec8 <_fstat_r>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	dbec      	blt.n	8014e16 <__swhatbuf_r+0x12>
 8014e3c:	9901      	ldr	r1, [sp, #4]
 8014e3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e46:	4259      	negs	r1, r3
 8014e48:	4159      	adcs	r1, r3
 8014e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e4e:	e7eb      	b.n	8014e28 <__swhatbuf_r+0x24>

08014e50 <__smakebuf_r>:
 8014e50:	898b      	ldrh	r3, [r1, #12]
 8014e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e54:	079d      	lsls	r5, r3, #30
 8014e56:	4606      	mov	r6, r0
 8014e58:	460c      	mov	r4, r1
 8014e5a:	d507      	bpl.n	8014e6c <__smakebuf_r+0x1c>
 8014e5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e60:	6023      	str	r3, [r4, #0]
 8014e62:	6123      	str	r3, [r4, #16]
 8014e64:	2301      	movs	r3, #1
 8014e66:	6163      	str	r3, [r4, #20]
 8014e68:	b003      	add	sp, #12
 8014e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e6c:	ab01      	add	r3, sp, #4
 8014e6e:	466a      	mov	r2, sp
 8014e70:	f7ff ffc8 	bl	8014e04 <__swhatbuf_r>
 8014e74:	9f00      	ldr	r7, [sp, #0]
 8014e76:	4605      	mov	r5, r0
 8014e78:	4639      	mov	r1, r7
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f7fe ff12 	bl	8013ca4 <_malloc_r>
 8014e80:	b948      	cbnz	r0, 8014e96 <__smakebuf_r+0x46>
 8014e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e86:	059a      	lsls	r2, r3, #22
 8014e88:	d4ee      	bmi.n	8014e68 <__smakebuf_r+0x18>
 8014e8a:	f023 0303 	bic.w	r3, r3, #3
 8014e8e:	f043 0302 	orr.w	r3, r3, #2
 8014e92:	81a3      	strh	r3, [r4, #12]
 8014e94:	e7e2      	b.n	8014e5c <__smakebuf_r+0xc>
 8014e96:	89a3      	ldrh	r3, [r4, #12]
 8014e98:	6020      	str	r0, [r4, #0]
 8014e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e9e:	81a3      	strh	r3, [r4, #12]
 8014ea0:	9b01      	ldr	r3, [sp, #4]
 8014ea2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014ea6:	b15b      	cbz	r3, 8014ec0 <__smakebuf_r+0x70>
 8014ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014eac:	4630      	mov	r0, r6
 8014eae:	f000 f81d 	bl	8014eec <_isatty_r>
 8014eb2:	b128      	cbz	r0, 8014ec0 <__smakebuf_r+0x70>
 8014eb4:	89a3      	ldrh	r3, [r4, #12]
 8014eb6:	f023 0303 	bic.w	r3, r3, #3
 8014eba:	f043 0301 	orr.w	r3, r3, #1
 8014ebe:	81a3      	strh	r3, [r4, #12]
 8014ec0:	89a3      	ldrh	r3, [r4, #12]
 8014ec2:	431d      	orrs	r5, r3
 8014ec4:	81a5      	strh	r5, [r4, #12]
 8014ec6:	e7cf      	b.n	8014e68 <__smakebuf_r+0x18>

08014ec8 <_fstat_r>:
 8014ec8:	b538      	push	{r3, r4, r5, lr}
 8014eca:	4d07      	ldr	r5, [pc, #28]	@ (8014ee8 <_fstat_r+0x20>)
 8014ecc:	2300      	movs	r3, #0
 8014ece:	4604      	mov	r4, r0
 8014ed0:	4608      	mov	r0, r1
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	602b      	str	r3, [r5, #0]
 8014ed6:	f7fc ffc7 	bl	8011e68 <_fstat>
 8014eda:	1c43      	adds	r3, r0, #1
 8014edc:	d102      	bne.n	8014ee4 <_fstat_r+0x1c>
 8014ede:	682b      	ldr	r3, [r5, #0]
 8014ee0:	b103      	cbz	r3, 8014ee4 <_fstat_r+0x1c>
 8014ee2:	6023      	str	r3, [r4, #0]
 8014ee4:	bd38      	pop	{r3, r4, r5, pc}
 8014ee6:	bf00      	nop
 8014ee8:	20031b1c 	.word	0x20031b1c

08014eec <_isatty_r>:
 8014eec:	b538      	push	{r3, r4, r5, lr}
 8014eee:	4d06      	ldr	r5, [pc, #24]	@ (8014f08 <_isatty_r+0x1c>)
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	4608      	mov	r0, r1
 8014ef6:	602b      	str	r3, [r5, #0]
 8014ef8:	f7fc ffc6 	bl	8011e88 <_isatty>
 8014efc:	1c43      	adds	r3, r0, #1
 8014efe:	d102      	bne.n	8014f06 <_isatty_r+0x1a>
 8014f00:	682b      	ldr	r3, [r5, #0]
 8014f02:	b103      	cbz	r3, 8014f06 <_isatty_r+0x1a>
 8014f04:	6023      	str	r3, [r4, #0]
 8014f06:	bd38      	pop	{r3, r4, r5, pc}
 8014f08:	20031b1c 	.word	0x20031b1c

08014f0c <_malloc_usable_size_r>:
 8014f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f10:	1f18      	subs	r0, r3, #4
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	bfbc      	itt	lt
 8014f16:	580b      	ldrlt	r3, [r1, r0]
 8014f18:	18c0      	addlt	r0, r0, r3
 8014f1a:	4770      	bx	lr
 8014f1c:	0000      	movs	r0, r0
	...

08014f20 <fmod>:
 8014f20:	b508      	push	{r3, lr}
 8014f22:	ed2d 8b04 	vpush	{d8-d9}
 8014f26:	eeb0 9b40 	vmov.f64	d9, d0
 8014f2a:	eeb0 8b41 	vmov.f64	d8, d1
 8014f2e:	f000 fc9f 	bl	8015870 <__ieee754_fmod>
 8014f32:	eeb4 9b48 	vcmp.f64	d9, d8
 8014f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3a:	d60c      	bvs.n	8014f56 <fmod+0x36>
 8014f3c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014f60 <fmod+0x40>
 8014f40:	eeb4 8b49 	vcmp.f64	d8, d9
 8014f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f48:	d105      	bne.n	8014f56 <fmod+0x36>
 8014f4a:	f7ff f8e9 	bl	8014120 <__errno>
 8014f4e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014f52:	2321      	movs	r3, #33	@ 0x21
 8014f54:	6003      	str	r3, [r0, #0]
 8014f56:	ecbd 8b04 	vpop	{d8-d9}
 8014f5a:	bd08      	pop	{r3, pc}
 8014f5c:	f3af 8000 	nop.w
	...

08014f68 <log10>:
 8014f68:	b508      	push	{r3, lr}
 8014f6a:	ed2d 8b02 	vpush	{d8}
 8014f6e:	eeb0 8b40 	vmov.f64	d8, d0
 8014f72:	f000 fd89 	bl	8015a88 <__ieee754_log10>
 8014f76:	eeb4 8b48 	vcmp.f64	d8, d8
 8014f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7e:	d60f      	bvs.n	8014fa0 <log10+0x38>
 8014f80:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8014f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f88:	d80a      	bhi.n	8014fa0 <log10+0x38>
 8014f8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f92:	d108      	bne.n	8014fa6 <log10+0x3e>
 8014f94:	f7ff f8c4 	bl	8014120 <__errno>
 8014f98:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8014fc0 <log10+0x58>
 8014f9c:	2322      	movs	r3, #34	@ 0x22
 8014f9e:	6003      	str	r3, [r0, #0]
 8014fa0:	ecbd 8b02 	vpop	{d8}
 8014fa4:	bd08      	pop	{r3, pc}
 8014fa6:	f7ff f8bb 	bl	8014120 <__errno>
 8014faa:	ecbd 8b02 	vpop	{d8}
 8014fae:	2321      	movs	r3, #33	@ 0x21
 8014fb0:	6003      	str	r3, [r0, #0]
 8014fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014fb6:	4804      	ldr	r0, [pc, #16]	@ (8014fc8 <log10+0x60>)
 8014fb8:	f000 b876 	b.w	80150a8 <nan>
 8014fbc:	f3af 8000 	nop.w
 8014fc0:	00000000 	.word	0x00000000
 8014fc4:	fff00000 	.word	0xfff00000
 8014fc8:	08043ba1 	.word	0x08043ba1
 8014fcc:	00000000 	.word	0x00000000

08014fd0 <sin>:
 8014fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014fd2:	eeb0 7b40 	vmov.f64	d7, d0
 8014fd6:	ee17 3a90 	vmov	r3, s15
 8014fda:	4a21      	ldr	r2, [pc, #132]	@ (8015060 <sin+0x90>)
 8014fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	d807      	bhi.n	8014ff4 <sin+0x24>
 8014fe4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015058 <sin+0x88>
 8014fe8:	2000      	movs	r0, #0
 8014fea:	b005      	add	sp, #20
 8014fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ff0:	f000 bbe6 	b.w	80157c0 <__kernel_sin>
 8014ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8015064 <sin+0x94>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d904      	bls.n	8015004 <sin+0x34>
 8014ffa:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014ffe:	b005      	add	sp, #20
 8015000:	f85d fb04 	ldr.w	pc, [sp], #4
 8015004:	4668      	mov	r0, sp
 8015006:	f000 fdaf 	bl	8015b68 <__ieee754_rem_pio2>
 801500a:	f000 0003 	and.w	r0, r0, #3
 801500e:	2801      	cmp	r0, #1
 8015010:	d00a      	beq.n	8015028 <sin+0x58>
 8015012:	2802      	cmp	r0, #2
 8015014:	d00f      	beq.n	8015036 <sin+0x66>
 8015016:	b9c0      	cbnz	r0, 801504a <sin+0x7a>
 8015018:	ed9d 1b02 	vldr	d1, [sp, #8]
 801501c:	ed9d 0b00 	vldr	d0, [sp]
 8015020:	2001      	movs	r0, #1
 8015022:	f000 fbcd 	bl	80157c0 <__kernel_sin>
 8015026:	e7ea      	b.n	8014ffe <sin+0x2e>
 8015028:	ed9d 1b02 	vldr	d1, [sp, #8]
 801502c:	ed9d 0b00 	vldr	d0, [sp]
 8015030:	f000 fb5e 	bl	80156f0 <__kernel_cos>
 8015034:	e7e3      	b.n	8014ffe <sin+0x2e>
 8015036:	ed9d 1b02 	vldr	d1, [sp, #8]
 801503a:	ed9d 0b00 	vldr	d0, [sp]
 801503e:	2001      	movs	r0, #1
 8015040:	f000 fbbe 	bl	80157c0 <__kernel_sin>
 8015044:	eeb1 0b40 	vneg.f64	d0, d0
 8015048:	e7d9      	b.n	8014ffe <sin+0x2e>
 801504a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801504e:	ed9d 0b00 	vldr	d0, [sp]
 8015052:	f000 fb4d 	bl	80156f0 <__kernel_cos>
 8015056:	e7f5      	b.n	8015044 <sin+0x74>
	...
 8015060:	3fe921fb 	.word	0x3fe921fb
 8015064:	7fefffff 	.word	0x7fefffff

08015068 <sqrtf>:
 8015068:	b508      	push	{r3, lr}
 801506a:	ed2d 8b02 	vpush	{d8}
 801506e:	eeb0 8a40 	vmov.f32	s16, s0
 8015072:	f000 fad2 	bl	801561a <__ieee754_sqrtf>
 8015076:	eeb4 8a48 	vcmp.f32	s16, s16
 801507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507e:	d60c      	bvs.n	801509a <sqrtf+0x32>
 8015080:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80150a0 <sqrtf+0x38>
 8015084:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508c:	d505      	bpl.n	801509a <sqrtf+0x32>
 801508e:	f7ff f847 	bl	8014120 <__errno>
 8015092:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015096:	2321      	movs	r3, #33	@ 0x21
 8015098:	6003      	str	r3, [r0, #0]
 801509a:	ecbd 8b02 	vpop	{d8}
 801509e:	bd08      	pop	{r3, pc}
	...

080150a8 <nan>:
 80150a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80150b0 <nan+0x8>
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	00000000 	.word	0x00000000
 80150b4:	7ff80000 	.word	0x7ff80000

080150b8 <checkint>:
 80150b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80150bc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80150c0:	429a      	cmp	r2, r3
 80150c2:	b570      	push	{r4, r5, r6, lr}
 80150c4:	dd2a      	ble.n	801511c <checkint+0x64>
 80150c6:	f240 4333 	movw	r3, #1075	@ 0x433
 80150ca:	429a      	cmp	r2, r3
 80150cc:	dc24      	bgt.n	8015118 <checkint+0x60>
 80150ce:	1a9b      	subs	r3, r3, r2
 80150d0:	f1a3 0620 	sub.w	r6, r3, #32
 80150d4:	f04f 32ff 	mov.w	r2, #4294967295
 80150d8:	fa02 f403 	lsl.w	r4, r2, r3
 80150dc:	fa02 f606 	lsl.w	r6, r2, r6
 80150e0:	f1c3 0520 	rsb	r5, r3, #32
 80150e4:	fa22 f505 	lsr.w	r5, r2, r5
 80150e8:	4334      	orrs	r4, r6
 80150ea:	432c      	orrs	r4, r5
 80150ec:	409a      	lsls	r2, r3
 80150ee:	ea20 0202 	bic.w	r2, r0, r2
 80150f2:	ea21 0404 	bic.w	r4, r1, r4
 80150f6:	4322      	orrs	r2, r4
 80150f8:	f1a3 0420 	sub.w	r4, r3, #32
 80150fc:	f1c3 0220 	rsb	r2, r3, #32
 8015100:	d10c      	bne.n	801511c <checkint+0x64>
 8015102:	40d8      	lsrs	r0, r3
 8015104:	fa01 f302 	lsl.w	r3, r1, r2
 8015108:	4318      	orrs	r0, r3
 801510a:	40e1      	lsrs	r1, r4
 801510c:	4308      	orrs	r0, r1
 801510e:	f000 0001 	and.w	r0, r0, #1
 8015112:	f1d0 0002 	rsbs	r0, r0, #2
 8015116:	bd70      	pop	{r4, r5, r6, pc}
 8015118:	2002      	movs	r0, #2
 801511a:	e7fc      	b.n	8015116 <checkint+0x5e>
 801511c:	2000      	movs	r0, #0
 801511e:	e7fa      	b.n	8015116 <checkint+0x5e>

08015120 <pow>:
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	ee10 4a90 	vmov	r4, s1
 8015128:	ed2d 8b0a 	vpush	{d8-d12}
 801512c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8015130:	ee11 aa90 	vmov	sl, s3
 8015134:	f108 32ff 	add.w	r2, r8, #4294967295
 8015138:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801513c:	429a      	cmp	r2, r3
 801513e:	ee10 5a10 	vmov	r5, s0
 8015142:	ee11 0a10 	vmov	r0, s2
 8015146:	b087      	sub	sp, #28
 8015148:	46c4      	mov	ip, r8
 801514a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801514e:	d806      	bhi.n	801515e <pow+0x3e>
 8015150:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8015154:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8015158:	2b7f      	cmp	r3, #127	@ 0x7f
 801515a:	f240 8157 	bls.w	801540c <pow+0x2ec>
 801515e:	1802      	adds	r2, r0, r0
 8015160:	eb4a 010a 	adc.w	r1, sl, sl
 8015164:	f06f 0b01 	mvn.w	fp, #1
 8015168:	1e57      	subs	r7, r2, #1
 801516a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801516e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8015172:	45bb      	cmp	fp, r7
 8015174:	eb7e 0303 	sbcs.w	r3, lr, r3
 8015178:	d242      	bcs.n	8015200 <pow+0xe0>
 801517a:	ea52 0301 	orrs.w	r3, r2, r1
 801517e:	f04f 0300 	mov.w	r3, #0
 8015182:	d10c      	bne.n	801519e <pow+0x7e>
 8015184:	196d      	adds	r5, r5, r5
 8015186:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801518a:	4164      	adcs	r4, r4
 801518c:	42ab      	cmp	r3, r5
 801518e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015192:	41a3      	sbcs	r3, r4
 8015194:	f0c0 808f 	bcc.w	80152b6 <pow+0x196>
 8015198:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801519c:	e02b      	b.n	80151f6 <pow+0xd6>
 801519e:	4ed4      	ldr	r6, [pc, #848]	@ (80154f0 <pow+0x3d0>)
 80151a0:	42b4      	cmp	r4, r6
 80151a2:	bf08      	it	eq
 80151a4:	429d      	cmpeq	r5, r3
 80151a6:	d109      	bne.n	80151bc <pow+0x9c>
 80151a8:	1800      	adds	r0, r0, r0
 80151aa:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80151ae:	eb4a 0a0a 	adc.w	sl, sl, sl
 80151b2:	4283      	cmp	r3, r0
 80151b4:	4bcf      	ldr	r3, [pc, #828]	@ (80154f4 <pow+0x3d4>)
 80151b6:	eb73 030a 	sbcs.w	r3, r3, sl
 80151ba:	e7eb      	b.n	8015194 <pow+0x74>
 80151bc:	196d      	adds	r5, r5, r5
 80151be:	48ce      	ldr	r0, [pc, #824]	@ (80154f8 <pow+0x3d8>)
 80151c0:	4164      	adcs	r4, r4
 80151c2:	42ab      	cmp	r3, r5
 80151c4:	eb70 0604 	sbcs.w	r6, r0, r4
 80151c8:	d375      	bcc.n	80152b6 <pow+0x196>
 80151ca:	4281      	cmp	r1, r0
 80151cc:	bf08      	it	eq
 80151ce:	429a      	cmpeq	r2, r3
 80151d0:	d171      	bne.n	80152b6 <pow+0x196>
 80151d2:	4aca      	ldr	r2, [pc, #808]	@ (80154fc <pow+0x3dc>)
 80151d4:	4294      	cmp	r4, r2
 80151d6:	bf08      	it	eq
 80151d8:	429d      	cmpeq	r5, r3
 80151da:	d0dd      	beq.n	8015198 <pow+0x78>
 80151dc:	4294      	cmp	r4, r2
 80151de:	ea6f 0a0a 	mvn.w	sl, sl
 80151e2:	bf34      	ite	cc
 80151e4:	2400      	movcc	r4, #0
 80151e6:	2401      	movcs	r4, #1
 80151e8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80151ec:	4554      	cmp	r4, sl
 80151ee:	f040 81dc 	bne.w	80155aa <pow+0x48a>
 80151f2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80151f6:	b007      	add	sp, #28
 80151f8:	ecbd 8b0a 	vpop	{d8-d12}
 80151fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015200:	196f      	adds	r7, r5, r5
 8015202:	eb44 0904 	adc.w	r9, r4, r4
 8015206:	1e7a      	subs	r2, r7, #1
 8015208:	f169 0300 	sbc.w	r3, r9, #0
 801520c:	4593      	cmp	fp, r2
 801520e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8015212:	d225      	bcs.n	8015260 <pow+0x140>
 8015214:	ee20 0b00 	vmul.f64	d0, d0, d0
 8015218:	2c00      	cmp	r4, #0
 801521a:	da13      	bge.n	8015244 <pow+0x124>
 801521c:	4651      	mov	r1, sl
 801521e:	f7ff ff4b 	bl	80150b8 <checkint>
 8015222:	2801      	cmp	r0, #1
 8015224:	d10e      	bne.n	8015244 <pow+0x124>
 8015226:	eeb1 0b40 	vneg.f64	d0, d0
 801522a:	ea57 0909 	orrs.w	r9, r7, r9
 801522e:	d10b      	bne.n	8015248 <pow+0x128>
 8015230:	f1ba 0f00 	cmp.w	sl, #0
 8015234:	dadf      	bge.n	80151f6 <pow+0xd6>
 8015236:	b007      	add	sp, #28
 8015238:	ecbd 8b0a 	vpop	{d8-d12}
 801523c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015240:	f000 be0e 	b.w	8015e60 <__math_divzero>
 8015244:	2000      	movs	r0, #0
 8015246:	e7f0      	b.n	801522a <pow+0x10a>
 8015248:	f1ba 0f00 	cmp.w	sl, #0
 801524c:	dad3      	bge.n	80151f6 <pow+0xd6>
 801524e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015252:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8015256:	ed8d 7b00 	vstr	d7, [sp]
 801525a:	ed9d 0b00 	vldr	d0, [sp]
 801525e:	e7ca      	b.n	80151f6 <pow+0xd6>
 8015260:	2c00      	cmp	r4, #0
 8015262:	da2b      	bge.n	80152bc <pow+0x19c>
 8015264:	4651      	mov	r1, sl
 8015266:	f7ff ff27 	bl	80150b8 <checkint>
 801526a:	b930      	cbnz	r0, 801527a <pow+0x15a>
 801526c:	b007      	add	sp, #28
 801526e:	ecbd 8b0a 	vpop	{d8-d12}
 8015272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015276:	f000 be0b 	b.w	8015e90 <__math_invalid>
 801527a:	1e41      	subs	r1, r0, #1
 801527c:	4248      	negs	r0, r1
 801527e:	4148      	adcs	r0, r1
 8015280:	0480      	lsls	r0, r0, #18
 8015282:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8015286:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801528a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801528e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8015292:	2b7f      	cmp	r3, #127	@ 0x7f
 8015294:	d92d      	bls.n	80152f2 <pow+0x1d2>
 8015296:	4b96      	ldr	r3, [pc, #600]	@ (80154f0 <pow+0x3d0>)
 8015298:	2000      	movs	r0, #0
 801529a:	429c      	cmp	r4, r3
 801529c:	bf08      	it	eq
 801529e:	4285      	cmpeq	r5, r0
 80152a0:	f43f af7a 	beq.w	8015198 <pow+0x78>
 80152a4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80152a8:	428a      	cmp	r2, r1
 80152aa:	d80c      	bhi.n	80152c6 <pow+0x1a6>
 80152ac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80152b0:	42a8      	cmp	r0, r5
 80152b2:	41a3      	sbcs	r3, r4
 80152b4:	d204      	bcs.n	80152c0 <pow+0x1a0>
 80152b6:	ee31 0b00 	vadd.f64	d0, d1, d0
 80152ba:	e79c      	b.n	80151f6 <pow+0xd6>
 80152bc:	2000      	movs	r0, #0
 80152be:	e7e4      	b.n	801528a <pow+0x16a>
 80152c0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80152c4:	e797      	b.n	80151f6 <pow+0xd6>
 80152c6:	2d01      	cmp	r5, #1
 80152c8:	eb74 0303 	sbcs.w	r3, r4, r3
 80152cc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80152d0:	bf34      	ite	cc
 80152d2:	2301      	movcc	r3, #1
 80152d4:	2300      	movcs	r3, #0
 80152d6:	4296      	cmp	r6, r2
 80152d8:	bf8c      	ite	hi
 80152da:	2600      	movhi	r6, #0
 80152dc:	2601      	movls	r6, #1
 80152de:	42b3      	cmp	r3, r6
 80152e0:	f000 809c 	beq.w	801541c <pow+0x2fc>
 80152e4:	b007      	add	sp, #28
 80152e6:	ecbd 8b0a 	vpop	{d8-d12}
 80152ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ee:	f000 bdaf 	b.w	8015e50 <__math_oflow>
 80152f2:	f1bc 0f00 	cmp.w	ip, #0
 80152f6:	d10a      	bne.n	801530e <pow+0x1ee>
 80152f8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 80154e0 <pow+0x3c0>
 80152fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015300:	ec53 2b17 	vmov	r2, r3, d7
 8015304:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8015308:	4615      	mov	r5, r2
 801530a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801530e:	4a7c      	ldr	r2, [pc, #496]	@ (8015500 <pow+0x3e0>)
 8015310:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8015314:	4422      	add	r2, r4
 8015316:	1513      	asrs	r3, r2, #20
 8015318:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801531c:	ee03 3a10 	vmov	s6, r3
 8015320:	0d12      	lsrs	r2, r2, #20
 8015322:	4b78      	ldr	r3, [pc, #480]	@ (8015504 <pow+0x3e4>)
 8015324:	0512      	lsls	r2, r2, #20
 8015326:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801532a:	1aa7      	subs	r7, r4, r2
 801532c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8015330:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8015334:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8015338:	1e2e      	subs	r6, r5, #0
 801533a:	ec47 6b14 	vmov	d4, r6, r7
 801533e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8015342:	eea4 6b05 	vfma.f64	d6, d4, d5
 8015346:	ed93 5b00 	vldr	d5, [r3]
 801534a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801534e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8015352:	ed93 5b02 	vldr	d5, [r3, #8]
 8015356:	ee36 4b02 	vadd.f64	d4, d6, d2
 801535a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801535e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8015362:	ed93 5b04 	vldr	d5, [r3, #16]
 8015366:	ee32 2b06 	vadd.f64	d2, d2, d6
 801536a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801536e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8015372:	ee26 0b05 	vmul.f64	d0, d6, d5
 8015376:	ee34 8b00 	vadd.f64	d8, d4, d0
 801537a:	eeb0 9b40 	vmov.f64	d9, d0
 801537e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8015382:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8015386:	ee34 ab00 	vadd.f64	d10, d4, d0
 801538a:	ed93 5b06 	vldr	d5, [r3, #24]
 801538e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8015392:	ee37 7b09 	vadd.f64	d7, d7, d9
 8015396:	ed93 4b08 	vldr	d4, [r3, #32]
 801539a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801539e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80153a2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80153a6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80153aa:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80153ae:	eea6 4b03 	vfma.f64	d4, d6, d3
 80153b2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80153b6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80153ba:	eea0 4b03 	vfma.f64	d4, d0, d3
 80153be:	eea0 5b04 	vfma.f64	d5, d0, d4
 80153c2:	eeab 7b05 	vfma.f64	d7, d11, d5
 80153c6:	ee38 4b07 	vadd.f64	d4, d8, d7
 80153ca:	ee21 6b04 	vmul.f64	d6, d1, d4
 80153ce:	ee16 3a90 	vmov	r3, s13
 80153d2:	eeb0 5b46 	vmov.f64	d5, d6
 80153d6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80153da:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80153de:	18b2      	adds	r2, r6, r2
 80153e0:	2a3e      	cmp	r2, #62	@ 0x3e
 80153e2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80153e6:	ee38 8b44 	vsub.f64	d8, d8, d4
 80153ea:	ee38 8b07 	vadd.f64	d8, d8, d7
 80153ee:	eea1 5b08 	vfma.f64	d5, d1, d8
 80153f2:	d91b      	bls.n	801542c <pow+0x30c>
 80153f4:	2a00      	cmp	r2, #0
 80153f6:	da0b      	bge.n	8015410 <pow+0x2f0>
 80153f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80153fc:	ee36 0b00 	vadd.f64	d0, d6, d0
 8015400:	2800      	cmp	r0, #0
 8015402:	f43f aef8 	beq.w	80151f6 <pow+0xd6>
 8015406:	eeb1 0b40 	vneg.f64	d0, d0
 801540a:	e6f4      	b.n	80151f6 <pow+0xd6>
 801540c:	2000      	movs	r0, #0
 801540e:	e77e      	b.n	801530e <pow+0x1ee>
 8015410:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8015414:	d909      	bls.n	801542a <pow+0x30a>
 8015416:	2b00      	cmp	r3, #0
 8015418:	f6bf af64 	bge.w	80152e4 <pow+0x1c4>
 801541c:	b007      	add	sp, #28
 801541e:	ecbd 8b0a 	vpop	{d8-d12}
 8015422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015426:	f000 bd0b 	b.w	8015e40 <__math_uflow>
 801542a:	2600      	movs	r6, #0
 801542c:	4936      	ldr	r1, [pc, #216]	@ (8015508 <pow+0x3e8>)
 801542e:	ed91 4b02 	vldr	d4, [r1, #8]
 8015432:	ed91 3b00 	vldr	d3, [r1]
 8015436:	eeb0 7b44 	vmov.f64	d7, d4
 801543a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801543e:	ee17 5a10 	vmov	r5, s14
 8015442:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015446:	ed91 4b04 	vldr	d4, [r1, #16]
 801544a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801544e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8015452:	ed91 4b06 	vldr	d4, [r1, #24]
 8015456:	18dc      	adds	r4, r3, r3
 8015458:	f104 030f 	add.w	r3, r4, #15
 801545c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8015460:	eea7 6b04 	vfma.f64	d6, d7, d4
 8015464:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8015468:	ee35 5b06 	vadd.f64	d5, d5, d6
 801546c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015470:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8015474:	ed91 4b08 	vldr	d4, [r1, #32]
 8015478:	ee35 7b07 	vadd.f64	d7, d5, d7
 801547c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8015480:	eea5 4b03 	vfma.f64	d4, d5, d3
 8015484:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8015488:	eea6 7b04 	vfma.f64	d7, d6, d4
 801548c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8015490:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8015494:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8015498:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801549c:	eea5 4b03 	vfma.f64	d4, d5, d3
 80154a0:	1940      	adds	r0, r0, r5
 80154a2:	2700      	movs	r7, #0
 80154a4:	eb17 020c 	adds.w	r2, r7, ip
 80154a8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80154ac:	eea6 7b04 	vfma.f64	d7, d6, d4
 80154b0:	2e00      	cmp	r6, #0
 80154b2:	d175      	bne.n	80155a0 <pow+0x480>
 80154b4:	42bd      	cmp	r5, r7
 80154b6:	db29      	blt.n	801550c <pow+0x3ec>
 80154b8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 80154bc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80154c0:	4610      	mov	r0, r2
 80154c2:	ec41 0b10 	vmov	d0, r0, r1
 80154c6:	eea7 0b00 	vfma.f64	d0, d7, d0
 80154ca:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80154e8 <pow+0x3c8>
 80154ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80154d2:	b007      	add	sp, #28
 80154d4:	ecbd 8b0a 	vpop	{d8-d12}
 80154d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154dc:	f000 bcf0 	b.w	8015ec0 <__math_check_oflow>
 80154e0:	00000000 	.word	0x00000000
 80154e4:	43300000 	.word	0x43300000
 80154e8:	00000000 	.word	0x00000000
 80154ec:	7f000000 	.word	0x7f000000
 80154f0:	3ff00000 	.word	0x3ff00000
 80154f4:	fff00000 	.word	0xfff00000
 80154f8:	ffe00000 	.word	0xffe00000
 80154fc:	7fe00000 	.word	0x7fe00000
 8015500:	c0196aab 	.word	0xc0196aab
 8015504:	08043bd0 	.word	0x08043bd0
 8015508:	08044db0 	.word	0x08044db0
 801550c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015510:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8015514:	4610      	mov	r0, r2
 8015516:	ec41 0b15 	vmov	d5, r0, r1
 801551a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801551e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8015522:	ee35 7b06 	vadd.f64	d7, d5, d6
 8015526:	eeb0 4bc7 	vabs.f64	d4, d7
 801552a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015532:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80155b0 <pow+0x490>
 8015536:	d52a      	bpl.n	801558e <pow+0x46e>
 8015538:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801553c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015544:	ee35 5b06 	vadd.f64	d5, d5, d6
 8015548:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801554c:	bf58      	it	pl
 801554e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8015552:	ee37 3b04 	vadd.f64	d3, d7, d4
 8015556:	ee34 6b43 	vsub.f64	d6, d4, d3
 801555a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801555e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8015562:	ee36 6b03 	vadd.f64	d6, d6, d3
 8015566:	ee36 7b44 	vsub.f64	d7, d6, d4
 801556a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015572:	d104      	bne.n	801557e <pow+0x45e>
 8015574:	4632      	mov	r2, r6
 8015576:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801557a:	ec43 2b17 	vmov	d7, r2, r3
 801557e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015582:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015586:	ee26 6b00 	vmul.f64	d6, d6, d0
 801558a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801558e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8015592:	b007      	add	sp, #28
 8015594:	ecbd 8b0a 	vpop	{d8-d12}
 8015598:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	f000 bc87 	b.w	8015eae <__math_check_uflow>
 80155a0:	ec43 2b10 	vmov	d0, r2, r3
 80155a4:	eea7 0b00 	vfma.f64	d0, d7, d0
 80155a8:	e625      	b.n	80151f6 <pow+0xd6>
 80155aa:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80155b8 <pow+0x498>
 80155ae:	e622      	b.n	80151f6 <pow+0xd6>
 80155b0:	00000000 	.word	0x00000000
 80155b4:	00100000 	.word	0x00100000
	...

080155c0 <lroundf>:
 80155c0:	ee10 1a10 	vmov	r1, s0
 80155c4:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 80155c8:	2900      	cmp	r1, #0
 80155ca:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 80155ce:	bfb4      	ite	lt
 80155d0:	f04f 30ff 	movlt.w	r0, #4294967295
 80155d4:	2001      	movge	r0, #1
 80155d6:	2a1e      	cmp	r2, #30
 80155d8:	dc1a      	bgt.n	8015610 <lroundf+0x50>
 80155da:	2a00      	cmp	r2, #0
 80155dc:	da03      	bge.n	80155e6 <lroundf+0x26>
 80155de:	3201      	adds	r2, #1
 80155e0:	bf18      	it	ne
 80155e2:	2000      	movne	r0, #0
 80155e4:	4770      	bx	lr
 80155e6:	2a16      	cmp	r2, #22
 80155e8:	bfd8      	it	le
 80155ea:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 80155ee:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80155f2:	bfd8      	it	le
 80155f4:	4113      	asrle	r3, r2
 80155f6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80155fa:	bfcd      	iteet	gt
 80155fc:	3b96      	subgt	r3, #150	@ 0x96
 80155fe:	185b      	addle	r3, r3, r1
 8015600:	f1c2 0217 	rsble	r2, r2, #23
 8015604:	fa01 f303 	lslgt.w	r3, r1, r3
 8015608:	bfd8      	it	le
 801560a:	40d3      	lsrle	r3, r2
 801560c:	4358      	muls	r0, r3
 801560e:	4770      	bx	lr
 8015610:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015614:	ee17 0a90 	vmov	r0, s15
 8015618:	4770      	bx	lr

0801561a <__ieee754_sqrtf>:
 801561a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801561e:	4770      	bx	lr

08015620 <round>:
 8015620:	ee10 3a90 	vmov	r3, s1
 8015624:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8015628:	f2a1 32ff 	subw	r2, r1, #1023	@ 0x3ff
 801562c:	2a13      	cmp	r2, #19
 801562e:	b510      	push	{r4, lr}
 8015630:	ee10 4a10 	vmov	r4, s0
 8015634:	dc1d      	bgt.n	8015672 <round+0x52>
 8015636:	2a00      	cmp	r2, #0
 8015638:	da0d      	bge.n	8015656 <round+0x36>
 801563a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801563e:	3201      	adds	r2, #1
 8015640:	bf04      	itt	eq
 8015642:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8015646:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801564a:	2200      	movs	r2, #0
 801564c:	4619      	mov	r1, r3
 801564e:	4610      	mov	r0, r2
 8015650:	ec41 0b10 	vmov	d0, r0, r1
 8015654:	e014      	b.n	8015680 <round+0x60>
 8015656:	4813      	ldr	r0, [pc, #76]	@ (80156a4 <round+0x84>)
 8015658:	4110      	asrs	r0, r2
 801565a:	ea00 0103 	and.w	r1, r0, r3
 801565e:	4321      	orrs	r1, r4
 8015660:	d00e      	beq.n	8015680 <round+0x60>
 8015662:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8015666:	fa41 f202 	asr.w	r2, r1, r2
 801566a:	4413      	add	r3, r2
 801566c:	ea23 0300 	bic.w	r3, r3, r0
 8015670:	e7eb      	b.n	801564a <round+0x2a>
 8015672:	2a33      	cmp	r2, #51	@ 0x33
 8015674:	dd05      	ble.n	8015682 <round+0x62>
 8015676:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801567a:	d101      	bne.n	8015680 <round+0x60>
 801567c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015680:	bd10      	pop	{r4, pc}
 8015682:	f2a1 4113 	subw	r1, r1, #1043	@ 0x413
 8015686:	f04f 30ff 	mov.w	r0, #4294967295
 801568a:	40c8      	lsrs	r0, r1
 801568c:	4220      	tst	r0, r4
 801568e:	d0f7      	beq.n	8015680 <round+0x60>
 8015690:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8015694:	2201      	movs	r2, #1
 8015696:	408a      	lsls	r2, r1
 8015698:	1912      	adds	r2, r2, r4
 801569a:	bf28      	it	cs
 801569c:	3301      	addcs	r3, #1
 801569e:	ea22 0200 	bic.w	r2, r2, r0
 80156a2:	e7d3      	b.n	801564c <round+0x2c>
 80156a4:	000fffff 	.word	0x000fffff

080156a8 <roundf>:
 80156a8:	ee10 0a10 	vmov	r0, s0
 80156ac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80156b0:	3a7f      	subs	r2, #127	@ 0x7f
 80156b2:	2a16      	cmp	r2, #22
 80156b4:	dc15      	bgt.n	80156e2 <roundf+0x3a>
 80156b6:	2a00      	cmp	r2, #0
 80156b8:	da08      	bge.n	80156cc <roundf+0x24>
 80156ba:	3201      	adds	r2, #1
 80156bc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80156c0:	d101      	bne.n	80156c6 <roundf+0x1e>
 80156c2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80156c6:	ee00 3a10 	vmov	s0, r3
 80156ca:	4770      	bx	lr
 80156cc:	4907      	ldr	r1, [pc, #28]	@ (80156ec <roundf+0x44>)
 80156ce:	4111      	asrs	r1, r2
 80156d0:	4201      	tst	r1, r0
 80156d2:	d0fa      	beq.n	80156ca <roundf+0x22>
 80156d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80156d8:	4113      	asrs	r3, r2
 80156da:	4403      	add	r3, r0
 80156dc:	ea23 0301 	bic.w	r3, r3, r1
 80156e0:	e7f1      	b.n	80156c6 <roundf+0x1e>
 80156e2:	2a80      	cmp	r2, #128	@ 0x80
 80156e4:	d1f1      	bne.n	80156ca <roundf+0x22>
 80156e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80156ea:	4770      	bx	lr
 80156ec:	007fffff 	.word	0x007fffff

080156f0 <__kernel_cos>:
 80156f0:	eeb0 5b40 	vmov.f64	d5, d0
 80156f4:	ee15 1a90 	vmov	r1, s11
 80156f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80156fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015700:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015704:	d204      	bcs.n	8015710 <__kernel_cos+0x20>
 8015706:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801570a:	ee17 3a90 	vmov	r3, s15
 801570e:	b343      	cbz	r3, 8015762 <__kernel_cos+0x72>
 8015710:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015714:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8015718:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015788 <__kernel_cos+0x98>
 801571c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015790 <__kernel_cos+0xa0>
 8015720:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015724:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015798 <__kernel_cos+0xa8>
 8015728:	eea4 7b06 	vfma.f64	d7, d4, d6
 801572c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80157a0 <__kernel_cos+0xb0>
 8015730:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015734:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80157a8 <__kernel_cos+0xb8>
 8015738:	4b1f      	ldr	r3, [pc, #124]	@ (80157b8 <__kernel_cos+0xc8>)
 801573a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801573e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80157b0 <__kernel_cos+0xc0>
 8015742:	4299      	cmp	r1, r3
 8015744:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015748:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801574c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015750:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015754:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015758:	d804      	bhi.n	8015764 <__kernel_cos+0x74>
 801575a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801575e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015762:	4770      	bx	lr
 8015764:	4b15      	ldr	r3, [pc, #84]	@ (80157bc <__kernel_cos+0xcc>)
 8015766:	4299      	cmp	r1, r3
 8015768:	d809      	bhi.n	801577e <__kernel_cos+0x8e>
 801576a:	2200      	movs	r2, #0
 801576c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015770:	ec43 2b16 	vmov	d6, r2, r3
 8015774:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015778:	ee37 7b46 	vsub.f64	d7, d7, d6
 801577c:	e7ed      	b.n	801575a <__kernel_cos+0x6a>
 801577e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015782:	e7f7      	b.n	8015774 <__kernel_cos+0x84>
 8015784:	f3af 8000 	nop.w
 8015788:	be8838d4 	.word	0xbe8838d4
 801578c:	bda8fae9 	.word	0xbda8fae9
 8015790:	bdb4b1c4 	.word	0xbdb4b1c4
 8015794:	3e21ee9e 	.word	0x3e21ee9e
 8015798:	809c52ad 	.word	0x809c52ad
 801579c:	be927e4f 	.word	0xbe927e4f
 80157a0:	19cb1590 	.word	0x19cb1590
 80157a4:	3efa01a0 	.word	0x3efa01a0
 80157a8:	16c15177 	.word	0x16c15177
 80157ac:	bf56c16c 	.word	0xbf56c16c
 80157b0:	5555554c 	.word	0x5555554c
 80157b4:	3fa55555 	.word	0x3fa55555
 80157b8:	3fd33332 	.word	0x3fd33332
 80157bc:	3fe90000 	.word	0x3fe90000

080157c0 <__kernel_sin>:
 80157c0:	ee10 3a90 	vmov	r3, s1
 80157c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80157c8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80157cc:	d204      	bcs.n	80157d8 <__kernel_sin+0x18>
 80157ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80157d2:	ee17 3a90 	vmov	r3, s15
 80157d6:	b35b      	cbz	r3, 8015830 <__kernel_sin+0x70>
 80157d8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80157dc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80157e0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015838 <__kernel_sin+0x78>
 80157e4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015840 <__kernel_sin+0x80>
 80157e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80157ec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015848 <__kernel_sin+0x88>
 80157f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80157f4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015850 <__kernel_sin+0x90>
 80157f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80157fc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015858 <__kernel_sin+0x98>
 8015800:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015804:	b930      	cbnz	r0, 8015814 <__kernel_sin+0x54>
 8015806:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015860 <__kernel_sin+0xa0>
 801580a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801580e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015812:	4770      	bx	lr
 8015814:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015818:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801581c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015820:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015824:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015868 <__kernel_sin+0xa8>
 8015828:	eea5 1b07 	vfma.f64	d1, d5, d7
 801582c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	f3af 8000 	nop.w
 8015838:	5acfd57c 	.word	0x5acfd57c
 801583c:	3de5d93a 	.word	0x3de5d93a
 8015840:	8a2b9ceb 	.word	0x8a2b9ceb
 8015844:	be5ae5e6 	.word	0xbe5ae5e6
 8015848:	57b1fe7d 	.word	0x57b1fe7d
 801584c:	3ec71de3 	.word	0x3ec71de3
 8015850:	19c161d5 	.word	0x19c161d5
 8015854:	bf2a01a0 	.word	0xbf2a01a0
 8015858:	1110f8a6 	.word	0x1110f8a6
 801585c:	3f811111 	.word	0x3f811111
 8015860:	55555549 	.word	0x55555549
 8015864:	bfc55555 	.word	0xbfc55555
 8015868:	55555549 	.word	0x55555549
 801586c:	3fc55555 	.word	0x3fc55555

08015870 <__ieee754_fmod>:
 8015870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015874:	ed8d 1b00 	vstr	d1, [sp]
 8015878:	e9dd 6500 	ldrd	r6, r5, [sp]
 801587c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8015880:	ea56 0307 	orrs.w	r3, r6, r7
 8015884:	46b6      	mov	lr, r6
 8015886:	d00d      	beq.n	80158a4 <__ieee754_fmod+0x34>
 8015888:	ee10 ca90 	vmov	ip, s1
 801588c:	4b78      	ldr	r3, [pc, #480]	@ (8015a70 <__ieee754_fmod+0x200>)
 801588e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8015892:	4598      	cmp	r8, r3
 8015894:	d806      	bhi.n	80158a4 <__ieee754_fmod+0x34>
 8015896:	4273      	negs	r3, r6
 8015898:	4a76      	ldr	r2, [pc, #472]	@ (8015a74 <__ieee754_fmod+0x204>)
 801589a:	4333      	orrs	r3, r6
 801589c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80158a0:	4293      	cmp	r3, r2
 80158a2:	d908      	bls.n	80158b6 <__ieee754_fmod+0x46>
 80158a4:	ed9d 7b00 	vldr	d7, [sp]
 80158a8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80158ac:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80158b0:	b003      	add	sp, #12
 80158b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158b6:	ee10 9a10 	vmov	r9, s0
 80158ba:	45b8      	cmp	r8, r7
 80158bc:	4649      	mov	r1, r9
 80158be:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80158c2:	dc09      	bgt.n	80158d8 <__ieee754_fmod+0x68>
 80158c4:	dbf4      	blt.n	80158b0 <__ieee754_fmod+0x40>
 80158c6:	454e      	cmp	r6, r9
 80158c8:	d8f2      	bhi.n	80158b0 <__ieee754_fmod+0x40>
 80158ca:	d105      	bne.n	80158d8 <__ieee754_fmod+0x68>
 80158cc:	4b6a      	ldr	r3, [pc, #424]	@ (8015a78 <__ieee754_fmod+0x208>)
 80158ce:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80158d2:	ed93 0b00 	vldr	d0, [r3]
 80158d6:	e7eb      	b.n	80158b0 <__ieee754_fmod+0x40>
 80158d8:	4a66      	ldr	r2, [pc, #408]	@ (8015a74 <__ieee754_fmod+0x204>)
 80158da:	ea1c 0f02 	tst.w	ip, r2
 80158de:	d14a      	bne.n	8015976 <__ieee754_fmod+0x106>
 80158e0:	f1b8 0f00 	cmp.w	r8, #0
 80158e4:	d13f      	bne.n	8015966 <__ieee754_fmod+0xf6>
 80158e6:	4865      	ldr	r0, [pc, #404]	@ (8015a7c <__ieee754_fmod+0x20c>)
 80158e8:	464b      	mov	r3, r9
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	dc38      	bgt.n	8015960 <__ieee754_fmod+0xf0>
 80158ee:	4215      	tst	r5, r2
 80158f0:	d150      	bne.n	8015994 <__ieee754_fmod+0x124>
 80158f2:	2f00      	cmp	r7, #0
 80158f4:	d147      	bne.n	8015986 <__ieee754_fmod+0x116>
 80158f6:	4a61      	ldr	r2, [pc, #388]	@ (8015a7c <__ieee754_fmod+0x20c>)
 80158f8:	4633      	mov	r3, r6
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	dc40      	bgt.n	8015980 <__ieee754_fmod+0x110>
 80158fe:	4b60      	ldr	r3, [pc, #384]	@ (8015a80 <__ieee754_fmod+0x210>)
 8015900:	4298      	cmp	r0, r3
 8015902:	db4b      	blt.n	801599c <__ieee754_fmod+0x12c>
 8015904:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8015908:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801590c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015a80 <__ieee754_fmod+0x210>
 8015910:	4562      	cmp	r2, ip
 8015912:	db58      	blt.n	80159c6 <__ieee754_fmod+0x156>
 8015914:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015918:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 801591c:	1a80      	subs	r0, r0, r2
 801591e:	1b5e      	subs	r6, r3, r5
 8015920:	eba1 070e 	sub.w	r7, r1, lr
 8015924:	2800      	cmp	r0, #0
 8015926:	d164      	bne.n	80159f2 <__ieee754_fmod+0x182>
 8015928:	4571      	cmp	r1, lr
 801592a:	bf38      	it	cc
 801592c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015930:	2e00      	cmp	r6, #0
 8015932:	bfa4      	itt	ge
 8015934:	4639      	movge	r1, r7
 8015936:	4633      	movge	r3, r6
 8015938:	ea53 0001 	orrs.w	r0, r3, r1
 801593c:	d0c6      	beq.n	80158cc <__ieee754_fmod+0x5c>
 801593e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015942:	db6b      	blt.n	8015a1c <__ieee754_fmod+0x1ac>
 8015944:	484e      	ldr	r0, [pc, #312]	@ (8015a80 <__ieee754_fmod+0x210>)
 8015946:	4282      	cmp	r2, r0
 8015948:	db6e      	blt.n	8015a28 <__ieee754_fmod+0x1b8>
 801594a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801594e:	4323      	orrs	r3, r4
 8015950:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8015954:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015958:	460c      	mov	r4, r1
 801595a:	ec45 4b10 	vmov	d0, r4, r5
 801595e:	e7a7      	b.n	80158b0 <__ieee754_fmod+0x40>
 8015960:	3801      	subs	r0, #1
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	e7c1      	b.n	80158ea <__ieee754_fmod+0x7a>
 8015966:	4846      	ldr	r0, [pc, #280]	@ (8015a80 <__ieee754_fmod+0x210>)
 8015968:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801596c:	2b00      	cmp	r3, #0
 801596e:	ddbe      	ble.n	80158ee <__ieee754_fmod+0x7e>
 8015970:	3801      	subs	r0, #1
 8015972:	005b      	lsls	r3, r3, #1
 8015974:	e7fa      	b.n	801596c <__ieee754_fmod+0xfc>
 8015976:	ea4f 5028 	mov.w	r0, r8, asr #20
 801597a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801597e:	e7b6      	b.n	80158ee <__ieee754_fmod+0x7e>
 8015980:	3a01      	subs	r2, #1
 8015982:	005b      	lsls	r3, r3, #1
 8015984:	e7b9      	b.n	80158fa <__ieee754_fmod+0x8a>
 8015986:	4a3e      	ldr	r2, [pc, #248]	@ (8015a80 <__ieee754_fmod+0x210>)
 8015988:	02fb      	lsls	r3, r7, #11
 801598a:	2b00      	cmp	r3, #0
 801598c:	ddb7      	ble.n	80158fe <__ieee754_fmod+0x8e>
 801598e:	3a01      	subs	r2, #1
 8015990:	005b      	lsls	r3, r3, #1
 8015992:	e7fa      	b.n	801598a <__ieee754_fmod+0x11a>
 8015994:	153a      	asrs	r2, r7, #20
 8015996:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801599a:	e7b0      	b.n	80158fe <__ieee754_fmod+0x8e>
 801599c:	eba3 0c00 	sub.w	ip, r3, r0
 80159a0:	f1bc 0f1f 	cmp.w	ip, #31
 80159a4:	dc09      	bgt.n	80159ba <__ieee754_fmod+0x14a>
 80159a6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80159aa:	fa08 f10c 	lsl.w	r1, r8, ip
 80159ae:	fa29 f303 	lsr.w	r3, r9, r3
 80159b2:	430b      	orrs	r3, r1
 80159b4:	fa09 f10c 	lsl.w	r1, r9, ip
 80159b8:	e7a8      	b.n	801590c <__ieee754_fmod+0x9c>
 80159ba:	4b32      	ldr	r3, [pc, #200]	@ (8015a84 <__ieee754_fmod+0x214>)
 80159bc:	1a1b      	subs	r3, r3, r0
 80159be:	fa09 f303 	lsl.w	r3, r9, r3
 80159c2:	2100      	movs	r1, #0
 80159c4:	e7a2      	b.n	801590c <__ieee754_fmod+0x9c>
 80159c6:	ebac 0c02 	sub.w	ip, ip, r2
 80159ca:	f1bc 0f1f 	cmp.w	ip, #31
 80159ce:	dc09      	bgt.n	80159e4 <__ieee754_fmod+0x174>
 80159d0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80159d4:	fa07 f70c 	lsl.w	r7, r7, ip
 80159d8:	fa26 f505 	lsr.w	r5, r6, r5
 80159dc:	433d      	orrs	r5, r7
 80159de:	fa06 fe0c 	lsl.w	lr, r6, ip
 80159e2:	e79b      	b.n	801591c <__ieee754_fmod+0xac>
 80159e4:	4d27      	ldr	r5, [pc, #156]	@ (8015a84 <__ieee754_fmod+0x214>)
 80159e6:	1aad      	subs	r5, r5, r2
 80159e8:	fa06 f505 	lsl.w	r5, r6, r5
 80159ec:	f04f 0e00 	mov.w	lr, #0
 80159f0:	e794      	b.n	801591c <__ieee754_fmod+0xac>
 80159f2:	4571      	cmp	r1, lr
 80159f4:	bf38      	it	cc
 80159f6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80159fa:	2e00      	cmp	r6, #0
 80159fc:	da05      	bge.n	8015a0a <__ieee754_fmod+0x19a>
 80159fe:	0fce      	lsrs	r6, r1, #31
 8015a00:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015a04:	0049      	lsls	r1, r1, #1
 8015a06:	3801      	subs	r0, #1
 8015a08:	e789      	b.n	801591e <__ieee754_fmod+0xae>
 8015a0a:	ea56 0307 	orrs.w	r3, r6, r7
 8015a0e:	f43f af5d 	beq.w	80158cc <__ieee754_fmod+0x5c>
 8015a12:	0ffb      	lsrs	r3, r7, #31
 8015a14:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015a18:	0079      	lsls	r1, r7, #1
 8015a1a:	e7f4      	b.n	8015a06 <__ieee754_fmod+0x196>
 8015a1c:	0fc8      	lsrs	r0, r1, #31
 8015a1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015a22:	0049      	lsls	r1, r1, #1
 8015a24:	3a01      	subs	r2, #1
 8015a26:	e78a      	b.n	801593e <__ieee754_fmod+0xce>
 8015a28:	1a80      	subs	r0, r0, r2
 8015a2a:	2814      	cmp	r0, #20
 8015a2c:	dc0c      	bgt.n	8015a48 <__ieee754_fmod+0x1d8>
 8015a2e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015a32:	fa03 f202 	lsl.w	r2, r3, r2
 8015a36:	40c1      	lsrs	r1, r0
 8015a38:	430a      	orrs	r2, r1
 8015a3a:	4103      	asrs	r3, r0
 8015a3c:	ea43 0104 	orr.w	r1, r3, r4
 8015a40:	4610      	mov	r0, r2
 8015a42:	ec41 0b10 	vmov	d0, r0, r1
 8015a46:	e733      	b.n	80158b0 <__ieee754_fmod+0x40>
 8015a48:	281f      	cmp	r0, #31
 8015a4a:	dc07      	bgt.n	8015a5c <__ieee754_fmod+0x1ec>
 8015a4c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015a50:	40c1      	lsrs	r1, r0
 8015a52:	fa03 f202 	lsl.w	r2, r3, r2
 8015a56:	430a      	orrs	r2, r1
 8015a58:	4623      	mov	r3, r4
 8015a5a:	e7ef      	b.n	8015a3c <__ieee754_fmod+0x1cc>
 8015a5c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015a60:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8015a64:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015a68:	32e2      	adds	r2, #226	@ 0xe2
 8015a6a:	fa43 f202 	asr.w	r2, r3, r2
 8015a6e:	e7f3      	b.n	8015a58 <__ieee754_fmod+0x1e8>
 8015a70:	7fefffff 	.word	0x7fefffff
 8015a74:	7ff00000 	.word	0x7ff00000
 8015a78:	08044c18 	.word	0x08044c18
 8015a7c:	fffffbed 	.word	0xfffffbed
 8015a80:	fffffc02 	.word	0xfffffc02
 8015a84:	fffffbe2 	.word	0xfffffbe2

08015a88 <__ieee754_log10>:
 8015a88:	b510      	push	{r4, lr}
 8015a8a:	ee10 3a90 	vmov	r3, s1
 8015a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015a92:	ed2d 8b02 	vpush	{d8}
 8015a96:	da21      	bge.n	8015adc <__ieee754_log10+0x54>
 8015a98:	ee10 1a10 	vmov	r1, s0
 8015a9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015aa0:	430a      	orrs	r2, r1
 8015aa2:	d108      	bne.n	8015ab6 <__ieee754_log10+0x2e>
 8015aa4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8015b30 <__ieee754_log10+0xa8>
 8015aa8:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8015b38 <__ieee754_log10+0xb0>
 8015aac:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8015ab0:	ecbd 8b02 	vpop	{d8}
 8015ab4:	bd10      	pop	{r4, pc}
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	da02      	bge.n	8015ac0 <__ieee754_log10+0x38>
 8015aba:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015abe:	e7f3      	b.n	8015aa8 <__ieee754_log10+0x20>
 8015ac0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8015b40 <__ieee754_log10+0xb8>
 8015ac4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015ac8:	ee10 3a90 	vmov	r3, s1
 8015acc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8015ad0:	4923      	ldr	r1, [pc, #140]	@ (8015b60 <__ieee754_log10+0xd8>)
 8015ad2:	428b      	cmp	r3, r1
 8015ad4:	dd04      	ble.n	8015ae0 <__ieee754_log10+0x58>
 8015ad6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015ada:	e7e9      	b.n	8015ab0 <__ieee754_log10+0x28>
 8015adc:	2200      	movs	r2, #0
 8015ade:	e7f7      	b.n	8015ad0 <__ieee754_log10+0x48>
 8015ae0:	1518      	asrs	r0, r3, #20
 8015ae2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8015ae6:	4410      	add	r0, r2
 8015ae8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8015aec:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 8015af0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8015af4:	ee08 3a10 	vmov	s16, r3
 8015af8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8015afc:	ec53 2b10 	vmov	r2, r3, d0
 8015b00:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015b04:	ec43 2b10 	vmov	d0, r2, r3
 8015b08:	f000 f9ee 	bl	8015ee8 <log>
 8015b0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8015b48 <__ieee754_log10+0xc0>
 8015b10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015b14:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8015b50 <__ieee754_log10+0xc8>
 8015b18:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8015b1c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8015b20:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015b58 <__ieee754_log10+0xd0>
 8015b24:	eea8 0b07 	vfma.f64	d0, d8, d7
 8015b28:	e7c2      	b.n	8015ab0 <__ieee754_log10+0x28>
 8015b2a:	bf00      	nop
 8015b2c:	f3af 8000 	nop.w
 8015b30:	00000000 	.word	0x00000000
 8015b34:	c3500000 	.word	0xc3500000
	...
 8015b44:	43500000 	.word	0x43500000
 8015b48:	1526e50e 	.word	0x1526e50e
 8015b4c:	3fdbcb7b 	.word	0x3fdbcb7b
 8015b50:	11f12b36 	.word	0x11f12b36
 8015b54:	3d59fef3 	.word	0x3d59fef3
 8015b58:	509f6000 	.word	0x509f6000
 8015b5c:	3fd34413 	.word	0x3fd34413
 8015b60:	7fefffff 	.word	0x7fefffff
 8015b64:	00000000 	.word	0x00000000

08015b68 <__ieee754_rem_pio2>:
 8015b68:	b570      	push	{r4, r5, r6, lr}
 8015b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8015b6e:	ee17 5a90 	vmov	r5, s15
 8015b72:	4b99      	ldr	r3, [pc, #612]	@ (8015dd8 <__ieee754_rem_pio2+0x270>)
 8015b74:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015b78:	429e      	cmp	r6, r3
 8015b7a:	b088      	sub	sp, #32
 8015b7c:	4604      	mov	r4, r0
 8015b7e:	d807      	bhi.n	8015b90 <__ieee754_rem_pio2+0x28>
 8015b80:	2200      	movs	r2, #0
 8015b82:	2300      	movs	r3, #0
 8015b84:	ed84 0b00 	vstr	d0, [r4]
 8015b88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015b8c:	2000      	movs	r0, #0
 8015b8e:	e01b      	b.n	8015bc8 <__ieee754_rem_pio2+0x60>
 8015b90:	4b92      	ldr	r3, [pc, #584]	@ (8015ddc <__ieee754_rem_pio2+0x274>)
 8015b92:	429e      	cmp	r6, r3
 8015b94:	d83b      	bhi.n	8015c0e <__ieee754_rem_pio2+0xa6>
 8015b96:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8015b9a:	2d00      	cmp	r5, #0
 8015b9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8015d98 <__ieee754_rem_pio2+0x230>
 8015ba0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8015ba4:	dd19      	ble.n	8015bda <__ieee754_rem_pio2+0x72>
 8015ba6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015baa:	429e      	cmp	r6, r3
 8015bac:	d00e      	beq.n	8015bcc <__ieee754_rem_pio2+0x64>
 8015bae:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8015da0 <__ieee754_rem_pio2+0x238>
 8015bb2:	ee37 6b45 	vsub.f64	d6, d7, d5
 8015bb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015bba:	ed84 6b00 	vstr	d6, [r4]
 8015bbe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015bc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015bc6:	2001      	movs	r0, #1
 8015bc8:	b008      	add	sp, #32
 8015bca:	bd70      	pop	{r4, r5, r6, pc}
 8015bcc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015da8 <__ieee754_rem_pio2+0x240>
 8015bd0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8015db0 <__ieee754_rem_pio2+0x248>
 8015bd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015bd8:	e7eb      	b.n	8015bb2 <__ieee754_rem_pio2+0x4a>
 8015bda:	429e      	cmp	r6, r3
 8015bdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015be0:	d00e      	beq.n	8015c00 <__ieee754_rem_pio2+0x98>
 8015be2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8015da0 <__ieee754_rem_pio2+0x238>
 8015be6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015bea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015bee:	ed84 6b00 	vstr	d6, [r4]
 8015bf2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bfa:	ed84 7b02 	vstr	d7, [r4, #8]
 8015bfe:	e7e3      	b.n	8015bc8 <__ieee754_rem_pio2+0x60>
 8015c00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8015da8 <__ieee754_rem_pio2+0x240>
 8015c04:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8015db0 <__ieee754_rem_pio2+0x248>
 8015c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015c0c:	e7eb      	b.n	8015be6 <__ieee754_rem_pio2+0x7e>
 8015c0e:	4b74      	ldr	r3, [pc, #464]	@ (8015de0 <__ieee754_rem_pio2+0x278>)
 8015c10:	429e      	cmp	r6, r3
 8015c12:	d870      	bhi.n	8015cf6 <__ieee754_rem_pio2+0x18e>
 8015c14:	f000 f8ec 	bl	8015df0 <fabs>
 8015c18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015c1c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015db8 <__ieee754_rem_pio2+0x250>
 8015c20:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015c24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015c28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015c2c:	ee17 0a90 	vmov	r0, s15
 8015c30:	eeb1 4b45 	vneg.f64	d4, d5
 8015c34:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015d98 <__ieee754_rem_pio2+0x230>
 8015c38:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015c3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015da0 <__ieee754_rem_pio2+0x238>
 8015c40:	281f      	cmp	r0, #31
 8015c42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015c46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015c4a:	dc05      	bgt.n	8015c58 <__ieee754_rem_pio2+0xf0>
 8015c4c:	4b65      	ldr	r3, [pc, #404]	@ (8015de4 <__ieee754_rem_pio2+0x27c>)
 8015c4e:	1e42      	subs	r2, r0, #1
 8015c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c54:	42b3      	cmp	r3, r6
 8015c56:	d109      	bne.n	8015c6c <__ieee754_rem_pio2+0x104>
 8015c58:	ee16 3a90 	vmov	r3, s13
 8015c5c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015c60:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015c64:	2b10      	cmp	r3, #16
 8015c66:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015c6a:	dc02      	bgt.n	8015c72 <__ieee754_rem_pio2+0x10a>
 8015c6c:	ed84 6b00 	vstr	d6, [r4]
 8015c70:	e01a      	b.n	8015ca8 <__ieee754_rem_pio2+0x140>
 8015c72:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8015da8 <__ieee754_rem_pio2+0x240>
 8015c76:	eeb0 6b40 	vmov.f64	d6, d0
 8015c7a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8015c7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015c82:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015c86:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8015db0 <__ieee754_rem_pio2+0x248>
 8015c8a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015c8e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015c92:	ee13 3a90 	vmov	r3, s7
 8015c96:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	2b31      	cmp	r3, #49	@ 0x31
 8015c9e:	dc17      	bgt.n	8015cd0 <__ieee754_rem_pio2+0x168>
 8015ca0:	eeb0 0b46 	vmov.f64	d0, d6
 8015ca4:	ed84 3b00 	vstr	d3, [r4]
 8015ca8:	ed94 6b00 	vldr	d6, [r4]
 8015cac:	2d00      	cmp	r5, #0
 8015cae:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015cb2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015cb6:	ed84 0b02 	vstr	d0, [r4, #8]
 8015cba:	da85      	bge.n	8015bc8 <__ieee754_rem_pio2+0x60>
 8015cbc:	eeb1 6b46 	vneg.f64	d6, d6
 8015cc0:	eeb1 0b40 	vneg.f64	d0, d0
 8015cc4:	ed84 6b00 	vstr	d6, [r4]
 8015cc8:	ed84 0b02 	vstr	d0, [r4, #8]
 8015ccc:	4240      	negs	r0, r0
 8015cce:	e77b      	b.n	8015bc8 <__ieee754_rem_pio2+0x60>
 8015cd0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8015dc0 <__ieee754_rem_pio2+0x258>
 8015cd4:	eeb0 0b46 	vmov.f64	d0, d6
 8015cd8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015cdc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8015ce0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015ce4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8015dc8 <__ieee754_rem_pio2+0x260>
 8015ce8:	eeb0 7b46 	vmov.f64	d7, d6
 8015cec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8015cf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015cf4:	e7ba      	b.n	8015c6c <__ieee754_rem_pio2+0x104>
 8015cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8015de8 <__ieee754_rem_pio2+0x280>)
 8015cf8:	429e      	cmp	r6, r3
 8015cfa:	d906      	bls.n	8015d0a <__ieee754_rem_pio2+0x1a2>
 8015cfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015d00:	ed80 7b02 	vstr	d7, [r0, #8]
 8015d04:	ed80 7b00 	vstr	d7, [r0]
 8015d08:	e740      	b.n	8015b8c <__ieee754_rem_pio2+0x24>
 8015d0a:	ee10 3a10 	vmov	r3, s0
 8015d0e:	1532      	asrs	r2, r6, #20
 8015d10:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8015d14:	4618      	mov	r0, r3
 8015d16:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015d1a:	ec41 0b17 	vmov	d7, r0, r1
 8015d1e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015d22:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8015dd0 <__ieee754_rem_pio2+0x268>
 8015d26:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015d2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d2e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015d32:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015d36:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015d3a:	a808      	add	r0, sp, #32
 8015d3c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015d40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d44:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015d48:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015d4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015d50:	2103      	movs	r1, #3
 8015d52:	ed30 7b02 	vldmdb	r0!, {d7}
 8015d56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5e:	460b      	mov	r3, r1
 8015d60:	f101 31ff 	add.w	r1, r1, #4294967295
 8015d64:	d0f5      	beq.n	8015d52 <__ieee754_rem_pio2+0x1ea>
 8015d66:	4921      	ldr	r1, [pc, #132]	@ (8015dec <__ieee754_rem_pio2+0x284>)
 8015d68:	9101      	str	r1, [sp, #4]
 8015d6a:	2102      	movs	r1, #2
 8015d6c:	9100      	str	r1, [sp, #0]
 8015d6e:	a802      	add	r0, sp, #8
 8015d70:	4621      	mov	r1, r4
 8015d72:	f000 f9ad 	bl	80160d0 <__kernel_rem_pio2>
 8015d76:	2d00      	cmp	r5, #0
 8015d78:	f6bf af26 	bge.w	8015bc8 <__ieee754_rem_pio2+0x60>
 8015d7c:	ed94 7b00 	vldr	d7, [r4]
 8015d80:	eeb1 7b47 	vneg.f64	d7, d7
 8015d84:	ed84 7b00 	vstr	d7, [r4]
 8015d88:	ed94 7b02 	vldr	d7, [r4, #8]
 8015d8c:	eeb1 7b47 	vneg.f64	d7, d7
 8015d90:	ed84 7b02 	vstr	d7, [r4, #8]
 8015d94:	e79a      	b.n	8015ccc <__ieee754_rem_pio2+0x164>
 8015d96:	bf00      	nop
 8015d98:	54400000 	.word	0x54400000
 8015d9c:	3ff921fb 	.word	0x3ff921fb
 8015da0:	1a626331 	.word	0x1a626331
 8015da4:	3dd0b461 	.word	0x3dd0b461
 8015da8:	1a600000 	.word	0x1a600000
 8015dac:	3dd0b461 	.word	0x3dd0b461
 8015db0:	2e037073 	.word	0x2e037073
 8015db4:	3ba3198a 	.word	0x3ba3198a
 8015db8:	6dc9c883 	.word	0x6dc9c883
 8015dbc:	3fe45f30 	.word	0x3fe45f30
 8015dc0:	2e000000 	.word	0x2e000000
 8015dc4:	3ba3198a 	.word	0x3ba3198a
 8015dc8:	252049c1 	.word	0x252049c1
 8015dcc:	397b839a 	.word	0x397b839a
 8015dd0:	00000000 	.word	0x00000000
 8015dd4:	41700000 	.word	0x41700000
 8015dd8:	3fe921fb 	.word	0x3fe921fb
 8015ddc:	4002d97b 	.word	0x4002d97b
 8015de0:	413921fb 	.word	0x413921fb
 8015de4:	08044c28 	.word	0x08044c28
 8015de8:	7fefffff 	.word	0x7fefffff
 8015dec:	08044ca8 	.word	0x08044ca8

08015df0 <fabs>:
 8015df0:	ec51 0b10 	vmov	r0, r1, d0
 8015df4:	4602      	mov	r2, r0
 8015df6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015dfa:	ec43 2b10 	vmov	d0, r2, r3
 8015dfe:	4770      	bx	lr

08015e00 <with_errno>:
 8015e00:	b510      	push	{r4, lr}
 8015e02:	ed2d 8b02 	vpush	{d8}
 8015e06:	eeb0 8b40 	vmov.f64	d8, d0
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	f7fe f988 	bl	8014120 <__errno>
 8015e10:	eeb0 0b48 	vmov.f64	d0, d8
 8015e14:	ecbd 8b02 	vpop	{d8}
 8015e18:	6004      	str	r4, [r0, #0]
 8015e1a:	bd10      	pop	{r4, pc}

08015e1c <xflow>:
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	b158      	cbz	r0, 8015e38 <xflow+0x1c>
 8015e20:	eeb1 7b40 	vneg.f64	d7, d0
 8015e24:	ed8d 7b00 	vstr	d7, [sp]
 8015e28:	ed9d 7b00 	vldr	d7, [sp]
 8015e2c:	2022      	movs	r0, #34	@ 0x22
 8015e2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015e32:	b002      	add	sp, #8
 8015e34:	f7ff bfe4 	b.w	8015e00 <with_errno>
 8015e38:	eeb0 7b40 	vmov.f64	d7, d0
 8015e3c:	e7f2      	b.n	8015e24 <xflow+0x8>
	...

08015e40 <__math_uflow>:
 8015e40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015e48 <__math_uflow+0x8>
 8015e44:	f7ff bfea 	b.w	8015e1c <xflow>
 8015e48:	00000000 	.word	0x00000000
 8015e4c:	10000000 	.word	0x10000000

08015e50 <__math_oflow>:
 8015e50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015e58 <__math_oflow+0x8>
 8015e54:	f7ff bfe2 	b.w	8015e1c <xflow>
 8015e58:	00000000 	.word	0x00000000
 8015e5c:	70000000 	.word	0x70000000

08015e60 <__math_divzero>:
 8015e60:	b082      	sub	sp, #8
 8015e62:	2800      	cmp	r0, #0
 8015e64:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8015e68:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8015e6c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8015e70:	ed8d 7b00 	vstr	d7, [sp]
 8015e74:	ed9d 0b00 	vldr	d0, [sp]
 8015e78:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8015e88 <__math_divzero+0x28>
 8015e7c:	2022      	movs	r0, #34	@ 0x22
 8015e7e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015e82:	b002      	add	sp, #8
 8015e84:	f7ff bfbc 	b.w	8015e00 <with_errno>
	...

08015e90 <__math_invalid>:
 8015e90:	eeb0 7b40 	vmov.f64	d7, d0
 8015e94:	eeb4 7b47 	vcmp.f64	d7, d7
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8015ea0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8015ea4:	d602      	bvs.n	8015eac <__math_invalid+0x1c>
 8015ea6:	2021      	movs	r0, #33	@ 0x21
 8015ea8:	f7ff bfaa 	b.w	8015e00 <with_errno>
 8015eac:	4770      	bx	lr

08015eae <__math_check_uflow>:
 8015eae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	d102      	bne.n	8015ebe <__math_check_uflow+0x10>
 8015eb8:	2022      	movs	r0, #34	@ 0x22
 8015eba:	f7ff bfa1 	b.w	8015e00 <with_errno>
 8015ebe:	4770      	bx	lr

08015ec0 <__math_check_oflow>:
 8015ec0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8015ee0 <__math_check_oflow+0x20>
 8015ec4:	eeb0 7bc0 	vabs.f64	d7, d0
 8015ec8:	eeb4 7b46 	vcmp.f64	d7, d6
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	dd02      	ble.n	8015ed8 <__math_check_oflow+0x18>
 8015ed2:	2022      	movs	r0, #34	@ 0x22
 8015ed4:	f7ff bf94 	b.w	8015e00 <with_errno>
 8015ed8:	4770      	bx	lr
 8015eda:	bf00      	nop
 8015edc:	f3af 8000 	nop.w
 8015ee0:	ffffffff 	.word	0xffffffff
 8015ee4:	7fefffff 	.word	0x7fefffff

08015ee8 <log>:
 8015ee8:	b4f0      	push	{r4, r5, r6, r7}
 8015eea:	ee10 0a90 	vmov	r0, s1
 8015eee:	ee10 3a10 	vmov	r3, s0
 8015ef2:	f04f 34ff 	mov.w	r4, #4294967295
 8015ef6:	429c      	cmp	r4, r3
 8015ef8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8015efc:	4c70      	ldr	r4, [pc, #448]	@ (80160c0 <log+0x1d8>)
 8015efe:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8015f02:	418c      	sbcs	r4, r1
 8015f04:	ed2d 8b02 	vpush	{d8}
 8015f08:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8015f0c:	d35a      	bcc.n	8015fc4 <log+0xdc>
 8015f0e:	4a6d      	ldr	r2, [pc, #436]	@ (80160c4 <log+0x1dc>)
 8015f10:	4290      	cmp	r0, r2
 8015f12:	bf08      	it	eq
 8015f14:	2b00      	cmpeq	r3, #0
 8015f16:	f000 80c4 	beq.w	80160a2 <log+0x1ba>
 8015f1a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8015f1e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015f22:	4b69      	ldr	r3, [pc, #420]	@ (80160c8 <log+0x1e0>)
 8015f24:	ee20 2b00 	vmul.f64	d2, d0, d0
 8015f28:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8015f2c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8015f30:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8015f34:	eea6 7b00 	vfma.f64	d7, d6, d0
 8015f38:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8015f3c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8015f40:	eea6 7b02 	vfma.f64	d7, d6, d2
 8015f44:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8015f48:	eea5 6b00 	vfma.f64	d6, d5, d0
 8015f4c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8015f50:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8015f54:	eea5 6b02 	vfma.f64	d6, d5, d2
 8015f58:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8015f5c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8015f60:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8015f64:	eea3 5b02 	vfma.f64	d5, d3, d2
 8015f68:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8015f6c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8015f70:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015f74:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8015f78:	eea6 7b04 	vfma.f64	d7, d6, d4
 8015f7c:	eeb0 2b47 	vmov.f64	d2, d7
 8015f80:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80160a8 <log+0x1c0>
 8015f84:	eeb0 6b40 	vmov.f64	d6, d0
 8015f88:	eeb0 3b40 	vmov.f64	d3, d0
 8015f8c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8015f90:	eea0 6b47 	vfms.f64	d6, d0, d7
 8015f94:	ee30 8b46 	vsub.f64	d8, d0, d6
 8015f98:	ee26 1b06 	vmul.f64	d1, d6, d6
 8015f9c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8015fa0:	ee30 7b43 	vsub.f64	d7, d0, d3
 8015fa4:	ee30 0b06 	vadd.f64	d0, d0, d6
 8015fa8:	eea1 7b05 	vfma.f64	d7, d1, d5
 8015fac:	ee25 5b08 	vmul.f64	d5, d5, d8
 8015fb0:	eea5 7b00 	vfma.f64	d7, d5, d0
 8015fb4:	eea2 7b04 	vfma.f64	d7, d2, d4
 8015fb8:	ee33 0b07 	vadd.f64	d0, d3, d7
 8015fbc:	ecbd 8b02 	vpop	{d8}
 8015fc0:	bcf0      	pop	{r4, r5, r6, r7}
 8015fc2:	4770      	bx	lr
 8015fc4:	f1a2 0410 	sub.w	r4, r2, #16
 8015fc8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8015fcc:	428c      	cmp	r4, r1
 8015fce:	d923      	bls.n	8016018 <log+0x130>
 8015fd0:	18d9      	adds	r1, r3, r3
 8015fd2:	eb40 0400 	adc.w	r4, r0, r0
 8015fd6:	4321      	orrs	r1, r4
 8015fd8:	d105      	bne.n	8015fe6 <log+0xfe>
 8015fda:	ecbd 8b02 	vpop	{d8}
 8015fde:	2001      	movs	r0, #1
 8015fe0:	bcf0      	pop	{r4, r5, r6, r7}
 8015fe2:	f7ff bf3d 	b.w	8015e60 <__math_divzero>
 8015fe6:	4939      	ldr	r1, [pc, #228]	@ (80160cc <log+0x1e4>)
 8015fe8:	4288      	cmp	r0, r1
 8015fea:	bf08      	it	eq
 8015fec:	2b00      	cmpeq	r3, #0
 8015fee:	d0e5      	beq.n	8015fbc <log+0xd4>
 8015ff0:	0413      	lsls	r3, r2, #16
 8015ff2:	d403      	bmi.n	8015ffc <log+0x114>
 8015ff4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8015ff8:	4393      	bics	r3, r2
 8015ffa:	d104      	bne.n	8016006 <log+0x11e>
 8015ffc:	ecbd 8b02 	vpop	{d8}
 8016000:	bcf0      	pop	{r4, r5, r6, r7}
 8016002:	f7ff bf45 	b.w	8015e90 <__math_invalid>
 8016006:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80160b0 <log+0x1c8>
 801600a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801600e:	ec53 2b17 	vmov	r2, r3, d7
 8016012:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8016016:	4613      	mov	r3, r2
 8016018:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 801601c:	492a      	ldr	r1, [pc, #168]	@ (80160c8 <log+0x1e0>)
 801601e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8016022:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8016026:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801602a:	0d15      	lsrs	r5, r2, #20
 801602c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8016030:	052d      	lsls	r5, r5, #20
 8016032:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8016036:	1e1e      	subs	r6, r3, #0
 8016038:	1b47      	subs	r7, r0, r5
 801603a:	ec47 6b16 	vmov	d6, r6, r7
 801603e:	1512      	asrs	r2, r2, #20
 8016040:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016044:	ee07 2a90 	vmov	s15, r2
 8016048:	ee25 2b05 	vmul.f64	d2, d5, d5
 801604c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8016050:	ed91 4b00 	vldr	d4, [r1]
 8016054:	ee25 1b02 	vmul.f64	d1, d5, d2
 8016058:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801605c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016060:	ee35 4b07 	vadd.f64	d4, d5, d7
 8016064:	ee37 0b44 	vsub.f64	d0, d7, d4
 8016068:	ed91 7b02 	vldr	d7, [r1, #8]
 801606c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8016070:	eea7 0b06 	vfma.f64	d0, d7, d6
 8016074:	ed91 7b04 	vldr	d7, [r1, #16]
 8016078:	ed91 6b08 	vldr	d6, [r1, #32]
 801607c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8016080:	ed91 7b06 	vldr	d7, [r1, #24]
 8016084:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8016088:	eea6 7b05 	vfma.f64	d7, d6, d5
 801608c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8016090:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016094:	eea6 7b02 	vfma.f64	d7, d6, d2
 8016098:	eea1 0b07 	vfma.f64	d0, d1, d7
 801609c:	ee30 0b04 	vadd.f64	d0, d0, d4
 80160a0:	e78c      	b.n	8015fbc <log+0xd4>
 80160a2:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80160b8 <log+0x1d0>
 80160a6:	e789      	b.n	8015fbc <log+0xd4>
 80160a8:	00000000 	.word	0x00000000
 80160ac:	41a00000 	.word	0x41a00000
 80160b0:	00000000 	.word	0x00000000
 80160b4:	43300000 	.word	0x43300000
	...
 80160c0:	000308ff 	.word	0x000308ff
 80160c4:	3ff00000 	.word	0x3ff00000
 80160c8:	08045620 	.word	0x08045620
 80160cc:	7ff00000 	.word	0x7ff00000

080160d0 <__kernel_rem_pio2>:
 80160d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d4:	ed2d 8b06 	vpush	{d8-d10}
 80160d8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80160dc:	469b      	mov	fp, r3
 80160de:	9001      	str	r0, [sp, #4]
 80160e0:	4bbb      	ldr	r3, [pc, #748]	@ (80163d0 <__kernel_rem_pio2+0x300>)
 80160e2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80160e4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80160e8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80160ec:	f112 0f14 	cmn.w	r2, #20
 80160f0:	bfa8      	it	ge
 80160f2:	1ed3      	subge	r3, r2, #3
 80160f4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80160f8:	bfb8      	it	lt
 80160fa:	2300      	movlt	r3, #0
 80160fc:	f06f 0517 	mvn.w	r5, #23
 8016100:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80163b8 <__kernel_rem_pio2+0x2e8>
 8016104:	bfa4      	itt	ge
 8016106:	2018      	movge	r0, #24
 8016108:	fb93 f3f0 	sdivge	r3, r3, r0
 801610c:	fb03 5505 	mla	r5, r3, r5, r5
 8016110:	eba3 040a 	sub.w	r4, r3, sl
 8016114:	4415      	add	r5, r2
 8016116:	460f      	mov	r7, r1
 8016118:	eb09 060a 	add.w	r6, r9, sl
 801611c:	a81a      	add	r0, sp, #104	@ 0x68
 801611e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8016122:	2200      	movs	r2, #0
 8016124:	42b2      	cmp	r2, r6
 8016126:	dd0e      	ble.n	8016146 <__kernel_rem_pio2+0x76>
 8016128:	aa1a      	add	r2, sp, #104	@ 0x68
 801612a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801612e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8016132:	2600      	movs	r6, #0
 8016134:	454e      	cmp	r6, r9
 8016136:	dc25      	bgt.n	8016184 <__kernel_rem_pio2+0xb4>
 8016138:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80163b8 <__kernel_rem_pio2+0x2e8>
 801613c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016140:	4614      	mov	r4, r2
 8016142:	2000      	movs	r0, #0
 8016144:	e015      	b.n	8016172 <__kernel_rem_pio2+0xa2>
 8016146:	42d4      	cmn	r4, r2
 8016148:	d409      	bmi.n	801615e <__kernel_rem_pio2+0x8e>
 801614a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801614e:	ee07 1a90 	vmov	s15, r1
 8016152:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016156:	eca0 7b02 	vstmia	r0!, {d7}
 801615a:	3201      	adds	r2, #1
 801615c:	e7e2      	b.n	8016124 <__kernel_rem_pio2+0x54>
 801615e:	eeb0 7b46 	vmov.f64	d7, d6
 8016162:	e7f8      	b.n	8016156 <__kernel_rem_pio2+0x86>
 8016164:	ecbc 5b02 	vldmia	ip!, {d5}
 8016168:	ed94 6b00 	vldr	d6, [r4]
 801616c:	3001      	adds	r0, #1
 801616e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016172:	4550      	cmp	r0, sl
 8016174:	f1a4 0408 	sub.w	r4, r4, #8
 8016178:	ddf4      	ble.n	8016164 <__kernel_rem_pio2+0x94>
 801617a:	ecae 7b02 	vstmia	lr!, {d7}
 801617e:	3601      	adds	r6, #1
 8016180:	3208      	adds	r2, #8
 8016182:	e7d7      	b.n	8016134 <__kernel_rem_pio2+0x64>
 8016184:	aa06      	add	r2, sp, #24
 8016186:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80163c0 <__kernel_rem_pio2+0x2f0>
 801618a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80163c8 <__kernel_rem_pio2+0x2f8>
 801618e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8016192:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8016196:	9203      	str	r2, [sp, #12]
 8016198:	9302      	str	r3, [sp, #8]
 801619a:	464c      	mov	r4, r9
 801619c:	00e3      	lsls	r3, r4, #3
 801619e:	9304      	str	r3, [sp, #16]
 80161a0:	ab92      	add	r3, sp, #584	@ 0x248
 80161a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80161a6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80161aa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80161ac:	ab06      	add	r3, sp, #24
 80161ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80161b2:	461e      	mov	r6, r3
 80161b4:	4620      	mov	r0, r4
 80161b6:	2800      	cmp	r0, #0
 80161b8:	f1a2 0208 	sub.w	r2, r2, #8
 80161bc:	dc4a      	bgt.n	8016254 <__kernel_rem_pio2+0x184>
 80161be:	4628      	mov	r0, r5
 80161c0:	9305      	str	r3, [sp, #20]
 80161c2:	f000 fa01 	bl	80165c8 <scalbn>
 80161c6:	eeb0 8b40 	vmov.f64	d8, d0
 80161ca:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80161ce:	ee28 0b00 	vmul.f64	d0, d8, d0
 80161d2:	f000 fa79 	bl	80166c8 <floor>
 80161d6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80161da:	eea0 8b47 	vfms.f64	d8, d0, d7
 80161de:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80161e2:	2d00      	cmp	r5, #0
 80161e4:	ee17 8a90 	vmov	r8, s15
 80161e8:	9b05      	ldr	r3, [sp, #20]
 80161ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80161ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80161f2:	dd41      	ble.n	8016278 <__kernel_rem_pio2+0x1a8>
 80161f4:	1e60      	subs	r0, r4, #1
 80161f6:	aa06      	add	r2, sp, #24
 80161f8:	f1c5 0c18 	rsb	ip, r5, #24
 80161fc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8016200:	fa46 f20c 	asr.w	r2, r6, ip
 8016204:	4490      	add	r8, r2
 8016206:	fa02 f20c 	lsl.w	r2, r2, ip
 801620a:	1ab6      	subs	r6, r6, r2
 801620c:	aa06      	add	r2, sp, #24
 801620e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8016212:	f1c5 0217 	rsb	r2, r5, #23
 8016216:	4116      	asrs	r6, r2
 8016218:	2e00      	cmp	r6, #0
 801621a:	dd3c      	ble.n	8016296 <__kernel_rem_pio2+0x1c6>
 801621c:	f04f 0c00 	mov.w	ip, #0
 8016220:	f108 0801 	add.w	r8, r8, #1
 8016224:	4660      	mov	r0, ip
 8016226:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801622a:	4564      	cmp	r4, ip
 801622c:	dc66      	bgt.n	80162fc <__kernel_rem_pio2+0x22c>
 801622e:	2d00      	cmp	r5, #0
 8016230:	dd03      	ble.n	801623a <__kernel_rem_pio2+0x16a>
 8016232:	2d01      	cmp	r5, #1
 8016234:	d072      	beq.n	801631c <__kernel_rem_pio2+0x24c>
 8016236:	2d02      	cmp	r5, #2
 8016238:	d07a      	beq.n	8016330 <__kernel_rem_pio2+0x260>
 801623a:	2e02      	cmp	r6, #2
 801623c:	d12b      	bne.n	8016296 <__kernel_rem_pio2+0x1c6>
 801623e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016242:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016246:	b330      	cbz	r0, 8016296 <__kernel_rem_pio2+0x1c6>
 8016248:	4628      	mov	r0, r5
 801624a:	f000 f9bd 	bl	80165c8 <scalbn>
 801624e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016252:	e020      	b.n	8016296 <__kernel_rem_pio2+0x1c6>
 8016254:	ee20 7b09 	vmul.f64	d7, d0, d9
 8016258:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801625c:	3801      	subs	r0, #1
 801625e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016262:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016266:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801626a:	eca6 0a01 	vstmia	r6!, {s0}
 801626e:	ed92 0b00 	vldr	d0, [r2]
 8016272:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016276:	e79e      	b.n	80161b6 <__kernel_rem_pio2+0xe6>
 8016278:	d105      	bne.n	8016286 <__kernel_rem_pio2+0x1b6>
 801627a:	1e62      	subs	r2, r4, #1
 801627c:	a906      	add	r1, sp, #24
 801627e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8016282:	15f6      	asrs	r6, r6, #23
 8016284:	e7c8      	b.n	8016218 <__kernel_rem_pio2+0x148>
 8016286:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801628a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016292:	da31      	bge.n	80162f8 <__kernel_rem_pio2+0x228>
 8016294:	2600      	movs	r6, #0
 8016296:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629e:	f040 809b 	bne.w	80163d8 <__kernel_rem_pio2+0x308>
 80162a2:	1e62      	subs	r2, r4, #1
 80162a4:	2000      	movs	r0, #0
 80162a6:	454a      	cmp	r2, r9
 80162a8:	da49      	bge.n	801633e <__kernel_rem_pio2+0x26e>
 80162aa:	2800      	cmp	r0, #0
 80162ac:	d062      	beq.n	8016374 <__kernel_rem_pio2+0x2a4>
 80162ae:	3c01      	subs	r4, #1
 80162b0:	ab06      	add	r3, sp, #24
 80162b2:	3d18      	subs	r5, #24
 80162b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d0f8      	beq.n	80162ae <__kernel_rem_pio2+0x1de>
 80162bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80162c0:	4628      	mov	r0, r5
 80162c2:	f000 f981 	bl	80165c8 <scalbn>
 80162c6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80163c0 <__kernel_rem_pio2+0x2f0>
 80162ca:	1c62      	adds	r2, r4, #1
 80162cc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80162ce:	00d3      	lsls	r3, r2, #3
 80162d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80162d4:	4622      	mov	r2, r4
 80162d6:	2a00      	cmp	r2, #0
 80162d8:	f280 80a8 	bge.w	801642c <__kernel_rem_pio2+0x35c>
 80162dc:	4622      	mov	r2, r4
 80162de:	2a00      	cmp	r2, #0
 80162e0:	f2c0 80c6 	blt.w	8016470 <__kernel_rem_pio2+0x3a0>
 80162e4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80162e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80162ea:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80163b8 <__kernel_rem_pio2+0x2e8>
 80162ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80163d4 <__kernel_rem_pio2+0x304>
 80162f2:	2000      	movs	r0, #0
 80162f4:	1aa1      	subs	r1, r4, r2
 80162f6:	e0b0      	b.n	801645a <__kernel_rem_pio2+0x38a>
 80162f8:	2602      	movs	r6, #2
 80162fa:	e78f      	b.n	801621c <__kernel_rem_pio2+0x14c>
 80162fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016300:	b948      	cbnz	r0, 8016316 <__kernel_rem_pio2+0x246>
 8016302:	b122      	cbz	r2, 801630e <__kernel_rem_pio2+0x23e>
 8016304:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8016308:	f843 2c04 	str.w	r2, [r3, #-4]
 801630c:	2201      	movs	r2, #1
 801630e:	f10c 0c01 	add.w	ip, ip, #1
 8016312:	4610      	mov	r0, r2
 8016314:	e789      	b.n	801622a <__kernel_rem_pio2+0x15a>
 8016316:	ebae 0202 	sub.w	r2, lr, r2
 801631a:	e7f5      	b.n	8016308 <__kernel_rem_pio2+0x238>
 801631c:	1e62      	subs	r2, r4, #1
 801631e:	ab06      	add	r3, sp, #24
 8016320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016324:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016328:	a906      	add	r1, sp, #24
 801632a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801632e:	e784      	b.n	801623a <__kernel_rem_pio2+0x16a>
 8016330:	1e62      	subs	r2, r4, #1
 8016332:	ab06      	add	r3, sp, #24
 8016334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016338:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801633c:	e7f4      	b.n	8016328 <__kernel_rem_pio2+0x258>
 801633e:	ab06      	add	r3, sp, #24
 8016340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016344:	3a01      	subs	r2, #1
 8016346:	4318      	orrs	r0, r3
 8016348:	e7ad      	b.n	80162a6 <__kernel_rem_pio2+0x1d6>
 801634a:	3301      	adds	r3, #1
 801634c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8016350:	2800      	cmp	r0, #0
 8016352:	d0fa      	beq.n	801634a <__kernel_rem_pio2+0x27a>
 8016354:	9a04      	ldr	r2, [sp, #16]
 8016356:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801635a:	446a      	add	r2, sp
 801635c:	eb04 000b 	add.w	r0, r4, fp
 8016360:	a91a      	add	r1, sp, #104	@ 0x68
 8016362:	1c66      	adds	r6, r4, #1
 8016364:	3a98      	subs	r2, #152	@ 0x98
 8016366:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801636a:	4423      	add	r3, r4
 801636c:	42b3      	cmp	r3, r6
 801636e:	da04      	bge.n	801637a <__kernel_rem_pio2+0x2aa>
 8016370:	461c      	mov	r4, r3
 8016372:	e713      	b.n	801619c <__kernel_rem_pio2+0xcc>
 8016374:	9a03      	ldr	r2, [sp, #12]
 8016376:	2301      	movs	r3, #1
 8016378:	e7e8      	b.n	801634c <__kernel_rem_pio2+0x27c>
 801637a:	9902      	ldr	r1, [sp, #8]
 801637c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016380:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8016384:	9104      	str	r1, [sp, #16]
 8016386:	ee07 1a90 	vmov	s15, r1
 801638a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801638e:	2400      	movs	r4, #0
 8016390:	eca0 7b02 	vstmia	r0!, {d7}
 8016394:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80163b8 <__kernel_rem_pio2+0x2e8>
 8016398:	4686      	mov	lr, r0
 801639a:	4554      	cmp	r4, sl
 801639c:	dd03      	ble.n	80163a6 <__kernel_rem_pio2+0x2d6>
 801639e:	eca2 7b02 	vstmia	r2!, {d7}
 80163a2:	3601      	adds	r6, #1
 80163a4:	e7e2      	b.n	801636c <__kernel_rem_pio2+0x29c>
 80163a6:	ecbc 5b02 	vldmia	ip!, {d5}
 80163aa:	ed3e 6b02 	vldmdb	lr!, {d6}
 80163ae:	3401      	adds	r4, #1
 80163b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80163b4:	e7f1      	b.n	801639a <__kernel_rem_pio2+0x2ca>
 80163b6:	bf00      	nop
	...
 80163c4:	3e700000 	.word	0x3e700000
 80163c8:	00000000 	.word	0x00000000
 80163cc:	41700000 	.word	0x41700000
 80163d0:	08045ef0 	.word	0x08045ef0
 80163d4:	08045eb0 	.word	0x08045eb0
 80163d8:	4268      	negs	r0, r5
 80163da:	eeb0 0b48 	vmov.f64	d0, d8
 80163de:	f000 f8f3 	bl	80165c8 <scalbn>
 80163e2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80165b0 <__kernel_rem_pio2+0x4e0>
 80163e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80163ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ee:	db17      	blt.n	8016420 <__kernel_rem_pio2+0x350>
 80163f0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80165b8 <__kernel_rem_pio2+0x4e8>
 80163f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80163f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80163fc:	aa06      	add	r2, sp, #24
 80163fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016402:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016406:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801640a:	3518      	adds	r5, #24
 801640c:	ee10 3a10 	vmov	r3, s0
 8016410:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016414:	ee17 3a10 	vmov	r3, s14
 8016418:	3401      	adds	r4, #1
 801641a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801641e:	e74d      	b.n	80162bc <__kernel_rem_pio2+0x1ec>
 8016420:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016424:	aa06      	add	r2, sp, #24
 8016426:	ee10 3a10 	vmov	r3, s0
 801642a:	e7f6      	b.n	801641a <__kernel_rem_pio2+0x34a>
 801642c:	a806      	add	r0, sp, #24
 801642e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016432:	9001      	str	r0, [sp, #4]
 8016434:	ee07 0a90 	vmov	s15, r0
 8016438:	3a01      	subs	r2, #1
 801643a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801643e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016442:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016446:	ed21 7b02 	vstmdb	r1!, {d7}
 801644a:	e744      	b.n	80162d6 <__kernel_rem_pio2+0x206>
 801644c:	ecbc 5b02 	vldmia	ip!, {d5}
 8016450:	ecb5 6b02 	vldmia	r5!, {d6}
 8016454:	3001      	adds	r0, #1
 8016456:	eea5 7b06 	vfma.f64	d7, d5, d6
 801645a:	4548      	cmp	r0, r9
 801645c:	dc01      	bgt.n	8016462 <__kernel_rem_pio2+0x392>
 801645e:	4281      	cmp	r1, r0
 8016460:	daf4      	bge.n	801644c <__kernel_rem_pio2+0x37c>
 8016462:	a842      	add	r0, sp, #264	@ 0x108
 8016464:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016468:	ed81 7b00 	vstr	d7, [r1]
 801646c:	3a01      	subs	r2, #1
 801646e:	e736      	b.n	80162de <__kernel_rem_pio2+0x20e>
 8016470:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8016472:	2a02      	cmp	r2, #2
 8016474:	dc0a      	bgt.n	801648c <__kernel_rem_pio2+0x3bc>
 8016476:	2a00      	cmp	r2, #0
 8016478:	dc2d      	bgt.n	80164d6 <__kernel_rem_pio2+0x406>
 801647a:	d046      	beq.n	801650a <__kernel_rem_pio2+0x43a>
 801647c:	f008 0007 	and.w	r0, r8, #7
 8016480:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8016484:	ecbd 8b06 	vpop	{d8-d10}
 8016488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801648e:	2a03      	cmp	r2, #3
 8016490:	d1f4      	bne.n	801647c <__kernel_rem_pio2+0x3ac>
 8016492:	a942      	add	r1, sp, #264	@ 0x108
 8016494:	f1a3 0208 	sub.w	r2, r3, #8
 8016498:	440a      	add	r2, r1
 801649a:	4611      	mov	r1, r2
 801649c:	4620      	mov	r0, r4
 801649e:	2800      	cmp	r0, #0
 80164a0:	f1a1 0108 	sub.w	r1, r1, #8
 80164a4:	dc52      	bgt.n	801654c <__kernel_rem_pio2+0x47c>
 80164a6:	4621      	mov	r1, r4
 80164a8:	2901      	cmp	r1, #1
 80164aa:	f1a2 0208 	sub.w	r2, r2, #8
 80164ae:	dc5d      	bgt.n	801656c <__kernel_rem_pio2+0x49c>
 80164b0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80165c0 <__kernel_rem_pio2+0x4f0>
 80164b4:	aa42      	add	r2, sp, #264	@ 0x108
 80164b6:	4413      	add	r3, r2
 80164b8:	2c01      	cmp	r4, #1
 80164ba:	dc67      	bgt.n	801658c <__kernel_rem_pio2+0x4bc>
 80164bc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80164c0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80164c4:	2e00      	cmp	r6, #0
 80164c6:	d167      	bne.n	8016598 <__kernel_rem_pio2+0x4c8>
 80164c8:	ed87 5b00 	vstr	d5, [r7]
 80164cc:	ed87 6b02 	vstr	d6, [r7, #8]
 80164d0:	ed87 7b04 	vstr	d7, [r7, #16]
 80164d4:	e7d2      	b.n	801647c <__kernel_rem_pio2+0x3ac>
 80164d6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80165c0 <__kernel_rem_pio2+0x4f0>
 80164da:	aa42      	add	r2, sp, #264	@ 0x108
 80164dc:	4413      	add	r3, r2
 80164de:	4622      	mov	r2, r4
 80164e0:	2a00      	cmp	r2, #0
 80164e2:	da24      	bge.n	801652e <__kernel_rem_pio2+0x45e>
 80164e4:	b34e      	cbz	r6, 801653a <__kernel_rem_pio2+0x46a>
 80164e6:	eeb1 7b46 	vneg.f64	d7, d6
 80164ea:	ed87 7b00 	vstr	d7, [r7]
 80164ee:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80164f2:	aa44      	add	r2, sp, #272	@ 0x110
 80164f4:	2301      	movs	r3, #1
 80164f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80164fa:	429c      	cmp	r4, r3
 80164fc:	da20      	bge.n	8016540 <__kernel_rem_pio2+0x470>
 80164fe:	b10e      	cbz	r6, 8016504 <__kernel_rem_pio2+0x434>
 8016500:	eeb1 7b47 	vneg.f64	d7, d7
 8016504:	ed87 7b02 	vstr	d7, [r7, #8]
 8016508:	e7b8      	b.n	801647c <__kernel_rem_pio2+0x3ac>
 801650a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80165c0 <__kernel_rem_pio2+0x4f0>
 801650e:	aa42      	add	r2, sp, #264	@ 0x108
 8016510:	4413      	add	r3, r2
 8016512:	2c00      	cmp	r4, #0
 8016514:	da05      	bge.n	8016522 <__kernel_rem_pio2+0x452>
 8016516:	b10e      	cbz	r6, 801651c <__kernel_rem_pio2+0x44c>
 8016518:	eeb1 7b47 	vneg.f64	d7, d7
 801651c:	ed87 7b00 	vstr	d7, [r7]
 8016520:	e7ac      	b.n	801647c <__kernel_rem_pio2+0x3ac>
 8016522:	ed33 6b02 	vldmdb	r3!, {d6}
 8016526:	3c01      	subs	r4, #1
 8016528:	ee37 7b06 	vadd.f64	d7, d7, d6
 801652c:	e7f1      	b.n	8016512 <__kernel_rem_pio2+0x442>
 801652e:	ed33 7b02 	vldmdb	r3!, {d7}
 8016532:	3a01      	subs	r2, #1
 8016534:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016538:	e7d2      	b.n	80164e0 <__kernel_rem_pio2+0x410>
 801653a:	eeb0 7b46 	vmov.f64	d7, d6
 801653e:	e7d4      	b.n	80164ea <__kernel_rem_pio2+0x41a>
 8016540:	ecb2 6b02 	vldmia	r2!, {d6}
 8016544:	3301      	adds	r3, #1
 8016546:	ee37 7b06 	vadd.f64	d7, d7, d6
 801654a:	e7d6      	b.n	80164fa <__kernel_rem_pio2+0x42a>
 801654c:	ed91 7b00 	vldr	d7, [r1]
 8016550:	ed91 5b02 	vldr	d5, [r1, #8]
 8016554:	3801      	subs	r0, #1
 8016556:	ee37 6b05 	vadd.f64	d6, d7, d5
 801655a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801655e:	ed81 6b00 	vstr	d6, [r1]
 8016562:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016566:	ed81 7b02 	vstr	d7, [r1, #8]
 801656a:	e798      	b.n	801649e <__kernel_rem_pio2+0x3ce>
 801656c:	ed92 7b00 	vldr	d7, [r2]
 8016570:	ed92 5b02 	vldr	d5, [r2, #8]
 8016574:	3901      	subs	r1, #1
 8016576:	ee37 6b05 	vadd.f64	d6, d7, d5
 801657a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801657e:	ed82 6b00 	vstr	d6, [r2]
 8016582:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016586:	ed82 7b02 	vstr	d7, [r2, #8]
 801658a:	e78d      	b.n	80164a8 <__kernel_rem_pio2+0x3d8>
 801658c:	ed33 6b02 	vldmdb	r3!, {d6}
 8016590:	3c01      	subs	r4, #1
 8016592:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016596:	e78f      	b.n	80164b8 <__kernel_rem_pio2+0x3e8>
 8016598:	eeb1 5b45 	vneg.f64	d5, d5
 801659c:	eeb1 6b46 	vneg.f64	d6, d6
 80165a0:	ed87 5b00 	vstr	d5, [r7]
 80165a4:	eeb1 7b47 	vneg.f64	d7, d7
 80165a8:	ed87 6b02 	vstr	d6, [r7, #8]
 80165ac:	e790      	b.n	80164d0 <__kernel_rem_pio2+0x400>
 80165ae:	bf00      	nop
 80165b0:	00000000 	.word	0x00000000
 80165b4:	41700000 	.word	0x41700000
 80165b8:	00000000 	.word	0x00000000
 80165bc:	3e700000 	.word	0x3e700000
	...

080165c8 <scalbn>:
 80165c8:	ee10 1a90 	vmov	r1, s1
 80165cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80165d0:	b98b      	cbnz	r3, 80165f6 <scalbn+0x2e>
 80165d2:	ee10 3a10 	vmov	r3, s0
 80165d6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80165da:	4319      	orrs	r1, r3
 80165dc:	d00a      	beq.n	80165f4 <scalbn+0x2c>
 80165de:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016690 <scalbn+0xc8>
 80165e2:	4b37      	ldr	r3, [pc, #220]	@ (80166c0 <scalbn+0xf8>)
 80165e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165e8:	4298      	cmp	r0, r3
 80165ea:	da0b      	bge.n	8016604 <scalbn+0x3c>
 80165ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016698 <scalbn+0xd0>
 80165f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165f4:	4770      	bx	lr
 80165f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d107      	bne.n	801660e <scalbn+0x46>
 80165fe:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016602:	4770      	bx	lr
 8016604:	ee10 1a90 	vmov	r1, s1
 8016608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801660c:	3b36      	subs	r3, #54	@ 0x36
 801660e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016612:	4290      	cmp	r0, r2
 8016614:	dd0d      	ble.n	8016632 <scalbn+0x6a>
 8016616:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80166a0 <scalbn+0xd8>
 801661a:	ee10 3a90 	vmov	r3, s1
 801661e:	eeb0 6b47 	vmov.f64	d6, d7
 8016622:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80166a8 <scalbn+0xe0>
 8016626:	2b00      	cmp	r3, #0
 8016628:	fe27 7b05 	vselge.f64	d7, d7, d5
 801662c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016630:	4770      	bx	lr
 8016632:	4418      	add	r0, r3
 8016634:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8016638:	4298      	cmp	r0, r3
 801663a:	dcec      	bgt.n	8016616 <scalbn+0x4e>
 801663c:	2800      	cmp	r0, #0
 801663e:	dd0a      	ble.n	8016656 <scalbn+0x8e>
 8016640:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016644:	ec53 2b10 	vmov	r2, r3, d0
 8016648:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801664c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016650:	ec43 2b10 	vmov	d0, r2, r3
 8016654:	4770      	bx	lr
 8016656:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801665a:	da09      	bge.n	8016670 <scalbn+0xa8>
 801665c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8016698 <scalbn+0xd0>
 8016660:	ee10 3a90 	vmov	r3, s1
 8016664:	eeb0 6b47 	vmov.f64	d6, d7
 8016668:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80166b0 <scalbn+0xe8>
 801666c:	2b00      	cmp	r3, #0
 801666e:	e7db      	b.n	8016628 <scalbn+0x60>
 8016670:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016674:	ec53 2b10 	vmov	r2, r3, d0
 8016678:	3036      	adds	r0, #54	@ 0x36
 801667a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801667e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016682:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80166b8 <scalbn+0xf0>
 8016686:	ec43 2b10 	vmov	d0, r2, r3
 801668a:	e7b1      	b.n	80165f0 <scalbn+0x28>
 801668c:	f3af 8000 	nop.w
 8016690:	00000000 	.word	0x00000000
 8016694:	43500000 	.word	0x43500000
 8016698:	c2f8f359 	.word	0xc2f8f359
 801669c:	01a56e1f 	.word	0x01a56e1f
 80166a0:	8800759c 	.word	0x8800759c
 80166a4:	7e37e43c 	.word	0x7e37e43c
 80166a8:	8800759c 	.word	0x8800759c
 80166ac:	fe37e43c 	.word	0xfe37e43c
 80166b0:	c2f8f359 	.word	0xc2f8f359
 80166b4:	81a56e1f 	.word	0x81a56e1f
 80166b8:	00000000 	.word	0x00000000
 80166bc:	3c900000 	.word	0x3c900000
 80166c0:	ffff3cb0 	.word	0xffff3cb0
 80166c4:	00000000 	.word	0x00000000

080166c8 <floor>:
 80166c8:	ee10 3a90 	vmov	r3, s1
 80166cc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80166d0:	ee10 2a10 	vmov	r2, s0
 80166d4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80166d8:	2913      	cmp	r1, #19
 80166da:	b530      	push	{r4, r5, lr}
 80166dc:	4615      	mov	r5, r2
 80166de:	dc33      	bgt.n	8016748 <floor+0x80>
 80166e0:	2900      	cmp	r1, #0
 80166e2:	da18      	bge.n	8016716 <floor+0x4e>
 80166e4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80167a8 <floor+0xe0>
 80166e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80166ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80166f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f4:	dd0a      	ble.n	801670c <floor+0x44>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	da50      	bge.n	801679c <floor+0xd4>
 80166fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80166fe:	4313      	orrs	r3, r2
 8016700:	2200      	movs	r2, #0
 8016702:	4293      	cmp	r3, r2
 8016704:	4b2a      	ldr	r3, [pc, #168]	@ (80167b0 <floor+0xe8>)
 8016706:	bf08      	it	eq
 8016708:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801670c:	4619      	mov	r1, r3
 801670e:	4610      	mov	r0, r2
 8016710:	ec41 0b10 	vmov	d0, r0, r1
 8016714:	e01f      	b.n	8016756 <floor+0x8e>
 8016716:	4827      	ldr	r0, [pc, #156]	@ (80167b4 <floor+0xec>)
 8016718:	4108      	asrs	r0, r1
 801671a:	ea03 0400 	and.w	r4, r3, r0
 801671e:	4314      	orrs	r4, r2
 8016720:	d019      	beq.n	8016756 <floor+0x8e>
 8016722:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80167a8 <floor+0xe0>
 8016726:	ee30 0b07 	vadd.f64	d0, d0, d7
 801672a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016732:	ddeb      	ble.n	801670c <floor+0x44>
 8016734:	2b00      	cmp	r3, #0
 8016736:	bfbe      	ittt	lt
 8016738:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801673c:	410a      	asrlt	r2, r1
 801673e:	189b      	addlt	r3, r3, r2
 8016740:	ea23 0300 	bic.w	r3, r3, r0
 8016744:	2200      	movs	r2, #0
 8016746:	e7e1      	b.n	801670c <floor+0x44>
 8016748:	2933      	cmp	r1, #51	@ 0x33
 801674a:	dd05      	ble.n	8016758 <floor+0x90>
 801674c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016750:	d101      	bne.n	8016756 <floor+0x8e>
 8016752:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016756:	bd30      	pop	{r4, r5, pc}
 8016758:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801675c:	f04f 30ff 	mov.w	r0, #4294967295
 8016760:	40e0      	lsrs	r0, r4
 8016762:	4210      	tst	r0, r2
 8016764:	d0f7      	beq.n	8016756 <floor+0x8e>
 8016766:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80167a8 <floor+0xe0>
 801676a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801676e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016776:	ddc9      	ble.n	801670c <floor+0x44>
 8016778:	2b00      	cmp	r3, #0
 801677a:	da02      	bge.n	8016782 <floor+0xba>
 801677c:	2914      	cmp	r1, #20
 801677e:	d103      	bne.n	8016788 <floor+0xc0>
 8016780:	3301      	adds	r3, #1
 8016782:	ea22 0200 	bic.w	r2, r2, r0
 8016786:	e7c1      	b.n	801670c <floor+0x44>
 8016788:	2401      	movs	r4, #1
 801678a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801678e:	fa04 f101 	lsl.w	r1, r4, r1
 8016792:	440a      	add	r2, r1
 8016794:	42aa      	cmp	r2, r5
 8016796:	bf38      	it	cc
 8016798:	191b      	addcc	r3, r3, r4
 801679a:	e7f2      	b.n	8016782 <floor+0xba>
 801679c:	2200      	movs	r2, #0
 801679e:	4613      	mov	r3, r2
 80167a0:	e7b4      	b.n	801670c <floor+0x44>
 80167a2:	bf00      	nop
 80167a4:	f3af 8000 	nop.w
 80167a8:	8800759c 	.word	0x8800759c
 80167ac:	7e37e43c 	.word	0x7e37e43c
 80167b0:	bff00000 	.word	0xbff00000
 80167b4:	000fffff 	.word	0x000fffff

080167b8 <_init>:
 80167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ba:	bf00      	nop
 80167bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167be:	bc08      	pop	{r3}
 80167c0:	469e      	mov	lr, r3
 80167c2:	4770      	bx	lr

080167c4 <_fini>:
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c6:	bf00      	nop
 80167c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ca:	bc08      	pop	{r3}
 80167cc:	469e      	mov	lr, r3
 80167ce:	4770      	bx	lr
