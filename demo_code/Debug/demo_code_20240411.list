
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  08008c94  08008c94  00009c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a4  0800b8a4  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b8a4  0800b8a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8ac  0800b8ac  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8ac  0800b8ac  0000c8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8b0  0800b8b0  0000c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b8b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  200001e4  0800ba98  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800ba98  0000d808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b0d  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003433  00000000  00000000  00020d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f91  00000000  00000000  000255a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262c9  00000000  00000000  00026531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a4b  00000000  00000000  0004c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de08a  00000000  00000000  00064245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001422cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  00142314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00147cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c7c 	.word	0x08008c7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08008c7c 	.word	0x08008c7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 80005bc:	b598      	push	{r3, r4, r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 80005c0:	f003 fd26 	bl	8004010 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 80005c4:	f000 f8a0 	bl	8000708 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 80005c8:	f002 fc6c 	bl	8002ea4 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80005cc:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005d0:	2001      	movs	r0, #1
 80005d2:	f002 fcf5 	bl	8002fc0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f002 fd56 	bl	8003088 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80005dc:	f003 f826 	bl	800362c <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f002 fdac 	bl	8003140 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80005e8:	f002 fcd2 	bl	8002f90 <BSP_LCD_GetXSize>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29c      	uxth	r4, r3
 80005f0:	f002 fcda 	bl	8002fa8 <BSP_LCD_GetYSize>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4620      	mov	r0, r4
 80005fc:	f003 fc04 	bl	8003e08 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8000600:	f001 fb04 	bl	8001c0c <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000604:	f001 fb22 	bl	8001c4c <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000608:	2000      	movs	r0, #0
 800060a:	f002 f835 	bl	8002678 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 800060e:	2001      	movs	r0, #1
 8000610:	f002 f832 	bl	8002678 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 8000614:	f001 f920 	bl	8001858 <MENU_draw>
	MENU_hint();						// Show hint at startup
 8000618:	f001 f9cc 	bl	80019b4 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 800061c:	f000 f8f2 	bl	8000804 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8000620:	f000 fa5a 	bl	8000ad8 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8000624:	f000 fb2c 	bl	8000c80 <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000628:	2000      	movs	r0, #0
 800062a:	f002 f8ad 	bl	8002788 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 800062e:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <main+0x144>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d004      	beq.n	8000640 <main+0x84>
			MEAS_data_ready = false;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <main+0x144>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 800063c:	f001 f81c 	bl	8001678 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8000640:	f001 fb36 	bl	8001cb0 <PB_pressed>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d01d      	beq.n	8000686 <main+0xca>
			DAC_active = !DAC_active;	// Toggle DAC on/<<<<<<<<<<<<<<<<<<<<<<off
 800064a:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <main+0x148>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <main+0x148>)
 8000666:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <main+0x148>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <main+0xc0>
				DAC_init();
 8000670:	f000 faaa 	bl	8000bc8 <DAC_init>
				BSP_LED_On(LED4);
 8000674:	2001      	movs	r0, #1
 8000676:	f002 f853 	bl	8002720 <BSP_LED_On>
 800067a:	e004      	b.n	8000686 <main+0xca>
			} else {
				DAC_reset();
 800067c:	f000 fa8e 	bl	8000b9c <DAC_reset>
				BSP_LED_Off(LED4);
 8000680:	2001      	movs	r0, #1
 8000682:	f002 f867 	bl	8002754 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000686:	f001 f9f5 	bl	8001a74 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 800068a:	f001 f9e1 	bl	8001a50 <MENU_get_transition>
 800068e:	4603      	mov	r3, r0
 8000690:	2b06      	cmp	r3, #6
 8000692:	d82f      	bhi.n	80006f4 <main+0x138>
 8000694:	a201      	add	r2, pc, #4	@ (adr r2, 800069c <main+0xe0>)
 8000696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069a:	bf00      	nop
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006c3 	.word	0x080006c3
 80006a4:	080006cd 	.word	0x080006cd
 80006a8:	080006d7 	.word	0x080006d7
 80006ac:	080006e1 	.word	0x080006e1
 80006b0:	080006eb 	.word	0x080006eb
 80006b4:	080006f5 	.word	0x080006f5
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN14_ADC2_IN15_dual_init();
 80006b8:	f000 f964 	bl	8000984 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 80006bc:	f000 fcec 	bl	8001098 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 80006c0:	e019      	b.n	80006f6 <main+0x13a>
		case MENU_ONE:
			ADC3_IN4_timer_init();
 80006c2:	f000 fb13 	bl	8000cec <ADC3_IN4_timer_init>
			ADC3_IN4_timer_start();
 80006c6:	f000 fb49 	bl	8000d5c <ADC3_IN4_timer_start>
			break;
 80006ca:	e014      	b.n	80006f6 <main+0x13a>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 80006cc:	f000 fb60 	bl	8000d90 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 80006d0:	f000 fbec 	bl	8000eac <ADC3_IN4_DMA_start>
			break;
 80006d4:	e00f      	b.n	80006f6 <main+0x13a>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 80006d6:	f000 fc0b 	bl	8000ef0 <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 80006da:	f000 fcb3 	bl	8001044 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 80006de:	e00a      	b.n	80006f6 <main+0x13a>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 80006e0:	f000 fd04 	bl	80010ec <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 80006e4:	f000 fda2 	bl	800122c <ADC2_IN13_IN5_scan_start>
			break;
 80006e8:	e005      	b.n	80006f6 <main+0x13a>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 80006ea:	f000 fdc1 	bl	8001270 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 80006ee:	f000 fe5f 	bl	80013b0 <ADC3_IN13_IN4_scan_start>
			break;
 80006f2:	e000      	b.n	80006f6 <main+0x13a>
		default:						// Should never occur
			break;
 80006f4:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 80006f6:	20c8      	movs	r0, #200	@ 0xc8
 80006f8:	f003 fd04 	bl	8004104 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80006fc:	e794      	b.n	8000628 <main+0x6c>
 80006fe:	bf00      	nop
 8000700:	20000200 	.word	0x20000200
 8000704:	20000201 	.word	0x20000201

08000708 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	b0a0      	sub	sp, #128	@ 0x80
 800070c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fe2a 	bl	8008370 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2230      	movs	r2, #48	@ 0x30
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f007 fe1b 	bl	8008370 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0xf0>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <SystemClock_Config+0xf4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a27      	ldr	r2, [pc, #156]	@ (80007fc <SystemClock_Config+0xf4>)
 8000760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <SystemClock_Config+0xf4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000772:	2301      	movs	r3, #1
 8000774:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077a:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000780:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000784:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000786:	2308      	movs	r3, #8
 8000788:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 800078a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800078e:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000794:	2307      	movs	r3, #7
 8000796:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000798:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800079c:	4618      	mov	r0, r3
 800079e:	f005 ff03 	bl	80065a8 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80007ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f006 f95f 	bl	8006a84 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007c6:	2308      	movs	r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007ca:	23c0      	movs	r3, #192	@ 0xc0
 80007cc:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fb5d 	bl	8006e9c <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <SystemClock_Config+0xf8>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <SystemClock_Config+0xf8>)
 80007e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007ec:	6053      	str	r3, [r2, #4]
}
 80007ee:	bf00      	nop
 80007f0:	3780      	adds	r7, #128	@ 0x80
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000
 8000800:	40012300 	.word	0x40012300

08000804 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <gyro_disable+0xb4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <gyro_disable+0xb4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <gyro_disable+0xb4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <gyro_disable+0xb8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a24      	ldr	r2, [pc, #144]	@ (80008bc <gyro_disable+0xb8>)
 800082c:	f023 030c 	bic.w	r3, r3, #12
 8000830:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <gyro_disable+0xb8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <gyro_disable+0xb8>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <gyro_disable+0xb8>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <gyro_disable+0xb8>)
 8000844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000848:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 800084a:	200a      	movs	r0, #10
 800084c:	f003 fc5a 	bl	8004104 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <gyro_disable+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	@ (80008bc <gyro_disable+0xb8>)
 8000856:	f043 030c 	orr.w	r3, r3, #12
 800085a:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <gyro_disable+0xb4>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <gyro_disable+0xb4>)
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6313      	str	r3, [r2, #48]	@ 0x30
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <gyro_disable+0xb4>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <gyro_disable+0xbc>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <gyro_disable+0xbc>)
 800087e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000882:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <gyro_disable+0xbc>)
 8000886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <gyro_disable+0xbc>)
 800088a:	f023 030f 	bic.w	r3, r3, #15
 800088e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <gyro_disable+0xbc>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <gyro_disable+0xbc>)
 8000896:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800089a:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 800089c:	200a      	movs	r0, #10
 800089e:	f003 fc31 	bl	8004104 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <gyro_disable+0xbc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <gyro_disable+0xbc>)
 80008a8:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40021400 	.word	0x40021400

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4907      	ldr	r1, [pc, #28]	@ (80008fc <__NVIC_EnableIRQ+0x38>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100

08000900 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db12      	blt.n	8000938 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	490a      	ldr	r1, [pc, #40]	@ (8000944 <__NVIC_DisableIRQ+0x44>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	3320      	adds	r3, #32
 8000928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800092c:	f3bf 8f4f 	dsb	sy
}
 8000930:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000932:	f3bf 8f6f 	isb	sy
}
 8000936:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0c      	blt.n	8000974 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4907      	ldr	r1, [pc, #28]	@ (8000980 <__NVIC_ClearPendingIRQ+0x38>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	3360      	adds	r3, #96	@ 0x60
 8000970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100

08000984 <ADC1_IN14_ADC2_IN15_dual_init>:
 * Functions
 *****************************************************************************/


void ADC1_IN14_ADC2_IN15_dual_init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
    MEAS_input_count = 2;                // 2 inputs are converted
 800098a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <ADC1_IN14_ADC2_IN15_dual_init+0x130>)
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b48      	ldr	r3, [pc, #288]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000998:	4a47      	ldr	r2, [pc, #284]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 800099a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800099e:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a0:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b4:	4a40      	ldr	r2, [pc, #256]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80009bc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 80009c8:	4b3c      	ldr	r3, [pc, #240]	@ (8000abc <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80009ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d2:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 80009d4:	4b39      	ldr	r3, [pc, #228]	@ (8000abc <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a38      	ldr	r2, [pc, #224]	@ (8000abc <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 80009da:	f043 0306 	orr.w	r3, r3, #6
 80009de:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 80009e0:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4a36      	ldr	r2, [pc, #216]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 80009ec:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009f2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80009f6:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 80009f8:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fc:	4a30      	ldr	r2, [pc, #192]	@ (8000ac0 <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 80009fe:	f043 030e 	orr.w	r3, r3, #14
 8000a02:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8000a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a08:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8000a0a:	f043 030f 	orr.w	r3, r3, #15
 8000a0e:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a18:	4a27      	ldr	r2, [pc, #156]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000a1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a20:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a25      	ldr	r2, [pc, #148]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a32:	f023 0301 	bic.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 8000a38:	bf00      	nop
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f9      	bne.n	8000a3a <ADC1_IN14_ADC2_IN15_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4a20      	ldr	r2, [pc, #128]	@ (8000acc <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a7c:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 8000a7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a88:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a98:	223c      	movs	r2, #60	@ 0x3c
 8000a9a:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad0 <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 8000aa0:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <ADC1_IN14_ADC2_IN15_dual_init+0x150>)
 8000aa6:	60da      	str	r2, [r3, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40012300 	.word	0x40012300
 8000ac0:	40012000 	.word	0x40012000
 8000ac4:	40012100 	.word	0x40012100
 8000ac8:	40026470 	.word	0x40026470
 8000acc:	40026400 	.word	0x40026400
 8000ad0:	40012308 	.word	0x40012308
 8000ad4:	20000208 	.word	0x20000208

08000ad8 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a29      	ldr	r2, [pc, #164]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000ae8:	f043 0320 	orr.w	r3, r3, #32
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8000afa:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <MEAS_GPIO_analog_init+0xb8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <MEAS_GPIO_analog_init+0xb8>)
 8000b00:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000b04:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MEAS_GPIO_analog_init+0xbc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1b      	ldr	r2, [pc, #108]	@ (8000b94 <MEAS_GPIO_analog_init+0xbc>)
 8000b28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b2c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MEAS_GPIO_analog_init+0xc0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MEAS_GPIO_analog_init+0xc0>)
 8000b50:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b54:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MEAS_GPIO_analog_init+0xb4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MEAS_GPIO_analog_init+0xbc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <MEAS_GPIO_analog_init+0xbc>)
 8000b78:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021400 	.word	0x40021400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000

08000b9c <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <DAC_reset+0x28>)
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <DAC_reset+0x28>)
 8000ba6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000baa:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <DAC_reset+0x28>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <DAC_reset+0x28>)
 8000bb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000bb6:	6213      	str	r3, [r2, #32]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <DAC_init+0x3c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <DAC_init+0x3c>)
 8000bd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <DAC_init+0x3c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <DAC_init+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <DAC_init+0x40>)
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007400 	.word	0x40007400

08000c0c <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <DAC_increment+0x30>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3314      	adds	r3, #20
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <DAC_increment+0x30>)
 8000c18:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <DAC_increment+0x30>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c22:	d302      	bcc.n	8000c2a <DAC_increment+0x1e>
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <DAC_increment+0x30>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <DAC_increment+0x34>)
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <DAC_increment+0x30>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6153      	str	r3, [r2, #20]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200003e8 	.word	0x200003e8
 8000c40:	40007400 	.word	0x40007400

08000c44 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <ADC_reset+0x38>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <ADC_reset+0x38>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c52:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <ADC_reset+0x38>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <ADC_reset+0x38>)
 8000c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c5e:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6a:	f023 0301 	bic.w	r3, r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MEAS_timer_init+0x68>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <MEAS_timer_init+0x68>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MEAS_timer_init+0x68>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8000ca2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca6:	f243 62af 	movw	r2, #13999	@ 0x36af
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8000cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8000cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000cd4:	201c      	movs	r0, #28
 8000cd6:	f7ff fe37 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000cda:	201c      	movs	r0, #28
 8000cdc:	f7ff fdf2 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800

08000cec <ADC3_IN4_timer_init>:
 * and the timer starts the ADC directly without CPU intervention.
 * @n The ADC is configured for end of conversion interrupt.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_timer_init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <ADC3_IN4_timer_init+0x64>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <ADC3_IN4_timer_init+0x68>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <ADC3_IN4_timer_init+0x68>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <ADC3_IN4_timer_init+0x68>)
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d18:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_EOCIE;			// Enable end of conversion interrupt
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a0c      	ldr	r2, [pc, #48]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	4a09      	ldr	r2, [pc, #36]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <ADC3_IN4_timer_init+0x6c>)
 8000d3e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000d42:	6093      	str	r3, [r2, #8]

}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000000 	.word	0x20000000
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40012200 	.word	0x40012200

08000d5c <ADC3_IN4_timer_start>:
 *
 * The ADC isues an end of conversion interrupt.
 * The converted value can be read in the associated interrupt handler.
 *****************************************************************************/
void ADC3_IN4_timer_start(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(ADC_IRQn);		// Clear pending interrupt on line 0
 8000d60:	2012      	movs	r0, #18
 8000d62:	f7ff fdf1 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(ADC_IRQn);			// Enable interrupt line 0 in the NVIC
 8000d66:	2012      	movs	r0, #18
 8000d68:	f7ff fdac 	bl	80008c4 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <ADC3_IN4_timer_start+0x30>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <ADC3_IN4_timer_start+0x30>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40012200 	.word	0x40012200

08000d90 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8000d96:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <ADC3_IN4_DMA_init+0x100>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	4a3b      	ldr	r2, [pc, #236]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000daa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8000db8:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dbc:	4a36      	ldr	r2, [pc, #216]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4a33      	ldr	r2, [pc, #204]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000dd0:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dd6:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000dda:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e98 <ADC3_IN4_DMA_init+0x108>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de6:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000df2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df8:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <ADC3_IN4_DMA_init+0x104>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8000e04:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a24      	ldr	r2, [pc, #144]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000e10:	bf00      	nop
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f9      	bne.n	8000e12 <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <ADC3_IN4_DMA_init+0x110>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea0 <ADC3_IN4_DMA_init+0x110>)
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e28:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e34:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e58:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e64:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e6c:	f043 0310 	orr.w	r3, r3, #16
 8000e70:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e74:	223c      	movs	r2, #60	@ 0x3c
 8000e76:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <ADC3_IN4_DMA_init+0x114>)
 8000e7c:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <ADC3_IN4_DMA_init+0x10c>)
 8000e80:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <ADC3_IN4_DMA_init+0x118>)
 8000e82:	60da      	str	r2, [r3, #12]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	20000000 	.word	0x20000000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40012200 	.word	0x40012200
 8000e9c:	40026428 	.word	0x40026428
 8000ea0:	40026400 	.word	0x40026400
 8000ea4:	4001224c 	.word	0x4001224c
 8000ea8:	20000208 	.word	0x20000208

08000eac <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <ADC3_IN4_DMA_start+0x3c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <ADC3_IN4_DMA_start+0x3c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8000ebc:	2039      	movs	r0, #57	@ 0x39
 8000ebe:	f7ff fd43 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8000ec2:	2039      	movs	r0, #57	@ 0x39
 8000ec4:	f7ff fcfe 	bl	80008c4 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <ADC3_IN4_DMA_start+0x40>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <ADC3_IN4_DMA_start+0x40>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40026428 	.word	0x40026428
 8000eec:	40012200 	.word	0x40012200

08000ef0 <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8001020 <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f04:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0c:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f20:	4a40      	ldr	r2, [pc, #256]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f26:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f28:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8000f34:	4b3c      	ldr	r3, [pc, #240]	@ (8001028 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a3b      	ldr	r2, [pc, #236]	@ (8001028 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f3e:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a38      	ldr	r2, [pc, #224]	@ (8001028 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000f46:	f043 0306 	orr.w	r3, r3, #6
 8000f4a:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000f4c:	4b37      	ldr	r3, [pc, #220]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a36      	ldr	r2, [pc, #216]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000f58:	4b34      	ldr	r3, [pc, #208]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a33      	ldr	r2, [pc, #204]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f5e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000f62:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000f64:	4b31      	ldr	r3, [pc, #196]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	4a30      	ldr	r2, [pc, #192]	@ (800102c <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000f6a:	f043 030d 	orr.w	r3, r3, #13
 8000f6e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f74:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8000f76:	f043 0305 	orr.w	r3, r3, #5
 8000f7a:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000fa4:	bf00      	nop
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fe4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff4:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001004:	223c      	movs	r2, #60	@ 0x3c
 8001006:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800100a:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 800100c:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 8001012:	60da      	str	r2, [r3, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000000 	.word	0x20000000
 8001024:	40023800 	.word	0x40023800
 8001028:	40012300 	.word	0x40012300
 800102c:	40012000 	.word	0x40012000
 8001030:	40012100 	.word	0x40012100
 8001034:	40026470 	.word	0x40026470
 8001038:	40026400 	.word	0x40026400
 800103c:	40012308 	.word	0x40012308
 8001040:	20000208 	.word	0x20000208

08001044 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001054:	203c      	movs	r0, #60	@ 0x3c
 8001056:	f7ff fc77 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 800105a:	203c      	movs	r0, #60	@ 0x3c
 800105c:	f7ff fc32 	bl	80008c4 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001078:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40026470 	.word	0x40026470
 8001090:	40012000 	.word	0x40012000
 8001094:	40012100 	.word	0x40012100

08001098 <ADC1_IN14_ADC2_IN15_dual_start>:

void ADC1_IN14_ADC2_IN15_dual_start(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 80010a8:	203c      	movs	r0, #60	@ 0x3c
 80010aa:	f7ff fc4d 	bl	8000948 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 80010ae:	203c      	movs	r0, #60	@ 0x3c
 80010b0:	f7ff fc08 	bl	80008c4 <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40026470 	.word	0x40026470
 80010e4:	40012000 	.word	0x40012000
 80010e8:	40012100 	.word	0x40012100

080010ec <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <ADC2_IN13_IN5_scan_init+0x124>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001100:	4a44      	ldr	r2, [pc, #272]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001106:	6453      	str	r3, [r2, #68]	@ 0x44
 8001108:	4b42      	ldr	r3, [pc, #264]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	4a3f      	ldr	r2, [pc, #252]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800111a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800111e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001120:	4b3d      	ldr	r3, [pc, #244]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001124:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001130:	4a39      	ldr	r2, [pc, #228]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001132:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001136:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a36      	ldr	r2, [pc, #216]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001142:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114e:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	4a30      	ldr	r2, [pc, #192]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001156:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800115a:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001166:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 8001172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001176:	6313      	str	r3, [r2, #48]	@ 0x30
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <ADC2_IN13_IN5_scan_init+0x128>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a24      	ldr	r2, [pc, #144]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001190:	bf00      	nop
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <ADC2_IN13_IN5_scan_init+0x134>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <ADC2_IN13_IN5_scan_init+0x134>)
 80011a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011a8:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a18      	ldr	r2, [pc, #96]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a15      	ldr	r2, [pc, #84]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011cc:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011f4:	2278      	movs	r2, #120	@ 0x78
 80011f6:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <ADC2_IN13_IN5_scan_init+0x138>)
 80011fc:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <ADC2_IN13_IN5_scan_init+0x130>)
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <ADC2_IN13_IN5_scan_init+0x13c>)
 8001202:	60da      	str	r2, [r3, #12]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000000 	.word	0x20000000
 8001214:	40023800 	.word	0x40023800
 8001218:	40012100 	.word	0x40012100
 800121c:	40026458 	.word	0x40026458
 8001220:	40026400 	.word	0x40026400
 8001224:	4001214c 	.word	0x4001214c
 8001228:	20000208 	.word	0x20000208

0800122c <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <ADC2_IN13_IN5_scan_start+0x3c>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 800123c:	203b      	movs	r0, #59	@ 0x3b
 800123e:	f7ff fb83 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8001242:	203b      	movs	r0, #59	@ 0x3b
 8001244:	f7ff fb3e 	bl	80008c4 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <ADC2_IN13_IN5_scan_start+0x40>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <ADC2_IN13_IN5_scan_start+0x40>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40026458 	.word	0x40026458
 800126c:	40012100 	.word	0x40012100

08001270 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8001276:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <ADC3_IN13_IN4_scan_init+0x124>)
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	4a44      	ldr	r2, [pc, #272]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128a:	6453      	str	r3, [r2, #68]	@ 0x44
 800128c:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 800129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129c:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 800129e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80012a4:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a8:	4a3c      	ldr	r2, [pc, #240]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012aa:	f043 030d 	orr.w	r3, r3, #13
 80012ae:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b4:	4a39      	ldr	r2, [pc, #228]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ba:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 80012bc:	4b37      	ldr	r3, [pc, #220]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a36      	ldr	r2, [pc, #216]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a33      	ldr	r2, [pc, #204]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80012d4:	4b31      	ldr	r3, [pc, #196]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a30      	ldr	r2, [pc, #192]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012da:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80012de:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80012e0:	4b2e      	ldr	r3, [pc, #184]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a2d      	ldr	r2, [pc, #180]	@ (800139c <ADC3_IN13_IN4_scan_init+0x12c>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ea:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a28      	ldr	r2, [pc, #160]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 80012f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <ADC3_IN13_IN4_scan_init+0x128>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001314:	bf00      	nop
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <ADC3_IN13_IN4_scan_init+0x134>)
 8001328:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800132c:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001338:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800135c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001364:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001368:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001378:	2278      	movs	r2, #120	@ 0x78
 800137a:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <ADC3_IN13_IN4_scan_init+0x138>)
 8001380:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <ADC3_IN13_IN4_scan_init+0x130>)
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <ADC3_IN13_IN4_scan_init+0x13c>)
 8001386:	60da      	str	r2, [r3, #12]

}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000000 	.word	0x20000000
 8001398:	40023800 	.word	0x40023800
 800139c:	40012200 	.word	0x40012200
 80013a0:	40026428 	.word	0x40026428
 80013a4:	40026400 	.word	0x40026400
 80013a8:	4001224c 	.word	0x4001224c
 80013ac:	20000208 	.word	0x20000208

080013b0 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <ADC3_IN13_IN4_scan_start+0x3c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <ADC3_IN13_IN4_scan_start+0x3c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80013c0:	2039      	movs	r0, #57	@ 0x39
 80013c2:	f7ff fac1 	bl	8000948 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80013c6:	2039      	movs	r0, #57	@ 0x39
 80013c8:	f7ff fa7c 	bl	80008c4 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <ADC3_IN13_IN4_scan_start+0x40>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <ADC3_IN13_IN4_scan_start+0x40>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80013d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40026428 	.word	0x40026428
 80013f0:	40012200 	.word	0x40012200

080013f4 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <TIM2_IRQHandler+0x24>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001410:	f7ff fbfc 	bl	8000c0c <DAC_increment>
	}
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000201 	.word	0x20000201

0800141c <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ADC_IRQHandler+0x58>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 800142c:	4911      	ldr	r1, [pc, #68]	@ (8001474 <ADC_IRQHandler+0x58>)
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <ADC_IRQHandler+0x5c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4810      	ldr	r0, [pc, #64]	@ (8001478 <ADC_IRQHandler+0x5c>)
 8001436:	6002      	str	r2, [r0, #0]
 8001438:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800143a:	4910      	ldr	r1, [pc, #64]	@ (800147c <ADC_IRQHandler+0x60>)
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <ADC_IRQHandler+0x5c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b3b      	cmp	r3, #59	@ 0x3b
 8001446:	d912      	bls.n	800146e <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <ADC_IRQHandler+0x58>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <ADC_IRQHandler+0x58>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001464:	f7ff fbee 	bl	8000c44 <ADC_reset>
			MEAS_data_ready = true;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <ADC_IRQHandler+0x64>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40012200 	.word	0x40012200
 8001478:	20000204 	.word	0x20000204
 800147c:	20000208 	.word	0x20000208
 8001480:	20000200 	.word	0x20000200

08001484 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <DMA2_Stream1_IRQHandler+0x78>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001490:	2b00      	cmp	r3, #0
 8001492:	d031      	beq.n	80014f8 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001494:	2039      	movs	r0, #57	@ 0x39
 8001496:	f7ff fa33 	bl	8000900 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 800149a:	2039      	movs	r0, #57	@ 0x39
 800149c:	f7ff fa54 	bl	8000948 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <DMA2_Stream1_IRQHandler+0x7c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <DMA2_Stream1_IRQHandler+0x7c>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80014ac:	bf00      	nop
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <DMA2_Stream1_IRQHandler+0x7c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <DMA2_Stream1_IRQHandler+0x78>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <DMA2_Stream1_IRQHandler+0x78>)
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c4:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80014c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <DMA2_Stream1_IRQHandler+0x80>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <DMA2_Stream1_IRQHandler+0x80>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <DMA2_Stream1_IRQHandler+0x80>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <DMA2_Stream1_IRQHandler+0x80>)
 80014e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ec:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80014ee:	f7ff fba9 	bl	8000c44 <ADC_reset>
		MEAS_data_ready = true;
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <DMA2_Stream1_IRQHandler+0x84>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
	}
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40026400 	.word	0x40026400
 8001500:	40026428 	.word	0x40026428
 8001504:	40012200 	.word	0x40012200
 8001508:	20000200 	.word	0x20000200

0800150c <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <DMA2_Stream3_IRQHandler+0x78>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d031      	beq.n	8001580 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 800151c:	203b      	movs	r0, #59	@ 0x3b
 800151e:	f7ff f9ef 	bl	8000900 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8001522:	203b      	movs	r0, #59	@ 0x3b
 8001524:	f7ff fa10 	bl	8000948 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <DMA2_Stream3_IRQHandler+0x7c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <DMA2_Stream3_IRQHandler+0x7c>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001534:	bf00      	nop
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <DMA2_Stream3_IRQHandler+0x7c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <DMA2_Stream3_IRQHandler+0x78>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <DMA2_Stream3_IRQHandler+0x78>)
 8001548:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800154c:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800154e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <DMA2_Stream3_IRQHandler+0x80>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <DMA2_Stream3_IRQHandler+0x80>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <DMA2_Stream3_IRQHandler+0x80>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4a07      	ldr	r2, [pc, #28]	@ (800158c <DMA2_Stream3_IRQHandler+0x80>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001574:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001576:	f7ff fb65 	bl	8000c44 <ADC_reset>
		MEAS_data_ready = true;
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <DMA2_Stream3_IRQHandler+0x84>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
	}
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40026400 	.word	0x40026400
 8001588:	40026458 	.word	0x40026458
 800158c:	40012100 	.word	0x40012100
 8001590:	20000200 	.word	0x20000200

08001594 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <DMA2_Stream4_IRQHandler+0xc8>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d055      	beq.n	8001652 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 80015a6:	203c      	movs	r0, #60	@ 0x3c
 80015a8:	f7ff f9aa 	bl	8000900 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 80015ac:	203c      	movs	r0, #60	@ 0x3c
 80015ae:	f7ff f9cb 	bl	8000948 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <DMA2_Stream4_IRQHandler+0xcc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <DMA2_Stream4_IRQHandler+0xcc>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80015be:	bf00      	nop
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <DMA2_Stream4_IRQHandler+0xcc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f9      	bne.n	80015c0 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 80015cc:	4b23      	ldr	r3, [pc, #140]	@ (800165c <DMA2_Stream4_IRQHandler+0xc8>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a22      	ldr	r2, [pc, #136]	@ (800165c <DMA2_Stream4_IRQHandler+0xc8>)
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <DMA2_Stream4_IRQHandler+0xd0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <DMA2_Stream4_IRQHandler+0xd0>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80015f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <DMA2_Stream4_IRQHandler+0xd4>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <DMA2_Stream4_IRQHandler+0xd4>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <DMA2_Stream4_IRQHandler+0xd8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <DMA2_Stream4_IRQHandler+0xd8>)
 8001606:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800160a:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 800160c:	233b      	movs	r3, #59	@ 0x3b
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e017      	b.n	8001642 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <DMA2_Stream4_IRQHandler+0xdc>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	3301      	adds	r3, #1
 8001620:	0c12      	lsrs	r2, r2, #16
 8001622:	4913      	ldr	r1, [pc, #76]	@ (8001670 <DMA2_Stream4_IRQHandler+0xdc>)
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001628:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <DMA2_Stream4_IRQHandler+0xdc>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b292      	uxth	r2, r2
 8001636:	490e      	ldr	r1, [pc, #56]	@ (8001670 <DMA2_Stream4_IRQHandler+0xdc>)
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	dae4      	bge.n	8001612 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001648:	f7ff fafc 	bl	8000c44 <ADC_reset>
		MEAS_data_ready = true;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <DMA2_Stream4_IRQHandler+0xe0>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
	}
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40026400 	.word	0x40026400
 8001660:	40026470 	.word	0x40026470
 8001664:	40012000 	.word	0x40012000
 8001668:	40012100 	.word	0x40012100
 800166c:	40012300 	.word	0x40012300
 8001670:	20000208 	.word	0x20000208
 8001674:	20000200 	.word	0x20000200

08001678 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08d      	sub	sp, #52	@ 0x34
 800167c:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 800167e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001682:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 8001684:	23f0      	movs	r3, #240	@ 0xf0
 8001686:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001688:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001696:	f04f 30ff 	mov.w	r0, #4294967295
 800169a:	f001 fd05 	bl	80030a8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 ff3b 	bl	8003528 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 80016b2:	4861      	ldr	r0, [pc, #388]	@ (8001838 <MEAS_show_data+0x1c0>)
 80016b4:	f001 fd2a 	bl	800310c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f001 fd0c 	bl	80030d8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80016c0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016c4:	f001 fcf0 	bl	80030a8 <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 80016c8:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <MEAS_show_data+0x1c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4638      	mov	r0, r7
 80016ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001840 <MEAS_show_data+0x1c8>)
 80016d0:	210f      	movs	r1, #15
 80016d2:	f006 fe17 	bl	8008304 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 80016d6:	463a      	mov	r2, r7
 80016d8:	2303      	movs	r3, #3
 80016da:	2132      	movs	r1, #50	@ 0x32
 80016dc:	2000      	movs	r0, #0
 80016de:	f001 fd9b 	bl	8003218 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 80016e2:	4b56      	ldr	r3, [pc, #344]	@ (800183c <MEAS_show_data+0x1c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4638      	mov	r0, r7
 80016e8:	4a56      	ldr	r2, [pc, #344]	@ (8001844 <MEAS_show_data+0x1cc>)
 80016ea:	210f      	movs	r1, #15
 80016ec:	f006 fe0a 	bl	8008304 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 80016f0:	463a      	mov	r2, r7
 80016f2:	2303      	movs	r3, #3
 80016f4:	2150      	movs	r1, #80	@ 0x50
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 fd8e 	bl	8003218 <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80016fc:	4852      	ldr	r0, [pc, #328]	@ (8001848 <MEAS_show_data+0x1d0>)
 80016fe:	f001 fcd3 	bl	80030a8 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8001702:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <MEAS_show_data+0x1c4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800170e:	2301      	movs	r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001712:	e02e      	b.n	8001772 <MEAS_show_data+0xfa>
		data_last = data;
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8001718:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <MEAS_show_data+0x1d4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a46      	ldr	r2, [pc, #280]	@ (800183c <MEAS_show_data+0x1c4>)
 8001724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	d901      	bls.n	800173c <MEAS_show_data+0xc4>
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800173c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173e:	3b01      	subs	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	b298      	uxth	r0, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	b29a      	uxth	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	b29b      	uxth	r3, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b299      	uxth	r1, r3
 8001752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001754:	b29b      	uxth	r3, r3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	b29c      	uxth	r4, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	b29a      	uxth	r2, r3
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	b29b      	uxth	r3, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	4622      	mov	r2, r4
 8001768:	f001 fe14 	bl	8003394 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176e:	3301      	adds	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001774:	2b3b      	cmp	r3, #59	@ 0x3b
 8001776:	d9cd      	bls.n	8001714 <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001778:	4b34      	ldr	r3, [pc, #208]	@ (800184c <MEAS_show_data+0x1d4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d13e      	bne.n	80017fe <MEAS_show_data+0x186>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001780:	4833      	ldr	r0, [pc, #204]	@ (8001850 <MEAS_show_data+0x1d8>)
 8001782:	f001 fc91 	bl	80030a8 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <MEAS_show_data+0x1c4>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
 8001796:	e02f      	b.n	80017f8 <MEAS_show_data+0x180>
			data_last = data;
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179a:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <MEAS_show_data+0x1d4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a24      	ldr	r2, [pc, #144]	@ (800183c <MEAS_show_data+0x1c4>)
 80017aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 80017b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d901      	bls.n	80017c2 <MEAS_show_data+0x14a>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	b298      	uxth	r0, r3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b299      	uxth	r1, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	b29b      	uxth	r3, r3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	b29c      	uxth	r4, r3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4622      	mov	r2, r4
 80017ee:	f001 fdd1 	bl	8003394 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80017fc:	d9cc      	bls.n	8001798 <MEAS_show_data+0x120>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	e00f      	b.n	8001824 <MEAS_show_data+0x1ac>
		ADC_samples[2*i] = 0;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <MEAS_show_data+0x1c4>)
 800180a:	2100      	movs	r1, #0
 800180c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	3301      	adds	r3, #1
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <MEAS_show_data+0x1c4>)
 8001818:	2100      	movs	r1, #0
 800181a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	3301      	adds	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	2b3b      	cmp	r3, #59	@ 0x3b
 8001828:	d9ec      	bls.n	8001804 <MEAS_show_data+0x18c>
	}
	ADC_sample_count = 0;
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <MEAS_show_data+0x1dc>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3734      	adds	r7, #52	@ 0x34
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	20000170 	.word	0x20000170
 800183c:	20000208 	.word	0x20000208
 8001840:	08008c94 	.word	0x08008c94
 8001844:	08008ca4 	.word	0x08008ca4
 8001848:	ff0000ff 	.word	0xff0000ff
 800184c:	20000000 	.word	0x20000000
 8001850:	ffff0000 	.word	0xffff0000
 8001854:	20000204 	.word	0x20000204

08001858 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 800185e:	4852      	ldr	r0, [pc, #328]	@ (80019a8 <MENU_draw+0x150>)
 8001860:	f001 fc54 	bl	800310c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001864:	f001 fba0 	bl	8002fa8 <BSP_LCD_GetYSize>
 8001868:	4603      	mov	r3, r0
 800186a:	3b28      	subs	r3, #40	@ 0x28
 800186c:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 800186e:	2302      	movs	r3, #2
 8001870:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001872:	f001 fb8d 	bl	8002f90 <BSP_LCD_GetXSize>
 8001876:	4603      	mov	r3, r0
 8001878:	4a4c      	ldr	r2, [pc, #304]	@ (80019ac <MENU_draw+0x154>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8001882:	2328      	movs	r3, #40	@ 0x28
 8001884:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e084      	b.n	8001996 <MENU_draw+0x13e>
		x = i*w;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001896:	4946      	ldr	r1, [pc, #280]	@ (80019b0 <MENU_draw+0x158>)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3324      	adds	r3, #36	@ 0x24
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fbfd 	bl	80030a8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	b298      	uxth	r0, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b299      	uxth	r1, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	b29c      	uxth	r4, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4622      	mov	r2, r4
 80018e8:	f001 fe1e 	bl	8003528 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 80018ec:	4930      	ldr	r1, [pc, #192]	@ (80019b0 <MENU_draw+0x158>)
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3324      	adds	r3, #36	@ 0x24
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fbea 	bl	80030d8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001904:	492a      	ldr	r1, [pc, #168]	@ (80019b0 <MENU_draw+0x158>)
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3320      	adds	r3, #32
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fbc6 	bl	80030a8 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b298      	uxth	r0, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	0052      	lsls	r2, r2, #1
 8001938:	4413      	add	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4413      	add	r3, r2
 8001942:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <MENU_draw+0x158>)
 8001950:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001952:	2303      	movs	r3, #3
 8001954:	f001 fc60 	bl	8003218 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	0052      	lsls	r2, r2, #1
 8001960:	4413      	add	r3, r2
 8001962:	b29a      	uxth	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4413      	add	r3, r2
 800196a:	b298      	uxth	r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	3310      	adds	r3, #16
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <MENU_draw+0x158>)
 8001988:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 800198a:	2303      	movs	r3, #3
 800198c:	f001 fc44 	bl	8003218 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b05      	cmp	r3, #5
 800199a:	f67f af77 	bls.w	800188c <MENU_draw+0x34>
	}
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	20000180 	.word	0x20000180
 80019ac:	aaaaaaab 	.word	0xaaaaaaab
 80019b0:	20000008 	.word	0x20000008

080019b4 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f001 fb8c 	bl	80030d8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019c0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80019c4:	f001 fb70 	bl	80030a8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80019c8:	4818      	ldr	r0, [pc, #96]	@ (8001a2c <MENU_hint+0x78>)
 80019ca:	f001 fb9f 	bl	800310c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DEMO-CODE", LEFT_MODE);
 80019ce:	2303      	movs	r3, #3
 80019d0:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <MENU_hint+0x7c>)
 80019d2:	210a      	movs	r1, #10
 80019d4:	2005      	movs	r0, #5
 80019d6:	f001 fc1f 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80019da:	4816      	ldr	r0, [pc, #88]	@ (8001a34 <MENU_hint+0x80>)
 80019dc:	f001 fb96 	bl	800310c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 80019e0:	2303      	movs	r3, #3
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <MENU_hint+0x84>)
 80019e4:	213c      	movs	r1, #60	@ 0x3c
 80019e6:	2005      	movs	r0, #5
 80019e8:	f001 fc16 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 80019ec:	2303      	movs	r3, #3
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <MENU_hint+0x88>)
 80019f0:	2150      	movs	r1, #80	@ 0x50
 80019f2:	2005      	movs	r0, #5
 80019f4:	f001 fc10 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80019f8:	2303      	movs	r3, #3
 80019fa:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <MENU_hint+0x8c>)
 80019fc:	216e      	movs	r1, #110	@ 0x6e
 80019fe:	2005      	movs	r0, #5
 8001a00:	f001 fc0a 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8001a04:	2303      	movs	r3, #3
 8001a06:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <MENU_hint+0x90>)
 8001a08:	2182      	movs	r1, #130	@ 0x82
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f001 fc04 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 8001a10:	2303      	movs	r3, #3
 8001a12:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <MENU_hint+0x94>)
 8001a14:	21a0      	movs	r1, #160	@ 0xa0
 8001a16:	2005      	movs	r0, #5
 8001a18:	f001 fbfe 	bl	8003218 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <MENU_hint+0x98>)
 8001a20:	21a0      	movs	r1, #160	@ 0xa0
 8001a22:	2005      	movs	r0, #5
 8001a24:	f001 fbf8 	bl	8003218 <BSP_LCD_DisplayStringAt>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000170 	.word	0x20000170
 8001a30:	08008cb4 	.word	0x08008cb4
 8001a34:	20000178 	.word	0x20000178
 8001a38:	08008cc0 	.word	0x08008cc0
 8001a3c:	08008cd4 	.word	0x08008cd4
 8001a40:	08008cec 	.word	0x08008cec
 8001a44:	08008d00 	.word	0x08008d00
 8001a48:	08008d18 	.word	0x08008d18
 8001a4c:	08008d2c 	.word	0x08008d2c

08001a50 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <MENU_get_transition+0x20>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <MENU_get_transition+0x20>)
 8001a5e:	2206      	movs	r2, #6
 8001a60:	701a      	strb	r2, [r3, #0]
	return item;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000004 	.word	0x20000004

08001a74 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001a74:	b598      	push	{r3, r4, r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001a78:	4830      	ldr	r0, [pc, #192]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001a7a:	f002 fa0b 	bl	8003e94 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001a7e:	f001 fa93 	bl	8002fa8 <BSP_LCD_GetYSize>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001a88:	889b      	ldrh	r3, [r3, #4]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001a90:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001a92:	f001 fa7d 	bl	8002f90 <BSP_LCD_GetXSize>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001a9c:	885b      	ldrh	r3, [r3, #2]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001aa4:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001aa6:	f001 fa7f 	bl	8002fa8 <BSP_LCD_GetYSize>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001ab0:	889b      	ldrh	r3, [r3, #4]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001ab8:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d039      	beq.n	8001b36 <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <MENU_check_transition+0xcc>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d135      	bne.n	8001b36 <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <MENU_check_transition+0xd4>)
 8001ad0:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001ad2:	f001 fa69 	bl	8002fa8 <BSP_LCD_GetYSize>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	3b28      	subs	r3, #40	@ 0x28
 8001ada:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001adc:	8892      	ldrh	r2, [r2, #4]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d229      	bcs.n	8001b36 <MENU_check_transition+0xc2>
 8001ae2:	f001 fa61 	bl	8002fa8 <BSP_LCD_GetYSize>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001aea:	8892      	ldrh	r2, [r2, #4]
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d922      	bls.n	8001b36 <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <MENU_check_transition+0xc8>)
 8001af2:	885b      	ldrh	r3, [r3, #2]
 8001af4:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001af6:	f001 fa4b 	bl	8002f90 <BSP_LCD_GetXSize>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <MENU_check_transition+0xd8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b08:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001b0c:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d902      	bls.n	8001b1c <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001b18:	2206      	movs	r2, #6
 8001b1a:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MENU_check_transition+0xd4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d106      	bne.n	8001b36 <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MENU_check_transition+0xd0>)
 8001b2a:	2206      	movs	r2, #6
 8001b2c:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MENU_check_transition+0xd4>)
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <MENU_check_transition+0xcc>)
 8001b34:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001b36:	bf00      	nop
 8001b38:	bd98      	pop	{r3, r4, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200003ec 	.word	0x200003ec
 8001b40:	20000004 	.word	0x20000004
 8001b44:	200000f8 	.word	0x200000f8
 8001b48:	200000f9 	.word	0x200000f9
 8001b4c:	aaaaaaab 	.word	0xaaaaaaab

08001b50 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <EXTI15_10_IRQHandler+0x40>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d014      	beq.n	8001b8a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <EXTI15_10_IRQHandler+0x40>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <EXTI15_10_IRQHandler+0x40>)
 8001b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b6a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001b6c:	f002 f986 	bl	8003e7c <BSP_TS_ITGetStatus>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001b76:	f002 fa3f 	bl	8003ff8 <BSP_TS_ITClear>
			MENU_check_transition();
 8001b7a:	f7ff ff7b 	bl	8001a74 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <EXTI15_10_IRQHandler+0x40>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a03      	ldr	r2, [pc, #12]	@ (8001b90 <EXTI15_10_IRQHandler+0x40>)
 8001b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b88:	6153      	str	r3, [r2, #20]
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <__NVIC_EnableIRQ>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_ClearPendingIRQ>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0c      	blt.n	8001bfc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <__NVIC_ClearPendingIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	3360      	adds	r3, #96	@ 0x60
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <PB_init+0x38>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <PB_init+0x38>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <PB_init+0x38>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <PB_init+0x3c>)
 8001c30:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <PB_init+0x3c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <PB_enableIRQ+0x58>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <PB_enableIRQ+0x58>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <PB_enableIRQ+0x58>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <PB_enableIRQ+0x5c>)
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <PB_enableIRQ+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <PB_enableIRQ+0x60>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <PB_enableIRQ+0x60>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <PB_enableIRQ+0x60>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <PB_enableIRQ+0x60>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001c8e:	2006      	movs	r0, #6
 8001c90:	f7ff ff9e 	bl	8001bd0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001c94:	2006      	movs	r0, #6
 8001c96:	f7ff ff7d 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <PB_pressed+0x20>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <PB_pressed+0x20>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	return pressed;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	200003f4 	.word	0x200003f4

08001cd4 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <EXTI0_IRQHandler+0x2c>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <EXTI0_IRQHandler+0x2c>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <EXTI0_IRQHandler+0x2c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <EXTI0_IRQHandler+0x30>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40013c00 	.word	0x40013c00
 8001d04:	200003f4 	.word	0x200003f4

08001d08 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1e <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001d22:	bf00      	nop
 8001d24:	e7fd      	b.n	8001d22 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2e <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <UsageFault_Handler+0x4>

08001d36 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001d64:	f002 f9ae 	bl	80040c4 <HAL_IncTick>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <SystemInit+0x60>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <SystemInit+0x60>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <SystemInit+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <SystemInit+0x64>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <SystemInit+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <SystemInit+0x64>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd0 <SystemInit+0x64>)
 8001d98:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <SystemInit+0x64>)
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <SystemInit+0x68>)
 8001da6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <SystemInit+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <SystemInit+0x64>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <SystemInit+0x60>)
 8001dbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dc0:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	24003010 	.word	0x24003010

08001dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e10 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ddc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dde:	e003      	b.n	8001de8 <LoopCopyDataInit>

08001de0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001de2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001de4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001de6:	3104      	adds	r1, #4

08001de8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001de8:	480b      	ldr	r0, [pc, #44]	@ (8001e18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001df0:	d3f6      	bcc.n	8001de0 <CopyDataInit>
  ldr  r2, =_sbss
 8001df2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001df4:	e002      	b.n	8001dfc <LoopFillZerobss>

08001df6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001df6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001df8:	f842 3b04 	str.w	r3, [r2], #4

08001dfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dfc:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e00:	d3f9      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e02:	f7ff ffb3 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f006 fabb 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0a:	f7fe fbd7 	bl	80005bc <main>
  bx  lr    
 8001e0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e10:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e14:	0800b8b4 	.word	0x0800b8b4
  ldr  r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e1c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001e20:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001e24:	20000808 	.word	0x20000808

08001e28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <CAN1_RX0_IRQHandler>

08001e2a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001e2e:	f000 feed 	bl	8002c0c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001e32:	20ca      	movs	r0, #202	@ 0xca
 8001e34:	f000 f95d 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001e38:	20c3      	movs	r0, #195	@ 0xc3
 8001e3a:	f000 f967 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f000 f964 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001e44:	2050      	movs	r0, #80	@ 0x50
 8001e46:	f000 f961 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001e4a:	20cf      	movs	r0, #207	@ 0xcf
 8001e4c:	f000 f951 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f95b 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001e56:	20c1      	movs	r0, #193	@ 0xc1
 8001e58:	f000 f958 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001e5c:	2030      	movs	r0, #48	@ 0x30
 8001e5e:	f000 f955 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001e62:	20ed      	movs	r0, #237	@ 0xed
 8001e64:	f000 f945 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001e68:	2064      	movs	r0, #100	@ 0x64
 8001e6a:	f000 f94f 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f94c 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001e74:	2012      	movs	r0, #18
 8001e76:	f000 f949 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001e7a:	2081      	movs	r0, #129	@ 0x81
 8001e7c:	f000 f946 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001e80:	20e8      	movs	r0, #232	@ 0xe8
 8001e82:	f000 f936 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001e86:	2085      	movs	r0, #133	@ 0x85
 8001e88:	f000 f940 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f93d 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001e92:	2078      	movs	r0, #120	@ 0x78
 8001e94:	f000 f93a 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001e98:	20cb      	movs	r0, #203	@ 0xcb
 8001e9a:	f000 f92a 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001e9e:	2039      	movs	r0, #57	@ 0x39
 8001ea0:	f000 f934 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001ea4:	202c      	movs	r0, #44	@ 0x2c
 8001ea6:	f000 f931 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f92e 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001eb0:	2034      	movs	r0, #52	@ 0x34
 8001eb2:	f000 f92b 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f000 f928 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001ebc:	20f7      	movs	r0, #247	@ 0xf7
 8001ebe:	f000 f918 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001ec2:	2020      	movs	r0, #32
 8001ec4:	f000 f922 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ec8:	20ea      	movs	r0, #234	@ 0xea
 8001eca:	f000 f912 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f91c 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f919 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001eda:	20b1      	movs	r0, #177	@ 0xb1
 8001edc:	f000 f909 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 f913 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ee6:	201b      	movs	r0, #27
 8001ee8:	f000 f910 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001eec:	20b6      	movs	r0, #182	@ 0xb6
 8001eee:	f000 f900 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f000 f90a 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ef8:	20a2      	movs	r0, #162	@ 0xa2
 8001efa:	f000 f907 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001efe:	20c0      	movs	r0, #192	@ 0xc0
 8001f00:	f000 f8f7 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001f04:	2010      	movs	r0, #16
 8001f06:	f000 f901 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001f0a:	20c1      	movs	r0, #193	@ 0xc1
 8001f0c:	f000 f8f1 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001f10:	2010      	movs	r0, #16
 8001f12:	f000 f8fb 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001f16:	20c5      	movs	r0, #197	@ 0xc5
 8001f18:	f000 f8eb 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001f1c:	2045      	movs	r0, #69	@ 0x45
 8001f1e:	f000 f8f5 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001f22:	2015      	movs	r0, #21
 8001f24:	f000 f8f2 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001f28:	20c7      	movs	r0, #199	@ 0xc7
 8001f2a:	f000 f8e2 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001f2e:	2090      	movs	r0, #144	@ 0x90
 8001f30:	f000 f8ec 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001f34:	2036      	movs	r0, #54	@ 0x36
 8001f36:	f000 f8dc 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001f3a:	20c8      	movs	r0, #200	@ 0xc8
 8001f3c:	f000 f8e6 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001f40:	20f2      	movs	r0, #242	@ 0xf2
 8001f42:	f000 f8d6 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f8e0 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001f4c:	20b0      	movs	r0, #176	@ 0xb0
 8001f4e:	f000 f8d0 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001f52:	20c2      	movs	r0, #194	@ 0xc2
 8001f54:	f000 f8da 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001f58:	20b6      	movs	r0, #182	@ 0xb6
 8001f5a:	f000 f8ca 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f000 f8d4 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001f64:	20a7      	movs	r0, #167	@ 0xa7
 8001f66:	f000 f8d1 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001f6a:	2027      	movs	r0, #39	@ 0x27
 8001f6c:	f000 f8ce 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f70:	2004      	movs	r0, #4
 8001f72:	f000 f8cb 	bl	800210c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001f76:	202a      	movs	r0, #42	@ 0x2a
 8001f78:	f000 f8bb 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 f8c5 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f8c2 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f8bf 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001f8e:	20ef      	movs	r0, #239	@ 0xef
 8001f90:	f000 f8bc 	bl	800210c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001f94:	202b      	movs	r0, #43	@ 0x2b
 8001f96:	f000 f8ac 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f8b6 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f000 f8b3 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 f8b0 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001fac:	203f      	movs	r0, #63	@ 0x3f
 8001fae:	f000 f8ad 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001fb2:	20f6      	movs	r0, #246	@ 0xf6
 8001fb4:	f000 f89d 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f000 f8a7 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f8a4 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001fc4:	2006      	movs	r0, #6
 8001fc6:	f000 f8a1 	bl	800210c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001fca:	202c      	movs	r0, #44	@ 0x2c
 8001fcc:	f000 f891 	bl	80020f2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001fd0:	20c8      	movs	r0, #200	@ 0xc8
 8001fd2:	f000 ff09 	bl	8002de8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001fd6:	2026      	movs	r0, #38	@ 0x26
 8001fd8:	f000 f88b 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f000 f895 	bl	800210c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001fe2:	20e0      	movs	r0, #224	@ 0xe0
 8001fe4:	f000 f885 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001fe8:	200f      	movs	r0, #15
 8001fea:	f000 f88f 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001fee:	2029      	movs	r0, #41	@ 0x29
 8001ff0:	f000 f88c 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001ff4:	2024      	movs	r0, #36	@ 0x24
 8001ff6:	f000 f889 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ffa:	200c      	movs	r0, #12
 8001ffc:	f000 f886 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002000:	200e      	movs	r0, #14
 8002002:	f000 f883 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002006:	2009      	movs	r0, #9
 8002008:	f000 f880 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800200c:	204e      	movs	r0, #78	@ 0x4e
 800200e:	f000 f87d 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002012:	2078      	movs	r0, #120	@ 0x78
 8002014:	f000 f87a 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002018:	203c      	movs	r0, #60	@ 0x3c
 800201a:	f000 f877 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800201e:	2009      	movs	r0, #9
 8002020:	f000 f874 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002024:	2013      	movs	r0, #19
 8002026:	f000 f871 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800202a:	2005      	movs	r0, #5
 800202c:	f000 f86e 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002030:	2017      	movs	r0, #23
 8002032:	f000 f86b 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002036:	2011      	movs	r0, #17
 8002038:	f000 f868 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f865 	bl	800210c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002042:	20e1      	movs	r0, #225	@ 0xe1
 8002044:	f000 f855 	bl	80020f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002048:	2000      	movs	r0, #0
 800204a:	f000 f85f 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800204e:	2016      	movs	r0, #22
 8002050:	f000 f85c 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002054:	201b      	movs	r0, #27
 8002056:	f000 f859 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800205a:	2004      	movs	r0, #4
 800205c:	f000 f856 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002060:	2011      	movs	r0, #17
 8002062:	f000 f853 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002066:	2007      	movs	r0, #7
 8002068:	f000 f850 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800206c:	2031      	movs	r0, #49	@ 0x31
 800206e:	f000 f84d 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002072:	2033      	movs	r0, #51	@ 0x33
 8002074:	f000 f84a 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002078:	2042      	movs	r0, #66	@ 0x42
 800207a:	f000 f847 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800207e:	2005      	movs	r0, #5
 8002080:	f000 f844 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002084:	200c      	movs	r0, #12
 8002086:	f000 f841 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800208a:	200a      	movs	r0, #10
 800208c:	f000 f83e 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002090:	2028      	movs	r0, #40	@ 0x28
 8002092:	f000 f83b 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002096:	202f      	movs	r0, #47	@ 0x2f
 8002098:	f000 f838 	bl	800210c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800209c:	200f      	movs	r0, #15
 800209e:	f000 f835 	bl	800210c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80020a2:	2011      	movs	r0, #17
 80020a4:	f000 f825 	bl	80020f2 <ili9341_WriteReg>
  LCD_Delay(200);
 80020a8:	20c8      	movs	r0, #200	@ 0xc8
 80020aa:	f000 fe9d 	bl	8002de8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80020ae:	2029      	movs	r0, #41	@ 0x29
 80020b0:	f000 f81f 	bl	80020f2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80020b4:	202c      	movs	r0, #44	@ 0x2c
 80020b6:	f000 f81c 	bl	80020f2 <ili9341_WriteReg>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}

080020be <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80020c2:	f000 fda3 	bl	8002c0c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80020c6:	2103      	movs	r1, #3
 80020c8:	20d3      	movs	r0, #211	@ 0xd3
 80020ca:	f000 f82c 	bl	8002126 <ili9341_ReadData>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29b      	uxth	r3, r3
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80020da:	2029      	movs	r0, #41	@ 0x29
 80020dc:	f000 f809 	bl	80020f2 <ili9341_WriteReg>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80020e8:	2028      	movs	r0, #40	@ 0x28
 80020ea:	f000 f802 	bl	80020f2 <ili9341_WriteReg>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fe1e 	bl	8002d40 <LCD_IO_WriteReg>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fdef 	bl	8002cfc <LCD_IO_WriteData>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	460a      	mov	r2, r1
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	4613      	mov	r3, r2
 8002134:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002136:	797a      	ldrb	r2, [r7, #5]
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fe21 	bl	8002d84 <LCD_IO_ReadData>
 8002142:	4603      	mov	r3, r0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002150:	23f0      	movs	r3, #240	@ 0xf0
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002160:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa59 	bl	8002634 <stmpe811_GetInstance>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2bff      	cmp	r3, #255	@ 0xff
 800218a:	d112      	bne.n	80021b2 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800218c:	2000      	movs	r0, #0
 800218e:	f000 fa51 	bl	8002634 <stmpe811_GetInstance>
 8002192:	4603      	mov	r3, r0
 8002194:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d80a      	bhi.n	80021b2 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	b2d1      	uxtb	r1, r2
 80021a2:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <stmpe811_Init+0x4c>)
 80021a4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80021a6:	f000 fe2a 	bl	8002dfe <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f807 	bl	80021c0 <stmpe811_Reset>
    }
  }
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200003f8 	.word	0x200003f8

080021c0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2202      	movs	r2, #2
 80021d0:	2103      	movs	r1, #3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fe1f 	bl	8002e16 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80021d8:	200a      	movs	r0, #10
 80021da:	f000 fe58 	bl	8002e8e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	2103      	movs	r1, #3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fe15 	bl	8002e16 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80021ec:	2002      	movs	r0, #2
 80021ee:	f000 fe4e 	bl	8002e8e <IOE_Delay>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80021fa:	b590      	push	{r4, r7, lr}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002204:	f000 fdfb 	bl	8002dfe <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fe14 	bl	8002e3c <IOE_Read>
 8002214:	4603      	mov	r3, r0
 8002216:	b21b      	sxth	r3, r3
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fe0a 	bl	8002e3c <IOE_Read>
 8002228:	4603      	mov	r3, r0
 800222a:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800222c:	4323      	orrs	r3, r4
 800222e:	b21b      	sxth	r3, r3
 8002230:	b29b      	uxth	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2109      	movs	r1, #9
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fdf4 	bl	8002e3c <IOE_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	2109      	movs	r1, #9
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fdd4 	bl	8002e16 <IOE_Write>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2109      	movs	r1, #9
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fdd6 	bl	8002e3c <IOE_Read>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	2109      	movs	r1, #9
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fdb6 	bl	8002e16 <IOE_Write>
    
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	460a      	mov	r2, r1
 80022bc:	80fb      	strh	r3, [r7, #6]
 80022be:	4613      	mov	r3, r2
 80022c0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	210a      	movs	r1, #10
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fdb5 	bl	8002e3c <IOE_Read>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	797b      	ldrb	r3, [r7, #5]
 80022da:	4313      	orrs	r3, r2
 80022dc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	210a      	movs	r1, #10
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fd95 	bl	8002e16 <IOE_Write>
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	460a      	mov	r2, r1
 80022fe:	80fb      	strh	r3, [r7, #6]
 8002300:	4613      	mov	r3, r2
 8002302:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	210a      	movs	r1, #10
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fd94 	bl	8002e3c <IOE_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002318:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800231c:	43db      	mvns	r3, r3
 800231e:	b25a      	sxtb	r2, r3
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002324:	4013      	ands	r3, r2
 8002326:	b25b      	sxtb	r3, r3
 8002328:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	210a      	movs	r1, #10
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fd6f 	bl	8002e16 <IOE_Write>
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	80fb      	strh	r3, [r7, #6]
 800234c:	4613      	mov	r3, r2
 800234e:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	210b      	movs	r1, #11
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd70 	bl	8002e3c <IOE_Read>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	797b      	ldrb	r3, [r7, #5]
 8002362:	4013      	ands	r3, r2
 8002364:	b2db      	uxtb	r3, r3
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	460a      	mov	r2, r1
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	4613      	mov	r3, r2
 800237c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	797a      	ldrb	r2, [r7, #5]
 8002384:	210b      	movs	r1, #11
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fd45 	bl	8002e16 <IOE_Write>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2117      	movs	r1, #23
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fd46 	bl	8002e3c <IOE_Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	b25a      	sxtb	r2, r3
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c0:	4013      	ands	r3, r2
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	2117      	movs	r1, #23
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fd21 	bl	8002e16 <IOE_Write>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2104      	movs	r1, #4
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd25 	bl	8002e3c <IOE_Read>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	2104      	movs	r1, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fd05 	bl	8002e16 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	21f0      	movs	r1, #240	@ 0xf0
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ffbf 	bl	8002394 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	f023 0303 	bic.w	r3, r3, #3
 800241c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	2104      	movs	r1, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fcf5 	bl	8002e16 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2249      	movs	r2, #73	@ 0x49
 8002432:	2120      	movs	r1, #32
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fcee 	bl	8002e16 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800243a:	2002      	movs	r0, #2
 800243c:	f000 fd27 	bl	8002e8e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2201      	movs	r2, #1
 8002446:	2121      	movs	r1, #33	@ 0x21
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fce4 	bl	8002e16 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	229a      	movs	r2, #154	@ 0x9a
 8002454:	2141      	movs	r1, #65	@ 0x41
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fcdd 	bl	8002e16 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2201      	movs	r2, #1
 8002462:	214a      	movs	r1, #74	@ 0x4a
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fcd6 	bl	8002e16 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2201      	movs	r2, #1
 8002470:	214b      	movs	r1, #75	@ 0x4b
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fccf 	bl	8002e16 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2200      	movs	r2, #0
 800247e:	214b      	movs	r1, #75	@ 0x4b
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fcc8 	bl	8002e16 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2201      	movs	r2, #1
 800248c:	2156      	movs	r1, #86	@ 0x56
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fcc1 	bl	8002e16 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2201      	movs	r2, #1
 800249a:	2158      	movs	r1, #88	@ 0x58
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fcba 	bl	8002e16 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2201      	movs	r2, #1
 80024a8:	2140      	movs	r1, #64	@ 0x40
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fcb3 	bl	8002e16 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	22ff      	movs	r2, #255	@ 0xff
 80024b6:	210b      	movs	r1, #11
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fcac 	bl	8002e16 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80024be:	2002      	movs	r0, #2
 80024c0:	f000 fce5 	bl	8002e8e <IOE_Delay>
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2140      	movs	r1, #64	@ 0x40
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fcab 	bl	8002e3c <IOE_Read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ec:	2b80      	cmp	r3, #128	@ 0x80
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	214c      	movs	r1, #76	@ 0x4c
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fc99 	bl	8002e3c <IOE_Read>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e00d      	b.n	8002532 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2201      	movs	r2, #1
 800251c:	214b      	movs	r1, #75	@ 0x4b
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fc79 	bl	8002e16 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2200      	movs	r2, #0
 800252a:	214b      	movs	r1, #75	@ 0x4b
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fc72 	bl	8002e16 <IOE_Write>
  }
  
  return ret;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	b2d8      	uxtb	r0, r3
 800254e:	f107 0210 	add.w	r2, r7, #16
 8002552:	2304      	movs	r3, #4
 8002554:	21d7      	movs	r1, #215	@ 0xd7
 8002556:	f000 fc84 	bl	8002e62 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800255a:	7c3b      	ldrb	r3, [r7, #16]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	7c7b      	ldrb	r3, [r7, #17]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	431a      	orrs	r2, r3
 8002564:	7cbb      	ldrb	r3, [r7, #18]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4313      	orrs	r3, r2
 800256a:	7cfa      	ldrb	r2, [r7, #19]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	0d1b      	lsrs	r3, r3, #20
 8002574:	b29a      	uxth	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2201      	movs	r2, #1
 8002590:	214b      	movs	r1, #75	@ 0x4b
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fc3f 	bl	8002e16 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2200      	movs	r2, #0
 800259e:	214b      	movs	r1, #75	@ 0x4b
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fc38 	bl	8002e16 <IOE_Write>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80025b8:	f000 fc27 	bl	8002e0a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	211f      	movs	r1, #31
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe76 	bl	80022b2 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe36 	bl	800223a <stmpe811_EnableGlobalIT>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe47 	bl	8002276 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	211f      	movs	r1, #31
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe81 	bl	80022f4 <stmpe811_DisableITSource>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	211f      	movs	r1, #31
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe99 	bl	8002340 <stmpe811_ReadGITStatus>
 800260e:	4603      	mov	r3, r0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	211f      	movs	r1, #31
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fea1 	bl	800236e <stmpe811_ClearGlobalIT>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e00b      	b.n	8002660 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <stmpe811_GetInstance+0x40>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	461a      	mov	r2, r3
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	e006      	b.n	8002668 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d9f0      	bls.n	8002648 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002666:	23ff      	movs	r3, #255	@ 0xff
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	200003f8 	.word	0x200003f8

08002678 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10e      	bne.n	80026a6 <BSP_LED_Init+0x2e>
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <BSP_LED_Init+0x9c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <BSP_LED_Init+0x9c>)
 8002692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002696:	6313      	str	r3, [r2, #48]	@ 0x30
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <BSP_LED_Init+0x9c>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	e010      	b.n	80026c8 <BSP_LED_Init+0x50>
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <BSP_LED_Init+0x50>
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <BSP_LED_Init+0x9c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <BSP_LED_Init+0x9c>)
 80026b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <BSP_LED_Init+0x9c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <BSP_LED_Init+0xa0>)
 80026cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80026da:	2302      	movs	r3, #2
 80026dc:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <BSP_LED_Init+0xa4>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	f107 0214 	add.w	r2, r7, #20
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fa93 	bl	8004c18 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a09      	ldr	r2, [pc, #36]	@ (800271c <BSP_LED_Init+0xa4>)
 80026f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <BSP_LED_Init+0xa0>)
 80026fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002702:	2200      	movs	r2, #0
 8002704:	4619      	mov	r1, r3
 8002706:	f002 fc33 	bl	8004f70 <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	08008d58 	.word	0x08008d58
 800271c:	20000160 	.word	0x20000160

08002720 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4a07      	ldr	r2, [pc, #28]	@ (800274c <BSP_LED_On+0x2c>)
 800272e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <BSP_LED_On+0x30>)
 8002736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800273a:	2201      	movs	r2, #1
 800273c:	4619      	mov	r1, r3
 800273e:	f002 fc17 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000160 	.word	0x20000160
 8002750:	08008d58 	.word	0x08008d58

08002754 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <BSP_LED_Off+0x2c>)
 8002762:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4a06      	ldr	r2, [pc, #24]	@ (8002784 <BSP_LED_Off+0x30>)
 800276a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800276e:	2200      	movs	r2, #0
 8002770:	4619      	mov	r1, r3
 8002772:	f002 fbfd 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000160 	.word	0x20000160
 8002784:	08008d58 	.word	0x08008d58

08002788 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <BSP_LED_Toggle+0x2c>)
 8002796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <BSP_LED_Toggle+0x30>)
 800279e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f002 fbfc 	bl	8004fa2 <HAL_GPIO_TogglePin>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000160 	.word	0x20000160
 80027b8:	08008d58 	.word	0x08008d58

080027bc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <I2Cx_MspInit+0xdc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d15f      	bne.n	800288e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b32      	ldr	r3, [pc, #200]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a31      	ldr	r2, [pc, #196]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a2a      	ldr	r2, [pc, #168]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b28      	ldr	r3, [pc, #160]	@ (800289c <I2Cx_MspInit+0xe0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800280c:	2312      	movs	r3, #18
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002818:	2304      	movs	r3, #4
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	481f      	ldr	r0, [pc, #124]	@ (80028a0 <I2Cx_MspInit+0xe4>)
 8002824:	f002 f9f8 	bl	8004c18 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800282c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	481b      	ldr	r0, [pc, #108]	@ (80028a4 <I2Cx_MspInit+0xe8>)
 8002836:	f002 f9ef 	bl	8004c18 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <I2Cx_MspInit+0xe0>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a16      	ldr	r2, [pc, #88]	@ (800289c <I2Cx_MspInit+0xe0>)
 8002844:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <I2Cx_MspInit+0xe0>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <I2Cx_MspInit+0xe0>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a10      	ldr	r2, [pc, #64]	@ (800289c <I2Cx_MspInit+0xe0>)
 800285c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002860:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <I2Cx_MspInit+0xe0>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <I2Cx_MspInit+0xe0>)
 8002868:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800286c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	210f      	movs	r1, #15
 8002872:	2048      	movs	r0, #72	@ 0x48
 8002874:	f001 fd45 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002878:	2048      	movs	r0, #72	@ 0x48
 800287a:	f001 fd5e 	bl	800433a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	210f      	movs	r1, #15
 8002882:	2049      	movs	r0, #73	@ 0x49
 8002884:	f001 fd3d 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002888:	2049      	movs	r0, #73	@ 0x49
 800288a:	f001 fd56 	bl	800433a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40005c00 	.word	0x40005c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020800 	.word	0x40020800

080028a8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80028ac:	4814      	ldr	r0, [pc, #80]	@ (8002900 <I2Cx_Init+0x58>)
 80028ae:	f003 f83b 	bl	8005928 <HAL_I2C_GetState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d121      	bne.n	80028fc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <I2Cx_Init+0x58>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <I2Cx_Init+0x5c>)
 80028bc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <I2Cx_Init+0x58>)
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <I2Cx_Init+0x60>)
 80028c2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <I2Cx_Init+0x58>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <I2Cx_Init+0x58>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <I2Cx_Init+0x58>)
 80028d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028d6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <I2Cx_Init+0x58>)
 80028da:	2200      	movs	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <I2Cx_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <I2Cx_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <I2Cx_Init+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80028f0:	4803      	ldr	r0, [pc, #12]	@ (8002900 <I2Cx_Init+0x58>)
 80028f2:	f7ff ff63 	bl	80027bc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80028f6:	4802      	ldr	r0, [pc, #8]	@ (8002900 <I2Cx_Init+0x58>)
 80028f8:	f002 fb6e 	bl	8004fd8 <HAL_I2C_Init>
  }
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200003fc 	.word	0x200003fc
 8002904:	40005c00 	.word	0x40005c00
 8002908:	000186a0 	.word	0x000186a0

0800290c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <I2Cx_ITConfig+0x58>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <I2Cx_ITConfig+0x58>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <I2Cx_ITConfig+0x58>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800292e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002932:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800293c:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <I2Cx_ITConfig+0x5c>)
 800293e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	@ (800296c <I2Cx_ITConfig+0x60>)
 8002946:	f002 f967 	bl	8004c18 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800294a:	2200      	movs	r2, #0
 800294c:	210f      	movs	r1, #15
 800294e:	2028      	movs	r0, #40	@ 0x28
 8002950:	f001 fcd7 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002954:	2028      	movs	r0, #40	@ 0x28
 8002956:	f001 fcf0 	bl	800433a <HAL_NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	10210000 	.word	0x10210000
 800296c:	40020000 	.word	0x40020000

08002970 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af04      	add	r7, sp, #16
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
 800297a:	460b      	mov	r3, r1
 800297c:	71bb      	strb	r3, [r7, #6]
 800297e:	4613      	mov	r3, r2
 8002980:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	b299      	uxth	r1, r3
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	b29a      	uxth	r2, r3
 800298e:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <I2Cx_WriteData+0x4c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2301      	movs	r3, #1
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	1d7b      	adds	r3, r7, #5
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2301      	movs	r3, #1
 800299e:	4808      	ldr	r0, [pc, #32]	@ (80029c0 <I2Cx_WriteData+0x50>)
 80029a0:	f002 fca2 	bl	80052e8 <HAL_I2C_Mem_Write>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80029ae:	f000 f863 	bl	8002a78 <I2Cx_Error>
  }        
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000168 	.word	0x20000168
 80029c0:	200003fc 	.word	0x200003fc

080029c4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	b299      	uxth	r1, r3
 80029e0:	79bb      	ldrb	r3, [r7, #6]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <I2Cx_ReadData+0x50>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f107 030e 	add.w	r3, r7, #14
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2301      	movs	r3, #1
 80029f6:	4808      	ldr	r0, [pc, #32]	@ (8002a18 <I2Cx_ReadData+0x54>)
 80029f8:	f002 fd70 	bl	80054dc <HAL_I2C_Mem_Read>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a06:	f000 f837 	bl	8002a78 <I2Cx_Error>
  
  }
  return value;
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000168 	.word	0x20000168
 8002a18:	200003fc 	.word	0x200003fc

08002a1c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af04      	add	r7, sp, #16
 8002a22:	603a      	str	r2, [r7, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	71bb      	strb	r3, [r7, #6]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <I2Cx_ReadBuffer+0x54>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	88bb      	ldrh	r3, [r7, #4]
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4809      	ldr	r0, [pc, #36]	@ (8002a74 <I2Cx_ReadBuffer+0x58>)
 8002a50:	f002 fd44 	bl	80054dc <HAL_I2C_Mem_Read>
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e002      	b.n	8002a68 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a62:	f000 f809 	bl	8002a78 <I2Cx_Error>

    return 1;
 8002a66:	2301      	movs	r3, #1
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000168 	.word	0x20000168
 8002a74:	200003fc 	.word	0x200003fc

08002a78 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002a7c:	4803      	ldr	r0, [pc, #12]	@ (8002a8c <I2Cx_Error+0x14>)
 8002a7e:	f002 fbef 	bl	8005260 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002a82:	f7ff ff11 	bl	80028a8 <I2Cx_Init>
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200003fc 	.word	0x200003fc

08002a90 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002a94:	4819      	ldr	r0, [pc, #100]	@ (8002afc <SPIx_Init+0x6c>)
 8002a96:	f005 f9d4 	bl	8007e42 <HAL_SPI_GetState>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d12b      	bne.n	8002af8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <SPIx_Init+0x6c>)
 8002aa2:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <SPIx_Init+0x70>)
 8002aa4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <SPIx_Init+0x6c>)
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <SPIx_Init+0x6c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <SPIx_Init+0x6c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <SPIx_Init+0x6c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <SPIx_Init+0x6c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <SPIx_Init+0x6c>)
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002aca:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <SPIx_Init+0x6c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <SPIx_Init+0x6c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002ad6:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <SPIx_Init+0x6c>)
 8002ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002adc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <SPIx_Init+0x6c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <SPIx_Init+0x6c>)
 8002ae6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aea:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002aec:	4803      	ldr	r0, [pc, #12]	@ (8002afc <SPIx_Init+0x6c>)
 8002aee:	f000 f853 	bl	8002b98 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002af2:	4802      	ldr	r0, [pc, #8]	@ (8002afc <SPIx_Init+0x6c>)
 8002af4:	f004 fc1b 	bl	800732e <HAL_SPI_Init>
  } 
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000450 	.word	0x20000450
 8002b00:	40015000 	.word	0x40015000

08002b04 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <SPIx_Read+0x38>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f107 0108 	add.w	r1, r7, #8
 8002b1e:	4808      	ldr	r0, [pc, #32]	@ (8002b40 <SPIx_Read+0x3c>)
 8002b20:	f004 fe02 	bl	8007728 <HAL_SPI_Receive>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b2e:	f000 f827 	bl	8002b80 <SPIx_Error>
  }
  
  return readvalue;
 8002b32:	68bb      	ldr	r3, [r7, #8]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000016c 	.word	0x2000016c
 8002b40:	20000450 	.word	0x20000450

08002b44 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <SPIx_Write+0x34>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1db9      	adds	r1, r7, #6
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <SPIx_Write+0x38>)
 8002b5c:	f004 fc8e 	bl	800747c <HAL_SPI_Transmit>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b6a:	f000 f809 	bl	8002b80 <SPIx_Error>
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000016c 	.word	0x2000016c
 8002b7c:	20000450 	.word	0x20000450

08002b80 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002b84:	4803      	ldr	r0, [pc, #12]	@ (8002b94 <SPIx_Error+0x14>)
 8002b86:	f004 fc3d 	bl	8007404 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002b8a:	f7ff ff81 	bl	8002a90 <SPIx_Init>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000450 	.word	0x20000450

08002b98 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba8:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bae:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002bc6:	f043 0320 	orr.w	r3, r3, #32
 8002bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <SPIx_MspInit+0x6c>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002bd8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002be6:	2301      	movs	r3, #1
 8002be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002bea:	2305      	movs	r3, #5
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <SPIx_MspInit+0x70>)
 8002bf6:	f002 f80f 	bl	8004c18 <HAL_GPIO_Init>
}
 8002bfa:	bf00      	nop
 8002bfc:	3728      	adds	r7, #40	@ 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40021400 	.word	0x40021400

08002c0c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002c12:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <LCD_IO_Init+0xe0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d164      	bne.n	8002ce4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002c1a:	4b34      	ldr	r3, [pc, #208]	@ (8002cec <LCD_IO_Init+0xe0>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	4a31      	ldr	r2, [pc, #196]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c2a:	f043 0308 	orr.w	r3, r3, #8
 8002c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c30:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	4827      	ldr	r0, [pc, #156]	@ (8002cf4 <LCD_IO_Init+0xe8>)
 8002c56:	f001 ffdf 	bl	8004c18 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b24      	ldr	r3, [pc, #144]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c84:	2302      	movs	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4819      	ldr	r0, [pc, #100]	@ (8002cf4 <LCD_IO_Init+0xe8>)
 8002c90:	f001 ffc2 	bl	8004c18 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <LCD_IO_Init+0xe4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <LCD_IO_Init+0xec>)
 8002cc8:	f001 ffa6 	bl	8004c18 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2104      	movs	r1, #4
 8002cd0:	4809      	ldr	r0, [pc, #36]	@ (8002cf8 <LCD_IO_Init+0xec>)
 8002cd2:	f002 f94d 	bl	8004f70 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2104      	movs	r1, #4
 8002cda:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <LCD_IO_Init+0xec>)
 8002cdc:	f002 f948 	bl	8004f70 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002ce0:	f7ff fed6 	bl	8002a90 <SPIx_Init>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200004a8 	.word	0x200004a8
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40020800 	.word	0x40020800

08002cfc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d06:	2201      	movs	r2, #1
 8002d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d0c:	480a      	ldr	r0, [pc, #40]	@ (8002d38 <LCD_IO_WriteData+0x3c>)
 8002d0e:	f002 f92f 	bl	8004f70 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002d12:	2200      	movs	r2, #0
 8002d14:	2104      	movs	r1, #4
 8002d16:	4809      	ldr	r0, [pc, #36]	@ (8002d3c <LCD_IO_WriteData+0x40>)
 8002d18:	f002 f92a 	bl	8004f70 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff10 	bl	8002b44 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d24:	2201      	movs	r2, #1
 8002d26:	2104      	movs	r1, #4
 8002d28:	4804      	ldr	r0, [pc, #16]	@ (8002d3c <LCD_IO_WriteData+0x40>)
 8002d2a:	f002 f921 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40020800 	.word	0x40020800

08002d40 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d50:	480a      	ldr	r0, [pc, #40]	@ (8002d7c <LCD_IO_WriteReg+0x3c>)
 8002d52:	f002 f90d 	bl	8004f70 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002d56:	2200      	movs	r2, #0
 8002d58:	2104      	movs	r1, #4
 8002d5a:	4809      	ldr	r0, [pc, #36]	@ (8002d80 <LCD_IO_WriteReg+0x40>)
 8002d5c:	f002 f908 	bl	8004f70 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feed 	bl	8002b44 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <LCD_IO_WriteReg+0x40>)
 8002d70:	f002 f8fe 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40020800 	.word	0x40020800

08002d84 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	80fb      	strh	r3, [r7, #6]
 8002d90:	4613      	mov	r3, r2
 8002d92:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	4810      	ldr	r0, [pc, #64]	@ (8002de0 <LCD_IO_ReadData+0x5c>)
 8002d9e:	f002 f8e7 	bl	8004f70 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002da8:	480e      	ldr	r0, [pc, #56]	@ (8002de4 <LCD_IO_ReadData+0x60>)
 8002daa:	f002 f8e1 	bl	8004f70 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fec7 	bl	8002b44 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002db6:	797b      	ldrb	r3, [r7, #5]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fea3 	bl	8002b04 <SPIx_Read>
 8002dbe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dc6:	4807      	ldr	r0, [pc, #28]	@ (8002de4 <LCD_IO_ReadData+0x60>)
 8002dc8:	f002 f8d2 	bl	8004f70 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2104      	movs	r1, #4
 8002dd0:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <LCD_IO_ReadData+0x5c>)
 8002dd2:	f002 f8cd 	bl	8004f70 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00

08002de8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f987 	bl	8004104 <HAL_Delay>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002e02:	f7ff fd51 	bl	80028a8 <I2Cx_Init>
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002e0e:	f7ff fd7d 	bl	800290c <I2Cx_ITConfig>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
 8002e20:	460b      	mov	r3, r1
 8002e22:	71bb      	strb	r3, [r7, #6]
 8002e24:	4613      	mov	r3, r2
 8002e26:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002e28:	797a      	ldrb	r2, [r7, #5]
 8002e2a:	79b9      	ldrb	r1, [r7, #6]
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd9e 	bl	8002970 <I2Cx_WriteData>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	460a      	mov	r2, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002e4c:	79ba      	ldrb	r2, [r7, #6]
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fdb6 	bl	80029c4 <I2Cx_ReadData>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	603a      	str	r2, [r7, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
 8002e70:	460b      	mov	r3, r1
 8002e72:	71bb      	strb	r3, [r7, #6]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002e78:	88bb      	ldrh	r3, [r7, #4]
 8002e7a:	79b9      	ldrb	r1, [r7, #6]
 8002e7c:	79f8      	ldrb	r0, [r7, #7]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	f7ff fdcc 	bl	8002a1c <I2Cx_ReadBuffer>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 f934 	bl	8004104 <HAL_Delay>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <BSP_LCD_Init_Flipped+0x14>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8002eae:	f000 f805 	bl	8002ebc <BSP_LCD_Init>
 8002eb2:	4603      	mov	r3, r0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200005e4 	.word	0x200005e4

08002ebc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f7c <BSP_LCD_Init+0xc0>)
 8002ec4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ec8:	2209      	movs	r2, #9
 8002eca:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ed2:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ed4:	221d      	movs	r2, #29
 8002ed6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002ed8:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002eda:	2203      	movs	r2, #3
 8002edc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002ede:	4b26      	ldr	r3, [pc, #152]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ee0:	f240 120d 	movw	r2, #269	@ 0x10d
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ee8:	f240 1243 	movw	r2, #323	@ 0x143
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002eee:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ef0:	f240 1217 	movw	r2, #279	@ 0x117
 8002ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002ef8:	f240 1247 	movw	r2, #327	@ 0x147
 8002efc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <BSP_LCD_Init+0xc4>)
 8002f18:	2208      	movs	r2, #8
 8002f1a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <BSP_LCD_Init+0xc4>)
 8002f1e:	22c0      	movs	r2, #192	@ 0xc0
 8002f20:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002f22:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <BSP_LCD_Init+0xc4>)
 8002f24:	2204      	movs	r2, #4
 8002f26:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <BSP_LCD_Init+0xc4>)
 8002f2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002f30:	4813      	ldr	r0, [pc, #76]	@ (8002f80 <BSP_LCD_Init+0xc4>)
 8002f32:	f003 ffb3 	bl	8006e9c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002f4e:	f000 fb7d 	bl	800364c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002f52:	4809      	ldr	r0, [pc, #36]	@ (8002f78 <BSP_LCD_Init+0xbc>)
 8002f54:	f003 f84e 	bl	8005ff4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <BSP_LCD_Init+0xc8>)
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f88 <BSP_LCD_Init+0xcc>)
 8002f5c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <BSP_LCD_Init+0xc8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002f66:	f000 fd85 	bl	8003a74 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f6a:	4808      	ldr	r0, [pc, #32]	@ (8002f8c <BSP_LCD_Init+0xd0>)
 8002f6c:	f000 f8ce 	bl	800310c <BSP_LCD_SetFont>

  return LCD_OK;
 8002f70:	2300      	movs	r3, #0
}  
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200004ac 	.word	0x200004ac
 8002f7c:	40016800 	.word	0x40016800
 8002f80:	20000594 	.word	0x20000594
 8002f84:	200005e0 	.word	0x200005e0
 8002f88:	20000100 	.word	0x20000100
 8002f8c:	20000170 	.word	0x20000170

08002f90 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <BSP_LCD_GetXSize+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4798      	blx	r3
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200005e0 	.word	0x200005e0

08002fa8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002fac:	4b03      	ldr	r3, [pc, #12]	@ (8002fbc <BSP_LCD_GetYSize+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	4798      	blx	r3
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200005e0 	.word	0x200005e0

08002fc0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b090      	sub	sp, #64	@ 0x40
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002fd0:	f7ff ffde 	bl	8002f90 <BSP_LCD_GetXSize>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002fdc:	f7ff ffe4 	bl	8002fa8 <BSP_LCD_GetYSize>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8002fec:	23ff      	movs	r3, #255	@ 0xff
 8002fee:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003006:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800300c:	2307      	movs	r3, #7
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003010:	f7ff ffbe 	bl	8002f90 <BSP_LCD_GetXSize>
 8003014:	4603      	mov	r3, r0
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003018:	f7ff ffc6 	bl	8002fa8 <BSP_LCD_GetYSize>
 800301c:	4603      	mov	r3, r0
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	4619      	mov	r1, r3
 8003028:	4814      	ldr	r0, [pc, #80]	@ (800307c <BSP_LCD_LayerDefaultInit+0xbc>)
 800302a:	f003 f8bd 	bl	80061a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	4913      	ldr	r1, [pc, #76]	@ (8003080 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3304      	adds	r3, #4
 800303e:	f04f 32ff 	mov.w	r2, #4294967295
 8003042:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	490e      	ldr	r1, [pc, #56]	@ (8003080 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3308      	adds	r3, #8
 8003054:	4a0b      	ldr	r2, [pc, #44]	@ (8003084 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003056:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	4909      	ldr	r1, [pc, #36]	@ (8003080 <BSP_LCD_LayerDefaultInit+0xc0>)
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800306a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <BSP_LCD_LayerDefaultInit+0xbc>)
 800306e:	f003 f8d9 	bl	8006224 <HAL_LTDC_EnableDither>
}
 8003072:	bf00      	nop
 8003074:	3740      	adds	r7, #64	@ 0x40
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200004ac 	.word	0x200004ac
 8003080:	200005c8 	.word	0x200005c8
 8003084:	20000170 	.word	0x20000170

08003088 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <BSP_LCD_SelectLayer+0x1c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	200005c4 	.word	0x200005c4

080030a8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <BSP_LCD_SetTextColor+0x28>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4907      	ldr	r1, [pc, #28]	@ (80030d4 <BSP_LCD_SetTextColor+0x2c>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	200005c4 	.word	0x200005c4
 80030d4:	200005c8 	.word	0x200005c8

080030d8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <BSP_LCD_SetBackColor+0x2c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4908      	ldr	r1, [pc, #32]	@ (8003108 <BSP_LCD_SetBackColor+0x30>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3304      	adds	r3, #4
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	200005c4 	.word	0x200005c4
 8003108:	200005c8 	.word	0x200005c8

0800310c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <BSP_LCD_SetFont+0x2c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4908      	ldr	r1, [pc, #32]	@ (800313c <BSP_LCD_SetFont+0x30>)
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3308      	adds	r3, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	200005c4 	.word	0x200005c4
 800313c:	200005c8 	.word	0x200005c8

08003140 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003148:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <BSP_LCD_Clear+0x48>)
 800314a:	681c      	ldr	r4, [r3, #0]
 800314c:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <BSP_LCD_Clear+0x48>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0e      	ldr	r2, [pc, #56]	@ (800318c <BSP_LCD_Clear+0x4c>)
 8003152:	2134      	movs	r1, #52	@ 0x34
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	335c      	adds	r3, #92	@ 0x5c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461e      	mov	r6, r3
 8003160:	f7ff ff16 	bl	8002f90 <BSP_LCD_GetXSize>
 8003164:	4605      	mov	r5, r0
 8003166:	f7ff ff1f 	bl	8002fa8 <BSP_LCD_GetYSize>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	2300      	movs	r3, #0
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	462a      	mov	r2, r5
 8003178:	4631      	mov	r1, r6
 800317a:	4620      	mov	r0, r4
 800317c:	f000 fc42 	bl	8003a04 <FillBuffer>
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	200005c4 	.word	0x200005c4
 800318c:	200004ac 	.word	0x200004ac

08003190 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
 800319a:	460b      	mov	r3, r1
 800319c:	80bb      	strh	r3, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <BSP_LCD_DisplayChar+0x80>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <BSP_LCD_DisplayChar+0x84>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3308      	adds	r3, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <BSP_LCD_DisplayChar+0x80>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4c14      	ldr	r4, [pc, #80]	@ (8003214 <BSP_LCD_DisplayChar+0x84>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4423      	add	r3, r4
 80031ce:	3308      	adds	r3, #8
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031d4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <BSP_LCD_DisplayChar+0x80>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003214 <BSP_LCD_DisplayChar+0x84>)
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4423      	add	r3, r4
 80031e8:	3308      	adds	r3, #8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	889b      	ldrh	r3, [r3, #4]
 80031ee:	3307      	adds	r3, #7
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da00      	bge.n	80031f6 <BSP_LCD_DisplayChar+0x66>
 80031f4:	3307      	adds	r3, #7
 80031f6:	10db      	asrs	r3, r3, #3
 80031f8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031fc:	18ca      	adds	r2, r1, r3
 80031fe:	88b9      	ldrh	r1, [r7, #4]
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fb44 	bl	8003890 <DrawChar>
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	200005c4 	.word	0x200005c4
 8003214:	200005c8 	.word	0x200005c8

08003218 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60ba      	str	r2, [r7, #8]
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	81fb      	strh	r3, [r7, #14]
 8003226:	460b      	mov	r3, r1
 8003228:	81bb      	strh	r3, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800322e:	2301      	movs	r3, #1
 8003230:	83fb      	strh	r3, [r7, #30]
 8003232:	2300      	movs	r3, #0
 8003234:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003242:	e002      	b.n	800324a <BSP_LCD_DisplayStringAt+0x32>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	3301      	adds	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	617a      	str	r2, [r7, #20]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f6      	bne.n	8003244 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003256:	f7ff fe9b 	bl	8002f90 <BSP_LCD_GetXSize>
 800325a:	4601      	mov	r1, r0
 800325c:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	484b      	ldr	r0, [pc, #300]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4403      	add	r3, r0
 800326c:	3308      	adds	r3, #8
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	889b      	ldrh	r3, [r3, #4]
 8003272:	fbb1 f3f3 	udiv	r3, r1, r3
 8003276:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d01c      	beq.n	80032b8 <BSP_LCD_DisplayStringAt+0xa0>
 800327e:	2b03      	cmp	r3, #3
 8003280:	dc33      	bgt.n	80032ea <BSP_LCD_DisplayStringAt+0xd2>
 8003282:	2b01      	cmp	r3, #1
 8003284:	d002      	beq.n	800328c <BSP_LCD_DisplayStringAt+0x74>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d019      	beq.n	80032be <BSP_LCD_DisplayStringAt+0xa6>
 800328a:	e02e      	b.n	80032ea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad1      	subs	r1, r2, r3
 8003292:	4b3e      	ldr	r3, [pc, #248]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	483e      	ldr	r0, [pc, #248]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4403      	add	r3, r0
 80032a2:	3308      	adds	r3, #8
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	889b      	ldrh	r3, [r3, #4]
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	4413      	add	r3, r2
 80032b4:	83fb      	strh	r3, [r7, #30]
      break;
 80032b6:	e01b      	b.n	80032f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	83fb      	strh	r3, [r7, #30]
      break;
 80032bc:	e018      	b.n	80032f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b299      	uxth	r1, r3
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4831      	ldr	r0, [pc, #196]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4403      	add	r3, r0
 80032d6:	3308      	adds	r3, #8
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	889b      	ldrh	r3, [r3, #4]
 80032dc:	fb11 f303 	smulbb	r3, r1, r3
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	4413      	add	r3, r2
 80032e6:	83fb      	strh	r3, [r7, #30]
      break;
 80032e8:	e002      	b.n	80032f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	83fb      	strh	r3, [r7, #30]
      break;
 80032ee:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80032f0:	e01a      	b.n	8003328 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	89b9      	ldrh	r1, [r7, #12]
 80032f8:	8bfb      	ldrh	r3, [r7, #30]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff48 	bl	8003190 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003300:	4b22      	ldr	r3, [pc, #136]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4922      	ldr	r1, [pc, #136]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3308      	adds	r3, #8
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	889a      	ldrh	r2, [r3, #4]
 8003316:	8bfb      	ldrh	r3, [r7, #30]
 8003318:	4413      	add	r3, r2
 800331a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3301      	adds	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
    i++;
 8003322:	8bbb      	ldrh	r3, [r7, #28]
 8003324:	3301      	adds	r3, #1
 8003326:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2dc      	uxtb	r4, r3
 8003336:	f7ff fe2b 	bl	8002f90 <BSP_LCD_GetXSize>
 800333a:	8bb9      	ldrh	r1, [r7, #28]
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4d13      	ldr	r5, [pc, #76]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	442b      	add	r3, r5
 800334c:	3308      	adds	r3, #8
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	889b      	ldrh	r3, [r3, #4]
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	1ac3      	subs	r3, r0, r3
 8003358:	b299      	uxth	r1, r3
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <BSP_LCD_DisplayStringAt+0x174>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	480c      	ldr	r0, [pc, #48]	@ (8003390 <BSP_LCD_DisplayStringAt+0x178>)
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4403      	add	r3, r0
 800336a:	3308      	adds	r3, #8
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	889b      	ldrh	r3, [r3, #4]
 8003370:	4299      	cmp	r1, r3
 8003372:	bf2c      	ite	cs
 8003374:	2301      	movcs	r3, #1
 8003376:	2300      	movcc	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4023      	ands	r3, r4
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1b7      	bne.n	80032f2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bdb0      	pop	{r4, r5, r7, pc}
 800338c:	200005c4 	.word	0x200005c4
 8003390:	200005c8 	.word	0x200005c8

08003394 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b08b      	sub	sp, #44	@ 0x2c
 8003398:	af00      	add	r7, sp, #0
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	80fb      	strh	r3, [r7, #6]
 80033a6:	4603      	mov	r3, r0
 80033a8:	80bb      	strh	r3, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80033b2:	2300      	movs	r3, #0
 80033b4:	823b      	strh	r3, [r7, #16]
 80033b6:	2300      	movs	r3, #0
 80033b8:	81fb      	strh	r3, [r7, #14]
 80033ba:	2300      	movs	r3, #0
 80033bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80033be:	2300      	movs	r3, #0
 80033c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80033c2:	2300      	movs	r3, #0
 80033c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80033c6:	2300      	movs	r3, #0
 80033c8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80033ca:	2300      	movs	r3, #0
 80033cc:	83fb      	strh	r3, [r7, #30]
 80033ce:	2300      	movs	r3, #0
 80033d0:	83bb      	strh	r3, [r7, #28]
 80033d2:	2300      	movs	r3, #0
 80033d4:	837b      	strh	r3, [r7, #26]
 80033d6:	2300      	movs	r3, #0
 80033d8:	833b      	strh	r3, [r7, #24]
 80033da:	2300      	movs	r3, #0
 80033dc:	82fb      	strh	r3, [r7, #22]
 80033de:	2300      	movs	r3, #0
 80033e0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bfb8      	it	lt
 80033f0:	425b      	neglt	r3, r3
 80033f2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80033f4:	883a      	ldrh	r2, [r7, #0]
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bfb8      	it	lt
 80033fe:	425b      	neglt	r3, r3
 8003400:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	429a      	cmp	r2, r3
 8003410:	d304      	bcc.n	800341c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	843b      	strh	r3, [r7, #32]
 800341a:	e005      	b.n	8003428 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800341c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003420:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8003422:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003426:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003428:	883a      	ldrh	r2, [r7, #0]
 800342a:	88bb      	ldrh	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d304      	bcc.n	800343a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003430:	2301      	movs	r3, #1
 8003432:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003434:	2301      	movs	r3, #1
 8003436:	83bb      	strh	r3, [r7, #28]
 8003438:	e005      	b.n	8003446 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800343a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800343e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003444:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003446:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800344a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800344e:	429a      	cmp	r2, r3
 8003450:	db10      	blt.n	8003474 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003452:	2300      	movs	r3, #0
 8003454:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003456:	2300      	movs	r3, #0
 8003458:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800345a:	8a3b      	ldrh	r3, [r7, #16]
 800345c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800345e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003462:	0fda      	lsrs	r2, r3, #31
 8003464:	4413      	add	r3, r2
 8003466:	105b      	asrs	r3, r3, #1
 8003468:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800346e:	8a3b      	ldrh	r3, [r7, #16]
 8003470:	82bb      	strh	r3, [r7, #20]
 8003472:	e00f      	b.n	8003494 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003474:	2300      	movs	r3, #0
 8003476:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003478:	2300      	movs	r3, #0
 800347a:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003484:	0fda      	lsrs	r2, r3, #31
 8003486:	4413      	add	r3, r2
 8003488:	105b      	asrs	r3, r3, #1
 800348a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800348c:	8a3b      	ldrh	r3, [r7, #16]
 800348e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003494:	2300      	movs	r3, #0
 8003496:	827b      	strh	r3, [r7, #18]
 8003498:	e037      	b.n	800350a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800349a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800349c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <BSP_LCD_DrawLine+0x18c>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4c20      	ldr	r4, [pc, #128]	@ (8003524 <BSP_LCD_DrawLine+0x190>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4423      	add	r3, r4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f000 f9a1 	bl	80037f8 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80034b6:	8b3a      	ldrh	r2, [r7, #24]
 80034b8:	8afb      	ldrh	r3, [r7, #22]
 80034ba:	4413      	add	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80034c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80034c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	db0e      	blt.n	80034ea <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80034cc:	8b3a      	ldrh	r2, [r7, #24]
 80034ce:	8b7b      	ldrh	r3, [r7, #26]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80034d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80034d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034da:	4413      	add	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80034e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	4413      	add	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80034ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80034ec:	8c3b      	ldrh	r3, [r7, #32]
 80034ee:	4413      	add	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80034f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034f6:	8bbb      	ldrh	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80034fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003502:	b29b      	uxth	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	827b      	strh	r3, [r7, #18]
 800350a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800350e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003512:	429a      	cmp	r2, r3
 8003514:	ddc1      	ble.n	800349a <BSP_LCD_DrawLine+0x106>
  }
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	372c      	adds	r7, #44	@ 0x2c
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	200005c4 	.word	0x200005c4
 8003524:	200005c8 	.word	0x200005c8

08003528 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af02      	add	r7, sp, #8
 8003530:	4604      	mov	r4, r0
 8003532:	4608      	mov	r0, r1
 8003534:	4611      	mov	r1, r2
 8003536:	461a      	mov	r2, r3
 8003538:	4623      	mov	r3, r4
 800353a:	80fb      	strh	r3, [r7, #6]
 800353c:	4603      	mov	r3, r0
 800353e:	80bb      	strh	r3, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800354c:	4b33      	ldr	r3, [pc, #204]	@ (800361c <BSP_LCD_FillRect+0xf4>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4933      	ldr	r1, [pc, #204]	@ (8003620 <BSP_LCD_FillRect+0xf8>)
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fda2 	bl	80030a8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003564:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <BSP_LCD_FillRect+0xfc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 800356c:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <BSP_LCD_FillRect+0xf4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <BSP_LCD_FillRect+0x100>)
 8003572:	2134      	movs	r1, #52	@ 0x34
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	@ 0x5c
 800357c:	681c      	ldr	r4, [r3, #0]
 800357e:	f7ff fd07 	bl	8002f90 <BSP_LCD_GetXSize>
 8003582:	4603      	mov	r3, r0
 8003584:	425b      	negs	r3, r3
 8003586:	88b9      	ldrh	r1, [r7, #4]
 8003588:	883a      	ldrh	r2, [r7, #0]
 800358a:	440a      	add	r2, r1
 800358c:	fb02 f503 	mul.w	r5, r2, r3
 8003590:	f7ff fcfe 	bl	8002f90 <BSP_LCD_GetXSize>
 8003594:	4606      	mov	r6, r0
 8003596:	f7ff fd07 	bl	8002fa8 <BSP_LCD_GetYSize>
 800359a:	4603      	mov	r3, r0
 800359c:	fb06 f303 	mul.w	r3, r6, r3
 80035a0:	442b      	add	r3, r5
 80035a2:	88f9      	ldrh	r1, [r7, #6]
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	440a      	add	r2, r1
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4423      	add	r3, r4
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e013      	b.n	80035da <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80035b2:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <BSP_LCD_FillRect+0xf4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003628 <BSP_LCD_FillRect+0x100>)
 80035b8:	2134      	movs	r1, #52	@ 0x34
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	335c      	adds	r3, #92	@ 0x5c
 80035c2:	681c      	ldr	r4, [r3, #0]
 80035c4:	f7ff fce4 	bl	8002f90 <BSP_LCD_GetXSize>
 80035c8:	4602      	mov	r2, r0
 80035ca:	88bb      	ldrh	r3, [r7, #4]
 80035cc:	fb03 f202 	mul.w	r2, r3, r2
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4423      	add	r3, r4
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <BSP_LCD_FillRect+0xf4>)
 80035dc:	681c      	ldr	r4, [r3, #0]
 80035de:	68fd      	ldr	r5, [r7, #12]
 80035e0:	887e      	ldrh	r6, [r7, #2]
 80035e2:	f8b7 8000 	ldrh.w	r8, [r7]
 80035e6:	f7ff fcd3 	bl	8002f90 <BSP_LCD_GetXSize>
 80035ea:	4602      	mov	r2, r0
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	1ad1      	subs	r1, r2, r3
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <BSP_LCD_FillRect+0xf4>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	480a      	ldr	r0, [pc, #40]	@ (8003620 <BSP_LCD_FillRect+0xf8>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4403      	add	r3, r0
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	9100      	str	r1, [sp, #0]
 8003606:	4643      	mov	r3, r8
 8003608:	4632      	mov	r2, r6
 800360a:	4629      	mov	r1, r5
 800360c:	4620      	mov	r0, r4
 800360e:	f000 f9f9 	bl	8003a04 <FillBuffer>
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	200005c4 	.word	0x200005c4
 8003620:	200005c8 	.word	0x200005c8
 8003624:	200005e4 	.word	0x200005e4
 8003628:	200004ac 	.word	0x200004ac

0800362c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <BSP_LCD_DisplayOn+0x1c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800363a:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <BSP_LCD_DisplayOn+0x1c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4798      	blx	r3
  }
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200005e0 	.word	0x200005e0

0800364c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	@ 0x38
 8003650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 800365c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003660:	6453      	str	r3, [r2, #68]	@ 0x44
 8003662:	4b5e      	ldr	r3, [pc, #376]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	4b5a      	ldr	r3, [pc, #360]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	4a59      	ldr	r2, [pc, #356]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003678:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800367c:	6313      	str	r3, [r2, #48]	@ 0x30
 800367e:	4b57      	ldr	r3, [pc, #348]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4a52      	ldr	r2, [pc, #328]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	@ 0x30
 800369a:	4b50      	ldr	r3, [pc, #320]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	4b4c      	ldr	r3, [pc, #304]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a4b      	ldr	r2, [pc, #300]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b49      	ldr	r3, [pc, #292]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b45      	ldr	r3, [pc, #276]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	4a44      	ldr	r2, [pc, #272]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d2:	4b42      	ldr	r3, [pc, #264]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b3e      	ldr	r3, [pc, #248]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	4a3d      	ldr	r2, [pc, #244]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	4b37      	ldr	r3, [pc, #220]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	4a36      	ldr	r2, [pc, #216]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003704:	f043 0320 	orr.w	r3, r3, #32
 8003708:	6313      	str	r3, [r2, #48]	@ 0x30
 800370a:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	4a2f      	ldr	r2, [pc, #188]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003724:	6313      	str	r3, [r2, #48]	@ 0x30
 8003726:	4b2d      	ldr	r3, [pc, #180]	@ (80037dc <BSP_LCD_MspInit+0x190>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003732:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003740:	2302      	movs	r3, #2
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003744:	230e      	movs	r3, #14
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	4824      	ldr	r0, [pc, #144]	@ (80037e0 <BSP_LCD_MspInit+0x194>)
 8003750:	f001 fa62 	bl	8004c18 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003754:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800375a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800375e:	4619      	mov	r1, r3
 8003760:	4820      	ldr	r0, [pc, #128]	@ (80037e4 <BSP_LCD_MspInit+0x198>)
 8003762:	f001 fa59 	bl	8004c18 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003766:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800376c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003770:	4619      	mov	r1, r3
 8003772:	481d      	ldr	r0, [pc, #116]	@ (80037e8 <BSP_LCD_MspInit+0x19c>)
 8003774:	f001 fa50 	bl	8004c18 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003778:	2348      	movs	r3, #72	@ 0x48
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800377c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003780:	4619      	mov	r1, r3
 8003782:	481a      	ldr	r0, [pc, #104]	@ (80037ec <BSP_LCD_MspInit+0x1a0>)
 8003784:	f001 fa48 	bl	8004c18 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800378e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003792:	4619      	mov	r1, r3
 8003794:	4816      	ldr	r0, [pc, #88]	@ (80037f0 <BSP_LCD_MspInit+0x1a4>)
 8003796:	f001 fa3f 	bl	8004c18 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800379a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	4813      	ldr	r0, [pc, #76]	@ (80037f4 <BSP_LCD_MspInit+0x1a8>)
 80037a8:	f001 fa36 	bl	8004c18 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80037ac:	2303      	movs	r3, #3
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80037b0:	2309      	movs	r3, #9
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b8:	4619      	mov	r1, r3
 80037ba:	480a      	ldr	r0, [pc, #40]	@ (80037e4 <BSP_LCD_MspInit+0x198>)
 80037bc:	f001 fa2c 	bl	8004c18 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80037c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ca:	4619      	mov	r1, r3
 80037cc:	4809      	ldr	r0, [pc, #36]	@ (80037f4 <BSP_LCD_MspInit+0x1a8>)
 80037ce:	f001 fa23 	bl	8004c18 <HAL_GPIO_Init>
}
 80037d2:	bf00      	nop
 80037d4:	3738      	adds	r7, #56	@ 0x38
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020000 	.word	0x40020000
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40020800 	.word	0x40020800
 80037ec:	40020c00 	.word	0x40020c00
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800

080037f8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	603a      	str	r2, [r7, #0]
 8003802:	80fb      	strh	r3, [r7, #6]
 8003804:	460b      	mov	r3, r1
 8003806:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003808:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <BSP_LCD_DrawPixel+0x8c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01f      	beq.n	8003850 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <BSP_LCD_DrawPixel+0x90>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <BSP_LCD_DrawPixel+0x94>)
 8003816:	2134      	movs	r1, #52	@ 0x34
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	335c      	adds	r3, #92	@ 0x5c
 8003820:	681c      	ldr	r4, [r3, #0]
 8003822:	f7ff fbb5 	bl	8002f90 <BSP_LCD_GetXSize>
 8003826:	4605      	mov	r5, r0
 8003828:	f7ff fbbe 	bl	8002fa8 <BSP_LCD_GetYSize>
 800382c:	4603      	mov	r3, r0
 800382e:	fb03 f205 	mul.w	r2, r3, r5
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	1ad5      	subs	r5, r2, r3
 8003836:	f7ff fbab 	bl	8002f90 <BSP_LCD_GetXSize>
 800383a:	4602      	mov	r2, r0
 800383c:	88bb      	ldrh	r3, [r7, #4]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1aeb      	subs	r3, r5, r3
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4423      	add	r3, r4
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800384e:	e015      	b.n	800387c <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <BSP_LCD_DrawPixel+0x90>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0d      	ldr	r2, [pc, #52]	@ (800388c <BSP_LCD_DrawPixel+0x94>)
 8003856:	2134      	movs	r1, #52	@ 0x34
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	335c      	adds	r3, #92	@ 0x5c
 8003860:	681c      	ldr	r4, [r3, #0]
 8003862:	88bd      	ldrh	r5, [r7, #4]
 8003864:	f7ff fb94 	bl	8002f90 <BSP_LCD_GetXSize>
 8003868:	4603      	mov	r3, r0
 800386a:	fb03 f205 	mul.w	r2, r3, r5
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4423      	add	r3, r4
 8003876:	461a      	mov	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	200005e4 	.word	0x200005e4
 8003888:	200005c4 	.word	0x200005c4
 800388c:	200004ac 	.word	0x200004ac

08003890 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	603a      	str	r2, [r7, #0]
 800389a:	80fb      	strh	r3, [r7, #6]
 800389c:	460b      	mov	r3, r1
 800389e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <DrawChar+0x16c>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4953      	ldr	r1, [pc, #332]	@ (8003a00 <DrawChar+0x170>)
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3308      	adds	r3, #8
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	88db      	ldrh	r3, [r3, #6]
 80038c2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80038c4:	4b4d      	ldr	r3, [pc, #308]	@ (80039fc <DrawChar+0x16c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	494d      	ldr	r1, [pc, #308]	@ (8003a00 <DrawChar+0x170>)
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3308      	adds	r3, #8
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	889b      	ldrh	r3, [r3, #4]
 80038da:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80038dc:	8a3b      	ldrh	r3, [r7, #16]
 80038de:	3307      	adds	r3, #7
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	da00      	bge.n	80038e6 <DrawChar+0x56>
 80038e4:	3307      	adds	r3, #7
 80038e6:	10db      	asrs	r3, r3, #3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	8a3b      	ldrh	r3, [r7, #16]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	e076      	b.n	80039ea <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80038fc:	8a3b      	ldrh	r3, [r7, #16]
 80038fe:	3307      	adds	r3, #7
 8003900:	2b00      	cmp	r3, #0
 8003902:	da00      	bge.n	8003906 <DrawChar+0x76>
 8003904:	3307      	adds	r3, #7
 8003906:	10db      	asrs	r3, r3, #3
 8003908:	461a      	mov	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4413      	add	r3, r2
 8003914:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003916:	8a3b      	ldrh	r3, [r7, #16]
 8003918:	3307      	adds	r3, #7
 800391a:	2b00      	cmp	r3, #0
 800391c:	da00      	bge.n	8003920 <DrawChar+0x90>
 800391e:	3307      	adds	r3, #7
 8003920:	10db      	asrs	r3, r3, #3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d002      	beq.n	800392c <DrawChar+0x9c>
 8003926:	2b02      	cmp	r3, #2
 8003928:	d004      	beq.n	8003934 <DrawChar+0xa4>
 800392a:	e00c      	b.n	8003946 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
      break;
 8003932:	e016      	b.n	8003962 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	3201      	adds	r2, #1
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
      break;
 8003944:	e00d      	b.n	8003962 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	3301      	adds	r3, #1
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	4313      	orrs	r3, r2
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	3202      	adds	r2, #2
 800395a:	7812      	ldrb	r2, [r2, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
      break;
 8003960:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e036      	b.n	80039d6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003968:	8a3a      	ldrh	r2, [r7, #16]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	4413      	add	r3, r2
 8003972:	3b01      	subs	r3, #1
 8003974:	2201      	movs	r2, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	461a      	mov	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	b29a      	uxth	r2, r3
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4413      	add	r3, r2
 800398c:	b298      	uxth	r0, r3
 800398e:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <DrawChar+0x16c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	491b      	ldr	r1, [pc, #108]	@ (8003a00 <DrawChar+0x170>)
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	88bb      	ldrh	r3, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	f7ff ff28 	bl	80037f8 <BSP_LCD_DrawPixel>
 80039a8:	e012      	b.n	80039d0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	4413      	add	r3, r2
 80039b2:	b298      	uxth	r0, r3
 80039b4:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <DrawChar+0x16c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4911      	ldr	r1, [pc, #68]	@ (8003a00 <DrawChar+0x170>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3304      	adds	r3, #4
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7ff ff14 	bl	80037f8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	8a3b      	ldrh	r3, [r7, #16]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3c4      	bcc.n	8003968 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80039de:	88bb      	ldrh	r3, [r7, #4]
 80039e0:	3301      	adds	r3, #1
 80039e2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	8a7b      	ldrh	r3, [r7, #18]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d384      	bcc.n	80038fc <DrawChar+0x6c>
  }
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200005c4 	.word	0x200005c4
 8003a00:	200005c8 	.word	0x200005c8

08003a04 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003a12:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <FillBuffer+0x68>)
 8003a14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a18:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003a1a:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <FillBuffer+0x68>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003a20:	4a12      	ldr	r2, [pc, #72]	@ (8003a6c <FillBuffer+0x68>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <FillBuffer+0x68>)
 8003a28:	4a11      	ldr	r2, [pc, #68]	@ (8003a70 <FillBuffer+0x6c>)
 8003a2a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003a2c:	480f      	ldr	r0, [pc, #60]	@ (8003a6c <FillBuffer+0x68>)
 8003a2e:	f000 fe5d 	bl	80046ec <HAL_DMA2D_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	480c      	ldr	r0, [pc, #48]	@ (8003a6c <FillBuffer+0x68>)
 8003a3c:	f000 ffbe 	bl	80049bc <HAL_DMA2D_ConfigLayer>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69f9      	ldr	r1, [r7, #28]
 8003a50:	4806      	ldr	r0, [pc, #24]	@ (8003a6c <FillBuffer+0x68>)
 8003a52:	f000 fe9e 	bl	8004792 <HAL_DMA2D_Start>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003a5c:	210a      	movs	r1, #10
 8003a5e:	4803      	ldr	r0, [pc, #12]	@ (8003a6c <FillBuffer+0x68>)
 8003a60:	f000 fec2 	bl	80047e8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000554 	.word	0x20000554
 8003a70:	4002b000 	.word	0x4002b000

08003a74 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003a78:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b24 <BSP_SDRAM_Init+0xb0>)
 8003a7c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a80:	2202      	movs	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003a84:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a86:	2207      	movs	r2, #7
 8003a88:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003a8a:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003a90:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a92:	2207      	movs	r2, #7
 8003a94:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003a96:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a98:	2202      	movs	r2, #2
 8003a9a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003a9c:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003aae:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003abc:	2210      	movs	r2, #16
 8003abe:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ac0:	4b17      	ldr	r3, [pc, #92]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ac8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003acc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ada:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae8:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003aea:	2100      	movs	r1, #0
 8003aec:	480c      	ldr	r0, [pc, #48]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003aee:	f000 f87f 	bl	8003bf0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003af2:	490d      	ldr	r1, [pc, #52]	@ (8003b28 <BSP_SDRAM_Init+0xb4>)
 8003af4:	480a      	ldr	r0, [pc, #40]	@ (8003b20 <BSP_SDRAM_Init+0xac>)
 8003af6:	f003 fb91 	bl	800721c <HAL_SDRAM_Init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <BSP_SDRAM_Init+0xb8>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003b08:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <BSP_SDRAM_Init+0xb8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003b0e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003b12:	f000 f80d 	bl	8003b30 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <BSP_SDRAM_Init+0xb8>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200005e8 	.word	0x200005e8
 8003b24:	a0000140 	.word	0xa0000140
 8003b28:	2000061c 	.word	0x2000061c
 8003b2c:	20000188 	.word	0x20000188

08003b30 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b42:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b44:	2208      	movs	r2, #8
 8003b46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b48:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b58:	4923      	ldr	r1, [pc, #140]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b5a:	4824      	ldr	r0, [pc, #144]	@ (8003bec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b5c:	f003 fb9c 	bl	8007298 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b60:	2001      	movs	r0, #1
 8003b62:	f000 facf 	bl	8004104 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b68:	2202      	movs	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b72:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b82:	4919      	ldr	r1, [pc, #100]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b84:	4819      	ldr	r0, [pc, #100]	@ (8003bec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b86:	f003 fb87 	bl	8007298 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b8a:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b90:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b92:	2208      	movs	r2, #8
 8003b94:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b98:	2204      	movs	r2, #4
 8003b9a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba6:	4910      	ldr	r1, [pc, #64]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ba8:	4810      	ldr	r0, [pc, #64]	@ (8003bec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003baa:	f003 fb75 	bl	8007298 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003bae:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003bb2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bca:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bd0:	4905      	ldr	r1, [pc, #20]	@ (8003be8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bd2:	4806      	ldr	r0, [pc, #24]	@ (8003bec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bd4:	f003 fb60 	bl	8007298 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4804      	ldr	r0, [pc, #16]	@ (8003bec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bdc:	f003 fb87 	bl	80072ee <HAL_SDRAM_ProgramRefreshRate>
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000638 	.word	0x20000638
 8003bec:	200005e8 	.word	0x200005e8

08003bf0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b090      	sub	sp, #64	@ 0x40
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80ec 	beq.w	8003dda <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c06:	4b77      	ldr	r3, [pc, #476]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	4a76      	ldr	r2, [pc, #472]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c12:	4b74      	ldr	r3, [pc, #464]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c22:	4b70      	ldr	r3, [pc, #448]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	4a6f      	ldr	r2, [pc, #444]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	4b69      	ldr	r3, [pc, #420]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	4a68      	ldr	r2, [pc, #416]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4a:	4b66      	ldr	r3, [pc, #408]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	4b62      	ldr	r3, [pc, #392]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	4a61      	ldr	r2, [pc, #388]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	4b5b      	ldr	r3, [pc, #364]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c82:	4b58      	ldr	r3, [pc, #352]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	4b54      	ldr	r3, [pc, #336]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	4a53      	ldr	r2, [pc, #332]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003c98:	f043 0310 	orr.w	r3, r3, #16
 8003c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9e:	4b51      	ldr	r3, [pc, #324]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cb4:	f043 0320 	orr.w	r3, r3, #32
 8003cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cba:	4b4a      	ldr	r3, [pc, #296]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b46      	ldr	r3, [pc, #280]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	4a45      	ldr	r2, [pc, #276]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd6:	4b43      	ldr	r3, [pc, #268]	@ (8003de4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003cee:	230c      	movs	r3, #12
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003cf2:	2360      	movs	r3, #96	@ 0x60
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	483a      	ldr	r0, [pc, #232]	@ (8003de8 <BSP_SDRAM_MspInit+0x1f8>)
 8003cfe:	f000 ff8b 	bl	8004c18 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003d02:	2301      	movs	r3, #1
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4837      	ldr	r0, [pc, #220]	@ (8003dec <BSP_SDRAM_MspInit+0x1fc>)
 8003d0e:	f000 ff83 	bl	8004c18 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003d12:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4834      	ldr	r0, [pc, #208]	@ (8003df0 <BSP_SDRAM_MspInit+0x200>)
 8003d20:	f000 ff7a 	bl	8004c18 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003d24:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4830      	ldr	r0, [pc, #192]	@ (8003df4 <BSP_SDRAM_MspInit+0x204>)
 8003d32:	f000 ff71 	bl	8004c18 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003d36:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d40:	4619      	mov	r1, r3
 8003d42:	482d      	ldr	r0, [pc, #180]	@ (8003df8 <BSP_SDRAM_MspInit+0x208>)
 8003d44:	f000 ff68 	bl	8004c18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003d48:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d52:	4619      	mov	r1, r3
 8003d54:	4829      	ldr	r0, [pc, #164]	@ (8003dfc <BSP_SDRAM_MspInit+0x20c>)
 8003d56:	f000 ff5f 	bl	8004c18 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003d5a:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d62:	2280      	movs	r2, #128	@ 0x80
 8003d64:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003d66:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d6c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d74:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d76:	4b22      	ldr	r3, [pc, #136]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d7c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d84:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d92:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003da0:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003da6:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003dae:	4a15      	ldr	r2, [pc, #84]	@ (8003e04 <BSP_SDRAM_MspInit+0x214>)
 8003db0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003db8:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003dbe:	4810      	ldr	r0, [pc, #64]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003dc0:	f000 fb84 	bl	80044cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003dc4:	480e      	ldr	r0, [pc, #56]	@ (8003e00 <BSP_SDRAM_MspInit+0x210>)
 8003dc6:	f000 fad3 	bl	8004370 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	210f      	movs	r1, #15
 8003dce:	2038      	movs	r0, #56	@ 0x38
 8003dd0:	f000 fa97 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003dd4:	2038      	movs	r0, #56	@ 0x38
 8003dd6:	f000 fab0 	bl	800433a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003dda:	bf00      	nop
 8003ddc:	3740      	adds	r7, #64	@ 0x40
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40021400 	.word	0x40021400
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	20000648 	.word	0x20000648
 8003e04:	40026410 	.word	0x40026410

08003e08 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460a      	mov	r2, r1
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003e1c:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <BSP_TS_Init+0x64>)
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <BSP_TS_Init+0x68>)
 8003e24:	88bb      	ldrh	r3, [r7, #4]
 8003e26:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003e28:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <BSP_TS_Init+0x6c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2082      	movs	r0, #130	@ 0x82
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	f640 0311 	movw	r3, #2065	@ 0x811
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d104      	bne.n	8003e46 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <BSP_TS_Init+0x70>)
 8003e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <BSP_TS_Init+0x6c>)
 8003e40:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <BSP_TS_Init+0x70>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2082      	movs	r0, #130	@ 0x82
 8003e54:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003e56:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <BSP_TS_Init+0x70>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2082      	movs	r0, #130	@ 0x82
 8003e5e:	4798      	blx	r3
  }

  return ret;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200006ac 	.word	0x200006ac
 8003e70:	200006ae 	.word	0x200006ae
 8003e74:	20000138 	.word	0x20000138
 8003e78:	200006a8 	.word	0x200006a8

08003e7c <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <BSP_TS_ITGetStatus+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	2082      	movs	r0, #130	@ 0x82
 8003e88:	4798      	blx	r3
 8003e8a:	4603      	mov	r3, r0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200006a8 	.word	0x200006a8

08003e94 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fdc <BSP_TS_GetState+0x148>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2082      	movs	r0, #130	@ 0x82
 8003ea4:	4798      	blx	r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 808d 	beq.w	8003fd2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003eb8:	4b48      	ldr	r3, [pc, #288]	@ (8003fdc <BSP_TS_GetState+0x148>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f107 020c 	add.w	r2, r7, #12
 8003ec2:	f107 010e 	add.w	r1, r7, #14
 8003ec6:	2082      	movs	r0, #130	@ 0x82
 8003ec8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003eca:	89bb      	ldrh	r3, [r7, #12]
 8003ecc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003ed4:	89bb      	ldrh	r3, [r7, #12]
 8003ed6:	4a42      	ldr	r2, [pc, #264]	@ (8003fe0 <BSP_TS_GetState+0x14c>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003ee0:	8abb      	ldrh	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	82bb      	strh	r3, [r7, #20]
 8003eea:	e008      	b.n	8003efe <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003eec:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <BSP_TS_GetState+0x150>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	8aba      	ldrh	r2, [r7, #20]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d903      	bls.n	8003efe <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe4 <BSP_TS_GetState+0x150>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d806      	bhi.n	8003f1a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8003f12:	330e      	adds	r3, #14
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	81fb      	strh	r3, [r7, #14]
 8003f18:	e005      	b.n	8003f26 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003f20:	3308      	adds	r3, #8
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe8 <BSP_TS_GetState+0x154>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003f32:	8afb      	ldrh	r3, [r7, #22]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	82fb      	strh	r3, [r7, #22]
 8003f3c:	e008      	b.n	8003f50 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <BSP_TS_GetState+0x158>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	8afa      	ldrh	r2, [r7, #22]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <BSP_TS_GetState+0x158>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003f50:	8afb      	ldrh	r3, [r7, #22]
 8003f52:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <BSP_TS_GetState+0x15c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d906      	bls.n	8003f6e <BSP_TS_GetState+0xda>
 8003f60:	89fa      	ldrh	r2, [r7, #14]
 8003f62:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <BSP_TS_GetState+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	e005      	b.n	8003f7a <BSP_TS_GetState+0xe6>
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <BSP_TS_GetState+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003f7c:	89bb      	ldrh	r3, [r7, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <BSP_TS_GetState+0x160>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d906      	bls.n	8003f96 <BSP_TS_GetState+0x102>
 8003f88:	89ba      	ldrh	r2, [r7, #12]
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <BSP_TS_GetState+0x160>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	e005      	b.n	8003fa2 <BSP_TS_GetState+0x10e>
 8003f96:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <BSP_TS_GetState+0x160>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003fa4:	8a7a      	ldrh	r2, [r7, #18]
 8003fa6:	8a3b      	ldrh	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	dd07      	ble.n	8003fbe <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003fae:	89fb      	ldrh	r3, [r7, #14]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <BSP_TS_GetState+0x15c>)
 8003fb4:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003fb6:	89bb      	ldrh	r3, [r7, #12]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <BSP_TS_GetState+0x160>)
 8003fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <BSP_TS_GetState+0x15c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <BSP_TS_GetState+0x160>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	809a      	strh	r2, [r3, #4]
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200006a8 	.word	0x200006a8
 8003fe0:	ba2e8ba3 	.word	0xba2e8ba3
 8003fe4:	200006ae 	.word	0x200006ae
 8003fe8:	88888889 	.word	0x88888889
 8003fec:	200006ac 	.word	0x200006ac
 8003ff0:	200006b0 	.word	0x200006b0
 8003ff4:	200006b4 	.word	0x200006b4

08003ff8 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <BSP_TS_ITClear+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2082      	movs	r0, #130	@ 0x82
 8004004:	4798      	blx	r3
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200006a8 	.word	0x200006a8

08004010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004014:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <HAL_Init+0x40>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <HAL_Init+0x40>)
 800401a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_Init+0x40>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_Init+0x40>)
 8004026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800402a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <HAL_Init+0x40>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <HAL_Init+0x40>)
 8004032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004038:	2003      	movs	r0, #3
 800403a:	f000 f957 	bl	80042ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403e:	200f      	movs	r0, #15
 8004040:	f000 f810 	bl	8004064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004044:	f000 f806 	bl	8004054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00

08004054 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_InitTick+0x54>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_InitTick+0x58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407a:	fbb3 f3f1 	udiv	r3, r3, r1
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f967 	bl	8004356 <HAL_SYSTICK_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00e      	b.n	80040b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d80a      	bhi.n	80040ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f000 f92f 	bl	8004302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <HAL_InitTick+0x5c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200000fc 	.word	0x200000fc
 80040bc:	20000190 	.word	0x20000190
 80040c0:	2000018c 	.word	0x2000018c

080040c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000190 	.word	0x20000190
 80040e8:	200006b8 	.word	0x200006b8

080040ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	200006b8 	.word	0x200006b8

08004104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_Delay+0x44>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000190 	.word	0x20000190

0800414c <__NVIC_SetPriorityGrouping>:
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	@ (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	@ (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	@ (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	@ 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
         );
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	@ 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b8:	d301      	bcc.n	80042be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00f      	b.n	80042de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042be:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <SysTick_Config+0x40>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c6:	210f      	movs	r1, #15
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f7ff ff8e 	bl	80041ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <SysTick_Config+0x40>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d6:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <SysTick_Config+0x40>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000e010 	.word	0xe000e010

080042ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff29 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	4603      	mov	r3, r0
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004314:	f7ff ff3e 	bl	8004194 <__NVIC_GetPriorityGrouping>
 8004318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f7ff ff8e 	bl	8004240 <NVIC_EncodePriority>
 8004324:	4602      	mov	r2, r0
 8004326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff5d 	bl	80041ec <__NVIC_SetPriority>
}
 8004332:	bf00      	nop
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff31 	bl	80041b0 <__NVIC_EnableIRQ>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ffa2 	bl	80042a8 <SysTick_Config>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7ff feb6 	bl	80040ec <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e099      	b.n	80044c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ac:	e00f      	b.n	80043ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ae:	f7ff fe9d 	bl	80040ec <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d908      	bls.n	80043ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e078      	b.n	80044c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e8      	bne.n	80043ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <HAL_DMA_Init+0x158>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	2b04      	cmp	r3, #4
 8004426:	d107      	bne.n	8004438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	4313      	orrs	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0307 	bic.w	r3, r3, #7
 800444e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	2b04      	cmp	r3, #4
 8004460:	d117      	bne.n	8004492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f8bd 	bl	80045f4 <DMA_CheckFifoParam>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2240      	movs	r2, #64	@ 0x40
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800448e:	2301      	movs	r3, #1
 8004490:	e016      	b.n	80044c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f874 	bl	8004588 <DMA_CalcBaseAndBitshift>
 80044a0:	4603      	mov	r3, r0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	223f      	movs	r2, #63	@ 0x3f
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	f010803f 	.word	0xf010803f

080044cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e050      	b.n	8004580 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	e048      	b.n	8004580 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2221      	movs	r2, #33	@ 0x21
 800452c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f82a 	bl	8004588 <DMA_CalcBaseAndBitshift>
 8004534:	4603      	mov	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	223f      	movs	r2, #63	@ 0x3f
 8004562:	409a      	lsls	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	3b10      	subs	r3, #16
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <DMA_CalcBaseAndBitshift+0x64>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045a2:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <DMA_CalcBaseAndBitshift+0x68>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d909      	bls.n	80045ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	1d1a      	adds	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80045c8:	e007      	b.n	80045da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	aaaaaaab 	.word	0xaaaaaaab
 80045f0:	0800b868 	.word	0x0800b868

080045f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11f      	bne.n	800464e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d856      	bhi.n	80046c2 <DMA_CheckFifoParam+0xce>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <DMA_CheckFifoParam+0x28>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	0800463f 	.word	0x0800463f
 8004624:	0800462d 	.word	0x0800462d
 8004628:	080046c3 	.word	0x080046c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d046      	beq.n	80046c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e043      	b.n	80046c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004646:	d140      	bne.n	80046ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464c:	e03d      	b.n	80046ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004656:	d121      	bne.n	800469c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d837      	bhi.n	80046ce <DMA_CheckFifoParam+0xda>
 800465e:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <DMA_CheckFifoParam+0x70>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004675 	.word	0x08004675
 8004668:	0800467b 	.word	0x0800467b
 800466c:	08004675 	.word	0x08004675
 8004670:	0800468d 	.word	0x0800468d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	e030      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d025      	beq.n	80046d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468a:	e022      	b.n	80046d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004694:	d11f      	bne.n	80046d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800469a:	e01c      	b.n	80046d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d903      	bls.n	80046aa <DMA_CheckFifoParam+0xb6>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d003      	beq.n	80046b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046a8:	e018      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
      break;
 80046ae:	e015      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	e00b      	b.n	80046da <DMA_CheckFifoParam+0xe6>
      break;
 80046c2:	bf00      	nop
 80046c4:	e00a      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e008      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;
 80046ca:	bf00      	nop
 80046cc:	e006      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;
 80046ce:	bf00      	nop
 80046d0:	e004      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;   
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
      break;
 80046da:	bf00      	nop
    }
  } 
  
  return status; 
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop

080046ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03b      	b.n	8004776 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f833 	bl	800477e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473c:	f023 0107 	bic.w	r1, r3, #7
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004756:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68d1      	ldr	r1, [r2, #12]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	430b      	orrs	r3, r1
 8004764:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af02      	add	r7, sp, #8
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_DMA2D_Start+0x1c>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e018      	b.n	80047e0 <HAL_DMA2D_Start+0x4e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f989 	bl	8004ae0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d056      	beq.n	80048b2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004804:	f7ff fc72 	bl	80040ec <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800480a:	e04b      	b.n	80048a4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	f043 0202 	orr.w	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2221      	movs	r2, #33	@ 0x21
 8004850:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0a5      	b.n	80049b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d01a      	beq.n	80048a4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800486e:	f7ff fc3d 	bl	80040ec <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <HAL_DMA2D_PollForTransfer+0x9c>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e086      	b.n	80049b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ac      	beq.n	800480c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d061      	beq.n	8004998 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048d4:	f7ff fc0a 	bl	80040ec <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80048da:	e056      	b.n	800498a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02e      	beq.n	800494c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004912:	f043 0202 	orr.w	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2229      	movs	r2, #41	@ 0x29
 8004936:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d01a      	beq.n	800498a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004954:	f7ff fbca 	bl	80040ec <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <HAL_DMA2D_PollForTransfer+0x182>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e013      	b.n	80049b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0a1      	beq.n	80048dc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2212      	movs	r2, #18
 800499e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_DMA2D_ConfigLayer+0x20>
 80049d8:	2302      	movs	r3, #2
 80049da:	e079      	b.n	8004ad0 <HAL_DMA2D_ConfigLayer+0x114>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	3318      	adds	r3, #24
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004a06:	4b35      	ldr	r3, [pc, #212]	@ (8004adc <HAL_DMA2D_ConfigLayer+0x120>)
 8004a08:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b0a      	cmp	r3, #10
 8004a10:	d003      	beq.n	8004a1a <HAL_DMA2D_ConfigLayer+0x5e>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b09      	cmp	r3, #9
 8004a18:	d107      	bne.n	8004a2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e005      	b.n	8004a36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d120      	bne.n	8004a7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	ea02 0103 	and.w	r1, r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b0a      	cmp	r3, #10
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA2D_ConfigLayer+0xb2>
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	d127      	bne.n	8004abe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a7c:	e01f      	b.n	8004abe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	ea02 0103 	and.w	r1, r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b0a      	cmp	r3, #10
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d106      	bne.n	8004abe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004abc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	ff03000f 	.word	0xff03000f

08004ae0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b08b      	sub	sp, #44	@ 0x2c
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	041a      	lsls	r2, r3, #16
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b18:	d174      	bne.n	8004c04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004b20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	e053      	b.n	8004bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d106      	bne.n	8004b68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b66:	e048      	b.n	8004bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d111      	bne.n	8004b94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	0cdb      	lsrs	r3, r3, #19
 8004b74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	0a9b      	lsrs	r3, r3, #10
 8004b7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	02db      	lsls	r3, r3, #11
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b92:	e032      	b.n	8004bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d117      	bne.n	8004bcc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	0fdb      	lsrs	r3, r3, #31
 8004ba0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	0cdb      	lsrs	r3, r3, #19
 8004ba6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	0adb      	lsrs	r3, r3, #11
 8004bac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	03db      	lsls	r3, r3, #15
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bca:	e016      	b.n	8004bfa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	0f1b      	lsrs	r3, r3, #28
 8004bd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	0d1b      	lsrs	r3, r3, #20
 8004bd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	0b1b      	lsrs	r3, r3, #12
 8004bdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	011a      	lsls	r2, r3, #4
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	431a      	orrs	r2, r3
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004c02:	e003      	b.n	8004c0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	60da      	str	r2, [r3, #12]
}
 8004c0c:	bf00      	nop
 8004c0e:	372c      	adds	r7, #44	@ 0x2c
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e177      	b.n	8004f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f040 8166 	bne.w	8004f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00b      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c66:	2b11      	cmp	r3, #17
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b12      	cmp	r3, #18
 8004c70:	d130      	bne.n	8004cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 0201 	and.w	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0xfc>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d123      	bne.n	8004d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	08da      	lsrs	r2, r3, #3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3208      	adds	r2, #8
 8004d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	08da      	lsrs	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3208      	adds	r2, #8
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2203      	movs	r2, #3
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0203 	and.w	r2, r3, #3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80c0 	beq.w	8004f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b66      	ldr	r3, [pc, #408]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	4a65      	ldr	r2, [pc, #404]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dae:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_GPIO_Init+0x324>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dba:	4a61      	ldr	r2, [pc, #388]	@ (8004f40 <HAL_GPIO_Init+0x328>)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a58      	ldr	r2, [pc, #352]	@ (8004f44 <HAL_GPIO_Init+0x32c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d037      	beq.n	8004e56 <HAL_GPIO_Init+0x23e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a57      	ldr	r2, [pc, #348]	@ (8004f48 <HAL_GPIO_Init+0x330>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_GPIO_Init+0x23a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a56      	ldr	r2, [pc, #344]	@ (8004f4c <HAL_GPIO_Init+0x334>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02b      	beq.n	8004e4e <HAL_GPIO_Init+0x236>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a55      	ldr	r2, [pc, #340]	@ (8004f50 <HAL_GPIO_Init+0x338>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d025      	beq.n	8004e4a <HAL_GPIO_Init+0x232>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a54      	ldr	r2, [pc, #336]	@ (8004f54 <HAL_GPIO_Init+0x33c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <HAL_GPIO_Init+0x22e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a53      	ldr	r2, [pc, #332]	@ (8004f58 <HAL_GPIO_Init+0x340>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d019      	beq.n	8004e42 <HAL_GPIO_Init+0x22a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a52      	ldr	r2, [pc, #328]	@ (8004f5c <HAL_GPIO_Init+0x344>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0x226>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a51      	ldr	r2, [pc, #324]	@ (8004f60 <HAL_GPIO_Init+0x348>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00d      	beq.n	8004e3a <HAL_GPIO_Init+0x222>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a50      	ldr	r2, [pc, #320]	@ (8004f64 <HAL_GPIO_Init+0x34c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <HAL_GPIO_Init+0x21e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a4f      	ldr	r2, [pc, #316]	@ (8004f68 <HAL_GPIO_Init+0x350>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <HAL_GPIO_Init+0x21a>
 8004e2e:	2309      	movs	r3, #9
 8004e30:	e012      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e32:	230a      	movs	r3, #10
 8004e34:	e010      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e36:	2308      	movs	r3, #8
 8004e38:	e00e      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e3a:	2307      	movs	r3, #7
 8004e3c:	e00c      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e3e:	2306      	movs	r3, #6
 8004e40:	e00a      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e42:	2305      	movs	r3, #5
 8004e44:	e008      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e006      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e004      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_GPIO_Init+0x240>
 8004e56:	2300      	movs	r3, #0
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	f002 0203 	and.w	r2, r2, #3
 8004e5e:	0092      	lsls	r2, r2, #2
 8004e60:	4093      	lsls	r3, r2
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e68:	4935      	ldr	r1, [pc, #212]	@ (8004f40 <HAL_GPIO_Init+0x328>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	3302      	adds	r3, #2
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e76:	4b3d      	ldr	r3, [pc, #244]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e9a:	4a34      	ldr	r2, [pc, #208]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ea0:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ec4:	4a29      	ldr	r2, [pc, #164]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eca:	4b28      	ldr	r3, [pc, #160]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eee:	4a1f      	ldr	r2, [pc, #124]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <HAL_GPIO_Init+0x354>)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	f67f ae84 	bls.w	8004c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	3724      	adds	r7, #36	@ 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40013800 	.word	0x40013800
 8004f44:	40020000 	.word	0x40020000
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40020800 	.word	0x40020800
 8004f50:	40020c00 	.word	0x40020c00
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40021400 	.word	0x40021400
 8004f5c:	40021800 	.word	0x40021800
 8004f60:	40021c00 	.word	0x40021c00
 8004f64:	40022000 	.word	0x40022000
 8004f68:	40022400 	.word	0x40022400
 8004f6c:	40013c00 	.word	0x40013c00

08004f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f80:	787b      	ldrb	r3, [r7, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f8c:	e003      	b.n	8004f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	041a      	lsls	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	887b      	ldrh	r3, [r7, #2]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d104      	bne.n	8004fc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	041a      	lsls	r2, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004fc4:	e002      	b.n	8004fcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	619a      	str	r2, [r3, #24]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e12b      	b.n	8005242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f95d 	bl	80052be <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	@ 0x24
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800502a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800503a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800503c:	f001 ff1a 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 8005040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4a81      	ldr	r2, [pc, #516]	@ (800524c <HAL_I2C_Init+0x274>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d807      	bhi.n	800505c <HAL_I2C_Init+0x84>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a80      	ldr	r2, [pc, #512]	@ (8005250 <HAL_I2C_Init+0x278>)
 8005050:	4293      	cmp	r3, r2
 8005052:	bf94      	ite	ls
 8005054:	2301      	movls	r3, #1
 8005056:	2300      	movhi	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e006      	b.n	800506a <HAL_I2C_Init+0x92>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a7d      	ldr	r2, [pc, #500]	@ (8005254 <HAL_I2C_Init+0x27c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	bf94      	ite	ls
 8005064:	2301      	movls	r3, #1
 8005066:	2300      	movhi	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0e7      	b.n	8005242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a78      	ldr	r2, [pc, #480]	@ (8005258 <HAL_I2C_Init+0x280>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0c9b      	lsrs	r3, r3, #18
 800507c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a6a      	ldr	r2, [pc, #424]	@ (800524c <HAL_I2C_Init+0x274>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d802      	bhi.n	80050ac <HAL_I2C_Init+0xd4>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3301      	adds	r3, #1
 80050aa:	e009      	b.n	80050c0 <HAL_I2C_Init+0xe8>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a69      	ldr	r2, [pc, #420]	@ (800525c <HAL_I2C_Init+0x284>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	099b      	lsrs	r3, r3, #6
 80050be:	3301      	adds	r3, #1
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	495c      	ldr	r1, [pc, #368]	@ (800524c <HAL_I2C_Init+0x274>)
 80050dc:	428b      	cmp	r3, r1
 80050de:	d819      	bhi.n	8005114 <HAL_I2C_Init+0x13c>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1e59      	subs	r1, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050f4:	400b      	ands	r3, r1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_I2C_Init+0x138>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1e59      	subs	r1, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	fbb1 f3f3 	udiv	r3, r1, r3
 8005108:	3301      	adds	r3, #1
 800510a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510e:	e051      	b.n	80051b4 <HAL_I2C_Init+0x1dc>
 8005110:	2304      	movs	r3, #4
 8005112:	e04f      	b.n	80051b4 <HAL_I2C_Init+0x1dc>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d111      	bne.n	8005140 <HAL_I2C_Init+0x168>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1e58      	subs	r0, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	440b      	add	r3, r1
 800512a:	fbb0 f3f3 	udiv	r3, r0, r3
 800512e:	3301      	adds	r3, #1
 8005130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e012      	b.n	8005166 <HAL_I2C_Init+0x18e>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1e58      	subs	r0, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	0099      	lsls	r1, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	fbb0 f3f3 	udiv	r3, r0, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Init+0x196>
 800516a:	2301      	movs	r3, #1
 800516c:	e022      	b.n	80051b4 <HAL_I2C_Init+0x1dc>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10e      	bne.n	8005194 <HAL_I2C_Init+0x1bc>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1e58      	subs	r0, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	440b      	add	r3, r1
 8005184:	fbb0 f3f3 	udiv	r3, r0, r3
 8005188:	3301      	adds	r3, #1
 800518a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005192:	e00f      	b.n	80051b4 <HAL_I2C_Init+0x1dc>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1e58      	subs	r0, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6859      	ldr	r1, [r3, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	0099      	lsls	r1, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051aa:	3301      	adds	r3, #1
 80051ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	6809      	ldr	r1, [r1, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6911      	ldr	r1, [r2, #16]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68d2      	ldr	r2, [r2, #12]
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	000186a0 	.word	0x000186a0
 8005250:	001e847f 	.word	0x001e847f
 8005254:	003d08ff 	.word	0x003d08ff
 8005258:	431bde83 	.word	0x431bde83
 800525c:	10624dd3 	.word	0x10624dd3

08005260 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e021      	b.n	80052b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2224      	movs	r2, #36	@ 0x24
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f821 	bl	80052d2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005302:	f7fe fef3 	bl	80040ec <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b20      	cmp	r3, #32
 8005312:	f040 80d9 	bne.w	80054c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2319      	movs	r3, #25
 800531c:	2201      	movs	r2, #1
 800531e:	496d      	ldr	r1, [pc, #436]	@ (80054d4 <HAL_I2C_Mem_Write+0x1ec>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fc89 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
 800532e:	e0cc      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_I2C_Mem_Write+0x56>
 800533a:	2302      	movs	r3, #2
 800533c:	e0c5      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d007      	beq.n	8005364 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2221      	movs	r2, #33	@ 0x21
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2240      	movs	r2, #64	@ 0x40
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a4d      	ldr	r2, [pc, #308]	@ (80054d8 <HAL_I2C_Mem_Write+0x1f0>)
 80053a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a6:	88f8      	ldrh	r0, [r7, #6]
 80053a8:	893a      	ldrh	r2, [r7, #8]
 80053aa:	8979      	ldrh	r1, [r7, #10]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	4603      	mov	r3, r0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fac4 	bl	8005944 <I2C_RequestMemoryWrite>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d052      	beq.n	8005468 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e081      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fd0a 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06b      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11b      	bne.n	8005468 <HAL_I2C_Mem_Write+0x180>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1aa      	bne.n	80053c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fcf6 	bl	8005e66 <I2C_WaitOnBTFFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	2b04      	cmp	r3, #4
 8005486:	d107      	bne.n	8005498 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005496:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e016      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	00100002 	.word	0x00100002
 80054d8:	ffff0000 	.word	0xffff0000

080054dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	@ 0x30
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	817b      	strh	r3, [r7, #10]
 80054ee:	460b      	mov	r3, r1
 80054f0:	813b      	strh	r3, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054f6:	f7fe fdf9 	bl	80040ec <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	f040 8208 	bne.w	800591a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2319      	movs	r3, #25
 8005510:	2201      	movs	r2, #1
 8005512:	497b      	ldr	r1, [pc, #492]	@ (8005700 <HAL_I2C_Mem_Read+0x224>)
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fb8f 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	e1fb      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_I2C_Mem_Read+0x56>
 800552e:	2302      	movs	r3, #2
 8005530:	e1f4      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d007      	beq.n	8005558 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2222      	movs	r2, #34	@ 0x22
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2240      	movs	r2, #64	@ 0x40
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a5b      	ldr	r2, [pc, #364]	@ (8005704 <HAL_I2C_Mem_Read+0x228>)
 8005598:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800559a:	88f8      	ldrh	r0, [r7, #6]
 800559c:	893a      	ldrh	r2, [r7, #8]
 800559e:	8979      	ldrh	r1, [r7, #10]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	4603      	mov	r3, r0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa5e 	bl	8005a6c <I2C_RequestMemoryRead>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e1b0      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d113      	bne.n	80055ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e184      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d11b      	bne.n	800562a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e164      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	2b02      	cmp	r3, #2
 8005630:	d11b      	bne.n	800566a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005640:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	e144      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005680:	e138      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	2b03      	cmp	r3, #3
 8005688:	f200 80f1 	bhi.w	800586e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005690:	2b01      	cmp	r3, #1
 8005692:	d123      	bne.n	80056dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005696:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fc25 	bl	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e139      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056da:	e10b      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d14e      	bne.n	8005782 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	2200      	movs	r2, #0
 80056ec:	4906      	ldr	r1, [pc, #24]	@ (8005708 <HAL_I2C_Mem_Read+0x22c>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 faa2 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e10e      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
 80056fe:	bf00      	nop
 8005700:	00100002 	.word	0x00100002
 8005704:	ffff0000 	.word	0xffff0000
 8005708:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800571a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005780:	e0b8      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	2200      	movs	r2, #0
 800578a:	4966      	ldr	r1, [pc, #408]	@ (8005924 <HAL_I2C_Mem_Read+0x448>)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fa53 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0bf      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	2200      	movs	r2, #0
 80057e6:	494f      	ldr	r1, [pc, #316]	@ (8005924 <HAL_I2C_Mem_Read+0x448>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa25 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e091      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800586c:	e042      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fb38 	bl	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e04c      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d118      	bne.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f aec2 	bne.w	8005682 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	@ 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	00010004 	.word	0x00010004

08005928 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005936:	b2db      	uxtb	r3, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800596c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2200      	movs	r2, #0
 8005976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f95c 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800599a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e05f      	b.n	8005a60 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	492c      	ldr	r1, [pc, #176]	@ (8005a68 <I2C_RequestMemoryWrite+0x124>)
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f995 	bl	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e04c      	b.n	8005a60 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059de:	6a39      	ldr	r1, [r7, #32]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f9ff 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00d      	beq.n	8005a08 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d107      	bne.n	8005a04 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e02b      	b.n	8005a60 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0e:	893b      	ldrh	r3, [r7, #8]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
 8005a18:	e021      	b.n	8005a5e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a1a:	893b      	ldrh	r3, [r7, #8]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2a:	6a39      	ldr	r1, [r7, #32]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f9d9 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00d      	beq.n	8005a54 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d107      	bne.n	8005a50 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e005      	b.n	8005a60 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f8c0 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0a9      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ad8:	897b      	ldrh	r3, [r7, #10]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ae6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	6a3a      	ldr	r2, [r7, #32]
 8005aec:	4951      	ldr	r1, [pc, #324]	@ (8005c34 <I2C_RequestMemoryRead+0x1c8>)
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f8f9 	bl	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e096      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b16:	6a39      	ldr	r1, [r7, #32]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f963 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d107      	bne.n	8005b3c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e075      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d105      	bne.n	8005b52 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b46:	893b      	ldrh	r3, [r7, #8]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	e021      	b.n	8005b96 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b62:	6a39      	ldr	r1, [r7, #32]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f93d 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d107      	bne.n	8005b88 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e04f      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8c:	893b      	ldrh	r3, [r7, #8]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b98:	6a39      	ldr	r1, [r7, #32]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f922 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d107      	bne.n	8005bbe <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e034      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f82a 	bl	8005c38 <I2C_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e013      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c04:	897b      	ldrh	r3, [r7, #10]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	4906      	ldr	r1, [pc, #24]	@ (8005c34 <I2C_RequestMemoryRead+0x1c8>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f863 	bl	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	00010002 	.word	0x00010002

08005c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	4613      	mov	r3, r2
 8005c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c48:	e025      	b.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d021      	beq.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c52:	f7fe fa4b 	bl	80040ec <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d116      	bne.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e023      	b.n	8005cde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10d      	bne.n	8005cbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	e00c      	b.n	8005cd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d0b6      	beq.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cf4:	e051      	b.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d04:	d123      	bne.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	f043 0204 	orr.w	r2, r3, #4
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e046      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d021      	beq.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fe f9c9 	bl	80040ec <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e020      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10c      	bne.n	8005dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	e00b      	b.n	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	43da      	mvns	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d18d      	bne.n	8005cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df0:	e02d      	b.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f8ce 	bl	8005f94 <I2C_IsAcknowledgeFailed>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e02d      	b.n	8005e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d021      	beq.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0a:	f7fe f96f 	bl	80040ec <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e007      	b.n	8005e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e58:	2b80      	cmp	r3, #128	@ 0x80
 8005e5a:	d1ca      	bne.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e72:	e02d      	b.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f88d 	bl	8005f94 <I2C_IsAcknowledgeFailed>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e02d      	b.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d021      	beq.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8c:	f7fe f92e 	bl	80040ec <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d116      	bne.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	f043 0220 	orr.w	r2, r3, #32
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e007      	b.n	8005ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d1ca      	bne.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef4:	e042      	b.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d119      	bne.n	8005f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0210 	mvn.w	r2, #16
 8005f0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e029      	b.n	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f38:	f7fe f8d8 	bl	80040ec <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d116      	bne.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e007      	b.n	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d1b5      	bne.n	8005ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005faa:	d11b      	bne.n	8005fe4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f043 0204 	orr.w	r2, r3, #4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e0bf      	b.n	8006186 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8ba 	bl	8006194 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006036:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6999      	ldr	r1, [r3, #24]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800604c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6899      	ldr	r1, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b4a      	ldr	r3, [pc, #296]	@ (8006190 <HAL_LTDC_Init+0x19c>)
 8006068:	400b      	ands	r3, r1
 800606a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6899      	ldr	r1, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68d9      	ldr	r1, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b3e      	ldr	r3, [pc, #248]	@ (8006190 <HAL_LTDC_Init+0x19c>)
 8006096:	400b      	ands	r3, r1
 8006098:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68d9      	ldr	r1, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6919      	ldr	r1, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b33      	ldr	r3, [pc, #204]	@ (8006190 <HAL_LTDC_Init+0x19c>)
 80060c4:	400b      	ands	r3, r1
 80060c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6919      	ldr	r1, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6959      	ldr	r1, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b27      	ldr	r3, [pc, #156]	@ (8006190 <HAL_LTDC_Init+0x19c>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6959      	ldr	r1, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0206 	orr.w	r2, r2, #6
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	f000f800 	.word	0xf000f800

08006194 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_LTDC_ConfigLayer+0x1a>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02c      	b.n	800621c <HAL_LTDC_ConfigLayer+0x74>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2134      	movs	r1, #52	@ 0x34
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	4413      	add	r3, r2
 80061de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4614      	mov	r4, r2
 80061e6:	461d      	mov	r5, r3
 80061e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f83b 	bl	8006278 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2201      	movs	r2, #1
 8006208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bdb0      	pop	{r4, r5, r7, pc}

08006224 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_LTDC_EnableDither+0x16>
 8006236:	2302      	movs	r3, #2
 8006238:	e016      	b.n	8006268 <HAL_LTDC_EnableDither+0x44>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800624a:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <HAL_LTDC_EnableDither+0x50>)
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	4a09      	ldr	r2, [pc, #36]	@ (8006274 <HAL_LTDC_EnableDither+0x50>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006254:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40016800 	.word	0x40016800

08006278 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006278:	b480      	push	{r7}
 800627a:	b089      	sub	sp, #36	@ 0x24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006294:	4413      	add	r3, r2
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	01db      	lsls	r3, r3, #7
 80062a4:	4413      	add	r3, r2
 80062a6:	3384      	adds	r3, #132	@ 0x84
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	4611      	mov	r1, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	01d2      	lsls	r2, r2, #7
 80062b4:	440a      	add	r2, r1
 80062b6:	3284      	adds	r2, #132	@ 0x84
 80062b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ce:	4413      	add	r3, r2
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	@ 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f6:	4413      	add	r3, r2
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	01db      	lsls	r3, r3, #7
 8006306:	4413      	add	r3, r2
 8006308:	3384      	adds	r3, #132	@ 0x84
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	4611      	mov	r1, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	01d2      	lsls	r2, r2, #7
 8006316:	440a      	add	r2, r1
 8006318:	3284      	adds	r2, #132	@ 0x84
 800631a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800631e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800632e:	4413      	add	r3, r2
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	440b      	add	r3, r1
 800633e:	3384      	adds	r3, #132	@ 0x84
 8006340:	4619      	mov	r1, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	3384      	adds	r3, #132	@ 0x84
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4611      	mov	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	01d2      	lsls	r2, r2, #7
 8006362:	440a      	add	r2, r1
 8006364:	3284      	adds	r2, #132	@ 0x84
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	01db      	lsls	r3, r3, #7
 8006376:	4413      	add	r3, r2
 8006378:	3384      	adds	r3, #132	@ 0x84
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	4413      	add	r3, r2
 80063aa:	3384      	adds	r3, #132	@ 0x84
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	01db      	lsls	r3, r3, #7
 80063b8:	4413      	add	r3, r2
 80063ba:	3384      	adds	r3, #132	@ 0x84
 80063bc:	461a      	mov	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063c8:	461a      	mov	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	01db      	lsls	r3, r3, #7
 80063dc:	440b      	add	r3, r1
 80063de:	3384      	adds	r3, #132	@ 0x84
 80063e0:	4619      	mov	r1, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	01db      	lsls	r3, r3, #7
 80063f2:	4413      	add	r3, r2
 80063f4:	3384      	adds	r3, #132	@ 0x84
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	4611      	mov	r1, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	01d2      	lsls	r2, r2, #7
 8006402:	440a      	add	r2, r1
 8006404:	3284      	adds	r2, #132	@ 0x84
 8006406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800640a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	01db      	lsls	r3, r3, #7
 8006416:	4413      	add	r3, r2
 8006418:	3384      	adds	r3, #132	@ 0x84
 800641a:	461a      	mov	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	01db      	lsls	r3, r3, #7
 800642c:	4413      	add	r3, r2
 800642e:	3384      	adds	r3, #132	@ 0x84
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	4611      	mov	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	01d2      	lsls	r2, r2, #7
 800643c:	440a      	add	r2, r1
 800643e:	3284      	adds	r2, #132	@ 0x84
 8006440:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	6809      	ldr	r1, [r1, #0]
 8006456:	4608      	mov	r0, r1
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	01c9      	lsls	r1, r1, #7
 800645c:	4401      	add	r1, r0
 800645e:	3184      	adds	r1, #132	@ 0x84
 8006460:	4313      	orrs	r3, r2
 8006462:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	01db      	lsls	r3, r3, #7
 800646e:	4413      	add	r3, r2
 8006470:	3384      	adds	r3, #132	@ 0x84
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	01db      	lsls	r3, r3, #7
 800647e:	4413      	add	r3, r2
 8006480:	3384      	adds	r3, #132	@ 0x84
 8006482:	461a      	mov	r2, r3
 8006484:	2300      	movs	r3, #0
 8006486:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	01db      	lsls	r3, r3, #7
 8006492:	4413      	add	r3, r2
 8006494:	3384      	adds	r3, #132	@ 0x84
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064a6:	2304      	movs	r3, #4
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e01b      	b.n	80064e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d102      	bne.n	80064ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064b4:	2303      	movs	r3, #3
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e014      	b.n	80064e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d00b      	beq.n	80064da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d007      	beq.n	80064da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d003      	beq.n	80064da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d102      	bne.n	80064e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064da:	2302      	movs	r3, #2
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	e001      	b.n	80064e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064e0:	2301      	movs	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	01db      	lsls	r3, r3, #7
 80064ee:	4413      	add	r3, r2
 80064f0:	3384      	adds	r3, #132	@ 0x84
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	4611      	mov	r1, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	01d2      	lsls	r2, r2, #7
 80064fe:	440a      	add	r2, r1
 8006500:	3284      	adds	r2, #132	@ 0x84
 8006502:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006506:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	041a      	lsls	r2, r3, #16
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1acb      	subs	r3, r1, r3
 800651e:	69f9      	ldr	r1, [r7, #28]
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	3303      	adds	r3, #3
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	6809      	ldr	r1, [r1, #0]
 800652a:	4608      	mov	r0, r1
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	01c9      	lsls	r1, r1, #7
 8006530:	4401      	add	r1, r0
 8006532:	3184      	adds	r1, #132	@ 0x84
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	@ 0x84
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4611      	mov	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	01d2      	lsls	r2, r2, #7
 8006552:	440a      	add	r2, r1
 8006554:	3284      	adds	r2, #132	@ 0x84
 8006556:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	01db      	lsls	r3, r3, #7
 800656a:	4413      	add	r3, r2
 800656c:	3384      	adds	r3, #132	@ 0x84
 800656e:	461a      	mov	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	01db      	lsls	r3, r3, #7
 8006580:	4413      	add	r3, r2
 8006582:	3384      	adds	r3, #132	@ 0x84
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4611      	mov	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	01d2      	lsls	r2, r2, #7
 8006590:	440a      	add	r2, r1
 8006592:	3284      	adds	r2, #132	@ 0x84
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6013      	str	r3, [r2, #0]
}
 800659a:	bf00      	nop
 800659c:	3724      	adds	r7, #36	@ 0x24
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e25e      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d075      	beq.n	80066b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065c6:	4b88      	ldr	r3, [pc, #544]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00c      	beq.n	80065ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065d2:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d112      	bne.n	8006604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065de:	4b82      	ldr	r3, [pc, #520]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ea:	d10b      	bne.n	8006604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ec:	4b7e      	ldr	r3, [pc, #504]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05b      	beq.n	80066b0 <HAL_RCC_OscConfig+0x108>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d157      	bne.n	80066b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e239      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660c:	d106      	bne.n	800661c <HAL_RCC_OscConfig+0x74>
 800660e:	4b76      	ldr	r3, [pc, #472]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a75      	ldr	r2, [pc, #468]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e01d      	b.n	8006658 <HAL_RCC_OscConfig+0xb0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x98>
 8006626:	4b70      	ldr	r3, [pc, #448]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6f      	ldr	r2, [pc, #444]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800662c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4b6d      	ldr	r3, [pc, #436]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6c      	ldr	r2, [pc, #432]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e00b      	b.n	8006658 <HAL_RCC_OscConfig+0xb0>
 8006640:	4b69      	ldr	r3, [pc, #420]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a68      	ldr	r2, [pc, #416]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	4b66      	ldr	r3, [pc, #408]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a65      	ldr	r2, [pc, #404]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d013      	beq.n	8006688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fd fd44 	bl	80040ec <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006668:	f7fd fd40 	bl	80040ec <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	@ 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e1fe      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667a:	4b5b      	ldr	r3, [pc, #364]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0xc0>
 8006686:	e014      	b.n	80066b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006688:	f7fd fd30 	bl	80040ec <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006690:	f7fd fd2c 	bl	80040ec <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b64      	cmp	r3, #100	@ 0x64
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e1ea      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a2:	4b51      	ldr	r3, [pc, #324]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0xe8>
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d063      	beq.n	8006786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066be:	4b4a      	ldr	r3, [pc, #296]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ca:	4b47      	ldr	r3, [pc, #284]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d11c      	bne.n	8006710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b44      	ldr	r3, [pc, #272]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d116      	bne.n	8006710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e2:	4b41      	ldr	r3, [pc, #260]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_RCC_OscConfig+0x152>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d001      	beq.n	80066fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e1be      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fa:	4b3b      	ldr	r3, [pc, #236]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	4937      	ldr	r1, [pc, #220]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800670e:	e03a      	b.n	8006786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d020      	beq.n	800675a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006718:	4b34      	ldr	r3, [pc, #208]	@ (80067ec <HAL_RCC_OscConfig+0x244>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fd fce5 	bl	80040ec <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006726:	f7fd fce1 	bl	80040ec <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e19f      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006738:	4b2b      	ldr	r3, [pc, #172]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b28      	ldr	r3, [pc, #160]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4925      	ldr	r1, [pc, #148]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 8006754:	4313      	orrs	r3, r2
 8006756:	600b      	str	r3, [r1, #0]
 8006758:	e015      	b.n	8006786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675a:	4b24      	ldr	r3, [pc, #144]	@ (80067ec <HAL_RCC_OscConfig+0x244>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006760:	f7fd fcc4 	bl	80040ec <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006768:	f7fd fcc0 	bl	80040ec <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e17e      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677a:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f0      	bne.n	8006768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d036      	beq.n	8006800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679a:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <HAL_RCC_OscConfig+0x248>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a0:	f7fd fca4 	bl	80040ec <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a8:	f7fd fca0 	bl	80040ec <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e15e      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <HAL_RCC_OscConfig+0x240>)
 80067bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x200>
 80067c6:	e01b      	b.n	8006800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c8:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <HAL_RCC_OscConfig+0x248>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ce:	f7fd fc8d 	bl	80040ec <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d4:	e00e      	b.n	80067f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067d6:	f7fd fc89 	bl	80040ec <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d907      	bls.n	80067f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e147      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
 80067e8:	40023800 	.word	0x40023800
 80067ec:	42470000 	.word	0x42470000
 80067f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f4:	4b88      	ldr	r3, [pc, #544]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80067f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1ea      	bne.n	80067d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8097 	beq.w	800693c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006812:	4b81      	ldr	r3, [pc, #516]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	4b7d      	ldr	r3, [pc, #500]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	4a7c      	ldr	r2, [pc, #496]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800682c:	6413      	str	r3, [r2, #64]	@ 0x40
 800682e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683a:	2301      	movs	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683e:	4b77      	ldr	r3, [pc, #476]	@ (8006a1c <HAL_RCC_OscConfig+0x474>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d118      	bne.n	800687c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800684a:	4b74      	ldr	r3, [pc, #464]	@ (8006a1c <HAL_RCC_OscConfig+0x474>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a73      	ldr	r2, [pc, #460]	@ (8006a1c <HAL_RCC_OscConfig+0x474>)
 8006850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006856:	f7fd fc49 	bl	80040ec <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685e:	f7fd fc45 	bl	80040ec <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e103      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006870:	4b6a      	ldr	r3, [pc, #424]	@ (8006a1c <HAL_RCC_OscConfig+0x474>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <HAL_RCC_OscConfig+0x2ea>
 8006884:	4b64      	ldr	r3, [pc, #400]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	4a63      	ldr	r2, [pc, #396]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006890:	e01c      	b.n	80068cc <HAL_RCC_OscConfig+0x324>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b05      	cmp	r3, #5
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x30c>
 800689a:	4b5f      	ldr	r3, [pc, #380]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	4a5e      	ldr	r2, [pc, #376]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068a0:	f043 0304 	orr.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a5b      	ldr	r2, [pc, #364]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0x324>
 80068b4:	4b58      	ldr	r3, [pc, #352]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a57      	ldr	r2, [pc, #348]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c0:	4b55      	ldr	r3, [pc, #340]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c4:	4a54      	ldr	r2, [pc, #336]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f023 0304 	bic.w	r3, r3, #4
 80068ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d015      	beq.n	8006900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fd fc0a 	bl	80040ec <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd fc06 	bl	80040ec <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0c2      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f2:	4b49      	ldr	r3, [pc, #292]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ee      	beq.n	80068dc <HAL_RCC_OscConfig+0x334>
 80068fe:	e014      	b.n	800692a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006900:	f7fd fbf4 	bl	80040ec <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006906:	e00a      	b.n	800691e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006908:	f7fd fbf0 	bl	80040ec <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e0ac      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ee      	bne.n	8006908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006930:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	4a38      	ldr	r2, [pc, #224]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8098 	beq.w	8006a76 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006946:	4b34      	ldr	r3, [pc, #208]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
 800694e:	2b08      	cmp	r3, #8
 8006950:	d05c      	beq.n	8006a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d141      	bne.n	80069de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695a:	4b31      	ldr	r3, [pc, #196]	@ (8006a20 <HAL_RCC_OscConfig+0x478>)
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006960:	f7fd fbc4 	bl	80040ec <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006968:	f7fd fbc0 	bl	80040ec <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e07e      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697a:	4b27      	ldr	r3, [pc, #156]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	3b01      	subs	r3, #1
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	061b      	lsls	r3, r3, #24
 80069aa:	491b      	ldr	r1, [pc, #108]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <HAL_RCC_OscConfig+0x478>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b6:	f7fd fb99 	bl	80040ec <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069be:	f7fd fb95 	bl	80040ec <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e053      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d0:	4b11      	ldr	r3, [pc, #68]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0f0      	beq.n	80069be <HAL_RCC_OscConfig+0x416>
 80069dc:	e04b      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069de:	4b10      	ldr	r3, [pc, #64]	@ (8006a20 <HAL_RCC_OscConfig+0x478>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e4:	f7fd fb82 	bl	80040ec <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fd fb7e 	bl	80040ec <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e03c      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fe:	4b06      	ldr	r3, [pc, #24]	@ (8006a18 <HAL_RCC_OscConfig+0x470>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <HAL_RCC_OscConfig+0x444>
 8006a0a:	e034      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d107      	bne.n	8006a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e02f      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	40007000 	.word	0x40007000
 8006a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a24:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <HAL_RCC_OscConfig+0x4d8>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d11c      	bne.n	8006a72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d115      	bne.n	8006a72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d10d      	bne.n	8006a72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800

08006a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0cc      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a98:	4b68      	ldr	r3, [pc, #416]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d90c      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa6:	4b65      	ldr	r3, [pc, #404]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b63      	ldr	r3, [pc, #396]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0b8      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d020      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad8:	4b59      	ldr	r3, [pc, #356]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a58      	ldr	r2, [pc, #352]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af0:	4b53      	ldr	r3, [pc, #332]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a52      	ldr	r2, [pc, #328]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b50      	ldr	r3, [pc, #320]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	494d      	ldr	r1, [pc, #308]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d044      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b47      	ldr	r3, [pc, #284]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d119      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e07f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b42:	4b3f      	ldr	r3, [pc, #252]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e06f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b52:	4b3b      	ldr	r3, [pc, #236]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e067      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b62:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f023 0203 	bic.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4934      	ldr	r1, [pc, #208]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b74:	f7fd faba 	bl	80040ec <HAL_GetTick>
 8006b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7a:	e00a      	b.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7c:	f7fd fab6 	bl	80040ec <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e04f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	4b2b      	ldr	r3, [pc, #172]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 020c 	and.w	r2, r3, #12
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1eb      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d20c      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b22      	ldr	r3, [pc, #136]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bba:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e032      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4916      	ldr	r1, [pc, #88]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bf6:	4b12      	ldr	r3, [pc, #72]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	490e      	ldr	r1, [pc, #56]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c0a:	f000 f821 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	091b      	lsrs	r3, r3, #4
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	490a      	ldr	r1, [pc, #40]	@ (8006c44 <HAL_RCC_ClockConfig+0x1c0>)
 8006c1c:	5ccb      	ldrb	r3, [r1, r3]
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	4a09      	ldr	r2, [pc, #36]	@ (8006c48 <HAL_RCC_ClockConfig+0x1c4>)
 8006c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c26:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <HAL_RCC_ClockConfig+0x1c8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fd fa1a 	bl	8004064 <HAL_InitTick>

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023c00 	.word	0x40023c00
 8006c40:	40023800 	.word	0x40023800
 8006c44:	08008d40 	.word	0x08008d40
 8006c48:	200000fc 	.word	0x200000fc
 8006c4c:	2000018c 	.word	0x2000018c

08006c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c54:	b094      	sub	sp, #80	@ 0x50
 8006c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c60:	2300      	movs	r3, #0
 8006c62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c68:	4b79      	ldr	r3, [pc, #484]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 030c 	and.w	r3, r3, #12
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d00d      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x40>
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	f200 80e1 	bhi.w	8006e3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x34>
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c82:	e0db      	b.n	8006e3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c84:	4b73      	ldr	r3, [pc, #460]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006c88:	e0db      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c8a:	4b73      	ldr	r3, [pc, #460]	@ (8006e58 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c8e:	e0d8      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c90:	4b6f      	ldr	r3, [pc, #444]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d063      	beq.n	8006d6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	099b      	lsrs	r3, r3, #6
 8006cac:	2200      	movs	r2, #0
 8006cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	f04f 0000 	mov.w	r0, #0
 8006cca:	f04f 0100 	mov.w	r1, #0
 8006cce:	0159      	lsls	r1, r3, #5
 8006cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd4:	0150      	lsls	r0, r2, #5
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4621      	mov	r1, r4
 8006cdc:	1a51      	subs	r1, r2, r1
 8006cde:	6139      	str	r1, [r7, #16]
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	018b      	lsls	r3, r1, #6
 8006cf8:	4651      	mov	r1, sl
 8006cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cfe:	4651      	mov	r1, sl
 8006d00:	018a      	lsls	r2, r1, #6
 8006d02:	4651      	mov	r1, sl
 8006d04:	ebb2 0801 	subs.w	r8, r2, r1
 8006d08:	4659      	mov	r1, fp
 8006d0a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d22:	4690      	mov	r8, r2
 8006d24:	4699      	mov	r9, r3
 8006d26:	4623      	mov	r3, r4
 8006d28:	eb18 0303 	adds.w	r3, r8, r3
 8006d2c:	60bb      	str	r3, [r7, #8]
 8006d2e:	462b      	mov	r3, r5
 8006d30:	eb49 0303 	adc.w	r3, r9, r3
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d42:	4629      	mov	r1, r5
 8006d44:	024b      	lsls	r3, r1, #9
 8006d46:	4621      	mov	r1, r4
 8006d48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	024a      	lsls	r2, r1, #9
 8006d50:	4610      	mov	r0, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d56:	2200      	movs	r2, #0
 8006d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d60:	f7f9 fa96 	bl	8000290 <__aeabi_uldivmod>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4613      	mov	r3, r2
 8006d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6c:	e058      	b.n	8006e20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6e:	4b38      	ldr	r3, [pc, #224]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	099b      	lsrs	r3, r3, #6
 8006d74:	2200      	movs	r2, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	4611      	mov	r1, r2
 8006d7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d7e:	623b      	str	r3, [r7, #32]
 8006d80:	2300      	movs	r3, #0
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d88:	4642      	mov	r2, r8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	f04f 0000 	mov.w	r0, #0
 8006d90:	f04f 0100 	mov.w	r1, #0
 8006d94:	0159      	lsls	r1, r3, #5
 8006d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d9a:	0150      	lsls	r0, r2, #5
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4641      	mov	r1, r8
 8006da2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006da6:	4649      	mov	r1, r9
 8006da8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006db8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dc0:	ebb2 040a 	subs.w	r4, r2, sl
 8006dc4:	eb63 050b 	sbc.w	r5, r3, fp
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	00eb      	lsls	r3, r5, #3
 8006dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dd6:	00e2      	lsls	r2, r4, #3
 8006dd8:	4614      	mov	r4, r2
 8006dda:	461d      	mov	r5, r3
 8006ddc:	4643      	mov	r3, r8
 8006dde:	18e3      	adds	r3, r4, r3
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	464b      	mov	r3, r9
 8006de4:	eb45 0303 	adc.w	r3, r5, r3
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006df6:	4629      	mov	r1, r5
 8006df8:	028b      	lsls	r3, r1, #10
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e00:	4621      	mov	r1, r4
 8006e02:	028a      	lsls	r2, r1, #10
 8006e04:	4610      	mov	r0, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e14:	f7f9 fa3c 	bl	8000290 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e3a:	e002      	b.n	8006e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3750      	adds	r7, #80	@ 0x50
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4e:	bf00      	nop
 8006e50:	40023800 	.word	0x40023800
 8006e54:	00f42400 	.word	0x00f42400
 8006e58:	007a1200 	.word	0x007a1200

08006e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e60:	4b03      	ldr	r3, [pc, #12]	@ (8006e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	200000fc 	.word	0x200000fc

08006e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e78:	f7ff fff0 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0a9b      	lsrs	r3, r3, #10
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4903      	ldr	r1, [pc, #12]	@ (8006e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	08008d50 	.word	0x08008d50

08006e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d075      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ed0:	4b91      	ldr	r3, [pc, #580]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed6:	f7fd f909 	bl	80040ec <HAL_GetTick>
 8006eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ede:	f7fd f905 	bl	80040ec <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e189      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f0      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	019a      	lsls	r2, r3, #6
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	071b      	lsls	r3, r3, #28
 8006f14:	4981      	ldr	r1, [pc, #516]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01f      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f28:	4b7c      	ldr	r3, [pc, #496]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2e:	0f1b      	lsrs	r3, r3, #28
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	019a      	lsls	r2, r3, #6
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	061b      	lsls	r3, r3, #24
 8006f42:	431a      	orrs	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	071b      	lsls	r3, r3, #28
 8006f48:	4974      	ldr	r1, [pc, #464]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f50:	4b72      	ldr	r3, [pc, #456]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f56:	f023 021f 	bic.w	r2, r3, #31
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	496e      	ldr	r1, [pc, #440]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	019a      	lsls	r2, r3, #6
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	061b      	lsls	r3, r3, #24
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	071b      	lsls	r3, r3, #28
 8006f88:	4964      	ldr	r1, [pc, #400]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f90:	4b61      	ldr	r3, [pc, #388]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f96:	f7fd f8a9 	bl	80040ec <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f9e:	f7fd f8a5 	bl	80040ec <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e129      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d079      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fd4:	4b52      	ldr	r3, [pc, #328]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fd f887 	bl	80040ec <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fe2:	f7fd f883 	bl	80040ec <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e107      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ff4:	4b49      	ldr	r3, [pc, #292]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007000:	d0ef      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d020      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800700e:	4b43      	ldr	r3, [pc, #268]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	0f1b      	lsrs	r3, r3, #28
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	019a      	lsls	r2, r3, #6
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	431a      	orrs	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	071b      	lsls	r3, r3, #28
 800702e:	493b      	ldr	r1, [pc, #236]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007036:	4b39      	ldr	r3, [pc, #228]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800703c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	3b01      	subs	r3, #1
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4934      	ldr	r1, [pc, #208]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01e      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800705c:	4b2f      	ldr	r3, [pc, #188]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007062:	0e1b      	lsrs	r3, r3, #24
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	019a      	lsls	r2, r3, #6
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	071b      	lsls	r3, r3, #28
 800707c:	4927      	ldr	r1, [pc, #156]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007084:	4b25      	ldr	r3, [pc, #148]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800708a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	4922      	ldr	r1, [pc, #136]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800709a:	4b21      	ldr	r3, [pc, #132]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070a0:	f7fd f824 	bl	80040ec <HAL_GetTick>
 80070a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070a8:	f7fd f820 	bl	80040ec <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0a4      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070ba:	4b18      	ldr	r3, [pc, #96]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070c6:	d1ef      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 808b 	beq.w	80071ec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	4b10      	ldr	r3, [pc, #64]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	4a0f      	ldr	r2, [pc, #60]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80070e6:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a0b      	ldr	r2, [pc, #44]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070fe:	f7fc fff5 	bl	80040ec <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007104:	e010      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007106:	f7fc fff1 	bl	80040ec <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d909      	bls.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e075      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007118:	42470068 	.word	0x42470068
 800711c:	40023800 	.word	0x40023800
 8007120:	42470070 	.word	0x42470070
 8007124:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007128:	4b38      	ldr	r3, [pc, #224]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0e8      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007134:	4b36      	ldr	r3, [pc, #216]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02f      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	429a      	cmp	r2, r3
 8007150:	d028      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007152:	4b2f      	ldr	r3, [pc, #188]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800715c:	4b2d      	ldr	r3, [pc, #180]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007162:	4b2c      	ldr	r3, [pc, #176]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007168:	4a29      	ldr	r2, [pc, #164]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800716e:	4b28      	ldr	r3, [pc, #160]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b01      	cmp	r3, #1
 8007178:	d114      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800717a:	f7fc ffb7 	bl	80040ec <HAL_GetTick>
 800717e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007180:	e00a      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007182:	f7fc ffb3 	bl	80040ec <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007190:	4293      	cmp	r3, r2
 8007192:	d901      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e035      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007198:	4b1d      	ldr	r3, [pc, #116]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0ee      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071b0:	d10d      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071b2:	4b17      	ldr	r3, [pc, #92]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c6:	4912      	ldr	r1, [pc, #72]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	608b      	str	r3, [r1, #8]
 80071cc:	e005      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80071ce:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	4a0f      	ldr	r2, [pc, #60]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071d4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80071d8:	6093      	str	r3, [r2, #8]
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e6:	490a      	ldr	r1, [pc, #40]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80071fe:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007200:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40007000 	.word	0x40007000
 8007210:	40023800 	.word	0x40023800
 8007214:	42470e40 	.word	0x42470e40
 8007218:	424711e0 	.word	0x424711e0

0800721c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e025      	b.n	800727c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f81d 	bl	8007284 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f000 ff0f 	bl	8008080 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	461a      	mov	r2, r3
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	f000 ff7a 	bl	8008166 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d101      	bne.n	80072b4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
 80072b2:	e018      	b.n	80072e6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 ffcd 	bl	8008264 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d104      	bne.n	80072dc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2205      	movs	r2, #5
 80072d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80072da:	e003      	b.n	80072e4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d101      	bne.n	8007308 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
 8007306:	e00e      	b.n	8007326 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ffe0 	bl	80082dc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e05d      	b.n	80073fc <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f87d 	bl	8007454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007370:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	ea42 0103 	orr.w	r1, r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0104 	and.w	r1, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d0:	d104      	bne.n	80073dc <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073da:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69da      	ldr	r2, [r3, #28]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e01a      	b.n	800744c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800742c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f81a 	bl	8007468 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	4613      	mov	r3, r2
 800748a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_SPI_Transmit+0x22>
 800749a:	2302      	movs	r3, #2
 800749c:	e140      	b.n	8007720 <HAL_SPI_Transmit+0x2a4>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a6:	f7fc fe21 	bl	80040ec <HAL_GetTick>
 80074aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
 80074be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074c0:	e125      	b.n	800770e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_Transmit+0x52>
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074d2:	e11c      	b.n	800770e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751a:	d107      	bne.n	800752c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800752a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007534:	d10f      	bne.n	8007556 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007554:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b40      	cmp	r3, #64	@ 0x40
 8007562:	d007      	beq.n	8007574 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800757c:	d14b      	bne.n	8007616 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_SPI_Transmit+0x110>
 8007586:	8afb      	ldrh	r3, [r7, #22]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d13e      	bne.n	800760a <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	881a      	ldrh	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759c:	1c9a      	adds	r2, r3, #2
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075b0:	e02b      	b.n	800760a <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d112      	bne.n	80075e6 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c4:	881a      	ldrh	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d0:	1c9a      	adds	r2, r3, #2
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075e4:	e011      	b.n	800760a <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e6:	f7fc fd81 	bl	80040ec <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d803      	bhi.n	80075fe <HAL_SPI_Transmit+0x182>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d102      	bne.n	8007604 <HAL_SPI_Transmit+0x188>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007608:	e081      	b.n	800770e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ce      	bne.n	80075b2 <HAL_SPI_Transmit+0x136>
 8007614:	e04c      	b.n	80076b0 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Transmit+0x1a8>
 800761e:	8afb      	ldrh	r3, [r7, #22]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d140      	bne.n	80076a6 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800764a:	e02c      	b.n	80076a6 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d113      	bne.n	8007682 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007680:	e011      	b.n	80076a6 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007682:	f7fc fd33 	bl	80040ec <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d803      	bhi.n	800769a <HAL_SPI_Transmit+0x21e>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Transmit+0x224>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076a4:	e033      	b.n	800770e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1cd      	bne.n	800764c <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076b8:	d107      	bne.n	80076ca <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076c8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fc94 	bl	8007ffc <SPI_EndRxTxTransaction>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	77fb      	strb	r3, [r7, #31]
 800770a:	e000      	b.n	800770e <HAL_SPI_Transmit+0x292>
  }

error:
 800770c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800771e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	4613      	mov	r3, r2
 8007736:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007744:	d112      	bne.n	800776c <HAL_SPI_Receive+0x44>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10e      	bne.n	800776c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2204      	movs	r2, #4
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007756:	88fa      	ldrh	r2, [r7, #6]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f95f 	bl	8007a26 <HAL_SPI_TransmitReceive>
 8007768:	4603      	mov	r3, r0
 800776a:	e158      	b.n	8007a1e <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_SPI_Receive+0x52>
 8007776:	2302      	movs	r3, #2
 8007778:	e151      	b.n	8007a1e <HAL_SPI_Receive+0x2f6>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007782:	f7fc fcb3 	bl	80040ec <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d002      	beq.n	800779a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007794:	2302      	movs	r3, #2
 8007796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007798:	e138      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_SPI_Receive+0x7e>
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077aa:	e12f      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2204      	movs	r2, #4
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f2:	d116      	bne.n	8007822 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007812:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782a:	d107      	bne.n	800783c <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800783a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	2b40      	cmp	r3, #64	@ 0x40
 8007848:	d007      	beq.n	800785a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007858:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d162      	bne.n	8007928 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007862:	e02e      	b.n	80078c2 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b01      	cmp	r3, #1
 8007870:	d115      	bne.n	800789e <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f103 020c 	add.w	r2, r3, #12
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800789c:	e011      	b.n	80078c2 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800789e:	f7fc fc25 	bl	80040ec <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d803      	bhi.n	80078b6 <HAL_SPI_Receive+0x18e>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d102      	bne.n	80078bc <HAL_SPI_Receive+0x194>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078c0:	e0a4      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1cb      	bne.n	8007864 <HAL_SPI_Receive+0x13c>
 80078cc:	e031      	b.n	8007932 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d113      	bne.n	8007904 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	b292      	uxth	r2, r2
 80078e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	1c9a      	adds	r2, r3, #2
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007902:	e011      	b.n	8007928 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007904:	f7fc fbf2 	bl	80040ec <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d803      	bhi.n	800791c <HAL_SPI_Receive+0x1f4>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d102      	bne.n	8007922 <HAL_SPI_Receive+0x1fa>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d102      	bne.n	8007928 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007926:	e071      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1cd      	bne.n	80078ce <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800793a:	d142      	bne.n	80079c2 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800794a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2201      	movs	r2, #1
 8007954:	2101      	movs	r1, #1
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fa81 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007966:	e051      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007970:	d107      	bne.n	8007982 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	b292      	uxth	r2, r2
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e008      	b.n	8007994 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f103 020c 	add.w	r2, r3, #12
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	2101      	movs	r1, #1
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fa5d 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ae:	f043 0202 	orr.w	r2, r3, #2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	75fb      	strb	r3, [r7, #23]
      goto error;
 80079ba:	e027      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fab3 	bl	8007f32 <SPI_EndRxTransaction>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d10a      	bne.n	80079fc <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80079fa:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
 8007a08:	e000      	b.n	8007a0c <HAL_SPI_Receive+0x2e4>
  }

error :
 8007a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b08e      	sub	sp, #56	@ 0x38
 8007a2a:	af02      	add	r7, sp, #8
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a34:	2301      	movs	r3, #1
 8007a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x26>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e1f6      	b.n	8007e3a <HAL_SPI_TransmitReceive+0x414>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a54:	f7fc fb4a 	bl	80040ec <HAL_GetTick>
 8007a58:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a6a:	887b      	ldrh	r3, [r7, #2]
 8007a6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d00f      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x70>
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a7c:	d107      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x68>
 8007a86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d003      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007a94:	e1c7      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x82>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x82>
 8007aa2:	887b      	ldrh	r3, [r7, #2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007aae:	e1ba      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d003      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2205      	movs	r2, #5
 8007ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	887a      	ldrh	r2, [r7, #2]
 8007ada:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	887a      	ldrh	r2, [r7, #2]
 8007ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	887a      	ldrh	r2, [r7, #2]
 8007aec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b02:	d10f      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b22:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d007      	beq.n	8007b42 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b4a:	f040 808b 	bne.w	8007c64 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_SPI_TransmitReceive+0x136>
 8007b56:	8b7b      	ldrh	r3, [r7, #26]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d178      	bne.n	8007c4e <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6c:	1c9a      	adds	r2, r3, #2
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b80:	e065      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d12d      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1c6>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d028      	beq.n	8007bec <HAL_SPI_TransmitReceive+0x1c6>
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d125      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10c      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1c6>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bda:	d107      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bea:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d119      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x208>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d014      	beq.n	8007c2e <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	1c9a      	adds	r2, r3, #2
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c2e:	f7fc fa5d 	bl	80040ec <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d807      	bhi.n	8007c4e <HAL_SPI_TransmitReceive+0x228>
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d003      	beq.n	8007c4e <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007c4c:	e0eb      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d194      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x15c>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d18f      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x15c>
 8007c62:	e08e      	b.n	8007d82 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x24c>
 8007c6c:	8b7b      	ldrh	r3, [r7, #26]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d17d      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c98:	e069      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d12e      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x2e0>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d029      	beq.n	8007d06 <HAL_SPI_TransmitReceive+0x2e0>
 8007cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d126      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x2e0>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf4:	d107      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d04:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d119      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x322>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d014      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d44:	2301      	movs	r3, #1
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d48:	f7fc f9d0 	bl	80040ec <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d803      	bhi.n	8007d60 <HAL_SPI_TransmitReceive+0x33a>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d102      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x340>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007d6c:	e05b      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d190      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x274>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d18b      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d8a:	d117      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d92:	2201      	movs	r2, #1
 8007d94:	2101      	movs	r1, #1
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f861 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	f043 0202 	orr.w	r2, r3, #2
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8007db4:	e037      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d10d      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f043 0202 	orr.w	r2, r3, #2
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007dde:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f906 	bl	8007ffc <SPI_EndRxTxTransaction>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007e02:	e010      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	e000      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007e24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3730      	adds	r7, #48	@ 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e50:	b2db      	uxtb	r3, r3
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	603b      	str	r3, [r7, #0]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e6e:	e04c      	b.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d048      	beq.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007e78:	f7fc f938 	bl	80040ec <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d902      	bls.n	8007e8e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d13d      	bne.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ea6:	d111      	bne.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb0:	d004      	beq.n	8007ebc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eba:	d107      	bne.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ed4:	d10f      	bne.n	8007ef6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e00f      	b.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4013      	ands	r3, r2
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	bf0c      	ite	eq
 8007f1a:	2301      	moveq	r3, #1
 8007f1c:	2300      	movne	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d1a3      	bne.n	8007e70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af02      	add	r7, sp, #8
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f46:	d111      	bne.n	8007f6c <SPI_EndRxTransaction+0x3a>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f50:	d004      	beq.n	8007f5c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f5a:	d107      	bne.n	8007f6c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f6a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f74:	d12a      	bne.n	8007fcc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f7e:	d012      	beq.n	8007fa6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	2180      	movs	r1, #128	@ 0x80
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff ff67 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02d      	beq.n	8007ff2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e026      	b.n	8007ff4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2101      	movs	r1, #1
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff ff54 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01a      	beq.n	8007ff2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc0:	f043 0220 	orr.w	r2, r3, #32
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e013      	b.n	8007ff4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff ff41 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	f043 0220 	orr.w	r2, r3, #32
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e000      	b.n	8007ff4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008008:	4b1b      	ldr	r3, [pc, #108]	@ (8008078 <SPI_EndRxTxTransaction+0x7c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a1b      	ldr	r2, [pc, #108]	@ (800807c <SPI_EndRxTxTransaction+0x80>)
 800800e:	fba2 2303 	umull	r2, r3, r2, r3
 8008012:	0d5b      	lsrs	r3, r3, #21
 8008014:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008018:	fb02 f303 	mul.w	r3, r2, r3
 800801c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008026:	d112      	bne.n	800804e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	2180      	movs	r1, #128	@ 0x80
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f7ff ff13 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008042:	f043 0220 	orr.w	r2, r3, #32
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e00f      	b.n	800806e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	3b01      	subs	r3, #1
 8008058:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008064:	2b80      	cmp	r3, #128	@ 0x80
 8008066:	d0f2      	beq.n	800804e <SPI_EndRxTxTransaction+0x52>
 8008068:	e000      	b.n	800806c <SPI_EndRxTxTransaction+0x70>
        break;
 800806a:	bf00      	nop
  }

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200000fc 	.word	0x200000fc
 800807c:	165e9f81 	.word	0x165e9f81

08008080 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d029      	beq.n	80080ee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80080a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080aa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080b4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80080ba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80080c0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80080c6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80080cc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80080d2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80080d8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 80080de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e034      	b.n	8008158 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80080fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008104:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800810a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800811e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008122:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800812c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008132:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008138:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800813e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008144:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	4313      	orrs	r3, r2
 800814a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d02e      	beq.n	80081de <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800818c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	3b01      	subs	r3, #1
 800819a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800819c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80081a6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80081b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80081ba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80081c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80081ce:	4313      	orrs	r3, r2
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	e03b      	b.n	8008256 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081ee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008200:	4313      	orrs	r3, r2
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008214:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	3b01      	subs	r3, #1
 8008222:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008224:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800822e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	3b01      	subs	r3, #1
 8008236:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008238:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	3b01      	subs	r3, #1
 8008240:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008242:	4313      	orrs	r3, r2
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008280:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	3b01      	subs	r3, #1
 8008288:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800828a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800829c:	f7fb ff26 	bl	80040ec <HAL_GetTick>
 80082a0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80082a2:	e010      	b.n	80082c6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082aa:	d00c      	beq.n	80082c6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <FMC_SDRAM_SendCommand+0x5e>
 80082b2:	f7fb ff1b 	bl	80040ec <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d201      	bcs.n	80082c6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e006      	b.n	80082d4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d0e8      	beq.n	80082a4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <sniprintf>:
 8008304:	b40c      	push	{r2, r3}
 8008306:	b530      	push	{r4, r5, lr}
 8008308:	4b18      	ldr	r3, [pc, #96]	@ (800836c <sniprintf+0x68>)
 800830a:	1e0c      	subs	r4, r1, #0
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	b09d      	sub	sp, #116	@ 0x74
 8008310:	da08      	bge.n	8008324 <sniprintf+0x20>
 8008312:	238b      	movs	r3, #139	@ 0x8b
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	f04f 30ff 	mov.w	r0, #4294967295
 800831a:	b01d      	add	sp, #116	@ 0x74
 800831c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008320:	b002      	add	sp, #8
 8008322:	4770      	bx	lr
 8008324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008332:	bf14      	ite	ne
 8008334:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008338:	4623      	moveq	r3, r4
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	9307      	str	r3, [sp, #28]
 800833e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008342:	9002      	str	r0, [sp, #8]
 8008344:	9006      	str	r0, [sp, #24]
 8008346:	f8ad 3016 	strh.w	r3, [sp, #22]
 800834a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800834c:	ab21      	add	r3, sp, #132	@ 0x84
 800834e:	a902      	add	r1, sp, #8
 8008350:	4628      	mov	r0, r5
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	f000 f98e 	bl	8008674 <_svfiprintf_r>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	bfbc      	itt	lt
 800835c:	238b      	movlt	r3, #139	@ 0x8b
 800835e:	602b      	strlt	r3, [r5, #0]
 8008360:	2c00      	cmp	r4, #0
 8008362:	d0da      	beq.n	800831a <sniprintf+0x16>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e7d6      	b.n	800831a <sniprintf+0x16>
 800836c:	20000194 	.word	0x20000194

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	@ (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	@ (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	@ (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	@ (80083c4 <__libc_init_array+0x44>)
 8008394:	f000 fc72 	bl	8008c7c <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800b8ac 	.word	0x0800b8ac
 80083bc:	0800b8ac 	.word	0x0800b8ac
 80083c0:	0800b8ac 	.word	0x0800b8ac
 80083c4:	0800b8b0 	.word	0x0800b8b0

080083c8 <__retarget_lock_acquire_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_release_recursive>:
 80083ca:	4770      	bx	lr

080083cc <_free_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4605      	mov	r5, r0
 80083d0:	2900      	cmp	r1, #0
 80083d2:	d041      	beq.n	8008458 <_free_r+0x8c>
 80083d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d8:	1f0c      	subs	r4, r1, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfb8      	it	lt
 80083de:	18e4      	addlt	r4, r4, r3
 80083e0:	f000 f8e0 	bl	80085a4 <__malloc_lock>
 80083e4:	4a1d      	ldr	r2, [pc, #116]	@ (800845c <_free_r+0x90>)
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	b933      	cbnz	r3, 80083f8 <_free_r+0x2c>
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	6014      	str	r4, [r2, #0]
 80083ee:	4628      	mov	r0, r5
 80083f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f4:	f000 b8dc 	b.w	80085b0 <__malloc_unlock>
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d908      	bls.n	800840e <_free_r+0x42>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	1821      	adds	r1, r4, r0
 8008400:	428b      	cmp	r3, r1
 8008402:	bf01      	itttt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	1809      	addeq	r1, r1, r0
 800840a:	6021      	streq	r1, [r4, #0]
 800840c:	e7ed      	b.n	80083ea <_free_r+0x1e>
 800840e:	461a      	mov	r2, r3
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b10b      	cbz	r3, 8008418 <_free_r+0x4c>
 8008414:	42a3      	cmp	r3, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x42>
 8008418:	6811      	ldr	r1, [r2, #0]
 800841a:	1850      	adds	r0, r2, r1
 800841c:	42a0      	cmp	r0, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x6c>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	4401      	add	r1, r0
 8008424:	1850      	adds	r0, r2, r1
 8008426:	4283      	cmp	r3, r0
 8008428:	6011      	str	r1, [r2, #0]
 800842a:	d1e0      	bne.n	80083ee <_free_r+0x22>
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	6053      	str	r3, [r2, #4]
 8008432:	4408      	add	r0, r1
 8008434:	6010      	str	r0, [r2, #0]
 8008436:	e7da      	b.n	80083ee <_free_r+0x22>
 8008438:	d902      	bls.n	8008440 <_free_r+0x74>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d6      	b.n	80083ee <_free_r+0x22>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428b      	cmp	r3, r1
 8008446:	bf04      	itt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	6054      	str	r4, [r2, #4]
 8008456:	e7ca      	b.n	80083ee <_free_r+0x22>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20000800 	.word	0x20000800

08008460 <sbrk_aligned>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4e0f      	ldr	r6, [pc, #60]	@ (80084a0 <sbrk_aligned+0x40>)
 8008464:	460c      	mov	r4, r1
 8008466:	6831      	ldr	r1, [r6, #0]
 8008468:	4605      	mov	r5, r0
 800846a:	b911      	cbnz	r1, 8008472 <sbrk_aligned+0x12>
 800846c:	f000 fba4 	bl	8008bb8 <_sbrk_r>
 8008470:	6030      	str	r0, [r6, #0]
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f000 fb9f 	bl	8008bb8 <_sbrk_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d103      	bne.n	8008486 <sbrk_aligned+0x26>
 800847e:	f04f 34ff 	mov.w	r4, #4294967295
 8008482:	4620      	mov	r0, r4
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	1cc4      	adds	r4, r0, #3
 8008488:	f024 0403 	bic.w	r4, r4, #3
 800848c:	42a0      	cmp	r0, r4
 800848e:	d0f8      	beq.n	8008482 <sbrk_aligned+0x22>
 8008490:	1a21      	subs	r1, r4, r0
 8008492:	4628      	mov	r0, r5
 8008494:	f000 fb90 	bl	8008bb8 <_sbrk_r>
 8008498:	3001      	adds	r0, #1
 800849a:	d1f2      	bne.n	8008482 <sbrk_aligned+0x22>
 800849c:	e7ef      	b.n	800847e <sbrk_aligned+0x1e>
 800849e:	bf00      	nop
 80084a0:	200007fc 	.word	0x200007fc

080084a4 <_malloc_r>:
 80084a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a8:	1ccd      	adds	r5, r1, #3
 80084aa:	f025 0503 	bic.w	r5, r5, #3
 80084ae:	3508      	adds	r5, #8
 80084b0:	2d0c      	cmp	r5, #12
 80084b2:	bf38      	it	cc
 80084b4:	250c      	movcc	r5, #12
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	4606      	mov	r6, r0
 80084ba:	db01      	blt.n	80084c0 <_malloc_r+0x1c>
 80084bc:	42a9      	cmp	r1, r5
 80084be:	d904      	bls.n	80084ca <_malloc_r+0x26>
 80084c0:	230c      	movs	r3, #12
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	2000      	movs	r0, #0
 80084c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085a0 <_malloc_r+0xfc>
 80084ce:	f000 f869 	bl	80085a4 <__malloc_lock>
 80084d2:	f8d8 3000 	ldr.w	r3, [r8]
 80084d6:	461c      	mov	r4, r3
 80084d8:	bb44      	cbnz	r4, 800852c <_malloc_r+0x88>
 80084da:	4629      	mov	r1, r5
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff ffbf 	bl	8008460 <sbrk_aligned>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	4604      	mov	r4, r0
 80084e6:	d158      	bne.n	800859a <_malloc_r+0xf6>
 80084e8:	f8d8 4000 	ldr.w	r4, [r8]
 80084ec:	4627      	mov	r7, r4
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	d143      	bne.n	800857a <_malloc_r+0xd6>
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	d04b      	beq.n	800858e <_malloc_r+0xea>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	4639      	mov	r1, r7
 80084fa:	4630      	mov	r0, r6
 80084fc:	eb04 0903 	add.w	r9, r4, r3
 8008500:	f000 fb5a 	bl	8008bb8 <_sbrk_r>
 8008504:	4581      	cmp	r9, r0
 8008506:	d142      	bne.n	800858e <_malloc_r+0xea>
 8008508:	6821      	ldr	r1, [r4, #0]
 800850a:	1a6d      	subs	r5, r5, r1
 800850c:	4629      	mov	r1, r5
 800850e:	4630      	mov	r0, r6
 8008510:	f7ff ffa6 	bl	8008460 <sbrk_aligned>
 8008514:	3001      	adds	r0, #1
 8008516:	d03a      	beq.n	800858e <_malloc_r+0xea>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	442b      	add	r3, r5
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	f8d8 3000 	ldr.w	r3, [r8]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	bb62      	cbnz	r2, 8008580 <_malloc_r+0xdc>
 8008526:	f8c8 7000 	str.w	r7, [r8]
 800852a:	e00f      	b.n	800854c <_malloc_r+0xa8>
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	1b52      	subs	r2, r2, r5
 8008530:	d420      	bmi.n	8008574 <_malloc_r+0xd0>
 8008532:	2a0b      	cmp	r2, #11
 8008534:	d917      	bls.n	8008566 <_malloc_r+0xc2>
 8008536:	1961      	adds	r1, r4, r5
 8008538:	42a3      	cmp	r3, r4
 800853a:	6025      	str	r5, [r4, #0]
 800853c:	bf18      	it	ne
 800853e:	6059      	strne	r1, [r3, #4]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	bf08      	it	eq
 8008544:	f8c8 1000 	streq.w	r1, [r8]
 8008548:	5162      	str	r2, [r4, r5]
 800854a:	604b      	str	r3, [r1, #4]
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f82f 	bl	80085b0 <__malloc_unlock>
 8008552:	f104 000b 	add.w	r0, r4, #11
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	f020 0007 	bic.w	r0, r0, #7
 800855c:	1ac2      	subs	r2, r0, r3
 800855e:	bf1c      	itt	ne
 8008560:	1a1b      	subne	r3, r3, r0
 8008562:	50a3      	strne	r3, [r4, r2]
 8008564:	e7af      	b.n	80084c6 <_malloc_r+0x22>
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	42a3      	cmp	r3, r4
 800856a:	bf0c      	ite	eq
 800856c:	f8c8 2000 	streq.w	r2, [r8]
 8008570:	605a      	strne	r2, [r3, #4]
 8008572:	e7eb      	b.n	800854c <_malloc_r+0xa8>
 8008574:	4623      	mov	r3, r4
 8008576:	6864      	ldr	r4, [r4, #4]
 8008578:	e7ae      	b.n	80084d8 <_malloc_r+0x34>
 800857a:	463c      	mov	r4, r7
 800857c:	687f      	ldr	r7, [r7, #4]
 800857e:	e7b6      	b.n	80084ee <_malloc_r+0x4a>
 8008580:	461a      	mov	r2, r3
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	42a3      	cmp	r3, r4
 8008586:	d1fb      	bne.n	8008580 <_malloc_r+0xdc>
 8008588:	2300      	movs	r3, #0
 800858a:	6053      	str	r3, [r2, #4]
 800858c:	e7de      	b.n	800854c <_malloc_r+0xa8>
 800858e:	230c      	movs	r3, #12
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f80c 	bl	80085b0 <__malloc_unlock>
 8008598:	e794      	b.n	80084c4 <_malloc_r+0x20>
 800859a:	6005      	str	r5, [r0, #0]
 800859c:	e7d6      	b.n	800854c <_malloc_r+0xa8>
 800859e:	bf00      	nop
 80085a0:	20000800 	.word	0x20000800

080085a4 <__malloc_lock>:
 80085a4:	4801      	ldr	r0, [pc, #4]	@ (80085ac <__malloc_lock+0x8>)
 80085a6:	f7ff bf0f 	b.w	80083c8 <__retarget_lock_acquire_recursive>
 80085aa:	bf00      	nop
 80085ac:	200007f8 	.word	0x200007f8

080085b0 <__malloc_unlock>:
 80085b0:	4801      	ldr	r0, [pc, #4]	@ (80085b8 <__malloc_unlock+0x8>)
 80085b2:	f7ff bf0a 	b.w	80083ca <__retarget_lock_release_recursive>
 80085b6:	bf00      	nop
 80085b8:	200007f8 	.word	0x200007f8

080085bc <__ssputs_r>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	688e      	ldr	r6, [r1, #8]
 80085c2:	461f      	mov	r7, r3
 80085c4:	42be      	cmp	r6, r7
 80085c6:	680b      	ldr	r3, [r1, #0]
 80085c8:	4682      	mov	sl, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4690      	mov	r8, r2
 80085ce:	d82d      	bhi.n	800862c <__ssputs_r+0x70>
 80085d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085d8:	d026      	beq.n	8008628 <__ssputs_r+0x6c>
 80085da:	6965      	ldr	r5, [r4, #20]
 80085dc:	6909      	ldr	r1, [r1, #16]
 80085de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e2:	eba3 0901 	sub.w	r9, r3, r1
 80085e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ea:	1c7b      	adds	r3, r7, #1
 80085ec:	444b      	add	r3, r9
 80085ee:	106d      	asrs	r5, r5, #1
 80085f0:	429d      	cmp	r5, r3
 80085f2:	bf38      	it	cc
 80085f4:	461d      	movcc	r5, r3
 80085f6:	0553      	lsls	r3, r2, #21
 80085f8:	d527      	bpl.n	800864a <__ssputs_r+0x8e>
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7ff ff52 	bl	80084a4 <_malloc_r>
 8008600:	4606      	mov	r6, r0
 8008602:	b360      	cbz	r0, 800865e <__ssputs_r+0xa2>
 8008604:	6921      	ldr	r1, [r4, #16]
 8008606:	464a      	mov	r2, r9
 8008608:	f000 fae6 	bl	8008bd8 <memcpy>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	6126      	str	r6, [r4, #16]
 800861a:	6165      	str	r5, [r4, #20]
 800861c:	444e      	add	r6, r9
 800861e:	eba5 0509 	sub.w	r5, r5, r9
 8008622:	6026      	str	r6, [r4, #0]
 8008624:	60a5      	str	r5, [r4, #8]
 8008626:	463e      	mov	r6, r7
 8008628:	42be      	cmp	r6, r7
 800862a:	d900      	bls.n	800862e <__ssputs_r+0x72>
 800862c:	463e      	mov	r6, r7
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	4632      	mov	r2, r6
 8008632:	4641      	mov	r1, r8
 8008634:	f000 faa6 	bl	8008b84 <memmove>
 8008638:	68a3      	ldr	r3, [r4, #8]
 800863a:	1b9b      	subs	r3, r3, r6
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	4433      	add	r3, r6
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	2000      	movs	r0, #0
 8008646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864a:	462a      	mov	r2, r5
 800864c:	f000 fad2 	bl	8008bf4 <_realloc_r>
 8008650:	4606      	mov	r6, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d1e0      	bne.n	8008618 <__ssputs_r+0x5c>
 8008656:	6921      	ldr	r1, [r4, #16]
 8008658:	4650      	mov	r0, sl
 800865a:	f7ff feb7 	bl	80083cc <_free_r>
 800865e:	230c      	movs	r3, #12
 8008660:	f8ca 3000 	str.w	r3, [sl]
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e7e9      	b.n	8008646 <__ssputs_r+0x8a>
	...

08008674 <_svfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	4698      	mov	r8, r3
 800867a:	898b      	ldrh	r3, [r1, #12]
 800867c:	061b      	lsls	r3, r3, #24
 800867e:	b09d      	sub	sp, #116	@ 0x74
 8008680:	4607      	mov	r7, r0
 8008682:	460d      	mov	r5, r1
 8008684:	4614      	mov	r4, r2
 8008686:	d510      	bpl.n	80086aa <_svfiprintf_r+0x36>
 8008688:	690b      	ldr	r3, [r1, #16]
 800868a:	b973      	cbnz	r3, 80086aa <_svfiprintf_r+0x36>
 800868c:	2140      	movs	r1, #64	@ 0x40
 800868e:	f7ff ff09 	bl	80084a4 <_malloc_r>
 8008692:	6028      	str	r0, [r5, #0]
 8008694:	6128      	str	r0, [r5, #16]
 8008696:	b930      	cbnz	r0, 80086a6 <_svfiprintf_r+0x32>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	b01d      	add	sp, #116	@ 0x74
 80086a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a6:	2340      	movs	r3, #64	@ 0x40
 80086a8:	616b      	str	r3, [r5, #20]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ae:	2320      	movs	r3, #32
 80086b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b8:	2330      	movs	r3, #48	@ 0x30
 80086ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008858 <_svfiprintf_r+0x1e4>
 80086be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086c2:	f04f 0901 	mov.w	r9, #1
 80086c6:	4623      	mov	r3, r4
 80086c8:	469a      	mov	sl, r3
 80086ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ce:	b10a      	cbz	r2, 80086d4 <_svfiprintf_r+0x60>
 80086d0:	2a25      	cmp	r2, #37	@ 0x25
 80086d2:	d1f9      	bne.n	80086c8 <_svfiprintf_r+0x54>
 80086d4:	ebba 0b04 	subs.w	fp, sl, r4
 80086d8:	d00b      	beq.n	80086f2 <_svfiprintf_r+0x7e>
 80086da:	465b      	mov	r3, fp
 80086dc:	4622      	mov	r2, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7ff ff6b 	bl	80085bc <__ssputs_r>
 80086e6:	3001      	adds	r0, #1
 80086e8:	f000 80a7 	beq.w	800883a <_svfiprintf_r+0x1c6>
 80086ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086ee:	445a      	add	r2, fp
 80086f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086f2:	f89a 3000 	ldrb.w	r3, [sl]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 809f 	beq.w	800883a <_svfiprintf_r+0x1c6>
 80086fc:	2300      	movs	r3, #0
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008706:	f10a 0a01 	add.w	sl, sl, #1
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	9307      	str	r3, [sp, #28]
 800870e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008712:	931a      	str	r3, [sp, #104]	@ 0x68
 8008714:	4654      	mov	r4, sl
 8008716:	2205      	movs	r2, #5
 8008718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871c:	484e      	ldr	r0, [pc, #312]	@ (8008858 <_svfiprintf_r+0x1e4>)
 800871e:	f7f7 fd67 	bl	80001f0 <memchr>
 8008722:	9a04      	ldr	r2, [sp, #16]
 8008724:	b9d8      	cbnz	r0, 800875e <_svfiprintf_r+0xea>
 8008726:	06d0      	lsls	r0, r2, #27
 8008728:	bf44      	itt	mi
 800872a:	2320      	movmi	r3, #32
 800872c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008730:	0711      	lsls	r1, r2, #28
 8008732:	bf44      	itt	mi
 8008734:	232b      	movmi	r3, #43	@ 0x2b
 8008736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800873a:	f89a 3000 	ldrb.w	r3, [sl]
 800873e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008740:	d015      	beq.n	800876e <_svfiprintf_r+0xfa>
 8008742:	9a07      	ldr	r2, [sp, #28]
 8008744:	4654      	mov	r4, sl
 8008746:	2000      	movs	r0, #0
 8008748:	f04f 0c0a 	mov.w	ip, #10
 800874c:	4621      	mov	r1, r4
 800874e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008752:	3b30      	subs	r3, #48	@ 0x30
 8008754:	2b09      	cmp	r3, #9
 8008756:	d94b      	bls.n	80087f0 <_svfiprintf_r+0x17c>
 8008758:	b1b0      	cbz	r0, 8008788 <_svfiprintf_r+0x114>
 800875a:	9207      	str	r2, [sp, #28]
 800875c:	e014      	b.n	8008788 <_svfiprintf_r+0x114>
 800875e:	eba0 0308 	sub.w	r3, r0, r8
 8008762:	fa09 f303 	lsl.w	r3, r9, r3
 8008766:	4313      	orrs	r3, r2
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	46a2      	mov	sl, r4
 800876c:	e7d2      	b.n	8008714 <_svfiprintf_r+0xa0>
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	1d19      	adds	r1, r3, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	9103      	str	r1, [sp, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfbb      	ittet	lt
 800877a:	425b      	neglt	r3, r3
 800877c:	f042 0202 	orrlt.w	r2, r2, #2
 8008780:	9307      	strge	r3, [sp, #28]
 8008782:	9307      	strlt	r3, [sp, #28]
 8008784:	bfb8      	it	lt
 8008786:	9204      	strlt	r2, [sp, #16]
 8008788:	7823      	ldrb	r3, [r4, #0]
 800878a:	2b2e      	cmp	r3, #46	@ 0x2e
 800878c:	d10a      	bne.n	80087a4 <_svfiprintf_r+0x130>
 800878e:	7863      	ldrb	r3, [r4, #1]
 8008790:	2b2a      	cmp	r3, #42	@ 0x2a
 8008792:	d132      	bne.n	80087fa <_svfiprintf_r+0x186>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	1d1a      	adds	r2, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	9203      	str	r2, [sp, #12]
 800879c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087a0:	3402      	adds	r4, #2
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008868 <_svfiprintf_r+0x1f4>
 80087a8:	7821      	ldrb	r1, [r4, #0]
 80087aa:	2203      	movs	r2, #3
 80087ac:	4650      	mov	r0, sl
 80087ae:	f7f7 fd1f 	bl	80001f0 <memchr>
 80087b2:	b138      	cbz	r0, 80087c4 <_svfiprintf_r+0x150>
 80087b4:	9b04      	ldr	r3, [sp, #16]
 80087b6:	eba0 000a 	sub.w	r0, r0, sl
 80087ba:	2240      	movs	r2, #64	@ 0x40
 80087bc:	4082      	lsls	r2, r0
 80087be:	4313      	orrs	r3, r2
 80087c0:	3401      	adds	r4, #1
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	4824      	ldr	r0, [pc, #144]	@ (800885c <_svfiprintf_r+0x1e8>)
 80087ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087ce:	2206      	movs	r2, #6
 80087d0:	f7f7 fd0e 	bl	80001f0 <memchr>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d036      	beq.n	8008846 <_svfiprintf_r+0x1d2>
 80087d8:	4b21      	ldr	r3, [pc, #132]	@ (8008860 <_svfiprintf_r+0x1ec>)
 80087da:	bb1b      	cbnz	r3, 8008824 <_svfiprintf_r+0x1b0>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	3307      	adds	r3, #7
 80087e0:	f023 0307 	bic.w	r3, r3, #7
 80087e4:	3308      	adds	r3, #8
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ea:	4433      	add	r3, r6
 80087ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ee:	e76a      	b.n	80086c6 <_svfiprintf_r+0x52>
 80087f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f4:	460c      	mov	r4, r1
 80087f6:	2001      	movs	r0, #1
 80087f8:	e7a8      	b.n	800874c <_svfiprintf_r+0xd8>
 80087fa:	2300      	movs	r3, #0
 80087fc:	3401      	adds	r4, #1
 80087fe:	9305      	str	r3, [sp, #20]
 8008800:	4619      	mov	r1, r3
 8008802:	f04f 0c0a 	mov.w	ip, #10
 8008806:	4620      	mov	r0, r4
 8008808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880c:	3a30      	subs	r2, #48	@ 0x30
 800880e:	2a09      	cmp	r2, #9
 8008810:	d903      	bls.n	800881a <_svfiprintf_r+0x1a6>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0c6      	beq.n	80087a4 <_svfiprintf_r+0x130>
 8008816:	9105      	str	r1, [sp, #20]
 8008818:	e7c4      	b.n	80087a4 <_svfiprintf_r+0x130>
 800881a:	fb0c 2101 	mla	r1, ip, r1, r2
 800881e:	4604      	mov	r4, r0
 8008820:	2301      	movs	r3, #1
 8008822:	e7f0      	b.n	8008806 <_svfiprintf_r+0x192>
 8008824:	ab03      	add	r3, sp, #12
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	462a      	mov	r2, r5
 800882a:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <_svfiprintf_r+0x1f0>)
 800882c:	a904      	add	r1, sp, #16
 800882e:	4638      	mov	r0, r7
 8008830:	f3af 8000 	nop.w
 8008834:	1c42      	adds	r2, r0, #1
 8008836:	4606      	mov	r6, r0
 8008838:	d1d6      	bne.n	80087e8 <_svfiprintf_r+0x174>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	065b      	lsls	r3, r3, #25
 800883e:	f53f af2d 	bmi.w	800869c <_svfiprintf_r+0x28>
 8008842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008844:	e72c      	b.n	80086a0 <_svfiprintf_r+0x2c>
 8008846:	ab03      	add	r3, sp, #12
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	462a      	mov	r2, r5
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <_svfiprintf_r+0x1f0>)
 800884e:	a904      	add	r1, sp, #16
 8008850:	4638      	mov	r0, r7
 8008852:	f000 f879 	bl	8008948 <_printf_i>
 8008856:	e7ed      	b.n	8008834 <_svfiprintf_r+0x1c0>
 8008858:	0800b870 	.word	0x0800b870
 800885c:	0800b87a 	.word	0x0800b87a
 8008860:	00000000 	.word	0x00000000
 8008864:	080085bd 	.word	0x080085bd
 8008868:	0800b876 	.word	0x0800b876

0800886c <_printf_common>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	4616      	mov	r6, r2
 8008872:	4698      	mov	r8, r3
 8008874:	688a      	ldr	r2, [r1, #8]
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800887c:	4293      	cmp	r3, r2
 800887e:	bfb8      	it	lt
 8008880:	4613      	movlt	r3, r2
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008888:	4607      	mov	r7, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b10a      	cbz	r2, 8008892 <_printf_common+0x26>
 800888e:	3301      	adds	r3, #1
 8008890:	6033      	str	r3, [r6, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	0699      	lsls	r1, r3, #26
 8008896:	bf42      	ittt	mi
 8008898:	6833      	ldrmi	r3, [r6, #0]
 800889a:	3302      	addmi	r3, #2
 800889c:	6033      	strmi	r3, [r6, #0]
 800889e:	6825      	ldr	r5, [r4, #0]
 80088a0:	f015 0506 	ands.w	r5, r5, #6
 80088a4:	d106      	bne.n	80088b4 <_printf_common+0x48>
 80088a6:	f104 0a19 	add.w	sl, r4, #25
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	6832      	ldr	r2, [r6, #0]
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	42ab      	cmp	r3, r5
 80088b2:	dc26      	bgt.n	8008902 <_printf_common+0x96>
 80088b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	3b00      	subs	r3, #0
 80088bc:	bf18      	it	ne
 80088be:	2301      	movne	r3, #1
 80088c0:	0692      	lsls	r2, r2, #26
 80088c2:	d42b      	bmi.n	800891c <_printf_common+0xb0>
 80088c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088c8:	4641      	mov	r1, r8
 80088ca:	4638      	mov	r0, r7
 80088cc:	47c8      	blx	r9
 80088ce:	3001      	adds	r0, #1
 80088d0:	d01e      	beq.n	8008910 <_printf_common+0xa4>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	f003 0306 	and.w	r3, r3, #6
 80088da:	2b04      	cmp	r3, #4
 80088dc:	bf02      	ittt	eq
 80088de:	68e5      	ldreq	r5, [r4, #12]
 80088e0:	6833      	ldreq	r3, [r6, #0]
 80088e2:	1aed      	subeq	r5, r5, r3
 80088e4:	68a3      	ldr	r3, [r4, #8]
 80088e6:	bf0c      	ite	eq
 80088e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088ec:	2500      	movne	r5, #0
 80088ee:	4293      	cmp	r3, r2
 80088f0:	bfc4      	itt	gt
 80088f2:	1a9b      	subgt	r3, r3, r2
 80088f4:	18ed      	addgt	r5, r5, r3
 80088f6:	2600      	movs	r6, #0
 80088f8:	341a      	adds	r4, #26
 80088fa:	42b5      	cmp	r5, r6
 80088fc:	d11a      	bne.n	8008934 <_printf_common+0xc8>
 80088fe:	2000      	movs	r0, #0
 8008900:	e008      	b.n	8008914 <_printf_common+0xa8>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4641      	mov	r1, r8
 8008908:	4638      	mov	r0, r7
 800890a:	47c8      	blx	r9
 800890c:	3001      	adds	r0, #1
 800890e:	d103      	bne.n	8008918 <_printf_common+0xac>
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008918:	3501      	adds	r5, #1
 800891a:	e7c6      	b.n	80088aa <_printf_common+0x3e>
 800891c:	18e1      	adds	r1, r4, r3
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	2030      	movs	r0, #48	@ 0x30
 8008922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008926:	4422      	add	r2, r4
 8008928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800892c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008930:	3302      	adds	r3, #2
 8008932:	e7c7      	b.n	80088c4 <_printf_common+0x58>
 8008934:	2301      	movs	r3, #1
 8008936:	4622      	mov	r2, r4
 8008938:	4641      	mov	r1, r8
 800893a:	4638      	mov	r0, r7
 800893c:	47c8      	blx	r9
 800893e:	3001      	adds	r0, #1
 8008940:	d0e6      	beq.n	8008910 <_printf_common+0xa4>
 8008942:	3601      	adds	r6, #1
 8008944:	e7d9      	b.n	80088fa <_printf_common+0x8e>
	...

08008948 <_printf_i>:
 8008948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800894c:	7e0f      	ldrb	r7, [r1, #24]
 800894e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008950:	2f78      	cmp	r7, #120	@ 0x78
 8008952:	4691      	mov	r9, r2
 8008954:	4680      	mov	r8, r0
 8008956:	460c      	mov	r4, r1
 8008958:	469a      	mov	sl, r3
 800895a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800895e:	d807      	bhi.n	8008970 <_printf_i+0x28>
 8008960:	2f62      	cmp	r7, #98	@ 0x62
 8008962:	d80a      	bhi.n	800897a <_printf_i+0x32>
 8008964:	2f00      	cmp	r7, #0
 8008966:	f000 80d1 	beq.w	8008b0c <_printf_i+0x1c4>
 800896a:	2f58      	cmp	r7, #88	@ 0x58
 800896c:	f000 80b8 	beq.w	8008ae0 <_printf_i+0x198>
 8008970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008978:	e03a      	b.n	80089f0 <_printf_i+0xa8>
 800897a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800897e:	2b15      	cmp	r3, #21
 8008980:	d8f6      	bhi.n	8008970 <_printf_i+0x28>
 8008982:	a101      	add	r1, pc, #4	@ (adr r1, 8008988 <_printf_i+0x40>)
 8008984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008988:	080089e1 	.word	0x080089e1
 800898c:	080089f5 	.word	0x080089f5
 8008990:	08008971 	.word	0x08008971
 8008994:	08008971 	.word	0x08008971
 8008998:	08008971 	.word	0x08008971
 800899c:	08008971 	.word	0x08008971
 80089a0:	080089f5 	.word	0x080089f5
 80089a4:	08008971 	.word	0x08008971
 80089a8:	08008971 	.word	0x08008971
 80089ac:	08008971 	.word	0x08008971
 80089b0:	08008971 	.word	0x08008971
 80089b4:	08008af3 	.word	0x08008af3
 80089b8:	08008a1f 	.word	0x08008a1f
 80089bc:	08008aad 	.word	0x08008aad
 80089c0:	08008971 	.word	0x08008971
 80089c4:	08008971 	.word	0x08008971
 80089c8:	08008b15 	.word	0x08008b15
 80089cc:	08008971 	.word	0x08008971
 80089d0:	08008a1f 	.word	0x08008a1f
 80089d4:	08008971 	.word	0x08008971
 80089d8:	08008971 	.word	0x08008971
 80089dc:	08008ab5 	.word	0x08008ab5
 80089e0:	6833      	ldr	r3, [r6, #0]
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6032      	str	r2, [r6, #0]
 80089e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089f0:	2301      	movs	r3, #1
 80089f2:	e09c      	b.n	8008b2e <_printf_i+0x1e6>
 80089f4:	6833      	ldr	r3, [r6, #0]
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	1d19      	adds	r1, r3, #4
 80089fa:	6031      	str	r1, [r6, #0]
 80089fc:	0606      	lsls	r6, r0, #24
 80089fe:	d501      	bpl.n	8008a04 <_printf_i+0xbc>
 8008a00:	681d      	ldr	r5, [r3, #0]
 8008a02:	e003      	b.n	8008a0c <_printf_i+0xc4>
 8008a04:	0645      	lsls	r5, r0, #25
 8008a06:	d5fb      	bpl.n	8008a00 <_printf_i+0xb8>
 8008a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	da03      	bge.n	8008a18 <_printf_i+0xd0>
 8008a10:	232d      	movs	r3, #45	@ 0x2d
 8008a12:	426d      	negs	r5, r5
 8008a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a18:	4858      	ldr	r0, [pc, #352]	@ (8008b7c <_printf_i+0x234>)
 8008a1a:	230a      	movs	r3, #10
 8008a1c:	e011      	b.n	8008a42 <_printf_i+0xfa>
 8008a1e:	6821      	ldr	r1, [r4, #0]
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	0608      	lsls	r0, r1, #24
 8008a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a28:	d402      	bmi.n	8008a30 <_printf_i+0xe8>
 8008a2a:	0649      	lsls	r1, r1, #25
 8008a2c:	bf48      	it	mi
 8008a2e:	b2ad      	uxthmi	r5, r5
 8008a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a32:	4852      	ldr	r0, [pc, #328]	@ (8008b7c <_printf_i+0x234>)
 8008a34:	6033      	str	r3, [r6, #0]
 8008a36:	bf14      	ite	ne
 8008a38:	230a      	movne	r3, #10
 8008a3a:	2308      	moveq	r3, #8
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a42:	6866      	ldr	r6, [r4, #4]
 8008a44:	60a6      	str	r6, [r4, #8]
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	db05      	blt.n	8008a56 <_printf_i+0x10e>
 8008a4a:	6821      	ldr	r1, [r4, #0]
 8008a4c:	432e      	orrs	r6, r5
 8008a4e:	f021 0104 	bic.w	r1, r1, #4
 8008a52:	6021      	str	r1, [r4, #0]
 8008a54:	d04b      	beq.n	8008aee <_printf_i+0x1a6>
 8008a56:	4616      	mov	r6, r2
 8008a58:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a5c:	fb03 5711 	mls	r7, r3, r1, r5
 8008a60:	5dc7      	ldrb	r7, [r0, r7]
 8008a62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a66:	462f      	mov	r7, r5
 8008a68:	42bb      	cmp	r3, r7
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	d9f4      	bls.n	8008a58 <_printf_i+0x110>
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d10b      	bne.n	8008a8a <_printf_i+0x142>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	07df      	lsls	r7, r3, #31
 8008a76:	d508      	bpl.n	8008a8a <_printf_i+0x142>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	6861      	ldr	r1, [r4, #4]
 8008a7c:	4299      	cmp	r1, r3
 8008a7e:	bfde      	ittt	le
 8008a80:	2330      	movle	r3, #48	@ 0x30
 8008a82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a8a:	1b92      	subs	r2, r2, r6
 8008a8c:	6122      	str	r2, [r4, #16]
 8008a8e:	f8cd a000 	str.w	sl, [sp]
 8008a92:	464b      	mov	r3, r9
 8008a94:	aa03      	add	r2, sp, #12
 8008a96:	4621      	mov	r1, r4
 8008a98:	4640      	mov	r0, r8
 8008a9a:	f7ff fee7 	bl	800886c <_printf_common>
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d14a      	bne.n	8008b38 <_printf_i+0x1f0>
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	b004      	add	sp, #16
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	f043 0320 	orr.w	r3, r3, #32
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	4832      	ldr	r0, [pc, #200]	@ (8008b80 <_printf_i+0x238>)
 8008ab6:	2778      	movs	r7, #120	@ 0x78
 8008ab8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	6831      	ldr	r1, [r6, #0]
 8008ac0:	061f      	lsls	r7, r3, #24
 8008ac2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ac6:	d402      	bmi.n	8008ace <_printf_i+0x186>
 8008ac8:	065f      	lsls	r7, r3, #25
 8008aca:	bf48      	it	mi
 8008acc:	b2ad      	uxthmi	r5, r5
 8008ace:	6031      	str	r1, [r6, #0]
 8008ad0:	07d9      	lsls	r1, r3, #31
 8008ad2:	bf44      	itt	mi
 8008ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ad8:	6023      	strmi	r3, [r4, #0]
 8008ada:	b11d      	cbz	r5, 8008ae4 <_printf_i+0x19c>
 8008adc:	2310      	movs	r3, #16
 8008ade:	e7ad      	b.n	8008a3c <_printf_i+0xf4>
 8008ae0:	4826      	ldr	r0, [pc, #152]	@ (8008b7c <_printf_i+0x234>)
 8008ae2:	e7e9      	b.n	8008ab8 <_printf_i+0x170>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	f023 0320 	bic.w	r3, r3, #32
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	e7f6      	b.n	8008adc <_printf_i+0x194>
 8008aee:	4616      	mov	r6, r2
 8008af0:	e7bd      	b.n	8008a6e <_printf_i+0x126>
 8008af2:	6833      	ldr	r3, [r6, #0]
 8008af4:	6825      	ldr	r5, [r4, #0]
 8008af6:	6961      	ldr	r1, [r4, #20]
 8008af8:	1d18      	adds	r0, r3, #4
 8008afa:	6030      	str	r0, [r6, #0]
 8008afc:	062e      	lsls	r6, r5, #24
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	d501      	bpl.n	8008b06 <_printf_i+0x1be>
 8008b02:	6019      	str	r1, [r3, #0]
 8008b04:	e002      	b.n	8008b0c <_printf_i+0x1c4>
 8008b06:	0668      	lsls	r0, r5, #25
 8008b08:	d5fb      	bpl.n	8008b02 <_printf_i+0x1ba>
 8008b0a:	8019      	strh	r1, [r3, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	4616      	mov	r6, r2
 8008b12:	e7bc      	b.n	8008a8e <_printf_i+0x146>
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	6032      	str	r2, [r6, #0]
 8008b1a:	681e      	ldr	r6, [r3, #0]
 8008b1c:	6862      	ldr	r2, [r4, #4]
 8008b1e:	2100      	movs	r1, #0
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7f7 fb65 	bl	80001f0 <memchr>
 8008b26:	b108      	cbz	r0, 8008b2c <_printf_i+0x1e4>
 8008b28:	1b80      	subs	r0, r0, r6
 8008b2a:	6060      	str	r0, [r4, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2300      	movs	r3, #0
 8008b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b36:	e7aa      	b.n	8008a8e <_printf_i+0x146>
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	4632      	mov	r2, r6
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4640      	mov	r0, r8
 8008b40:	47d0      	blx	sl
 8008b42:	3001      	adds	r0, #1
 8008b44:	d0ad      	beq.n	8008aa2 <_printf_i+0x15a>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	079b      	lsls	r3, r3, #30
 8008b4a:	d413      	bmi.n	8008b74 <_printf_i+0x22c>
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	4298      	cmp	r0, r3
 8008b52:	bfb8      	it	lt
 8008b54:	4618      	movlt	r0, r3
 8008b56:	e7a6      	b.n	8008aa6 <_printf_i+0x15e>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4640      	mov	r0, r8
 8008b60:	47d0      	blx	sl
 8008b62:	3001      	adds	r0, #1
 8008b64:	d09d      	beq.n	8008aa2 <_printf_i+0x15a>
 8008b66:	3501      	adds	r5, #1
 8008b68:	68e3      	ldr	r3, [r4, #12]
 8008b6a:	9903      	ldr	r1, [sp, #12]
 8008b6c:	1a5b      	subs	r3, r3, r1
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	dcf2      	bgt.n	8008b58 <_printf_i+0x210>
 8008b72:	e7eb      	b.n	8008b4c <_printf_i+0x204>
 8008b74:	2500      	movs	r5, #0
 8008b76:	f104 0619 	add.w	r6, r4, #25
 8008b7a:	e7f5      	b.n	8008b68 <_printf_i+0x220>
 8008b7c:	0800b881 	.word	0x0800b881
 8008b80:	0800b892 	.word	0x0800b892

08008b84 <memmove>:
 8008b84:	4288      	cmp	r0, r1
 8008b86:	b510      	push	{r4, lr}
 8008b88:	eb01 0402 	add.w	r4, r1, r2
 8008b8c:	d902      	bls.n	8008b94 <memmove+0x10>
 8008b8e:	4284      	cmp	r4, r0
 8008b90:	4623      	mov	r3, r4
 8008b92:	d807      	bhi.n	8008ba4 <memmove+0x20>
 8008b94:	1e43      	subs	r3, r0, #1
 8008b96:	42a1      	cmp	r1, r4
 8008b98:	d008      	beq.n	8008bac <memmove+0x28>
 8008b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ba2:	e7f8      	b.n	8008b96 <memmove+0x12>
 8008ba4:	4402      	add	r2, r0
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	428a      	cmp	r2, r1
 8008baa:	d100      	bne.n	8008bae <memmove+0x2a>
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bb6:	e7f7      	b.n	8008ba8 <memmove+0x24>

08008bb8 <_sbrk_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d06      	ldr	r5, [pc, #24]	@ (8008bd4 <_sbrk_r+0x1c>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f000 f84c 	bl	8008c60 <_sbrk>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_sbrk_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_sbrk_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	200007f4 	.word	0x200007f4

08008bd8 <memcpy>:
 8008bd8:	440a      	add	r2, r1
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008be0:	d100      	bne.n	8008be4 <memcpy+0xc>
 8008be2:	4770      	bx	lr
 8008be4:	b510      	push	{r4, lr}
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	d1f9      	bne.n	8008be6 <memcpy+0xe>
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <_realloc_r>:
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	b921      	cbnz	r1, 8008c0a <_realloc_r+0x16>
 8008c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	4611      	mov	r1, r2
 8008c06:	f7ff bc4d 	b.w	80084a4 <_malloc_r>
 8008c0a:	b92a      	cbnz	r2, 8008c18 <_realloc_r+0x24>
 8008c0c:	f7ff fbde 	bl	80083cc <_free_r>
 8008c10:	4625      	mov	r5, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	f000 f81a 	bl	8008c50 <_malloc_usable_size_r>
 8008c1c:	4284      	cmp	r4, r0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	d802      	bhi.n	8008c28 <_realloc_r+0x34>
 8008c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c26:	d8f4      	bhi.n	8008c12 <_realloc_r+0x1e>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7ff fc3a 	bl	80084a4 <_malloc_r>
 8008c30:	4680      	mov	r8, r0
 8008c32:	b908      	cbnz	r0, 8008c38 <_realloc_r+0x44>
 8008c34:	4645      	mov	r5, r8
 8008c36:	e7ec      	b.n	8008c12 <_realloc_r+0x1e>
 8008c38:	42b4      	cmp	r4, r6
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	bf28      	it	cs
 8008c40:	4632      	movcs	r2, r6
 8008c42:	f7ff ffc9 	bl	8008bd8 <memcpy>
 8008c46:	4629      	mov	r1, r5
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff fbbf 	bl	80083cc <_free_r>
 8008c4e:	e7f1      	b.n	8008c34 <_realloc_r+0x40>

08008c50 <_malloc_usable_size_r>:
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f18      	subs	r0, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfbc      	itt	lt
 8008c5a:	580b      	ldrlt	r3, [r1, r0]
 8008c5c:	18c0      	addlt	r0, r0, r3
 8008c5e:	4770      	bx	lr

08008c60 <_sbrk>:
 8008c60:	4a04      	ldr	r2, [pc, #16]	@ (8008c74 <_sbrk+0x14>)
 8008c62:	6811      	ldr	r1, [r2, #0]
 8008c64:	4603      	mov	r3, r0
 8008c66:	b909      	cbnz	r1, 8008c6c <_sbrk+0xc>
 8008c68:	4903      	ldr	r1, [pc, #12]	@ (8008c78 <_sbrk+0x18>)
 8008c6a:	6011      	str	r1, [r2, #0]
 8008c6c:	6810      	ldr	r0, [r2, #0]
 8008c6e:	4403      	add	r3, r0
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	4770      	bx	lr
 8008c74:	20000804 	.word	0x20000804
 8008c78:	20000808 	.word	0x20000808

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
