
demo_code_20240411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bc5c  0800ae54  0800ae54  0000be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ab0  08016ab0  000181e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016ab0  08016ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ab8  08016ab8  000181e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ab8  08016ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016abc  08016abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08016ac0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200001e8  08016ca8  000181e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08016ca8  00018874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001815d  00000000  00000000  00018218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004057  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000343d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001147  00000000  00000000  00035b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002729c  00000000  00000000  00036c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b913  00000000  00000000  0005df23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2275  00000000  00000000  00079836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0015baab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  0015bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00162264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003425  00000000  00000000  001622d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  001656fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae3c 	.word	0x0800ae3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800ae3c 	.word	0x0800ae3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b988 	b.w	8000940 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	468e      	mov	lr, r1
 8000650:	4604      	mov	r4, r0
 8000652:	4688      	mov	r8, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14a      	bne.n	80006ee <__udivmoddi4+0xa6>
 8000658:	428a      	cmp	r2, r1
 800065a:	4617      	mov	r7, r2
 800065c:	d962      	bls.n	8000724 <__udivmoddi4+0xdc>
 800065e:	fab2 f682 	clz	r6, r2
 8000662:	b14e      	cbz	r6, 8000678 <__udivmoddi4+0x30>
 8000664:	f1c6 0320 	rsb	r3, r6, #32
 8000668:	fa01 f806 	lsl.w	r8, r1, r6
 800066c:	fa20 f303 	lsr.w	r3, r0, r3
 8000670:	40b7      	lsls	r7, r6
 8000672:	ea43 0808 	orr.w	r8, r3, r8
 8000676:	40b4      	lsls	r4, r6
 8000678:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb8 f1fe 	udiv	r1, r8, lr
 8000684:	0c23      	lsrs	r3, r4, #16
 8000686:	fb0e 8811 	mls	r8, lr, r1, r8
 800068a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800068e:	fb01 f20c 	mul.w	r2, r1, ip
 8000692:	429a      	cmp	r2, r3
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0x62>
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	f101 30ff 	add.w	r0, r1, #4294967295
 800069c:	f080 80ea 	bcs.w	8000874 <__udivmoddi4+0x22c>
 80006a0:	429a      	cmp	r2, r3
 80006a2:	f240 80e7 	bls.w	8000874 <__udivmoddi4+0x22c>
 80006a6:	3902      	subs	r1, #2
 80006a8:	443b      	add	r3, r7
 80006aa:	1a9a      	subs	r2, r3, r2
 80006ac:	b2a3      	uxth	r3, r4
 80006ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80006b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80006be:	459c      	cmp	ip, r3
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0x8e>
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c8:	f080 80d6 	bcs.w	8000878 <__udivmoddi4+0x230>
 80006cc:	459c      	cmp	ip, r3
 80006ce:	f240 80d3 	bls.w	8000878 <__udivmoddi4+0x230>
 80006d2:	443b      	add	r3, r7
 80006d4:	3802      	subs	r0, #2
 80006d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006da:	eba3 030c 	sub.w	r3, r3, ip
 80006de:	2100      	movs	r1, #0
 80006e0:	b11d      	cbz	r5, 80006ea <__udivmoddi4+0xa2>
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	2200      	movs	r2, #0
 80006e6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d905      	bls.n	80006fe <__udivmoddi4+0xb6>
 80006f2:	b10d      	cbz	r5, 80006f8 <__udivmoddi4+0xb0>
 80006f4:	e9c5 0100 	strd	r0, r1, [r5]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4608      	mov	r0, r1
 80006fc:	e7f5      	b.n	80006ea <__udivmoddi4+0xa2>
 80006fe:	fab3 f183 	clz	r1, r3
 8000702:	2900      	cmp	r1, #0
 8000704:	d146      	bne.n	8000794 <__udivmoddi4+0x14c>
 8000706:	4573      	cmp	r3, lr
 8000708:	d302      	bcc.n	8000710 <__udivmoddi4+0xc8>
 800070a:	4282      	cmp	r2, r0
 800070c:	f200 8105 	bhi.w	800091a <__udivmoddi4+0x2d2>
 8000710:	1a84      	subs	r4, r0, r2
 8000712:	eb6e 0203 	sbc.w	r2, lr, r3
 8000716:	2001      	movs	r0, #1
 8000718:	4690      	mov	r8, r2
 800071a:	2d00      	cmp	r5, #0
 800071c:	d0e5      	beq.n	80006ea <__udivmoddi4+0xa2>
 800071e:	e9c5 4800 	strd	r4, r8, [r5]
 8000722:	e7e2      	b.n	80006ea <__udivmoddi4+0xa2>
 8000724:	2a00      	cmp	r2, #0
 8000726:	f000 8090 	beq.w	800084a <__udivmoddi4+0x202>
 800072a:	fab2 f682 	clz	r6, r2
 800072e:	2e00      	cmp	r6, #0
 8000730:	f040 80a4 	bne.w	800087c <__udivmoddi4+0x234>
 8000734:	1a8a      	subs	r2, r1, r2
 8000736:	0c03      	lsrs	r3, r0, #16
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	b280      	uxth	r0, r0
 800073e:	b2bc      	uxth	r4, r7
 8000740:	2101      	movs	r1, #1
 8000742:	fbb2 fcfe 	udiv	ip, r2, lr
 8000746:	fb0e 221c 	mls	r2, lr, ip, r2
 800074a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800074e:	fb04 f20c 	mul.w	r2, r4, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d907      	bls.n	8000766 <__udivmoddi4+0x11e>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f10c 38ff 	add.w	r8, ip, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x11c>
 800075e:	429a      	cmp	r2, r3
 8000760:	f200 80e0 	bhi.w	8000924 <__udivmoddi4+0x2dc>
 8000764:	46c4      	mov	ip, r8
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	fbb3 f2fe 	udiv	r2, r3, lr
 800076c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000770:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000774:	fb02 f404 	mul.w	r4, r2, r4
 8000778:	429c      	cmp	r4, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x144>
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x142>
 8000784:	429c      	cmp	r4, r3
 8000786:	f200 80ca 	bhi.w	800091e <__udivmoddi4+0x2d6>
 800078a:	4602      	mov	r2, r0
 800078c:	1b1b      	subs	r3, r3, r4
 800078e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000792:	e7a5      	b.n	80006e0 <__udivmoddi4+0x98>
 8000794:	f1c1 0620 	rsb	r6, r1, #32
 8000798:	408b      	lsls	r3, r1
 800079a:	fa22 f706 	lsr.w	r7, r2, r6
 800079e:	431f      	orrs	r7, r3
 80007a0:	fa0e f401 	lsl.w	r4, lr, r1
 80007a4:	fa20 f306 	lsr.w	r3, r0, r6
 80007a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007b0:	4323      	orrs	r3, r4
 80007b2:	fa00 f801 	lsl.w	r8, r0, r1
 80007b6:	fa1f fc87 	uxth.w	ip, r7
 80007ba:	fbbe f0f9 	udiv	r0, lr, r9
 80007be:	0c1c      	lsrs	r4, r3, #16
 80007c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007cc:	45a6      	cmp	lr, r4
 80007ce:	fa02 f201 	lsl.w	r2, r2, r1
 80007d2:	d909      	bls.n	80007e8 <__udivmoddi4+0x1a0>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007da:	f080 809c 	bcs.w	8000916 <__udivmoddi4+0x2ce>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f240 8099 	bls.w	8000916 <__udivmoddi4+0x2ce>
 80007e4:	3802      	subs	r0, #2
 80007e6:	443c      	add	r4, r7
 80007e8:	eba4 040e 	sub.w	r4, r4, lr
 80007ec:	fa1f fe83 	uxth.w	lr, r3
 80007f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007f4:	fb09 4413 	mls	r4, r9, r3, r4
 80007f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000800:	45a4      	cmp	ip, r4
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x1ce>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f103 3eff 	add.w	lr, r3, #4294967295
 800080a:	f080 8082 	bcs.w	8000912 <__udivmoddi4+0x2ca>
 800080e:	45a4      	cmp	ip, r4
 8000810:	d97f      	bls.n	8000912 <__udivmoddi4+0x2ca>
 8000812:	3b02      	subs	r3, #2
 8000814:	443c      	add	r4, r7
 8000816:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800081a:	eba4 040c 	sub.w	r4, r4, ip
 800081e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000822:	4564      	cmp	r4, ip
 8000824:	4673      	mov	r3, lr
 8000826:	46e1      	mov	r9, ip
 8000828:	d362      	bcc.n	80008f0 <__udivmoddi4+0x2a8>
 800082a:	d05f      	beq.n	80008ec <__udivmoddi4+0x2a4>
 800082c:	b15d      	cbz	r5, 8000846 <__udivmoddi4+0x1fe>
 800082e:	ebb8 0203 	subs.w	r2, r8, r3
 8000832:	eb64 0409 	sbc.w	r4, r4, r9
 8000836:	fa04 f606 	lsl.w	r6, r4, r6
 800083a:	fa22 f301 	lsr.w	r3, r2, r1
 800083e:	431e      	orrs	r6, r3
 8000840:	40cc      	lsrs	r4, r1
 8000842:	e9c5 6400 	strd	r6, r4, [r5]
 8000846:	2100      	movs	r1, #0
 8000848:	e74f      	b.n	80006ea <__udivmoddi4+0xa2>
 800084a:	fbb1 fcf2 	udiv	ip, r1, r2
 800084e:	0c01      	lsrs	r1, r0, #16
 8000850:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000854:	b280      	uxth	r0, r0
 8000856:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800085a:	463b      	mov	r3, r7
 800085c:	4638      	mov	r0, r7
 800085e:	463c      	mov	r4, r7
 8000860:	46b8      	mov	r8, r7
 8000862:	46be      	mov	lr, r7
 8000864:	2620      	movs	r6, #32
 8000866:	fbb1 f1f7 	udiv	r1, r1, r7
 800086a:	eba2 0208 	sub.w	r2, r2, r8
 800086e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000872:	e766      	b.n	8000742 <__udivmoddi4+0xfa>
 8000874:	4601      	mov	r1, r0
 8000876:	e718      	b.n	80006aa <__udivmoddi4+0x62>
 8000878:	4610      	mov	r0, r2
 800087a:	e72c      	b.n	80006d6 <__udivmoddi4+0x8e>
 800087c:	f1c6 0220 	rsb	r2, r6, #32
 8000880:	fa2e f302 	lsr.w	r3, lr, r2
 8000884:	40b7      	lsls	r7, r6
 8000886:	40b1      	lsls	r1, r6
 8000888:	fa20 f202 	lsr.w	r2, r0, r2
 800088c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000890:	430a      	orrs	r2, r1
 8000892:	fbb3 f8fe 	udiv	r8, r3, lr
 8000896:	b2bc      	uxth	r4, r7
 8000898:	fb0e 3318 	mls	r3, lr, r8, r3
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb08 f904 	mul.w	r9, r8, r4
 80008a6:	40b0      	lsls	r0, r6
 80008a8:	4589      	cmp	r9, r1
 80008aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ae:	b280      	uxth	r0, r0
 80008b0:	d93e      	bls.n	8000930 <__udivmoddi4+0x2e8>
 80008b2:	1879      	adds	r1, r7, r1
 80008b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008b8:	d201      	bcs.n	80008be <__udivmoddi4+0x276>
 80008ba:	4589      	cmp	r9, r1
 80008bc:	d81f      	bhi.n	80008fe <__udivmoddi4+0x2b6>
 80008be:	eba1 0109 	sub.w	r1, r1, r9
 80008c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008c6:	fb09 f804 	mul.w	r8, r9, r4
 80008ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ce:	b292      	uxth	r2, r2
 80008d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d4:	4542      	cmp	r2, r8
 80008d6:	d229      	bcs.n	800092c <__udivmoddi4+0x2e4>
 80008d8:	18ba      	adds	r2, r7, r2
 80008da:	f109 31ff 	add.w	r1, r9, #4294967295
 80008de:	d2c4      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e0:	4542      	cmp	r2, r8
 80008e2:	d2c2      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e4:	f1a9 0102 	sub.w	r1, r9, #2
 80008e8:	443a      	add	r2, r7
 80008ea:	e7be      	b.n	800086a <__udivmoddi4+0x222>
 80008ec:	45f0      	cmp	r8, lr
 80008ee:	d29d      	bcs.n	800082c <__udivmoddi4+0x1e4>
 80008f0:	ebbe 0302 	subs.w	r3, lr, r2
 80008f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008f8:	3801      	subs	r0, #1
 80008fa:	46e1      	mov	r9, ip
 80008fc:	e796      	b.n	800082c <__udivmoddi4+0x1e4>
 80008fe:	eba7 0909 	sub.w	r9, r7, r9
 8000902:	4449      	add	r1, r9
 8000904:	f1a8 0c02 	sub.w	ip, r8, #2
 8000908:	fbb1 f9fe 	udiv	r9, r1, lr
 800090c:	fb09 f804 	mul.w	r8, r9, r4
 8000910:	e7db      	b.n	80008ca <__udivmoddi4+0x282>
 8000912:	4673      	mov	r3, lr
 8000914:	e77f      	b.n	8000816 <__udivmoddi4+0x1ce>
 8000916:	4650      	mov	r0, sl
 8000918:	e766      	b.n	80007e8 <__udivmoddi4+0x1a0>
 800091a:	4608      	mov	r0, r1
 800091c:	e6fd      	b.n	800071a <__udivmoddi4+0xd2>
 800091e:	443b      	add	r3, r7
 8000920:	3a02      	subs	r2, #2
 8000922:	e733      	b.n	800078c <__udivmoddi4+0x144>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	443b      	add	r3, r7
 800092a:	e71c      	b.n	8000766 <__udivmoddi4+0x11e>
 800092c:	4649      	mov	r1, r9
 800092e:	e79c      	b.n	800086a <__udivmoddi4+0x222>
 8000930:	eba1 0109 	sub.w	r1, r1, r9
 8000934:	46c4      	mov	ip, r8
 8000936:	fbb1 f9fe 	udiv	r9, r1, lr
 800093a:	fb09 f804 	mul.w	r8, r9, r4
 800093e:	e7c4      	b.n	80008ca <__udivmoddi4+0x282>

08000940 <__aeabi_idiv0>:
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08f      	sub	sp, #60	@ 0x3c
 8000948:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800094a:	f003 ffc3 	bl	80048d4 <HAL_Init>
	SystemClock_Config();				// Configure system clocks
 800094e:	f000 f8f1 	bl	8000b34 <SystemClock_Config>
	MX_GPIO_Init();
 8000952:	f000 f9fd 	bl	8000d50 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000956:	f000 f9cb 	bl	8000cf0 <MX_USART1_UART_Init>

	char msg[50];
    uint8_t previous_menu = MENU_NONE;  // Tracks the last active menu
 800095a:	2306      	movs	r3, #6
 800095c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    sprintf(msg, "Hello World\r\n");    // Convert MEAS_data_ready to a string
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	496d      	ldr	r1, [pc, #436]	@ (8000b18 <main+0x1d4>)
 8000964:	4618      	mov	r0, r3
 8000966:	f009 fd99 	bl	800a49c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc3f 	bl	80001f0 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	b29a      	uxth	r2, r3
 8000976:	1d39      	adds	r1, r7, #4
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	4867      	ldr	r0, [pc, #412]	@ (8000b1c <main+0x1d8>)
 800097e:	f008 f83a 	bl	80089f6 <HAL_UART_Transmit>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000982:	f002 fef1 	bl	8003768 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000986:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800098a:	2001      	movs	r0, #1
 800098c:	f002 ff7a 	bl	8003884 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000990:	2001      	movs	r0, #1
 8000992:	f002 ffdb 	bl	800394c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000996:	f003 faab 	bl	8003ef0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800099a:	f04f 30ff 	mov.w	r0, #4294967295
 800099e:	f003 f831 	bl	8003a04 <BSP_LCD_Clear>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80009a2:	f002 ff57 	bl	8003854 <BSP_LCD_GetXSize>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29c      	uxth	r4, r3
 80009aa:	f002 ff5f 	bl	800386c <BSP_LCD_GetYSize>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	4620      	mov	r0, r4
 80009b6:	f003 fe89 	bl	80046cc <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 80009ba:	f001 fd57 	bl	800246c <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80009be:	f001 fd75 	bl	80024ac <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80009c2:	2000      	movs	r0, #0
 80009c4:	f002 faee 	bl	8002fa4 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 faeb 	bl	8002fa4 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80009ce:	f001 fb7b 	bl	80020c8 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80009d2:	f001 fc27 	bl	8002224 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80009d6:	f000 f92b 	bl	8000c30 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80009da:	f000 faeb 	bl	8000fb4 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80009de:	f000 fb85 	bl	80010ec <MEAS_timer_init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	484d      	ldr	r0, [pc, #308]	@ (8000b20 <main+0x1dc>)
 80009ea:	f004 ff1b 	bl	8005824 <HAL_GPIO_WritePin>
	FFT_init();  						// Nach MEAS_timer_init()
 80009ee:	f000 fa29 	bl	8000e44 <FFT_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80009f2:	2000      	movs	r0, #0
 80009f4:	f002 fb2a 	bl	800304c <BSP_LED_Toggle>

	    sprintf(msg, "active menu: %d\r\n", active_menu);    // Convert MEAS_data_ready to a string
 80009f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b24 <main+0x1e0>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4949      	ldr	r1, [pc, #292]	@ (8000b28 <main+0x1e4>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 fd4a 	bl	800a49c <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbf0 	bl	80001f0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	1d39      	adds	r1, r7, #4
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	4840      	ldr	r0, [pc, #256]	@ (8000b1c <main+0x1d8>)
 8000a1c:	f007 ffeb 	bl	80089f6 <HAL_UART_Transmit>

		if (MEAS_data_ready) {			// Show data if new data available
 8000a20:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <main+0x1e8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <main+0xea>
			MEAS_data_ready = false;
 8000a28:	4b40      	ldr	r3, [pc, #256]	@ (8000b2c <main+0x1e8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
		}

		if(active_menu == MENU_ZERO){
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b24 <main+0x1e0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d112      	bne.n	8000a5c <main+0x118>
		    sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	493d      	ldr	r1, [pc, #244]	@ (8000b30 <main+0x1ec>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f009 fd2e 	bl	800a49c <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbd4 	bl	80001f0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	4832      	ldr	r0, [pc, #200]	@ (8000b1c <main+0x1d8>)
 8000a54:	f007 ffcf 	bl	80089f6 <HAL_UART_Transmit>
		    show_data_menu_zero();
 8000a58:	f001 fa42 	bl	8001ee0 <show_data_menu_zero>
		}

		if(active_menu == MENU_ONE){
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <main+0x1e0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d112      	bne.n	8000a8a <main+0x146>
			sprintf(msg, "Showing data\r\n");    // Convert MEAS_data_ready to a string
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4932      	ldr	r1, [pc, #200]	@ (8000b30 <main+0x1ec>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f009 fd17 	bl	800a49c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);	// Transmit the message over UART
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbbd 	bl	80001f0 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	1d39      	adds	r1, r7, #4
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	4826      	ldr	r0, [pc, #152]	@ (8000b1c <main+0x1d8>)
 8000a82:	f007 ffb8 	bl	80089f6 <HAL_UART_Transmit>
			show_data_menu_one();
 8000a86:	f000 ffdb 	bl	8001a40 <show_data_menu_one>
        }

		MENU_check_transition();
 8000a8a:	f001 fc25 	bl	80022d8 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000a8e:	f001 fc17 	bl	80022c0 <MENU_get_transition>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d839      	bhi.n	8000b0c <main+0x1c8>
 8000a98:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa0 <main+0x15c>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ac5 	.word	0x08000ac5
 8000aa4:	08000ad5 	.word	0x08000ad5
 8000aa8:	08000ae5 	.word	0x08000ae5
 8000aac:	08000aef 	.word	0x08000aef
 8000ab0:	08000af9 	.word	0x08000af9
 8000ab4:	08000b03 	.word	0x08000b03
 8000ab8:	08000abd 	.word	0x08000abd
		case MENU_NONE:
            active_menu = MENU_NONE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <main+0x1e0>)
 8000abe:	2206      	movs	r2, #6
 8000ac0:	701a      	strb	r2, [r3, #0]
			break;
 8000ac2:	e024      	b.n	8000b0e <main+0x1ca>
		case MENU_ZERO:
            active_menu = MENU_ZERO;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <main+0x1e0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 8000aca:	f000 f9c9 	bl	8000e60 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 8000ace:	f000 fcc7 	bl	8001460 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 8000ad2:	e01c      	b.n	8000b0e <main+0x1ca>
		case MENU_ONE:
            active_menu = MENU_ONE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <main+0x1e0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
			ADC1_IN14_ADC2_IN15_dual_init();
 8000ada:	f000 f9c1 	bl	8000e60 <ADC1_IN14_ADC2_IN15_dual_init>
			ADC1_IN14_ADC2_IN15_dual_start();
 8000ade:	f000 fcbf 	bl	8001460 <ADC1_IN14_ADC2_IN15_dual_start>
			break;
 8000ae2:	e014      	b.n	8000b0e <main+0x1ca>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8000ae4:	f000 fb38 	bl	8001158 <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 8000ae8:	f000 fbc4 	bl	8001274 <ADC3_IN4_DMA_start>
			break;
 8000aec:	e00f      	b.n	8000b0e <main+0x1ca>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 8000aee:	f000 fbe3 	bl	80012b8 <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 8000af2:	f000 fc8b 	bl	800140c <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 8000af6:	e00a      	b.n	8000b0e <main+0x1ca>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 8000af8:	f000 fcdc 	bl	80014b4 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 8000afc:	f000 fd7a 	bl	80015f4 <ADC2_IN13_IN5_scan_start>
			break;
 8000b00:	e005      	b.n	8000b0e <main+0x1ca>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 8000b02:	f000 fd99 	bl	8001638 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8000b06:	f000 fe37 	bl	8001778 <ADC3_IN13_IN4_scan_start>
			break;
 8000b0a:	e000      	b.n	8000b0e <main+0x1ca>
		default:						// Should never occur
			break;
 8000b0c:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8000b0e:	20c8      	movs	r0, #200	@ 0xc8
 8000b10:	f003 ff52 	bl	80049b8 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000b14:	e76d      	b.n	80009f2 <main+0xae>
 8000b16:	bf00      	nop
 8000b18:	0800ae54 	.word	0x0800ae54
 8000b1c:	20000204 	.word	0x20000204
 8000b20:	40020000 	.word	0x40020000
 8000b24:	20000000 	.word	0x20000000
 8000b28:	0800ae64 	.word	0x0800ae64
 8000b2c:	20000244 	.word	0x20000244
 8000b30:	0800ae78 	.word	0x0800ae78

08000b34 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0a0      	sub	sp, #128	@ 0x80
 8000b38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b3e:	2230      	movs	r2, #48	@ 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f009 fccc 	bl	800a4e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2230      	movs	r2, #48	@ 0x30
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f009 fcbd 	bl	800a4e0 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bba:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000bc4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 f947 	bl	8006e5c <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bce:	230f      	movs	r3, #15
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bde:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000be6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bea:	2105      	movs	r1, #5
 8000bec:	4618      	mov	r0, r3
 8000bee:	f006 fba3 	bl	8007338 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000bf6:	23c0      	movs	r3, #192	@ 0xc0
 8000bf8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 fdb5 	bl	8007778 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <SystemClock_Config+0xf8>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <SystemClock_Config+0xf8>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6053      	str	r3, [r2, #4]
}
 8000c1a:	bf00      	nop
 8000c1c:	3780      	adds	r7, #128	@ 0x80
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	40012300 	.word	0x40012300

08000c30 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a24      	ldr	r2, [pc, #144]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c58:	f023 030c 	bic.w	r3, r3, #12
 8000c5c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000c76:	200a      	movs	r0, #10
 8000c78:	f003 fe9e 	bl	80049b8 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <gyro_disable+0xb8>)
 8000c82:	f043 030c 	orr.w	r3, r3, #12
 8000c86:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <gyro_disable+0xb4>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <gyro_disable+0xbc>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <gyro_disable+0xbc>)
 8000caa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000cae:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <gyro_disable+0xbc>)
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <gyro_disable+0xbc>)
 8000cb6:	f023 030f 	bic.w	r3, r3, #15
 8000cba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <gyro_disable+0xbc>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <gyro_disable+0xbc>)
 8000cc2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000cc6:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f003 fe75 	bl	80049b8 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <gyro_disable+0xbc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <gyro_disable+0xbc>)
 8000cd4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40021400 	.word	0x40021400

08000cf0 <MX_USART1_UART_Init>:
__attribute__((weak)) void _lseek(void){}
__attribute__((weak)) void _read(void){}
__attribute__((weak)) void _write(void){}

static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <MX_USART1_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d28:	f007 fe18 	bl	800895c <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f807 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000204 	.word	0x20000204
 8000d40:	40011000 	.word	0x40011000

08000d44 <Error_Handler>:

void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <MX_GPIO_Init>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_GPIO_Init(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <MX_GPIO_Init+0x30>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <MX_GPIO_Init+0x30>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <MX_GPIO_Init+0x30>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db12      	blt.n	8000df8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	490a      	ldr	r1, [pc, #40]	@ (8000e04 <__NVIC_DisableIRQ+0x44>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	3320      	adds	r3, #32
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dec:	f3bf 8f4f 	dsb	sy
}
 8000df0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df2:	f3bf 8f6f 	isb	sy
}
 8000df6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0c      	blt.n	8000e34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <__NVIC_ClearPendingIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	3360      	adds	r3, #96	@ 0x60
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <FFT_init>:
float32_t fft_input[FFT_SIZE*2];  // Complex input (I/Q)
float32_t fft_output[FFT_SIZE];    // FFT Ergebnis
uint32_t fft_mag[FFT_SIZE/2];     // Magnituden für die Darstellung


void FFT_init(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    arm_cfft_radix4_init_f32(&fft_inst, FFT_SIZE, 0, 1);
 8000e48:	2301      	movs	r3, #1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <FFT_init+0x18>)
 8000e52:	f008 fd2d 	bl	80098b0 <arm_cfft_radix4_init_f32>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000430 	.word	0x20000430

08000e60 <ADC1_IN14_ADC2_IN15_dual_init>:
        if(fft_mag[i] > 200) fft_mag[i] = 200;
    }
}

void ADC1_IN14_ADC2_IN15_dual_init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
    MEAS_input_count = 2;                // 2 inputs are converted
 8000e66:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <ADC1_IN14_ADC2_IN15_dual_init+0x130>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_ADC1_CLK_ENABLE();        // Enable Clock for ADC1
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4a47      	ldr	r2, [pc, #284]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7c:	4b45      	ldr	r3, [pc, #276]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();        // Enable Clock for ADC2
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e90:	4a40      	ldr	r2, [pc, #256]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

    // Common ADC configuration
    ADC->CCR |= ADC_CCR_DMA_1;            // Enable DMA mode 2 = dual DMA
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8000f98 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8000f98 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eae:	6053      	str	r3, [r2, #4]
    ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultaneous
 8000eb0:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a38      	ldr	r2, [pc, #224]	@ (8000f98 <ADC1_IN14_ADC2_IN15_dual_init+0x138>)
 8000eb6:	f043 0306 	orr.w	r3, r3, #6
 8000eba:	6053      	str	r3, [r2, #4]

    // ADC1 configuration
    ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);    // Enable external trigger on rising edge
 8000ebc:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a36      	ldr	r2, [pc, #216]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);   // Timer 2 TRGO event
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a33      	ldr	r2, [pc, #204]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000ece:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000ed2:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 |= (14UL << ADC_SQR3_SQ1_Pos);   // Input 14 = first conversion (changed from 13)
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed8:	4a30      	ldr	r2, [pc, #192]	@ (8000f9c <ADC1_IN14_ADC2_IN15_dual_init+0x13c>)
 8000eda:	f043 030e 	orr.w	r3, r3, #14
 8000ede:	6353      	str	r3, [r2, #52]	@ 0x34

    // ADC2 configuration
    ADC2->SQR3 |= (15UL << ADC_SQR3_SQ1_Pos);   // Input 15 = first conversion (changed from 5)
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa0 <ADC1_IN14_ADC2_IN15_dual_init+0x140>)
 8000ee6:	f043 030f 	orr.w	r3, r3, #15
 8000eea:	6353      	str	r3, [r2, #52]	@ 0x34

    // DMA configuration
    __HAL_RCC_DMA2_CLK_ENABLE();        // Enable Clock for DMA2
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	4a27      	ldr	r2, [pc, #156]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000ef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efc:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <ADC1_IN14_ADC2_IN15_dual_init+0x134>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
    DMA2_Stream4->CR &= ~DMA_SxCR_EN;    // Disable the DMA stream 4
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a25      	ldr	r2, [pc, #148]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }    // Wait for DMA to finish
 8000f14:	bf00      	nop
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f9      	bne.n	8000f16 <ADC1_IN14_ADC2_IN15_dual_init+0xb6>

    DMA2->HIFCR |= DMA_HIFCR_CTCIF4;    // Clear transfer complete interrupt flag
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4a20      	ldr	r2, [pc, #128]	@ (8000fa8 <ADC1_IN14_ADC2_IN15_dual_init+0x148>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	60d3      	str	r3, [r2, #12]
    DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);    // Select channel 0
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f30:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PL_1;        // Priority high
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;    // Memory data size = 32 bit
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;    // Peripheral data size = 32 bit
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f58:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_MINC;        // Increment memory address pointer
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f64:	6013      	str	r3, [r2, #0]
    DMA2_Stream4->CR |= DMA_SxCR_TCIE;        // Transfer complete interrupt enable
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6013      	str	r3, [r2, #0]

    DMA2_Stream4->NDTR = ADC_NUMS;        // Number of data items to transfer
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f74:	223c      	movs	r2, #60	@ 0x3c
 8000f76:	605a      	str	r2, [r3, #4]
    DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;    // Peripheral register address
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <ADC1_IN14_ADC2_IN15_dual_init+0x14c>)
 8000f7c:	609a      	str	r2, [r3, #8]
    DMA2_Stream4->M0AR = (uint32_t)ADC_samples;    // Buffer memory location address
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <ADC1_IN14_ADC2_IN15_dual_init+0x144>)
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <ADC1_IN14_ADC2_IN15_dual_init+0x150>)
 8000f82:	60da      	str	r2, [r3, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	20000004 	.word	0x20000004
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40012300 	.word	0x40012300
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40012100 	.word	0x40012100
 8000fa4:	40026470 	.word	0x40026470
 8000fa8:	40026400 	.word	0x40026400
 8000fac:	40012308 	.word	0x40012308
 8000fb0:	2000024c 	.word	0x2000024c

08000fb4 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a29      	ldr	r2, [pc, #164]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <MEAS_GPIO_analog_init+0xb8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a24      	ldr	r2, [pc, #144]	@ (800106c <MEAS_GPIO_analog_init+0xb8>)
 8000fdc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000fe0:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a1f      	ldr	r2, [pc, #124]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <MEAS_GPIO_analog_init+0xbc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <MEAS_GPIO_analog_init+0xbc>)
 8001004:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001008:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <MEAS_GPIO_analog_init+0xc0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <MEAS_GPIO_analog_init+0xc0>)
 800102c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001030:	6013      	str	r3, [r2, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MEAS_GPIO_analog_init+0xb4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
    // Für ADC1_IN14 (PC4) und ADC2_IN15 (PC5)
    GPIOC->MODER |= (3UL << GPIO_MODER_MODER4_Pos) | (3UL << GPIO_MODER_MODER5_Pos);
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MEAS_GPIO_analog_init+0xbc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <MEAS_GPIO_analog_init+0xbc>)
 8001054:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40021400 	.word	0x40021400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020000 	.word	0x40020000

08001078 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <DAC_increment+0x30>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3314      	adds	r3, #20
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <DAC_increment+0x30>)
 8001084:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <DAC_increment+0x30>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800108e:	d302      	bcc.n	8001096 <DAC_increment+0x1e>
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <DAC_increment+0x30>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <DAC_increment+0x34>)
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <DAC_increment+0x30>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6153      	str	r3, [r2, #20]
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	2000042c 	.word	0x2000042c
 80010ac:	40007400 	.word	0x40007400

080010b0 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <ADC_reset+0x38>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <ADC_reset+0x38>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6253      	str	r3, [r2, #36]	@ 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <ADC_reset+0x38>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <ADC_reset+0x38>)
 80010c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010ca:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MEAS_timer_init+0x68>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <MEAS_timer_init+0x68>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MEAS_timer_init+0x68>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 800110e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001112:	f243 62af 	movw	r2, #13999	@ 0x36af
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001118:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800111c:	2209      	movs	r2, #9
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001120:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001140:	201c      	movs	r0, #28
 8001142:	f7ff fe61 	bl	8000e08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001146:	201c      	movs	r0, #28
 8001148:	f7ff fe1c 	bl	8000d84 <__NVIC_EnableIRQ>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 800115e:	4b3e      	ldr	r3, [pc, #248]	@ (8001258 <ADC3_IN4_DMA_init+0x100>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116c:	4a3b      	ldr	r2, [pc, #236]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001172:	6453      	str	r3, [r2, #68]	@ 0x44
 8001174:	4b39      	ldr	r3, [pc, #228]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8001180:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001184:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001196:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	4a30      	ldr	r2, [pc, #192]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 800119e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80011a2:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80011a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <ADC3_IN4_DMA_init+0x108>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 80011ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <ADC3_IN4_DMA_init+0x104>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a24      	ldr	r2, [pc, #144]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80011d8:	bf00      	nop
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <ADC3_IN4_DMA_init+0x110>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001268 <ADC3_IN4_DMA_init+0x110>)
 80011ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011f0:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 80011f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011fc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 800121c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001220:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 800123c:	223c      	movs	r2, #60	@ 0x3c
 800123e:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <ADC3_IN4_DMA_init+0x114>)
 8001244:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <ADC3_IN4_DMA_init+0x10c>)
 8001248:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <ADC3_IN4_DMA_init+0x118>)
 800124a:	60da      	str	r2, [r3, #12]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000004 	.word	0x20000004
 800125c:	40023800 	.word	0x40023800
 8001260:	40012200 	.word	0x40012200
 8001264:	40026428 	.word	0x40026428
 8001268:	40026400 	.word	0x40026400
 800126c:	4001224c 	.word	0x4001224c
 8001270:	2000024c 	.word	0x2000024c

08001274 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <ADC3_IN4_DMA_start+0x3c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <ADC3_IN4_DMA_start+0x3c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001284:	2039      	movs	r0, #57	@ 0x39
 8001286:	f7ff fdbf 	bl	8000e08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800128a:	2039      	movs	r0, #57	@ 0x39
 800128c:	f7ff fd7a 	bl	8000d84 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <ADC3_IN4_DMA_start+0x40>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <ADC3_IN4_DMA_start+0x40>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800129c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40026428 	.word	0x40026428
 80012b4:	40012200 	.word	0x40012200

080012b8 <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 80012be:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	4a47      	ldr	r2, [pc, #284]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d4:	4b45      	ldr	r3, [pc, #276]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b41      	ldr	r3, [pc, #260]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e8:	4a40      	ldr	r2, [pc, #256]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 80012fc:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4a3b      	ldr	r2, [pc, #236]	@ (80013f0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8001302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001306:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2 simultan.
 8001308:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a38      	ldr	r2, [pc, #224]	@ (80013f0 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 800130e:	f043 0306 	orr.w	r3, r3, #6
 8001312:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001314:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a36      	ldr	r2, [pc, #216]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001320:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a33      	ldr	r2, [pc, #204]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001326:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 800132a:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 800132c:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001330:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8001332:	f043 030d 	orr.w	r3, r3, #13
 8001336:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800133a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133c:	4a2e      	ldr	r2, [pc, #184]	@ (80013f8 <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 800133e:	f043 0305 	orr.w	r3, r3, #5
 8001342:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a27      	ldr	r2, [pc, #156]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 800134e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8001360:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a25      	ldr	r2, [pc, #148]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800136c:	bf00      	nop
 800136e:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a20      	ldr	r2, [pc, #128]	@ (8001400 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001388:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a4:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013bc:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013cc:	223c      	movs	r2, #60	@ 0x3c
 80013ce:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 80013d4:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 80013da:	60da      	str	r2, [r3, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000004 	.word	0x20000004
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40012300 	.word	0x40012300
 80013f4:	40012000 	.word	0x40012000
 80013f8:	40012100 	.word	0x40012100
 80013fc:	40026470 	.word	0x40026470
 8001400:	40026400 	.word	0x40026400
 8001404:	40012308 	.word	0x40012308
 8001408:	2000024c 	.word	0x2000024c

0800140c <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 800141c:	203c      	movs	r0, #60	@ 0x3c
 800141e:	f7ff fcf3 	bl	8000e08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001422:	203c      	movs	r0, #60	@ 0x3c
 8001424:	f7ff fcae 	bl	8000d84 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a08      	ldr	r2, [pc, #32]	@ (800145c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40026470 	.word	0x40026470
 8001458:	40012000 	.word	0x40012000
 800145c:	40012100 	.word	0x40012100

08001460 <ADC1_IN14_ADC2_IN15_dual_start>:

void ADC1_IN14_ADC2_IN15_dual_start(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    DMA2_Stream4->CR |= DMA_SxCR_EN;          // DMA-Stream aktivieren
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <ADC1_IN14_ADC2_IN15_dual_start+0x48>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]
    NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);  // Ausstehende DMA-Interrupts löschen
 8001470:	203c      	movs	r0, #60	@ 0x3c
 8001472:	f7ff fcc9 	bl	8000e08 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(DMA2_Stream4_IRQn);        // DMA-Interrupt im NVIC aktivieren
 8001476:	203c      	movs	r0, #60	@ 0x3c
 8001478:	f7ff fc84 	bl	8000d84 <__NVIC_EnableIRQ>

    ADC1->CR2 |= ADC_CR2_ADON;                // ADC1 einschalten
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <ADC1_IN14_ADC2_IN15_dual_start+0x4c>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= ADC_CR2_ADON;                // ADC2 einschalten
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <ADC1_IN14_ADC2_IN15_dual_start+0x50>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6093      	str	r3, [r2, #8]

    TIM2->CR1 |= TIM_CR1_CEN;                 // Timer starten
 8001494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40026470 	.word	0x40026470
 80014ac:	40012000 	.word	0x40012000
 80014b0:	40012100 	.word	0x40012100

080014b4 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 80014ba:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <ADC2_IN13_IN5_scan_init+0x124>)
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	4a44      	ldr	r2, [pc, #272]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d0:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 80014dc:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e0:	4a3f      	ldr	r2, [pc, #252]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ec:	4a3c      	ldr	r2, [pc, #240]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014ee:	f043 030d 	orr.w	r3, r3, #13
 80014f2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 80014f4:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	4a39      	ldr	r2, [pc, #228]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 80014fa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80014fe:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150a:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 800150c:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001516:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800151e:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8001522:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152e:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 800153a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <ADC2_IN13_IN5_scan_init+0x128>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 800154c:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a24      	ldr	r2, [pc, #144]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001558:	bf00      	nop
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <ADC2_IN13_IN5_scan_init+0x134>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <ADC2_IN13_IN5_scan_init+0x134>)
 800156c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001570:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1b      	ldr	r2, [pc, #108]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001578:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800157c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a15      	ldr	r2, [pc, #84]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a0:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ac:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0c      	ldr	r2, [pc, #48]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015bc:	2278      	movs	r2, #120	@ 0x78
 80015be:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <ADC2_IN13_IN5_scan_init+0x138>)
 80015c4:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <ADC2_IN13_IN5_scan_init+0x130>)
 80015c8:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <ADC2_IN13_IN5_scan_init+0x13c>)
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000004 	.word	0x20000004
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40012100 	.word	0x40012100
 80015e4:	40026458 	.word	0x40026458
 80015e8:	40026400 	.word	0x40026400
 80015ec:	4001214c 	.word	0x4001214c
 80015f0:	2000024c 	.word	0x2000024c

080015f4 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 80015f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <ADC2_IN13_IN5_scan_start+0x3c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <ADC2_IN13_IN5_scan_start+0x3c>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8001604:	203b      	movs	r0, #59	@ 0x3b
 8001606:	f7ff fbff 	bl	8000e08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 800160a:	203b      	movs	r0, #59	@ 0x3b
 800160c:	f7ff fbba 	bl	8000d84 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <ADC2_IN13_IN5_scan_start+0x40>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <ADC2_IN13_IN5_scan_start+0x40>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800161c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40026458 	.word	0x40026458
 8001634:	40012100 	.word	0x40012100

08001638 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <ADC3_IN13_IN4_scan_init+0x124>)
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b45      	ldr	r3, [pc, #276]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	4a44      	ldr	r2, [pc, #272]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001652:	6453      	str	r3, [r2, #68]	@ 0x44
 8001654:	4b42      	ldr	r3, [pc, #264]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= (1UL << ADC_SQR1_L_Pos);		// Convert 2 inputs
 8001660:	4b40      	ldr	r3, [pc, #256]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	4a3f      	ldr	r2, [pc, #252]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800166a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 800166c:	4b3d      	ldr	r3, [pc, #244]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	4a3c      	ldr	r2, [pc, #240]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001672:	f043 030d 	orr.w	r3, r3, #13
 8001676:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001678:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 800167a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167c:	4a39      	ldr	r2, [pc, #228]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 800167e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001682:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001684:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a36      	ldr	r2, [pc, #216]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168e:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a33      	ldr	r2, [pc, #204]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 80016a2:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80016a6:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001764 <ADC3_IN13_IN4_scan_init+0x12c>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b2:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4a28      	ldr	r2, [pc, #160]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 80016be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c4:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <ADC3_IN13_IN4_scan_init+0x128>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a24      	ldr	r2, [pc, #144]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80016dc:	bf00      	nop
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <ADC3_IN13_IN4_scan_init+0x134>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <ADC3_IN13_IN4_scan_init+0x134>)
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f4:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001700:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a15      	ldr	r2, [pc, #84]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001718:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001724:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 800172c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001730:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0c      	ldr	r2, [pc, #48]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001740:	2278      	movs	r2, #120	@ 0x78
 8001742:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <ADC3_IN13_IN4_scan_init+0x138>)
 8001748:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <ADC3_IN13_IN4_scan_init+0x130>)
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <ADC3_IN13_IN4_scan_init+0x13c>)
 800174e:	60da      	str	r2, [r3, #12]

}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000004 	.word	0x20000004
 8001760:	40023800 	.word	0x40023800
 8001764:	40012200 	.word	0x40012200
 8001768:	40026428 	.word	0x40026428
 800176c:	40026400 	.word	0x40026400
 8001770:	4001224c 	.word	0x4001224c
 8001774:	2000024c 	.word	0x2000024c

08001778 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <ADC3_IN13_IN4_scan_start+0x3c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001788:	2039      	movs	r0, #57	@ 0x39
 800178a:	f7ff fb3d 	bl	8000e08 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800178e:	2039      	movs	r0, #57	@ 0x39
 8001790:	f7ff faf8 	bl	8000d84 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <ADC3_IN13_IN4_scan_start+0x40>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <ADC3_IN13_IN4_scan_start+0x40>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80017a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40026428 	.word	0x40026428
 80017b8:	40012200 	.word	0x40012200

080017bc <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 80017c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <TIM2_IRQHandler+0x24>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <TIM2_IRQHandler+0x20>
		DAC_increment();
 80017d8:	f7ff fc4e 	bl	8001078 <DAC_increment>
	}
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000245 	.word	0x20000245

080017e4 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <ADC_IRQHandler+0x58>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 80017f4:	4911      	ldr	r1, [pc, #68]	@ (800183c <ADC_IRQHandler+0x58>)
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <ADC_IRQHandler+0x5c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	4810      	ldr	r0, [pc, #64]	@ (8001840 <ADC_IRQHandler+0x5c>)
 80017fe:	6002      	str	r2, [r0, #0]
 8001800:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001802:	4910      	ldr	r1, [pc, #64]	@ (8001844 <ADC_IRQHandler+0x60>)
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <ADC_IRQHandler+0x5c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b3b      	cmp	r3, #59	@ 0x3b
 800180e:	d912      	bls.n	8001836 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001810:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <ADC_IRQHandler+0x58>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a05      	ldr	r2, [pc, #20]	@ (800183c <ADC_IRQHandler+0x58>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6093      	str	r3, [r2, #8]
			ADC_reset();
 800182c:	f7ff fc40 	bl	80010b0 <ADC_reset>
			MEAS_data_ready = true;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <ADC_IRQHandler+0x64>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40012200 	.word	0x40012200
 8001840:	20000248 	.word	0x20000248
 8001844:	2000024c 	.word	0x2000024c
 8001848:	20000244 	.word	0x20000244

0800184c <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x78>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001858:	2b00      	cmp	r3, #0
 800185a:	d031      	beq.n	80018c0 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 800185c:	2039      	movs	r0, #57	@ 0x39
 800185e:	f7ff faaf 	bl	8000dc0 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001862:	2039      	movs	r0, #57	@ 0x39
 8001864:	f7ff fad0 	bl	8000e08 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x7c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x7c>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001874:	bf00      	nop
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <DMA2_Stream1_IRQHandler+0x7c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x78>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4a0f      	ldr	r2, [pc, #60]	@ (80018c4 <DMA2_Stream1_IRQHandler+0x78>)
 8001888:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800188c:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800188e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <DMA2_Stream1_IRQHandler+0x80>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <DMA2_Stream1_IRQHandler+0x80>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <DMA2_Stream1_IRQHandler+0x80>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <DMA2_Stream1_IRQHandler+0x80>)
 80018b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018b4:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80018b6:	f7ff fbfb 	bl	80010b0 <ADC_reset>
		MEAS_data_ready = true;
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <DMA2_Stream1_IRQHandler+0x84>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
	}
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40026400 	.word	0x40026400
 80018c8:	40026428 	.word	0x40026428
 80018cc:	40012200 	.word	0x40012200
 80018d0:	20000244 	.word	0x20000244

080018d4 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <DMA2_Stream3_IRQHandler+0x78>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d031      	beq.n	8001948 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 80018e4:	203b      	movs	r0, #59	@ 0x3b
 80018e6:	f7ff fa6b 	bl	8000dc0 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 80018ea:	203b      	movs	r0, #59	@ 0x3b
 80018ec:	f7ff fa8c 	bl	8000e08 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <DMA2_Stream3_IRQHandler+0x7c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <DMA2_Stream3_IRQHandler+0x7c>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80018fc:	bf00      	nop
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <DMA2_Stream3_IRQHandler+0x7c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <DMA2_Stream3_IRQHandler+0x78>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <DMA2_Stream3_IRQHandler+0x78>)
 8001910:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001914:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <DMA2_Stream3_IRQHandler+0x80>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <DMA2_Stream3_IRQHandler+0x80>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <DMA2_Stream3_IRQHandler+0x80>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <DMA2_Stream3_IRQHandler+0x80>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800193c:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800193e:	f7ff fbb7 	bl	80010b0 <ADC_reset>
		MEAS_data_ready = true;
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <DMA2_Stream3_IRQHandler+0x84>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	}
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40026400 	.word	0x40026400
 8001950:	40026458 	.word	0x40026458
 8001954:	40012100 	.word	0x40012100
 8001958:	20000244 	.word	0x20000244

0800195c <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001962:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <DMA2_Stream4_IRQHandler+0xc8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d055      	beq.n	8001a1a <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 800196e:	203c      	movs	r0, #60	@ 0x3c
 8001970:	f7ff fa26 	bl	8000dc0 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001974:	203c      	movs	r0, #60	@ 0x3c
 8001976:	f7ff fa47 	bl	8000e08 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800197a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a28 <DMA2_Stream4_IRQHandler+0xcc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a28 <DMA2_Stream4_IRQHandler+0xcc>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001986:	bf00      	nop
 8001988:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <DMA2_Stream4_IRQHandler+0xcc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f9      	bne.n	8001988 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <DMA2_Stream4_IRQHandler+0xc8>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a22      	ldr	r2, [pc, #136]	@ (8001a24 <DMA2_Stream4_IRQHandler+0xc8>)
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <DMA2_Stream4_IRQHandler+0xd0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <DMA2_Stream4_IRQHandler+0xd0>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <DMA2_Stream4_IRQHandler+0xd4>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <DMA2_Stream4_IRQHandler+0xd4>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <DMA2_Stream4_IRQHandler+0xd8>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <DMA2_Stream4_IRQHandler+0xd8>)
 80019ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80019d2:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80019d4:	233b      	movs	r3, #59	@ 0x3b
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	e017      	b.n	8001a0a <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 80019da:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <DMA2_Stream4_IRQHandler+0xdc>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	3301      	adds	r3, #1
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	4913      	ldr	r1, [pc, #76]	@ (8001a38 <DMA2_Stream4_IRQHandler+0xdc>)
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <DMA2_Stream4_IRQHandler+0xdc>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	b292      	uxth	r2, r2
 80019fe:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <DMA2_Stream4_IRQHandler+0xdc>)
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dae4      	bge.n	80019da <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001a10:	f7ff fb4e 	bl	80010b0 <ADC_reset>
		MEAS_data_ready = true;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <DMA2_Stream4_IRQHandler+0xe0>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40026400 	.word	0x40026400
 8001a28:	40026470 	.word	0x40026470
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012100 	.word	0x40012100
 8001a34:	40012300 	.word	0x40012300
 8001a38:	2000024c 	.word	0x2000024c
 8001a3c:	20000244 	.word	0x20000244

08001a40 <show_data_menu_one>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void show_data_menu_one(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	f5ad 5dc2 	sub.w	sp, sp, #6208	@ 0x1840
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
	const uint32_t SAMPLE_RATE = 2000; // Anpassen an Ihre tatsächliche Abtastrate
 8001a4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a4e:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001a52:	6013      	str	r3, [r2, #0]
    const uint32_t Y_OFFSET = 260;
 8001a54:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001a58:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001a5c:	f102 021c 	add.w	r2, r2, #28
 8001a60:	6013      	str	r3, [r2, #0]
    const uint32_t X_SIZE = 240;
 8001a62:	23f0      	movs	r3, #240	@ 0xf0
 8001a64:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001a68:	f102 0218 	add.w	r2, r2, #24
 8001a6c:	6013      	str	r3, [r2, #0]
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 8001a6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a72:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001a76:	f103 031c 	add.w	r3, r3, #28
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001a86:	f102 0214 	add.w	r2, r2, #20
 8001a8a:	6013      	str	r3, [r2, #0]
    //static bool fft_initialized = false;
    float32_t fft_input[FFT_SIZE * 2];
    float32_t fft_output[FFT_SIZE];

    // Clear the display
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f001 ff6c 	bl	800396c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 8001a94:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001a98:	f103 0318 	add.w	r3, r3, #24
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001aa4:	f103 031c 	add.w	r3, r3, #28
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f002 f99a 	bl	8003dec <BSP_LCD_FillRect>

    uint32_t start_idx = (ADC_NUMS > FFT_SIZE) ? (ADC_NUMS - FFT_SIZE) : 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001abe:	f102 0210 	add.w	r2, r2, #16
 8001ac2:	6013      	str	r3, [r2, #0]

    // I/Q-Daten in FFT-Input kopieren
    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001aca:	f102 020c 	add.w	r2, r2, #12
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e07b      	b.n	8001bca <show_data_menu_one+0x18a>
    	if ((start_idx + i) < ADC_NUMS && MEAS_input_count == 2) {
 8001ad2:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001ad6:	f103 0310 	add.w	r3, r3, #16
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001ae0:	f103 030c 	add.w	r3, r3, #12
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2b3b      	cmp	r3, #59	@ 0x3b
 8001aea:	d846      	bhi.n	8001b7a <show_data_menu_one+0x13a>
 8001aec:	4ba1      	ldr	r3, [pc, #644]	@ (8001d74 <show_data_menu_one+0x334>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d142      	bne.n	8001b7a <show_data_menu_one+0x13a>
    		fft_input[2 * i] = (float32_t)ADC_samples[2 * (start_idx + i)];     // I
 8001af4:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001af8:	f103 0310 	add.w	r3, r3, #16
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b02:	f103 030c 	add.w	r3, r3, #12
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4a9a      	ldr	r2, [pc, #616]	@ (8001d78 <show_data_menu_one+0x338>)
 8001b0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b12:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b16:	f103 030c 	add.w	r3, r3, #12
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	ee07 2a90 	vmov	s15, r2
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b2c      	subs	r3, #44	@ 0x2c
 8001b30:	edc3 7a00 	vstr	s15, [r3]
            fft_input[2 * i + 1] = (float32_t)ADC_samples[2 * (start_idx + i) + 1]; // Q
 8001b34:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001b38:	f103 0310 	add.w	r3, r3, #16
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b42:	f103 030c 	add.w	r3, r3, #12
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	@ (8001d78 <show_data_menu_one+0x338>)
 8001b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b54:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b58:	f103 030c 	add.w	r3, r3, #12
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	3301      	adds	r3, #1
 8001b62:	ee07 2a90 	vmov	s15, r2
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b2c      	subs	r3, #44	@ 0x2c
 8001b74:	edc3 7a00 	vstr	s15, [r3]
 8001b78:	e01c      	b.n	8001bb4 <show_data_menu_one+0x174>
            } else {
              fft_input[2 * i] = 0;
 8001b7a:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b7e:	f103 030c 	add.w	r3, r3, #12
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b2c      	subs	r3, #44	@ 0x2c
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
              fft_input[2 * i + 1] = 0;
 8001b96:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001b9a:	f103 030c 	add.w	r3, r3, #12
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b2c      	subs	r3, #44	@ 0x2c
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001bb4:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001bb8:	f103 030c 	add.w	r3, r3, #12
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001bc4:	f102 020c 	add.w	r2, r2, #12
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001bce:	f103 030c 	add.w	r3, r3, #12
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd8:	f4ff af7b 	bcc.w	8001ad2 <show_data_menu_one+0x92>
               }
           }

           // Fensterung (Hann Window)
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001be2:	f102 020a 	add.w	r2, r2, #10
 8001be6:	8013      	strh	r3, [r2, #0]
 8001be8:	e075      	b.n	8001cd6 <show_data_menu_one+0x296>
    	float32_t window = 0.5f * (1.0f - arm_cos_f32(2 * PI * i / (FFT_SIZE - 1)));
 8001bea:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001bee:	f103 030a 	add.w	r3, r3, #10
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001d7c <show_data_menu_one+0x33c>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8001d80 <show_data_menu_one+0x340>
 8001c08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	f008 fb5e 	bl	800a2d0 <arm_cos_f32>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c28:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001c2c:	f103 0304 	add.w	r3, r3, #4
 8001c30:	edc3 7a00 	vstr	s15, [r3]
        fft_input[2 * i] *= window;
 8001c34:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001c38:	f103 030a 	add.w	r3, r3, #10
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b2c      	subs	r3, #44	@ 0x2c
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001c52:	f103 030a 	add.w	r3, r3, #10
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001c5e:	f102 0204 	add.w	r2, r2, #4
 8001c62:	edd2 7a00 	vldr	s15, [r2]
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	3b2c      	subs	r3, #44	@ 0x2c
 8001c74:	edc3 7a00 	vstr	s15, [r3]
        fft_input[2 * i + 1] *= window;
 8001c78:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001c7c:	f103 030a 	add.w	r3, r3, #10
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3301      	adds	r3, #1
 8001c86:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b2c      	subs	r3, #44	@ 0x2c
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001c98:	f103 030a 	add.w	r3, r3, #10
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001ca6:	f102 0204 	add.w	r2, r2, #4
 8001caa:	edd2 7a00 	vldr	s15, [r2]
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b2c      	subs	r3, #44	@ 0x2c
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8001cc0:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001cc4:	f103 030a 	add.w	r3, r3, #10
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001cd0:	f102 020a 	add.w	r2, r2, #10
 8001cd4:	8013      	strh	r3, [r2, #0]
 8001cd6:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001cda:	f103 030a 	add.w	r3, r3, #10
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ce4:	d381      	bcc.n	8001bea <show_data_menu_one+0x1aa>
        }

    // FFT durchführen
    arm_cfft_radix4_f32(&fft_inst, fft_input);
 8001ce6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001cea:	3b0c      	subs	r3, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4825      	ldr	r0, [pc, #148]	@ (8001d84 <show_data_menu_one+0x344>)
 8001cf0:	f008 f9e2 	bl	800a0b8 <arm_cfft_radix4_f32>

     // Magnitude berechnen
    arm_cmplx_mag_f32(fft_input, fft_output, FFT_SIZE);
 8001cf4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001cf8:	390c      	subs	r1, #12
 8001cfa:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001cfe:	3b0c      	subs	r3, #12
 8001d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d04:	4618      	mov	r0, r3
 8001d06:	f008 f9fb 	bl	800a100 <arm_cmplx_mag_f32>

           // Display vorbereiten
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0e:	f001 fe2d 	bl	800396c <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, 0, 240, 320);
 8001d12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001d16:	22f0      	movs	r2, #240	@ 0xf0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f002 f866 	bl	8003dec <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d20:	4819      	ldr	r0, [pc, #100]	@ (8001d88 <show_data_menu_one+0x348>)
 8001d22:	f001 fe23 	bl	800396c <BSP_LCD_SetTextColor>

      // Maximalwert finden für Skalierung
     float32_t max_value;
     arm_max_f32(fft_output + 1, FFT_SIZE / 2 - 1, &max_value, NULL);
 8001d26:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001d2a:	380c      	subs	r0, #12
 8001d2c:	3004      	adds	r0, #4
 8001d2e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d32:	3a10      	subs	r2, #16
 8001d34:	2300      	movs	r3, #0
 8001d36:	21ff      	movs	r1, #255	@ 0xff
 8001d38:	f007 fd52 	bl	80097e0 <arm_max_f32>
     float32_t scale = 200.0f / (max_value + 0.001f); // +0.001 um Division durch 0 zu vermeiden
 8001d3c:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001d40:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d8c <show_data_menu_one+0x34c>
 8001d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d50:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d90 <show_data_menu_one+0x350>
 8001d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d58:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001d5c:	f103 030c 	add.w	r3, r3, #12
 8001d60:	edc3 7a00 	vstr	s15, [r3]

     // FFT plotten
     for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 8001d64:	2301      	movs	r3, #1
 8001d66:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001d6a:	f102 0208 	add.w	r2, r2, #8
 8001d6e:	8013      	strh	r3, [r2, #0]
 8001d70:	e06e      	b.n	8001e50 <show_data_menu_one+0x410>
 8001d72:	bf00      	nop
 8001d74:	20000004 	.word	0x20000004
 8001d78:	2000024c 	.word	0x2000024c
 8001d7c:	40c90fdb 	.word	0x40c90fdb
 8001d80:	43ff8000 	.word	0x43ff8000
 8001d84:	20000444 	.word	0x20000444
 8001d88:	ff0000ff 	.word	0xff0000ff
 8001d8c:	3a83126f 	.word	0x3a83126f
 8001d90:	43480000 	.word	0x43480000
          uint16_t height = (uint16_t)(fft_output[i] * scale);
 8001d94:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001d98:	f103 0308 	add.w	r3, r3, #8
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f507 6205 	add.w	r2, r7, #2128	@ 0x850
 8001da2:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	f507 53c1 	add.w	r3, r7, #6176	@ 0x1820
 8001db2:	f103 030c 	add.w	r3, r3, #12
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc2:	ee17 3a90 	vmov	r3, s15
 8001dc6:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001dca:	f102 0206 	add.w	r2, r2, #6
 8001dce:	8013      	strh	r3, [r2, #0]
          if (height > 200) height = 200;
 8001dd0:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001dd4:	f103 0306 	add.w	r3, r3, #6
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	2bc8      	cmp	r3, #200	@ 0xc8
 8001ddc:	d905      	bls.n	8001dea <show_data_menu_one+0x3aa>
 8001dde:	23c8      	movs	r3, #200	@ 0xc8
 8001de0:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001de4:	f102 0206 	add.w	r2, r2, #6
 8001de8:	8013      	strh	r3, [r2, #0]
          {
        	  uint16_t x = i * 240 / (FFT_SIZE / 2);
 8001dea:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001dee:	f103 0308 	add.w	r3, r3, #8
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da00      	bge.n	8001e02 <show_data_menu_one+0x3c2>
 8001e00:	33ff      	adds	r3, #255	@ 0xff
 8001e02:	121b      	asrs	r3, r3, #8
 8001e04:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001e08:	f102 020a 	add.w	r2, r2, #10
 8001e0c:	8013      	strh	r3, [r2, #0]
              BSP_LCD_DrawLine(x, 300, x, 300 - height);
 8001e0e:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001e12:	f103 0306 	add.w	r3, r3, #6
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001e22:	f102 020a 	add.w	r2, r2, #10
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	f507 51c1 	add.w	r1, r7, #6176	@ 0x1820
 8001e2c:	f101 010a 	add.w	r1, r1, #10
 8001e30:	8808      	ldrh	r0, [r1, #0]
 8001e32:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e36:	f001 ff0f 	bl	8003c58 <BSP_LCD_DrawLine>
     for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 8001e3a:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001e3e:	f103 0308 	add.w	r3, r3, #8
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	f507 52c2 	add.w	r2, r7, #6208	@ 0x1840
 8001e4a:	f102 0208 	add.w	r2, r2, #8
 8001e4e:	8013      	strh	r3, [r2, #0]
 8001e50:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001e54:	f103 0308 	add.w	r3, r3, #8
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2bff      	cmp	r3, #255	@ 0xff
 8001e5c:	d99a      	bls.n	8001d94 <show_data_menu_one+0x354>
          }
		}

          // Frequenzinformation anzeigen
     BSP_LCD_SetFont(&Font16);
 8001e5e:	481d      	ldr	r0, [pc, #116]	@ (8001ed4 <show_data_menu_one+0x494>)
 8001e60:	f001 fdb6 	bl	80039d0 <BSP_LCD_SetFont>
     BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f001 fd98 	bl	800399c <BSP_LCD_SetBackColor>
     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e6c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e70:	f001 fd7c 	bl	800396c <BSP_LCD_SetTextColor>
     char text[32];
     snprintf(text, sizeof(text), "Max Freq: %.1f Hz", max_value * SAMPLE_RATE / FFT_SIZE);
 8001e74:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e82:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8001e86:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001ed8 <show_data_menu_one+0x498>
 8001e96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e9a:	ee16 0a90 	vmov	r0, s13
 8001e9e:	f7fe fb63 	bl	8000568 <__aeabi_f2d>
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	3b10      	subs	r3, #16
 8001ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <show_data_menu_one+0x49c>)
 8001eae:	2120      	movs	r1, #32
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f008 fabd 	bl	800a430 <sniprintf>
     BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, LEFT_MODE);
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	3a10      	subs	r2, #16
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	2114      	movs	r1, #20
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f001 fe0b 	bl	8003adc <BSP_LCD_DisplayStringAt>
}
 8001ec6:	bf00      	nop
 8001ec8:	f507 57c2 	add.w	r7, r7, #6208	@ 0x1840
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000017c 	.word	0x2000017c
 8001ed8:	44000000 	.word	0x44000000
 8001edc:	0800ae88 	.word	0x0800ae88

08001ee0 <show_data_menu_zero>:


void show_data_menu_zero(void)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b08f      	sub	sp, #60	@ 0x3c
 8001ee4:	af00      	add	r7, sp, #0
	const uint32_t SAMPLE_RATE = 2000; // Anpassen an Ihre tatsächliche Abtastrate
 8001ee6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint32_t Y_OFFSET = 260;
 8001eec:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001ef0:	623b      	str	r3, [r7, #32]
    const uint32_t X_SIZE = 240;
 8001ef2:	23f0      	movs	r3, #240	@ 0xf0
 8001ef4:	61fb      	str	r3, [r7, #28]
    const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;
 8001ef6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
    uint32_t data;
    uint32_t data_last;

    /* Clear the display */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f001 fd30 	bl	800396c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET + 1);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f001 ff66 	bl	8003dec <BSP_LCD_FillRect>

    /* Write first 2 samples as numbers */
    BSP_LCD_SetFont(&Font24);
 8001f20:	4861      	ldr	r0, [pc, #388]	@ (80020a8 <show_data_menu_zero+0x1c8>)
 8001f22:	f001 fd55 	bl	80039d0 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2a:	f001 fd37 	bl	800399c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f2e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001f32:	f001 fd1b 	bl	800396c <BSP_LCD_SetTextColor>
    char text[16];
    snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 8001f36:	4b5d      	ldr	r3, [pc, #372]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1d38      	adds	r0, r7, #4
 8001f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <show_data_menu_zero+0x1d0>)
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f008 fa76 	bl	800a430 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 8001f44:	1d3a      	adds	r2, r7, #4
 8001f46:	2303      	movs	r3, #3
 8001f48:	2132      	movs	r1, #50	@ 0x32
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f001 fdc6 	bl	8003adc <BSP_LCD_DisplayStringAt>
    snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 8001f50:	4b56      	ldr	r3, [pc, #344]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	1d38      	adds	r0, r7, #4
 8001f56:	4a57      	ldr	r2, [pc, #348]	@ (80020b4 <show_data_menu_zero+0x1d4>)
 8001f58:	210f      	movs	r1, #15
 8001f5a:	f008 fa69 	bl	800a430 <sniprintf>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8001f5e:	1d3a      	adds	r2, r7, #4
 8001f60:	2303      	movs	r3, #3
 8001f62:	2150      	movs	r1, #80	@ 0x50
 8001f64:	2000      	movs	r0, #0
 8001f66:	f001 fdb9 	bl	8003adc <BSP_LCD_DisplayStringAt>

    /* Draw the values of input channel 1 as a curve */
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f6a:	4853      	ldr	r0, [pc, #332]	@ (80020b8 <show_data_menu_zero+0x1d8>)
 8001f6c:	f001 fcfe 	bl	800396c <BSP_LCD_SetTextColor>
    data = ADC_samples[MEAS_input_count * 0] / f;
 8001f70:	4b4e      	ldr	r3, [pc, #312]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f80:	e02e      	b.n	8001fe0 <show_data_menu_zero+0x100>
        data_last = data;
 8001f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f84:	617b      	str	r3, [r7, #20]
        data = (ADC_samples[MEAS_input_count * i]) / f;
 8001f86:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <show_data_menu_zero+0x1dc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	4a46      	ldr	r2, [pc, #280]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8001f92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        if (data > Y_OFFSET) data = Y_OFFSET;
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d901      	bls.n	8001faa <show_data_menu_zero+0xca>
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 8001faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b299      	uxth	r1, r3
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	b29c      	uxth	r4, r3
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	f001 fe3f 	bl	8003c58 <BSP_LCD_DrawLine>
    for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fdc:	3301      	adds	r3, #1
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fe4:	d9cd      	bls.n	8001f82 <show_data_menu_zero+0xa2>
    }

    /* Draw the values of input channel 2 (if present) as a curve */
    if (MEAS_input_count == 2) {
 8001fe6:	4b35      	ldr	r3, [pc, #212]	@ (80020bc <show_data_menu_zero+0x1dc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d13e      	bne.n	800206c <show_data_menu_zero+0x18c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fee:	4834      	ldr	r0, [pc, #208]	@ (80020c0 <show_data_menu_zero+0x1e0>)
 8001ff0:	f001 fcbc 	bl	800396c <BSP_LCD_SetTextColor>
        data = ADC_samples[MEAS_input_count * 0 + 1] / f;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002004:	e02f      	b.n	8002066 <show_data_menu_zero+0x186>
            data_last = data;
 8002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002008:	617b      	str	r3, [r7, #20]
            data = (ADC_samples[MEAS_input_count * i + 1]) / f;
 800200a:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <show_data_menu_zero+0x1dc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	3301      	adds	r3, #1
 8002016:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8002018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
            if (data > Y_OFFSET) data = Y_OFFSET;
 8002024:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	429a      	cmp	r2, r3
 800202a:	d901      	bls.n	8002030 <show_data_menu_zero+0x150>
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
            BSP_LCD_DrawLine(4 * (i - 1), Y_OFFSET - data_last, 4 * i, Y_OFFSET - data);
 8002030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002032:	3b01      	subs	r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	b298      	uxth	r0, r3
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	b29a      	uxth	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	b29b      	uxth	r3, r3
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b299      	uxth	r1, r3
 8002046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002048:	b29b      	uxth	r3, r3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	b29c      	uxth	r4, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	b29a      	uxth	r2, r3
 8002052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002054:	b29b      	uxth	r3, r3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	b29b      	uxth	r3, r3
 800205a:	4622      	mov	r2, r4
 800205c:	f001 fdfc 	bl	8003c58 <BSP_LCD_DrawLine>
        for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8002060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002062:	3301      	adds	r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002068:	2b3b      	cmp	r3, #59	@ 0x3b
 800206a:	d9cc      	bls.n	8002006 <show_data_menu_zero+0x126>
        }
    }

/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002070:	e00f      	b.n	8002092 <show_data_menu_zero+0x1b2>
		ADC_samples[2 * i] = 0;
 8002072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8002078:	2100      	movs	r1, #0
 800207a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2 * i + 1] = 0;
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3301      	adds	r3, #1
 8002084:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <show_data_menu_zero+0x1cc>)
 8002086:	2100      	movs	r1, #0
 8002088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	3301      	adds	r3, #1
 8002090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002094:	2b3b      	cmp	r3, #59	@ 0x3b
 8002096:	d9ec      	bls.n	8002072 <show_data_menu_zero+0x192>
	}
	ADC_sample_count = 0;
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <show_data_menu_zero+0x1e4>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	373c      	adds	r7, #60	@ 0x3c
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000174 	.word	0x20000174
 80020ac:	2000024c 	.word	0x2000024c
 80020b0:	0800ae9c 	.word	0x0800ae9c
 80020b4:	0800aeac 	.word	0x0800aeac
 80020b8:	ff0000ff 	.word	0xff0000ff
 80020bc:	20000004 	.word	0x20000004
 80020c0:	ffff0000 	.word	0xffff0000
 80020c4:	20000248 	.word	0x20000248

080020c8 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 80020ce:	4852      	ldr	r0, [pc, #328]	@ (8002218 <MENU_draw+0x150>)
 80020d0:	f001 fc7e 	bl	80039d0 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 80020d4:	f001 fbca 	bl	800386c <BSP_LCD_GetYSize>
 80020d8:	4603      	mov	r3, r0
 80020da:	3b28      	subs	r3, #40	@ 0x28
 80020dc:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 80020de:	2302      	movs	r3, #2
 80020e0:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 80020e2:	f001 fbb7 	bl	8003854 <BSP_LCD_GetXSize>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <MENU_draw+0x154>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 80020f2:	2328      	movs	r3, #40	@ 0x28
 80020f4:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e084      	b.n	8002206 <MENU_draw+0x13e>
		x = i*w;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8002106:	4946      	ldr	r1, [pc, #280]	@ (8002220 <MENU_draw+0x158>)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	3324      	adds	r3, #36	@ 0x24
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fc27 	bl	800396c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b298      	uxth	r0, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b299      	uxth	r1, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	b29b      	uxth	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29c      	uxth	r4, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	b29b      	uxth	r3, r3
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b29b      	uxth	r3, r3
 8002156:	4622      	mov	r2, r4
 8002158:	f001 fe48 	bl	8003dec <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 800215c:	4930      	ldr	r1, [pc, #192]	@ (8002220 <MENU_draw+0x158>)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3324      	adds	r3, #36	@ 0x24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fc14 	bl	800399c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8002174:	492a      	ldr	r1, [pc, #168]	@ (8002220 <MENU_draw+0x158>)
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3320      	adds	r3, #32
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fbf0 	bl	800396c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	0052      	lsls	r2, r2, #1
 8002194:	4413      	add	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4413      	add	r3, r2
 800219e:	b298      	uxth	r0, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <MENU_draw+0x158>)
 80021c0:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80021c2:	2303      	movs	r3, #3
 80021c4:	f001 fc8a 	bl	8003adc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	0052      	lsls	r2, r2, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4413      	add	r3, r2
 80021da:	b298      	uxth	r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	3310      	adds	r3, #16
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <MENU_draw+0x158>)
 80021f8:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 80021fa:	2303      	movs	r3, #3
 80021fc:	f001 fc6e 	bl	8003adc <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b05      	cmp	r3, #5
 800220a:	f67f af77 	bls.w	80020fc <MENU_draw+0x34>
	}
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	20000184 	.word	0x20000184
 800221c:	aaaaaaab 	.word	0xaaaaaaab
 8002220:	2000000c 	.word	0x2000000c

08002224 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f001 fbb6 	bl	800399c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002230:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002234:	f001 fb9a 	bl	800396c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002238:	4818      	ldr	r0, [pc, #96]	@ (800229c <MENU_hint+0x78>)
 800223a:	f001 fbc9 	bl	80039d0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"KEK-CODE", LEFT_MODE);
 800223e:	2303      	movs	r3, #3
 8002240:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <MENU_hint+0x7c>)
 8002242:	210a      	movs	r1, #10
 8002244:	2005      	movs	r0, #5
 8002246:	f001 fc49 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800224a:	4816      	ldr	r0, [pc, #88]	@ (80022a4 <MENU_hint+0x80>)
 800224c:	f001 fbc0 	bl	80039d0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8002250:	2303      	movs	r3, #3
 8002252:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <MENU_hint+0x84>)
 8002254:	213c      	movs	r1, #60	@ 0x3c
 8002256:	2005      	movs	r0, #5
 8002258:	f001 fc40 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 800225c:	2303      	movs	r3, #3
 800225e:	4a13      	ldr	r2, [pc, #76]	@ (80022ac <MENU_hint+0x88>)
 8002260:	2150      	movs	r1, #80	@ 0x50
 8002262:	2005      	movs	r0, #5
 8002264:	f001 fc3a 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 8002268:	2303      	movs	r3, #3
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <MENU_hint+0x8c>)
 800226c:	216e      	movs	r1, #110	@ 0x6e
 800226e:	2005      	movs	r0, #5
 8002270:	f001 fc34 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8002274:	2303      	movs	r3, #3
 8002276:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <MENU_hint+0x90>)
 8002278:	2182      	movs	r1, #130	@ 0x82
 800227a:	2005      	movs	r0, #5
 800227c:	f001 fc2e 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 8002280:	2303      	movs	r3, #3
 8002282:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <MENU_hint+0x94>)
 8002284:	21a0      	movs	r1, #160	@ 0xa0
 8002286:	2005      	movs	r0, #5
 8002288:	f001 fc28 	bl	8003adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 800228c:	2303      	movs	r3, #3
 800228e:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <MENU_hint+0x98>)
 8002290:	21a0      	movs	r1, #160	@ 0xa0
 8002292:	2005      	movs	r0, #5
 8002294:	f001 fc22 	bl	8003adc <BSP_LCD_DisplayStringAt>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000174 	.word	0x20000174
 80022a0:	0800aebc 	.word	0x0800aebc
 80022a4:	2000017c 	.word	0x2000017c
 80022a8:	0800aec8 	.word	0x0800aec8
 80022ac:	0800aedc 	.word	0x0800aedc
 80022b0:	0800aef4 	.word	0x0800aef4
 80022b4:	0800af08 	.word	0x0800af08
 80022b8:	0800af20 	.word	0x0800af20
 80022bc:	0800af34 	.word	0x0800af34

080022c0 <MENU_get_transition>:
	MENU_transition = MENU_NONE;
	return item;
}*/

MENU_item_t MENU_get_transition(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	/*
	MENU_item_t item = MENU_transition;
	MENU_transition = MENU_NONE;
	return item;
	*/
	return MENU_transition;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <MENU_get_transition+0x14>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008

080022d8 <MENU_check_transition>:
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/

void MENU_check_transition(void)
{
 80022d8:	b598      	push	{r3, r4, r7, lr}
 80022da:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 80022dc:	482f      	ldr	r0, [pc, #188]	@ (800239c <MENU_check_transition+0xc4>)
 80022de:	f002 fa3b 	bl	8004758 <BSP_TS_GetState>

// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80022e2:	f001 fac3 	bl	800386c <BSP_LCD_GetYSize>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b2c      	ldr	r3, [pc, #176]	@ (800239c <MENU_check_transition+0xc4>)
 80022ec:	889b      	ldrh	r3, [r3, #4]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <MENU_check_transition+0xc4>)
 80022f4:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 80022f6:	f001 faad 	bl	8003854 <BSP_LCD_GetXSize>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b27      	ldr	r3, [pc, #156]	@ (800239c <MENU_check_transition+0xc4>)
 8002300:	885b      	ldrh	r3, [r3, #2]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <MENU_check_transition+0xc4>)
 8002308:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 800230a:	f001 faaf 	bl	800386c <BSP_LCD_GetYSize>
 800230e:	4603      	mov	r3, r0
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b22      	ldr	r3, [pc, #136]	@ (800239c <MENU_check_transition+0xc4>)
 8002314:	889b      	ldrh	r3, [r3, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <MENU_check_transition+0xc4>)
 800231c:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 800231e:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <MENU_check_transition+0xc4>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d037      	beq.n	8002396 <MENU_check_transition+0xbe>
					MENU_transition = item_old;
				}
			}
		}*/

        item_old = item_new;           // Update old item
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <MENU_check_transition+0xc8>)
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <MENU_check_transition+0xcc>)
 800232c:	701a      	strb	r2, [r3, #0]
        if ((MENU_Y < TS_State.Y) && (MENU_Y + MENU_HEIGHT > TS_State.Y)) {
 800232e:	f001 fa9d 	bl	800386c <BSP_LCD_GetYSize>
 8002332:	4603      	mov	r3, r0
 8002334:	3b28      	subs	r3, #40	@ 0x28
 8002336:	4a19      	ldr	r2, [pc, #100]	@ (800239c <MENU_check_transition+0xc4>)
 8002338:	8892      	ldrh	r2, [r2, #4]
 800233a:	4293      	cmp	r3, r2
 800233c:	d22b      	bcs.n	8002396 <MENU_check_transition+0xbe>
 800233e:	f001 fa95 	bl	800386c <BSP_LCD_GetYSize>
 8002342:	4603      	mov	r3, r0
 8002344:	4a15      	ldr	r2, [pc, #84]	@ (800239c <MENU_check_transition+0xc4>)
 8002346:	8892      	ldrh	r2, [r2, #4]
 8002348:	4293      	cmp	r3, r2
 800234a:	d924      	bls.n	8002396 <MENU_check_transition+0xbe>
            item_new = TS_State.X / (BSP_LCD_GetXSize() / MENU_ENTRY_COUNT);
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <MENU_check_transition+0xc4>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	461c      	mov	r4, r3
 8002352:	f001 fa7f 	bl	8003854 <BSP_LCD_GetXSize>
 8002356:	4603      	mov	r3, r0
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <MENU_check_transition+0xd0>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	fbb4 f3f3 	udiv	r3, r4, r3
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <MENU_check_transition+0xc8>)
 8002368:	701a      	strb	r2, [r3, #0]
            if ((item_new < 0) || (item_new >= MENU_ENTRY_COUNT)) {
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <MENU_check_transition+0xc8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d902      	bls.n	8002378 <MENU_check_transition+0xa0>
                item_new = MENU_NONE;  // Out of bounds
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <MENU_check_transition+0xc8>)
 8002374:	2206      	movs	r2, #6
 8002376:	701a      	strb	r2, [r3, #0]
            }
            if (item_new == item_old) { // Handle same menu item touch
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <MENU_check_transition+0xc8>)
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <MENU_check_transition+0xcc>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d104      	bne.n	800238e <MENU_check_transition+0xb6>
                MENU_transition = item_old;
 8002384:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <MENU_check_transition+0xcc>)
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <MENU_check_transition+0xd4>)
 800238a:	701a      	strb	r2, [r3, #0]
	} else {
//		sprintf(msg, "No touch detected\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	}

}
 800238c:	e003      	b.n	8002396 <MENU_check_transition+0xbe>
                MENU_transition = item_new;
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <MENU_check_transition+0xc8>)
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <MENU_check_transition+0xd4>)
 8002394:	701a      	strb	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	bd98      	pop	{r3, r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	20000458 	.word	0x20000458
 80023a0:	200000fc 	.word	0x200000fc
 80023a4:	200000fd 	.word	0x200000fd
 80023a8:	aaaaaaab 	.word	0xaaaaaaab
 80023ac:	20000008 	.word	0x20000008

080023b0 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <EXTI15_10_IRQHandler+0x40>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d014      	beq.n	80023ea <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <EXTI15_10_IRQHandler+0x40>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <EXTI15_10_IRQHandler+0x40>)
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ca:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80023cc:	f002 f9b8 	bl	8004740 <BSP_TS_ITGetStatus>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 80023d6:	f002 fa71 	bl	80048bc <BSP_TS_ITClear>
			MENU_check_transition();
 80023da:	f7ff ff7d 	bl	80022d8 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80023de:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <EXTI15_10_IRQHandler+0x40>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4a03      	ldr	r2, [pc, #12]	@ (80023f0 <EXTI15_10_IRQHandler+0x40>)
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e8:	6153      	str	r3, [r2, #20]
	}
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <__NVIC_EnableIRQ>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_ClearPendingIRQ>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0c      	blt.n	800245c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	@ (8002468 <__NVIC_ClearPendingIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	3360      	adds	r3, #96	@ 0x60
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100

0800246c <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <PB_init+0x38>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <PB_init+0x38>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <PB_init+0x38>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <PB_init+0x3c>)
 8002490:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <PB_init+0x3c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000

080024ac <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <PB_enableIRQ+0x58>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <PB_enableIRQ+0x58>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <PB_enableIRQ+0x58>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <PB_enableIRQ+0x5c>)
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <PB_enableIRQ+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <PB_enableIRQ+0x60>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <PB_enableIRQ+0x60>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <PB_enableIRQ+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <PB_enableIRQ+0x60>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 80024ee:	2006      	movs	r0, #6
 80024f0:	f7ff ff9e 	bl	8002430 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 80024f4:	2006      	movs	r0, #6
 80024f6:	f7ff ff7d 	bl	80023f4 <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40013c00 	.word	0x40013c00

08002510 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <EXTI0_IRQHandler+0x2c>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <EXTI0_IRQHandler+0x2c>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <EXTI0_IRQHandler+0x2c>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <EXTI0_IRQHandler+0x30>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
	}
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40013c00 	.word	0x40013c00
 8002540:	20000460 	.word	0x20000460

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_MspInit+0x4c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	@ 0x40
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_UART_MspInit+0x94>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d134      	bne.n	8002620 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a14      	ldr	r2, [pc, #80]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_UART_MspInit+0x98>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002600:	2307      	movs	r3, #7
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4809      	ldr	r0, [pc, #36]	@ (8002630 <HAL_UART_MspInit+0x9c>)
 800260c:	f002 ff5e 	bl	80054cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2025      	movs	r0, #37	@ 0x25
 8002616:	f002 face 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261a:	2025      	movs	r0, #37	@ 0x25
 800261c:	f002 fae7 	bl	8004bee <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40011000 	.word	0x40011000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <HardFault_Handler+0x4>

0800264a <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <MemManage_Handler+0x4>

08002652 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <BusFault_Handler+0x4>

0800265a <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 800265e:	bf00      	nop
 8002660:	e7fd      	b.n	800265e <UsageFault_Handler+0x4>

08002662 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002690:	f002 f972 	bl	8004978 <HAL_IncTick>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <SystemInit+0x60>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <SystemInit+0x60>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <SystemInit+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <SystemInit+0x64>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <SystemInit+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <SystemInit+0x64>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <SystemInit+0x64>)
 80026c4:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <SystemInit+0x64>)
 80026d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002700 <SystemInit+0x68>)
 80026d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <SystemInit+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <SystemInit+0x64>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <SystemInit+0x64>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026e6:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <SystemInit+0x60>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026ec:	609a      	str	r2, [r3, #8]
#endif
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	40023800 	.word	0x40023800
 8002700:	24003010 	.word	0x24003010

08002704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800273c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002708:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800270a:	e003      	b.n	8002714 <LoopCopyDataInit>

0800270c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800270e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002710:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002712:	3104      	adds	r1, #4

08002714 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002714:	480b      	ldr	r0, [pc, #44]	@ (8002744 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002718:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800271a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800271c:	d3f6      	bcc.n	800270c <CopyDataInit>
  ldr  r2, =_sbss
 800271e:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002720:	e002      	b.n	8002728 <LoopFillZerobss>

08002722 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002722:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002724:	f842 3b04 	str.w	r3, [r2], #4

08002728 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800272a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800272c:	d3f9      	bcc.n	8002722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800272e:	f7ff ffb3 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f007 fedd 	bl	800a4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002736:	f7fe f905 	bl	8000944 <main>
  bx  lr    
 800273a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800273c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002740:	08016ac0 	.word	0x08016ac0
  ldr  r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002748:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800274c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002750:	20000874 	.word	0x20000874

08002754 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <CAN1_RX0_IRQHandler>

08002756 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800275a:	f000 feb9 	bl	80034d0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800275e:	20ca      	movs	r0, #202	@ 0xca
 8002760:	f000 f95d 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002764:	20c3      	movs	r0, #195	@ 0xc3
 8002766:	f000 f967 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800276a:	2008      	movs	r0, #8
 800276c:	f000 f964 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002770:	2050      	movs	r0, #80	@ 0x50
 8002772:	f000 f961 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002776:	20cf      	movs	r0, #207	@ 0xcf
 8002778:	f000 f951 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f000 f95b 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002782:	20c1      	movs	r0, #193	@ 0xc1
 8002784:	f000 f958 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002788:	2030      	movs	r0, #48	@ 0x30
 800278a:	f000 f955 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800278e:	20ed      	movs	r0, #237	@ 0xed
 8002790:	f000 f945 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002794:	2064      	movs	r0, #100	@ 0x64
 8002796:	f000 f94f 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800279a:	2003      	movs	r0, #3
 800279c:	f000 f94c 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80027a0:	2012      	movs	r0, #18
 80027a2:	f000 f949 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80027a6:	2081      	movs	r0, #129	@ 0x81
 80027a8:	f000 f946 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80027ac:	20e8      	movs	r0, #232	@ 0xe8
 80027ae:	f000 f936 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80027b2:	2085      	movs	r0, #133	@ 0x85
 80027b4:	f000 f940 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f000 f93d 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027be:	2078      	movs	r0, #120	@ 0x78
 80027c0:	f000 f93a 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80027c4:	20cb      	movs	r0, #203	@ 0xcb
 80027c6:	f000 f92a 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80027ca:	2039      	movs	r0, #57	@ 0x39
 80027cc:	f000 f934 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80027d0:	202c      	movs	r0, #44	@ 0x2c
 80027d2:	f000 f931 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f000 f92e 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80027dc:	2034      	movs	r0, #52	@ 0x34
 80027de:	f000 f92b 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80027e2:	2002      	movs	r0, #2
 80027e4:	f000 f928 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80027e8:	20f7      	movs	r0, #247	@ 0xf7
 80027ea:	f000 f918 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80027ee:	2020      	movs	r0, #32
 80027f0:	f000 f922 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80027f4:	20ea      	movs	r0, #234	@ 0xea
 80027f6:	f000 f912 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f91c 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f000 f919 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002806:	20b1      	movs	r0, #177	@ 0xb1
 8002808:	f000 f909 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f000 f913 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002812:	201b      	movs	r0, #27
 8002814:	f000 f910 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002818:	20b6      	movs	r0, #182	@ 0xb6
 800281a:	f000 f900 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800281e:	200a      	movs	r0, #10
 8002820:	f000 f90a 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002824:	20a2      	movs	r0, #162	@ 0xa2
 8002826:	f000 f907 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800282a:	20c0      	movs	r0, #192	@ 0xc0
 800282c:	f000 f8f7 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002830:	2010      	movs	r0, #16
 8002832:	f000 f901 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002836:	20c1      	movs	r0, #193	@ 0xc1
 8002838:	f000 f8f1 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800283c:	2010      	movs	r0, #16
 800283e:	f000 f8fb 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002842:	20c5      	movs	r0, #197	@ 0xc5
 8002844:	f000 f8eb 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002848:	2045      	movs	r0, #69	@ 0x45
 800284a:	f000 f8f5 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800284e:	2015      	movs	r0, #21
 8002850:	f000 f8f2 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002854:	20c7      	movs	r0, #199	@ 0xc7
 8002856:	f000 f8e2 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800285a:	2090      	movs	r0, #144	@ 0x90
 800285c:	f000 f8ec 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002860:	2036      	movs	r0, #54	@ 0x36
 8002862:	f000 f8dc 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002866:	20c8      	movs	r0, #200	@ 0xc8
 8002868:	f000 f8e6 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800286c:	20f2      	movs	r0, #242	@ 0xf2
 800286e:	f000 f8d6 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f000 f8e0 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002878:	20b0      	movs	r0, #176	@ 0xb0
 800287a:	f000 f8d0 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800287e:	20c2      	movs	r0, #194	@ 0xc2
 8002880:	f000 f8da 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002884:	20b6      	movs	r0, #182	@ 0xb6
 8002886:	f000 f8ca 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800288a:	200a      	movs	r0, #10
 800288c:	f000 f8d4 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002890:	20a7      	movs	r0, #167	@ 0xa7
 8002892:	f000 f8d1 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002896:	2027      	movs	r0, #39	@ 0x27
 8002898:	f000 f8ce 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800289c:	2004      	movs	r0, #4
 800289e:	f000 f8cb 	bl	8002a38 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80028a2:	202a      	movs	r0, #42	@ 0x2a
 80028a4:	f000 f8bb 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 f8c5 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f8c2 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f000 f8bf 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80028ba:	20ef      	movs	r0, #239	@ 0xef
 80028bc:	f000 f8bc 	bl	8002a38 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80028c0:	202b      	movs	r0, #43	@ 0x2b
 80028c2:	f000 f8ac 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f8b6 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 f8b3 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f000 f8b0 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80028d8:	203f      	movs	r0, #63	@ 0x3f
 80028da:	f000 f8ad 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80028de:	20f6      	movs	r0, #246	@ 0xf6
 80028e0:	f000 f89d 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f000 f8a7 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f8a4 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80028f0:	2006      	movs	r0, #6
 80028f2:	f000 f8a1 	bl	8002a38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80028f6:	202c      	movs	r0, #44	@ 0x2c
 80028f8:	f000 f891 	bl	8002a1e <ili9341_WriteReg>
  LCD_Delay(200);
 80028fc:	20c8      	movs	r0, #200	@ 0xc8
 80028fe:	f000 fed5 	bl	80036ac <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002902:	2026      	movs	r0, #38	@ 0x26
 8002904:	f000 f88b 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002908:	2001      	movs	r0, #1
 800290a:	f000 f895 	bl	8002a38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800290e:	20e0      	movs	r0, #224	@ 0xe0
 8002910:	f000 f885 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002914:	200f      	movs	r0, #15
 8002916:	f000 f88f 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800291a:	2029      	movs	r0, #41	@ 0x29
 800291c:	f000 f88c 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002920:	2024      	movs	r0, #36	@ 0x24
 8002922:	f000 f889 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002926:	200c      	movs	r0, #12
 8002928:	f000 f886 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800292c:	200e      	movs	r0, #14
 800292e:	f000 f883 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002932:	2009      	movs	r0, #9
 8002934:	f000 f880 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002938:	204e      	movs	r0, #78	@ 0x4e
 800293a:	f000 f87d 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800293e:	2078      	movs	r0, #120	@ 0x78
 8002940:	f000 f87a 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002944:	203c      	movs	r0, #60	@ 0x3c
 8002946:	f000 f877 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800294a:	2009      	movs	r0, #9
 800294c:	f000 f874 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002950:	2013      	movs	r0, #19
 8002952:	f000 f871 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002956:	2005      	movs	r0, #5
 8002958:	f000 f86e 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800295c:	2017      	movs	r0, #23
 800295e:	f000 f86b 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002962:	2011      	movs	r0, #17
 8002964:	f000 f868 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f000 f865 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800296e:	20e1      	movs	r0, #225	@ 0xe1
 8002970:	f000 f855 	bl	8002a1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f000 f85f 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800297a:	2016      	movs	r0, #22
 800297c:	f000 f85c 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002980:	201b      	movs	r0, #27
 8002982:	f000 f859 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002986:	2004      	movs	r0, #4
 8002988:	f000 f856 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800298c:	2011      	movs	r0, #17
 800298e:	f000 f853 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002992:	2007      	movs	r0, #7
 8002994:	f000 f850 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002998:	2031      	movs	r0, #49	@ 0x31
 800299a:	f000 f84d 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800299e:	2033      	movs	r0, #51	@ 0x33
 80029a0:	f000 f84a 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80029a4:	2042      	movs	r0, #66	@ 0x42
 80029a6:	f000 f847 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80029aa:	2005      	movs	r0, #5
 80029ac:	f000 f844 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029b0:	200c      	movs	r0, #12
 80029b2:	f000 f841 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80029b6:	200a      	movs	r0, #10
 80029b8:	f000 f83e 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80029bc:	2028      	movs	r0, #40	@ 0x28
 80029be:	f000 f83b 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80029c2:	202f      	movs	r0, #47	@ 0x2f
 80029c4:	f000 f838 	bl	8002a38 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80029c8:	200f      	movs	r0, #15
 80029ca:	f000 f835 	bl	8002a38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80029ce:	2011      	movs	r0, #17
 80029d0:	f000 f825 	bl	8002a1e <ili9341_WriteReg>
  LCD_Delay(200);
 80029d4:	20c8      	movs	r0, #200	@ 0xc8
 80029d6:	f000 fe69 	bl	80036ac <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80029da:	2029      	movs	r0, #41	@ 0x29
 80029dc:	f000 f81f 	bl	8002a1e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80029e0:	202c      	movs	r0, #44	@ 0x2c
 80029e2:	f000 f81c 	bl	8002a1e <ili9341_WriteReg>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80029ee:	f000 fd6f 	bl	80034d0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80029f2:	2103      	movs	r1, #3
 80029f4:	20d3      	movs	r0, #211	@ 0xd3
 80029f6:	f000 f82c 	bl	8002a52 <ili9341_ReadData>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29b      	uxth	r3, r3
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a06:	2029      	movs	r0, #41	@ 0x29
 8002a08:	f000 f809 	bl	8002a1e <ili9341_WriteReg>
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002a14:	2028      	movs	r0, #40	@ 0x28
 8002a16:	f000 f802 	bl	8002a1e <ili9341_WriteReg>
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fdea 	bl	8003604 <LCD_IO_WriteReg>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fdbb 	bl	80035c0 <LCD_IO_WriteData>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	80fb      	strh	r3, [r7, #6]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a62:	797a      	ldrb	r2, [r7, #5]
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fded 	bl	8003648 <LCD_IO_ReadData>
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002a7c:	23f0      	movs	r3, #240	@ 0xf0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002a8c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa59 	bl	8002f60 <stmpe811_GetInstance>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2bff      	cmp	r3, #255	@ 0xff
 8002ab6:	d112      	bne.n	8002ade <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 fa51 	bl	8002f60 <stmpe811_GetInstance>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002ac2:	7bbb      	ldrb	r3, [r7, #14]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d80a      	bhi.n	8002ade <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002ac8:	7bbb      	ldrb	r3, [r7, #14]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	b2d1      	uxtb	r1, r2
 8002ace:	4a06      	ldr	r2, [pc, #24]	@ (8002ae8 <stmpe811_Init+0x4c>)
 8002ad0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002ad2:	f000 fdf6 	bl	80036c2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f807 	bl	8002aec <stmpe811_Reset>
    }
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000464 	.word	0x20000464

08002aec <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2202      	movs	r2, #2
 8002afc:	2103      	movs	r1, #3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fdeb 	bl	80036da <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002b04:	200a      	movs	r0, #10
 8002b06:	f000 fe24 	bl	8003752 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2103      	movs	r1, #3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fde1 	bl	80036da <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f000 fe1a 	bl	8003752 <IOE_Delay>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002b26:	b590      	push	{r4, r7, lr}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002b30:	f000 fdc7 	bl	80036c2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fde0 	bl	8003700 <IOE_Read>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fdd6 	bl	8003700 <IOE_Read>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	b29b      	uxth	r3, r3
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd90      	pop	{r4, r7, pc}

08002b66 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2109      	movs	r1, #9
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fdc0 	bl	8003700 <IOE_Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	2109      	movs	r1, #9
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fda0 	bl	80036da <IOE_Write>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2109      	movs	r1, #9
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fda2 	bl	8003700 <IOE_Read>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	2109      	movs	r1, #9
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd82 	bl	80036da <IOE_Write>
    
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	460a      	mov	r2, r1
 8002be8:	80fb      	strh	r3, [r7, #6]
 8002bea:	4613      	mov	r3, r2
 8002bec:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	210a      	movs	r1, #10
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fd81 	bl	8003700 <IOE_Read>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	797b      	ldrb	r3, [r7, #5]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	210a      	movs	r1, #10
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd61 	bl	80036da <IOE_Write>
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	460a      	mov	r2, r1
 8002c2a:	80fb      	strh	r3, [r7, #6]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	210a      	movs	r1, #10
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fd60 	bl	8003700 <IOE_Read>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002c44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	b25a      	sxtb	r2, r3
 8002c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	210a      	movs	r1, #10
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd3b 	bl	80036da <IOE_Write>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	460a      	mov	r2, r1
 8002c76:	80fb      	strh	r3, [r7, #6]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	210b      	movs	r1, #11
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd3c 	bl	8003700 <IOE_Read>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	797b      	ldrb	r3, [r7, #5]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	80fb      	strh	r3, [r7, #6]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	797a      	ldrb	r2, [r7, #5]
 8002cb0:	210b      	movs	r1, #11
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fd11 	bl	80036da <IOE_Write>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2117      	movs	r1, #23
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fd12 	bl	8003700 <IOE_Read>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	b25a      	sxtb	r2, r3
 8002ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	2117      	movs	r1, #23
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fced 	bl	80036da <IOE_Write>
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2104      	movs	r1, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fcf1 	bl	8003700 <IOE_Read>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	2104      	movs	r1, #4
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fcd1 	bl	80036da <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	21f0      	movs	r1, #240	@ 0xf0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ffbf 	bl	8002cc0 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	2104      	movs	r1, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fcc1 	bl	80036da <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2249      	movs	r2, #73	@ 0x49
 8002d5e:	2120      	movs	r1, #32
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fcba 	bl	80036da <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002d66:	2002      	movs	r0, #2
 8002d68:	f000 fcf3 	bl	8003752 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2201      	movs	r2, #1
 8002d72:	2121      	movs	r1, #33	@ 0x21
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fcb0 	bl	80036da <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	229a      	movs	r2, #154	@ 0x9a
 8002d80:	2141      	movs	r1, #65	@ 0x41
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fca9 	bl	80036da <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	214a      	movs	r1, #74	@ 0x4a
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fca2 	bl	80036da <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	214b      	movs	r1, #75	@ 0x4b
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fc9b 	bl	80036da <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2200      	movs	r2, #0
 8002daa:	214b      	movs	r1, #75	@ 0x4b
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fc94 	bl	80036da <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2201      	movs	r2, #1
 8002db8:	2156      	movs	r1, #86	@ 0x56
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fc8d 	bl	80036da <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2158      	movs	r1, #88	@ 0x58
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fc86 	bl	80036da <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2140      	movs	r1, #64	@ 0x40
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fc7f 	bl	80036da <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	22ff      	movs	r2, #255	@ 0xff
 8002de2:	210b      	movs	r1, #11
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fc78 	bl	80036da <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002dea:	2002      	movs	r0, #2
 8002dec:	f000 fcb1 	bl	8003752 <IOE_Delay>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2140      	movs	r1, #64	@ 0x40
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fc77 	bl	8003700 <IOE_Read>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e18:	2b80      	cmp	r3, #128	@ 0x80
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	214c      	movs	r1, #76	@ 0x4c
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fc65 	bl	8003700 <IOE_Read>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e00d      	b.n	8002e5e <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	214b      	movs	r1, #75	@ 0x4b
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fc45 	bl	80036da <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	214b      	movs	r1, #75	@ 0x4b
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc3e 	bl	80036da <IOE_Write>
  }
  
  return ret;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	b2d8      	uxtb	r0, r3
 8002e7a:	f107 0210 	add.w	r2, r7, #16
 8002e7e:	2304      	movs	r3, #4
 8002e80:	21d7      	movs	r1, #215	@ 0xd7
 8002e82:	f000 fc50 	bl	8003726 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002e86:	7c3b      	ldrb	r3, [r7, #16]
 8002e88:	061a      	lsls	r2, r3, #24
 8002e8a:	7c7b      	ldrb	r3, [r7, #17]
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	7cbb      	ldrb	r3, [r7, #18]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4313      	orrs	r3, r2
 8002e96:	7cfa      	ldrb	r2, [r7, #19]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	0d1b      	lsrs	r3, r3, #20
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2201      	movs	r2, #1
 8002ebc:	214b      	movs	r1, #75	@ 0x4b
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fc0b 	bl	80036da <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	214b      	movs	r1, #75	@ 0x4b
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fc04 	bl	80036da <IOE_Write>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002ee4:	f000 fbf3 	bl	80036ce <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	211f      	movs	r1, #31
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fe76 	bl	8002bde <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe36 	bl	8002b66 <stmpe811_EnableGlobalIT>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe47 	bl	8002ba2 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	211f      	movs	r1, #31
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fe81 	bl	8002c20 <stmpe811_DisableITSource>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	211f      	movs	r1, #31
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe99 	bl	8002c6c <stmpe811_ReadGITStatus>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	211f      	movs	r1, #31
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fea1 	bl	8002c9a <stmpe811_ClearGlobalIT>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	e00b      	b.n	8002f8c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <stmpe811_GetInstance+0x40>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	e006      	b.n	8002f94 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d9f0      	bls.n	8002f74 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002f92:	23ff      	movs	r3, #255	@ 0xff
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	20000464 	.word	0x20000464

08002fa4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10e      	bne.n	8002fd2 <BSP_LED_Init+0x2e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	4b21      	ldr	r3, [pc, #132]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	4a20      	ldr	r2, [pc, #128]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	e010      	b.n	8002ff4 <BSP_LED_Init+0x50>
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10d      	bne.n	8002ff4 <BSP_LED_Init+0x50>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe8:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <BSP_LED_Init+0x9c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	@ (8003044 <BSP_LED_Init+0xa0>)
 8002ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003006:	2302      	movs	r3, #2
 8003008:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4a0e      	ldr	r2, [pc, #56]	@ (8003048 <BSP_LED_Init+0xa4>)
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	f107 0214 	add.w	r2, r7, #20
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fa57 	bl	80054cc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <BSP_LED_Init+0xa4>)
 8003022:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	4a06      	ldr	r2, [pc, #24]	@ (8003044 <BSP_LED_Init+0xa0>)
 800302a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302e:	2200      	movs	r2, #0
 8003030:	4619      	mov	r1, r3
 8003032:	f002 fbf7 	bl	8005824 <HAL_GPIO_WritePin>
}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	@ 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	0800af60 	.word	0x0800af60
 8003048:	20000164 	.word	0x20000164

0800304c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4a07      	ldr	r2, [pc, #28]	@ (8003078 <BSP_LED_Toggle+0x2c>)
 800305a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	4906      	ldr	r1, [pc, #24]	@ (800307c <BSP_LED_Toggle+0x30>)
 8003062:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f002 fbf4 	bl	8005856 <HAL_GPIO_TogglePin>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000164 	.word	0x20000164
 800307c:	0800af60 	.word	0x0800af60

08003080 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a33      	ldr	r2, [pc, #204]	@ (800315c <I2Cx_MspInit+0xdc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d15f      	bne.n	8003152 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b32      	ldr	r3, [pc, #200]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a31      	ldr	r2, [pc, #196]	@ (8003160 <I2Cx_MspInit+0xe0>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <I2Cx_MspInit+0xe0>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <I2Cx_MspInit+0xe0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003160 <I2Cx_MspInit+0xe0>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b28      	ldr	r3, [pc, #160]	@ (8003160 <I2Cx_MspInit+0xe0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80030ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80030d0:	2312      	movs	r3, #18
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80030d8:	2302      	movs	r3, #2
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80030dc:	2304      	movs	r3, #4
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	481f      	ldr	r0, [pc, #124]	@ (8003164 <I2Cx_MspInit+0xe4>)
 80030e8:	f002 f9f0 	bl	80054cc <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80030ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030f0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	481b      	ldr	r0, [pc, #108]	@ (8003168 <I2Cx_MspInit+0xe8>)
 80030fa:	f002 f9e7 	bl	80054cc <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003108:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800310c:	6413      	str	r3, [r2, #64]	@ 0x40
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <I2Cx_MspInit+0xe0>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003124:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <I2Cx_MspInit+0xe0>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <I2Cx_MspInit+0xe0>)
 800312c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003130:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	210f      	movs	r1, #15
 8003136:	2048      	movs	r0, #72	@ 0x48
 8003138:	f001 fd3d 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800313c:	2048      	movs	r0, #72	@ 0x48
 800313e:	f001 fd56 	bl	8004bee <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	210f      	movs	r1, #15
 8003146:	2049      	movs	r0, #73	@ 0x49
 8003148:	f001 fd35 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800314c:	2049      	movs	r0, #73	@ 0x49
 800314e:	f001 fd4e 	bl	8004bee <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003152:	bf00      	nop
 8003154:	3728      	adds	r7, #40	@ 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40005c00 	.word	0x40005c00
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020800 	.word	0x40020800

0800316c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003170:	4814      	ldr	r0, [pc, #80]	@ (80031c4 <I2Cx_Init+0x58>)
 8003172:	f003 f833 	bl	80061dc <HAL_I2C_GetState>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d121      	bne.n	80031c0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <I2Cx_Init+0x58>)
 800317e:	4a12      	ldr	r2, [pc, #72]	@ (80031c8 <I2Cx_Init+0x5c>)
 8003180:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <I2Cx_Init+0x58>)
 8003184:	4a11      	ldr	r2, [pc, #68]	@ (80031cc <I2Cx_Init+0x60>)
 8003186:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <I2Cx_Init+0x58>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <I2Cx_Init+0x58>)
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <I2Cx_Init+0x58>)
 8003196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800319a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800319c:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <I2Cx_Init+0x58>)
 800319e:	2200      	movs	r2, #0
 80031a0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80031a2:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <I2Cx_Init+0x58>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <I2Cx_Init+0x58>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <I2Cx_Init+0x58>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80031b4:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <I2Cx_Init+0x58>)
 80031b6:	f7ff ff63 	bl	8003080 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80031ba:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <I2Cx_Init+0x58>)
 80031bc:	f002 fb66 	bl	800588c <HAL_I2C_Init>
  }
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000468 	.word	0x20000468
 80031c8:	40005c00 	.word	0x40005c00
 80031cc:	000186a0 	.word	0x000186a0

080031d0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <I2Cx_ITConfig+0x58>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	4a12      	ldr	r2, [pc, #72]	@ (8003228 <I2Cx_ITConfig+0x58>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <I2Cx_ITConfig+0x58>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80031f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <I2Cx_ITConfig+0x5c>)
 8003202:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4809      	ldr	r0, [pc, #36]	@ (8003230 <I2Cx_ITConfig+0x60>)
 800320a:	f002 f95f 	bl	80054cc <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800320e:	2200      	movs	r2, #0
 8003210:	210f      	movs	r1, #15
 8003212:	2028      	movs	r0, #40	@ 0x28
 8003214:	f001 fccf 	bl	8004bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003218:	2028      	movs	r0, #40	@ 0x28
 800321a:	f001 fce8 	bl	8004bee <HAL_NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	10210000 	.word	0x10210000
 8003230:	40020000 	.word	0x40020000

08003234 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af04      	add	r7, sp, #16
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
 800323e:	460b      	mov	r3, r1
 8003240:	71bb      	strb	r3, [r7, #6]
 8003242:	4613      	mov	r3, r2
 8003244:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	b299      	uxth	r1, r3
 800324e:	79bb      	ldrb	r3, [r7, #6]
 8003250:	b29a      	uxth	r2, r3
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <I2Cx_WriteData+0x4c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	9302      	str	r3, [sp, #8]
 8003258:	2301      	movs	r3, #1
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	1d7b      	adds	r3, r7, #5
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2301      	movs	r3, #1
 8003262:	4808      	ldr	r0, [pc, #32]	@ (8003284 <I2Cx_WriteData+0x50>)
 8003264:	f002 fc9a 	bl	8005b9c <HAL_I2C_Mem_Write>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003272:	f000 f863 	bl	800333c <I2Cx_Error>
  }        
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000016c 	.word	0x2000016c
 8003284:	20000468 	.word	0x20000468

08003288 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af04      	add	r7, sp, #16
 800328e:	4603      	mov	r3, r0
 8003290:	460a      	mov	r2, r1
 8003292:	71fb      	strb	r3, [r7, #7]
 8003294:	4613      	mov	r3, r2
 8003296:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	b299      	uxth	r1, r3
 80032a4:	79bb      	ldrb	r3, [r7, #6]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <I2Cx_ReadData+0x50>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	2301      	movs	r3, #1
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f107 030e 	add.w	r3, r7, #14
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2301      	movs	r3, #1
 80032ba:	4808      	ldr	r0, [pc, #32]	@ (80032dc <I2Cx_ReadData+0x54>)
 80032bc:	f002 fd68 	bl	8005d90 <HAL_I2C_Mem_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80032ca:	f000 f837 	bl	800333c <I2Cx_Error>
  
  }
  return value;
 80032ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000016c 	.word	0x2000016c
 80032dc:	20000468 	.word	0x20000468

080032e0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	603a      	str	r2, [r7, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
 80032ee:	460b      	mov	r3, r1
 80032f0:	71bb      	strb	r3, [r7, #6]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	b299      	uxth	r1, r3
 80032fe:	79bb      	ldrb	r3, [r7, #6]
 8003300:	b29a      	uxth	r2, r3
 8003302:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <I2Cx_ReadBuffer+0x54>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	88bb      	ldrh	r3, [r7, #4]
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	4809      	ldr	r0, [pc, #36]	@ (8003338 <I2Cx_ReadBuffer+0x58>)
 8003314:	f002 fd3c 	bl	8005d90 <HAL_I2C_Mem_Read>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003322:	2300      	movs	r3, #0
 8003324:	e002      	b.n	800332c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003326:	f000 f809 	bl	800333c <I2Cx_Error>

    return 1;
 800332a:	2301      	movs	r3, #1
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	2000016c 	.word	0x2000016c
 8003338:	20000468 	.word	0x20000468

0800333c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <I2Cx_Error+0x14>)
 8003342:	f002 fbe7 	bl	8005b14 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003346:	f7ff ff11 	bl	800316c <I2Cx_Init>
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000468 	.word	0x20000468

08003354 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003358:	4819      	ldr	r0, [pc, #100]	@ (80033c0 <SPIx_Init+0x6c>)
 800335a:	f005 f9e0 	bl	800871e <HAL_SPI_GetState>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12b      	bne.n	80033bc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <SPIx_Init+0x6c>)
 8003366:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <SPIx_Init+0x70>)
 8003368:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <SPIx_Init+0x6c>)
 800336c:	2218      	movs	r2, #24
 800336e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <SPIx_Init+0x6c>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <SPIx_Init+0x6c>)
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <SPIx_Init+0x6c>)
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003382:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <SPIx_Init+0x6c>)
 8003384:	2200      	movs	r2, #0
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003388:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <SPIx_Init+0x6c>)
 800338a:	2207      	movs	r2, #7
 800338c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <SPIx_Init+0x6c>)
 8003390:	2200      	movs	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <SPIx_Init+0x6c>)
 8003396:	2200      	movs	r2, #0
 8003398:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <SPIx_Init+0x6c>)
 800339c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <SPIx_Init+0x6c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <SPIx_Init+0x6c>)
 80033aa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033ae:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80033b0:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <SPIx_Init+0x6c>)
 80033b2:	f000 f853 	bl	800345c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80033b6:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <SPIx_Init+0x6c>)
 80033b8:	f004 fc27 	bl	8007c0a <HAL_SPI_Init>
  } 
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200004bc 	.word	0x200004bc
 80033c4:	40015000 	.word	0x40015000

080033c8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <SPIx_Read+0x38>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f107 0108 	add.w	r1, r7, #8
 80033e2:	4808      	ldr	r0, [pc, #32]	@ (8003404 <SPIx_Read+0x3c>)
 80033e4:	f004 fe0e 	bl	8008004 <HAL_SPI_Receive>
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80033f2:	f000 f827 	bl	8003444 <SPIx_Error>
  }
  
  return readvalue;
 80033f6:	68bb      	ldr	r3, [r7, #8]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000170 	.word	0x20000170
 8003404:	200004bc 	.word	0x200004bc

08003408 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003416:	4b09      	ldr	r3, [pc, #36]	@ (800343c <SPIx_Write+0x34>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1db9      	adds	r1, r7, #6
 800341c:	2201      	movs	r2, #1
 800341e:	4808      	ldr	r0, [pc, #32]	@ (8003440 <SPIx_Write+0x38>)
 8003420:	f004 fc9a 	bl	8007d58 <HAL_SPI_Transmit>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800342e:	f000 f809 	bl	8003444 <SPIx_Error>
  }
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000170 	.word	0x20000170
 8003440:	200004bc 	.word	0x200004bc

08003444 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003448:	4803      	ldr	r0, [pc, #12]	@ (8003458 <SPIx_Error+0x14>)
 800344a:	f004 fc49 	bl	8007ce0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800344e:	f7ff ff81 	bl	8003354 <SPIx_Init>
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200004bc 	.word	0x200004bc

0800345c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <SPIx_MspInit+0x6c>)
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <SPIx_MspInit+0x6c>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003472:	6453      	str	r3, [r2, #68]	@ 0x44
 8003474:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <SPIx_MspInit+0x6c>)
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <SPIx_MspInit+0x6c>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <SPIx_MspInit+0x6c>)
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003490:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <SPIx_MspInit+0x6c>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800349c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80034a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80034aa:	2301      	movs	r3, #1
 80034ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80034ae:	2305      	movs	r3, #5
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4804      	ldr	r0, [pc, #16]	@ (80034cc <SPIx_MspInit+0x70>)
 80034ba:	f002 f807 	bl	80054cc <HAL_GPIO_Init>
}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40021400 	.word	0x40021400

080034d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80034d6:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <LCD_IO_Init+0xe0>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d164      	bne.n	80035a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80034de:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <LCD_IO_Init+0xe0>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	4b32      	ldr	r3, [pc, #200]	@ (80035b4 <LCD_IO_Init+0xe4>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	4a31      	ldr	r2, [pc, #196]	@ (80035b4 <LCD_IO_Init+0xe4>)
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f4:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <LCD_IO_Init+0xe4>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800350e:	2302      	movs	r3, #2
 8003510:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4619      	mov	r1, r3
 8003518:	4827      	ldr	r0, [pc, #156]	@ (80035b8 <LCD_IO_Init+0xe8>)
 800351a:	f001 ffd7 	bl	80054cc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <LCD_IO_Init+0xe4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a23      	ldr	r2, [pc, #140]	@ (80035b4 <LCD_IO_Init+0xe4>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <LCD_IO_Init+0xe4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800353a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800353e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	4619      	mov	r1, r3
 8003552:	4819      	ldr	r0, [pc, #100]	@ (80035b8 <LCD_IO_Init+0xe8>)
 8003554:	f001 ffba 	bl	80054cc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <LCD_IO_Init+0xe4>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <LCD_IO_Init+0xe4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6313      	str	r3, [r2, #48]	@ 0x30
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <LCD_IO_Init+0xe4>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003574:	2304      	movs	r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003580:	2302      	movs	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4619      	mov	r1, r3
 800358a:	480c      	ldr	r0, [pc, #48]	@ (80035bc <LCD_IO_Init+0xec>)
 800358c:	f001 ff9e 	bl	80054cc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003590:	2200      	movs	r2, #0
 8003592:	2104      	movs	r1, #4
 8003594:	4809      	ldr	r0, [pc, #36]	@ (80035bc <LCD_IO_Init+0xec>)
 8003596:	f002 f945 	bl	8005824 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800359a:	2201      	movs	r2, #1
 800359c:	2104      	movs	r1, #4
 800359e:	4807      	ldr	r0, [pc, #28]	@ (80035bc <LCD_IO_Init+0xec>)
 80035a0:	f002 f940 	bl	8005824 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80035a4:	f7ff fed6 	bl	8003354 <SPIx_Init>
  }
}
 80035a8:	bf00      	nop
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000514 	.word	0x20000514
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40020800 	.word	0x40020800

080035c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80035ca:	2201      	movs	r2, #1
 80035cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035d0:	480a      	ldr	r0, [pc, #40]	@ (80035fc <LCD_IO_WriteData+0x3c>)
 80035d2:	f002 f927 	bl	8005824 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80035d6:	2200      	movs	r2, #0
 80035d8:	2104      	movs	r1, #4
 80035da:	4809      	ldr	r0, [pc, #36]	@ (8003600 <LCD_IO_WriteData+0x40>)
 80035dc:	f002 f922 	bl	8005824 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff10 	bl	8003408 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80035e8:	2201      	movs	r2, #1
 80035ea:	2104      	movs	r1, #4
 80035ec:	4804      	ldr	r0, [pc, #16]	@ (8003600 <LCD_IO_WriteData+0x40>)
 80035ee:	f002 f919 	bl	8005824 <HAL_GPIO_WritePin>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40020800 	.word	0x40020800

08003604 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003614:	480a      	ldr	r0, [pc, #40]	@ (8003640 <LCD_IO_WriteReg+0x3c>)
 8003616:	f002 f905 	bl	8005824 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800361a:	2200      	movs	r2, #0
 800361c:	2104      	movs	r1, #4
 800361e:	4809      	ldr	r0, [pc, #36]	@ (8003644 <LCD_IO_WriteReg+0x40>)
 8003620:	f002 f900 	bl	8005824 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff feed 	bl	8003408 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800362e:	2201      	movs	r2, #1
 8003630:	2104      	movs	r1, #4
 8003632:	4804      	ldr	r0, [pc, #16]	@ (8003644 <LCD_IO_WriteReg+0x40>)
 8003634:	f002 f8f6 	bl	8005824 <HAL_GPIO_WritePin>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40020c00 	.word	0x40020c00
 8003644:	40020800 	.word	0x40020800

08003648 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	460a      	mov	r2, r1
 8003652:	80fb      	strh	r3, [r7, #6]
 8003654:	4613      	mov	r3, r2
 8003656:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800365c:	2200      	movs	r2, #0
 800365e:	2104      	movs	r1, #4
 8003660:	4810      	ldr	r0, [pc, #64]	@ (80036a4 <LCD_IO_ReadData+0x5c>)
 8003662:	f002 f8df 	bl	8005824 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003666:	2200      	movs	r2, #0
 8003668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800366c:	480e      	ldr	r0, [pc, #56]	@ (80036a8 <LCD_IO_ReadData+0x60>)
 800366e:	f002 f8d9 	bl	8005824 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fec7 	bl	8003408 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800367a:	797b      	ldrb	r3, [r7, #5]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fea3 	bl	80033c8 <SPIx_Read>
 8003682:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800368a:	4807      	ldr	r0, [pc, #28]	@ (80036a8 <LCD_IO_ReadData+0x60>)
 800368c:	f002 f8ca 	bl	8005824 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003690:	2201      	movs	r2, #1
 8003692:	2104      	movs	r1, #4
 8003694:	4803      	ldr	r0, [pc, #12]	@ (80036a4 <LCD_IO_ReadData+0x5c>)
 8003696:	f002 f8c5 	bl	8005824 <HAL_GPIO_WritePin>
  
  return readvalue;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00

080036ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f001 f97f 	bl	80049b8 <HAL_Delay>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80036c6:	f7ff fd51 	bl	800316c <I2Cx_Init>
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}

080036ce <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80036d2:	f7ff fd7d 	bl	80031d0 <I2Cx_ITConfig>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}

080036da <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	460b      	mov	r3, r1
 80036e6:	71bb      	strb	r3, [r7, #6]
 80036e8:	4613      	mov	r3, r2
 80036ea:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80036ec:	797a      	ldrb	r2, [r7, #5]
 80036ee:	79b9      	ldrb	r1, [r7, #6]
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd9e 	bl	8003234 <I2Cx_WriteData>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	460a      	mov	r2, r1
 800370a:	71fb      	strb	r3, [r7, #7]
 800370c:	4613      	mov	r3, r2
 800370e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003710:	79ba      	ldrb	r2, [r7, #6]
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fdb6 	bl	8003288 <I2Cx_ReadData>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	603a      	str	r2, [r7, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	460b      	mov	r3, r1
 8003736:	71bb      	strb	r3, [r7, #6]
 8003738:	4613      	mov	r3, r2
 800373a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800373c:	88bb      	ldrh	r3, [r7, #4]
 800373e:	79b9      	ldrb	r1, [r7, #6]
 8003740:	79f8      	ldrb	r0, [r7, #7]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	f7ff fdcc 	bl	80032e0 <I2Cx_ReadBuffer>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f001 f92c 	bl	80049b8 <HAL_Delay>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	flippedLcd = true;
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <BSP_LCD_Init_Flipped+0x14>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8003772:	f000 f805 	bl	8003780 <BSP_LCD_Init>
 8003776:	4603      	mov	r3, r0
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000650 	.word	0x20000650

08003780 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003784:	4b2d      	ldr	r3, [pc, #180]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003786:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <BSP_LCD_Init+0xc0>)
 8003788:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <BSP_LCD_Init+0xbc>)
 800378c:	2209      	movs	r2, #9
 800378e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003790:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003792:	2201      	movs	r2, #1
 8003794:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003796:	4b29      	ldr	r3, [pc, #164]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003798:	221d      	movs	r2, #29
 800379a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800379c:	4b27      	ldr	r3, [pc, #156]	@ (800383c <BSP_LCD_Init+0xbc>)
 800379e:	2203      	movs	r2, #3
 80037a0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037a4:	f240 120d 	movw	r2, #269	@ 0x10d
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80037aa:	4b24      	ldr	r3, [pc, #144]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037ac:	f240 1243 	movw	r2, #323	@ 0x143
 80037b0:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80037b2:	4b22      	ldr	r3, [pc, #136]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037b4:	f240 1217 	movw	r2, #279	@ 0x117
 80037b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037bc:	f240 1247 	movw	r2, #327	@ 0x147
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80037c2:	4b1e      	ldr	r3, [pc, #120]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80037ca:	4b1c      	ldr	r3, [pc, #112]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80037d2:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037da:	4b1a      	ldr	r3, [pc, #104]	@ (8003844 <BSP_LCD_Init+0xc4>)
 80037dc:	2208      	movs	r2, #8
 80037de:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80037e0:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <BSP_LCD_Init+0xc4>)
 80037e2:	22c0      	movs	r2, #192	@ 0xc0
 80037e4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80037e6:	4b17      	ldr	r3, [pc, #92]	@ (8003844 <BSP_LCD_Init+0xc4>)
 80037e8:	2204      	movs	r2, #4
 80037ea:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80037ec:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <BSP_LCD_Init+0xc4>)
 80037ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80037f4:	4813      	ldr	r0, [pc, #76]	@ (8003844 <BSP_LCD_Init+0xc4>)
 80037f6:	f003 ffbf 	bl	8007778 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <BSP_LCD_Init+0xbc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <BSP_LCD_Init+0xbc>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003812:	f000 fb7d 	bl	8003f10 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003816:	4809      	ldr	r0, [pc, #36]	@ (800383c <BSP_LCD_Init+0xbc>)
 8003818:	f003 f846 	bl	80068a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800381c:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <BSP_LCD_Init+0xc8>)
 800381e:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <BSP_LCD_Init+0xcc>)
 8003820:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003822:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <BSP_LCD_Init+0xc8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800382a:	f000 fd85 	bl	8004338 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800382e:	4808      	ldr	r0, [pc, #32]	@ (8003850 <BSP_LCD_Init+0xd0>)
 8003830:	f000 f8ce 	bl	80039d0 <BSP_LCD_SetFont>

  return LCD_OK;
 8003834:	2300      	movs	r3, #0
}  
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000518 	.word	0x20000518
 8003840:	40016800 	.word	0x40016800
 8003844:	20000600 	.word	0x20000600
 8003848:	2000064c 	.word	0x2000064c
 800384c:	20000104 	.word	0x20000104
 8003850:	20000174 	.word	0x20000174

08003854 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <BSP_LCD_GetXSize+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	4798      	blx	r3
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000064c 	.word	0x2000064c

0800386c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <BSP_LCD_GetYSize+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	4798      	blx	r3
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000064c 	.word	0x2000064c

08003884 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003884:	b580      	push	{r7, lr}
 8003886:	b090      	sub	sp, #64	@ 0x40
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003894:	f7ff ffde 	bl	8003854 <BSP_LCD_GetXSize>
 8003898:	4603      	mov	r3, r0
 800389a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80038a0:	f7ff ffe4 	bl	800386c <BSP_LCD_GetYSize>
 80038a4:	4603      	mov	r3, r0
 80038a6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80038b0:	23ff      	movs	r3, #255	@ 0xff
 80038b2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80038ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80038d0:	2307      	movs	r3, #7
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80038d4:	f7ff ffbe 	bl	8003854 <BSP_LCD_GetXSize>
 80038d8:	4603      	mov	r3, r0
 80038da:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80038dc:	f7ff ffc6 	bl	800386c <BSP_LCD_GetYSize>
 80038e0:	4603      	mov	r3, r0
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	4619      	mov	r1, r3
 80038ec:	4814      	ldr	r0, [pc, #80]	@ (8003940 <BSP_LCD_LayerDefaultInit+0xbc>)
 80038ee:	f003 f8b5 	bl	8006a5c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	4913      	ldr	r1, [pc, #76]	@ (8003944 <BSP_LCD_LayerDefaultInit+0xc0>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3304      	adds	r3, #4
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	490e      	ldr	r1, [pc, #56]	@ (8003944 <BSP_LCD_LayerDefaultInit+0xc0>)
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3308      	adds	r3, #8
 8003918:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <BSP_LCD_LayerDefaultInit+0xc4>)
 800391a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	4909      	ldr	r1, [pc, #36]	@ (8003944 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800392e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003930:	4803      	ldr	r0, [pc, #12]	@ (8003940 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003932:	f003 f8d1 	bl	8006ad8 <HAL_LTDC_EnableDither>
}
 8003936:	bf00      	nop
 8003938:	3740      	adds	r7, #64	@ 0x40
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000518 	.word	0x20000518
 8003944:	20000634 	.word	0x20000634
 8003948:	20000174 	.word	0x20000174

0800394c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003954:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <BSP_LCD_SelectLayer+0x1c>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000630 	.word	0x20000630

0800396c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <BSP_LCD_SetTextColor+0x28>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4907      	ldr	r1, [pc, #28]	@ (8003998 <BSP_LCD_SetTextColor+0x2c>)
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000630 	.word	0x20000630
 8003998:	20000634 	.word	0x20000634

0800399c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80039a4:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <BSP_LCD_SetBackColor+0x2c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4908      	ldr	r1, [pc, #32]	@ (80039cc <BSP_LCD_SetBackColor+0x30>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3304      	adds	r3, #4
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000630 	.word	0x20000630
 80039cc:	20000634 	.word	0x20000634

080039d0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <BSP_LCD_SetFont+0x2c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4908      	ldr	r1, [pc, #32]	@ (8003a00 <BSP_LCD_SetFont+0x30>)
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3308      	adds	r3, #8
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000630 	.word	0x20000630
 8003a00:	20000634 	.word	0x20000634

08003a04 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <BSP_LCD_Clear+0x48>)
 8003a0e:	681c      	ldr	r4, [r3, #0]
 8003a10:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <BSP_LCD_Clear+0x48>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0e      	ldr	r2, [pc, #56]	@ (8003a50 <BSP_LCD_Clear+0x4c>)
 8003a16:	2134      	movs	r1, #52	@ 0x34
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	335c      	adds	r3, #92	@ 0x5c
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461e      	mov	r6, r3
 8003a24:	f7ff ff16 	bl	8003854 <BSP_LCD_GetXSize>
 8003a28:	4605      	mov	r5, r0
 8003a2a:	f7ff ff1f 	bl	800386c <BSP_LCD_GetYSize>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f000 fc42 	bl	80042c8 <FillBuffer>
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4c:	20000630 	.word	0x20000630
 8003a50:	20000518 	.word	0x20000518

08003a54 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	80bb      	strh	r3, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <BSP_LCD_DisplayChar+0x80>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	491b      	ldr	r1, [pc, #108]	@ (8003ad8 <BSP_LCD_DisplayChar+0x84>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3308      	adds	r3, #8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a82:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <BSP_LCD_DisplayChar+0x80>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4c14      	ldr	r4, [pc, #80]	@ (8003ad8 <BSP_LCD_DisplayChar+0x84>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4423      	add	r3, r4
 8003a92:	3308      	adds	r3, #8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a98:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <BSP_LCD_DisplayChar+0x80>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad8 <BSP_LCD_DisplayChar+0x84>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4423      	add	r3, r4
 8003aac:	3308      	adds	r3, #8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	889b      	ldrh	r3, [r3, #4]
 8003ab2:	3307      	adds	r3, #7
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	da00      	bge.n	8003aba <BSP_LCD_DisplayChar+0x66>
 8003ab8:	3307      	adds	r3, #7
 8003aba:	10db      	asrs	r3, r3, #3
 8003abc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ac0:	18ca      	adds	r2, r1, r3
 8003ac2:	88b9      	ldrh	r1, [r7, #4]
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb44 	bl	8004154 <DrawChar>
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd90      	pop	{r4, r7, pc}
 8003ad4:	20000630 	.word	0x20000630
 8003ad8:	20000634 	.word	0x20000634

08003adc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60ba      	str	r2, [r7, #8]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	81fb      	strh	r3, [r7, #14]
 8003aea:	460b      	mov	r3, r1
 8003aec:	81bb      	strh	r3, [r7, #12]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003af2:	2301      	movs	r3, #1
 8003af4:	83fb      	strh	r3, [r7, #30]
 8003af6:	2300      	movs	r3, #0
 8003af8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003b06:	e002      	b.n	8003b0e <BSP_LCD_DisplayStringAt+0x32>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	617a      	str	r2, [r7, #20]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f6      	bne.n	8003b08 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003b1a:	f7ff fe9b 	bl	8003854 <BSP_LCD_GetXSize>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	484b      	ldr	r0, [pc, #300]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3308      	adds	r3, #8
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d01c      	beq.n	8003b7c <BSP_LCD_DisplayStringAt+0xa0>
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	dc33      	bgt.n	8003bae <BSP_LCD_DisplayStringAt+0xd2>
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d002      	beq.n	8003b50 <BSP_LCD_DisplayStringAt+0x74>
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d019      	beq.n	8003b82 <BSP_LCD_DisplayStringAt+0xa6>
 8003b4e:	e02e      	b.n	8003bae <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad1      	subs	r1, r2, r3
 8003b56:	4b3e      	ldr	r3, [pc, #248]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	483e      	ldr	r0, [pc, #248]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4403      	add	r3, r0
 8003b66:	3308      	adds	r3, #8
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	89fb      	ldrh	r3, [r7, #14]
 8003b76:	4413      	add	r3, r2
 8003b78:	83fb      	strh	r3, [r7, #30]
      break;
 8003b7a:	e01b      	b.n	8003bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	83fb      	strh	r3, [r7, #30]
      break;
 8003b80:	e018      	b.n	8003bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4831      	ldr	r0, [pc, #196]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4403      	add	r3, r0
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	889b      	ldrh	r3, [r3, #4]
 8003ba0:	fb11 f303 	smulbb	r3, r1, r3
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4413      	add	r3, r2
 8003baa:	83fb      	strh	r3, [r7, #30]
      break;
 8003bac:	e002      	b.n	8003bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	83fb      	strh	r3, [r7, #30]
      break;
 8003bb2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003bb4:	e01a      	b.n	8003bec <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	89b9      	ldrh	r1, [r7, #12]
 8003bbc:	8bfb      	ldrh	r3, [r7, #30]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff48 	bl	8003a54 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4922      	ldr	r1, [pc, #136]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	889a      	ldrh	r2, [r3, #4]
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
 8003bdc:	4413      	add	r3, r2
 8003bde:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
    i++;
 8003be6:	8bbb      	ldrh	r3, [r7, #28]
 8003be8:	3301      	adds	r3, #1
 8003bea:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2dc      	uxtb	r4, r3
 8003bfa:	f7ff fe2b 	bl	8003854 <BSP_LCD_GetXSize>
 8003bfe:	8bb9      	ldrh	r1, [r7, #28]
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4d13      	ldr	r5, [pc, #76]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	442b      	add	r3, r5
 8003c10:	3308      	adds	r3, #8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	1ac3      	subs	r3, r0, r3
 8003c1c:	b299      	uxth	r1, r3
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <BSP_LCD_DisplayStringAt+0x174>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	480c      	ldr	r0, [pc, #48]	@ (8003c54 <BSP_LCD_DisplayStringAt+0x178>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4403      	add	r3, r0
 8003c2e:	3308      	adds	r3, #8
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	889b      	ldrh	r3, [r3, #4]
 8003c34:	4299      	cmp	r1, r3
 8003c36:	bf2c      	ite	cs
 8003c38:	2301      	movcs	r3, #1
 8003c3a:	2300      	movcc	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	4023      	ands	r3, r4
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1b7      	bne.n	8003bb6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c50:	20000630 	.word	0x20000630
 8003c54:	20000634 	.word	0x20000634

08003c58 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b08b      	sub	sp, #44	@ 0x2c
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	80fb      	strh	r3, [r7, #6]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80bb      	strh	r3, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	807b      	strh	r3, [r7, #2]
 8003c72:	4613      	mov	r3, r2
 8003c74:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003c76:	2300      	movs	r3, #0
 8003c78:	823b      	strh	r3, [r7, #16]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	81fb      	strh	r3, [r7, #14]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003c82:	2300      	movs	r3, #0
 8003c84:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003c86:	2300      	movs	r3, #0
 8003c88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003c8e:	2300      	movs	r3, #0
 8003c90:	83fb      	strh	r3, [r7, #30]
 8003c92:	2300      	movs	r3, #0
 8003c94:	83bb      	strh	r3, [r7, #28]
 8003c96:	2300      	movs	r3, #0
 8003c98:	837b      	strh	r3, [r7, #26]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	833b      	strh	r3, [r7, #24]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	82fb      	strh	r3, [r7, #22]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bfb8      	it	lt
 8003cb4:	425b      	neglt	r3, r3
 8003cb6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003cb8:	883a      	ldrh	r2, [r7, #0]
 8003cba:	88bb      	ldrh	r3, [r7, #4]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfb8      	it	lt
 8003cc2:	425b      	neglt	r3, r3
 8003cc4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003cca:	88bb      	ldrh	r3, [r7, #4]
 8003ccc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d304      	bcc.n	8003ce0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	843b      	strh	r3, [r7, #32]
 8003cde:	e005      	b.n	8003cec <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003ce0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ce4:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8003ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cea:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003cec:	883a      	ldrh	r2, [r7, #0]
 8003cee:	88bb      	ldrh	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d304      	bcc.n	8003cfe <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	83bb      	strh	r3, [r7, #28]
 8003cfc:	e005      	b.n	8003d0a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003cfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d02:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d08:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003d0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	db10      	blt.n	8003d38 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003d16:	2300      	movs	r3, #0
 8003d18:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003d1e:	8a3b      	ldrh	r3, [r7, #16]
 8003d20:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d26:	0fda      	lsrs	r2, r3, #31
 8003d28:	4413      	add	r3, r2
 8003d2a:	105b      	asrs	r3, r3, #1
 8003d2c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003d32:	8a3b      	ldrh	r3, [r7, #16]
 8003d34:	82bb      	strh	r3, [r7, #20]
 8003d36:	e00f      	b.n	8003d58 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d48:	0fda      	lsrs	r2, r3, #31
 8003d4a:	4413      	add	r3, r2
 8003d4c:	105b      	asrs	r3, r3, #1
 8003d4e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003d50:	8a3b      	ldrh	r3, [r7, #16]
 8003d52:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	827b      	strh	r3, [r7, #18]
 8003d5c:	e037      	b.n	8003dce <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003d5e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8003d60:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003d62:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <BSP_LCD_DrawLine+0x18c>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4c20      	ldr	r4, [pc, #128]	@ (8003de8 <BSP_LCD_DrawLine+0x190>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4423      	add	r3, r4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f000 f9a1 	bl	80040bc <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003d7a:	8b3a      	ldrh	r2, [r7, #24]
 8003d7c:	8afb      	ldrh	r3, [r7, #22]
 8003d7e:	4413      	add	r3, r2
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003d84:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003d88:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	db0e      	blt.n	8003dae <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003d90:	8b3a      	ldrh	r2, [r7, #24]
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003d9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003d9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d9e:	4413      	add	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003da4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003da6:	8bfb      	ldrh	r3, [r7, #30]
 8003da8:	4413      	add	r3, r2
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003dae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003db0:	8c3b      	ldrh	r3, [r7, #32]
 8003db2:	4413      	add	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003db8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dba:	8bbb      	ldrh	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003dc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	827b      	strh	r3, [r7, #18]
 8003dce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003dd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	ddc1      	ble.n	8003d5e <BSP_LCD_DrawLine+0x106>
  }
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	372c      	adds	r7, #44	@ 0x2c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}
 8003de4:	20000630 	.word	0x20000630
 8003de8:	20000634 	.word	0x20000634

08003dec <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	4604      	mov	r4, r0
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	80fb      	strh	r3, [r7, #6]
 8003e00:	4603      	mov	r3, r0
 8003e02:	80bb      	strh	r3, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e10:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <BSP_LCD_FillRect+0xf4>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4933      	ldr	r1, [pc, #204]	@ (8003ee4 <BSP_LCD_FillRect+0xf8>)
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fda2 	bl	800396c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003e28:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <BSP_LCD_FillRect+0xfc>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d022      	beq.n	8003e76 <BSP_LCD_FillRect+0x8a>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +BSP_LCD_GetXSize()*BSP_LCD_GetYSize()); //Rotate by 180°
 8003e30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <BSP_LCD_FillRect+0xf4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	@ (8003eec <BSP_LCD_FillRect+0x100>)
 8003e36:	2134      	movs	r1, #52	@ 0x34
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	335c      	adds	r3, #92	@ 0x5c
 8003e40:	681c      	ldr	r4, [r3, #0]
 8003e42:	f7ff fd07 	bl	8003854 <BSP_LCD_GetXSize>
 8003e46:	4603      	mov	r3, r0
 8003e48:	425b      	negs	r3, r3
 8003e4a:	88b9      	ldrh	r1, [r7, #4]
 8003e4c:	883a      	ldrh	r2, [r7, #0]
 8003e4e:	440a      	add	r2, r1
 8003e50:	fb02 f503 	mul.w	r5, r2, r3
 8003e54:	f7ff fcfe 	bl	8003854 <BSP_LCD_GetXSize>
 8003e58:	4606      	mov	r6, r0
 8003e5a:	f7ff fd07 	bl	800386c <BSP_LCD_GetYSize>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	fb06 f303 	mul.w	r3, r6, r3
 8003e64:	442b      	add	r3, r5
 8003e66:	88f9      	ldrh	r1, [r7, #6]
 8003e68:	887a      	ldrh	r2, [r7, #2]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4423      	add	r3, r4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e013      	b.n	8003e9e <BSP_LCD_FillRect+0xb2>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <BSP_LCD_FillRect+0xf4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <BSP_LCD_FillRect+0x100>)
 8003e7c:	2134      	movs	r1, #52	@ 0x34
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	335c      	adds	r3, #92	@ 0x5c
 8003e86:	681c      	ldr	r4, [r3, #0]
 8003e88:	f7ff fce4 	bl	8003854 <BSP_LCD_GetXSize>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	88bb      	ldrh	r3, [r7, #4]
 8003e90:	fb03 f202 	mul.w	r2, r3, r2
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4423      	add	r3, r4
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <BSP_LCD_FillRect+0xf4>)
 8003ea0:	681c      	ldr	r4, [r3, #0]
 8003ea2:	68fd      	ldr	r5, [r7, #12]
 8003ea4:	887e      	ldrh	r6, [r7, #2]
 8003ea6:	f8b7 8000 	ldrh.w	r8, [r7]
 8003eaa:	f7ff fcd3 	bl	8003854 <BSP_LCD_GetXSize>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	1ad1      	subs	r1, r2, r3
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <BSP_LCD_FillRect+0xf4>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	480a      	ldr	r0, [pc, #40]	@ (8003ee4 <BSP_LCD_FillRect+0xf8>)
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4403      	add	r3, r0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	9100      	str	r1, [sp, #0]
 8003eca:	4643      	mov	r3, r8
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 f9f9 	bl	80042c8 <FillBuffer>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee0:	20000630 	.word	0x20000630
 8003ee4:	20000634 	.word	0x20000634
 8003ee8:	20000650 	.word	0x20000650
 8003eec:	20000518 	.word	0x20000518

08003ef0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <BSP_LCD_DisplayOn+0x1c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003efe:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <BSP_LCD_DisplayOn+0x1c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4798      	blx	r3
  }
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000064c 	.word	0x2000064c

08003f10 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	@ 0x38
 8003f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	4b61      	ldr	r3, [pc, #388]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	4a60      	ldr	r2, [pc, #384]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f26:	4b5e      	ldr	r3, [pc, #376]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	4b5a      	ldr	r3, [pc, #360]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	4a59      	ldr	r2, [pc, #356]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f42:	4b57      	ldr	r3, [pc, #348]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	4b53      	ldr	r3, [pc, #332]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a52      	ldr	r2, [pc, #328]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b50      	ldr	r3, [pc, #320]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4a4b      	ldr	r2, [pc, #300]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7a:	4b49      	ldr	r3, [pc, #292]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	4b45      	ldr	r3, [pc, #276]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	4a44      	ldr	r2, [pc, #272]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f96:	4b42      	ldr	r3, [pc, #264]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	4a3d      	ldr	r2, [pc, #244]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b37      	ldr	r3, [pc, #220]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a36      	ldr	r2, [pc, #216]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fc8:	f043 0320 	orr.w	r3, r3, #32
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	4b30      	ldr	r3, [pc, #192]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <BSP_LCD_MspInit+0x190>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003ff6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004004:	2302      	movs	r3, #2
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004008:	230e      	movs	r3, #14
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800400c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004010:	4619      	mov	r1, r3
 8004012:	4824      	ldr	r0, [pc, #144]	@ (80040a4 <BSP_LCD_MspInit+0x194>)
 8004014:	f001 fa5a 	bl	80054cc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004018:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800401e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004022:	4619      	mov	r1, r3
 8004024:	4820      	ldr	r0, [pc, #128]	@ (80040a8 <BSP_LCD_MspInit+0x198>)
 8004026:	f001 fa51 	bl	80054cc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800402a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004034:	4619      	mov	r1, r3
 8004036:	481d      	ldr	r0, [pc, #116]	@ (80040ac <BSP_LCD_MspInit+0x19c>)
 8004038:	f001 fa48 	bl	80054cc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800403c:	2348      	movs	r3, #72	@ 0x48
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	481a      	ldr	r0, [pc, #104]	@ (80040b0 <BSP_LCD_MspInit+0x1a0>)
 8004048:	f001 fa40 	bl	80054cc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800404c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004056:	4619      	mov	r1, r3
 8004058:	4816      	ldr	r0, [pc, #88]	@ (80040b4 <BSP_LCD_MspInit+0x1a4>)
 800405a:	f001 fa37 	bl	80054cc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800405e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004068:	4619      	mov	r1, r3
 800406a:	4813      	ldr	r0, [pc, #76]	@ (80040b8 <BSP_LCD_MspInit+0x1a8>)
 800406c:	f001 fa2e 	bl	80054cc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004070:	2303      	movs	r3, #3
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004074:	2309      	movs	r3, #9
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800407c:	4619      	mov	r1, r3
 800407e:	480a      	ldr	r0, [pc, #40]	@ (80040a8 <BSP_LCD_MspInit+0x198>)
 8004080:	f001 fa24 	bl	80054cc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004084:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800408a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800408e:	4619      	mov	r1, r3
 8004090:	4809      	ldr	r0, [pc, #36]	@ (80040b8 <BSP_LCD_MspInit+0x1a8>)
 8004092:	f001 fa1b 	bl	80054cc <HAL_GPIO_Init>
}
 8004096:	bf00      	nop
 8004098:	3738      	adds	r7, #56	@ 0x38
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020c00 	.word	0x40020c00
 80040b4:	40021400 	.word	0x40021400
 80040b8:	40021800 	.word	0x40021800

080040bc <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	80fb      	strh	r3, [r7, #6]
 80040c8:	460b      	mov	r3, r1
 80040ca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <BSP_LCD_DrawPixel+0x8c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01f      	beq.n	8004114 <BSP_LCD_DrawPixel+0x58>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (BSP_LCD_GetXSize()*BSP_LCD_GetYSize() - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80040d4:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <BSP_LCD_DrawPixel+0x90>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <BSP_LCD_DrawPixel+0x94>)
 80040da:	2134      	movs	r1, #52	@ 0x34
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	335c      	adds	r3, #92	@ 0x5c
 80040e4:	681c      	ldr	r4, [r3, #0]
 80040e6:	f7ff fbb5 	bl	8003854 <BSP_LCD_GetXSize>
 80040ea:	4605      	mov	r5, r0
 80040ec:	f7ff fbbe 	bl	800386c <BSP_LCD_GetYSize>
 80040f0:	4603      	mov	r3, r0
 80040f2:	fb03 f205 	mul.w	r2, r3, r5
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	1ad5      	subs	r5, r2, r3
 80040fa:	f7ff fbab 	bl	8003854 <BSP_LCD_GetXSize>
 80040fe:	4602      	mov	r2, r0
 8004100:	88bb      	ldrh	r3, [r7, #4]
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	1aeb      	subs	r3, r5, r3
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4423      	add	r3, r4
 800410c:	461a      	mov	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004112:	e015      	b.n	8004140 <BSP_LCD_DrawPixel+0x84>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004114:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <BSP_LCD_DrawPixel+0x90>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <BSP_LCD_DrawPixel+0x94>)
 800411a:	2134      	movs	r1, #52	@ 0x34
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	335c      	adds	r3, #92	@ 0x5c
 8004124:	681c      	ldr	r4, [r3, #0]
 8004126:	88bd      	ldrh	r5, [r7, #4]
 8004128:	f7ff fb94 	bl	8003854 <BSP_LCD_GetXSize>
 800412c:	4603      	mov	r3, r0
 800412e:	fb03 f205 	mul.w	r2, r3, r5
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4423      	add	r3, r4
 800413a:	461a      	mov	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bdb0      	pop	{r4, r5, r7, pc}
 8004148:	20000650 	.word	0x20000650
 800414c:	20000630 	.word	0x20000630
 8004150:	20000518 	.word	0x20000518

08004154 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	603a      	str	r2, [r7, #0]
 800415e:	80fb      	strh	r3, [r7, #6]
 8004160:	460b      	mov	r3, r1
 8004162:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004170:	4b53      	ldr	r3, [pc, #332]	@ (80042c0 <DrawChar+0x16c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4953      	ldr	r1, [pc, #332]	@ (80042c4 <DrawChar+0x170>)
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3308      	adds	r3, #8
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	88db      	ldrh	r3, [r3, #6]
 8004186:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004188:	4b4d      	ldr	r3, [pc, #308]	@ (80042c0 <DrawChar+0x16c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	494d      	ldr	r1, [pc, #308]	@ (80042c4 <DrawChar+0x170>)
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3308      	adds	r3, #8
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	889b      	ldrh	r3, [r3, #4]
 800419e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80041a0:	8a3b      	ldrh	r3, [r7, #16]
 80041a2:	3307      	adds	r3, #7
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da00      	bge.n	80041aa <DrawChar+0x56>
 80041a8:	3307      	adds	r3, #7
 80041aa:	10db      	asrs	r3, r3, #3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	8a3b      	ldrh	r3, [r7, #16]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e076      	b.n	80042ae <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80041c0:	8a3b      	ldrh	r3, [r7, #16]
 80041c2:	3307      	adds	r3, #7
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da00      	bge.n	80041ca <DrawChar+0x76>
 80041c8:	3307      	adds	r3, #7
 80041ca:	10db      	asrs	r3, r3, #3
 80041cc:	461a      	mov	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80041da:	8a3b      	ldrh	r3, [r7, #16]
 80041dc:	3307      	adds	r3, #7
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da00      	bge.n	80041e4 <DrawChar+0x90>
 80041e2:	3307      	adds	r3, #7
 80041e4:	10db      	asrs	r3, r3, #3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d002      	beq.n	80041f0 <DrawChar+0x9c>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d004      	beq.n	80041f8 <DrawChar+0xa4>
 80041ee:	e00c      	b.n	800420a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	617b      	str	r3, [r7, #20]
      break;
 80041f6:	e016      	b.n	8004226 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	3201      	adds	r2, #1
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
      break;
 8004208:	e00d      	b.n	8004226 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	041a      	lsls	r2, r3, #16
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3301      	adds	r3, #1
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4313      	orrs	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	3202      	adds	r2, #2
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
      break;
 8004224:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e036      	b.n	800429a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800422c:	8a3a      	ldrh	r2, [r7, #16]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1ad2      	subs	r2, r2, r3
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	4413      	add	r3, r2
 8004236:	3b01      	subs	r3, #1
 8004238:	2201      	movs	r2, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	461a      	mov	r2, r3
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d012      	beq.n	800426e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	b29a      	uxth	r2, r3
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	4413      	add	r3, r2
 8004250:	b298      	uxth	r0, r3
 8004252:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <DrawChar+0x16c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	491b      	ldr	r1, [pc, #108]	@ (80042c4 <DrawChar+0x170>)
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	88bb      	ldrh	r3, [r7, #4]
 8004266:	4619      	mov	r1, r3
 8004268:	f7ff ff28 	bl	80040bc <BSP_LCD_DrawPixel>
 800426c:	e012      	b.n	8004294 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	b29a      	uxth	r2, r3
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4413      	add	r3, r2
 8004276:	b298      	uxth	r0, r3
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <DrawChar+0x16c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4911      	ldr	r1, [pc, #68]	@ (80042c4 <DrawChar+0x170>)
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3304      	adds	r3, #4
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	88bb      	ldrh	r3, [r7, #4]
 800428e:	4619      	mov	r1, r3
 8004290:	f7ff ff14 	bl	80040bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3301      	adds	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	8a3b      	ldrh	r3, [r7, #16]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d3c4      	bcc.n	800422c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80042a2:	88bb      	ldrh	r3, [r7, #4]
 80042a4:	3301      	adds	r3, #1
 80042a6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	8a7b      	ldrh	r3, [r7, #18]
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d384      	bcc.n	80041c0 <DrawChar+0x6c>
  }
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000630 	.word	0x20000630
 80042c4:	20000634 	.word	0x20000634

080042c8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80042d6:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <FillBuffer+0x68>)
 80042d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042dc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80042de:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <FillBuffer+0x68>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80042e4:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <FillBuffer+0x68>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80042ea:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <FillBuffer+0x68>)
 80042ec:	4a11      	ldr	r2, [pc, #68]	@ (8004334 <FillBuffer+0x6c>)
 80042ee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80042f0:	480f      	ldr	r0, [pc, #60]	@ (8004330 <FillBuffer+0x68>)
 80042f2:	f000 fe55 	bl	8004fa0 <HAL_DMA2D_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d115      	bne.n	8004328 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	480c      	ldr	r0, [pc, #48]	@ (8004330 <FillBuffer+0x68>)
 8004300:	f000 ffb6 	bl	8005270 <HAL_DMA2D_ConfigLayer>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10e      	bne.n	8004328 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	4806      	ldr	r0, [pc, #24]	@ (8004330 <FillBuffer+0x68>)
 8004316:	f000 fe96 	bl	8005046 <HAL_DMA2D_Start>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004320:	210a      	movs	r1, #10
 8004322:	4803      	ldr	r0, [pc, #12]	@ (8004330 <FillBuffer+0x68>)
 8004324:	f000 feba 	bl	800509c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200005c0 	.word	0x200005c0
 8004334:	4002b000 	.word	0x4002b000

08004338 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800433c:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 800433e:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <BSP_SDRAM_Init+0xb0>)
 8004340:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004342:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 8004344:	2202      	movs	r2, #2
 8004346:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004348:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 800434a:	2207      	movs	r2, #7
 800434c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800434e:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 8004350:	2204      	movs	r2, #4
 8004352:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 8004356:	2207      	movs	r2, #7
 8004358:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800435a:	4b24      	ldr	r3, [pc, #144]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 800435c:	2202      	movs	r2, #2
 800435e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004360:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 8004362:	2202      	movs	r2, #2
 8004364:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004366:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 8004368:	2202      	movs	r2, #2
 800436a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 800436e:	2201      	movs	r2, #1
 8004370:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004372:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004378:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 800437a:	2204      	movs	r2, #4
 800437c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800437e:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 8004380:	2210      	movs	r2, #16
 8004382:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800438a:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 800438c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004390:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004398:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 800439a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800439e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 80043a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80043ae:	2100      	movs	r1, #0
 80043b0:	480c      	ldr	r0, [pc, #48]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 80043b2:	f000 f87f 	bl	80044b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80043b6:	490d      	ldr	r1, [pc, #52]	@ (80043ec <BSP_SDRAM_Init+0xb4>)
 80043b8:	480a      	ldr	r0, [pc, #40]	@ (80043e4 <BSP_SDRAM_Init+0xac>)
 80043ba:	f003 fb9d 	bl	8007af8 <HAL_SDRAM_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <BSP_SDRAM_Init+0xb8>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e002      	b.n	80043d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <BSP_SDRAM_Init+0xb8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80043d2:	f240 506a 	movw	r0, #1386	@ 0x56a
 80043d6:	f000 f80d 	bl	80043f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <BSP_SDRAM_Init+0xb8>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000654 	.word	0x20000654
 80043e8:	a0000140 	.word	0xa0000140
 80043ec:	20000688 	.word	0x20000688
 80043f0:	2000018c 	.word	0x2000018c

080043f4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004400:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004406:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004408:	2208      	movs	r2, #8
 800440a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800440c:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800440e:	2201      	movs	r2, #1
 8004410:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004412:	4b26      	ldr	r3, [pc, #152]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004414:	2200      	movs	r2, #0
 8004416:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800441c:	4923      	ldr	r1, [pc, #140]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800441e:	4824      	ldr	r0, [pc, #144]	@ (80044b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004420:	f003 fba8 	bl	8007b74 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004424:	2001      	movs	r0, #1
 8004426:	f000 fac7 	bl	80049b8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800442c:	2202      	movs	r2, #2
 800442e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004430:	4b1e      	ldr	r3, [pc, #120]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004432:	2208      	movs	r2, #8
 8004434:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004438:	2201      	movs	r2, #1
 800443a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800443e:	2200      	movs	r2, #0
 8004440:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004442:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004446:	4919      	ldr	r1, [pc, #100]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004448:	4819      	ldr	r0, [pc, #100]	@ (80044b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800444a:	f003 fb93 	bl	8007b74 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800444e:	4b17      	ldr	r3, [pc, #92]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004450:	2203      	movs	r2, #3
 8004452:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004454:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004456:	2208      	movs	r2, #8
 8004458:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800445a:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800445c:	2204      	movs	r2, #4
 800445e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004460:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004462:	2200      	movs	r2, #0
 8004464:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800446a:	4910      	ldr	r1, [pc, #64]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800446c:	4810      	ldr	r0, [pc, #64]	@ (80044b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800446e:	f003 fb81 	bl	8007b74 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004472:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004476:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447a:	2204      	movs	r2, #4
 800447c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800447e:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004480:	2208      	movs	r2, #8
 8004482:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004484:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004486:	2201      	movs	r2, #1
 8004488:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a07      	ldr	r2, [pc, #28]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800448e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004494:	4905      	ldr	r1, [pc, #20]	@ (80044ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004496:	4806      	ldr	r0, [pc, #24]	@ (80044b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004498:	f003 fb6c 	bl	8007b74 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4804      	ldr	r0, [pc, #16]	@ (80044b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044a0:	f003 fb93 	bl	8007bca <HAL_SDRAM_ProgramRefreshRate>
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	200006a4 	.word	0x200006a4
 80044b0:	20000654 	.word	0x20000654

080044b4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b090      	sub	sp, #64	@ 0x40
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80ec 	beq.w	800469e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ca:	4b77      	ldr	r3, [pc, #476]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	4a76      	ldr	r2, [pc, #472]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80044d6:	4b74      	ldr	r3, [pc, #464]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	4b70      	ldr	r3, [pc, #448]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	4a6f      	ldr	r2, [pc, #444]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044f2:	4b6d      	ldr	r3, [pc, #436]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	4b69      	ldr	r3, [pc, #420]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	4a68      	ldr	r2, [pc, #416]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004508:	f043 0302 	orr.w	r3, r3, #2
 800450c:	6313      	str	r3, [r2, #48]	@ 0x30
 800450e:	4b66      	ldr	r3, [pc, #408]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	4b62      	ldr	r3, [pc, #392]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	4a61      	ldr	r2, [pc, #388]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	6313      	str	r3, [r2, #48]	@ 0x30
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	4b5b      	ldr	r3, [pc, #364]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004540:	f043 0308 	orr.w	r3, r3, #8
 8004544:	6313      	str	r3, [r2, #48]	@ 0x30
 8004546:	4b58      	ldr	r3, [pc, #352]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	4b54      	ldr	r3, [pc, #336]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4a53      	ldr	r2, [pc, #332]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 800455c:	f043 0310 	orr.w	r3, r3, #16
 8004560:	6313      	str	r3, [r2, #48]	@ 0x30
 8004562:	4b51      	ldr	r3, [pc, #324]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	4b4d      	ldr	r3, [pc, #308]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	4a4c      	ldr	r2, [pc, #304]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004578:	f043 0320 	orr.w	r3, r3, #32
 800457c:	6313      	str	r3, [r2, #48]	@ 0x30
 800457e:	4b4a      	ldr	r3, [pc, #296]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b46      	ldr	r3, [pc, #280]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	4a45      	ldr	r2, [pc, #276]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004598:	6313      	str	r3, [r2, #48]	@ 0x30
 800459a:	4b43      	ldr	r3, [pc, #268]	@ (80046a8 <BSP_SDRAM_MspInit+0x1f4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80045a6:	2302      	movs	r3, #2
 80045a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80045aa:	2302      	movs	r3, #2
 80045ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80045b2:	230c      	movs	r3, #12
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80045b6:	2360      	movs	r3, #96	@ 0x60
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80045ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045be:	4619      	mov	r1, r3
 80045c0:	483a      	ldr	r0, [pc, #232]	@ (80046ac <BSP_SDRAM_MspInit+0x1f8>)
 80045c2:	f000 ff83 	bl	80054cc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80045c6:	2301      	movs	r3, #1
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80045ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045ce:	4619      	mov	r1, r3
 80045d0:	4837      	ldr	r0, [pc, #220]	@ (80046b0 <BSP_SDRAM_MspInit+0x1fc>)
 80045d2:	f000 ff7b 	bl	80054cc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80045d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80045da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80045dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045e0:	4619      	mov	r1, r3
 80045e2:	4834      	ldr	r0, [pc, #208]	@ (80046b4 <BSP_SDRAM_MspInit+0x200>)
 80045e4:	f000 ff72 	bl	80054cc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80045e8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80045ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80045ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045f2:	4619      	mov	r1, r3
 80045f4:	4830      	ldr	r0, [pc, #192]	@ (80046b8 <BSP_SDRAM_MspInit+0x204>)
 80045f6:	f000 ff69 	bl	80054cc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80045fa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004604:	4619      	mov	r1, r3
 8004606:	482d      	ldr	r0, [pc, #180]	@ (80046bc <BSP_SDRAM_MspInit+0x208>)
 8004608:	f000 ff60 	bl	80054cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800460c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004612:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004616:	4619      	mov	r1, r3
 8004618:	4829      	ldr	r0, [pc, #164]	@ (80046c0 <BSP_SDRAM_MspInit+0x20c>)
 800461a:	f000 ff57 	bl	80054cc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004624:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004626:	2280      	movs	r2, #128	@ 0x80
 8004628:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800462a:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800462c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004630:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004638:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800463c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004640:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004642:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004644:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004648:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800464a:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800464c:	2200      	movs	r2, #0
 800464e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004650:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004652:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004656:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800465a:	2200      	movs	r2, #0
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800465e:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004660:	2203      	movs	r2, #3
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004664:	4b17      	ldr	r3, [pc, #92]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004666:	2200      	movs	r2, #0
 8004668:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800466a:	4b16      	ldr	r3, [pc, #88]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004670:	4b14      	ldr	r3, [pc, #80]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <BSP_SDRAM_MspInit+0x214>)
 8004674:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
 800467c:	4a11      	ldr	r2, [pc, #68]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004682:	4810      	ldr	r0, [pc, #64]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 8004684:	f000 fb7c 	bl	8004d80 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004688:	480e      	ldr	r0, [pc, #56]	@ (80046c4 <BSP_SDRAM_MspInit+0x210>)
 800468a:	f000 facb 	bl	8004c24 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	210f      	movs	r1, #15
 8004692:	2038      	movs	r0, #56	@ 0x38
 8004694:	f000 fa8f 	bl	8004bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004698:	2038      	movs	r0, #56	@ 0x38
 800469a:	f000 faa8 	bl	8004bee <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800469e:	bf00      	nop
 80046a0:	3740      	adds	r7, #64	@ 0x40
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40020400 	.word	0x40020400
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40021400 	.word	0x40021400
 80046c0:	40021800 	.word	0x40021800
 80046c4:	200006b4 	.word	0x200006b4
 80046c8:	40026410 	.word	0x40026410

080046cc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	460a      	mov	r2, r1
 80046d6:	80fb      	strh	r3, [r7, #6]
 80046d8:	4613      	mov	r3, r2
 80046da:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80046e0:	4a13      	ldr	r2, [pc, #76]	@ (8004730 <BSP_TS_Init+0x64>)
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80046e6:	4a13      	ldr	r2, [pc, #76]	@ (8004734 <BSP_TS_Init+0x68>)
 80046e8:	88bb      	ldrh	r3, [r7, #4]
 80046ea:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80046ec:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <BSP_TS_Init+0x6c>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2082      	movs	r0, #130	@ 0x82
 80046f2:	4798      	blx	r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	f640 0311 	movw	r3, #2065	@ 0x811
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d104      	bne.n	800470a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004700:	4b0e      	ldr	r3, [pc, #56]	@ (800473c <BSP_TS_Init+0x70>)
 8004702:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <BSP_TS_Init+0x6c>)
 8004704:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004710:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <BSP_TS_Init+0x70>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2082      	movs	r0, #130	@ 0x82
 8004718:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800471a:	4b08      	ldr	r3, [pc, #32]	@ (800473c <BSP_TS_Init+0x70>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2082      	movs	r0, #130	@ 0x82
 8004722:	4798      	blx	r3
  }

  return ret;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000718 	.word	0x20000718
 8004734:	2000071a 	.word	0x2000071a
 8004738:	2000013c 	.word	0x2000013c
 800473c:	20000714 	.word	0x20000714

08004740 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004744:	4b03      	ldr	r3, [pc, #12]	@ (8004754 <BSP_TS_ITGetStatus+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2082      	movs	r0, #130	@ 0x82
 800474c:	4798      	blx	r3
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000714 	.word	0x20000714

08004758 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004760:	4b4f      	ldr	r3, [pc, #316]	@ (80048a0 <BSP_TS_GetState+0x148>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2082      	movs	r0, #130	@ 0x82
 8004768:	4798      	blx	r3
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 808d 	beq.w	8004896 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800477c:	4b48      	ldr	r3, [pc, #288]	@ (80048a0 <BSP_TS_GetState+0x148>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	f107 010e 	add.w	r1, r7, #14
 800478a:	2082      	movs	r0, #130	@ 0x82
 800478c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800478e:	89bb      	ldrh	r3, [r7, #12]
 8004790:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004794:	b29b      	uxth	r3, r3
 8004796:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	4a42      	ldr	r2, [pc, #264]	@ (80048a4 <BSP_TS_GetState+0x14c>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80047a4:	8abb      	ldrh	r3, [r7, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	82bb      	strh	r3, [r7, #20]
 80047ae:	e008      	b.n	80047c2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80047b0:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <BSP_TS_GetState+0x150>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	8aba      	ldrh	r2, [r7, #20]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d903      	bls.n	80047c2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <BSP_TS_GetState+0x150>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	3b01      	subs	r3, #1
 80047c0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80047c2:	8abb      	ldrh	r3, [r7, #20]
 80047c4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d806      	bhi.n	80047de <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80047d6:	330e      	adds	r3, #14
 80047d8:	b29b      	uxth	r3, r3
 80047da:	81fb      	strh	r3, [r7, #14]
 80047dc:	e005      	b.n	80047ea <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80047de:	89fb      	ldrh	r3, [r7, #14]
 80047e0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80047e4:	3308      	adds	r3, #8
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80047ea:	89fb      	ldrh	r3, [r7, #14]
 80047ec:	4a2f      	ldr	r2, [pc, #188]	@ (80048ac <BSP_TS_GetState+0x154>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	08db      	lsrs	r3, r3, #3
 80047f4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80047f6:	8afb      	ldrh	r3, [r7, #22]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	82fb      	strh	r3, [r7, #22]
 8004800:	e008      	b.n	8004814 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004802:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <BSP_TS_GetState+0x158>)
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	8afa      	ldrh	r2, [r7, #22]
 8004808:	429a      	cmp	r2, r3
 800480a:	d903      	bls.n	8004814 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800480c:	4b28      	ldr	r3, [pc, #160]	@ (80048b0 <BSP_TS_GetState+0x158>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	3b01      	subs	r3, #1
 8004812:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004814:	8afb      	ldrh	r3, [r7, #22]
 8004816:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	461a      	mov	r2, r3
 800481c:	4b25      	ldr	r3, [pc, #148]	@ (80048b4 <BSP_TS_GetState+0x15c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d906      	bls.n	8004832 <BSP_TS_GetState+0xda>
 8004824:	89fa      	ldrh	r2, [r7, #14]
 8004826:	4b23      	ldr	r3, [pc, #140]	@ (80048b4 <BSP_TS_GetState+0x15c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	e005      	b.n	800483e <BSP_TS_GetState+0xe6>
 8004832:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <BSP_TS_GetState+0x15c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	89fb      	ldrh	r3, [r7, #14]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	b29b      	uxth	r3, r3
 800483e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004840:	89bb      	ldrh	r3, [r7, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <BSP_TS_GetState+0x160>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d906      	bls.n	800485a <BSP_TS_GetState+0x102>
 800484c:	89ba      	ldrh	r2, [r7, #12]
 800484e:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <BSP_TS_GetState+0x160>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	e005      	b.n	8004866 <BSP_TS_GetState+0x10e>
 800485a:	4b17      	ldr	r3, [pc, #92]	@ (80048b8 <BSP_TS_GetState+0x160>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	89bb      	ldrh	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004868:	8a7a      	ldrh	r2, [r7, #18]
 800486a:	8a3b      	ldrh	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	2b05      	cmp	r3, #5
 8004870:	dd07      	ble.n	8004882 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004872:	89fb      	ldrh	r3, [r7, #14]
 8004874:	461a      	mov	r2, r3
 8004876:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <BSP_TS_GetState+0x15c>)
 8004878:	601a      	str	r2, [r3, #0]
      _y = y; 
 800487a:	89bb      	ldrh	r3, [r7, #12]
 800487c:	461a      	mov	r2, r3
 800487e:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <BSP_TS_GetState+0x160>)
 8004880:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <BSP_TS_GetState+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <BSP_TS_GetState+0x160>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	809a      	strh	r2, [r3, #4]
  }
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000714 	.word	0x20000714
 80048a4:	ba2e8ba3 	.word	0xba2e8ba3
 80048a8:	2000071a 	.word	0x2000071a
 80048ac:	88888889 	.word	0x88888889
 80048b0:	20000718 	.word	0x20000718
 80048b4:	2000071c 	.word	0x2000071c
 80048b8:	20000720 	.word	0x20000720

080048bc <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <BSP_TS_ITClear+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	2082      	movs	r0, #130	@ 0x82
 80048c8:	4798      	blx	r3
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000714 	.word	0x20000714

080048d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <HAL_Init+0x40>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004914 <HAL_Init+0x40>)
 80048de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_Init+0x40>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <HAL_Init+0x40>)
 80048ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048f0:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <HAL_Init+0x40>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a07      	ldr	r2, [pc, #28]	@ (8004914 <HAL_Init+0x40>)
 80048f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048fc:	2003      	movs	r0, #3
 80048fe:	f000 f94f 	bl	8004ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004902:	200f      	movs	r0, #15
 8004904:	f000 f808 	bl	8004918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004908:	f7fd fe1c 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023c00 	.word	0x40023c00

08004918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004920:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_InitTick+0x54>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <HAL_InitTick+0x58>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800492e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f967 	bl	8004c0a <HAL_SYSTICK_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e00e      	b.n	8004964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d80a      	bhi.n	8004962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	f000 f92f 	bl	8004bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004958:	4a06      	ldr	r2, [pc, #24]	@ (8004974 <HAL_InitTick+0x5c>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000100 	.word	0x20000100
 8004970:	20000194 	.word	0x20000194
 8004974:	20000190 	.word	0x20000190

08004978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_IncTick+0x20>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_IncTick+0x24>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4413      	add	r3, r2
 8004988:	4a04      	ldr	r2, [pc, #16]	@ (800499c <HAL_IncTick+0x24>)
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000194 	.word	0x20000194
 800499c:	20000724 	.word	0x20000724

080049a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return uwTick;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_GetTick+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000724 	.word	0x20000724

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff ffee 	bl	80049a0 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d005      	beq.n	80049de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <HAL_Delay+0x44>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049de:	bf00      	nop
 80049e0:	f7ff ffde 	bl	80049a0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d8f7      	bhi.n	80049e0 <HAL_Delay+0x28>
  {
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000194 	.word	0x20000194

08004a00 <__NVIC_SetPriorityGrouping>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a10:	4b0c      	ldr	r3, [pc, #48]	@ (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a32:	4a04      	ldr	r2, [pc, #16]	@ (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	60d3      	str	r3, [r2, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_GetPriorityGrouping>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a4c:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <__NVIC_GetPriorityGrouping+0x18>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0307 	and.w	r3, r3, #7
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_EnableIRQ>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db0b      	blt.n	8004a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	4907      	ldr	r1, [pc, #28]	@ (8004a9c <__NVIC_EnableIRQ+0x38>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	2001      	movs	r0, #1
 8004a86:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e100 	.word	0xe000e100

08004aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	db0a      	blt.n	8004aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	490c      	ldr	r1, [pc, #48]	@ (8004aec <__NVIC_SetPriority+0x4c>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac8:	e00a      	b.n	8004ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4908      	ldr	r1, [pc, #32]	@ (8004af0 <__NVIC_SetPriority+0x50>)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3b04      	subs	r3, #4
 8004ad8:	0112      	lsls	r2, r2, #4
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	440b      	add	r3, r1
 8004ade:	761a      	strb	r2, [r3, #24]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	bf28      	it	cs
 8004b12:	2304      	movcs	r3, #4
 8004b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d902      	bls.n	8004b24 <NVIC_EncodePriority+0x30>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3b03      	subs	r3, #3
 8004b22:	e000      	b.n	8004b26 <NVIC_EncodePriority+0x32>
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	401a      	ands	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	43d9      	mvns	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	4313      	orrs	r3, r2
         );
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3724      	adds	r7, #36	@ 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b6c:	d301      	bcc.n	8004b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e00f      	b.n	8004b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b72:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <SysTick_Config+0x40>)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b7a:	210f      	movs	r1, #15
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	f7ff ff8e 	bl	8004aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <SysTick_Config+0x40>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8a:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <SysTick_Config+0x40>)
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000e010 	.word	0xe000e010

08004ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff29 	bl	8004a00 <__NVIC_SetPriorityGrouping>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b086      	sub	sp, #24
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc8:	f7ff ff3e 	bl	8004a48 <__NVIC_GetPriorityGrouping>
 8004bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7ff ff8e 	bl	8004af4 <NVIC_EncodePriority>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff5d 	bl	8004aa0 <__NVIC_SetPriority>
}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff31 	bl	8004a64 <__NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ffa2 	bl	8004b5c <SysTick_Config>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c30:	f7ff feb6 	bl	80049a0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e099      	b.n	8004d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c60:	e00f      	b.n	8004c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c62:	f7ff fe9d 	bl	80049a0 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d908      	bls.n	8004c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e078      	b.n	8004d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e8      	bne.n	8004c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4b38      	ldr	r3, [pc, #224]	@ (8004d7c <HAL_DMA_Init+0x158>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d107      	bne.n	8004cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d117      	bne.n	8004d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f8bd 	bl	8004ea8 <DMA_CheckFifoParam>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2240      	movs	r2, #64	@ 0x40
 8004d38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d42:	2301      	movs	r3, #1
 8004d44:	e016      	b.n	8004d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f874 	bl	8004e3c <DMA_CalcBaseAndBitshift>
 8004d54:	4603      	mov	r3, r0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5c:	223f      	movs	r2, #63	@ 0x3f
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	f010803f 	.word	0xf010803f

08004d80 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e050      	b.n	8004e34 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d101      	bne.n	8004da2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e048      	b.n	8004e34 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2221      	movs	r2, #33	@ 0x21
 8004de0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f82a 	bl	8004e3c <DMA_CalcBaseAndBitshift>
 8004de8:	4603      	mov	r3, r0
 8004dea:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e14:	223f      	movs	r2, #63	@ 0x3f
 8004e16:	409a      	lsls	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	3b10      	subs	r3, #16
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e56:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d909      	bls.n	8004e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	1d1a      	adds	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e7c:	e007      	b.n	8004e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	aaaaaaab 	.word	0xaaaaaaab
 8004ea4:	0800da70 	.word	0x0800da70

08004ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d11f      	bne.n	8004f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d856      	bhi.n	8004f76 <DMA_CheckFifoParam+0xce>
 8004ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <DMA_CheckFifoParam+0x28>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ef3 	.word	0x08004ef3
 8004ed8:	08004ee1 	.word	0x08004ee1
 8004edc:	08004f77 	.word	0x08004f77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d046      	beq.n	8004f7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef0:	e043      	b.n	8004f7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004efa:	d140      	bne.n	8004f7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e03d      	b.n	8004f7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f0a:	d121      	bne.n	8004f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d837      	bhi.n	8004f82 <DMA_CheckFifoParam+0xda>
 8004f12:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <DMA_CheckFifoParam+0x70>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f29 	.word	0x08004f29
 8004f1c:	08004f2f 	.word	0x08004f2f
 8004f20:	08004f29 	.word	0x08004f29
 8004f24:	08004f41 	.word	0x08004f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e030      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d025      	beq.n	8004f86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3e:	e022      	b.n	8004f86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f48:	d11f      	bne.n	8004f8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f4e:	e01c      	b.n	8004f8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d903      	bls.n	8004f5e <DMA_CheckFifoParam+0xb6>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d003      	beq.n	8004f64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f5c:	e018      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
      break;
 8004f62:	e015      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e00b      	b.n	8004f8e <DMA_CheckFifoParam+0xe6>
      break;
 8004f76:	bf00      	nop
 8004f78:	e00a      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e008      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e006      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;
 8004f82:	bf00      	nop
 8004f84:	e004      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
    }
  } 
  
  return status; 
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop

08004fa0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e03b      	b.n	800502a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f833 	bl	8005032 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff0:	f023 0107 	bic.w	r1, r3, #7
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800500a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68d1      	ldr	r1, [r2, #12]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	430b      	orrs	r3, r1
 8005018:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af02      	add	r7, sp, #8
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_DMA2D_Start+0x1c>
 800505e:	2302      	movs	r3, #2
 8005060:	e018      	b.n	8005094 <HAL_DMA2D_Start+0x4e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f989 	bl	8005394 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d056      	beq.n	8005166 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80050b8:	f7ff fc72 	bl	80049a0 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80050be:	e04b      	b.n	8005158 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d023      	beq.n	800511a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e0:	f043 0202 	orr.w	r2, r3, #2
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2221      	movs	r2, #33	@ 0x21
 8005104:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0a5      	b.n	8005266 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d01a      	beq.n	8005158 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005122:	f7ff fc3d 	bl	80049a0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <HAL_DMA2D_PollForTransfer+0x9c>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2203      	movs	r2, #3
 8005148:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e086      	b.n	8005266 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0ac      	beq.n	80050c0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d061      	beq.n	800524c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005188:	f7ff fc0a 	bl	80049a0 <HAL_GetTick>
 800518c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800518e:	e056      	b.n	800523e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d02e      	beq.n	8005200 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	f043 0204 	orr.w	r2, r3, #4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c6:	f043 0202 	orr.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2229      	movs	r2, #41	@ 0x29
 80051ea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2204      	movs	r2, #4
 80051f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e032      	b.n	8005266 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d01a      	beq.n	800523e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005208:	f7ff fbca 	bl	80049a0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <HAL_DMA2D_PollForTransfer+0x182>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e013      	b.n	8005266 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0a1      	beq.n	8005190 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2212      	movs	r2, #18
 8005252:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_DMA2D_ConfigLayer+0x20>
 800528c:	2302      	movs	r3, #2
 800528e:	e079      	b.n	8005384 <HAL_DMA2D_ConfigLayer+0x114>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	3318      	adds	r3, #24
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80052ba:	4b35      	ldr	r3, [pc, #212]	@ (8005390 <HAL_DMA2D_ConfigLayer+0x120>)
 80052bc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b0a      	cmp	r3, #10
 80052c4:	d003      	beq.n	80052ce <HAL_DMA2D_ConfigLayer+0x5e>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d107      	bne.n	80052de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e005      	b.n	80052ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d120      	bne.n	8005332 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	ea02 0103 	and.w	r1, r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	430a      	orrs	r2, r1
 8005306:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b0a      	cmp	r3, #10
 8005318:	d003      	beq.n	8005322 <HAL_DMA2D_ConfigLayer+0xb2>
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b09      	cmp	r3, #9
 8005320:	d127      	bne.n	8005372 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800532e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005330:	e01f      	b.n	8005372 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43db      	mvns	r3, r3
 800533c:	ea02 0103 	and.w	r1, r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	430a      	orrs	r2, r1
 8005348:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b0a      	cmp	r3, #10
 800535a:	d003      	beq.n	8005364 <HAL_DMA2D_ConfigLayer+0xf4>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b09      	cmp	r3, #9
 8005362:	d106      	bne.n	8005372 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005370:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	ff03000f 	.word	0xff03000f

08005394 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005394:	b480      	push	{r7}
 8005396:	b08b      	sub	sp, #44	@ 0x2c
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	041a      	lsls	r2, r3, #16
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053cc:	d174      	bne.n	80054b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80053d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80053dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
 8005404:	e053      	b.n	80054ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d106      	bne.n	800541c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
 800541a:	e048      	b.n	80054ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d111      	bne.n	8005448 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	0cdb      	lsrs	r3, r3, #19
 8005428:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	0a9b      	lsrs	r3, r3, #10
 800542e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	08db      	lsrs	r3, r3, #3
 8005434:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	02db      	lsls	r3, r3, #11
 800543e:	4313      	orrs	r3, r2
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
 8005446:	e032      	b.n	80054ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d117      	bne.n	8005480 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	0fdb      	lsrs	r3, r3, #31
 8005454:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	0cdb      	lsrs	r3, r3, #19
 800545a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	0adb      	lsrs	r3, r3, #11
 8005460:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	08db      	lsrs	r3, r3, #3
 8005466:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	029b      	lsls	r3, r3, #10
 8005470:	431a      	orrs	r2, r3
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	03db      	lsls	r3, r3, #15
 8005476:	4313      	orrs	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	e016      	b.n	80054ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	0f1b      	lsrs	r3, r3, #28
 8005484:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	0d1b      	lsrs	r3, r3, #20
 800548a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	0b1b      	lsrs	r3, r3, #12
 8005490:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	011a      	lsls	r2, r3, #4
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	431a      	orrs	r2, r3
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	4313      	orrs	r3, r2
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80054b6:	e003      	b.n	80054c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	60da      	str	r2, [r3, #12]
}
 80054c0:	bf00      	nop
 80054c2:	372c      	adds	r7, #44	@ 0x2c
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	@ 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e177      	b.n	80057d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054e8:	2201      	movs	r2, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4013      	ands	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	f040 8166 	bne.w	80057d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d00b      	beq.n	8005526 <HAL_GPIO_Init+0x5a>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d007      	beq.n	8005526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800551a:	2b11      	cmp	r3, #17
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b12      	cmp	r3, #18
 8005524:	d130      	bne.n	8005588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	2203      	movs	r2, #3
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800555c:	2201      	movs	r2, #1
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	f003 0201 	and.w	r2, r3, #1
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	2203      	movs	r2, #3
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0xfc>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b12      	cmp	r3, #18
 80055c6:	d123      	bne.n	8005610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	08da      	lsrs	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3208      	adds	r2, #8
 80055d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	220f      	movs	r2, #15
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	08da      	lsrs	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3208      	adds	r2, #8
 800560a:	69b9      	ldr	r1, [r7, #24]
 800560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0203 	and.w	r2, r3, #3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80c0 	beq.w	80057d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	4b66      	ldr	r3, [pc, #408]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	4a65      	ldr	r2, [pc, #404]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 800565c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005660:	6453      	str	r3, [r2, #68]	@ 0x44
 8005662:	4b63      	ldr	r3, [pc, #396]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800566e:	4a61      	ldr	r2, [pc, #388]	@ (80057f4 <HAL_GPIO_Init+0x328>)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3302      	adds	r3, #2
 8005676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	220f      	movs	r2, #15
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a58      	ldr	r2, [pc, #352]	@ (80057f8 <HAL_GPIO_Init+0x32c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d037      	beq.n	800570a <HAL_GPIO_Init+0x23e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a57      	ldr	r2, [pc, #348]	@ (80057fc <HAL_GPIO_Init+0x330>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_GPIO_Init+0x23a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a56      	ldr	r2, [pc, #344]	@ (8005800 <HAL_GPIO_Init+0x334>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02b      	beq.n	8005702 <HAL_GPIO_Init+0x236>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a55      	ldr	r2, [pc, #340]	@ (8005804 <HAL_GPIO_Init+0x338>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d025      	beq.n	80056fe <HAL_GPIO_Init+0x232>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a54      	ldr	r2, [pc, #336]	@ (8005808 <HAL_GPIO_Init+0x33c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01f      	beq.n	80056fa <HAL_GPIO_Init+0x22e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a53      	ldr	r2, [pc, #332]	@ (800580c <HAL_GPIO_Init+0x340>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d019      	beq.n	80056f6 <HAL_GPIO_Init+0x22a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a52      	ldr	r2, [pc, #328]	@ (8005810 <HAL_GPIO_Init+0x344>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_GPIO_Init+0x226>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a51      	ldr	r2, [pc, #324]	@ (8005814 <HAL_GPIO_Init+0x348>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00d      	beq.n	80056ee <HAL_GPIO_Init+0x222>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a50      	ldr	r2, [pc, #320]	@ (8005818 <HAL_GPIO_Init+0x34c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <HAL_GPIO_Init+0x21e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a4f      	ldr	r2, [pc, #316]	@ (800581c <HAL_GPIO_Init+0x350>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_GPIO_Init+0x21a>
 80056e2:	2309      	movs	r3, #9
 80056e4:	e012      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056e6:	230a      	movs	r3, #10
 80056e8:	e010      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056ea:	2308      	movs	r3, #8
 80056ec:	e00e      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056ee:	2307      	movs	r3, #7
 80056f0:	e00c      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056f2:	2306      	movs	r3, #6
 80056f4:	e00a      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056f6:	2305      	movs	r3, #5
 80056f8:	e008      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056fa:	2304      	movs	r3, #4
 80056fc:	e006      	b.n	800570c <HAL_GPIO_Init+0x240>
 80056fe:	2303      	movs	r3, #3
 8005700:	e004      	b.n	800570c <HAL_GPIO_Init+0x240>
 8005702:	2302      	movs	r3, #2
 8005704:	e002      	b.n	800570c <HAL_GPIO_Init+0x240>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_GPIO_Init+0x240>
 800570a:	2300      	movs	r3, #0
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	f002 0203 	and.w	r2, r2, #3
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	4093      	lsls	r3, r2
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800571c:	4935      	ldr	r1, [pc, #212]	@ (80057f4 <HAL_GPIO_Init+0x328>)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	3302      	adds	r3, #2
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800572a:	4b3d      	ldr	r3, [pc, #244]	@ (8005820 <HAL_GPIO_Init+0x354>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	43db      	mvns	r3, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800574e:	4a34      	ldr	r2, [pc, #208]	@ (8005820 <HAL_GPIO_Init+0x354>)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005754:	4b32      	ldr	r3, [pc, #200]	@ (8005820 <HAL_GPIO_Init+0x354>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005778:	4a29      	ldr	r2, [pc, #164]	@ (8005820 <HAL_GPIO_Init+0x354>)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800577e:	4b28      	ldr	r3, [pc, #160]	@ (8005820 <HAL_GPIO_Init+0x354>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_GPIO_Init+0x354>)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005820 <HAL_GPIO_Init+0x354>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057cc:	4a14      	ldr	r2, [pc, #80]	@ (8005820 <HAL_GPIO_Init+0x354>)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	f67f ae84 	bls.w	80054e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3724      	adds	r7, #36	@ 0x24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40013800 	.word	0x40013800
 80057f8:	40020000 	.word	0x40020000
 80057fc:	40020400 	.word	0x40020400
 8005800:	40020800 	.word	0x40020800
 8005804:	40020c00 	.word	0x40020c00
 8005808:	40021000 	.word	0x40021000
 800580c:	40021400 	.word	0x40021400
 8005810:	40021800 	.word	0x40021800
 8005814:	40021c00 	.word	0x40021c00
 8005818:	40022000 	.word	0x40022000
 800581c:	40022400 	.word	0x40022400
 8005820:	40013c00 	.word	0x40013c00

08005824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
 8005830:	4613      	mov	r3, r2
 8005832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005834:	787b      	ldrb	r3, [r7, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005840:	e003      	b.n	800584a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	041a      	lsls	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	619a      	str	r2, [r3, #24]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	887b      	ldrh	r3, [r7, #2]
 8005868:	401a      	ands	r2, r3
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	041a      	lsls	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005878:	e002      	b.n	8005880 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800587a:	887a      	ldrh	r2, [r7, #2]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	619a      	str	r2, [r3, #24]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e12b      	b.n	8005af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f95d 	bl	8005b72 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2224      	movs	r2, #36	@ 0x24
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058f0:	f001 ff1a 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 80058f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4a81      	ldr	r2, [pc, #516]	@ (8005b00 <HAL_I2C_Init+0x274>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d807      	bhi.n	8005910 <HAL_I2C_Init+0x84>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a80      	ldr	r2, [pc, #512]	@ (8005b04 <HAL_I2C_Init+0x278>)
 8005904:	4293      	cmp	r3, r2
 8005906:	bf94      	ite	ls
 8005908:	2301      	movls	r3, #1
 800590a:	2300      	movhi	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e006      	b.n	800591e <HAL_I2C_Init+0x92>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a7d      	ldr	r2, [pc, #500]	@ (8005b08 <HAL_I2C_Init+0x27c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	bf94      	ite	ls
 8005918:	2301      	movls	r3, #1
 800591a:	2300      	movhi	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e0e7      	b.n	8005af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a78      	ldr	r2, [pc, #480]	@ (8005b0c <HAL_I2C_Init+0x280>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	0c9b      	lsrs	r3, r3, #18
 8005930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a6a      	ldr	r2, [pc, #424]	@ (8005b00 <HAL_I2C_Init+0x274>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d802      	bhi.n	8005960 <HAL_I2C_Init+0xd4>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	3301      	adds	r3, #1
 800595e:	e009      	b.n	8005974 <HAL_I2C_Init+0xe8>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005966:	fb02 f303 	mul.w	r3, r2, r3
 800596a:	4a69      	ldr	r2, [pc, #420]	@ (8005b10 <HAL_I2C_Init+0x284>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	099b      	lsrs	r3, r3, #6
 8005972:	3301      	adds	r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	430b      	orrs	r3, r1
 800597a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005986:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	495c      	ldr	r1, [pc, #368]	@ (8005b00 <HAL_I2C_Init+0x274>)
 8005990:	428b      	cmp	r3, r1
 8005992:	d819      	bhi.n	80059c8 <HAL_I2C_Init+0x13c>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1e59      	subs	r1, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fbb1 f3f3 	udiv	r3, r1, r3
 80059a2:	1c59      	adds	r1, r3, #1
 80059a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059a8:	400b      	ands	r3, r1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_I2C_Init+0x138>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1e59      	subs	r1, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059bc:	3301      	adds	r3, #1
 80059be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c2:	e051      	b.n	8005a68 <HAL_I2C_Init+0x1dc>
 80059c4:	2304      	movs	r3, #4
 80059c6:	e04f      	b.n	8005a68 <HAL_I2C_Init+0x1dc>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d111      	bne.n	80059f4 <HAL_I2C_Init+0x168>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1e58      	subs	r0, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	440b      	add	r3, r1
 80059de:	fbb0 f3f3 	udiv	r3, r0, r3
 80059e2:	3301      	adds	r3, #1
 80059e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e012      	b.n	8005a1a <HAL_I2C_Init+0x18e>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1e58      	subs	r0, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6859      	ldr	r1, [r3, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	0099      	lsls	r1, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_Init+0x196>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e022      	b.n	8005a68 <HAL_I2C_Init+0x1dc>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10e      	bne.n	8005a48 <HAL_I2C_Init+0x1bc>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1e58      	subs	r0, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	440b      	add	r3, r1
 8005a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a46:	e00f      	b.n	8005a68 <HAL_I2C_Init+0x1dc>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1e58      	subs	r0, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	0099      	lsls	r1, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	6809      	ldr	r1, [r1, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6911      	ldr	r1, [r2, #16]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68d2      	ldr	r2, [r2, #12]
 8005aa2:	4311      	orrs	r1, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	000186a0 	.word	0x000186a0
 8005b04:	001e847f 	.word	0x001e847f
 8005b08:	003d08ff 	.word	0x003d08ff
 8005b0c:	431bde83 	.word	0x431bde83
 8005b10:	10624dd3 	.word	0x10624dd3

08005b14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e021      	b.n	8005b6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	@ 0x24
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f821 	bl	8005b86 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	813b      	strh	r3, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bb6:	f7fe fef3 	bl	80049a0 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80d9 	bne.w	8005d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2319      	movs	r3, #25
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	496d      	ldr	r1, [pc, #436]	@ (8005d88 <HAL_I2C_Mem_Write+0x1ec>)
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fc89 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e0cc      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2C_Mem_Write+0x56>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0c5      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d007      	beq.n	8005c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	@ 0x21
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2240      	movs	r2, #64	@ 0x40
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a4d      	ldr	r2, [pc, #308]	@ (8005d8c <HAL_I2C_Mem_Write+0x1f0>)
 8005c58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5a:	88f8      	ldrh	r0, [r7, #6]
 8005c5c:	893a      	ldrh	r2, [r7, #8]
 8005c5e:	8979      	ldrh	r1, [r7, #10]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fac4 	bl	80061f8 <I2C_RequestMemoryWrite>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d052      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e081      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fd0a 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d107      	bne.n	8005ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e06b      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d11b      	bne.n	8005d1c <HAL_I2C_Mem_Write+0x180>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d017      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1aa      	bne.n	8005c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fcf6 	bl	800671a <I2C_WaitOnBTFFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d107      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e016      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e000      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	00100002 	.word	0x00100002
 8005d8c:	ffff0000 	.word	0xffff0000

08005d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08c      	sub	sp, #48	@ 0x30
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	460b      	mov	r3, r1
 8005da4:	813b      	strh	r3, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005daa:	f7fe fdf9 	bl	80049a0 <HAL_GetTick>
 8005dae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	f040 8208 	bne.w	80061ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	2319      	movs	r3, #25
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	497b      	ldr	r1, [pc, #492]	@ (8005fb4 <HAL_I2C_Mem_Read+0x224>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fb8f 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e1fb      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_I2C_Mem_Read+0x56>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e1f4      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d007      	beq.n	8005e0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2222      	movs	r2, #34	@ 0x22
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8005fb8 <HAL_I2C_Mem_Read+0x228>)
 8005e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e4e:	88f8      	ldrh	r0, [r7, #6]
 8005e50:	893a      	ldrh	r2, [r7, #8]
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fa5e 	bl	8006320 <I2C_RequestMemoryRead>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e1b0      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d113      	bne.n	8005e9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	623b      	str	r3, [r7, #32]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e184      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11b      	bne.n	8005ede <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e164      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d11b      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	e144      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f34:	e138      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f200 80f1 	bhi.w	8006122 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d123      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fc25 	bl	800679c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e139      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f8e:	e10b      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d14e      	bne.n	8006036 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4906      	ldr	r1, [pc, #24]	@ (8005fbc <HAL_I2C_Mem_Read+0x22c>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 faa2 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e10e      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
 8005fb2:	bf00      	nop
 8005fb4:	00100002 	.word	0x00100002
 8005fb8:	ffff0000 	.word	0xffff0000
 8005fbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006034:	e0b8      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	2200      	movs	r2, #0
 800603e:	4966      	ldr	r1, [pc, #408]	@ (80061d8 <HAL_I2C_Mem_Read+0x448>)
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa53 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0bf      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	2200      	movs	r2, #0
 800609a:	494f      	ldr	r1, [pc, #316]	@ (80061d8 <HAL_I2C_Mem_Read+0x448>)
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fa25 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e091      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006120:	e042      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006124:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fb38 	bl	800679c <I2C_WaitOnRXNEFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e04c      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d118      	bne.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f aec2 	bne.w	8005f36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	@ 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	00010004 	.word	0x00010004

080061dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ea:	b2db      	uxtb	r3, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	817b      	strh	r3, [r7, #10]
 800620a:	460b      	mov	r3, r1
 800620c:	813b      	strh	r3, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2200      	movs	r2, #0
 800622a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f95c 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800624e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e05f      	b.n	8006314 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	492c      	ldr	r1, [pc, #176]	@ (800631c <I2C_RequestMemoryWrite+0x124>)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f995 	bl	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e04c      	b.n	8006314 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	6a39      	ldr	r1, [r7, #32]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f9ff 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d107      	bne.n	80062b8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e02b      	b.n	8006314 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062c2:	893b      	ldrh	r3, [r7, #8]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	611a      	str	r2, [r3, #16]
 80062cc:	e021      	b.n	8006312 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	0a1b      	lsrs	r3, r3, #8
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062de:	6a39      	ldr	r1, [r7, #32]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f9d9 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d107      	bne.n	8006304 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e005      	b.n	8006314 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	00010002 	.word	0x00010002

08006320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	461a      	mov	r2, r3
 800632e:	4603      	mov	r3, r0
 8006330:	817b      	strh	r3, [r7, #10]
 8006332:	460b      	mov	r3, r1
 8006334:	813b      	strh	r3, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	2200      	movs	r2, #0
 8006362:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f8c0 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e0a9      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800638c:	897b      	ldrh	r3, [r7, #10]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800639a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	4951      	ldr	r1, [pc, #324]	@ (80064e8 <I2C_RequestMemoryRead+0x1c8>)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f8f9 	bl	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e096      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ca:	6a39      	ldr	r1, [r7, #32]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f963 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d107      	bne.n	80063f0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e075      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
 8006404:	e021      	b.n	800644a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	b29b      	uxth	r3, r3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006416:	6a39      	ldr	r1, [r7, #32]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f93d 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	2b04      	cmp	r3, #4
 800642a:	d107      	bne.n	800643c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800643a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e04f      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644c:	6a39      	ldr	r1, [r7, #32]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f922 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	2b04      	cmp	r3, #4
 8006460:	d107      	bne.n	8006472 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e034      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2200      	movs	r2, #0
 800648e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f82a 	bl	80064ec <I2C_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00c      	beq.n	80064b8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e013      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064b8:	897b      	ldrh	r3, [r7, #10]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	6a3a      	ldr	r2, [r7, #32]
 80064cc:	4906      	ldr	r1, [pc, #24]	@ (80064e8 <I2C_RequestMemoryRead+0x1c8>)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f863 	bl	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	00010002 	.word	0x00010002

080064ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064fc:	e025      	b.n	800654a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d021      	beq.n	800654a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006506:	f7fe fa4b 	bl	80049a0 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d116      	bne.n	800654a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e023      	b.n	8006592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10d      	bne.n	8006570 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	43da      	mvns	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	e00c      	b.n	800658a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	43da      	mvns	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4013      	ands	r3, r2
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	429a      	cmp	r2, r3
 800658e:	d0b6      	beq.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065a8:	e051      	b.n	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b8:	d123      	bne.n	8006602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	f043 0204 	orr.w	r2, r3, #4
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e046      	b.n	8006690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d021      	beq.n	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fe f9c9 	bl	80049a0 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d116      	bne.n	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e020      	b.n	8006690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10c      	bne.n	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	43da      	mvns	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e00b      	b.n	800668a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	43da      	mvns	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d18d      	bne.n	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a4:	e02d      	b.n	8006702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f8ce 	bl	8006848 <I2C_IsAcknowledgeFailed>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e02d      	b.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d021      	beq.n	8006702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fe f96f 	bl	80049a0 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d116      	bne.n	8006702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	f043 0220 	orr.w	r2, r3, #32
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e007      	b.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670c:	2b80      	cmp	r3, #128	@ 0x80
 800670e:	d1ca      	bne.n	80066a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006726:	e02d      	b.n	8006784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f88d 	bl	8006848 <I2C_IsAcknowledgeFailed>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e02d      	b.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d021      	beq.n	8006784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006740:	f7fe f92e 	bl	80049a0 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d116      	bne.n	8006784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e007      	b.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b04      	cmp	r3, #4
 8006790:	d1ca      	bne.n	8006728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067a8:	e042      	b.n	8006830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d119      	bne.n	80067ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0210 	mvn.w	r2, #16
 80067c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e029      	b.n	8006840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ec:	f7fe f8d8 	bl	80049a0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d302      	bcc.n	8006802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e007      	b.n	8006840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d1b5      	bne.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685e:	d11b      	bne.n	8006898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	f043 0204 	orr.w	r2, r3, #4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e0bf      	b.n	8006a3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8ba 	bl	8006a48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80068ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6999      	ldr	r1, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006900:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a44 <HAL_LTDC_Init+0x19c>)
 800691c:	400b      	ands	r3, r1
 800691e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6899      	ldr	r1, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68d9      	ldr	r1, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b3e      	ldr	r3, [pc, #248]	@ (8006a44 <HAL_LTDC_Init+0x19c>)
 800694a:	400b      	ands	r3, r1
 800694c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68d9      	ldr	r1, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6919      	ldr	r1, [r3, #16]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b33      	ldr	r3, [pc, #204]	@ (8006a44 <HAL_LTDC_Init+0x19c>)
 8006978:	400b      	ands	r3, r1
 800697a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6919      	ldr	r1, [r3, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <HAL_LTDC_Init+0x19c>)
 80069a6:	400b      	ands	r3, r1
 80069a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6959      	ldr	r1, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80069ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0206 	orr.w	r2, r2, #6
 8006a16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	f000f800 	.word	0xf000f800

08006a48 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a5c:	b5b0      	push	{r4, r5, r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_LTDC_ConfigLayer+0x1a>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e02c      	b.n	8006ad0 <HAL_LTDC_ConfigLayer+0x74>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2134      	movs	r1, #52	@ 0x34
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4614      	mov	r4, r2
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f83b 	bl	8006b2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2201      	movs	r2, #1
 8006abc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bdb0      	pop	{r4, r5, r7, pc}

08006ad8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_LTDC_EnableDither+0x16>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e016      	b.n	8006b1c <HAL_LTDC_EnableDither+0x44>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006afe:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <HAL_LTDC_EnableDither+0x50>)
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	4a09      	ldr	r2, [pc, #36]	@ (8006b28 <HAL_LTDC_EnableDither+0x50>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b08:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40016800 	.word	0x40016800

08006b2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b089      	sub	sp, #36	@ 0x24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	0c1b      	lsrs	r3, r3, #16
 8006b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b48:	4413      	add	r3, r2
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	4413      	add	r3, r2
 8006b5a:	3384      	adds	r3, #132	@ 0x84
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	4611      	mov	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	01d2      	lsls	r2, r2, #7
 8006b68:	440a      	add	r2, r1
 8006b6a:	3284      	adds	r2, #132	@ 0x84
 8006b6c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b82:	4413      	add	r3, r2
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	01db      	lsls	r3, r3, #7
 8006b90:	440b      	add	r3, r1
 8006b92:	3384      	adds	r3, #132	@ 0x84
 8006b94:	4619      	mov	r1, r3
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006baa:	4413      	add	r3, r2
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	01db      	lsls	r3, r3, #7
 8006bba:	4413      	add	r3, r2
 8006bbc:	3384      	adds	r3, #132	@ 0x84
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	01d2      	lsls	r2, r2, #7
 8006bca:	440a      	add	r2, r1
 8006bcc:	3284      	adds	r2, #132	@ 0x84
 8006bce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006bd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006be2:	4413      	add	r3, r2
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	01db      	lsls	r3, r3, #7
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3384      	adds	r3, #132	@ 0x84
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	01db      	lsls	r3, r3, #7
 8006c06:	4413      	add	r3, r2
 8006c08:	3384      	adds	r3, #132	@ 0x84
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	4611      	mov	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	01d2      	lsls	r2, r2, #7
 8006c16:	440a      	add	r2, r1
 8006c18:	3284      	adds	r2, #132	@ 0x84
 8006c1a:	f023 0307 	bic.w	r3, r3, #7
 8006c1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	01db      	lsls	r3, r3, #7
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3384      	adds	r3, #132	@ 0x84
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	01db      	lsls	r3, r3, #7
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3384      	adds	r3, #132	@ 0x84
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	01db      	lsls	r3, r3, #7
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3384      	adds	r3, #132	@ 0x84
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	440b      	add	r3, r1
 8006c92:	3384      	adds	r3, #132	@ 0x84
 8006c94:	4619      	mov	r1, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	01db      	lsls	r3, r3, #7
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3384      	adds	r3, #132	@ 0x84
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	01d2      	lsls	r2, r2, #7
 8006cb6:	440a      	add	r2, r1
 8006cb8:	3284      	adds	r2, #132	@ 0x84
 8006cba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006cbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	01db      	lsls	r3, r3, #7
 8006cca:	4413      	add	r3, r2
 8006ccc:	3384      	adds	r3, #132	@ 0x84
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3384      	adds	r3, #132	@ 0x84
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	4611      	mov	r1, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	01d2      	lsls	r2, r2, #7
 8006cf0:	440a      	add	r2, r1
 8006cf2:	3284      	adds	r2, #132	@ 0x84
 8006cf4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006cf8:	f023 0307 	bic.w	r3, r3, #7
 8006cfc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	69da      	ldr	r2, [r3, #28]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	68f9      	ldr	r1, [r7, #12]
 8006d08:	6809      	ldr	r1, [r1, #0]
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	01c9      	lsls	r1, r1, #7
 8006d10:	4401      	add	r1, r0
 8006d12:	3184      	adds	r1, #132	@ 0x84
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	4413      	add	r3, r2
 8006d24:	3384      	adds	r3, #132	@ 0x84
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	01db      	lsls	r3, r3, #7
 8006d32:	4413      	add	r3, r2
 8006d34:	3384      	adds	r3, #132	@ 0x84
 8006d36:	461a      	mov	r2, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	01db      	lsls	r3, r3, #7
 8006d46:	4413      	add	r3, r2
 8006d48:	3384      	adds	r3, #132	@ 0x84
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e01b      	b.n	8006d98 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d102      	bne.n	8006d6e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e014      	b.n	8006d98 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d00b      	beq.n	8006d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d007      	beq.n	8006d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d003      	beq.n	8006d8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d8a:	2b07      	cmp	r3, #7
 8006d8c:	d102      	bne.n	8006d94 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e001      	b.n	8006d98 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006d94:	2301      	movs	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	01db      	lsls	r3, r3, #7
 8006da2:	4413      	add	r3, r2
 8006da4:	3384      	adds	r3, #132	@ 0x84
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	4611      	mov	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	01d2      	lsls	r2, r2, #7
 8006db2:	440a      	add	r2, r1
 8006db4:	3284      	adds	r2, #132	@ 0x84
 8006db6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	041a      	lsls	r2, r3, #16
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6859      	ldr	r1, [r3, #4]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1acb      	subs	r3, r1, r3
 8006dd2:	69f9      	ldr	r1, [r7, #28]
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	3303      	adds	r3, #3
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	6809      	ldr	r1, [r1, #0]
 8006dde:	4608      	mov	r0, r1
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	01c9      	lsls	r1, r1, #7
 8006de4:	4401      	add	r1, r0
 8006de6:	3184      	adds	r1, #132	@ 0x84
 8006de8:	4313      	orrs	r3, r2
 8006dea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	01db      	lsls	r3, r3, #7
 8006df6:	4413      	add	r3, r2
 8006df8:	3384      	adds	r3, #132	@ 0x84
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	4611      	mov	r1, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	01d2      	lsls	r2, r2, #7
 8006e06:	440a      	add	r2, r1
 8006e08:	3284      	adds	r2, #132	@ 0x84
 8006e0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006e0e:	f023 0307 	bic.w	r3, r3, #7
 8006e12:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	01db      	lsls	r3, r3, #7
 8006e1e:	4413      	add	r3, r2
 8006e20:	3384      	adds	r3, #132	@ 0x84
 8006e22:	461a      	mov	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	4413      	add	r3, r2
 8006e36:	3384      	adds	r3, #132	@ 0x84
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	01d2      	lsls	r2, r2, #7
 8006e44:	440a      	add	r2, r1
 8006e46:	3284      	adds	r2, #132	@ 0x84
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	6013      	str	r3, [r2, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	@ 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
	...

08006e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e25e      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d075      	beq.n	8006f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e7a:	4b88      	ldr	r3, [pc, #544]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d00c      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e86:	4b85      	ldr	r3, [pc, #532]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d112      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e92:	4b82      	ldr	r3, [pc, #520]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea0:	4b7e      	ldr	r3, [pc, #504]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d05b      	beq.n	8006f64 <HAL_RCC_OscConfig+0x108>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d157      	bne.n	8006f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e239      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec0:	d106      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x74>
 8006ec2:	4b76      	ldr	r3, [pc, #472]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a75      	ldr	r2, [pc, #468]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	e01d      	b.n	8006f0c <HAL_RCC_OscConfig+0xb0>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x98>
 8006eda:	4b70      	ldr	r3, [pc, #448]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a6f      	ldr	r2, [pc, #444]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a6c      	ldr	r2, [pc, #432]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e00b      	b.n	8006f0c <HAL_RCC_OscConfig+0xb0>
 8006ef4:	4b69      	ldr	r3, [pc, #420]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a68      	ldr	r2, [pc, #416]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	4b66      	ldr	r3, [pc, #408]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a65      	ldr	r2, [pc, #404]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fd fd44 	bl	80049a0 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f1c:	f7fd fd40 	bl	80049a0 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b64      	cmp	r3, #100	@ 0x64
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e1fe      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0xc0>
 8006f3a:	e014      	b.n	8006f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3c:	f7fd fd30 	bl	80049a0 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f44:	f7fd fd2c 	bl	80049a0 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b64      	cmp	r3, #100	@ 0x64
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e1ea      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f56:	4b51      	ldr	r3, [pc, #324]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0xe8>
 8006f62:	e000      	b.n	8006f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d063      	beq.n	800703a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f72:	4b4a      	ldr	r3, [pc, #296]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 030c 	and.w	r3, r3, #12
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f7e:	4b47      	ldr	r3, [pc, #284]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d11c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f8a:	4b44      	ldr	r3, [pc, #272]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d116      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f96:	4b41      	ldr	r3, [pc, #260]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_RCC_OscConfig+0x152>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d001      	beq.n	8006fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e1be      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fae:	4b3b      	ldr	r3, [pc, #236]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4937      	ldr	r1, [pc, #220]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc2:	e03a      	b.n	800703a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d020      	beq.n	800700e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fcc:	4b34      	ldr	r3, [pc, #208]	@ (80070a0 <HAL_RCC_OscConfig+0x244>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd2:	f7fd fce5 	bl	80049a0 <HAL_GetTick>
 8006fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fda:	f7fd fce1 	bl	80049a0 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e19f      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fec:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff8:	4b28      	ldr	r3, [pc, #160]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4925      	ldr	r1, [pc, #148]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8007008:	4313      	orrs	r3, r2
 800700a:	600b      	str	r3, [r1, #0]
 800700c:	e015      	b.n	800703a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800700e:	4b24      	ldr	r3, [pc, #144]	@ (80070a0 <HAL_RCC_OscConfig+0x244>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007014:	f7fd fcc4 	bl	80049a0 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701c:	f7fd fcc0 	bl	80049a0 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e17e      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800702e:	4b1b      	ldr	r3, [pc, #108]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f0      	bne.n	800701c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d036      	beq.n	80070b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d016      	beq.n	800707c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800704e:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <HAL_RCC_OscConfig+0x248>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007054:	f7fd fca4 	bl	80049a0 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800705c:	f7fd fca0 	bl	80049a0 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e15e      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800706e:	4b0b      	ldr	r3, [pc, #44]	@ (800709c <HAL_RCC_OscConfig+0x240>)
 8007070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x200>
 800707a:	e01b      	b.n	80070b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800707c:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <HAL_RCC_OscConfig+0x248>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007082:	f7fd fc8d 	bl	80049a0 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007088:	e00e      	b.n	80070a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800708a:	f7fd fc89 	bl	80049a0 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d907      	bls.n	80070a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e147      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
 800709c:	40023800 	.word	0x40023800
 80070a0:	42470000 	.word	0x42470000
 80070a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a8:	4b88      	ldr	r3, [pc, #544]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80070aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1ea      	bne.n	800708a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8097 	beq.w	80071f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c2:	2300      	movs	r3, #0
 80070c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c6:	4b81      	ldr	r3, [pc, #516]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10f      	bne.n	80070f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	4b7d      	ldr	r3, [pc, #500]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	4a7c      	ldr	r2, [pc, #496]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80070dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070e2:	4b7a      	ldr	r3, [pc, #488]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f2:	4b77      	ldr	r3, [pc, #476]	@ (80072d0 <HAL_RCC_OscConfig+0x474>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d118      	bne.n	8007130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070fe:	4b74      	ldr	r3, [pc, #464]	@ (80072d0 <HAL_RCC_OscConfig+0x474>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a73      	ldr	r2, [pc, #460]	@ (80072d0 <HAL_RCC_OscConfig+0x474>)
 8007104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800710a:	f7fd fc49 	bl	80049a0 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007112:	f7fd fc45 	bl	80049a0 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e103      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007124:	4b6a      	ldr	r3, [pc, #424]	@ (80072d0 <HAL_RCC_OscConfig+0x474>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f0      	beq.n	8007112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d106      	bne.n	8007146 <HAL_RCC_OscConfig+0x2ea>
 8007138:	4b64      	ldr	r3, [pc, #400]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713c:	4a63      	ldr	r2, [pc, #396]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	6713      	str	r3, [r2, #112]	@ 0x70
 8007144:	e01c      	b.n	8007180 <HAL_RCC_OscConfig+0x324>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b05      	cmp	r3, #5
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0x30c>
 800714e:	4b5f      	ldr	r3, [pc, #380]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007152:	4a5e      	ldr	r2, [pc, #376]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007154:	f043 0304 	orr.w	r3, r3, #4
 8007158:	6713      	str	r3, [r2, #112]	@ 0x70
 800715a:	4b5c      	ldr	r3, [pc, #368]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715e:	4a5b      	ldr	r2, [pc, #364]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	6713      	str	r3, [r2, #112]	@ 0x70
 8007166:	e00b      	b.n	8007180 <HAL_RCC_OscConfig+0x324>
 8007168:	4b58      	ldr	r3, [pc, #352]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716c:	4a57      	ldr	r2, [pc, #348]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	6713      	str	r3, [r2, #112]	@ 0x70
 8007174:	4b55      	ldr	r3, [pc, #340]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007178:	4a54      	ldr	r2, [pc, #336]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 800717a:	f023 0304 	bic.w	r3, r3, #4
 800717e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d015      	beq.n	80071b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007188:	f7fd fc0a 	bl	80049a0 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718e:	e00a      	b.n	80071a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007190:	f7fd fc06 	bl	80049a0 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e0c2      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a6:	4b49      	ldr	r3, [pc, #292]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0ee      	beq.n	8007190 <HAL_RCC_OscConfig+0x334>
 80071b2:	e014      	b.n	80071de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b4:	f7fd fbf4 	bl	80049a0 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ba:	e00a      	b.n	80071d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071bc:	f7fd fbf0 	bl	80049a0 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e0ac      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d2:	4b3e      	ldr	r3, [pc, #248]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1ee      	bne.n	80071bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e4:	4b39      	ldr	r3, [pc, #228]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	4a38      	ldr	r2, [pc, #224]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80071ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8098 	beq.w	800732a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071fa:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b08      	cmp	r3, #8
 8007204:	d05c      	beq.n	80072c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d141      	bne.n	8007292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720e:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <HAL_RCC_OscConfig+0x478>)
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fd fbc4 	bl	80049a0 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721c:	f7fd fbc0 	bl	80049a0 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e07e      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722e:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	019b      	lsls	r3, r3, #6
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	3b01      	subs	r3, #1
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	061b      	lsls	r3, r3, #24
 800725e:	491b      	ldr	r1, [pc, #108]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007260:	4313      	orrs	r3, r2
 8007262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007264:	4b1b      	ldr	r3, [pc, #108]	@ (80072d4 <HAL_RCC_OscConfig+0x478>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800726a:	f7fd fb99 	bl	80049a0 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007272:	f7fd fb95 	bl	80049a0 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e053      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x416>
 8007290:	e04b      	b.n	800732a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <HAL_RCC_OscConfig+0x478>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fd fb82 	bl	80049a0 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a0:	f7fd fb7e 	bl	80049a0 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e03c      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b2:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <HAL_RCC_OscConfig+0x470>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0x444>
 80072be:	e034      	b.n	800732a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d107      	bne.n	80072d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e02f      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40007000 	.word	0x40007000
 80072d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072d8:	4b16      	ldr	r3, [pc, #88]	@ (8007334 <HAL_RCC_OscConfig+0x4d8>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11c      	bne.n	8007326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d115      	bne.n	8007326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007300:	4013      	ands	r3, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007306:	4293      	cmp	r3, r2
 8007308:	d10d      	bne.n	8007326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d106      	bne.n	8007326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007322:	429a      	cmp	r2, r3
 8007324:	d001      	beq.n	800732a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40023800 	.word	0x40023800

08007338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0cc      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800734c:	4b68      	ldr	r3, [pc, #416]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d90c      	bls.n	8007374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735a:	4b65      	ldr	r3, [pc, #404]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007362:	4b63      	ldr	r3, [pc, #396]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d001      	beq.n	8007374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0b8      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d020      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800738c:	4b59      	ldr	r3, [pc, #356]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4a58      	ldr	r2, [pc, #352]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073a4:	4b53      	ldr	r3, [pc, #332]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	4a52      	ldr	r2, [pc, #328]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b0:	4b50      	ldr	r3, [pc, #320]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	494d      	ldr	r1, [pc, #308]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d044      	beq.n	8007458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d107      	bne.n	80073e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073d6:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d119      	bne.n	8007416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07f      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d003      	beq.n	80073f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d107      	bne.n	8007406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f6:	4b3f      	ldr	r3, [pc, #252]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e06f      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007406:	4b3b      	ldr	r3, [pc, #236]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e067      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007416:	4b37      	ldr	r3, [pc, #220]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f023 0203 	bic.w	r2, r3, #3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	4934      	ldr	r1, [pc, #208]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	4313      	orrs	r3, r2
 8007426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007428:	f7fd faba 	bl	80049a0 <HAL_GetTick>
 800742c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800742e:	e00a      	b.n	8007446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007430:	f7fd fab6 	bl	80049a0 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e04f      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007446:	4b2b      	ldr	r3, [pc, #172]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 020c 	and.w	r2, r3, #12
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	429a      	cmp	r2, r3
 8007456:	d1eb      	bne.n	8007430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007458:	4b25      	ldr	r3, [pc, #148]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d20c      	bcs.n	8007480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007466:	4b22      	ldr	r3, [pc, #136]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800746e:	4b20      	ldr	r3, [pc, #128]	@ (80074f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d001      	beq.n	8007480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e032      	b.n	80074e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800748c:	4b19      	ldr	r3, [pc, #100]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	4916      	ldr	r1, [pc, #88]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	4313      	orrs	r3, r2
 800749c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	490e      	ldr	r1, [pc, #56]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074be:	f000 f821 	bl	8007504 <HAL_RCC_GetSysClockFreq>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	091b      	lsrs	r3, r3, #4
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	490a      	ldr	r1, [pc, #40]	@ (80074f8 <HAL_RCC_ClockConfig+0x1c0>)
 80074d0:	5ccb      	ldrb	r3, [r1, r3]
 80074d2:	fa22 f303 	lsr.w	r3, r2, r3
 80074d6:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <HAL_RCC_ClockConfig+0x1c4>)
 80074d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074da:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <HAL_RCC_ClockConfig+0x1c8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fa1a 	bl	8004918 <HAL_InitTick>

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40023c00 	.word	0x40023c00
 80074f4:	40023800 	.word	0x40023800
 80074f8:	0800af48 	.word	0x0800af48
 80074fc:	20000100 	.word	0x20000100
 8007500:	20000190 	.word	0x20000190

08007504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007508:	b094      	sub	sp, #80	@ 0x50
 800750a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007510:	2300      	movs	r3, #0
 8007512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007514:	2300      	movs	r3, #0
 8007516:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800751c:	4b79      	ldr	r3, [pc, #484]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	2b08      	cmp	r3, #8
 8007526:	d00d      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x40>
 8007528:	2b08      	cmp	r3, #8
 800752a:	f200 80e1 	bhi.w	80076f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x34>
 8007532:	2b04      	cmp	r3, #4
 8007534:	d003      	beq.n	800753e <HAL_RCC_GetSysClockFreq+0x3a>
 8007536:	e0db      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007538:	4b73      	ldr	r3, [pc, #460]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x204>)
 800753a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800753c:	e0db      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800753e:	4b73      	ldr	r3, [pc, #460]	@ (800770c <HAL_RCC_GetSysClockFreq+0x208>)
 8007540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007542:	e0d8      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007544:	4b6f      	ldr	r3, [pc, #444]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800754c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800754e:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d063      	beq.n	8007622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800755a:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	099b      	lsrs	r3, r3, #6
 8007560:	2200      	movs	r2, #0
 8007562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007564:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30
 800756e:	2300      	movs	r3, #0
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	f04f 0000 	mov.w	r0, #0
 800757e:	f04f 0100 	mov.w	r1, #0
 8007582:	0159      	lsls	r1, r3, #5
 8007584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007588:	0150      	lsls	r0, r2, #5
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4621      	mov	r1, r4
 8007590:	1a51      	subs	r1, r2, r1
 8007592:	6139      	str	r1, [r7, #16]
 8007594:	4629      	mov	r1, r5
 8007596:	eb63 0301 	sbc.w	r3, r3, r1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a8:	4659      	mov	r1, fp
 80075aa:	018b      	lsls	r3, r1, #6
 80075ac:	4651      	mov	r1, sl
 80075ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075b2:	4651      	mov	r1, sl
 80075b4:	018a      	lsls	r2, r1, #6
 80075b6:	4651      	mov	r1, sl
 80075b8:	ebb2 0801 	subs.w	r8, r2, r1
 80075bc:	4659      	mov	r1, fp
 80075be:	eb63 0901 	sbc.w	r9, r3, r1
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075d6:	4690      	mov	r8, r2
 80075d8:	4699      	mov	r9, r3
 80075da:	4623      	mov	r3, r4
 80075dc:	eb18 0303 	adds.w	r3, r8, r3
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	462b      	mov	r3, r5
 80075e4:	eb49 0303 	adc.w	r3, r9, r3
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075f6:	4629      	mov	r1, r5
 80075f8:	024b      	lsls	r3, r1, #9
 80075fa:	4621      	mov	r1, r4
 80075fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007600:	4621      	mov	r1, r4
 8007602:	024a      	lsls	r2, r1, #9
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800760a:	2200      	movs	r2, #0
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800760e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007614:	f7f9 f800 	bl	8000618 <__aeabi_uldivmod>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4613      	mov	r3, r2
 800761e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007620:	e058      	b.n	80076d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007622:	4b38      	ldr	r3, [pc, #224]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	2200      	movs	r2, #0
 800762a:	4618      	mov	r0, r3
 800762c:	4611      	mov	r1, r2
 800762e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007632:	623b      	str	r3, [r7, #32]
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
 8007638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	f04f 0000 	mov.w	r0, #0
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	0159      	lsls	r1, r3, #5
 800764a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800764e:	0150      	lsls	r0, r2, #5
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4641      	mov	r1, r8
 8007656:	ebb2 0a01 	subs.w	sl, r2, r1
 800765a:	4649      	mov	r1, r9
 800765c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800766c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007674:	ebb2 040a 	subs.w	r4, r2, sl
 8007678:	eb63 050b 	sbc.w	r5, r3, fp
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	00eb      	lsls	r3, r5, #3
 8007686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800768a:	00e2      	lsls	r2, r4, #3
 800768c:	4614      	mov	r4, r2
 800768e:	461d      	mov	r5, r3
 8007690:	4643      	mov	r3, r8
 8007692:	18e3      	adds	r3, r4, r3
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	464b      	mov	r3, r9
 8007698:	eb45 0303 	adc.w	r3, r5, r3
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076aa:	4629      	mov	r1, r5
 80076ac:	028b      	lsls	r3, r1, #10
 80076ae:	4621      	mov	r1, r4
 80076b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076b4:	4621      	mov	r1, r4
 80076b6:	028a      	lsls	r2, r1, #10
 80076b8:	4610      	mov	r0, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076be:	2200      	movs	r2, #0
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	61fa      	str	r2, [r7, #28]
 80076c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076c8:	f7f8 ffa6 	bl	8000618 <__aeabi_uldivmod>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4613      	mov	r3, r2
 80076d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <HAL_RCC_GetSysClockFreq+0x200>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	0c1b      	lsrs	r3, r3, #16
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	3301      	adds	r3, #1
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80076e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076ee:	e002      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076f0:	4b05      	ldr	r3, [pc, #20]	@ (8007708 <HAL_RCC_GetSysClockFreq+0x204>)
 80076f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3750      	adds	r7, #80	@ 0x50
 80076fc:	46bd      	mov	sp, r7
 80076fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007702:	bf00      	nop
 8007704:	40023800 	.word	0x40023800
 8007708:	00f42400 	.word	0x00f42400
 800770c:	007a1200 	.word	0x007a1200

08007710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007714:	4b03      	ldr	r3, [pc, #12]	@ (8007724 <HAL_RCC_GetHCLKFreq+0x14>)
 8007716:	681b      	ldr	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000100 	.word	0x20000100

08007728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800772c:	f7ff fff0 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8007730:	4602      	mov	r2, r0
 8007732:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	0a9b      	lsrs	r3, r3, #10
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	4903      	ldr	r1, [pc, #12]	@ (800774c <HAL_RCC_GetPCLK1Freq+0x24>)
 800773e:	5ccb      	ldrb	r3, [r1, r3]
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40023800 	.word	0x40023800
 800774c:	0800af58 	.word	0x0800af58

08007750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007754:	f7ff ffdc 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	0b5b      	lsrs	r3, r3, #13
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4903      	ldr	r1, [pc, #12]	@ (8007774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40023800 	.word	0x40023800
 8007774:	0800af58 	.word	0x0800af58

08007778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d075      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077ac:	4b91      	ldr	r3, [pc, #580]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077b2:	f7fd f8f5 	bl	80049a0 <HAL_GetTick>
 80077b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b8:	e008      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077ba:	f7fd f8f1 	bl	80049a0 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e189      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077cc:	4b8a      	ldr	r3, [pc, #552]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f0      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	019a      	lsls	r2, r3, #6
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	071b      	lsls	r3, r3, #28
 80077f0:	4981      	ldr	r1, [pc, #516]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01f      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007804:	4b7c      	ldr	r3, [pc, #496]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	019a      	lsls	r2, r3, #6
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	431a      	orrs	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	071b      	lsls	r3, r3, #28
 8007824:	4974      	ldr	r1, [pc, #464]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800782c:	4b72      	ldr	r3, [pc, #456]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007832:	f023 021f 	bic.w	r2, r3, #31
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	3b01      	subs	r3, #1
 800783c:	496e      	ldr	r1, [pc, #440]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	019a      	lsls	r2, r3, #6
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	071b      	lsls	r3, r3, #28
 8007864:	4964      	ldr	r1, [pc, #400]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800786c:	4b61      	ldr	r3, [pc, #388]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007872:	f7fd f895 	bl	80049a0 <HAL_GetTick>
 8007876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007878:	e008      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800787a:	f7fd f891 	bl	80049a0 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e129      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800788c:	4b5a      	ldr	r3, [pc, #360]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d079      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078b0:	4b52      	ldr	r3, [pc, #328]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078b6:	f7fd f873 	bl	80049a0 <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078bc:	e008      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80078be:	f7fd f86f 	bl	80049a0 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e107      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078d0:	4b49      	ldr	r3, [pc, #292]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078dc:	d0ef      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078ea:	4b43      	ldr	r3, [pc, #268]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	0f1b      	lsrs	r3, r3, #28
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	019a      	lsls	r2, r3, #6
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	431a      	orrs	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	071b      	lsls	r3, r3, #28
 800790a:	493b      	ldr	r1, [pc, #236]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007912:	4b39      	ldr	r3, [pc, #228]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007918:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	3b01      	subs	r3, #1
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	4934      	ldr	r1, [pc, #208]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01e      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007938:	4b2f      	ldr	r3, [pc, #188]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793e:	0e1b      	lsrs	r3, r3, #24
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	019a      	lsls	r2, r3, #6
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	061b      	lsls	r3, r3, #24
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	071b      	lsls	r3, r3, #28
 8007958:	4927      	ldr	r1, [pc, #156]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007960:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007966:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796e:	4922      	ldr	r1, [pc, #136]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007976:	4b21      	ldr	r3, [pc, #132]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800797c:	f7fd f810 	bl	80049a0 <HAL_GetTick>
 8007980:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007984:	f7fd f80c 	bl	80049a0 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0a4      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007996:	4b18      	ldr	r3, [pc, #96]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a2:	d1ef      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 808b 	beq.w	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	4a0f      	ldr	r2, [pc, #60]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80079d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079da:	f7fc ffe1 	bl	80049a0 <HAL_GetTick>
 80079de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079e0:	e010      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079e2:	f7fc ffdd 	bl	80049a0 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d909      	bls.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e075      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80079f4:	42470068 	.word	0x42470068
 80079f8:	40023800 	.word	0x40023800
 80079fc:	42470070 	.word	0x42470070
 8007a00:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a04:	4b38      	ldr	r3, [pc, #224]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0e8      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a10:	4b36      	ldr	r3, [pc, #216]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02f      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d028      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a38:	4b2d      	ldr	r3, [pc, #180]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007a44:	4a29      	ldr	r2, [pc, #164]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a4a:	4b28      	ldr	r3, [pc, #160]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d114      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007a56:	f7fc ffa3 	bl	80049a0 <HAL_GetTick>
 8007a5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5c:	e00a      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fc ff9f 	bl	80049a0 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e035      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a74:	4b1d      	ldr	r3, [pc, #116]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ee      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8c:	d10d      	bne.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a8e:	4b17      	ldr	r3, [pc, #92]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa2:	4912      	ldr	r1, [pc, #72]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	e005      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007aaa:	4b10      	ldr	r3, [pc, #64]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	4a0f      	ldr	r2, [pc, #60]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ab0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ab4:	6093      	str	r3, [r2, #8]
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ab8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac2:	490a      	ldr	r1, [pc, #40]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007ada:	4b06      	ldr	r3, [pc, #24]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007adc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	40007000 	.word	0x40007000
 8007aec:	40023800 	.word	0x40023800
 8007af0:	42470e40 	.word	0x42470e40
 8007af4:	424711e0 	.word	0x424711e0

08007af8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e025      	b.n	8007b58 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f81d 	bl	8007b60 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f001 fd0f 	bl	800955c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	f001 fd7a 	bl	8009642 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d101      	bne.n	8007b90 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e018      	b.n	8007bc2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fdcd 	bl	8009740 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d104      	bne.n	8007bb8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8007bb6:	e003      	b.n	8007bc0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d101      	bne.n	8007be4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007be0:	2302      	movs	r3, #2
 8007be2:	e00e      	b.n	8007c02 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fde0 	bl	80097b8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e05d      	b.n	8007cd8 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f87d 	bl	8007d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	ea42 0103 	orr.w	r1, r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	f003 0104 	and.w	r1, r3, #4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cac:	d104      	bne.n	8007cb8 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cb6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69da      	ldr	r2, [r3, #28]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e01a      	b.n	8007d28 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f81a 	bl	8007d44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_SPI_Transmit+0x22>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e140      	b.n	8007ffc <HAL_SPI_Transmit+0x2a4>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d82:	f7fc fe0d 	bl	80049a0 <HAL_GetTick>
 8007d86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d002      	beq.n	8007d9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d9c:	e125      	b.n	8007fea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <HAL_SPI_Transmit+0x52>
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dae:	e11c      	b.n	8007fea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2203      	movs	r2, #3
 8007db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	88fa      	ldrh	r2, [r7, #6]
 8007dce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df6:	d107      	bne.n	8007e08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e06:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e10:	d10f      	bne.n	8007e32 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e30:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3c:	2b40      	cmp	r3, #64	@ 0x40
 8007e3e:	d007      	beq.n	8007e50 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e58:	d14b      	bne.n	8007ef2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Transmit+0x110>
 8007e62:	8afb      	ldrh	r3, [r7, #22]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d13e      	bne.n	8007ee6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e78:	1c9a      	adds	r2, r3, #2
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e8c:	e02b      	b.n	8007ee6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d112      	bne.n	8007ec2 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea0:	881a      	ldrh	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eac:	1c9a      	adds	r2, r3, #2
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ec0:	e011      	b.n	8007ee6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec2:	f7fc fd6d 	bl	80049a0 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d803      	bhi.n	8007eda <HAL_SPI_Transmit+0x182>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d102      	bne.n	8007ee0 <HAL_SPI_Transmit+0x188>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ee4:	e081      	b.n	8007fea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ce      	bne.n	8007e8e <HAL_SPI_Transmit+0x136>
 8007ef0:	e04c      	b.n	8007f8c <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_SPI_Transmit+0x1a8>
 8007efa:	8afb      	ldrh	r3, [r7, #22]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d140      	bne.n	8007f82 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f26:	e02c      	b.n	8007f82 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d113      	bne.n	8007f5e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f5c:	e011      	b.n	8007f82 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f5e:	f7fc fd1f 	bl	80049a0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d803      	bhi.n	8007f76 <HAL_SPI_Transmit+0x21e>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d102      	bne.n	8007f7c <HAL_SPI_Transmit+0x224>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d102      	bne.n	8007f82 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f80:	e033      	b.n	8007fea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1cd      	bne.n	8007f28 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f94:	d107      	bne.n	8007fa6 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fa4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fc94 	bl	80088d8 <SPI_EndRxTxTransaction>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e000      	b.n	8007fea <HAL_SPI_Transmit+0x292>
  }

error:
 8007fe8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3720      	adds	r7, #32
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008020:	d112      	bne.n	8008048 <HAL_SPI_Receive+0x44>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10e      	bne.n	8008048 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2204      	movs	r2, #4
 800802e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008032:	88fa      	ldrh	r2, [r7, #6]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4613      	mov	r3, r2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f95f 	bl	8008302 <HAL_SPI_TransmitReceive>
 8008044:	4603      	mov	r3, r0
 8008046:	e158      	b.n	80082fa <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <HAL_SPI_Receive+0x52>
 8008052:	2302      	movs	r3, #2
 8008054:	e151      	b.n	80082fa <HAL_SPI_Receive+0x2f6>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800805e:	f7fc fc9f 	bl	80049a0 <HAL_GetTick>
 8008062:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d002      	beq.n	8008076 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008070:	2302      	movs	r3, #2
 8008072:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008074:	e138      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_SPI_Receive+0x7e>
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008086:	e12f      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2204      	movs	r2, #4
 800808c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ce:	d116      	bne.n	80080fe <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080ee:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008106:	d107      	bne.n	8008118 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008116:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008122:	2b40      	cmp	r3, #64	@ 0x40
 8008124:	d007      	beq.n	8008136 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008134:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d162      	bne.n	8008204 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800813e:	e02e      	b.n	800819e <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	d115      	bne.n	800817a <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f103 020c 	add.w	r2, r3, #12
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815a:	7812      	ldrb	r2, [r2, #0]
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008178:	e011      	b.n	800819e <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800817a:	f7fc fc11 	bl	80049a0 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d803      	bhi.n	8008192 <HAL_SPI_Receive+0x18e>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d102      	bne.n	8008198 <HAL_SPI_Receive+0x194>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800819c:	e0a4      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1cb      	bne.n	8008140 <HAL_SPI_Receive+0x13c>
 80081a8:	e031      	b.n	800820e <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d113      	bne.n	80081e0 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c2:	b292      	uxth	r2, r2
 80081c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	1c9a      	adds	r2, r3, #2
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081de:	e011      	b.n	8008204 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e0:	f7fc fbde 	bl	80049a0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d803      	bhi.n	80081f8 <HAL_SPI_Receive+0x1f4>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f6:	d102      	bne.n	80081fe <HAL_SPI_Receive+0x1fa>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008202:	e071      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1cd      	bne.n	80081aa <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008216:	d142      	bne.n	800829e <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008226:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2201      	movs	r2, #1
 8008230:	2101      	movs	r1, #1
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fa81 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008242:	e051      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800824c:	d107      	bne.n	800825e <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	b292      	uxth	r2, r2
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	e008      	b.n	8008270 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f103 020c 	add.w	r2, r3, #12
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	2101      	movs	r1, #1
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fa5d 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d008      	beq.n	8008298 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f043 0202 	orr.w	r2, r3, #2
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008296:	e027      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fab3 	bl	800880e <SPI_EndRxTransaction>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b10      	cmp	r3, #16
 80082c0:	d10a      	bne.n	80082d8 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c6:	f043 0202 	orr.w	r2, r3, #2
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80082d6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
 80082e4:	e000      	b.n	80082e8 <HAL_SPI_Receive+0x2e4>
  }

error :
 80082e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b08e      	sub	sp, #56	@ 0x38
 8008306:	af02      	add	r7, sp, #8
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
 800830e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008310:	2301      	movs	r3, #1
 8008312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x26>
 8008324:	2302      	movs	r3, #2
 8008326:	e1f6      	b.n	8008716 <HAL_SPI_TransmitReceive+0x414>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008330:	f7fc fb36 	bl	80049a0 <HAL_GetTick>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800833c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008346:	887b      	ldrh	r3, [r7, #2]
 8008348:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800834a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800834e:	2b01      	cmp	r3, #1
 8008350:	d00f      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x70>
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008358:	d107      	bne.n	800836a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <HAL_SPI_TransmitReceive+0x68>
 8008362:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008366:	2b04      	cmp	r3, #4
 8008368:	d003      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800836a:	2302      	movs	r3, #2
 800836c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008370:	e1c7      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_SPI_TransmitReceive+0x82>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_SPI_TransmitReceive+0x82>
 800837e:	887b      	ldrh	r3, [r7, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800838a:	e1ba      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b04      	cmp	r3, #4
 8008396:	d003      	beq.n	80083a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2205      	movs	r2, #5
 800839c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	887a      	ldrh	r2, [r7, #2]
 80083b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	887a      	ldrh	r2, [r7, #2]
 80083c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	887a      	ldrh	r2, [r7, #2]
 80083c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083de:	d10f      	bne.n	8008400 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083fe:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840a:	2b40      	cmp	r3, #64	@ 0x40
 800840c:	d007      	beq.n	800841e <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800841c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008426:	f040 808b 	bne.w	8008540 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_SPI_TransmitReceive+0x136>
 8008432:	8b7b      	ldrh	r3, [r7, #26]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d178      	bne.n	800852a <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843c:	881a      	ldrh	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008448:	1c9a      	adds	r2, r3, #2
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800845c:	e065      	b.n	800852a <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d12d      	bne.n	80084c8 <HAL_SPI_TransmitReceive+0x1c6>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d028      	beq.n	80084c8 <HAL_SPI_TransmitReceive+0x1c6>
 8008476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d125      	bne.n	80084c8 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10c      	bne.n	80084c8 <HAL_SPI_TransmitReceive+0x1c6>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b6:	d107      	bne.n	80084c8 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084c6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d119      	bne.n	800850a <HAL_SPI_TransmitReceive+0x208>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d014      	beq.n	800850a <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	b292      	uxth	r2, r2
 80084ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f2:	1c9a      	adds	r2, r3, #2
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008506:	2301      	movs	r3, #1
 8008508:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800850a:	f7fc fa49 	bl	80049a0 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008516:	429a      	cmp	r2, r3
 8008518:	d807      	bhi.n	800852a <HAL_SPI_TransmitReceive+0x228>
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d003      	beq.n	800852a <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008528:	e0eb      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800852e:	b29b      	uxth	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d194      	bne.n	800845e <HAL_SPI_TransmitReceive+0x15c>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d18f      	bne.n	800845e <HAL_SPI_TransmitReceive+0x15c>
 800853e:	e08e      	b.n	800865e <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_SPI_TransmitReceive+0x24c>
 8008548:	8b7b      	ldrh	r3, [r7, #26]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d17d      	bne.n	800864a <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	330c      	adds	r3, #12
 8008558:	7812      	ldrb	r2, [r2, #0]
 800855a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008574:	e069      	b.n	800864a <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b02      	cmp	r3, #2
 8008582:	d12e      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x2e0>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d029      	beq.n	80085e2 <HAL_SPI_TransmitReceive+0x2e0>
 800858e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d126      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	330c      	adds	r3, #12
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10c      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x2e0>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085d0:	d107      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085e0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d119      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x322>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d014      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008620:	2301      	movs	r3, #1
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008624:	f7fc f9bc 	bl	80049a0 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008630:	429a      	cmp	r2, r3
 8008632:	d803      	bhi.n	800863c <HAL_SPI_TransmitReceive+0x33a>
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d102      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x340>
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8008648:	e05b      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d190      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x274>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d18b      	bne.n	8008576 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008666:	d117      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866e:	2201      	movs	r2, #1
 8008670:	2101      	movs	r1, #1
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f861 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008682:	f043 0202 	orr.w	r2, r3, #2
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8008690:	e037      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b10      	cmp	r3, #16
 80086a4:	d10d      	bne.n	80086c2 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086aa:	f043 0202 	orr.w	r2, r3, #2
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80086ba:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f906 	bl	80088d8 <SPI_EndRxTxTransaction>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d006      	beq.n	80086e0 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80086de:	e010      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	e000      	b.n	8008702 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008700:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008712:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008716:	4618      	mov	r0, r3
 8008718:	3730      	adds	r7, #48	@ 0x30
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800872c:	b2db      	uxtb	r3, r3
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	4613      	mov	r3, r2
 8008748:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800874a:	e04c      	b.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d048      	beq.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008754:	f7fc f924 	bl	80049a0 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d902      	bls.n	800876a <SPI_WaitFlagStateUntilTimeout+0x30>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d13d      	bne.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008782:	d111      	bne.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800878c:	d004      	beq.n	8008798 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008796:	d107      	bne.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b0:	d10f      	bne.n	80087d2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e00f      	b.n	8008806 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4013      	ands	r3, r2
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	429a      	cmp	r2, r3
 8008802:	d1a3      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af02      	add	r7, sp, #8
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008822:	d111      	bne.n	8008848 <SPI_EndRxTransaction+0x3a>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800882c:	d004      	beq.n	8008838 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008836:	d107      	bne.n	8008848 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008846:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008850:	d12a      	bne.n	80088a8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800885a:	d012      	beq.n	8008882 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2200      	movs	r2, #0
 8008864:	2180      	movs	r1, #128	@ 0x80
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff ff67 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d02d      	beq.n	80088ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008876:	f043 0220 	orr.w	r2, r3, #32
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e026      	b.n	80088d0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	2101      	movs	r1, #1
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff ff54 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01a      	beq.n	80088ce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889c:	f043 0220 	orr.w	r2, r3, #32
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e013      	b.n	80088d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	2101      	movs	r1, #1
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ff41 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e000      	b.n	80088d0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af02      	add	r7, sp, #8
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008954 <SPI_EndRxTxTransaction+0x7c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <SPI_EndRxTxTransaction+0x80>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	0d5b      	lsrs	r3, r3, #21
 80088f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008902:	d112      	bne.n	800892a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	2180      	movs	r1, #128	@ 0x80
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff ff13 	bl	800873a <SPI_WaitFlagStateUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891e:	f043 0220 	orr.w	r2, r3, #32
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e00f      	b.n	800894a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b01      	subs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008940:	2b80      	cmp	r3, #128	@ 0x80
 8008942:	d0f2      	beq.n	800892a <SPI_EndRxTxTransaction+0x52>
 8008944:	e000      	b.n	8008948 <SPI_EndRxTxTransaction+0x70>
        break;
 8008946:	bf00      	nop
  }

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000100 	.word	0x20000100
 8008958:	165e9f81 	.word	0x165e9f81

0800895c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e03f      	b.n	80089ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7f9 fe06 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2224      	movs	r2, #36	@ 0x24
 800898c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800899e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f90b 	bl	8008bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68da      	ldr	r2, [r3, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b088      	sub	sp, #32
 80089fa:	af02      	add	r7, sp, #8
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	f040 8083 	bne.w	8008b1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_UART_Transmit+0x2e>
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e07b      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <HAL_UART_Transmit+0x40>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e074      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2221      	movs	r2, #33	@ 0x21
 8008a48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a4c:	f7fb ffa8 	bl	80049a0 <HAL_GetTick>
 8008a50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	88fa      	ldrh	r2, [r7, #6]
 8008a5c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008a66:	e042      	b.n	8008aee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7e:	d122      	bne.n	8008ac6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2180      	movs	r1, #128	@ 0x80
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f84c 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e042      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	3302      	adds	r3, #2
 8008aba:	60bb      	str	r3, [r7, #8]
 8008abc:	e017      	b.n	8008aee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	e013      	b.n	8008aee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2200      	movs	r2, #0
 8008ace:	2180      	movs	r1, #128	@ 0x80
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f829 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e01f      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	60ba      	str	r2, [r7, #8]
 8008ae6:	781a      	ldrb	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1b7      	bne.n	8008a68 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2200      	movs	r2, #0
 8008b00:	2140      	movs	r1, #64	@ 0x40
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f810 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e006      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	4613      	mov	r3, r2
 8008b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b38:	e02c      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d028      	beq.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b48:	f7fb ff2a 	bl	80049a0 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d21d      	bcs.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008b66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e00f      	b.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d0c3      	beq.n	8008b3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc0:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008bda:	68d9      	ldr	r1, [r3, #12]
 8008bdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	ea40 0301 	orr.w	r3, r0, r1
 8008be6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8008c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c16:	f021 010c 	bic.w	r1, r1, #12
 8008c1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8008c24:	430b      	orrs	r3, r1
 8008c26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c38:	6999      	ldr	r1, [r3, #24]
 8008c3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	ea40 0301 	orr.w	r3, r0, r1
 8008c44:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c50:	f040 824a 	bne.w	80090e8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b96      	ldr	r3, [pc, #600]	@ (8008eb4 <UART_SetConfig+0x2f8>)
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d006      	beq.n	8008c6e <UART_SetConfig+0xb2>
 8008c60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b94      	ldr	r3, [pc, #592]	@ (8008eb8 <UART_SetConfig+0x2fc>)
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 8129 	bne.w	8008ec0 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c6e:	f7fe fd6f 	bl	8007750 <HAL_RCC_GetPCLK2Freq>
 8008c72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8008c80:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8008c84:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8008c88:	4622      	mov	r2, r4
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	1891      	adds	r1, r2, r2
 8008c8e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8008c92:	415b      	adcs	r3, r3
 8008c94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c98:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	1851      	adds	r1, r2, r1
 8008ca0:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	414b      	adcs	r3, r1
 8008ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	00cb      	lsls	r3, r1, #3
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	00ca      	lsls	r2, r1, #3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4622      	mov	r2, r4
 8008cce:	189b      	adds	r3, r3, r2
 8008cd0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	460a      	mov	r2, r1
 8008cd8:	eb42 0303 	adc.w	r3, r2, r3
 8008cdc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8008ce0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8008cec:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8008cf0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	18db      	adds	r3, r3, r3
 8008cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	eb42 0303 	adc.w	r3, r2, r3
 8008d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d06:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8008d0a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8008d0e:	f7f7 fc83 	bl	8000618 <__aeabi_uldivmod>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4b69      	ldr	r3, [pc, #420]	@ (8008ebc <UART_SetConfig+0x300>)
 8008d18:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	011c      	lsls	r4, r3, #4
 8008d20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8008d2a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8008d2e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8008d32:	4642      	mov	r2, r8
 8008d34:	464b      	mov	r3, r9
 8008d36:	1891      	adds	r1, r2, r2
 8008d38:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8008d3c:	415b      	adcs	r3, r3
 8008d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d42:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8008d46:	4641      	mov	r1, r8
 8008d48:	1851      	adds	r1, r2, r1
 8008d4a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8008d4e:	4649      	mov	r1, r9
 8008d50:	414b      	adcs	r3, r1
 8008d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8008d62:	4659      	mov	r1, fp
 8008d64:	00cb      	lsls	r3, r1, #3
 8008d66:	4651      	mov	r1, sl
 8008d68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d6c:	4651      	mov	r1, sl
 8008d6e:	00ca      	lsls	r2, r1, #3
 8008d70:	4610      	mov	r0, r2
 8008d72:	4619      	mov	r1, r3
 8008d74:	4603      	mov	r3, r0
 8008d76:	4642      	mov	r2, r8
 8008d78:	189b      	adds	r3, r3, r2
 8008d7a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8008d7e:	464b      	mov	r3, r9
 8008d80:	460a      	mov	r2, r1
 8008d82:	eb42 0303 	adc.w	r3, r2, r3
 8008d86:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8008d8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8008d96:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8008d9a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8008d9e:	460b      	mov	r3, r1
 8008da0:	18db      	adds	r3, r3, r3
 8008da2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008da6:	4613      	mov	r3, r2
 8008da8:	eb42 0303 	adc.w	r3, r2, r3
 8008dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008db0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8008db4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8008db8:	f7f7 fc2e 	bl	8000618 <__aeabi_uldivmod>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8008ebc <UART_SetConfig+0x300>)
 8008dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8008dc8:	095b      	lsrs	r3, r3, #5
 8008dca:	2264      	movs	r2, #100	@ 0x64
 8008dcc:	fb02 f303 	mul.w	r3, r2, r3
 8008dd0:	1acb      	subs	r3, r1, r3
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008dd8:	4b38      	ldr	r3, [pc, #224]	@ (8008ebc <UART_SetConfig+0x300>)
 8008dda:	fba3 2302 	umull	r2, r3, r3, r2
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008de6:	441c      	add	r4, r3
 8008de8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8008df2:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8008df6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	1891      	adds	r1, r2, r2
 8008e00:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008e04:	415b      	adcs	r3, r3
 8008e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e0a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8008e0e:	4641      	mov	r1, r8
 8008e10:	1851      	adds	r1, r2, r1
 8008e12:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008e16:	4649      	mov	r1, r9
 8008e18:	414b      	adcs	r3, r1
 8008e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	00cb      	lsls	r3, r1, #3
 8008e2e:	4651      	mov	r1, sl
 8008e30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e34:	4651      	mov	r1, sl
 8008e36:	00ca      	lsls	r2, r1, #3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4642      	mov	r2, r8
 8008e40:	189b      	adds	r3, r3, r2
 8008e42:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8008e46:	464b      	mov	r3, r9
 8008e48:	460a      	mov	r2, r1
 8008e4a:	eb42 0303 	adc.w	r3, r2, r3
 8008e4e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008e52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8008e5e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8008e62:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8008e66:	460b      	mov	r3, r1
 8008e68:	18db      	adds	r3, r3, r3
 8008e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e6e:	4613      	mov	r3, r2
 8008e70:	eb42 0303 	adc.w	r3, r2, r3
 8008e74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e78:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008e7c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8008e80:	f7f7 fbca 	bl	8000618 <__aeabi_uldivmod>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <UART_SetConfig+0x300>)
 8008e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	2164      	movs	r1, #100	@ 0x64
 8008e92:	fb01 f303 	mul.w	r3, r1, r3
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	3332      	adds	r3, #50	@ 0x32
 8008e9c:	4a07      	ldr	r2, [pc, #28]	@ (8008ebc <UART_SetConfig+0x300>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f003 0207 	and.w	r2, r3, #7
 8008ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4422      	add	r2, r4
 8008eb0:	609a      	str	r2, [r3, #8]
 8008eb2:	e34a      	b.n	800954a <UART_SetConfig+0x98e>
 8008eb4:	40011000 	.word	0x40011000
 8008eb8:	40011400 	.word	0x40011400
 8008ebc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fe fc32 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8008ec4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8008ed2:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8008ed6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8008eda:	4622      	mov	r2, r4
 8008edc:	462b      	mov	r3, r5
 8008ede:	1891      	adds	r1, r2, r2
 8008ee0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8008ee4:	415b      	adcs	r3, r3
 8008ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008eea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008eee:	4621      	mov	r1, r4
 8008ef0:	eb12 0a01 	adds.w	sl, r2, r1
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	eb43 0b01 	adc.w	fp, r3, r1
 8008efa:	f04f 0200 	mov.w	r2, #0
 8008efe:	f04f 0300 	mov.w	r3, #0
 8008f02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f0e:	4692      	mov	sl, r2
 8008f10:	469b      	mov	fp, r3
 8008f12:	4623      	mov	r3, r4
 8008f14:	eb1a 0303 	adds.w	r3, sl, r3
 8008f18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	eb4b 0303 	adc.w	r3, fp, r3
 8008f22:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8008f26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8008f32:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8008f36:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	18db      	adds	r3, r3, r3
 8008f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f42:	4613      	mov	r3, r2
 8008f44:	eb42 0303 	adc.w	r3, r2, r3
 8008f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f4c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008f50:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8008f54:	f7f7 fb60 	bl	8000618 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b61      	ldr	r3, [pc, #388]	@ (80090e4 <UART_SetConfig+0x528>)
 8008f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	011c      	lsls	r4, r3, #4
 8008f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8008f70:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8008f74:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	1891      	adds	r1, r2, r2
 8008f7e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8008f80:	415b      	adcs	r3, r3
 8008f82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f84:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8008f88:	4641      	mov	r1, r8
 8008f8a:	1851      	adds	r1, r2, r1
 8008f8c:	6739      	str	r1, [r7, #112]	@ 0x70
 8008f8e:	4649      	mov	r1, r9
 8008f90:	414b      	adcs	r3, r1
 8008f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	00cb      	lsls	r3, r1, #3
 8008fa4:	4651      	mov	r1, sl
 8008fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008faa:	4651      	mov	r1, sl
 8008fac:	00ca      	lsls	r2, r1, #3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	189b      	adds	r3, r3, r2
 8008fb8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	eb42 0303 	adc.w	r3, r2, r3
 8008fc4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8008fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008fd4:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8008fd8:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8008fdc:	460b      	mov	r3, r1
 8008fde:	18db      	adds	r3, r3, r3
 8008fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008fee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8008ff2:	f7f7 fb11 	bl	8000618 <__aeabi_uldivmod>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4b39      	ldr	r3, [pc, #228]	@ (80090e4 <UART_SetConfig+0x528>)
 8008ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	2264      	movs	r2, #100	@ 0x64
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	1acb      	subs	r3, r1, r3
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009012:	4b34      	ldr	r3, [pc, #208]	@ (80090e4 <UART_SetConfig+0x528>)
 8009014:	fba3 2302 	umull	r2, r3, r3, r2
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009020:	441c      	add	r4, r3
 8009022:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009026:	2200      	movs	r2, #0
 8009028:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800902c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8009030:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8009034:	4642      	mov	r2, r8
 8009036:	464b      	mov	r3, r9
 8009038:	1891      	adds	r1, r2, r2
 800903a:	6639      	str	r1, [r7, #96]	@ 0x60
 800903c:	415b      	adcs	r3, r3
 800903e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009040:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009044:	4641      	mov	r1, r8
 8009046:	1851      	adds	r1, r2, r1
 8009048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800904a:	4649      	mov	r1, r9
 800904c:	414b      	adcs	r3, r1
 800904e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800905c:	4659      	mov	r1, fp
 800905e:	00cb      	lsls	r3, r1, #3
 8009060:	4651      	mov	r1, sl
 8009062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009066:	4651      	mov	r1, sl
 8009068:	00ca      	lsls	r2, r1, #3
 800906a:	4610      	mov	r0, r2
 800906c:	4619      	mov	r1, r3
 800906e:	4603      	mov	r3, r0
 8009070:	4642      	mov	r2, r8
 8009072:	189b      	adds	r3, r3, r2
 8009074:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8009078:	464b      	mov	r3, r9
 800907a:	460a      	mov	r2, r1
 800907c:	eb42 0303 	adc.w	r3, r2, r3
 8009080:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8009084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8009090:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8009094:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8009098:	460b      	mov	r3, r1
 800909a:	18db      	adds	r3, r3, r3
 800909c:	653b      	str	r3, [r7, #80]	@ 0x50
 800909e:	4613      	mov	r3, r2
 80090a0:	eb42 0303 	adc.w	r3, r2, r3
 80090a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80090a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090aa:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80090ae:	f7f7 fab3 	bl	8000618 <__aeabi_uldivmod>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <UART_SetConfig+0x528>)
 80090b8:	fba3 1302 	umull	r1, r3, r3, r2
 80090bc:	095b      	lsrs	r3, r3, #5
 80090be:	2164      	movs	r1, #100	@ 0x64
 80090c0:	fb01 f303 	mul.w	r3, r1, r3
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	3332      	adds	r3, #50	@ 0x32
 80090ca:	4a06      	ldr	r2, [pc, #24]	@ (80090e4 <UART_SetConfig+0x528>)
 80090cc:	fba2 2303 	umull	r2, r3, r2, r3
 80090d0:	095b      	lsrs	r3, r3, #5
 80090d2:	f003 0207 	and.w	r2, r3, #7
 80090d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4422      	add	r2, r4
 80090de:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80090e0:	e233      	b.n	800954a <UART_SetConfig+0x98e>
 80090e2:	bf00      	nop
 80090e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b8d      	ldr	r3, [pc, #564]	@ (8009324 <UART_SetConfig+0x768>)
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d006      	beq.n	8009102 <UART_SetConfig+0x546>
 80090f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b8b      	ldr	r3, [pc, #556]	@ (8009328 <UART_SetConfig+0x76c>)
 80090fc:	429a      	cmp	r2, r3
 80090fe:	f040 8117 	bne.w	8009330 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009102:	f7fe fb25 	bl	8007750 <HAL_RCC_GetPCLK2Freq>
 8009106:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800910a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800910e:	2200      	movs	r2, #0
 8009110:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009114:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009118:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800911c:	4622      	mov	r2, r4
 800911e:	462b      	mov	r3, r5
 8009120:	1891      	adds	r1, r2, r2
 8009122:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009124:	415b      	adcs	r3, r3
 8009126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800912c:	4621      	mov	r1, r4
 800912e:	eb12 0801 	adds.w	r8, r2, r1
 8009132:	4629      	mov	r1, r5
 8009134:	eb43 0901 	adc.w	r9, r3, r1
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009144:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009148:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800914c:	4690      	mov	r8, r2
 800914e:	4699      	mov	r9, r3
 8009150:	4623      	mov	r3, r4
 8009152:	eb18 0303 	adds.w	r3, r8, r3
 8009156:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800915a:	462b      	mov	r3, r5
 800915c:	eb49 0303 	adc.w	r3, r9, r3
 8009160:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8009164:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009170:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	f04f 0300 	mov.w	r3, #0
 800917c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8009180:	4629      	mov	r1, r5
 8009182:	008b      	lsls	r3, r1, #2
 8009184:	4621      	mov	r1, r4
 8009186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800918a:	4621      	mov	r1, r4
 800918c:	008a      	lsls	r2, r1, #2
 800918e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8009192:	f7f7 fa41 	bl	8000618 <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4b64      	ldr	r3, [pc, #400]	@ (800932c <UART_SetConfig+0x770>)
 800919c:	fba3 2302 	umull	r2, r3, r3, r2
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	011c      	lsls	r4, r3, #4
 80091a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80091ae:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80091b2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	1891      	adds	r1, r2, r2
 80091bc:	6439      	str	r1, [r7, #64]	@ 0x40
 80091be:	415b      	adcs	r3, r3
 80091c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091c6:	4641      	mov	r1, r8
 80091c8:	1851      	adds	r1, r2, r1
 80091ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091cc:	4649      	mov	r1, r9
 80091ce:	414b      	adcs	r3, r1
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80091de:	4659      	mov	r1, fp
 80091e0:	00cb      	lsls	r3, r1, #3
 80091e2:	4651      	mov	r1, sl
 80091e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e8:	4651      	mov	r1, sl
 80091ea:	00ca      	lsls	r2, r1, #3
 80091ec:	4610      	mov	r0, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	4642      	mov	r2, r8
 80091f4:	189b      	adds	r3, r3, r2
 80091f6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80091fa:	464b      	mov	r3, r9
 80091fc:	460a      	mov	r2, r1
 80091fe:	eb42 0303 	adc.w	r3, r2, r3
 8009202:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009206:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009212:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	f04f 0300 	mov.w	r3, #0
 800921e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8009222:	4649      	mov	r1, r9
 8009224:	008b      	lsls	r3, r1, #2
 8009226:	4641      	mov	r1, r8
 8009228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800922c:	4641      	mov	r1, r8
 800922e:	008a      	lsls	r2, r1, #2
 8009230:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8009234:	f7f7 f9f0 	bl	8000618 <__aeabi_uldivmod>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4611      	mov	r1, r2
 800923e:	4b3b      	ldr	r3, [pc, #236]	@ (800932c <UART_SetConfig+0x770>)
 8009240:	fba3 2301 	umull	r2, r3, r3, r1
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	2264      	movs	r2, #100	@ 0x64
 8009248:	fb02 f303 	mul.w	r3, r2, r3
 800924c:	1acb      	subs	r3, r1, r3
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	3332      	adds	r3, #50	@ 0x32
 8009252:	4a36      	ldr	r2, [pc, #216]	@ (800932c <UART_SetConfig+0x770>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800925e:	441c      	add	r4, r3
 8009260:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009264:	2200      	movs	r2, #0
 8009266:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800926a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800926e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	1891      	adds	r1, r2, r2
 8009278:	6339      	str	r1, [r7, #48]	@ 0x30
 800927a:	415b      	adcs	r3, r3
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009282:	4641      	mov	r1, r8
 8009284:	1851      	adds	r1, r2, r1
 8009286:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009288:	4649      	mov	r1, r9
 800928a:	414b      	adcs	r3, r1
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800929a:	4659      	mov	r1, fp
 800929c:	00cb      	lsls	r3, r1, #3
 800929e:	4651      	mov	r1, sl
 80092a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092a4:	4651      	mov	r1, sl
 80092a6:	00ca      	lsls	r2, r1, #3
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	4603      	mov	r3, r0
 80092ae:	4642      	mov	r2, r8
 80092b0:	189b      	adds	r3, r3, r2
 80092b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80092b6:	464b      	mov	r3, r9
 80092b8:	460a      	mov	r2, r1
 80092ba:	eb42 0303 	adc.w	r3, r2, r3
 80092be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80092c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80092ce:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80092d2:	f04f 0200 	mov.w	r2, #0
 80092d6:	f04f 0300 	mov.w	r3, #0
 80092da:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80092de:	4649      	mov	r1, r9
 80092e0:	008b      	lsls	r3, r1, #2
 80092e2:	4641      	mov	r1, r8
 80092e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092e8:	4641      	mov	r1, r8
 80092ea:	008a      	lsls	r2, r1, #2
 80092ec:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80092f0:	f7f7 f992 	bl	8000618 <__aeabi_uldivmod>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <UART_SetConfig+0x770>)
 80092fa:	fba3 1302 	umull	r1, r3, r3, r2
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	2164      	movs	r1, #100	@ 0x64
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	011b      	lsls	r3, r3, #4
 800930a:	3332      	adds	r3, #50	@ 0x32
 800930c:	4a07      	ldr	r2, [pc, #28]	@ (800932c <UART_SetConfig+0x770>)
 800930e:	fba2 2303 	umull	r2, r3, r2, r3
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4422      	add	r2, r4
 8009320:	609a      	str	r2, [r3, #8]
 8009322:	e112      	b.n	800954a <UART_SetConfig+0x98e>
 8009324:	40011000 	.word	0x40011000
 8009328:	40011400 	.word	0x40011400
 800932c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009330:	f7fe f9fa 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8009334:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009338:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800933c:	2200      	movs	r2, #0
 800933e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009342:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009346:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 800934a:	4642      	mov	r2, r8
 800934c:	464b      	mov	r3, r9
 800934e:	1891      	adds	r1, r2, r2
 8009350:	6239      	str	r1, [r7, #32]
 8009352:	415b      	adcs	r3, r3
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
 8009356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935a:	4641      	mov	r1, r8
 800935c:	1854      	adds	r4, r2, r1
 800935e:	4649      	mov	r1, r9
 8009360:	eb43 0501 	adc.w	r5, r3, r1
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 0300 	mov.w	r3, #0
 800936c:	00eb      	lsls	r3, r5, #3
 800936e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009372:	00e2      	lsls	r2, r4, #3
 8009374:	4614      	mov	r4, r2
 8009376:	461d      	mov	r5, r3
 8009378:	4643      	mov	r3, r8
 800937a:	18e3      	adds	r3, r4, r3
 800937c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009380:	464b      	mov	r3, r9
 8009382:	eb45 0303 	adc.w	r3, r5, r3
 8009386:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800938a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009396:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80093a6:	4629      	mov	r1, r5
 80093a8:	008b      	lsls	r3, r1, #2
 80093aa:	4621      	mov	r1, r4
 80093ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b0:	4621      	mov	r1, r4
 80093b2:	008a      	lsls	r2, r1, #2
 80093b4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80093b8:	f7f7 f92e 	bl	8000618 <__aeabi_uldivmod>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4b65      	ldr	r3, [pc, #404]	@ (8009558 <UART_SetConfig+0x99c>)
 80093c2:	fba3 2302 	umull	r2, r3, r3, r2
 80093c6:	095b      	lsrs	r3, r3, #5
 80093c8:	011c      	lsls	r4, r3, #4
 80093ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093d4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80093d8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80093dc:	4642      	mov	r2, r8
 80093de:	464b      	mov	r3, r9
 80093e0:	1891      	adds	r1, r2, r2
 80093e2:	61b9      	str	r1, [r7, #24]
 80093e4:	415b      	adcs	r3, r3
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093ec:	4641      	mov	r1, r8
 80093ee:	1851      	adds	r1, r2, r1
 80093f0:	6139      	str	r1, [r7, #16]
 80093f2:	4649      	mov	r1, r9
 80093f4:	414b      	adcs	r3, r1
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009404:	4659      	mov	r1, fp
 8009406:	00cb      	lsls	r3, r1, #3
 8009408:	4651      	mov	r1, sl
 800940a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940e:	4651      	mov	r1, sl
 8009410:	00ca      	lsls	r2, r1, #3
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	4603      	mov	r3, r0
 8009418:	4642      	mov	r2, r8
 800941a:	189b      	adds	r3, r3, r2
 800941c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009420:	464b      	mov	r3, r9
 8009422:	460a      	mov	r2, r1
 8009424:	eb42 0303 	adc.w	r3, r2, r3
 8009428:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800942c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009438:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009448:	4649      	mov	r1, r9
 800944a:	008b      	lsls	r3, r1, #2
 800944c:	4641      	mov	r1, r8
 800944e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009452:	4641      	mov	r1, r8
 8009454:	008a      	lsls	r2, r1, #2
 8009456:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800945a:	f7f7 f8dd 	bl	8000618 <__aeabi_uldivmod>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4611      	mov	r1, r2
 8009464:	4b3c      	ldr	r3, [pc, #240]	@ (8009558 <UART_SetConfig+0x99c>)
 8009466:	fba3 2301 	umull	r2, r3, r3, r1
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2264      	movs	r2, #100	@ 0x64
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	3332      	adds	r3, #50	@ 0x32
 8009478:	4a37      	ldr	r2, [pc, #220]	@ (8009558 <UART_SetConfig+0x99c>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009484:	441c      	add	r4, r3
 8009486:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800948a:	2200      	movs	r2, #0
 800948c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009490:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009494:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	1891      	adds	r1, r2, r2
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	415b      	adcs	r3, r3
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094a8:	4641      	mov	r1, r8
 80094aa:	1851      	adds	r1, r2, r1
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	4649      	mov	r1, r9
 80094b0:	414b      	adcs	r3, r1
 80094b2:	607b      	str	r3, [r7, #4]
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094c0:	4659      	mov	r1, fp
 80094c2:	00cb      	lsls	r3, r1, #3
 80094c4:	4651      	mov	r1, sl
 80094c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ca:	4651      	mov	r1, sl
 80094cc:	00ca      	lsls	r2, r1, #3
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	4642      	mov	r2, r8
 80094d6:	189b      	adds	r3, r3, r2
 80094d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094dc:	464b      	mov	r3, r9
 80094de:	460a      	mov	r2, r1
 80094e0:	eb42 0303 	adc.w	r3, r2, r3
 80094e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094f4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009504:	4649      	mov	r1, r9
 8009506:	008b      	lsls	r3, r1, #2
 8009508:	4641      	mov	r1, r8
 800950a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800950e:	4641      	mov	r1, r8
 8009510:	008a      	lsls	r2, r1, #2
 8009512:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009516:	f7f7 f87f 	bl	8000618 <__aeabi_uldivmod>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <UART_SetConfig+0x99c>)
 8009520:	fba3 1302 	umull	r1, r3, r3, r2
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	2164      	movs	r1, #100	@ 0x64
 8009528:	fb01 f303 	mul.w	r3, r1, r3
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	3332      	adds	r3, #50	@ 0x32
 8009532:	4a09      	ldr	r2, [pc, #36]	@ (8009558 <UART_SetConfig+0x99c>)
 8009534:	fba2 2303 	umull	r2, r3, r2, r3
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	f003 020f 	and.w	r2, r3, #15
 800953e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4422      	add	r2, r4
 8009546:	609a      	str	r2, [r3, #8]
}
 8009548:	e7ff      	b.n	800954a <UART_SetConfig+0x98e>
 800954a:	bf00      	nop
 800954c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009550:	46bd      	mov	sp, r7
 8009552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009556:	bf00      	nop
 8009558:	51eb851f 	.word	0x51eb851f

0800955c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d029      	beq.n	80095ca <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009582:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009586:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009590:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009596:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800959c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80095a2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80095a8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80095ae:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80095b4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                               Init->ReadBurst          |\
 80095ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e034      	b.n	8009634 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80095d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 80095e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80095fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009608:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800960e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009614:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800961a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009620:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4313      	orrs	r3, r2
 8009626:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009642:	b480      	push	{r7}
 8009644:	b087      	sub	sp, #28
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d02e      	beq.n	80096ba <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009668:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	3b01      	subs	r3, #1
 8009676:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009678:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009682:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	3b01      	subs	r3, #1
 800968a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800968c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	3b01      	subs	r3, #1
 8009694:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009696:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	3b01      	subs	r3, #1
 800969e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80096a0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80096aa:	4313      	orrs	r3, r2
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	609a      	str	r2, [r3, #8]
 80096b8:	e03b      	b.n	8009732 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80096c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096ca:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	3b01      	subs	r3, #1
 80096da:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80096dc:	4313      	orrs	r3, r2
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80096f0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009700:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	3b01      	subs	r3, #1
 8009708:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800970a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	3b01      	subs	r3, #1
 8009712:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009714:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	3b01      	subs	r3, #1
 800971c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800971e:	4313      	orrs	r3, r2
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800975c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	3b01      	subs	r3, #1
 8009764:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009766:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009778:	f7fb f912 	bl	80049a0 <HAL_GetTick>
 800977c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800977e:	e010      	b.n	80097a2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d00c      	beq.n	80097a2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <FMC_SDRAM_SendCommand+0x5e>
 800978e:	f7fb f907 	bl	80049a0 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d201      	bcs.n	80097a2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e006      	b.n	80097b0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d0e8      	beq.n	8009780 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695a      	ldr	r2, [r3, #20]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <arm_max_f32>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	1e4f      	subs	r7, r1, #1
 80097e6:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80097ea:	f100 0e04 	add.w	lr, r0, #4
 80097ee:	edd0 7a00 	vldr	s15, [r0]
 80097f2:	d058      	beq.n	80098a6 <arm_max_f32+0xc6>
 80097f4:	3014      	adds	r0, #20
 80097f6:	46c4      	mov	ip, r8
 80097f8:	2604      	movs	r6, #4
 80097fa:	2400      	movs	r4, #0
 80097fc:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009800:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009804:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009808:	ed50 5a01 	vldr	s11, [r0, #-4]
 800980c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009814:	bfc8      	it	gt
 8009816:	eef0 7a46 	vmovgt.f32	s15, s12
 800981a:	f1a6 0503 	sub.w	r5, r6, #3
 800981e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009822:	bfc8      	it	gt
 8009824:	462c      	movgt	r4, r5
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	bf48      	it	mi
 800982c:	eef0 7a66 	vmovmi.f32	s15, s13
 8009830:	f1a6 0502 	sub.w	r5, r6, #2
 8009834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009838:	bf48      	it	mi
 800983a:	462c      	movmi	r4, r5
 800983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009840:	bf48      	it	mi
 8009842:	eef0 7a47 	vmovmi.f32	s15, s14
 8009846:	f106 35ff 	add.w	r5, r6, #4294967295
 800984a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800984e:	bf48      	it	mi
 8009850:	462c      	movmi	r4, r5
 8009852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009856:	bf48      	it	mi
 8009858:	4634      	movmi	r4, r6
 800985a:	bf48      	it	mi
 800985c:	eef0 7a65 	vmovmi.f32	s15, s11
 8009860:	f1bc 0c01 	subs.w	ip, ip, #1
 8009864:	f100 0010 	add.w	r0, r0, #16
 8009868:	f106 0604 	add.w	r6, r6, #4
 800986c:	d1c6      	bne.n	80097fc <arm_max_f32+0x1c>
 800986e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8009872:	f017 0003 	ands.w	r0, r7, #3
 8009876:	d018      	beq.n	80098aa <arm_max_f32+0xca>
 8009878:	1a08      	subs	r0, r1, r0
 800987a:	ecbe 7a01 	vldmia	lr!, {s14}
 800987e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	bfc8      	it	gt
 8009888:	4604      	movgt	r4, r0
 800988a:	f100 0001 	add.w	r0, r0, #1
 800988e:	bfd8      	it	le
 8009890:	eeb0 7a67 	vmovle.f32	s14, s15
 8009894:	4281      	cmp	r1, r0
 8009896:	eef0 7a47 	vmov.f32	s15, s14
 800989a:	d1ee      	bne.n	800987a <arm_max_f32+0x9a>
 800989c:	ed82 7a00 	vstr	s14, [r2]
 80098a0:	601c      	str	r4, [r3, #0]
 80098a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a6:	4644      	mov	r4, r8
 80098a8:	e7e3      	b.n	8009872 <arm_max_f32+0x92>
 80098aa:	eeb0 7a67 	vmov.f32	s14, s15
 80098ae:	e7f5      	b.n	800989c <arm_max_f32+0xbc>

080098b0 <arm_cfft_radix4_init_f32>:
 80098b0:	b410      	push	{r4}
 80098b2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80098b6:	4c29      	ldr	r4, [pc, #164]	@ (800995c <arm_cfft_radix4_init_f32+0xac>)
 80098b8:	7082      	strb	r2, [r0, #2]
 80098ba:	70c3      	strb	r3, [r0, #3]
 80098bc:	8001      	strh	r1, [r0, #0]
 80098be:	6044      	str	r4, [r0, #4]
 80098c0:	d03f      	beq.n	8009942 <arm_cfft_radix4_init_f32+0x92>
 80098c2:	d80e      	bhi.n	80098e2 <arm_cfft_radix4_init_f32+0x32>
 80098c4:	2910      	cmp	r1, #16
 80098c6:	d02f      	beq.n	8009928 <arm_cfft_radix4_init_f32+0x78>
 80098c8:	2940      	cmp	r1, #64	@ 0x40
 80098ca:	d11c      	bne.n	8009906 <arm_cfft_radix4_init_f32+0x56>
 80098cc:	f04f 5272 	mov.w	r2, #1015021568	@ 0x3c800000
 80098d0:	4b23      	ldr	r3, [pc, #140]	@ (8009960 <arm_cfft_radix4_init_f32+0xb0>)
 80098d2:	8181      	strh	r1, [r0, #12]
 80098d4:	81c1      	strh	r1, [r0, #14]
 80098d6:	6102      	str	r2, [r0, #16]
 80098d8:	6083      	str	r3, [r0, #8]
 80098da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098de:	2000      	movs	r0, #0
 80098e0:	4770      	bx	lr
 80098e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098e6:	d013      	beq.n	8009910 <arm_cfft_radix4_init_f32+0x60>
 80098e8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80098ec:	d10b      	bne.n	8009906 <arm_cfft_radix4_init_f32+0x56>
 80098ee:	f04f 5366 	mov.w	r3, #964689920	@ 0x39800000
 80098f2:	6103      	str	r3, [r0, #16]
 80098f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009964 <arm_cfft_radix4_init_f32+0xb4>)
 80098f6:	6082      	str	r2, [r0, #8]
 80098f8:	2301      	movs	r3, #1
 80098fa:	8183      	strh	r3, [r0, #12]
 80098fc:	81c3      	strh	r3, [r0, #14]
 80098fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009902:	2000      	movs	r0, #0
 8009904:	4770      	bx	lr
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	f04f 536a 	mov.w	r3, #981467136	@ 0x3a800000
 8009914:	6103      	str	r3, [r0, #16]
 8009916:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <arm_cfft_radix4_init_f32+0xb8>)
 8009918:	6082      	str	r2, [r0, #8]
 800991a:	2304      	movs	r3, #4
 800991c:	8183      	strh	r3, [r0, #12]
 800991e:	81c3      	strh	r3, [r0, #14]
 8009920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009924:	2000      	movs	r0, #0
 8009926:	4770      	bx	lr
 8009928:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 800992c:	6103      	str	r3, [r0, #16]
 800992e:	4a0f      	ldr	r2, [pc, #60]	@ (800996c <arm_cfft_radix4_init_f32+0xbc>)
 8009930:	6082      	str	r2, [r0, #8]
 8009932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009936:	8183      	strh	r3, [r0, #12]
 8009938:	81c3      	strh	r3, [r0, #14]
 800993a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993e:	2000      	movs	r0, #0
 8009940:	4770      	bx	lr
 8009942:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 8009946:	6103      	str	r3, [r0, #16]
 8009948:	4a09      	ldr	r2, [pc, #36]	@ (8009970 <arm_cfft_radix4_init_f32+0xc0>)
 800994a:	6082      	str	r2, [r0, #8]
 800994c:	2310      	movs	r3, #16
 800994e:	8183      	strh	r3, [r0, #12]
 8009950:	81c3      	strh	r3, [r0, #14]
 8009952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009956:	2000      	movs	r0, #0
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	0800ea7c 	.word	0x0800ea7c
 8009960:	0800daf6 	.word	0x0800daf6
 8009964:	0800da78 	.word	0x0800da78
 8009968:	0800da7e 	.word	0x0800da7e
 800996c:	0800dc76 	.word	0x0800dc76
 8009970:	0800da96 	.word	0x0800da96

08009974 <arm_radix4_butterfly_f32>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	ed2d 8b06 	vpush	{d8-d10}
 800997c:	468a      	mov	sl, r1
 800997e:	0889      	lsrs	r1, r1, #2
 8009980:	b08d      	sub	sp, #52	@ 0x34
 8009982:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8009986:	eb00 040c 	add.w	r4, r0, ip
 800998a:	460d      	mov	r5, r1
 800998c:	461f      	mov	r7, r3
 800998e:	4691      	mov	r9, r2
 8009990:	920a      	str	r2, [sp, #40]	@ 0x28
 8009992:	eb04 020c 	add.w	r2, r4, ip
 8009996:	4606      	mov	r6, r0
 8009998:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800999c:	9700      	str	r7, [sp, #0]
 800999e:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80099a2:	9009      	str	r0, [sp, #36]	@ 0x24
 80099a4:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 80099a8:	f10c 0004 	add.w	r0, ip, #4
 80099ac:	9701      	str	r7, [sp, #4]
 80099ae:	9103      	str	r1, [sp, #12]
 80099b0:	4430      	add	r0, r6
 80099b2:	4631      	mov	r1, r6
 80099b4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80099b8:	1d37      	adds	r7, r6, #4
 80099ba:	9e00      	ldr	r6, [sp, #0]
 80099bc:	46ab      	mov	fp, r5
 80099be:	00f5      	lsls	r5, r6, #3
 80099c0:	9502      	str	r5, [sp, #8]
 80099c2:	f8cd b010 	str.w	fp, [sp, #16]
 80099c6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80099ca:	f8cd a008 	str.w	sl, [sp, #8]
 80099ce:	f8dd a004 	ldr.w	sl, [sp, #4]
 80099d2:	ea4f 1806 	mov.w	r8, r6, lsl #4
 80099d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80099da:	464e      	mov	r6, r9
 80099dc:	464d      	mov	r5, r9
 80099de:	edd1 4a01 	vldr	s9, [r1, #4]
 80099e2:	ed10 4a01 	vldr	s8, [r0, #-4]
 80099e6:	ed17 6a01 	vldr	s12, [r7, #-4]
 80099ea:	edd2 6a00 	vldr	s13, [r2]
 80099ee:	ed94 7a01 	vldr	s14, [r4, #4]
 80099f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80099f6:	ed93 5a00 	vldr	s10, [r3]
 80099fa:	edd2 5a01 	vldr	s11, [r2, #4]
 80099fe:	ed99 3a00 	vldr	s6, [r9]
 8009a02:	edd9 3a01 	vldr	s7, [r9, #4]
 8009a06:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009a0a:	ee74 2a05 	vadd.f32	s5, s8, s10
 8009a0e:	ee34 1aa5 	vadd.f32	s2, s9, s11
 8009a12:	ee77 1a27 	vadd.f32	s3, s14, s15
 8009a16:	ee32 0a22 	vadd.f32	s0, s4, s5
 8009a1a:	ee71 0a21 	vadd.f32	s1, s2, s3
 8009a1e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009a22:	ee34 5a45 	vsub.f32	s10, s8, s10
 8009a26:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8009a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a2e:	ed07 0a01 	vstr	s0, [r7, #-4]
 8009a32:	edc1 0a01 	vstr	s1, [r1, #4]
 8009a36:	ed95 4a00 	vldr	s8, [r5]
 8009a3a:	edd6 6a00 	vldr	s13, [r6]
 8009a3e:	edd6 7a01 	vldr	s15, [r6, #4]
 8009a42:	ee72 4a62 	vsub.f32	s9, s4, s5
 8009a46:	ee71 1a61 	vsub.f32	s3, s2, s3
 8009a4a:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8009a4e:	ed95 1a01 	vldr	s2, [r5, #4]
 8009a52:	ee36 2a07 	vadd.f32	s4, s12, s14
 8009a56:	ee36 7a47 	vsub.f32	s14, s12, s14
 8009a5a:	ee35 6a25 	vadd.f32	s12, s10, s11
 8009a5e:	ee62 0a04 	vmul.f32	s1, s4, s8
 8009a62:	ee23 5a21 	vmul.f32	s10, s6, s3
 8009a66:	ee22 2a01 	vmul.f32	s4, s4, s2
 8009a6a:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009a6e:	ee22 1a81 	vmul.f32	s2, s5, s2
 8009a72:	ee67 5a26 	vmul.f32	s11, s14, s13
 8009a76:	ee63 2a24 	vmul.f32	s5, s6, s9
 8009a7a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009a7e:	ee63 4aa4 	vmul.f32	s9, s7, s9
 8009a82:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009a86:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	ee31 3a20 	vadd.f32	s6, s2, s1
 8009a92:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009a96:	ee71 3aa2 	vadd.f32	s7, s3, s5
 8009a9a:	ee35 5a64 	vsub.f32	s10, s10, s9
 8009a9e:	ee36 7a25 	vadd.f32	s14, s12, s11
 8009aa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009aa6:	3108      	adds	r1, #8
 8009aa8:	4551      	cmp	r1, sl
 8009aaa:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009aae:	f107 0708 	add.w	r7, r7, #8
 8009ab2:	ed84 5a01 	vstr	s10, [r4, #4]
 8009ab6:	44c1      	add	r9, r8
 8009ab8:	ed82 3a00 	vstr	s6, [r2]
 8009abc:	ed82 4a01 	vstr	s8, [r2, #4]
 8009ac0:	445d      	add	r5, fp
 8009ac2:	ed83 7a00 	vstr	s14, [r3]
 8009ac6:	edc3 7a01 	vstr	s15, [r3, #4]
 8009aca:	4476      	add	r6, lr
 8009acc:	f100 0008 	add.w	r0, r0, #8
 8009ad0:	f104 0408 	add.w	r4, r4, #8
 8009ad4:	f102 0208 	add.w	r2, r2, #8
 8009ad8:	f103 0308 	add.w	r3, r3, #8
 8009adc:	f47f af7f 	bne.w	80099de <arm_radix4_butterfly_f32+0x6a>
 8009ae0:	9b00      	ldr	r3, [sp, #0]
 8009ae2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009ae6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009aea:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009aee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2a04      	cmp	r2, #4
 8009af6:	9306      	str	r3, [sp, #24]
 8009af8:	f240 80ba 	bls.w	8009c70 <arm_radix4_butterfly_f32+0x2fc>
 8009afc:	9806      	ldr	r0, [sp, #24]
 8009afe:	9207      	str	r2, [sp, #28]
 8009b00:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8009b04:	4619      	mov	r1, r3
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009b0c:	1e4a      	subs	r2, r1, #1
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009b12:	9205      	str	r2, [sp, #20]
 8009b14:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	010a      	lsls	r2, r1, #4
 8009b1a:	0103      	lsls	r3, r0, #4
 8009b1c:	9204      	str	r2, [sp, #16]
 8009b1e:	9302      	str	r3, [sp, #8]
 8009b20:	00c2      	lsls	r2, r0, #3
 8009b22:	2300      	movs	r3, #0
 8009b24:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	46b8      	mov	r8, r7
 8009b2c:	46be      	mov	lr, r7
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	ed97 1a00 	vldr	s2, [r7]
 8009b36:	edd7 1a01 	vldr	s3, [r7, #4]
 8009b3a:	ed9e 2a00 	vldr	s4, [lr]
 8009b3e:	edde 2a01 	vldr	s5, [lr, #4]
 8009b42:	ed98 3a00 	vldr	s6, [r8]
 8009b46:	edd8 3a01 	vldr	s7, [r8, #4]
 8009b4a:	9d00      	ldr	r5, [sp, #0]
 8009b4c:	18f1      	adds	r1, r6, r3
 8009b4e:	eb09 0203 	add.w	r2, r9, r3
 8009b52:	1d34      	adds	r4, r6, #4
 8009b54:	464b      	mov	r3, r9
 8009b56:	4630      	mov	r0, r6
 8009b58:	ed90 4a01 	vldr	s8, [r0, #4]
 8009b5c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009b60:	ed91 7a00 	vldr	s14, [r1]
 8009b64:	edd2 7a00 	vldr	s15, [r2]
 8009b68:	edd3 4a01 	vldr	s9, [r3, #4]
 8009b6c:	ed92 5a01 	vldr	s10, [r2, #4]
 8009b70:	ed93 6a00 	vldr	s12, [r3]
 8009b74:	edd1 6a01 	vldr	s13, [r1, #4]
 8009b78:	ee35 0a87 	vadd.f32	s0, s11, s14
 8009b7c:	ee34 8a26 	vadd.f32	s16, s8, s13
 8009b80:	ee76 8a27 	vadd.f32	s17, s12, s15
 8009b84:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009b88:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009b8c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009b90:	ee74 7ac5 	vsub.f32	s15, s9, s10
 8009b94:	ee74 0a85 	vadd.f32	s1, s9, s10
 8009b98:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8009b9c:	ee78 4a60 	vsub.f32	s9, s16, s1
 8009ba0:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8009ba4:	ee30 4a68 	vsub.f32	s8, s0, s17
 8009ba8:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8009bac:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009bb0:	ee22 aa04 	vmul.f32	s20, s4, s8
 8009bb4:	ee62 aaa4 	vmul.f32	s21, s5, s9
 8009bb8:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009bbc:	ee21 9a05 	vmul.f32	s18, s2, s10
 8009bc0:	ee61 9aa5 	vmul.f32	s19, s3, s11
 8009bc4:	ee63 6a07 	vmul.f32	s13, s6, s14
 8009bc8:	ee23 6aa7 	vmul.f32	s12, s7, s15
 8009bcc:	ee62 4a24 	vmul.f32	s9, s4, s9
 8009bd0:	ee21 5a85 	vmul.f32	s10, s3, s10
 8009bd4:	ee61 5a25 	vmul.f32	s11, s2, s11
 8009bd8:	ee23 7a87 	vmul.f32	s14, s7, s14
 8009bdc:	ee63 7a27 	vmul.f32	s15, s6, s15
 8009be0:	ee78 0a20 	vadd.f32	s1, s16, s1
 8009be4:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8009be8:	ee30 0a28 	vadd.f32	s0, s0, s17
 8009bec:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 8009bf0:	ee39 4a89 	vadd.f32	s8, s19, s18
 8009bf4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009bf8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c00:	445d      	add	r5, fp
 8009c02:	45aa      	cmp	sl, r5
 8009c04:	ed04 0a01 	vstr	s0, [r4, #-4]
 8009c08:	edc0 0a01 	vstr	s1, [r0, #4]
 8009c0c:	4464      	add	r4, ip
 8009c0e:	ed83 8a00 	vstr	s16, [r3]
 8009c12:	edc3 4a01 	vstr	s9, [r3, #4]
 8009c16:	4460      	add	r0, ip
 8009c18:	ed81 4a00 	vstr	s8, [r1]
 8009c1c:	edc1 5a01 	vstr	s11, [r1, #4]
 8009c20:	4463      	add	r3, ip
 8009c22:	edc2 6a00 	vstr	s13, [r2]
 8009c26:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c2a:	4461      	add	r1, ip
 8009c2c:	4462      	add	r2, ip
 8009c2e:	d893      	bhi.n	8009b58 <arm_radix4_butterfly_f32+0x1e4>
 8009c30:	9a01      	ldr	r2, [sp, #4]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	4417      	add	r7, r2
 8009c36:	9a02      	ldr	r2, [sp, #8]
 8009c38:	4496      	add	lr, r2
 8009c3a:	9a03      	ldr	r2, [sp, #12]
 8009c3c:	4490      	add	r8, r2
 8009c3e:	9a05      	ldr	r2, [sp, #20]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4293      	cmp	r3, r2
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	f106 0608 	add.w	r6, r6, #8
 8009c4a:	f109 0908 	add.w	r9, r9, #8
 8009c4e:	f67f af6f 	bls.w	8009b30 <arm_radix4_butterfly_f32+0x1bc>
 8009c52:	9b06      	ldr	r3, [sp, #24]
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009c5a:	0892      	lsrs	r2, r2, #2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2a04      	cmp	r2, #4
 8009c62:	9207      	str	r2, [sp, #28]
 8009c64:	9306      	str	r3, [sp, #24]
 8009c66:	d903      	bls.n	8009c70 <arm_radix4_butterfly_f32+0x2fc>
 8009c68:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	e747      	b.n	8009b00 <arm_radix4_butterfly_f32+0x18c>
 8009c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c74:	3320      	adds	r3, #32
 8009c76:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009c7a:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
 8009c7e:	ed13 5a05 	vldr	s10, [r3, #-20]	@ 0xffffffec
 8009c82:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009c86:	ed53 6a07 	vldr	s13, [r3, #-28]	@ 0xffffffe4
 8009c8a:	ed13 4a08 	vldr	s8, [r3, #-32]	@ 0xffffffe0
 8009c8e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009c92:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009c96:	ee34 3a24 	vadd.f32	s6, s8, s9
 8009c9a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009c9e:	ee34 4a64 	vsub.f32	s8, s8, s9
 8009ca2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009ca6:	ee75 4a65 	vsub.f32	s9, s10, s11
 8009caa:	ee35 6a25 	vadd.f32	s12, s10, s11
 8009cae:	ee76 5a87 	vadd.f32	s11, s13, s14
 8009cb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009cb6:	ee73 2a23 	vadd.f32	s5, s6, s7
 8009cba:	ee35 5a86 	vadd.f32	s10, s11, s12
 8009cbe:	ee73 3a63 	vsub.f32	s7, s6, s7
 8009cc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009cc6:	ee34 3a24 	vadd.f32	s6, s8, s9
 8009cca:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009cce:	ee74 4a64 	vsub.f32	s9, s8, s9
 8009cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cd6:	3a01      	subs	r2, #1
 8009cd8:	ed43 2a08 	vstr	s5, [r3, #-32]	@ 0xffffffe0
 8009cdc:	ed43 3a06 	vstr	s7, [r3, #-24]	@ 0xffffffe8
 8009ce0:	ed03 3a04 	vstr	s6, [r3, #-16]
 8009ce4:	ed43 4a02 	vstr	s9, [r3, #-8]
 8009ce8:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
 8009cec:	ed03 6a05 	vstr	s12, [r3, #-20]	@ 0xffffffec
 8009cf0:	ed43 6a03 	vstr	s13, [r3, #-12]
 8009cf4:	ed43 7a01 	vstr	s15, [r3, #-4]
 8009cf8:	f103 0320 	add.w	r3, r3, #32
 8009cfc:	d1bb      	bne.n	8009c76 <arm_radix4_butterfly_f32+0x302>
 8009cfe:	b00d      	add	sp, #52	@ 0x34
 8009d00:	ecbd 8b06 	vpop	{d8-d10}
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d08 <arm_radix4_butterfly_inverse_f32>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	ed2d 8b08 	vpush	{d8-d11}
 8009d10:	b08d      	sub	sp, #52	@ 0x34
 8009d12:	461f      	mov	r7, r3
 8009d14:	9700      	str	r7, [sp, #0]
 8009d16:	468a      	mov	sl, r1
 8009d18:	9c00      	ldr	r4, [sp, #0]
 8009d1a:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d1c:	0889      	lsrs	r1, r1, #2
 8009d1e:	460d      	mov	r5, r1
 8009d20:	9103      	str	r1, [sp, #12]
 8009d22:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009d26:	46ab      	mov	fp, r5
 8009d28:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8009d2c:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 8009d30:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009d34:	0125      	lsls	r5, r4, #4
 8009d36:	00e4      	lsls	r4, r4, #3
 8009d38:	9402      	str	r4, [sp, #8]
 8009d3a:	9501      	str	r5, [sp, #4]
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	4691      	mov	r9, r2
 8009d40:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8009d44:	f10c 0004 	add.w	r0, ip, #4
 8009d48:	f8cd b010 	str.w	fp, [sp, #16]
 8009d4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009d50:	f8cd a008 	str.w	sl, [sp, #8]
 8009d54:	f8dd a004 	ldr.w	sl, [sp, #4]
 8009d58:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d5a:	4430      	add	r0, r6
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8009d62:	4647      	mov	r7, r8
 8009d64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009d68:	3604      	adds	r6, #4
 8009d6a:	464d      	mov	r5, r9
 8009d6c:	464c      	mov	r4, r9
 8009d6e:	edd2 4a01 	vldr	s9, [r2, #4]
 8009d72:	ed10 4a01 	vldr	s8, [r0, #-4]
 8009d76:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009d7a:	edd1 6a00 	vldr	s13, [r1]
 8009d7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d86:	edd3 5a00 	vldr	s11, [r3]
 8009d8a:	ed91 5a01 	vldr	s10, [r1, #4]
 8009d8e:	edd9 3a01 	vldr	s7, [r9, #4]
 8009d92:	ed99 3a00 	vldr	s6, [r9]
 8009d96:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009d9a:	ee74 2a25 	vadd.f32	s5, s8, s11
 8009d9e:	ee34 1a85 	vadd.f32	s2, s9, s10
 8009da2:	ee77 1a27 	vadd.f32	s3, s14, s15
 8009da6:	ee32 8a22 	vadd.f32	s16, s4, s5
 8009daa:	ee71 0a21 	vadd.f32	s1, s2, s3
 8009dae:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009db2:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009db6:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8009dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009dbe:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009dc2:	edc2 0a01 	vstr	s1, [r2, #4]
 8009dc6:	ed94 4a00 	vldr	s8, [r4]
 8009dca:	edd5 6a00 	vldr	s13, [r5]
 8009dce:	edd5 7a01 	vldr	s15, [r5, #4]
 8009dd2:	ee72 4a62 	vsub.f32	s9, s4, s5
 8009dd6:	ee71 1a61 	vsub.f32	s3, s2, s3
 8009dda:	ee75 2a85 	vadd.f32	s5, s11, s10
 8009dde:	ed94 1a01 	vldr	s2, [r4, #4]
 8009de2:	ee36 2a47 	vsub.f32	s4, s12, s14
 8009de6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009dea:	ee35 6a65 	vsub.f32	s12, s10, s11
 8009dee:	ee62 0a04 	vmul.f32	s1, s4, s8
 8009df2:	ee23 5aa4 	vmul.f32	s10, s7, s9
 8009df6:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009dfa:	ee22 2a01 	vmul.f32	s4, s4, s2
 8009dfe:	ee67 5a26 	vmul.f32	s11, s14, s13
 8009e02:	ee22 1a81 	vmul.f32	s2, s5, s2
 8009e06:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009e0a:	ee63 2a24 	vmul.f32	s5, s6, s9
 8009e0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009e12:	ee23 3a21 	vmul.f32	s6, s6, s3
 8009e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e1a:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8009e1e:	ee72 4a04 	vadd.f32	s9, s4, s8
 8009e22:	ee70 3ac1 	vsub.f32	s7, s1, s2
 8009e26:	ee32 4ae1 	vsub.f32	s8, s5, s3
 8009e2a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009e2e:	ee35 7ac6 	vsub.f32	s14, s11, s12
 8009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e36:	3208      	adds	r2, #8
 8009e38:	4542      	cmp	r2, r8
 8009e3a:	ed00 4a01 	vstr	s8, [r0, #-4]
 8009e3e:	f106 0608 	add.w	r6, r6, #8
 8009e42:	ed87 5a01 	vstr	s10, [r7, #4]
 8009e46:	44d1      	add	r9, sl
 8009e48:	edc1 3a00 	vstr	s7, [r1]
 8009e4c:	edc1 4a01 	vstr	s9, [r1, #4]
 8009e50:	445c      	add	r4, fp
 8009e52:	ed83 7a00 	vstr	s14, [r3]
 8009e56:	edc3 7a01 	vstr	s15, [r3, #4]
 8009e5a:	4475      	add	r5, lr
 8009e5c:	f100 0008 	add.w	r0, r0, #8
 8009e60:	f107 0708 	add.w	r7, r7, #8
 8009e64:	f101 0108 	add.w	r1, r1, #8
 8009e68:	f103 0308 	add.w	r3, r3, #8
 8009e6c:	f47f af7f 	bne.w	8009d6e <arm_radix4_butterfly_inverse_f32+0x66>
 8009e70:	9b00      	ldr	r3, [sp, #0]
 8009e72:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009e76:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009e7a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009e7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2a04      	cmp	r2, #4
 8009e86:	9306      	str	r3, [sp, #24]
 8009e88:	f240 80ba 	bls.w	800a000 <arm_radix4_butterfly_inverse_f32+0x2f8>
 8009e8c:	9806      	ldr	r0, [sp, #24]
 8009e8e:	9207      	str	r2, [sp, #28]
 8009e90:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8009e94:	4619      	mov	r1, r3
 8009e96:	9308      	str	r3, [sp, #32]
 8009e98:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009e9c:	1e4a      	subs	r2, r1, #1
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009ea2:	9205      	str	r2, [sp, #20]
 8009ea4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009ea6:	9303      	str	r3, [sp, #12]
 8009ea8:	010a      	lsls	r2, r1, #4
 8009eaa:	0103      	lsls	r3, r0, #4
 8009eac:	9204      	str	r2, [sp, #16]
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	00c2      	lsls	r2, r0, #3
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	46b8      	mov	r8, r7
 8009ebc:	46be      	mov	lr, r7
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	ed97 1a00 	vldr	s2, [r7]
 8009ec6:	edd7 1a01 	vldr	s3, [r7, #4]
 8009eca:	ed9e 2a00 	vldr	s4, [lr]
 8009ece:	edde 2a01 	vldr	s5, [lr, #4]
 8009ed2:	ed98 3a00 	vldr	s6, [r8]
 8009ed6:	edd8 3a01 	vldr	s7, [r8, #4]
 8009eda:	9d00      	ldr	r5, [sp, #0]
 8009edc:	18f1      	adds	r1, r6, r3
 8009ede:	eb09 0203 	add.w	r2, r9, r3
 8009ee2:	1d34      	adds	r4, r6, #4
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	ed90 4a01 	vldr	s8, [r0, #4]
 8009eec:	ed14 6a01 	vldr	s12, [r4, #-4]
 8009ef0:	ed91 7a00 	vldr	s14, [r1]
 8009ef4:	edd2 7a00 	vldr	s15, [r2]
 8009ef8:	ed93 5a01 	vldr	s10, [r3, #4]
 8009efc:	edd1 4a01 	vldr	s9, [r1, #4]
 8009f00:	edd2 5a01 	vldr	s11, [r2, #4]
 8009f04:	edd3 6a00 	vldr	s13, [r3]
 8009f08:	ee76 0a07 	vadd.f32	s1, s12, s14
 8009f0c:	ee36 8aa7 	vadd.f32	s16, s13, s15
 8009f10:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009f14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009f18:	ee74 8a24 	vadd.f32	s17, s8, s9
 8009f1c:	ee74 7a64 	vsub.f32	s15, s8, s9
 8009f20:	ee35 7a65 	vsub.f32	s14, s10, s11
 8009f24:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009f28:	ee70 4ac8 	vsub.f32	s9, s1, s16
 8009f2c:	ee76 5a47 	vsub.f32	s11, s12, s14
 8009f30:	ee38 5ac4 	vsub.f32	s10, s17, s8
 8009f34:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009f38:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8009f3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f40:	ee22 ba24 	vmul.f32	s22, s4, s9
 8009f44:	ee62 aa85 	vmul.f32	s21, s5, s10
 8009f48:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8009f4c:	ee21 aa25 	vmul.f32	s20, s2, s11
 8009f50:	ee61 9a86 	vmul.f32	s19, s3, s12
 8009f54:	ee23 9a07 	vmul.f32	s18, s6, s14
 8009f58:	ee63 6aa7 	vmul.f32	s13, s7, s15
 8009f5c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8009f60:	ee61 5aa5 	vmul.f32	s11, s3, s11
 8009f64:	ee21 6a06 	vmul.f32	s12, s2, s12
 8009f68:	ee23 7a87 	vmul.f32	s14, s7, s14
 8009f6c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8009f70:	ee70 0a88 	vadd.f32	s1, s1, s16
 8009f74:	ee34 5a85 	vadd.f32	s10, s9, s10
 8009f78:	ee38 4a84 	vadd.f32	s8, s17, s8
 8009f7c:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 8009f80:	ee7a 4a69 	vsub.f32	s9, s20, s19
 8009f84:	ee35 6a86 	vadd.f32	s12, s11, s12
 8009f88:	ee79 6a66 	vsub.f32	s13, s18, s13
 8009f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f90:	445d      	add	r5, fp
 8009f92:	45aa      	cmp	sl, r5
 8009f94:	ed44 0a01 	vstr	s1, [r4, #-4]
 8009f98:	ed80 4a01 	vstr	s8, [r0, #4]
 8009f9c:	4464      	add	r4, ip
 8009f9e:	ed83 8a00 	vstr	s16, [r3]
 8009fa2:	ed83 5a01 	vstr	s10, [r3, #4]
 8009fa6:	4460      	add	r0, ip
 8009fa8:	edc1 4a00 	vstr	s9, [r1]
 8009fac:	ed81 6a01 	vstr	s12, [r1, #4]
 8009fb0:	4463      	add	r3, ip
 8009fb2:	edc2 6a00 	vstr	s13, [r2]
 8009fb6:	edc2 7a01 	vstr	s15, [r2, #4]
 8009fba:	4461      	add	r1, ip
 8009fbc:	4462      	add	r2, ip
 8009fbe:	d893      	bhi.n	8009ee8 <arm_radix4_butterfly_inverse_f32+0x1e0>
 8009fc0:	9a01      	ldr	r2, [sp, #4]
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	4417      	add	r7, r2
 8009fc6:	9a02      	ldr	r2, [sp, #8]
 8009fc8:	4496      	add	lr, r2
 8009fca:	9a03      	ldr	r2, [sp, #12]
 8009fcc:	4490      	add	r8, r2
 8009fce:	9a05      	ldr	r2, [sp, #20]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	f106 0608 	add.w	r6, r6, #8
 8009fda:	f109 0908 	add.w	r9, r9, #8
 8009fde:	f67f af6f 	bls.w	8009ec0 <arm_radix4_butterfly_inverse_f32+0x1b8>
 8009fe2:	9b06      	ldr	r3, [sp, #24]
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009fea:	0892      	lsrs	r2, r2, #2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	2a04      	cmp	r2, #4
 8009ff2:	9207      	str	r2, [sp, #28]
 8009ff4:	9306      	str	r3, [sp, #24]
 8009ff6:	d903      	bls.n	800a000 <arm_radix4_butterfly_inverse_f32+0x2f8>
 8009ff8:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	e747      	b.n	8009e90 <arm_radix4_butterfly_inverse_f32+0x188>
 800a000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a002:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a004:	3320      	adds	r3, #32
 800a006:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a00a:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
 800a00e:	ed13 5a05 	vldr	s10, [r3, #-20]	@ 0xffffffec
 800a012:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a016:	ed53 6a07 	vldr	s13, [r3, #-28]	@ 0xffffffe4
 800a01a:	ed13 4a08 	vldr	s8, [r3, #-32]	@ 0xffffffe0
 800a01e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a022:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a026:	ee34 3a24 	vadd.f32	s6, s8, s9
 800a02a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a02e:	ee34 4a64 	vsub.f32	s8, s8, s9
 800a032:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a036:	ee75 4a65 	vsub.f32	s9, s10, s11
 800a03a:	ee35 6a25 	vadd.f32	s12, s10, s11
 800a03e:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a042:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a046:	ee73 2a23 	vadd.f32	s5, s6, s7
 800a04a:	ee74 6a24 	vadd.f32	s13, s8, s9
 800a04e:	ee37 5a27 	vadd.f32	s10, s14, s15
 800a052:	ee73 3a63 	vsub.f32	s7, s6, s7
 800a056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a05a:	ee34 3a64 	vsub.f32	s6, s8, s9
 800a05e:	ee75 4a86 	vadd.f32	s9, s11, s12
 800a062:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a066:	ee62 2a80 	vmul.f32	s5, s5, s0
 800a06a:	ee26 7a00 	vmul.f32	s14, s12, s0
 800a06e:	ee63 5a80 	vmul.f32	s11, s7, s0
 800a072:	ee23 4a00 	vmul.f32	s8, s6, s0
 800a076:	ee66 6a80 	vmul.f32	s13, s13, s0
 800a07a:	ee64 4a80 	vmul.f32	s9, s9, s0
 800a07e:	ee25 6a00 	vmul.f32	s12, s10, s0
 800a082:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a086:	3a01      	subs	r2, #1
 800a088:	ed43 2a08 	vstr	s5, [r3, #-32]	@ 0xffffffe0
 800a08c:	ed43 5a06 	vstr	s11, [r3, #-24]	@ 0xffffffe8
 800a090:	ed03 4a04 	vstr	s8, [r3, #-16]
 800a094:	ed43 6a02 	vstr	s13, [r3, #-8]
 800a098:	ed43 4a07 	vstr	s9, [r3, #-28]	@ 0xffffffe4
 800a09c:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800a0a0:	ed03 6a03 	vstr	s12, [r3, #-12]
 800a0a4:	ed43 7a01 	vstr	s15, [r3, #-4]
 800a0a8:	f103 0320 	add.w	r3, r3, #32
 800a0ac:	d1ab      	bne.n	800a006 <arm_radix4_butterfly_inverse_f32+0x2fe>
 800a0ae:	b00d      	add	sp, #52	@ 0x34
 800a0b0:	ecbd 8b08 	vpop	{d8-d11}
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0b8 <arm_cfft_radix4_f32>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	7883      	ldrb	r3, [r0, #2]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	d009      	beq.n	800a0d8 <arm_cfft_radix4_f32+0x20>
 800a0c4:	8983      	ldrh	r3, [r0, #12]
 800a0c6:	6842      	ldr	r2, [r0, #4]
 800a0c8:	8801      	ldrh	r1, [r0, #0]
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff fc52 	bl	8009974 <arm_radix4_butterfly_f32>
 800a0d0:	78e3      	ldrb	r3, [r4, #3]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d00b      	beq.n	800a0ee <arm_cfft_radix4_f32+0x36>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	8983      	ldrh	r3, [r0, #12]
 800a0da:	ed90 0a04 	vldr	s0, [r0, #16]
 800a0de:	6842      	ldr	r2, [r0, #4]
 800a0e0:	8801      	ldrh	r1, [r0, #0]
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fe10 	bl	8009d08 <arm_radix4_butterfly_inverse_f32>
 800a0e8:	78e3      	ldrb	r3, [r4, #3]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d1f3      	bne.n	800a0d6 <arm_cfft_radix4_f32+0x1e>
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	89e2      	ldrh	r2, [r4, #14]
 800a0f4:	8821      	ldrh	r1, [r4, #0]
 800a0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0fa:	f000 b929 	b.w	800a350 <arm_bitreversal_f32>
 800a0fe:	bf00      	nop

0800a100 <arm_cmplx_mag_f32>:
 800a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a108:	b084      	sub	sp, #16
 800a10a:	d07f      	beq.n	800a20c <arm_cmplx_mag_f32+0x10c>
 800a10c:	2700      	movs	r7, #0
 800a10e:	f100 0420 	add.w	r4, r0, #32
 800a112:	f101 0510 	add.w	r5, r1, #16
 800a116:	4646      	mov	r6, r8
 800a118:	e05a      	b.n	800a1d0 <arm_cmplx_mag_f32+0xd0>
 800a11a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a11e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a126:	f040 80a4 	bne.w	800a272 <arm_cmplx_mag_f32+0x172>
 800a12a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a12e:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800a132:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800a136:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a13a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a13e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14a:	f2c0 808f 	blt.w	800a26c <arm_cmplx_mag_f32+0x16c>
 800a14e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a152:	eeb4 0a40 	vcmp.f32	s0, s0
 800a156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15a:	f040 80af 	bne.w	800a2bc <arm_cmplx_mag_f32+0x1bc>
 800a15e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a162:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a166:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a16a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a16e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a172:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	db72      	blt.n	800a266 <arm_cmplx_mag_f32+0x166>
 800a180:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a184:	eeb4 0a40 	vcmp.f32	s0, s0
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	f040 808c 	bne.w	800a2a8 <arm_cmplx_mag_f32+0x1a8>
 800a190:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a194:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a198:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a19c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1a0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1a4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a1a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b0:	db20      	blt.n	800a1f4 <arm_cmplx_mag_f32+0xf4>
 800a1b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a1b6:	eeb4 0a40 	vcmp.f32	s0, s0
 800a1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1be:	d169      	bne.n	800a294 <arm_cmplx_mag_f32+0x194>
 800a1c0:	3e01      	subs	r6, #1
 800a1c2:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a1c6:	f104 0420 	add.w	r4, r4, #32
 800a1ca:	f105 0510 	add.w	r5, r5, #16
 800a1ce:	d019      	beq.n	800a204 <arm_cmplx_mag_f32+0x104>
 800a1d0:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800a1d4:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800a1d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a1e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ec:	da95      	bge.n	800a11a <arm_cmplx_mag_f32+0x1a>
 800a1ee:	f845 7c10 	str.w	r7, [r5, #-16]
 800a1f2:	e79c      	b.n	800a12e <arm_cmplx_mag_f32+0x2e>
 800a1f4:	3e01      	subs	r6, #1
 800a1f6:	f845 7c04 	str.w	r7, [r5, #-4]
 800a1fa:	f104 0420 	add.w	r4, r4, #32
 800a1fe:	f105 0510 	add.w	r5, r5, #16
 800a202:	d1e5      	bne.n	800a1d0 <arm_cmplx_mag_f32+0xd0>
 800a204:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a208:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a20c:	f012 0503 	ands.w	r5, r2, #3
 800a210:	d026      	beq.n	800a260 <arm_cmplx_mag_f32+0x160>
 800a212:	2600      	movs	r6, #0
 800a214:	f100 0408 	add.w	r4, r0, #8
 800a218:	e00c      	b.n	800a234 <arm_cmplx_mag_f32+0x134>
 800a21a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a21e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a226:	d12e      	bne.n	800a286 <arm_cmplx_mag_f32+0x186>
 800a228:	3d01      	subs	r5, #1
 800a22a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a22e:	f104 0408 	add.w	r4, r4, #8
 800a232:	d015      	beq.n	800a260 <arm_cmplx_mag_f32+0x160>
 800a234:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a238:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a23c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a240:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a244:	3104      	adds	r1, #4
 800a246:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a24a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a252:	dae2      	bge.n	800a21a <arm_cmplx_mag_f32+0x11a>
 800a254:	3d01      	subs	r5, #1
 800a256:	f841 6c04 	str.w	r6, [r1, #-4]
 800a25a:	f104 0408 	add.w	r4, r4, #8
 800a25e:	d1e9      	bne.n	800a234 <arm_cmplx_mag_f32+0x134>
 800a260:	b004      	add	sp, #16
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a266:	f845 7c08 	str.w	r7, [r5, #-8]
 800a26a:	e793      	b.n	800a194 <arm_cmplx_mag_f32+0x94>
 800a26c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800a270:	e777      	b.n	800a162 <arm_cmplx_mag_f32+0x62>
 800a272:	eeb0 0a67 	vmov.f32	s0, s15
 800a276:	9203      	str	r2, [sp, #12]
 800a278:	9102      	str	r1, [sp, #8]
 800a27a:	9001      	str	r0, [sp, #4]
 800a27c:	f000 fda8 	bl	800add0 <sqrtf>
 800a280:	a801      	add	r0, sp, #4
 800a282:	c807      	ldmia	r0, {r0, r1, r2}
 800a284:	e751      	b.n	800a12a <arm_cmplx_mag_f32+0x2a>
 800a286:	eeb0 0a67 	vmov.f32	s0, s15
 800a28a:	9101      	str	r1, [sp, #4]
 800a28c:	f000 fda0 	bl	800add0 <sqrtf>
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	e7c9      	b.n	800a228 <arm_cmplx_mag_f32+0x128>
 800a294:	eeb0 0a67 	vmov.f32	s0, s15
 800a298:	9203      	str	r2, [sp, #12]
 800a29a:	9102      	str	r1, [sp, #8]
 800a29c:	9001      	str	r0, [sp, #4]
 800a29e:	f000 fd97 	bl	800add0 <sqrtf>
 800a2a2:	a801      	add	r0, sp, #4
 800a2a4:	c807      	ldmia	r0, {r0, r1, r2}
 800a2a6:	e78b      	b.n	800a1c0 <arm_cmplx_mag_f32+0xc0>
 800a2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ac:	9203      	str	r2, [sp, #12]
 800a2ae:	9102      	str	r1, [sp, #8]
 800a2b0:	9001      	str	r0, [sp, #4]
 800a2b2:	f000 fd8d 	bl	800add0 <sqrtf>
 800a2b6:	a801      	add	r0, sp, #4
 800a2b8:	c807      	ldmia	r0, {r0, r1, r2}
 800a2ba:	e769      	b.n	800a190 <arm_cmplx_mag_f32+0x90>
 800a2bc:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c0:	9203      	str	r2, [sp, #12]
 800a2c2:	9102      	str	r1, [sp, #8]
 800a2c4:	9001      	str	r0, [sp, #4]
 800a2c6:	f000 fd83 	bl	800add0 <sqrtf>
 800a2ca:	a801      	add	r0, sp, #4
 800a2cc:	c807      	ldmia	r0, {r0, r1, r2}
 800a2ce:	e746      	b.n	800a15e <arm_cmplx_mag_f32+0x5e>

0800a2d0 <arm_cos_f32>:
 800a2d0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800a344 <arm_cos_f32+0x74>
 800a2d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2d8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a2dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a2e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a2ec:	d504      	bpl.n	800a2f8 <arm_cos_f32+0x28>
 800a2ee:	ee17 3a90 	vmov	r3, s15
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2fc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800a348 <arm_cos_f32+0x78>
 800a300:	4a12      	ldr	r2, [pc, #72]	@ (800a34c <arm_cos_f32+0x7c>)
 800a302:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a30a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a30e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800a312:	ee17 3a90 	vmov	r3, s15
 800a316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a326:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a32a:	edd1 6a01 	vldr	s13, [r1, #4]
 800a32e:	ed91 0a00 	vldr	s0, [r1]
 800a332:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a33a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a33e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a342:	4770      	bx	lr
 800a344:	3e22f983 	.word	0x3e22f983
 800a348:	44000000 	.word	0x44000000
 800a34c:	0800e278 	.word	0x0800e278

0800a350 <arm_bitreversal_f32>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b085      	sub	sp, #20
 800a356:	0849      	lsrs	r1, r1, #1
 800a358:	0052      	lsls	r2, r2, #1
 800a35a:	2400      	movs	r4, #0
 800a35c:	9203      	str	r2, [sp, #12]
 800a35e:	1e8a      	subs	r2, r1, #2
 800a360:	9101      	str	r1, [sp, #4]
 800a362:	f101 0c01 	add.w	ip, r1, #1
 800a366:	9202      	str	r2, [sp, #8]
 800a368:	4621      	mov	r1, r4
 800a36a:	4622      	mov	r2, r4
 800a36c:	9d01      	ldr	r5, [sp, #4]
 800a36e:	3101      	adds	r1, #1
 800a370:	442a      	add	r2, r5
 800a372:	00c9      	lsls	r1, r1, #3
 800a374:	00d2      	lsls	r2, r2, #3
 800a376:	1846      	adds	r6, r0, r1
 800a378:	1885      	adds	r5, r0, r2
 800a37a:	3104      	adds	r1, #4
 800a37c:	3204      	adds	r2, #4
 800a37e:	6837      	ldr	r7, [r6, #0]
 800a380:	f8d5 e000 	ldr.w	lr, [r5]
 800a384:	f8c6 e000 	str.w	lr, [r6]
 800a388:	4401      	add	r1, r0
 800a38a:	4402      	add	r2, r0
 800a38c:	602f      	str	r7, [r5, #0]
 800a38e:	3402      	adds	r4, #2
 800a390:	680e      	ldr	r6, [r1, #0]
 800a392:	f8d2 9000 	ldr.w	r9, [r2]
 800a396:	f8c1 9000 	str.w	r9, [r1]
 800a39a:	b2a4      	uxth	r4, r4
 800a39c:	6016      	str	r6, [r2, #0]
 800a39e:	eb04 050c 	add.w	r5, r4, ip
 800a3a2:	881a      	ldrh	r2, [r3, #0]
 800a3a4:	00ed      	lsls	r5, r5, #3
 800a3a6:	eb00 0e05 	add.w	lr, r0, r5
 800a3aa:	3504      	adds	r5, #4
 800a3ac:	9500      	str	r5, [sp, #0]
 800a3ae:	eb02 010c 	add.w	r1, r2, ip
 800a3b2:	9d02      	ldr	r5, [sp, #8]
 800a3b4:	00c9      	lsls	r1, r1, #3
 800a3b6:	00e7      	lsls	r7, r4, #3
 800a3b8:	00d6      	lsls	r6, r2, #3
 800a3ba:	f101 0b04 	add.w	fp, r1, #4
 800a3be:	eb00 0901 	add.w	r9, r0, r1
 800a3c2:	42ac      	cmp	r4, r5
 800a3c4:	9903      	ldr	r1, [sp, #12]
 800a3c6:	9d00      	ldr	r5, [sp, #0]
 800a3c8:	eb00 0807 	add.w	r8, r0, r7
 800a3cc:	eb00 0a06 	add.w	sl, r0, r6
 800a3d0:	f107 0704 	add.w	r7, r7, #4
 800a3d4:	f106 0604 	add.w	r6, r6, #4
 800a3d8:	440b      	add	r3, r1
 800a3da:	4407      	add	r7, r0
 800a3dc:	4406      	add	r6, r0
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4405      	add	r5, r0
 800a3e2:	4483      	add	fp, r0
 800a3e4:	d820      	bhi.n	800a428 <arm_bitreversal_f32+0xd8>
 800a3e6:	42a2      	cmp	r2, r4
 800a3e8:	d9c0      	bls.n	800a36c <arm_bitreversal_f32+0x1c>
 800a3ea:	edd8 7a00 	vldr	s15, [r8]
 800a3ee:	ed9a 7a00 	vldr	s14, [sl]
 800a3f2:	ed88 7a00 	vstr	s14, [r8]
 800a3f6:	edca 7a00 	vstr	s15, [sl]
 800a3fa:	f8d7 8000 	ldr.w	r8, [r7]
 800a3fe:	f8d6 a000 	ldr.w	sl, [r6]
 800a402:	f8c7 a000 	str.w	sl, [r7]
 800a406:	f8c6 8000 	str.w	r8, [r6]
 800a40a:	f8de 6000 	ldr.w	r6, [lr]
 800a40e:	f8d9 7000 	ldr.w	r7, [r9]
 800a412:	f8ce 7000 	str.w	r7, [lr]
 800a416:	f8c9 6000 	str.w	r6, [r9]
 800a41a:	682e      	ldr	r6, [r5, #0]
 800a41c:	f8db 7000 	ldr.w	r7, [fp]
 800a420:	602f      	str	r7, [r5, #0]
 800a422:	f8cb 6000 	str.w	r6, [fp]
 800a426:	e7a1      	b.n	800a36c <arm_bitreversal_f32+0x1c>
 800a428:	b005      	add	sp, #20
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	bf00      	nop

0800a430 <sniprintf>:
 800a430:	b40c      	push	{r2, r3}
 800a432:	b530      	push	{r4, r5, lr}
 800a434:	4b18      	ldr	r3, [pc, #96]	@ (800a498 <sniprintf+0x68>)
 800a436:	1e0c      	subs	r4, r1, #0
 800a438:	681d      	ldr	r5, [r3, #0]
 800a43a:	b09d      	sub	sp, #116	@ 0x74
 800a43c:	da08      	bge.n	800a450 <sniprintf+0x20>
 800a43e:	238b      	movs	r3, #139	@ 0x8b
 800a440:	602b      	str	r3, [r5, #0]
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	b01d      	add	sp, #116	@ 0x74
 800a448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a44c:	b002      	add	sp, #8
 800a44e:	4770      	bx	lr
 800a450:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a454:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a458:	f04f 0300 	mov.w	r3, #0
 800a45c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a45e:	bf14      	ite	ne
 800a460:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a464:	4623      	moveq	r3, r4
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a46e:	9002      	str	r0, [sp, #8]
 800a470:	9006      	str	r0, [sp, #24]
 800a472:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a476:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a478:	ab21      	add	r3, sp, #132	@ 0x84
 800a47a:	a902      	add	r1, sp, #8
 800a47c:	4628      	mov	r0, r5
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	f000 f9b0 	bl	800a7e4 <_svfiprintf_r>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	bfbc      	itt	lt
 800a488:	238b      	movlt	r3, #139	@ 0x8b
 800a48a:	602b      	strlt	r3, [r5, #0]
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	d0da      	beq.n	800a446 <sniprintf+0x16>
 800a490:	9b02      	ldr	r3, [sp, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	e7d6      	b.n	800a446 <sniprintf+0x16>
 800a498:	20000198 	.word	0x20000198

0800a49c <siprintf>:
 800a49c:	b40e      	push	{r1, r2, r3}
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	b09d      	sub	sp, #116	@ 0x74
 800a4a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a4a4:	9002      	str	r0, [sp, #8]
 800a4a6:	9006      	str	r0, [sp, #24]
 800a4a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4ac:	480a      	ldr	r0, [pc, #40]	@ (800a4d8 <siprintf+0x3c>)
 800a4ae:	9107      	str	r1, [sp, #28]
 800a4b0:	9104      	str	r1, [sp, #16]
 800a4b2:	490a      	ldr	r1, [pc, #40]	@ (800a4dc <siprintf+0x40>)
 800a4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b8:	9105      	str	r1, [sp, #20]
 800a4ba:	2400      	movs	r4, #0
 800a4bc:	a902      	add	r1, sp, #8
 800a4be:	6800      	ldr	r0, [r0, #0]
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a4c4:	f000 f98e 	bl	800a7e4 <_svfiprintf_r>
 800a4c8:	9b02      	ldr	r3, [sp, #8]
 800a4ca:	701c      	strb	r4, [r3, #0]
 800a4cc:	b01d      	add	sp, #116	@ 0x74
 800a4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d2:	b003      	add	sp, #12
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20000198 	.word	0x20000198
 800a4dc:	ffff0208 	.word	0xffff0208

0800a4e0 <memset>:
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d100      	bne.n	800a4ea <memset+0xa>
 800a4e8:	4770      	bx	lr
 800a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ee:	e7f9      	b.n	800a4e4 <memset+0x4>

0800a4f0 <__libc_init_array>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a528 <__libc_init_array+0x38>)
 800a4f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a52c <__libc_init_array+0x3c>)
 800a4f6:	1b64      	subs	r4, r4, r5
 800a4f8:	10a4      	asrs	r4, r4, #2
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	d109      	bne.n	800a514 <__libc_init_array+0x24>
 800a500:	4d0b      	ldr	r5, [pc, #44]	@ (800a530 <__libc_init_array+0x40>)
 800a502:	4c0c      	ldr	r4, [pc, #48]	@ (800a534 <__libc_init_array+0x44>)
 800a504:	f000 fc9a 	bl	800ae3c <_init>
 800a508:	1b64      	subs	r4, r4, r5
 800a50a:	10a4      	asrs	r4, r4, #2
 800a50c:	2600      	movs	r6, #0
 800a50e:	42a6      	cmp	r6, r4
 800a510:	d105      	bne.n	800a51e <__libc_init_array+0x2e>
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	f855 3b04 	ldr.w	r3, [r5], #4
 800a518:	4798      	blx	r3
 800a51a:	3601      	adds	r6, #1
 800a51c:	e7ee      	b.n	800a4fc <__libc_init_array+0xc>
 800a51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a522:	4798      	blx	r3
 800a524:	3601      	adds	r6, #1
 800a526:	e7f2      	b.n	800a50e <__libc_init_array+0x1e>
 800a528:	08016ab8 	.word	0x08016ab8
 800a52c:	08016ab8 	.word	0x08016ab8
 800a530:	08016ab8 	.word	0x08016ab8
 800a534:	08016abc 	.word	0x08016abc

0800a538 <__retarget_lock_acquire_recursive>:
 800a538:	4770      	bx	lr

0800a53a <__retarget_lock_release_recursive>:
 800a53a:	4770      	bx	lr

0800a53c <_free_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4605      	mov	r5, r0
 800a540:	2900      	cmp	r1, #0
 800a542:	d041      	beq.n	800a5c8 <_free_r+0x8c>
 800a544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a548:	1f0c      	subs	r4, r1, #4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfb8      	it	lt
 800a54e:	18e4      	addlt	r4, r4, r3
 800a550:	f000 f8e0 	bl	800a714 <__malloc_lock>
 800a554:	4a1d      	ldr	r2, [pc, #116]	@ (800a5cc <_free_r+0x90>)
 800a556:	6813      	ldr	r3, [r2, #0]
 800a558:	b933      	cbnz	r3, 800a568 <_free_r+0x2c>
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	6014      	str	r4, [r2, #0]
 800a55e:	4628      	mov	r0, r5
 800a560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a564:	f000 b8dc 	b.w	800a720 <__malloc_unlock>
 800a568:	42a3      	cmp	r3, r4
 800a56a:	d908      	bls.n	800a57e <_free_r+0x42>
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	1821      	adds	r1, r4, r0
 800a570:	428b      	cmp	r3, r1
 800a572:	bf01      	itttt	eq
 800a574:	6819      	ldreq	r1, [r3, #0]
 800a576:	685b      	ldreq	r3, [r3, #4]
 800a578:	1809      	addeq	r1, r1, r0
 800a57a:	6021      	streq	r1, [r4, #0]
 800a57c:	e7ed      	b.n	800a55a <_free_r+0x1e>
 800a57e:	461a      	mov	r2, r3
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	b10b      	cbz	r3, 800a588 <_free_r+0x4c>
 800a584:	42a3      	cmp	r3, r4
 800a586:	d9fa      	bls.n	800a57e <_free_r+0x42>
 800a588:	6811      	ldr	r1, [r2, #0]
 800a58a:	1850      	adds	r0, r2, r1
 800a58c:	42a0      	cmp	r0, r4
 800a58e:	d10b      	bne.n	800a5a8 <_free_r+0x6c>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	4401      	add	r1, r0
 800a594:	1850      	adds	r0, r2, r1
 800a596:	4283      	cmp	r3, r0
 800a598:	6011      	str	r1, [r2, #0]
 800a59a:	d1e0      	bne.n	800a55e <_free_r+0x22>
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	6053      	str	r3, [r2, #4]
 800a5a2:	4408      	add	r0, r1
 800a5a4:	6010      	str	r0, [r2, #0]
 800a5a6:	e7da      	b.n	800a55e <_free_r+0x22>
 800a5a8:	d902      	bls.n	800a5b0 <_free_r+0x74>
 800a5aa:	230c      	movs	r3, #12
 800a5ac:	602b      	str	r3, [r5, #0]
 800a5ae:	e7d6      	b.n	800a55e <_free_r+0x22>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	1821      	adds	r1, r4, r0
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	bf04      	itt	eq
 800a5b8:	6819      	ldreq	r1, [r3, #0]
 800a5ba:	685b      	ldreq	r3, [r3, #4]
 800a5bc:	6063      	str	r3, [r4, #4]
 800a5be:	bf04      	itt	eq
 800a5c0:	1809      	addeq	r1, r1, r0
 800a5c2:	6021      	streq	r1, [r4, #0]
 800a5c4:	6054      	str	r4, [r2, #4]
 800a5c6:	e7ca      	b.n	800a55e <_free_r+0x22>
 800a5c8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ca:	bf00      	nop
 800a5cc:	2000086c 	.word	0x2000086c

0800a5d0 <sbrk_aligned>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4e0f      	ldr	r6, [pc, #60]	@ (800a610 <sbrk_aligned+0x40>)
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	6831      	ldr	r1, [r6, #0]
 800a5d8:	4605      	mov	r5, r0
 800a5da:	b911      	cbnz	r1, 800a5e2 <sbrk_aligned+0x12>
 800a5dc:	f000 fba4 	bl	800ad28 <_sbrk_r>
 800a5e0:	6030      	str	r0, [r6, #0]
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f000 fb9f 	bl	800ad28 <_sbrk_r>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d103      	bne.n	800a5f6 <sbrk_aligned+0x26>
 800a5ee:	f04f 34ff 	mov.w	r4, #4294967295
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	1cc4      	adds	r4, r0, #3
 800a5f8:	f024 0403 	bic.w	r4, r4, #3
 800a5fc:	42a0      	cmp	r0, r4
 800a5fe:	d0f8      	beq.n	800a5f2 <sbrk_aligned+0x22>
 800a600:	1a21      	subs	r1, r4, r0
 800a602:	4628      	mov	r0, r5
 800a604:	f000 fb90 	bl	800ad28 <_sbrk_r>
 800a608:	3001      	adds	r0, #1
 800a60a:	d1f2      	bne.n	800a5f2 <sbrk_aligned+0x22>
 800a60c:	e7ef      	b.n	800a5ee <sbrk_aligned+0x1e>
 800a60e:	bf00      	nop
 800a610:	20000868 	.word	0x20000868

0800a614 <_malloc_r>:
 800a614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a618:	1ccd      	adds	r5, r1, #3
 800a61a:	f025 0503 	bic.w	r5, r5, #3
 800a61e:	3508      	adds	r5, #8
 800a620:	2d0c      	cmp	r5, #12
 800a622:	bf38      	it	cc
 800a624:	250c      	movcc	r5, #12
 800a626:	2d00      	cmp	r5, #0
 800a628:	4606      	mov	r6, r0
 800a62a:	db01      	blt.n	800a630 <_malloc_r+0x1c>
 800a62c:	42a9      	cmp	r1, r5
 800a62e:	d904      	bls.n	800a63a <_malloc_r+0x26>
 800a630:	230c      	movs	r3, #12
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	2000      	movs	r0, #0
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a710 <_malloc_r+0xfc>
 800a63e:	f000 f869 	bl	800a714 <__malloc_lock>
 800a642:	f8d8 3000 	ldr.w	r3, [r8]
 800a646:	461c      	mov	r4, r3
 800a648:	bb44      	cbnz	r4, 800a69c <_malloc_r+0x88>
 800a64a:	4629      	mov	r1, r5
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7ff ffbf 	bl	800a5d0 <sbrk_aligned>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	4604      	mov	r4, r0
 800a656:	d158      	bne.n	800a70a <_malloc_r+0xf6>
 800a658:	f8d8 4000 	ldr.w	r4, [r8]
 800a65c:	4627      	mov	r7, r4
 800a65e:	2f00      	cmp	r7, #0
 800a660:	d143      	bne.n	800a6ea <_malloc_r+0xd6>
 800a662:	2c00      	cmp	r4, #0
 800a664:	d04b      	beq.n	800a6fe <_malloc_r+0xea>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	4639      	mov	r1, r7
 800a66a:	4630      	mov	r0, r6
 800a66c:	eb04 0903 	add.w	r9, r4, r3
 800a670:	f000 fb5a 	bl	800ad28 <_sbrk_r>
 800a674:	4581      	cmp	r9, r0
 800a676:	d142      	bne.n	800a6fe <_malloc_r+0xea>
 800a678:	6821      	ldr	r1, [r4, #0]
 800a67a:	1a6d      	subs	r5, r5, r1
 800a67c:	4629      	mov	r1, r5
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff ffa6 	bl	800a5d0 <sbrk_aligned>
 800a684:	3001      	adds	r0, #1
 800a686:	d03a      	beq.n	800a6fe <_malloc_r+0xea>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	442b      	add	r3, r5
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	f8d8 3000 	ldr.w	r3, [r8]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	bb62      	cbnz	r2, 800a6f0 <_malloc_r+0xdc>
 800a696:	f8c8 7000 	str.w	r7, [r8]
 800a69a:	e00f      	b.n	800a6bc <_malloc_r+0xa8>
 800a69c:	6822      	ldr	r2, [r4, #0]
 800a69e:	1b52      	subs	r2, r2, r5
 800a6a0:	d420      	bmi.n	800a6e4 <_malloc_r+0xd0>
 800a6a2:	2a0b      	cmp	r2, #11
 800a6a4:	d917      	bls.n	800a6d6 <_malloc_r+0xc2>
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	6025      	str	r5, [r4, #0]
 800a6ac:	bf18      	it	ne
 800a6ae:	6059      	strne	r1, [r3, #4]
 800a6b0:	6863      	ldr	r3, [r4, #4]
 800a6b2:	bf08      	it	eq
 800a6b4:	f8c8 1000 	streq.w	r1, [r8]
 800a6b8:	5162      	str	r2, [r4, r5]
 800a6ba:	604b      	str	r3, [r1, #4]
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f000 f82f 	bl	800a720 <__malloc_unlock>
 800a6c2:	f104 000b 	add.w	r0, r4, #11
 800a6c6:	1d23      	adds	r3, r4, #4
 800a6c8:	f020 0007 	bic.w	r0, r0, #7
 800a6cc:	1ac2      	subs	r2, r0, r3
 800a6ce:	bf1c      	itt	ne
 800a6d0:	1a1b      	subne	r3, r3, r0
 800a6d2:	50a3      	strne	r3, [r4, r2]
 800a6d4:	e7af      	b.n	800a636 <_malloc_r+0x22>
 800a6d6:	6862      	ldr	r2, [r4, #4]
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	bf0c      	ite	eq
 800a6dc:	f8c8 2000 	streq.w	r2, [r8]
 800a6e0:	605a      	strne	r2, [r3, #4]
 800a6e2:	e7eb      	b.n	800a6bc <_malloc_r+0xa8>
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	6864      	ldr	r4, [r4, #4]
 800a6e8:	e7ae      	b.n	800a648 <_malloc_r+0x34>
 800a6ea:	463c      	mov	r4, r7
 800a6ec:	687f      	ldr	r7, [r7, #4]
 800a6ee:	e7b6      	b.n	800a65e <_malloc_r+0x4a>
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	d1fb      	bne.n	800a6f0 <_malloc_r+0xdc>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6053      	str	r3, [r2, #4]
 800a6fc:	e7de      	b.n	800a6bc <_malloc_r+0xa8>
 800a6fe:	230c      	movs	r3, #12
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	4630      	mov	r0, r6
 800a704:	f000 f80c 	bl	800a720 <__malloc_unlock>
 800a708:	e794      	b.n	800a634 <_malloc_r+0x20>
 800a70a:	6005      	str	r5, [r0, #0]
 800a70c:	e7d6      	b.n	800a6bc <_malloc_r+0xa8>
 800a70e:	bf00      	nop
 800a710:	2000086c 	.word	0x2000086c

0800a714 <__malloc_lock>:
 800a714:	4801      	ldr	r0, [pc, #4]	@ (800a71c <__malloc_lock+0x8>)
 800a716:	f7ff bf0f 	b.w	800a538 <__retarget_lock_acquire_recursive>
 800a71a:	bf00      	nop
 800a71c:	20000864 	.word	0x20000864

0800a720 <__malloc_unlock>:
 800a720:	4801      	ldr	r0, [pc, #4]	@ (800a728 <__malloc_unlock+0x8>)
 800a722:	f7ff bf0a 	b.w	800a53a <__retarget_lock_release_recursive>
 800a726:	bf00      	nop
 800a728:	20000864 	.word	0x20000864

0800a72c <__ssputs_r>:
 800a72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a730:	688e      	ldr	r6, [r1, #8]
 800a732:	461f      	mov	r7, r3
 800a734:	42be      	cmp	r6, r7
 800a736:	680b      	ldr	r3, [r1, #0]
 800a738:	4682      	mov	sl, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4690      	mov	r8, r2
 800a73e:	d82d      	bhi.n	800a79c <__ssputs_r+0x70>
 800a740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a748:	d026      	beq.n	800a798 <__ssputs_r+0x6c>
 800a74a:	6965      	ldr	r5, [r4, #20]
 800a74c:	6909      	ldr	r1, [r1, #16]
 800a74e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a752:	eba3 0901 	sub.w	r9, r3, r1
 800a756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a75a:	1c7b      	adds	r3, r7, #1
 800a75c:	444b      	add	r3, r9
 800a75e:	106d      	asrs	r5, r5, #1
 800a760:	429d      	cmp	r5, r3
 800a762:	bf38      	it	cc
 800a764:	461d      	movcc	r5, r3
 800a766:	0553      	lsls	r3, r2, #21
 800a768:	d527      	bpl.n	800a7ba <__ssputs_r+0x8e>
 800a76a:	4629      	mov	r1, r5
 800a76c:	f7ff ff52 	bl	800a614 <_malloc_r>
 800a770:	4606      	mov	r6, r0
 800a772:	b360      	cbz	r0, 800a7ce <__ssputs_r+0xa2>
 800a774:	6921      	ldr	r1, [r4, #16]
 800a776:	464a      	mov	r2, r9
 800a778:	f000 fae6 	bl	800ad48 <memcpy>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a786:	81a3      	strh	r3, [r4, #12]
 800a788:	6126      	str	r6, [r4, #16]
 800a78a:	6165      	str	r5, [r4, #20]
 800a78c:	444e      	add	r6, r9
 800a78e:	eba5 0509 	sub.w	r5, r5, r9
 800a792:	6026      	str	r6, [r4, #0]
 800a794:	60a5      	str	r5, [r4, #8]
 800a796:	463e      	mov	r6, r7
 800a798:	42be      	cmp	r6, r7
 800a79a:	d900      	bls.n	800a79e <__ssputs_r+0x72>
 800a79c:	463e      	mov	r6, r7
 800a79e:	6820      	ldr	r0, [r4, #0]
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	f000 faa6 	bl	800acf4 <memmove>
 800a7a8:	68a3      	ldr	r3, [r4, #8]
 800a7aa:	1b9b      	subs	r3, r3, r6
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	4433      	add	r3, r6
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	f000 fad2 	bl	800ad64 <_realloc_r>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d1e0      	bne.n	800a788 <__ssputs_r+0x5c>
 800a7c6:	6921      	ldr	r1, [r4, #16]
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f7ff feb7 	bl	800a53c <_free_r>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	f8ca 3000 	str.w	r3, [sl]
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e7e9      	b.n	800a7b6 <__ssputs_r+0x8a>
	...

0800a7e4 <_svfiprintf_r>:
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	898b      	ldrh	r3, [r1, #12]
 800a7ec:	061b      	lsls	r3, r3, #24
 800a7ee:	b09d      	sub	sp, #116	@ 0x74
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	d510      	bpl.n	800a81a <_svfiprintf_r+0x36>
 800a7f8:	690b      	ldr	r3, [r1, #16]
 800a7fa:	b973      	cbnz	r3, 800a81a <_svfiprintf_r+0x36>
 800a7fc:	2140      	movs	r1, #64	@ 0x40
 800a7fe:	f7ff ff09 	bl	800a614 <_malloc_r>
 800a802:	6028      	str	r0, [r5, #0]
 800a804:	6128      	str	r0, [r5, #16]
 800a806:	b930      	cbnz	r0, 800a816 <_svfiprintf_r+0x32>
 800a808:	230c      	movs	r3, #12
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	@ 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	2340      	movs	r3, #64	@ 0x40
 800a818:	616b      	str	r3, [r5, #20]
 800a81a:	2300      	movs	r3, #0
 800a81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a81e:	2320      	movs	r3, #32
 800a820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a824:	f8cd 800c 	str.w	r8, [sp, #12]
 800a828:	2330      	movs	r3, #48	@ 0x30
 800a82a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9c8 <_svfiprintf_r+0x1e4>
 800a82e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a832:	f04f 0901 	mov.w	r9, #1
 800a836:	4623      	mov	r3, r4
 800a838:	469a      	mov	sl, r3
 800a83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a83e:	b10a      	cbz	r2, 800a844 <_svfiprintf_r+0x60>
 800a840:	2a25      	cmp	r2, #37	@ 0x25
 800a842:	d1f9      	bne.n	800a838 <_svfiprintf_r+0x54>
 800a844:	ebba 0b04 	subs.w	fp, sl, r4
 800a848:	d00b      	beq.n	800a862 <_svfiprintf_r+0x7e>
 800a84a:	465b      	mov	r3, fp
 800a84c:	4622      	mov	r2, r4
 800a84e:	4629      	mov	r1, r5
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff ff6b 	bl	800a72c <__ssputs_r>
 800a856:	3001      	adds	r0, #1
 800a858:	f000 80a7 	beq.w	800a9aa <_svfiprintf_r+0x1c6>
 800a85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a85e:	445a      	add	r2, fp
 800a860:	9209      	str	r2, [sp, #36]	@ 0x24
 800a862:	f89a 3000 	ldrb.w	r3, [sl]
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 809f 	beq.w	800a9aa <_svfiprintf_r+0x1c6>
 800a86c:	2300      	movs	r3, #0
 800a86e:	f04f 32ff 	mov.w	r2, #4294967295
 800a872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a876:	f10a 0a01 	add.w	sl, sl, #1
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	9307      	str	r3, [sp, #28]
 800a87e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a882:	931a      	str	r3, [sp, #104]	@ 0x68
 800a884:	4654      	mov	r4, sl
 800a886:	2205      	movs	r2, #5
 800a888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88c:	484e      	ldr	r0, [pc, #312]	@ (800a9c8 <_svfiprintf_r+0x1e4>)
 800a88e:	f7f5 fcb7 	bl	8000200 <memchr>
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	b9d8      	cbnz	r0, 800a8ce <_svfiprintf_r+0xea>
 800a896:	06d0      	lsls	r0, r2, #27
 800a898:	bf44      	itt	mi
 800a89a:	2320      	movmi	r3, #32
 800a89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a0:	0711      	lsls	r1, r2, #28
 800a8a2:	bf44      	itt	mi
 800a8a4:	232b      	movmi	r3, #43	@ 0x2b
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b0:	d015      	beq.n	800a8de <_svfiprintf_r+0xfa>
 800a8b2:	9a07      	ldr	r2, [sp, #28]
 800a8b4:	4654      	mov	r4, sl
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f04f 0c0a 	mov.w	ip, #10
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8c2:	3b30      	subs	r3, #48	@ 0x30
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	d94b      	bls.n	800a960 <_svfiprintf_r+0x17c>
 800a8c8:	b1b0      	cbz	r0, 800a8f8 <_svfiprintf_r+0x114>
 800a8ca:	9207      	str	r2, [sp, #28]
 800a8cc:	e014      	b.n	800a8f8 <_svfiprintf_r+0x114>
 800a8ce:	eba0 0308 	sub.w	r3, r0, r8
 800a8d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	46a2      	mov	sl, r4
 800a8dc:	e7d2      	b.n	800a884 <_svfiprintf_r+0xa0>
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	1d19      	adds	r1, r3, #4
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	9103      	str	r1, [sp, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfbb      	ittet	lt
 800a8ea:	425b      	neglt	r3, r3
 800a8ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f0:	9307      	strge	r3, [sp, #28]
 800a8f2:	9307      	strlt	r3, [sp, #28]
 800a8f4:	bfb8      	it	lt
 800a8f6:	9204      	strlt	r2, [sp, #16]
 800a8f8:	7823      	ldrb	r3, [r4, #0]
 800a8fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8fc:	d10a      	bne.n	800a914 <_svfiprintf_r+0x130>
 800a8fe:	7863      	ldrb	r3, [r4, #1]
 800a900:	2b2a      	cmp	r3, #42	@ 0x2a
 800a902:	d132      	bne.n	800a96a <_svfiprintf_r+0x186>
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	1d1a      	adds	r2, r3, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	9203      	str	r2, [sp, #12]
 800a90c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a910:	3402      	adds	r4, #2
 800a912:	9305      	str	r3, [sp, #20]
 800a914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9d8 <_svfiprintf_r+0x1f4>
 800a918:	7821      	ldrb	r1, [r4, #0]
 800a91a:	2203      	movs	r2, #3
 800a91c:	4650      	mov	r0, sl
 800a91e:	f7f5 fc6f 	bl	8000200 <memchr>
 800a922:	b138      	cbz	r0, 800a934 <_svfiprintf_r+0x150>
 800a924:	9b04      	ldr	r3, [sp, #16]
 800a926:	eba0 000a 	sub.w	r0, r0, sl
 800a92a:	2240      	movs	r2, #64	@ 0x40
 800a92c:	4082      	lsls	r2, r0
 800a92e:	4313      	orrs	r3, r2
 800a930:	3401      	adds	r4, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a938:	4824      	ldr	r0, [pc, #144]	@ (800a9cc <_svfiprintf_r+0x1e8>)
 800a93a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a93e:	2206      	movs	r2, #6
 800a940:	f7f5 fc5e 	bl	8000200 <memchr>
 800a944:	2800      	cmp	r0, #0
 800a946:	d036      	beq.n	800a9b6 <_svfiprintf_r+0x1d2>
 800a948:	4b21      	ldr	r3, [pc, #132]	@ (800a9d0 <_svfiprintf_r+0x1ec>)
 800a94a:	bb1b      	cbnz	r3, 800a994 <_svfiprintf_r+0x1b0>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	3307      	adds	r3, #7
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	3308      	adds	r3, #8
 800a956:	9303      	str	r3, [sp, #12]
 800a958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95a:	4433      	add	r3, r6
 800a95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95e:	e76a      	b.n	800a836 <_svfiprintf_r+0x52>
 800a960:	fb0c 3202 	mla	r2, ip, r2, r3
 800a964:	460c      	mov	r4, r1
 800a966:	2001      	movs	r0, #1
 800a968:	e7a8      	b.n	800a8bc <_svfiprintf_r+0xd8>
 800a96a:	2300      	movs	r3, #0
 800a96c:	3401      	adds	r4, #1
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	4619      	mov	r1, r3
 800a972:	f04f 0c0a 	mov.w	ip, #10
 800a976:	4620      	mov	r0, r4
 800a978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a97c:	3a30      	subs	r2, #48	@ 0x30
 800a97e:	2a09      	cmp	r2, #9
 800a980:	d903      	bls.n	800a98a <_svfiprintf_r+0x1a6>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0c6      	beq.n	800a914 <_svfiprintf_r+0x130>
 800a986:	9105      	str	r1, [sp, #20]
 800a988:	e7c4      	b.n	800a914 <_svfiprintf_r+0x130>
 800a98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a98e:	4604      	mov	r4, r0
 800a990:	2301      	movs	r3, #1
 800a992:	e7f0      	b.n	800a976 <_svfiprintf_r+0x192>
 800a994:	ab03      	add	r3, sp, #12
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	462a      	mov	r2, r5
 800a99a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <_svfiprintf_r+0x1f0>)
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f3af 8000 	nop.w
 800a9a4:	1c42      	adds	r2, r0, #1
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	d1d6      	bne.n	800a958 <_svfiprintf_r+0x174>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	065b      	lsls	r3, r3, #25
 800a9ae:	f53f af2d 	bmi.w	800a80c <_svfiprintf_r+0x28>
 800a9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9b4:	e72c      	b.n	800a810 <_svfiprintf_r+0x2c>
 800a9b6:	ab03      	add	r3, sp, #12
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <_svfiprintf_r+0x1f0>)
 800a9be:	a904      	add	r1, sp, #16
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f000 f879 	bl	800aab8 <_printf_i>
 800a9c6:	e7ed      	b.n	800a9a4 <_svfiprintf_r+0x1c0>
 800a9c8:	08016a7c 	.word	0x08016a7c
 800a9cc:	08016a86 	.word	0x08016a86
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	0800a72d 	.word	0x0800a72d
 800a9d8:	08016a82 	.word	0x08016a82

0800a9dc <_printf_common>:
 800a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	4616      	mov	r6, r2
 800a9e2:	4698      	mov	r8, r3
 800a9e4:	688a      	ldr	r2, [r1, #8]
 800a9e6:	690b      	ldr	r3, [r1, #16]
 800a9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	bfb8      	it	lt
 800a9f0:	4613      	movlt	r3, r2
 800a9f2:	6033      	str	r3, [r6, #0]
 800a9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	b10a      	cbz	r2, 800aa02 <_printf_common+0x26>
 800a9fe:	3301      	adds	r3, #1
 800aa00:	6033      	str	r3, [r6, #0]
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	0699      	lsls	r1, r3, #26
 800aa06:	bf42      	ittt	mi
 800aa08:	6833      	ldrmi	r3, [r6, #0]
 800aa0a:	3302      	addmi	r3, #2
 800aa0c:	6033      	strmi	r3, [r6, #0]
 800aa0e:	6825      	ldr	r5, [r4, #0]
 800aa10:	f015 0506 	ands.w	r5, r5, #6
 800aa14:	d106      	bne.n	800aa24 <_printf_common+0x48>
 800aa16:	f104 0a19 	add.w	sl, r4, #25
 800aa1a:	68e3      	ldr	r3, [r4, #12]
 800aa1c:	6832      	ldr	r2, [r6, #0]
 800aa1e:	1a9b      	subs	r3, r3, r2
 800aa20:	42ab      	cmp	r3, r5
 800aa22:	dc26      	bgt.n	800aa72 <_printf_common+0x96>
 800aa24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa28:	6822      	ldr	r2, [r4, #0]
 800aa2a:	3b00      	subs	r3, #0
 800aa2c:	bf18      	it	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	0692      	lsls	r2, r2, #26
 800aa32:	d42b      	bmi.n	800aa8c <_printf_common+0xb0>
 800aa34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa38:	4641      	mov	r1, r8
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	47c8      	blx	r9
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d01e      	beq.n	800aa80 <_printf_common+0xa4>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	6922      	ldr	r2, [r4, #16]
 800aa46:	f003 0306 	and.w	r3, r3, #6
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	bf02      	ittt	eq
 800aa4e:	68e5      	ldreq	r5, [r4, #12]
 800aa50:	6833      	ldreq	r3, [r6, #0]
 800aa52:	1aed      	subeq	r5, r5, r3
 800aa54:	68a3      	ldr	r3, [r4, #8]
 800aa56:	bf0c      	ite	eq
 800aa58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa5c:	2500      	movne	r5, #0
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	bfc4      	itt	gt
 800aa62:	1a9b      	subgt	r3, r3, r2
 800aa64:	18ed      	addgt	r5, r5, r3
 800aa66:	2600      	movs	r6, #0
 800aa68:	341a      	adds	r4, #26
 800aa6a:	42b5      	cmp	r5, r6
 800aa6c:	d11a      	bne.n	800aaa4 <_printf_common+0xc8>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e008      	b.n	800aa84 <_printf_common+0xa8>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4652      	mov	r2, sl
 800aa76:	4641      	mov	r1, r8
 800aa78:	4638      	mov	r0, r7
 800aa7a:	47c8      	blx	r9
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d103      	bne.n	800aa88 <_printf_common+0xac>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa88:	3501      	adds	r5, #1
 800aa8a:	e7c6      	b.n	800aa1a <_printf_common+0x3e>
 800aa8c:	18e1      	adds	r1, r4, r3
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	2030      	movs	r0, #48	@ 0x30
 800aa92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa96:	4422      	add	r2, r4
 800aa98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	e7c7      	b.n	800aa34 <_printf_common+0x58>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4641      	mov	r1, r8
 800aaaa:	4638      	mov	r0, r7
 800aaac:	47c8      	blx	r9
 800aaae:	3001      	adds	r0, #1
 800aab0:	d0e6      	beq.n	800aa80 <_printf_common+0xa4>
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7d9      	b.n	800aa6a <_printf_common+0x8e>
	...

0800aab8 <_printf_i>:
 800aab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	7e0f      	ldrb	r7, [r1, #24]
 800aabe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aac0:	2f78      	cmp	r7, #120	@ 0x78
 800aac2:	4691      	mov	r9, r2
 800aac4:	4680      	mov	r8, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	469a      	mov	sl, r3
 800aaca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aace:	d807      	bhi.n	800aae0 <_printf_i+0x28>
 800aad0:	2f62      	cmp	r7, #98	@ 0x62
 800aad2:	d80a      	bhi.n	800aaea <_printf_i+0x32>
 800aad4:	2f00      	cmp	r7, #0
 800aad6:	f000 80d1 	beq.w	800ac7c <_printf_i+0x1c4>
 800aada:	2f58      	cmp	r7, #88	@ 0x58
 800aadc:	f000 80b8 	beq.w	800ac50 <_printf_i+0x198>
 800aae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aae8:	e03a      	b.n	800ab60 <_printf_i+0xa8>
 800aaea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aaee:	2b15      	cmp	r3, #21
 800aaf0:	d8f6      	bhi.n	800aae0 <_printf_i+0x28>
 800aaf2:	a101      	add	r1, pc, #4	@ (adr r1, 800aaf8 <_printf_i+0x40>)
 800aaf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf8:	0800ab51 	.word	0x0800ab51
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800aae1 	.word	0x0800aae1
 800ab04:	0800aae1 	.word	0x0800aae1
 800ab08:	0800aae1 	.word	0x0800aae1
 800ab0c:	0800aae1 	.word	0x0800aae1
 800ab10:	0800ab65 	.word	0x0800ab65
 800ab14:	0800aae1 	.word	0x0800aae1
 800ab18:	0800aae1 	.word	0x0800aae1
 800ab1c:	0800aae1 	.word	0x0800aae1
 800ab20:	0800aae1 	.word	0x0800aae1
 800ab24:	0800ac63 	.word	0x0800ac63
 800ab28:	0800ab8f 	.word	0x0800ab8f
 800ab2c:	0800ac1d 	.word	0x0800ac1d
 800ab30:	0800aae1 	.word	0x0800aae1
 800ab34:	0800aae1 	.word	0x0800aae1
 800ab38:	0800ac85 	.word	0x0800ac85
 800ab3c:	0800aae1 	.word	0x0800aae1
 800ab40:	0800ab8f 	.word	0x0800ab8f
 800ab44:	0800aae1 	.word	0x0800aae1
 800ab48:	0800aae1 	.word	0x0800aae1
 800ab4c:	0800ac25 	.word	0x0800ac25
 800ab50:	6833      	ldr	r3, [r6, #0]
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6032      	str	r2, [r6, #0]
 800ab58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab60:	2301      	movs	r3, #1
 800ab62:	e09c      	b.n	800ac9e <_printf_i+0x1e6>
 800ab64:	6833      	ldr	r3, [r6, #0]
 800ab66:	6820      	ldr	r0, [r4, #0]
 800ab68:	1d19      	adds	r1, r3, #4
 800ab6a:	6031      	str	r1, [r6, #0]
 800ab6c:	0606      	lsls	r6, r0, #24
 800ab6e:	d501      	bpl.n	800ab74 <_printf_i+0xbc>
 800ab70:	681d      	ldr	r5, [r3, #0]
 800ab72:	e003      	b.n	800ab7c <_printf_i+0xc4>
 800ab74:	0645      	lsls	r5, r0, #25
 800ab76:	d5fb      	bpl.n	800ab70 <_printf_i+0xb8>
 800ab78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	da03      	bge.n	800ab88 <_printf_i+0xd0>
 800ab80:	232d      	movs	r3, #45	@ 0x2d
 800ab82:	426d      	negs	r5, r5
 800ab84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab88:	4858      	ldr	r0, [pc, #352]	@ (800acec <_printf_i+0x234>)
 800ab8a:	230a      	movs	r3, #10
 800ab8c:	e011      	b.n	800abb2 <_printf_i+0xfa>
 800ab8e:	6821      	ldr	r1, [r4, #0]
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	0608      	lsls	r0, r1, #24
 800ab94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab98:	d402      	bmi.n	800aba0 <_printf_i+0xe8>
 800ab9a:	0649      	lsls	r1, r1, #25
 800ab9c:	bf48      	it	mi
 800ab9e:	b2ad      	uxthmi	r5, r5
 800aba0:	2f6f      	cmp	r7, #111	@ 0x6f
 800aba2:	4852      	ldr	r0, [pc, #328]	@ (800acec <_printf_i+0x234>)
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	bf14      	ite	ne
 800aba8:	230a      	movne	r3, #10
 800abaa:	2308      	moveq	r3, #8
 800abac:	2100      	movs	r1, #0
 800abae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abb2:	6866      	ldr	r6, [r4, #4]
 800abb4:	60a6      	str	r6, [r4, #8]
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	db05      	blt.n	800abc6 <_printf_i+0x10e>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	432e      	orrs	r6, r5
 800abbe:	f021 0104 	bic.w	r1, r1, #4
 800abc2:	6021      	str	r1, [r4, #0]
 800abc4:	d04b      	beq.n	800ac5e <_printf_i+0x1a6>
 800abc6:	4616      	mov	r6, r2
 800abc8:	fbb5 f1f3 	udiv	r1, r5, r3
 800abcc:	fb03 5711 	mls	r7, r3, r1, r5
 800abd0:	5dc7      	ldrb	r7, [r0, r7]
 800abd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abd6:	462f      	mov	r7, r5
 800abd8:	42bb      	cmp	r3, r7
 800abda:	460d      	mov	r5, r1
 800abdc:	d9f4      	bls.n	800abc8 <_printf_i+0x110>
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d10b      	bne.n	800abfa <_printf_i+0x142>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	07df      	lsls	r7, r3, #31
 800abe6:	d508      	bpl.n	800abfa <_printf_i+0x142>
 800abe8:	6923      	ldr	r3, [r4, #16]
 800abea:	6861      	ldr	r1, [r4, #4]
 800abec:	4299      	cmp	r1, r3
 800abee:	bfde      	ittt	le
 800abf0:	2330      	movle	r3, #48	@ 0x30
 800abf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abfa:	1b92      	subs	r2, r2, r6
 800abfc:	6122      	str	r2, [r4, #16]
 800abfe:	f8cd a000 	str.w	sl, [sp]
 800ac02:	464b      	mov	r3, r9
 800ac04:	aa03      	add	r2, sp, #12
 800ac06:	4621      	mov	r1, r4
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f7ff fee7 	bl	800a9dc <_printf_common>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d14a      	bne.n	800aca8 <_printf_i+0x1f0>
 800ac12:	f04f 30ff 	mov.w	r0, #4294967295
 800ac16:	b004      	add	sp, #16
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	f043 0320 	orr.w	r3, r3, #32
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	4832      	ldr	r0, [pc, #200]	@ (800acf0 <_printf_i+0x238>)
 800ac26:	2778      	movs	r7, #120	@ 0x78
 800ac28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	6831      	ldr	r1, [r6, #0]
 800ac30:	061f      	lsls	r7, r3, #24
 800ac32:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac36:	d402      	bmi.n	800ac3e <_printf_i+0x186>
 800ac38:	065f      	lsls	r7, r3, #25
 800ac3a:	bf48      	it	mi
 800ac3c:	b2ad      	uxthmi	r5, r5
 800ac3e:	6031      	str	r1, [r6, #0]
 800ac40:	07d9      	lsls	r1, r3, #31
 800ac42:	bf44      	itt	mi
 800ac44:	f043 0320 	orrmi.w	r3, r3, #32
 800ac48:	6023      	strmi	r3, [r4, #0]
 800ac4a:	b11d      	cbz	r5, 800ac54 <_printf_i+0x19c>
 800ac4c:	2310      	movs	r3, #16
 800ac4e:	e7ad      	b.n	800abac <_printf_i+0xf4>
 800ac50:	4826      	ldr	r0, [pc, #152]	@ (800acec <_printf_i+0x234>)
 800ac52:	e7e9      	b.n	800ac28 <_printf_i+0x170>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	f023 0320 	bic.w	r3, r3, #32
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	e7f6      	b.n	800ac4c <_printf_i+0x194>
 800ac5e:	4616      	mov	r6, r2
 800ac60:	e7bd      	b.n	800abde <_printf_i+0x126>
 800ac62:	6833      	ldr	r3, [r6, #0]
 800ac64:	6825      	ldr	r5, [r4, #0]
 800ac66:	6961      	ldr	r1, [r4, #20]
 800ac68:	1d18      	adds	r0, r3, #4
 800ac6a:	6030      	str	r0, [r6, #0]
 800ac6c:	062e      	lsls	r6, r5, #24
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	d501      	bpl.n	800ac76 <_printf_i+0x1be>
 800ac72:	6019      	str	r1, [r3, #0]
 800ac74:	e002      	b.n	800ac7c <_printf_i+0x1c4>
 800ac76:	0668      	lsls	r0, r5, #25
 800ac78:	d5fb      	bpl.n	800ac72 <_printf_i+0x1ba>
 800ac7a:	8019      	strh	r1, [r3, #0]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6123      	str	r3, [r4, #16]
 800ac80:	4616      	mov	r6, r2
 800ac82:	e7bc      	b.n	800abfe <_printf_i+0x146>
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	1d1a      	adds	r2, r3, #4
 800ac88:	6032      	str	r2, [r6, #0]
 800ac8a:	681e      	ldr	r6, [r3, #0]
 800ac8c:	6862      	ldr	r2, [r4, #4]
 800ac8e:	2100      	movs	r1, #0
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7f5 fab5 	bl	8000200 <memchr>
 800ac96:	b108      	cbz	r0, 800ac9c <_printf_i+0x1e4>
 800ac98:	1b80      	subs	r0, r0, r6
 800ac9a:	6060      	str	r0, [r4, #4]
 800ac9c:	6863      	ldr	r3, [r4, #4]
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	2300      	movs	r3, #0
 800aca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca6:	e7aa      	b.n	800abfe <_printf_i+0x146>
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	4632      	mov	r2, r6
 800acac:	4649      	mov	r1, r9
 800acae:	4640      	mov	r0, r8
 800acb0:	47d0      	blx	sl
 800acb2:	3001      	adds	r0, #1
 800acb4:	d0ad      	beq.n	800ac12 <_printf_i+0x15a>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	079b      	lsls	r3, r3, #30
 800acba:	d413      	bmi.n	800ace4 <_printf_i+0x22c>
 800acbc:	68e0      	ldr	r0, [r4, #12]
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	4298      	cmp	r0, r3
 800acc2:	bfb8      	it	lt
 800acc4:	4618      	movlt	r0, r3
 800acc6:	e7a6      	b.n	800ac16 <_printf_i+0x15e>
 800acc8:	2301      	movs	r3, #1
 800acca:	4632      	mov	r2, r6
 800accc:	4649      	mov	r1, r9
 800acce:	4640      	mov	r0, r8
 800acd0:	47d0      	blx	sl
 800acd2:	3001      	adds	r0, #1
 800acd4:	d09d      	beq.n	800ac12 <_printf_i+0x15a>
 800acd6:	3501      	adds	r5, #1
 800acd8:	68e3      	ldr	r3, [r4, #12]
 800acda:	9903      	ldr	r1, [sp, #12]
 800acdc:	1a5b      	subs	r3, r3, r1
 800acde:	42ab      	cmp	r3, r5
 800ace0:	dcf2      	bgt.n	800acc8 <_printf_i+0x210>
 800ace2:	e7eb      	b.n	800acbc <_printf_i+0x204>
 800ace4:	2500      	movs	r5, #0
 800ace6:	f104 0619 	add.w	r6, r4, #25
 800acea:	e7f5      	b.n	800acd8 <_printf_i+0x220>
 800acec:	08016a8d 	.word	0x08016a8d
 800acf0:	08016a9e 	.word	0x08016a9e

0800acf4 <memmove>:
 800acf4:	4288      	cmp	r0, r1
 800acf6:	b510      	push	{r4, lr}
 800acf8:	eb01 0402 	add.w	r4, r1, r2
 800acfc:	d902      	bls.n	800ad04 <memmove+0x10>
 800acfe:	4284      	cmp	r4, r0
 800ad00:	4623      	mov	r3, r4
 800ad02:	d807      	bhi.n	800ad14 <memmove+0x20>
 800ad04:	1e43      	subs	r3, r0, #1
 800ad06:	42a1      	cmp	r1, r4
 800ad08:	d008      	beq.n	800ad1c <memmove+0x28>
 800ad0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad12:	e7f8      	b.n	800ad06 <memmove+0x12>
 800ad14:	4402      	add	r2, r0
 800ad16:	4601      	mov	r1, r0
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	d100      	bne.n	800ad1e <memmove+0x2a>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad26:	e7f7      	b.n	800ad18 <memmove+0x24>

0800ad28 <_sbrk_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	@ (800ad44 <_sbrk_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f000 f874 	bl	800ae20 <_sbrk>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_sbrk_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_sbrk_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20000860 	.word	0x20000860

0800ad48 <memcpy>:
 800ad48:	440a      	add	r2, r1
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad50:	d100      	bne.n	800ad54 <memcpy+0xc>
 800ad52:	4770      	bx	lr
 800ad54:	b510      	push	{r4, lr}
 800ad56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad5e:	4291      	cmp	r1, r2
 800ad60:	d1f9      	bne.n	800ad56 <memcpy+0xe>
 800ad62:	bd10      	pop	{r4, pc}

0800ad64 <_realloc_r>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	4607      	mov	r7, r0
 800ad6a:	4614      	mov	r4, r2
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	b921      	cbnz	r1, 800ad7a <_realloc_r+0x16>
 800ad70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	4611      	mov	r1, r2
 800ad76:	f7ff bc4d 	b.w	800a614 <_malloc_r>
 800ad7a:	b92a      	cbnz	r2, 800ad88 <_realloc_r+0x24>
 800ad7c:	f7ff fbde 	bl	800a53c <_free_r>
 800ad80:	4625      	mov	r5, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	f000 f81a 	bl	800adc0 <_malloc_usable_size_r>
 800ad8c:	4284      	cmp	r4, r0
 800ad8e:	4606      	mov	r6, r0
 800ad90:	d802      	bhi.n	800ad98 <_realloc_r+0x34>
 800ad92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad96:	d8f4      	bhi.n	800ad82 <_realloc_r+0x1e>
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7ff fc3a 	bl	800a614 <_malloc_r>
 800ada0:	4680      	mov	r8, r0
 800ada2:	b908      	cbnz	r0, 800ada8 <_realloc_r+0x44>
 800ada4:	4645      	mov	r5, r8
 800ada6:	e7ec      	b.n	800ad82 <_realloc_r+0x1e>
 800ada8:	42b4      	cmp	r4, r6
 800adaa:	4622      	mov	r2, r4
 800adac:	4629      	mov	r1, r5
 800adae:	bf28      	it	cs
 800adb0:	4632      	movcs	r2, r6
 800adb2:	f7ff ffc9 	bl	800ad48 <memcpy>
 800adb6:	4629      	mov	r1, r5
 800adb8:	4638      	mov	r0, r7
 800adba:	f7ff fbbf 	bl	800a53c <_free_r>
 800adbe:	e7f1      	b.n	800ada4 <_realloc_r+0x40>

0800adc0 <_malloc_usable_size_r>:
 800adc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc4:	1f18      	subs	r0, r3, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbc      	itt	lt
 800adca:	580b      	ldrlt	r3, [r1, r0]
 800adcc:	18c0      	addlt	r0, r0, r3
 800adce:	4770      	bx	lr

0800add0 <sqrtf>:
 800add0:	b508      	push	{r3, lr}
 800add2:	ed2d 8b02 	vpush	{d8}
 800add6:	eeb0 8a40 	vmov.f32	s16, s0
 800adda:	f000 f817 	bl	800ae0c <__ieee754_sqrtf>
 800adde:	eeb4 8a48 	vcmp.f32	s16, s16
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	d60c      	bvs.n	800ae02 <sqrtf+0x32>
 800ade8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ae08 <sqrtf+0x38>
 800adec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800adf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf4:	d505      	bpl.n	800ae02 <sqrtf+0x32>
 800adf6:	f000 f80d 	bl	800ae14 <__errno>
 800adfa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800adfe:	2321      	movs	r3, #33	@ 0x21
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	ecbd 8b02 	vpop	{d8}
 800ae06:	bd08      	pop	{r3, pc}
 800ae08:	00000000 	.word	0x00000000

0800ae0c <__ieee754_sqrtf>:
 800ae0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ae10:	4770      	bx	lr
	...

0800ae14 <__errno>:
 800ae14:	4b01      	ldr	r3, [pc, #4]	@ (800ae1c <__errno+0x8>)
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20000198 	.word	0x20000198

0800ae20 <_sbrk>:
 800ae20:	4a04      	ldr	r2, [pc, #16]	@ (800ae34 <_sbrk+0x14>)
 800ae22:	6811      	ldr	r1, [r2, #0]
 800ae24:	4603      	mov	r3, r0
 800ae26:	b909      	cbnz	r1, 800ae2c <_sbrk+0xc>
 800ae28:	4903      	ldr	r1, [pc, #12]	@ (800ae38 <_sbrk+0x18>)
 800ae2a:	6011      	str	r1, [r2, #0]
 800ae2c:	6810      	ldr	r0, [r2, #0]
 800ae2e:	4403      	add	r3, r0
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	4770      	bx	lr
 800ae34:	20000870 	.word	0x20000870
 800ae38:	20000878 	.word	0x20000878

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
